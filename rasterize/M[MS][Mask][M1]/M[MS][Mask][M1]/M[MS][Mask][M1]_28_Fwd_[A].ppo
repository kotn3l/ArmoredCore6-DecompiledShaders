#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1473;
float _3853;
float _3854;
float _3855;
float _3856;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3865 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3876 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3887 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3898 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _453 = (_446 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _454 = (_446 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _455 = (_446 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _459 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _453;
    float _462 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _454;
    float _465 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _455;
    float _472 = ((_453 - _459) * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) + _459;
    float _473 = ((_454 - _462) * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) + _462;
    float _474 = ((_455 - _465) * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) + _465;
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _540 = _536.z;
    float _549 = ((_519.z - _540) * _446) + _540;
    float _552 = ((((_519.x - _538) * _446) + _538) * 2.0) + (-1.0);
    float _553 = ((((_519.y - _539) * _446) + _539) * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _3909 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _591 = (_552 + ((((_492.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _592 = (_553 + ((((_492.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _595 = fma(_559, _252, fma(_592, _259, _591 * _245));
    float _598 = fma(_559, _253, fma(_592, _260, _591 * _246));
    float _601 = fma(_559, _254, fma(_592, _261, _591 * _247));
    float _605 = inversesqrt(dot(vec3(_595, _598, _601), vec3(_595, _598, _601)));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _634 = _632.x;
    float _635 = 1.0 - _634;
    float _644 = (cbMtdParam._m0[19u].x + dot(vec4(_605 * _595, _605 * _598, _605 * _601, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_634 - _635) * cbMtdParam._m0[24u].z) + _635) * cbMtdParam._m0[21u].z);
    float _3920 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _647 = (-0.0) - cbMtdParam._m0[24u].x;
    float _649 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _649 : (isnan(_649) ? 1.0 : min(_649, 1.0));
    float _657 = _645 - ((_645 * TEXCOORD_8.x) * _650);
    float _658 = _645 - ((_645 * TEXCOORD_8.y) * _650);
    float _659 = _645 - ((_645 * TEXCOORD_8.z) * _650);
    float _666 = (_657 * (cbMtdParam._m0[17u].x - _472)) + _472;
    float _667 = (_658 * (cbMtdParam._m0[17u].y - _473)) + _473;
    float _668 = (_659 * (cbMtdParam._m0[17u].z - _474)) + _474;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _682 = _680.x;
    float _683 = 1.0 - _682;
    float _709 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_682 - _683) * cbMtdParam._m0[24u].w) + _683) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3941 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _710 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _718 = ((((cbMtdParam._m0[10u].x - _666) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _710) + _666;
    float _719 = ((((cbMtdParam._m0[10u].y - _667) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _710) + _667;
    float _720 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _668)) * _710) + _668;
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _748 = _746.x;
    float _766 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _748) * _446) + _748;
    float _770 = ((_732.x - _766) * cbMtdParam._m0[19u].z) + _766;
    float _772 = _770 - (_770 * _657);
    float _774 = _772 - (_772 * _710);
    float _779 = (((_492.z - _549) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _549;
    float _783 = ((_579.z - _779) * cbMtdParam._m0[19u].w) + _779;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _804 = (_797.x * 2.0) + (-1.0);
    float _805 = (_797.y * 2.0) + (-1.0);
    float _806 = dot(vec2(_804, _805), vec2(_804, _805));
    float _3952 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _814 = ((_797.z - _783) * _657) + _783;
    float _817 = ((cbMtdParam._m0[23u].x - _814) * _710) + _814;
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _842 = (_836.x * 2.0) + (-1.0);
    float _843 = (_836.y * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _3963 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _859 = ((sqrt(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) - _559) * _659) + _559;
    float _862 = (((_804 - _591) * _657) + _591) + (cbMtdParam._m0[21u].x * _591);
    float _863 = (((_805 - _592) * _658) + _592) + (cbMtdParam._m0[21u].x * _592);
    float _874 = (((_842 - _862) + (_862 * cbMtdParam._m0[22u].z)) * _710) + _862;
    float _875 = (((_843 - _863) + (_863 * cbMtdParam._m0[22u].z)) * _710) + _863;
    float _876 = (_710 * (sqrt(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) - _859)) + _859;
    float _880 = cbMtdParam._m0[22u].x + _579.w;
    float _883 = fma(_876, _252, fma(_875, _259, _874 * _245));
    float _886 = fma(_876, _253, fma(_875, _260, _874 * _246));
    float _889 = fma(_876, _254, fma(_875, _261, _874 * _247));
    float _893 = inversesqrt(dot(vec3(_883, _886, _889), vec3(_883, _886, _889)));
    float _894 = _893 * _883;
    float _895 = _893 * _886;
    float _896 = _893 * _889;
    float _3974 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _897 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _3996 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4007 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4018 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4029 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _902 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _916 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _966 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _956);
    float _967 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _956);
    float _968 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _956);
    float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
    float _973 = _966 * _972;
    float _974 = _967 * _972;
    float _975 = _968 * _972;
    vec4 _980 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _982 = _980.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1154 = sqrt(((_966 * _966) + (_967 * _967)) + (_968 * _968));
        float _1160 = (cbMatDynParam._m0[5u].x * _1154) + cbMatDynParam._m0[5u].y;
        float _4040 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1165 = (cbMatDynParam._m0[5u].z * _1154) + cbMatDynParam._m0[5u].w;
        float _4051 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) - _1161)) + _1161) < ((_982 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _993 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _994 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1012 = fma(_896, cbSceneParam._m0[5u].z, fma(_895, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _894));
    float _1015 = fma(_896, cbSceneParam._m0[6u].z, fma(_895, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _894));
    float _1018 = fma(_896, cbSceneParam._m0[7u].z, fma(_895, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _894));
    uint _1031 = _283 + 9u;
    uint _1032 = _1031 + uint(cbMatDynParam._m0[0u].w);
    float _1038 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_1032].x;
    float _1039 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * cbInstanceData._m0[_1032].y;
    float _1040 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * cbInstanceData._m0[_1032].z;
    float _4062 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _1044 = 1.0 - _902;
    float _1045 = _1041 * _1044;
    float _1046 = _1042 * _1044;
    float _1047 = _1043 * _1044;
    float _1052 = (_1041 + (-0.039999999105930328369140625)) * _902;
    float _1053 = (_1042 + (-0.039999999105930328369140625)) * _902;
    float _1054 = (_1043 + (-0.039999999105930328369140625)) * _902;
    float _1055 = _1052 + 0.039999999105930328369140625;
    float _1057 = _1053 + 0.039999999105930328369140625;
    float _1058 = _1054 + 0.039999999105930328369140625;
    vec4 _1067 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _993, cbSceneParam._m0[86u].y * _994));
    float _1071 = ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * TEXCOORD_5.w) * _1067.x;
    float _1072 = dot(vec3(_894, _895, _896), vec3(_973, _974, _975));
    float _1075 = _1072 * 2.0;
    float _1079 = (_1075 * _894) - _973;
    float _1080 = (_1075 * _895) - _974;
    float _1081 = (_1075 * _896) - _975;
    float _1085 = abs(dot(vec3(_973, _974, _975), vec3(_894, _895, _896)));
    float _4095 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1087 = sqrt(_897);
    float _1100 = exp2((_1087 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1087 * 3.0));
    float _1106 = (1.0 - _1100) * ((_1087 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1107 = _1100 * _1087;
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1472;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1197 = fma(_1143, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135));
        float _1201 = fma(_1143, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135));
        float _1205 = fma(_1143, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135));
        float _1230 = _1135 + _894;
        float _1231 = _1139 + _895;
        float _1232 = _1143 + _896;
        float _1242 = fma(_1232, cbModelParam._m0[26u].z, fma(_1231, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1230)) - _1197;
        float _1243 = fma(_1232, cbModelParam._m0[27u].z, fma(_1231, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1230)) - _1201;
        float _1244 = fma(_1232, cbModelParam._m0[28u].z, fma(_1231, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1230)) - _1205;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1197 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1201 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[34u].z) + ((((((_1205 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1300 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1266.x + (-0.5));
        float _1302 = _1300 * (_1266.y + (-0.5));
        float _1303 = _1300 * (_1266.z + (-0.5));
        float _1310 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1273.x + (-0.5));
        float _1312 = _1310 * (_1273.y + (-0.5));
        float _1313 = _1310 * (_1273.z + (-0.5));
        float _1320 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1280.x + (-0.5));
        float _1322 = _1320 * (_1280.y + (-0.5));
        float _1323 = _1320 * (_1280.z + (-0.5));
        float _1330 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1287.x + (-0.5));
        float _1332 = _1330 * (_1287.y + (-0.5));
        float _1333 = _1330 * (_1287.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1354 = (dot(vec3(_894, _895, _896), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1364 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4143 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1366 + 1.0))) + _1371) * _1334;
        float _1381 = _1302 * 0.5;
        float _1382 = _1312 * 0.5;
        float _1383 = _1322 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_894, _895, _896), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4176 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1408 + 1.0))) + _1413) * _1335;
        float _1423 = _1303 * 0.5;
        float _1424 = _1313 * 0.5;
        float _1425 = _1323 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_894, _895, _896), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4209 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1450 + 1.0))) + _1455) * _1336;
        _1472 = _1303;
        _1474 = _1302;
        _1475 = _1301;
        _1476 = _1313;
        _1477 = _1312;
        _1478 = _1311;
        _1479 = _1323;
        _1480 = _1322;
        _1481 = _1321;
        _1482 = _1336;
        _1483 = _1335;
        _1484 = _1334;
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1473;
        _1474 = _1473;
        _1475 = _1473;
        _1476 = _1473;
        _1477 = _1473;
        _1478 = _1473;
        _1479 = _1473;
        _1480 = _1473;
        _1481 = _1473;
        _1482 = _1473;
        _1483 = _1473;
        _1484 = _1473;
        _1485 = 0.0;
        _1486 = 0.0;
        _1487 = 0.0;
    }
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1515 = fma(_1143, cbModelParam._m0[30u].z, fma(_1139, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135));
        float _1519 = fma(_1143, cbModelParam._m0[31u].z, fma(_1139, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135));
        float _1523 = fma(_1143, cbModelParam._m0[32u].z, fma(_1139, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135));
        float _1546 = _1135 + _894;
        float _1547 = _1139 + _895;
        float _1548 = _1143 + _896;
        float _1558 = fma(_1548, cbModelParam._m0[30u].z, fma(_1547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1546)) - _1515;
        float _1559 = fma(_1548, cbModelParam._m0[31u].z, fma(_1547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1546)) - _1519;
        float _1560 = fma(_1548, cbModelParam._m0[32u].z, fma(_1547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1546)) - _1523;
        float _1564 = inversesqrt(dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560)));
        float _1577 = ((_1564 * _1558) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1515 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1578 = ((_1564 * _1559) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1519 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1579 = ((_1564 * _1560) / cbModelParam._m0[35u].z) + ((((((_1523 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        float _1614 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1581.x + (-0.5));
        float _1616 = _1614 * (_1581.y + (-0.5));
        float _1617 = _1614 * (_1581.z + (-0.5));
        float _1624 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1588.x + (-0.5));
        float _1626 = _1624 * (_1588.y + (-0.5));
        float _1627 = _1624 * (_1588.z + (-0.5));
        float _1634 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1595.x + (-0.5));
        float _1636 = _1634 * (_1595.y + (-0.5));
        float _1637 = _1634 * (_1595.z + (-0.5));
        float _1644 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1602.x + (-0.5));
        float _1646 = _1644 * (_1602.y + (-0.5));
        float _1647 = _1644 * (_1602.z + (-0.5));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = _1615 * 0.5;
        float _1652 = _1625 * 0.5;
        float _1653 = _1635 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_894, _895, _896), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4272 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1678 + 1.0))) + _1683) * _1648;
        float _1693 = _1616 * 0.5;
        float _1694 = _1626 * 0.5;
        float _1695 = _1636 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_894, _895, _896), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4305 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1720 + 1.0))) + _1725) * _1649;
        float _1735 = _1617 * 0.5;
        float _1736 = _1627 * 0.5;
        float _1737 = _1637 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_894, _895, _896), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4338 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1762 + 1.0))) + _1767) * _1650;
        _1784 = _1617;
        _1785 = _1616;
        _1786 = _1615;
        _1787 = _1627;
        _1788 = _1626;
        _1789 = _1625;
        _1790 = _1637;
        _1791 = _1636;
        _1792 = _1635;
        _1793 = _1650;
        _1794 = _1649;
        _1795 = _1648;
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
    }
    else
    {
        _1784 = _1473;
        _1785 = _1473;
        _1786 = _1473;
        _1787 = _1473;
        _1788 = _1473;
        _1789 = _1473;
        _1790 = _1473;
        _1791 = _1473;
        _1792 = _1473;
        _1793 = _1473;
        _1794 = _1473;
        _1795 = _1473;
        _1796 = 0.0;
        _1797 = 0.0;
        _1798 = 0.0;
    }
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1485)) + _1485;
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1486)) + _1486;
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1487)) + _1487;
    float _1831 = fma(_1810, cbSceneParam._m0[89u].z, fma(_1809, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1810, cbSceneParam._m0[90u].z, fma(_1809, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1810, cbSceneParam._m0[91u].z, fma(_1809, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1808));
    float _1852 = _1079 * 0.5;
    float _1853 = _1080 * 0.5;
    float _1854 = _1081 * 0.5;
    float _1855 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1858 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1861 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1895;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1868 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1472, _1476, _1479, _1482));
        float _1872 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1474, _1477, _1480, _1483));
        float _1876 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1883 = dot(vec4(cbModelParam._m0[39u]), vec4(_1852, _1853, _1854, 1.0));
        _1895 = dot(vec3(isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1883) ? 0.0 : (isnan(0.0) ? _1883 : max(0.0, _1883))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1895 = 1.0;
    }
    float _1906;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1897 = dot(vec4(cbModelParam._m0[40u]), vec4(_1852, _1853, _1854, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1897) ? 0.0 : (isnan(0.0) ? _1897 : max(0.0, _1897))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1910 = (_1906 * cbModelParam._m0[1u].x) + (_1895 * (1.0 - cbModelParam._m0[1u].x));
    float _1920 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _897);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1920 : min(cbModelParam._m0[25u].z, _1920));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1969 = fma(_1143, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1135)) + cbModelParam._m0[13u].w;
        float _1973 = fma(_1143, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1135)) + cbModelParam._m0[14u].w;
        float _1977 = fma(_1143, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1135)) + cbModelParam._m0[15u].w;
        float _1980 = fma(_1081, cbModelParam._m0[13u].z, fma(_1080, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079));
        float _1983 = fma(_1081, cbModelParam._m0[14u].z, fma(_1080, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079));
        float _1986 = fma(_1081, cbModelParam._m0[15u].z, fma(_1080, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079));
        float _2014;
        if (_1980 > 0.0)
        {
            _2014 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2014 = frontier_phi_17_15_ladder;
        }
        float _2217;
        if (_1983 > 0.0)
        {
            _2217 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2217 = frontier_phi_26_22_ladder;
        }
        float _2471;
        if (_1986 > 0.0)
        {
            _2471 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2471 = frontier_phi_38_33_ladder;
        }
        float _2473 = isnan(_2217) ? _2014 : (isnan(_2014) ? _2217 : min(_2014, _2217));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1980) + _1969;
        float _2479 = (_2474 * _1983) + _1973;
        float _2480 = (_2474 * _1986) + _1977;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2481;
        float _2485 = _2481 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 > _2485) || ((_2479 < _2483) || ((_2478 < _2483) || (_2478 > _2485))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2480, cbModelParam._m0[9u].z, fma(_2479, cbModelParam._m0[9u].y, _2478 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2480, cbModelParam._m0[10u].z, fma(_2479, cbModelParam._m0[10u].y, _2478 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2480, cbModelParam._m0[11u].z, fma(_2479, cbModelParam._m0[11u].y, _2478 * cbModelParam._m0[11u].x))), _1921);
            frontier_phi_16_38_ladder = _2608.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2608.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2608.x * cbModelParam._m0[1u].y;
        }
        _2002 = frontier_phi_16_38_ladder_2;
        _2004 = frontier_phi_16_38_ladder_1;
        _2006 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1079, _1080, _1081), _1921);
        _2002 = _1990.x * cbModelParam._m0[1u].y;
        _2004 = _1990.y * cbModelParam._m0[1u].y;
        _2006 = _1990.z * cbModelParam._m0[1u].y;
    }
    float _2010 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _897);
    float _2011 = isnan(_2010) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2010 : min(cbModelParam._m0[25u].w, _2010));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2065 = fma(_1143, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1135)) + cbModelParam._m0[21u].w;
        float _2069 = fma(_1143, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1135)) + cbModelParam._m0[22u].w;
        float _2073 = fma(_1143, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1135)) + cbModelParam._m0[23u].w;
        float _2076 = fma(_1081, cbModelParam._m0[21u].z, fma(_1080, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079));
        float _2079 = fma(_1081, cbModelParam._m0[22u].z, fma(_1080, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079));
        float _2082 = fma(_1081, cbModelParam._m0[23u].z, fma(_1080, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079));
        float _2222;
        if (_2076 > 0.0)
        {
            _2222 = abs((1.0 - _2065) / _2076);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2065 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2222 = frontier_phi_28_24_ladder;
        }
        float _2498;
        if (_2079 > 0.0)
        {
            _2498 = abs((1.0 - _2069) / _2079);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2069 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2498 = frontier_phi_40_35_ladder;
        }
        float _2711;
        if (_2082 > 0.0)
        {
            _2711 = abs((1.0 - _2073) / _2082);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2073 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2711 = frontier_phi_49_46_ladder;
        }
        float _2713 = isnan(_2498) ? _2222 : (isnan(_2222) ? _2498 : min(_2222, _2498));
        float _2714 = isnan(_2711) ? _2713 : (isnan(_2713) ? _2711 : min(_2713, _2711));
        float _2718 = (_2714 * _2076) + _2065;
        float _2719 = (_2714 * _2079) + _2069;
        float _2720 = (_2714 * _2082) + _2073;
        float _2721 = _2714 * 9.9999997473787516355514526367188e-05;
        float _2722 = (-1.0) - _2721;
        float _2724 = _2721 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2720 > _2724) || ((_2720 < _2722) || ((_2719 > _2724) || ((_2719 < _2722) || ((_2718 < _2722) || (_2718 > _2724))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2720, cbModelParam._m0[17u].z, fma(_2719, cbModelParam._m0[17u].y, _2718 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2720, cbModelParam._m0[18u].z, fma(_2719, cbModelParam._m0[18u].y, _2718 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2720, cbModelParam._m0[19u].z, fma(_2719, cbModelParam._m0[19u].y, _2718 * cbModelParam._m0[19u].x))), _2011);
            frontier_phi_25_49_ladder = _2919.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2919.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2919.x * cbModelParam._m0[1u].z;
        }
        _2101 = frontier_phi_25_49_ladder_2;
        _2103 = frontier_phi_25_49_ladder_1;
        _2105 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2085 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1079, _1080, _1081), _2011);
        _2101 = _2085.x * cbModelParam._m0[1u].z;
        _2103 = _2085.y * cbModelParam._m0[1u].z;
        _2105 = _2085.z * cbModelParam._m0[1u].z;
    }
    float _2118 = (((_1106 * _1055) + _1107) * _1071) * ((cbModelParam._m0[1u].w * (_2101 - _2002)) + _2002);
    float _2120 = (((_1106 * _1057) + _1107) * _1071) * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2122 = (((_1106 * _1058) + _1107) * _1071) * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2125 = fma(_2122, cbSceneParam._m0[89u].z, fma(_2120, cbSceneParam._m0[89u].y, _2118 * cbSceneParam._m0[89u].x));
    float _2128 = fma(_2122, cbSceneParam._m0[90u].z, fma(_2120, cbSceneParam._m0[90u].y, _2118 * cbSceneParam._m0[90u].x));
    float _2131 = fma(_2122, cbSceneParam._m0[91u].z, fma(_2120, cbSceneParam._m0[91u].y, _2118 * cbSceneParam._m0[91u].x));
    uvec4 _2141 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2143 = _2141.x * 14u;
    uint _2144 = _2143 + 13u;
    float _2151 = _1071 + (-1.0);
    float _2156 = (cbLight._m0[_2144].x * _2151) + 1.0;
    float _2157 = (cbLight._m0[_2144].y * _2151) + 1.0;
    float _2158 = (cbLight._m0[_2144].z * _2151) + 1.0;
    float _2159 = (cbLight._m0[_2144].w * _2151) + 1.0;
    uint _2160 = _2143 + 5u;
    float _2166 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2170 = _2143 + 4u;
    float _2176 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2180 = _2143 | 1u;
    float _2191 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_894, _895, _896));
    float _2194 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_894, _895, _896));
    float _4474 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _4485 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2199 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * 0.3183098733425140380859375;
    float _2201 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * 0.3183098733425140380859375;
    float _2208 = ((cbLight._m0[_2160].x * _2166) * _2201) + ((cbLight._m0[_2170].x * _2176) * _2199);
    float _2209 = ((_2166 * cbLight._m0[_2160].y) * _2201) + ((_2176 * cbLight._m0[_2170].y) * _2199);
    float _2210 = ((_2166 * cbLight._m0[_2160].z) * _2201) + ((_2176 * cbLight._m0[_2170].z) * _2199);
    uvec4 _2214 = floatBitsToUint(cbLight._m0[_2143 + 12u]);
    bool _2216 = _2214.x == 0u;
    float _2227;
    float _2229;
    float _2231;
    if (_2216)
    {
        _2227 = _2208;
        _2229 = _2209;
        _2231 = _2210;
    }
    else
    {
        uint _2235 = _2143 + 6u;
        float _2251 = (dot(vec3(cbLight._m0[_2143 + 2u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2252 = _2251 * _2251;
        float _4496 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2253 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2254 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2227 = (((cbLight._m0[_2235].x * 0.3183098733425140380859375) * _2253) * _2254) + _2208;
        _2229 = (((cbLight._m0[_2235].y * 0.3183098733425140380859375) * _2253) * _2254) + _2209;
        _2231 = (((cbLight._m0[_2235].z * 0.3183098733425140380859375) * _2253) * _2254) + _2210;
    }
    bool _2234 = _2214.y == 0u;
    float _2272;
    float _2274;
    float _2276;
    if (_2234)
    {
        _2272 = _2227;
        _2274 = _2229;
        _2276 = _2231;
    }
    else
    {
        uint _2442 = _2143 + 7u;
        float _2458 = (dot(vec3(cbLight._m0[_2143 + 3u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4512 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2461 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2272 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2227;
        _2274 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2229;
        _2276 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2231;
    }
    uint _2279 = _2143 + 8u;
    float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _897) * 0.949999988079071044921875);
    float _2293 = _2292 * _2292;
    float _2294 = cbLight._m0[_2143].x + _973;
    float _2295 = cbLight._m0[_2143].y + _974;
    float _2296 = cbLight._m0[_2143].z + _975;
    float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
    float _2301 = _2300 * _2294;
    float _2302 = _2300 * _2295;
    float _2303 = _2300 * _2296;
    float _2304 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2143].xyz));
    float _4528 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _4539 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _2308 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2309 = dot(vec3(_894, _895, _896), vec3(_2301, _2302, _2303));
    float _4550 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2313 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2301, _2302, _2303));
    float _4561 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = _2293 * _2293;
    float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
    float _2329 = exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0);
    float _2330 = 0.959999978542327880859375 - _1052;
    float _2332 = 0.959999978542327880859375 - _1053;
    float _2333 = 0.959999978542327880859375 - _1054;
    float _2340 = 1.0 - _2293;
    float _2351 = (0.5 / (((_2308 * ((_2307 * _2340) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2340) + _2293) * _2307))) * _2307;
    float _4572 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2353 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
    uint _2364 = _2143 + 9u;
    float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _897) * 0.949999988079071044921875);
    float _2376 = _2375 * _2375;
    float _2377 = cbLight._m0[_2180].x + _973;
    float _2378 = cbLight._m0[_2180].y + _974;
    float _2379 = cbLight._m0[_2180].z + _975;
    float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
    float _2384 = _2383 * _2377;
    float _2385 = _2383 * _2378;
    float _2386 = _2383 * _2379;
    float _2387 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2180].xyz));
    float _4583 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2391 = dot(vec3(_894, _895, _896), vec3(_2384, _2385, _2386));
    float _4594 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2395 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2384, _2385, _2386));
    float _4605 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2399 = _2376 * _2376;
    float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
    float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
    float _2417 = 1.0 - _2376;
    float _2427 = (0.5 / (((_2308 * ((_2390 * _2417) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2417) + _2376) * _2390))) * _2390;
    float _4616 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
    float _2439 = (((((_2410 * _2330) + _1055) * cbLight._m0[_2364].x) * _2429) * _2166) + (((((_2329 * _2330) + _1055) * cbLight._m0[_2279].x) * _2353) * _2176);
    float _2440 = (((((_2410 * _2332) + _1057) * cbLight._m0[_2364].y) * _2429) * _2166) + (((((_2329 * _2332) + _1057) * cbLight._m0[_2279].y) * _2353) * _2176);
    float _2441 = (((((_2410 * _2333) + _1058) * cbLight._m0[_2364].z) * _2429) * _2166) + (((((_2329 * _2333) + _1058) * cbLight._m0[_2279].z) * _2353) * _2176);
    float _2503;
    float _2505;
    float _2507;
    if (_2216)
    {
        _2503 = _2439;
        _2505 = _2440;
        _2507 = _2441;
    }
    else
    {
        uint _2509 = _2143 + 2u;
        uint _2513 = _2143 + 10u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _897) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _973;
        float _2530 = cbLight._m0[_2509].y + _974;
        float _2531 = cbLight._m0[_2509].z + _975;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2509].xyz));
        float _4627 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2543 = dot(vec3(_894, _895, _896), vec3(_2536, _2537, _2538));
        float _4638 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4649 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2308 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2569) + _2528) * _2542))) * _2542;
        float _4660 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2503 = (((((_2562 * _2330) + _1055) * cbLight._m0[_2513].x) * _2581) * _2582) + _2439;
        _2505 = (((((_2562 * _2332) + _1057) * cbLight._m0[_2513].y) * _2581) * _2582) + _2440;
        _2507 = (((((_2562 * _2333) + _1058) * cbLight._m0[_2513].z) * _2581) * _2582) + _2441;
    }
    float _2617;
    float _2619;
    float _2621;
    if (_2234)
    {
        _2617 = _2503;
        _2619 = _2505;
        _2621 = _2507;
    }
    else
    {
        uint _2628 = _2143 + 3u;
        uint _2632 = _2143 + 11u;
        float _2646 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2628].w)) * _897) * 0.949999988079071044921875);
        float _2647 = _2646 * _2646;
        float _2648 = cbLight._m0[_2628].x + _973;
        float _2649 = cbLight._m0[_2628].y + _974;
        float _2650 = cbLight._m0[_2628].z + _975;
        float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
        float _2655 = _2654 * _2648;
        float _2656 = _2654 * _2649;
        float _2657 = _2654 * _2650;
        float _2658 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2628].xyz));
        float _4676 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2662 = dot(vec3(_894, _895, _896), vec3(_2655, _2656, _2657));
        float _4687 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2666 = dot(vec3(cbLight._m0[_2628].xyz), vec3(_2655, _2656, _2657));
        float _4698 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2670 = _2647 * _2647;
        float _2674 = ((_2665 * _2665) * (_2670 + (-1.0))) + 1.0;
        float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
        float _2688 = 1.0 - _2647;
        float _2698 = (0.5 / (((_2308 * ((_2661 * _2688) + _2647)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2688) + _2647) * _2661))) * _2661;
        float _4709 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2700 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2670 / ((_2674 * _2674) * 3.141590118408203125));
        float _2701 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2617 = (((((_2681 * _2330) + _1055) * cbLight._m0[_2632].x) * _2700) * _2701) + _2503;
        _2619 = (((((_2681 * _2332) + _1057) * cbLight._m0[_2632].y) * _2700) * _2701) + _2505;
        _2621 = (((((_2681 * _2333) + _1058) * cbLight._m0[_2632].z) * _2700) * _2701) + _2507;
    }
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_2141.y == 0u)
    {
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2776;
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2776;
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2776;
        uvec4 _2791 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2792 = _2791.x;
        uint _2803 = uint((float(_2791.y) * floor(float(uint(cbSceneParam._m0[85u].y * _994) / _2792))) + floor(float(uint(cbSceneParam._m0[85u].x * _993) / _2792)));
        float _2813 = (log2(_2779 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2814 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        uint _2817 = uint(isnan(14.0) ? _2814 : (isnan(_2814) ? 14.0 : min(_2814, 14.0)));
        uvec4 _2822 = texelFetch(g_lightClusterGridBuffer, int(((_2817 << 2u) + (_2803 << 6u)) >> 2u));
        uint _2823 = _2822.x;
        uint _2824 = _2791.z;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((((1u << ((_2824 >> 4u) & 15u)) + 4294967295u) & _2823) == 0u) || ((_2824 & 240u) == 0u))
        {
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
        }
        else
        {
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            uint _3082 = 0u;
            uint _3091;
            bool _3092;
            for (;;)
            {
                _3091 = texelFetch(g_lightClassification, int((((_2817 << 5u) + (_2803 << 9u)) + (_3082 << 2u)) >> 2u)).x;
                _3092 = _3091 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3092)
                {
                    frontier_phi_66_pred = _3076;
                    frontier_phi_66_pred_1 = _3081;
                    frontier_phi_66_pred_2 = _3080;
                    frontier_phi_66_pred_3 = _3079;
                    frontier_phi_66_pred_4 = _3078;
                    frontier_phi_66_pred_5 = _3077;
                }
                else
                {
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    uint _3227;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3091;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    for (;;)
                    {
                        uint _3231 = uint(findLSB(_3227)) + (_3082 << 5u);
                        uint _3228 = (_3227 + 4294967295u) & _3227;
                        uint _3233 = _3231 * 48u;
                        vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 3u)).x));
                        uint _3253 = (_3231 * 48u) + 4u;
                        vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 3u)).x));
                        uint _3272 = (_3231 * 48u) + 8u;
                        vec3 _3283 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3272)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 2u)).x));
                        float _3287 = _3247.x - _2777;
                        float _3288 = _3247.y - _2778;
                        float _3289 = _3247.z - _2779;
                        float _3290 = dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289));
                        float _3293 = inversesqrt(_3290);
                        float _3294 = _3293 * _3287;
                        float _3295 = _3293 * _3288;
                        float _3296 = _3293 * _3289;
                        float _3297 = dot(vec3(_1012, _1015, _1018), vec3(_3294, _3295, _3296));
                        float _3302 = 1.0 - (_3290 * _3247.w);
                        float _4735 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3303 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3304 = sqrt(_3290) * _3266.w;
                        float _3307 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                        float _3308 = _3307 * _3307;
                        float _3311 = ((1.0 - _3308) * _3297) + _3308;
                        float _3314 = _3304 * _3304;
                        float _3318 = ((isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))) * _3303) / ((_3314 * 0.699999988079071044921875) + 1.0);
                        float _3322 = (-0.0) - _2777;
                        float _3323 = (-0.0) - _2778;
                        float _3324 = (-0.0) - _2779;
                        float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                        float _3329 = _3328 * _3322;
                        float _3330 = _3328 * _3323;
                        float _3331 = _3328 * _3324;
                        float _3339 = exp2(log2(1.0 / ((_3314 * 3.5) + 5.0)) * 0.25);
                        float _3340 = 1.0 - _1087;
                        float _3347 = sqrt(1.0 - ((1.0 - (_3340 * _3340)) * (1.0 - (_3339 * _3339))));
                        float _3348 = _3347 * _3347;
                        float _3349 = _3348 * _3348;
                        float _3350 = _3329 + _3294;
                        float _3351 = _3330 + _3295;
                        float _3352 = _3331 + _3296;
                        float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                        float _3360 = dot(vec3(_1012, _1015, _1018), vec3(_3329, _3330, _3331));
                        float _4751 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3363 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3364 = dot(vec3(_1012, _1015, _1018), vec3(_3356 * _3350, _3356 * _3351, _3356 * _3352));
                        float _4762 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3367 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3371 = ((_3367 * _3367) * (_3349 + (-1.0))) + 1.0;
                        float _3372 = _3307 * _3348;
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3297) + _3373;
                        float _4773 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3377 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3378 = 1.0 - _3348;
                        float _3388 = (0.5 / (((_3377 * ((_3363 * _3378) + _3348)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3348) * _3363))) * _3377;
                        float _4784 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3399 = (((_3349 * 3.1415927410125732421875) * (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) / ((_3371 * _3371) * ((_3314 * 2.1991131305694580078125) + 3.141590118408203125))) * _3303;
                        _3151 = (_3318 * _3266.x) + _3224;
                        _3152 = (_3318 * _3266.y) + _3225;
                        _3153 = (_3318 * _3266.z) + _3226;
                        _3148 = (_3399 * _3283.x) + _3221;
                        _3149 = (_3399 * _3283.y) + _3222;
                        _3150 = (_3399 * _3283.z) + _3223;
                        if (_3228 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3228;
                        }
                    }
                    frontier_phi_66_pred = _3148;
                    frontier_phi_66_pred_1 = _3153;
                    frontier_phi_66_pred_2 = _3152;
                    frontier_phi_66_pred_3 = _3151;
                    frontier_phi_66_pred_4 = _3150;
                    frontier_phi_66_pred_5 = _3149;
                }
                _2925 = frontier_phi_66_pred;
                _2935 = frontier_phi_66_pred_1;
                _2933 = frontier_phi_66_pred_2;
                _2931 = frontier_phi_66_pred_3;
                _2929 = frontier_phi_66_pred_4;
                _2927 = frontier_phi_66_pred_5;
                uint _3083 = _3082 + 1u;
                if (_3083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3076 = _2925;
                    _3077 = _2927;
                    _3078 = _2929;
                    _3079 = _2931;
                    _3080 = _2933;
                    _3081 = _2935;
                    _3082 = _3083;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
        }
        uvec4 _2938 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2939 = _2938.z;
        uint _2941 = (_2939 >> 8u) & 15u;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        if (((4294967295u << _2941) & _2823) == 0u)
        {
            _3044 = _2924;
            _3046 = _2926;
            _3048 = _2928;
            _3050 = _2930;
            _3052 = _2932;
            _3054 = _2934;
        }
        else
        {
            float _3069 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
            float _3070 = _3069 * _2777;
            float _3071 = _3069 * _2778;
            float _3072 = _3069 * _2779;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2941 < ((_2939 >> 12u) & 15u))
            {
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3204 = _2924;
                float _3205 = _2926;
                float _3206 = _2928;
                float _3207 = _2930;
                float _3208 = _2932;
                float _3209 = _2934;
                uint _3210 = _2941;
                uint _3219;
                bool _3220;
                for (;;)
                {
                    _3219 = texelFetch(g_lightClassification, int((((_2817 << 5u) + (_2803 << 9u)) + (_3210 << 2u)) >> 2u)).x;
                    _3220 = _3219 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3220)
                    {
                        frontier_phi_77_pred = _3209;
                        frontier_phi_77_pred_1 = _3208;
                        frontier_phi_77_pred_2 = _3207;
                        frontier_phi_77_pred_3 = _3206;
                        frontier_phi_77_pred_4 = _3205;
                        frontier_phi_77_pred_5 = _3204;
                    }
                    else
                    {
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3426 = _3204;
                        float _3427 = _3205;
                        float _3428 = _3206;
                        float _3429 = _3207;
                        float _3430 = _3208;
                        float _3431 = _3209;
                        uint _3432 = _3219;
                        uint _3433;
                        vec4 _3458;
                        float _3459;
                        vec4 _3474;
                        vec3 _3486;
                        vec4 _3501;
                        vec4 _3516;
                        float _3562;
                        bool _3563;
                        for (;;)
                        {
                            uint _3443 = ((_3210 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3432));
                            _3433 = (_3432 + 4294967295u) & _3432;
                            uint _3445 = _3443 * 40u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            _3459 = _3458.w;
                            uint _3461 = (_3443 * 40u) + 4u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3443 * 40u) + 8u;
                            _3486 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x));
                            uint _3488 = (_3443 * 40u) + 16u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3443 * 40u) + 20u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3443 * 40u) + 24u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3537 = (_3443 * 40u) + 28u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            _3562 = fma(_2779, _3550.z, fma(_2778, _3550.y, _3550.x * _2777)) + _3550.w;
                            _3563 = !((fma(_2779, _3531.z, fma(_2778, _3531.y, _3531.x * _2777)) + _3531.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3563)
                            {
                                float _3590 = _3458.x - _2777;
                                float _3591 = _3458.y - _2778;
                                float _3592 = _3458.z - _2779;
                                float _3593 = dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592));
                                float _3596 = inversesqrt(_3593);
                                float _3597 = _3596 * _3590;
                                float _3598 = _3596 * _3591;
                                float _3599 = _3596 * _3592;
                                float _3603 = 1.0 - (_3593 / (_3459 * _3459));
                                float _4795 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3608 = sqrt(_3593) * _3474.w;
                                float _3610 = 1.39999997615814208984375 / (_3608 + 1.39999997615814208984375);
                                float _3611 = _3610 * _3610;
                                float _3614 = ((1.0 - _3611) * dot(vec3(_3597, _3598, _3599), vec3(_1012, _1015, _1018))) + _3611;
                                float _3617 = _3608 * _3608;
                                float _3621 = (fma(_2779, _3501.z, fma(_2778, _3501.y, _3501.x * _2777)) + _3501.w) / _3562;
                                float _3622 = (fma(_2779, _3516.z, fma(_2778, _3516.y, _3516.x * _2777)) + _3516.w) / _3562;
                                float _3626 = 1.0 - dot(vec2(_3621, _3622), vec2(_3621, _3622));
                                float _4811 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3628 = _3627 * (((isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0))) * _3604) / ((_3617 * 0.699999988079071044921875) + 1.0));
                                float _3640 = exp2(log2(1.0 / ((_3617 * 3.5) + 5.0)) * 0.25);
                                float _3641 = 1.0 - _1087;
                                float _3648 = sqrt(1.0 - ((1.0 - (_3641 * _3641)) * (1.0 - (_3640 * _3640))));
                                float _3649 = _3648 * _3648;
                                float _3650 = _3649 * _3649;
                                float _3651 = _3597 - _3070;
                                float _3652 = _3598 - _3071;
                                float _3653 = _3599 - _3072;
                                float _3657 = inversesqrt(dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653)));
                                float _3661 = dot(vec3(_1012, _1015, _1018), vec3((-0.0) - _3070, (-0.0) - _3071, (-0.0) - _3072));
                                float _4822 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3665 = dot(vec3(_1012, _1015, _1018), vec3(_3657 * _3651, _3657 * _3652, _3657 * _3653));
                                float _4833 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3672 = ((_3668 * _3668) * (_3650 + (-1.0))) + 1.0;
                                float _3673 = _3610 * _3649;
                                float _3674 = _3673 * _3673;
                                float _3680 = ((1.0 - _3674) * dot(vec3(_1012, _1015, _1018), vec3(_3597, _3598, _3599))) + _3674;
                                float _4844 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3682 = 1.0 - _3649;
                                float _3692 = (0.5 / (((_3681 * ((_3664 * _3682) + _3649)) + 9.9999999392252902907785028219223e-09) + (((_3681 * _3682) + _3649) * _3664))) * _3681;
                                float _4855 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3702 = (_3627 * _3604) * (((_3650 * 3.1415927410125732421875) * (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) / ((_3672 * _3672) * ((_3617 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3628 * _3474.y;
                                frontier_phi_83_pred_1 = _3628 * _3474.x;
                                frontier_phi_83_pred_2 = _3702 * _3486.z;
                                frontier_phi_83_pred_3 = _3702 * _3486.y;
                                frontier_phi_83_pred_4 = _3702 * _3486.x;
                                frontier_phi_83_pred_5 = _3628 * _3474.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3710 = frontier_phi_83_pred;
                            _3709 = frontier_phi_83_pred_1;
                            _3708 = frontier_phi_83_pred_2;
                            _3707 = frontier_phi_83_pred_3;
                            _3706 = frontier_phi_83_pred_4;
                            _3711 = frontier_phi_83_pred_5;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            _3418 = _3711 + _3431;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3415 = _3708 + _3428;
                            if (_3433 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3433;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3418;
                        frontier_phi_77_pred_1 = _3417;
                        frontier_phi_77_pred_2 = _3416;
                        frontier_phi_77_pred_3 = _3415;
                        frontier_phi_77_pred_4 = _3414;
                        frontier_phi_77_pred_5 = _3413;
                    }
                    _3055 = frontier_phi_77_pred;
                    _3053 = frontier_phi_77_pred_1;
                    _3051 = frontier_phi_77_pred_2;
                    _3049 = frontier_phi_77_pred_3;
                    _3047 = frontier_phi_77_pred_4;
                    _3045 = frontier_phi_77_pred_5;
                    uint _3211 = _3210 + 1u;
                    if (_3211 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3204 = _3045;
                        _3205 = _3047;
                        _3206 = _3049;
                        _3207 = _3051;
                        _3208 = _3053;
                        _3209 = _3055;
                        _3210 = _3211;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3049;
                frontier_phi_58_59_ladder_1 = _3055;
                frontier_phi_58_59_ladder_2 = _3053;
                frontier_phi_58_59_ladder_3 = _3051;
                frontier_phi_58_59_ladder_4 = _3047;
                frontier_phi_58_59_ladder_5 = _3045;
            }
            else
            {
                frontier_phi_58_59_ladder = _2928;
                frontier_phi_58_59_ladder_1 = _2934;
                frontier_phi_58_59_ladder_2 = _2932;
                frontier_phi_58_59_ladder_3 = _2930;
                frontier_phi_58_59_ladder_4 = _2926;
                frontier_phi_58_59_ladder_5 = _2924;
            }
            _3044 = frontier_phi_58_59_ladder_5;
            _3046 = frontier_phi_58_59_ladder_4;
            _3048 = frontier_phi_58_59_ladder;
            _3050 = frontier_phi_58_59_ladder_3;
            _3052 = frontier_phi_58_59_ladder_2;
            _3054 = frontier_phi_58_59_ladder_1;
        }
        float _3059 = isnan(1.0) ? _1071 : (isnan(_1071) ? 1.0 : min(_1071, 1.0));
        _2836 = (_3059 * _3050) + _2272;
        _2838 = (_3059 * _3052) + _2274;
        _2840 = (_3059 * _3054) + _2276;
        _2842 = ((_3044 * _1055) * _3059) + _2617;
        _2844 = ((_3046 * _1057) * _3059) + _2619;
        _2846 = ((_3048 * _1058) * _3059) + _2621;
    }
    else
    {
        _2836 = _2272;
        _2838 = _2274;
        _2840 = _2276;
        _2842 = _2617;
        _2844 = _2619;
        _2846 = _2621;
    }
    float _4871 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _4882 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _4893 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _2863 = ((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2836 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1071))) + ((_2842 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1910)) * cbPerFrame._m0[3u].x);
    float _2864 = ((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2838 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1071))) + ((_2844 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1910)) * cbPerFrame._m0[3u].x);
    float _2865 = ((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2840 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1071))) + ((_2846 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1910)) * cbPerFrame._m0[3u].x);
    uint _2866 = _283 + 6u;
    float _2874 = _993 / cbSceneParam._m0[86u].x;
    float _2875 = _994 / cbSceneParam._m0[86u].y;
    vec4 _2889 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2874, _2875, (log2((isnan(cbSceneParam._m0[77u].w) ? _916 : (isnan(_916) ? cbSceneParam._m0[77u].w : min(_916, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2891 = _2889.x;
    float _2892 = _2889.y;
    float _2893 = _2889.z;
    float _2894 = _2889.w;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    if (_916 > cbSceneParam._m0[78u].w)
    {
        float _2949 = isnan(_916) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _916 : min(cbSceneParam._m0[80u].w, _916));
        float _2950 = _2949 / _916;
        float _2961 = _2950 * _966;
        float _2962 = _967 * _2950;
        float _2963 = (-0.0) - _2962;
        float _2964 = _2950 * _968;
        float _2966 = (cbSceneParam._m0[77u].w * _2963) / _2949;
        float _2967 = _2966 + cbSceneParam._m0[79u].w;
        float _2968 = cbSceneParam._m0[79u].w - _2962;
        float _2974 = sqrt(((_2961 * _2961) + (_2962 * _2962)) + (_2964 * _2964));
        float _2977 = (1.0 - (cbSceneParam._m0[77u].w / _2949)) * _2974;
        float _2982 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2984 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3161;
        if (abs((_2963 - _2966) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3161 = ((((_2967 > 0.0) ? exp2(_2982 * _2967) : (2.0 - exp2(_2984 * _2967))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2977;
        }
        else
        {
            float _3105 = 1.0 / cbSceneParam._m0[80u].x;
            float _3106 = isnan(_2968) ? _2967 : (isnan(_2967) ? _2968 : max(_2967, _2968));
            float _3107 = isnan(_2968) ? _2967 : (isnan(_2967) ? _2968 : min(_2967, _2968));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            float _3117 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : min(_3107, 0.0));
            _3161 = ((abs(_2974 / _2963) * cbSceneParam._m0[80u].y) * ((((_3116 - _3117) * 2.0) - ((exp2(_2982 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0)))) - exp2(_2982 * (isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0))))) * _3105)) - ((exp2(_2984 * _3116) - exp2(_2984 * _3117)) * _3105))) + (_2977 * cbSceneParam._m0[80u].z);
        }
        vec4 _3163 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2874, _2875, 1.0), 0.0);
        float _3172 = exp2((_3161 * (-1.44269502162933349609375)) * (1.0 - _3163.w));
        float _3173 = log2(_3172);
        float _3189 = log2(_2894);
        _2986 = (exp2(_3189 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].x)) * _3163.x) / cbSceneParam._m0[78u].x)) + _2891;
        _2988 = (exp2(_3189 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].y)) * _3163.y) / cbSceneParam._m0[78u].y)) + _2892;
        _2990 = (exp2(_3189 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].z)) * _3163.z) / cbSceneParam._m0[78u].z)) + _2893;
        _2992 = _3172 * _2894;
    }
    else
    {
        _2986 = _2891;
        _2988 = _2892;
        _2990 = _2893;
        _2992 = _2894;
    }
    bool _3199;
    vec4 _3002;
    vec4 _3024;
    float _3026;
    float _3030;
    float _3031;
    float _3032;
    float _3033;
    bool _3043;
    for (;;)
    {
        _3002 = cbMatDynParam._m0[0u];
        float _3004 = roundEven(_3002.y);
        bool _3005 = _3004 == 3.0;
        float _3006 = log2(_2992);
        float _3013 = exp2(_3006 * cbSceneParam._m0[78u].x) * _2863;
        float _3014 = exp2(_3006 * cbSceneParam._m0[78u].y) * _2864;
        float _3015 = exp2(_3006 * cbSceneParam._m0[78u].z) * _2865;
        float _3022 = _982 + (-0.5);
        _3024 = cbMtdParam._m0[1u];
        _3026 = _3024.y * _3022;
        float _3029 = (_3004 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3030 = _3029 * (_3005 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2986)));
        _3031 = _3029 * (_3005 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2988)));
        _3032 = _3029 * (_3005 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2990)));
        _3033 = _3022 * 0.999000012874603271484375;
        _3043 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3043)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3033) < 0.5)
            {
                _3199 = true;
                break;
            }
        }
        uint _3140 = _1031 + uint(_3002.w);
        if ((cbInstanceData._m0[_3140].w < 1.0) && ((cbInstanceData._m0[_3140].w + _3033) < 0.5))
        {
            _3199 = true;
            break;
        }
        if ((_3026 + 1.0) < _3024.x)
        {
            _3199 = true;
            break;
        }
        _3199 = false;
        break;
    }
    float _3404;
    if (_3199)
    {
        discard_state = true;
        _3404 = 0.0;
    }
    else
    {
        _3404 = cbInstanceData._m0[_2866].w;
    }
    SV_Target.x = _3030;
    SV_Target.y = _3031;
    SV_Target.z = _3032;
    SV_Target.w = _3404;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2866].w;
    discard_exit();
}


