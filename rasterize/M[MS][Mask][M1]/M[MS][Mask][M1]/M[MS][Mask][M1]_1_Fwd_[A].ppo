#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1130;
float _3515;
float _3516;
float _3517;
float _3518;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _369 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_357 - _369) * cbMtdParam._m0[23u].w) + _369) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3527 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _394 = (_387 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _395 = (_387 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _396 = (_387 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    float _439 = ((_409.z - _430) * _387) + _430;
    float _442 = ((((_409.x - _428) * _387) + _428) * 2.0) + (-1.0);
    float _444 = ((((_409.y - _429) * _387) + _429) * 2.0) + (-1.0);
    float _445 = dot(vec2(_442, _444), vec2(_442, _444));
    float _3538 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _450 = sqrt(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))));
    vec4 _466 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _478 = (((_466.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _442;
    float _479 = (((_466.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _444;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _507 = _505.x;
    float _525 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _254) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w)).x - _507) * _387) + _507;
    float _529 = ((_491.x - _525) * cbMtdParam._m0[19u].z) + _525;
    float _533 = (cbMtdParam._m0[19u].w * (_466.z - _439)) + _439;
    float _535 = cbMtdParam._m0[22u].x + _466.w;
    float _538 = fma(_450, _221 * NORMAL.x, fma(_479, _228 * TANGENT.x, (_214 * _206) * _478));
    float _541 = fma(_450, _221 * NORMAL.y, fma(_479, _228 * TANGENT.y, (_214 * _207) * _478));
    float _544 = fma(_450, _221 * NORMAL.z, fma(_479, _228 * TANGENT.z, (_214 * _208) * _478));
    float _548 = inversesqrt(dot(vec3(_538, _541, _544), vec3(_538, _541, _544)));
    float _549 = _548 * _538;
    float _550 = _548 * _541;
    float _551 = _548 * _544;
    float _3549 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _552 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3571 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3582 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _3593 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3604 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _557 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _571 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _622 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _612);
    float _623 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _612);
    float _624 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _612);
    float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
    float _629 = _622 * _628;
    float _630 = _623 * _628;
    float _631 = _624 * _628;
    vec4 _636 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _638 = _636.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _810 = sqrt(((_622 * _622) + (_623 * _623)) + (_624 * _624));
        float _816 = (cbMatDynParam._m0[5u].x * _810) + cbMatDynParam._m0[5u].y;
        float _3615 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _821 = (cbMatDynParam._m0[5u].z * _810) + cbMatDynParam._m0[5u].w;
        float _3626 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) - _817)) + _817) < ((_638 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _649 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _650 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _668 = fma(_551, cbSceneParam._m0[5u].z, fma(_550, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _549));
    float _671 = fma(_551, cbSceneParam._m0[6u].z, fma(_550, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _549));
    float _674 = fma(_551, cbSceneParam._m0[7u].z, fma(_550, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _549));
    uint _687 = _234 + 9u;
    uint _688 = _687 + uint(cbMatDynParam._m0[0u].w);
    float _694 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_688].x;
    float _695 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_688].y;
    float _696 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_688].z;
    float _3637 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _700 = 1.0 - _557;
    float _701 = _697 * _700;
    float _702 = _698 * _700;
    float _703 = _699 * _700;
    float _708 = (_697 + (-0.039999999105930328369140625)) * _557;
    float _709 = (_698 + (-0.039999999105930328369140625)) * _557;
    float _710 = (_699 + (-0.039999999105930328369140625)) * _557;
    float _711 = _708 + 0.039999999105930328369140625;
    float _713 = _709 + 0.039999999105930328369140625;
    float _714 = _710 + 0.039999999105930328369140625;
    vec4 _723 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _649, cbSceneParam._m0[86u].y * _650));
    float _727 = ((isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * TEXCOORD_5.w) * _723.x;
    float _728 = dot(vec3(_549, _550, _551), vec3(_629, _630, _631));
    float _731 = _728 * 2.0;
    float _735 = (_731 * _549) - _629;
    float _736 = (_731 * _550) - _630;
    float _737 = (_731 * _551) - _631;
    float _741 = abs(dot(vec3(_629, _630, _631), vec3(_549, _550, _551)));
    float _3670 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _743 = sqrt(_552);
    float _756 = exp2((_743 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_743 * 3.0));
    float _762 = (1.0 - _756) * ((_743 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _763 = _756 * _743;
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1129;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _854 = fma(_799, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791));
        float _858 = fma(_799, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791));
        float _862 = fma(_799, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791));
        float _887 = _791 + _549;
        float _888 = _795 + _550;
        float _889 = _799 + _551;
        float _899 = fma(_889, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887)) - _854;
        float _900 = fma(_889, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887)) - _858;
        float _901 = fma(_889, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887)) - _862;
        float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
        float _918 = ((_905 * _899) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_854 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_905 * _900) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_858 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_905 * _901) / cbModelParam._m0[34u].z) + ((((((_862 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        float _957 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_923.x + (-0.5));
        float _959 = _957 * (_923.y + (-0.5));
        float _960 = _957 * (_923.z + (-0.5));
        float _967 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_930.x + (-0.5));
        float _969 = _967 * (_930.y + (-0.5));
        float _970 = _967 * (_930.z + (-0.5));
        float _977 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_937.x + (-0.5));
        float _979 = _977 * (_937.y + (-0.5));
        float _980 = _977 * (_937.z + (-0.5));
        float _987 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_944.x + (-0.5));
        float _989 = _987 * (_944.y + (-0.5));
        float _990 = _987 * (_944.z + (-0.5));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = _958 * 0.5;
        float _995 = _968 * 0.5;
        float _996 = _978 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1011 = (dot(vec3(_549, _550, _551), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1021 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3718 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1023 + 1.0))) + _1028) * _991;
        float _1038 = _959 * 0.5;
        float _1039 = _969 * 0.5;
        float _1040 = _979 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_549, _550, _551), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3751 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1065 + 1.0))) + _1070) * _992;
        float _1080 = _960 * 0.5;
        float _1081 = _970 * 0.5;
        float _1082 = _980 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_549, _550, _551), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3784 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1107 + 1.0))) + _1112) * _993;
        _1129 = _960;
        _1131 = _959;
        _1132 = _958;
        _1133 = _970;
        _1134 = _969;
        _1135 = _968;
        _1136 = _980;
        _1137 = _979;
        _1138 = _978;
        _1139 = _993;
        _1140 = _992;
        _1141 = _991;
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
    }
    else
    {
        _1129 = _1130;
        _1131 = _1130;
        _1132 = _1130;
        _1133 = _1130;
        _1134 = _1130;
        _1135 = _1130;
        _1136 = _1130;
        _1137 = _1130;
        _1138 = _1130;
        _1139 = _1130;
        _1140 = _1130;
        _1141 = _1130;
        _1142 = 0.0;
        _1143 = 0.0;
        _1144 = 0.0;
    }
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1172 = fma(_799, cbModelParam._m0[30u].z, fma(_795, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791));
        float _1176 = fma(_799, cbModelParam._m0[31u].z, fma(_795, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791));
        float _1180 = fma(_799, cbModelParam._m0[32u].z, fma(_795, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791));
        float _1203 = _791 + _549;
        float _1204 = _795 + _550;
        float _1205 = _799 + _551;
        float _1215 = fma(_1205, cbModelParam._m0[30u].z, fma(_1204, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1203)) - _1172;
        float _1216 = fma(_1205, cbModelParam._m0[31u].z, fma(_1204, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1203)) - _1176;
        float _1217 = fma(_1205, cbModelParam._m0[32u].z, fma(_1204, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1203)) - _1180;
        float _1221 = inversesqrt(dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217)));
        float _1234 = ((_1221 * _1215) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1172 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1221 * _1216) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1176 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1221 * _1217) / cbModelParam._m0[35u].z) + ((((((_1180 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        float _1271 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1238.x + (-0.5));
        float _1273 = _1271 * (_1238.y + (-0.5));
        float _1274 = _1271 * (_1238.z + (-0.5));
        float _1281 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1245.x + (-0.5));
        float _1283 = _1281 * (_1245.y + (-0.5));
        float _1284 = _1281 * (_1245.z + (-0.5));
        float _1291 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1252.x + (-0.5));
        float _1293 = _1291 * (_1252.y + (-0.5));
        float _1294 = _1291 * (_1252.z + (-0.5));
        float _1301 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1259.x + (-0.5));
        float _1303 = _1301 * (_1259.y + (-0.5));
        float _1304 = _1301 * (_1259.z + (-0.5));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = _1272 * 0.5;
        float _1309 = _1282 * 0.5;
        float _1310 = _1292 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_549, _550, _551), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3847 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1335 + 1.0))) + _1340) * _1305;
        float _1350 = _1273 * 0.5;
        float _1351 = _1283 * 0.5;
        float _1352 = _1293 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_549, _550, _551), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3880 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1377 + 1.0))) + _1382) * _1306;
        float _1392 = _1274 * 0.5;
        float _1393 = _1284 * 0.5;
        float _1394 = _1294 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_549, _550, _551), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3913 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1419 + 1.0))) + _1424) * _1307;
        _1441 = _1274;
        _1442 = _1273;
        _1443 = _1272;
        _1444 = _1284;
        _1445 = _1283;
        _1446 = _1282;
        _1447 = _1294;
        _1448 = _1293;
        _1449 = _1292;
        _1450 = _1307;
        _1451 = _1306;
        _1452 = _1305;
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1130;
        _1442 = _1130;
        _1443 = _1130;
        _1444 = _1130;
        _1445 = _1130;
        _1446 = _1130;
        _1447 = _1130;
        _1448 = _1130;
        _1449 = _1130;
        _1450 = _1130;
        _1451 = _1130;
        _1452 = _1130;
        _1453 = 0.0;
        _1454 = 0.0;
        _1455 = 0.0;
    }
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1142)) + _1142;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1143)) + _1143;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1144)) + _1144;
    float _1488 = fma(_1467, cbSceneParam._m0[89u].z, fma(_1466, cbSceneParam._m0[89u].y, _1465 * cbSceneParam._m0[89u].x));
    float _1491 = fma(_1467, cbSceneParam._m0[90u].z, fma(_1466, cbSceneParam._m0[90u].y, _1465 * cbSceneParam._m0[90u].x));
    float _1494 = fma(_1467, cbSceneParam._m0[91u].z, fma(_1466, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1465));
    float _1509 = _735 * 0.5;
    float _1510 = _736 * 0.5;
    float _1511 = _737 * 0.5;
    float _1512 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1515 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1518 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1552;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1525 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1129, _1133, _1136, _1139));
        float _1529 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1533 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1540 = dot(vec4(cbModelParam._m0[39u]), vec4(_1509, _1510, _1511, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1563;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1554 = dot(vec4(cbModelParam._m0[40u]), vec4(_1509, _1510, _1511, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1567 = (_1563 * cbModelParam._m0[1u].x) + (_1552 * (1.0 - cbModelParam._m0[1u].x));
    float _1577 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _552);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1577 : min(cbModelParam._m0[25u].z, _1577));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1627 = fma(_799, cbModelParam._m0[13u].z, fma(_795, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791)) + cbModelParam._m0[13u].w;
        float _1631 = fma(_799, cbModelParam._m0[14u].z, fma(_795, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791)) + cbModelParam._m0[14u].w;
        float _1635 = fma(_799, cbModelParam._m0[15u].z, fma(_795, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791)) + cbModelParam._m0[15u].w;
        float _1638 = fma(_737, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735));
        float _1641 = fma(_737, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735));
        float _1644 = fma(_737, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735));
        float _1672;
        if (_1638 > 0.0)
        {
            _1672 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1672 = frontier_phi_17_15_ladder;
        }
        float _1876;
        if (_1641 > 0.0)
        {
            _1876 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1876 = frontier_phi_26_22_ladder;
        }
        float _2130;
        if (_1644 > 0.0)
        {
            _2130 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2130 = frontier_phi_38_33_ladder;
        }
        float _2132 = isnan(_1876) ? _1672 : (isnan(_1672) ? _1876 : min(_1672, _1876));
        float _2133 = isnan(_2130) ? _2132 : (isnan(_2132) ? _2130 : min(_2132, _2130));
        float _2137 = (_2133 * _1638) + _1627;
        float _2138 = (_2133 * _1641) + _1631;
        float _2139 = (_2133 * _1644) + _1635;
        float _2140 = _2133 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2140;
        float _2144 = _2140 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 > _2144) || ((_2138 < _2142) || ((_2137 < _2142) || (_2137 > _2144))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2267 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2139, cbModelParam._m0[9u].z, fma(_2138, cbModelParam._m0[9u].y, _2137 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2139, cbModelParam._m0[10u].z, fma(_2138, cbModelParam._m0[10u].y, _2137 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2139, cbModelParam._m0[11u].z, fma(_2138, cbModelParam._m0[11u].y, _2137 * cbModelParam._m0[11u].x))), _1578);
            frontier_phi_16_38_ladder = _2267.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2267.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2267.x * cbModelParam._m0[1u].y;
        }
        _1660 = frontier_phi_16_38_ladder_2;
        _1662 = frontier_phi_16_38_ladder_1;
        _1664 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_735, _736, _737), _1578);
        _1660 = _1648.x * cbModelParam._m0[1u].y;
        _1662 = _1648.y * cbModelParam._m0[1u].y;
        _1664 = _1648.z * cbModelParam._m0[1u].y;
    }
    float _1668 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _552);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1668 : min(cbModelParam._m0[25u].w, _1668));
    float _1760;
    float _1762;
    float _1764;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1724 = fma(_799, cbModelParam._m0[21u].z, fma(_795, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791)) + cbModelParam._m0[21u].w;
        float _1728 = fma(_799, cbModelParam._m0[22u].z, fma(_795, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791)) + cbModelParam._m0[22u].w;
        float _1732 = fma(_799, cbModelParam._m0[23u].z, fma(_795, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791)) + cbModelParam._m0[23u].w;
        float _1735 = fma(_737, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735));
        float _1738 = fma(_737, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735));
        float _1741 = fma(_737, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735));
        float _1881;
        if (_1735 > 0.0)
        {
            _1881 = abs((1.0 - _1724) / _1735);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1724 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1881 = frontier_phi_28_24_ladder;
        }
        float _2157;
        if (_1738 > 0.0)
        {
            _2157 = abs((1.0 - _1728) / _1738);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1728 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2157 = frontier_phi_40_35_ladder;
        }
        float _2370;
        if (_1741 > 0.0)
        {
            _2370 = abs((1.0 - _1732) / _1741);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1732 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2370 = frontier_phi_49_46_ladder;
        }
        float _2372 = isnan(_2157) ? _1881 : (isnan(_1881) ? _2157 : min(_1881, _2157));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1735) + _1724;
        float _2378 = (_2373 * _1738) + _1728;
        float _2379 = (_2373 * _1741) + _1732;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2381 = (-1.0) - _2380;
        float _2383 = _2380 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2379 > _2383) || ((_2379 < _2381) || ((_2378 > _2383) || ((_2378 < _2381) || ((_2377 < _2381) || (_2377 > _2383))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2578 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2379, cbModelParam._m0[17u].z, fma(_2378, cbModelParam._m0[17u].y, _2377 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2379, cbModelParam._m0[18u].z, fma(_2378, cbModelParam._m0[18u].y, _2377 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2379, cbModelParam._m0[19u].z, fma(_2378, cbModelParam._m0[19u].y, _2377 * cbModelParam._m0[19u].x))), _1669);
            frontier_phi_25_49_ladder = _2578.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2578.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2578.x * cbModelParam._m0[1u].z;
        }
        _1760 = frontier_phi_25_49_ladder_2;
        _1762 = frontier_phi_25_49_ladder_1;
        _1764 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1744 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_735, _736, _737), _1669);
        _1760 = _1744.x * cbModelParam._m0[1u].z;
        _1762 = _1744.y * cbModelParam._m0[1u].z;
        _1764 = _1744.z * cbModelParam._m0[1u].z;
    }
    float _1777 = (((_762 * _711) + _763) * _727) * ((cbModelParam._m0[1u].w * (_1760 - _1660)) + _1660);
    float _1779 = (((_762 * _713) + _763) * _727) * ((cbModelParam._m0[1u].w * (_1762 - _1662)) + _1662);
    float _1781 = (((_762 * _714) + _763) * _727) * ((cbModelParam._m0[1u].w * (_1764 - _1664)) + _1664);
    float _1784 = fma(_1781, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1777 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1781, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1777 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1781, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, _1777 * cbSceneParam._m0[91u].x));
    uvec4 _1800 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1802 = _1800.x * 14u;
    uint _1803 = _1802 + 13u;
    float _1810 = _727 + (-1.0);
    float _1815 = (cbLight._m0[_1803].x * _1810) + 1.0;
    float _1816 = (cbLight._m0[_1803].y * _1810) + 1.0;
    float _1817 = (cbLight._m0[_1803].z * _1810) + 1.0;
    float _1818 = (cbLight._m0[_1803].w * _1810) + 1.0;
    uint _1819 = _1802 + 5u;
    float _1825 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1829 = _1802 + 4u;
    float _1835 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1839 = _1802 | 1u;
    float _1850 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_549, _550, _551));
    float _1853 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_549, _550, _551));
    float _4049 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _4060 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1858 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _1860 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1867 = ((cbLight._m0[_1819].x * _1825) * _1860) + ((cbLight._m0[_1829].x * _1835) * _1858);
    float _1868 = ((_1825 * cbLight._m0[_1819].y) * _1860) + ((_1835 * cbLight._m0[_1829].y) * _1858);
    float _1869 = ((_1825 * cbLight._m0[_1819].z) * _1860) + ((_1835 * cbLight._m0[_1829].z) * _1858);
    uvec4 _1873 = floatBitsToUint(cbLight._m0[_1802 + 12u]);
    bool _1875 = _1873.x == 0u;
    float _1886;
    float _1888;
    float _1890;
    if (_1875)
    {
        _1886 = _1867;
        _1888 = _1868;
        _1890 = _1869;
    }
    else
    {
        uint _1894 = _1802 + 6u;
        float _1910 = (dot(vec3(cbLight._m0[_1802 + 2u].xyz), vec3(_549, _550, _551)) * 0.5) + 0.5;
        float _1911 = _1910 * _1910;
        float _4071 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1913 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1886 = (((cbLight._m0[_1894].x * 0.3183098733425140380859375) * _1912) * _1913) + _1867;
        _1888 = (((cbLight._m0[_1894].y * 0.3183098733425140380859375) * _1912) * _1913) + _1868;
        _1890 = (((cbLight._m0[_1894].z * 0.3183098733425140380859375) * _1912) * _1913) + _1869;
    }
    bool _1893 = _1873.y == 0u;
    float _1931;
    float _1933;
    float _1935;
    if (_1893)
    {
        _1931 = _1886;
        _1933 = _1888;
        _1935 = _1890;
    }
    else
    {
        uint _2101 = _1802 + 7u;
        float _2117 = (dot(vec3(cbLight._m0[_1802 + 3u].xyz), vec3(_549, _550, _551)) * 0.5) + 0.5;
        float _2118 = _2117 * _2117;
        float _4087 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2119 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2120 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _1931 = (((cbLight._m0[_2101].x * 0.3183098733425140380859375) * _2119) * _2120) + _1886;
        _1933 = (((cbLight._m0[_2101].y * 0.3183098733425140380859375) * _2119) * _2120) + _1888;
        _1935 = (((cbLight._m0[_2101].z * 0.3183098733425140380859375) * _2119) * _2120) + _1890;
    }
    uint _1938 = _1802 + 8u;
    float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1802].w)) * _552) * 0.949999988079071044921875);
    float _1952 = _1951 * _1951;
    float _1953 = cbLight._m0[_1802].x + _629;
    float _1954 = cbLight._m0[_1802].y + _630;
    float _1955 = cbLight._m0[_1802].z + _631;
    float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
    float _1960 = _1959 * _1953;
    float _1961 = _1959 * _1954;
    float _1962 = _1959 * _1955;
    float _1963 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_1802].xyz));
    float _4103 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _1967 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1968 = dot(vec3(_549, _550, _551), vec3(_1960, _1961, _1962));
    float _4125 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1972 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_1960, _1961, _1962));
    float _4136 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1976 = _1952 * _1952;
    float _1980 = ((_1971 * _1971) * (_1976 + (-1.0))) + 1.0;
    float _1988 = exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0);
    float _1989 = 0.959999978542327880859375 - _708;
    float _1991 = 0.959999978542327880859375 - _709;
    float _1992 = 0.959999978542327880859375 - _710;
    float _1999 = 1.0 - _1952;
    float _2010 = (0.5 / (((_1967 * ((_1966 * _1999) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _1999) + _1952) * _1966))) * _1966;
    float _4147 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1976 / ((_1980 * _1980) * 3.141590118408203125));
    uint _2023 = _1802 + 9u;
    float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _552) * 0.949999988079071044921875);
    float _2035 = _2034 * _2034;
    float _2036 = cbLight._m0[_1839].x + _629;
    float _2037 = cbLight._m0[_1839].y + _630;
    float _2038 = cbLight._m0[_1839].z + _631;
    float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
    float _2043 = _2042 * _2036;
    float _2044 = _2042 * _2037;
    float _2045 = _2042 * _2038;
    float _2046 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_1839].xyz));
    float _4158 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2050 = dot(vec3(_549, _550, _551), vec3(_2043, _2044, _2045));
    float _4169 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_2043, _2044, _2045));
    float _4180 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2058 = _2035 * _2035;
    float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
    float _2069 = exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0);
    float _2076 = 1.0 - _2035;
    float _2086 = (0.5 / (((_1967 * ((_2049 * _2076) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2076) + _2035) * _2049))) * _2049;
    float _4191 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2088 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
    float _2098 = (((((_2069 * _1989) + _711) * cbLight._m0[_2023].x) * _2088) * _1825) + (((((_1988 * _1989) + _711) * cbLight._m0[_1938].x) * _2012) * _1835);
    float _2099 = (((((_2069 * _1991) + _713) * cbLight._m0[_2023].y) * _2088) * _1825) + (((((_1988 * _1991) + _713) * cbLight._m0[_1938].y) * _2012) * _1835);
    float _2100 = (((((_2069 * _1992) + _714) * cbLight._m0[_2023].z) * _2088) * _1825) + (((((_1988 * _1992) + _714) * cbLight._m0[_1938].z) * _2012) * _1835);
    float _2162;
    float _2164;
    float _2166;
    if (_1875)
    {
        _2162 = _2098;
        _2164 = _2099;
        _2166 = _2100;
    }
    else
    {
        uint _2168 = _1802 + 2u;
        uint _2172 = _1802 + 10u;
        float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _552) * 0.949999988079071044921875);
        float _2187 = _2186 * _2186;
        float _2188 = cbLight._m0[_2168].x + _629;
        float _2189 = cbLight._m0[_2168].y + _630;
        float _2190 = cbLight._m0[_2168].z + _631;
        float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
        float _2195 = _2194 * _2188;
        float _2196 = _2194 * _2189;
        float _2197 = _2194 * _2190;
        float _2198 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_2168].xyz));
        float _4202 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2202 = dot(vec3(_549, _550, _551), vec3(_2195, _2196, _2197));
        float _4213 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2206 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2195, _2196, _2197));
        float _4224 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2210 = _2187 * _2187;
        float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
        float _2221 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
        float _2228 = 1.0 - _2187;
        float _2238 = (0.5 / (((_1967 * ((_2201 * _2228) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2228) + _2187) * _2201))) * _2201;
        float _4235 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2240 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
        float _2241 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2162 = (((((_2221 * _1989) + _711) * cbLight._m0[_2172].x) * _2240) * _2241) + _2098;
        _2164 = (((((_2221 * _1991) + _713) * cbLight._m0[_2172].y) * _2240) * _2241) + _2099;
        _2166 = (((((_2221 * _1992) + _714) * cbLight._m0[_2172].z) * _2240) * _2241) + _2100;
    }
    float _2276;
    float _2278;
    float _2280;
    if (_1893)
    {
        _2276 = _2162;
        _2278 = _2164;
        _2280 = _2166;
    }
    else
    {
        uint _2287 = _1802 + 3u;
        uint _2291 = _1802 + 11u;
        float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _552) * 0.949999988079071044921875);
        float _2306 = _2305 * _2305;
        float _2307 = cbLight._m0[_2287].x + _629;
        float _2308 = cbLight._m0[_2287].y + _630;
        float _2309 = cbLight._m0[_2287].z + _631;
        float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
        float _2314 = _2313 * _2307;
        float _2315 = _2313 * _2308;
        float _2316 = _2313 * _2309;
        float _2317 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_2287].xyz));
        float _4251 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2321 = dot(vec3(_549, _550, _551), vec3(_2314, _2315, _2316));
        float _4262 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2325 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2314, _2315, _2316));
        float _4273 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2329 = _2306 * _2306;
        float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
        float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
        float _2347 = 1.0 - _2306;
        float _2357 = (0.5 / (((_1967 * ((_2320 * _2347) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2347) + _2306) * _2320))) * _2320;
        float _4284 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2359 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
        float _2360 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2276 = (((((_2340 * _1989) + _711) * cbLight._m0[_2291].x) * _2359) * _2360) + _2162;
        _2278 = (((((_2340 * _1991) + _713) * cbLight._m0[_2291].y) * _2359) * _2360) + _2164;
        _2280 = (((((_2340 * _1992) + _714) * cbLight._m0[_2291].z) * _2359) * _2360) + _2166;
    }
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    if (_1800.y == 0u)
    {
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2435;
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2435;
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2435;
        uvec4 _2450 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2451 = _2450.x;
        uint _2462 = uint((float(_2450.y) * floor(float(uint(cbSceneParam._m0[85u].y * _650) / _2451))) + floor(float(uint(cbSceneParam._m0[85u].x * _649) / _2451)));
        float _2472 = (log2(_2438 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2473 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        uint _2476 = uint(isnan(14.0) ? _2473 : (isnan(_2473) ? 14.0 : min(_2473, 14.0)));
        uvec4 _2481 = texelFetch(g_lightClusterGridBuffer, int(((_2476 << 2u) + (_2462 << 6u)) >> 2u));
        uint _2482 = _2481.x;
        uint _2483 = _2450.z;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((((1u << ((_2483 >> 4u) & 15u)) + 4294967295u) & _2482) == 0u) || ((_2483 & 240u) == 0u))
        {
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
        }
        else
        {
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            uint _2742 = 0u;
            uint _2751;
            bool _2752;
            for (;;)
            {
                _2751 = texelFetch(g_lightClassification, int((((_2476 << 5u) + (_2462 << 9u)) + (_2742 << 2u)) >> 2u)).x;
                _2752 = _2751 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2752)
                {
                    frontier_phi_66_pred = _2736;
                    frontier_phi_66_pred_1 = _2741;
                    frontier_phi_66_pred_2 = _2740;
                    frontier_phi_66_pred_3 = _2739;
                    frontier_phi_66_pred_4 = _2738;
                    frontier_phi_66_pred_5 = _2737;
                }
                else
                {
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    uint _2887;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2751;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    for (;;)
                    {
                        uint _2891 = uint(findLSB(_2887)) + (_2742 << 5u);
                        uint _2888 = (_2887 + 4294967295u) & _2887;
                        uint _2893 = _2891 * 48u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 3u)).x));
                        uint _2913 = (_2891 * 48u) + 4u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2932 = (_2891 * 48u) + 8u;
                        vec3 _2943 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x));
                        float _2947 = _2907.x - _2436;
                        float _2948 = _2907.y - _2437;
                        float _2949 = _2907.z - _2438;
                        float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                        float _2953 = inversesqrt(_2950);
                        float _2954 = _2953 * _2947;
                        float _2955 = _2953 * _2948;
                        float _2956 = _2953 * _2949;
                        float _2957 = dot(vec3(_668, _671, _674), vec3(_2954, _2955, _2956));
                        float _2962 = 1.0 - (_2950 * _2907.w);
                        float _4310 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _2964 = sqrt(_2950) * _2926.w;
                        float _2967 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2957) + _2968;
                        float _2974 = _2964 * _2964;
                        float _2978 = ((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2963) / ((_2974 * 0.699999988079071044921875) + 1.0);
                        float _2982 = (-0.0) - _2436;
                        float _2983 = (-0.0) - _2437;
                        float _2984 = (-0.0) - _2438;
                        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2999 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                        float _3000 = 1.0 - _743;
                        float _3007 = sqrt(1.0 - ((1.0 - (_3000 * _3000)) * (1.0 - (_2999 * _2999))));
                        float _3008 = _3007 * _3007;
                        float _3009 = _3008 * _3008;
                        float _3010 = _2989 + _2954;
                        float _3011 = _2990 + _2955;
                        float _3012 = _2991 + _2956;
                        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                        float _3020 = dot(vec3(_668, _671, _674), vec3(_2989, _2990, _2991));
                        float _4326 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3023 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3024 = dot(vec3(_668, _671, _674), vec3(_3016 * _3010, _3016 * _3011, _3016 * _3012));
                        float _4337 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3031 = ((_3027 * _3027) * (_3009 + (-1.0))) + 1.0;
                        float _3032 = _2967 * _3008;
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _2957) + _3033;
                        float _4348 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3037 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3038 = 1.0 - _3008;
                        float _3048 = (0.5 / (((_3037 * ((_3023 * _3038) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_3037 * _3038) + _3008) * _3023))) * _3037;
                        float _4359 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3059 = (((_3009 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_3031 * _3031) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125))) * _2963;
                        _2811 = (_2978 * _2926.x) + _2884;
                        _2812 = (_2978 * _2926.y) + _2885;
                        _2813 = (_2978 * _2926.z) + _2886;
                        _2808 = (_3059 * _2943.x) + _2881;
                        _2809 = (_3059 * _2943.y) + _2882;
                        _2810 = (_3059 * _2943.z) + _2883;
                        if (_2888 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2888;
                        }
                    }
                    frontier_phi_66_pred = _2808;
                    frontier_phi_66_pred_1 = _2813;
                    frontier_phi_66_pred_2 = _2812;
                    frontier_phi_66_pred_3 = _2811;
                    frontier_phi_66_pred_4 = _2810;
                    frontier_phi_66_pred_5 = _2809;
                }
                _2584 = frontier_phi_66_pred;
                _2594 = frontier_phi_66_pred_1;
                _2592 = frontier_phi_66_pred_2;
                _2590 = frontier_phi_66_pred_3;
                _2588 = frontier_phi_66_pred_4;
                _2586 = frontier_phi_66_pred_5;
                uint _2743 = _2742 + 1u;
                if (_2743 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2736 = _2584;
                    _2737 = _2586;
                    _2738 = _2588;
                    _2739 = _2590;
                    _2740 = _2592;
                    _2741 = _2594;
                    _2742 = _2743;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
        }
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.z;
        uint _2600 = (_2598 >> 8u) & 15u;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        if (((4294967295u << _2600) & _2482) == 0u)
        {
            _2704 = _2583;
            _2706 = _2585;
            _2708 = _2587;
            _2710 = _2589;
            _2712 = _2591;
            _2714 = _2593;
        }
        else
        {
            float _2729 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
            float _2730 = _2729 * _2436;
            float _2731 = _2729 * _2437;
            float _2732 = _2729 * _2438;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2600 < ((_2598 >> 12u) & 15u))
            {
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2715;
                float _2864 = _2583;
                float _2865 = _2585;
                float _2866 = _2587;
                float _2867 = _2589;
                float _2868 = _2591;
                float _2869 = _2593;
                uint _2870 = _2600;
                uint _2879;
                bool _2880;
                for (;;)
                {
                    _2879 = texelFetch(g_lightClassification, int((((_2476 << 5u) + (_2462 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                    _2880 = _2879 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2880)
                    {
                        frontier_phi_77_pred = _2869;
                        frontier_phi_77_pred_1 = _2868;
                        frontier_phi_77_pred_2 = _2867;
                        frontier_phi_77_pred_3 = _2866;
                        frontier_phi_77_pred_4 = _2865;
                        frontier_phi_77_pred_5 = _2864;
                    }
                    else
                    {
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3086 = _2864;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        uint _3092 = _2879;
                        uint _3093;
                        vec4 _3118;
                        float _3119;
                        vec4 _3134;
                        vec3 _3146;
                        vec4 _3161;
                        vec4 _3177;
                        float _3224;
                        bool _3225;
                        for (;;)
                        {
                            uint _3103 = ((_2870 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3092));
                            _3093 = (_3092 + 4294967295u) & _3092;
                            uint _3105 = _3103 * 40u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3119 = _3118.w;
                            uint _3121 = (_3103 * 40u) + 4u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3103 * 40u) + 8u;
                            _3146 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x));
                            uint _3148 = (_3103 * 40u) + 16u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3164 = (_3103 * 40u) + 20u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3180 = (_3103 * 40u) + 24u;
                            vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3199 = (_3103 * 40u) + 28u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            _3224 = fma(_2438, _3212.z, fma(_2437, _3212.y, _3212.x * _2436)) + _3212.w;
                            _3225 = !((fma(_2438, _3193.z, fma(_2437, _3193.y, _3193.x * _2436)) + _3193.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3225)
                            {
                                float _3252 = _3118.x - _2436;
                                float _3253 = _3118.y - _2437;
                                float _3254 = _3118.z - _2438;
                                float _3255 = dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254));
                                float _3258 = inversesqrt(_3255);
                                float _3259 = _3258 * _3252;
                                float _3260 = _3258 * _3253;
                                float _3261 = _3258 * _3254;
                                float _3265 = 1.0 - (_3255 / (_3119 * _3119));
                                float _4370 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3270 = sqrt(_3255) * _3134.w;
                                float _3272 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                                float _3273 = _3272 * _3272;
                                float _3276 = ((1.0 - _3273) * dot(vec3(_3259, _3260, _3261), vec3(_668, _671, _674))) + _3273;
                                float _3279 = _3270 * _3270;
                                float _3283 = (fma(_2438, _3161.z, fma(_2437, _3161.y, _3161.x * _2436)) + _3161.w) / _3224;
                                float _3284 = (fma(_2438, _3177.z, fma(_2437, _3177.y, _3177.x * _2436)) + _3177.w) / _3224;
                                float _3288 = 1.0 - dot(vec2(_3283, _3284), vec2(_3283, _3284));
                                float _4386 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3290 = _3289 * (((isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))) * _3266) / ((_3279 * 0.699999988079071044921875) + 1.0));
                                float _3302 = exp2(log2(1.0 / ((_3279 * 3.5) + 5.0)) * 0.25);
                                float _3303 = 1.0 - _743;
                                float _3310 = sqrt(1.0 - ((1.0 - (_3303 * _3303)) * (1.0 - (_3302 * _3302))));
                                float _3311 = _3310 * _3310;
                                float _3312 = _3311 * _3311;
                                float _3313 = _3259 - _2730;
                                float _3314 = _3260 - _2731;
                                float _3315 = _3261 - _2732;
                                float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                                float _3323 = dot(vec3(_668, _671, _674), vec3((-0.0) - _2730, (-0.0) - _2731, (-0.0) - _2732));
                                float _4397 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3327 = dot(vec3(_668, _671, _674), vec3(_3319 * _3313, _3319 * _3314, _3319 * _3315));
                                float _4408 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3334 = ((_3330 * _3330) * (_3312 + (-1.0))) + 1.0;
                                float _3335 = _3272 * _3311;
                                float _3336 = _3335 * _3335;
                                float _3342 = ((1.0 - _3336) * dot(vec3(_668, _671, _674), vec3(_3259, _3260, _3261))) + _3336;
                                float _4419 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3344 = 1.0 - _3311;
                                float _3354 = (0.5 / (((_3343 * ((_3326 * _3344) + _3311)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3311) * _3326))) * _3343;
                                float _4430 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3364 = (_3289 * _3266) * (((_3312 * 3.1415927410125732421875) * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) / ((_3334 * _3334) * ((_3279 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3290 * _3134.y;
                                frontier_phi_83_pred_1 = _3290 * _3134.x;
                                frontier_phi_83_pred_2 = _3364 * _3146.z;
                                frontier_phi_83_pred_3 = _3364 * _3146.y;
                                frontier_phi_83_pred_4 = _3364 * _3146.x;
                                frontier_phi_83_pred_5 = _3290 * _3134.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3372 = frontier_phi_83_pred;
                            _3371 = frontier_phi_83_pred_1;
                            _3370 = frontier_phi_83_pred_2;
                            _3369 = frontier_phi_83_pred_3;
                            _3368 = frontier_phi_83_pred_4;
                            _3373 = frontier_phi_83_pred_5;
                            _3076 = _3371 + _3089;
                            _3077 = _3372 + _3090;
                            _3078 = _3373 + _3091;
                            _3073 = _3368 + _3086;
                            _3074 = _3369 + _3087;
                            _3075 = _3370 + _3088;
                            if (_3093 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3093;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3078;
                        frontier_phi_77_pred_1 = _3077;
                        frontier_phi_77_pred_2 = _3076;
                        frontier_phi_77_pred_3 = _3075;
                        frontier_phi_77_pred_4 = _3074;
                        frontier_phi_77_pred_5 = _3073;
                    }
                    _2715 = frontier_phi_77_pred;
                    _2713 = frontier_phi_77_pred_1;
                    _2711 = frontier_phi_77_pred_2;
                    _2709 = frontier_phi_77_pred_3;
                    _2707 = frontier_phi_77_pred_4;
                    _2705 = frontier_phi_77_pred_5;
                    uint _2871 = _2870 + 1u;
                    if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2864 = _2705;
                        _2865 = _2707;
                        _2866 = _2709;
                        _2867 = _2711;
                        _2868 = _2713;
                        _2869 = _2715;
                        _2870 = _2871;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2709;
                frontier_phi_58_59_ladder_1 = _2715;
                frontier_phi_58_59_ladder_2 = _2713;
                frontier_phi_58_59_ladder_3 = _2711;
                frontier_phi_58_59_ladder_4 = _2707;
                frontier_phi_58_59_ladder_5 = _2705;
            }
            else
            {
                frontier_phi_58_59_ladder = _2587;
                frontier_phi_58_59_ladder_1 = _2593;
                frontier_phi_58_59_ladder_2 = _2591;
                frontier_phi_58_59_ladder_3 = _2589;
                frontier_phi_58_59_ladder_4 = _2585;
                frontier_phi_58_59_ladder_5 = _2583;
            }
            _2704 = frontier_phi_58_59_ladder_5;
            _2706 = frontier_phi_58_59_ladder_4;
            _2708 = frontier_phi_58_59_ladder;
            _2710 = frontier_phi_58_59_ladder_3;
            _2712 = frontier_phi_58_59_ladder_2;
            _2714 = frontier_phi_58_59_ladder_1;
        }
        float _2719 = isnan(1.0) ? _727 : (isnan(_727) ? 1.0 : min(_727, 1.0));
        _2495 = (_2719 * _2710) + _1931;
        _2497 = (_2719 * _2712) + _1933;
        _2499 = (_2719 * _2714) + _1935;
        _2501 = ((_2704 * _711) * _2719) + _2276;
        _2503 = ((_2706 * _713) * _2719) + _2278;
        _2505 = ((_2708 * _714) * _2719) + _2280;
    }
    else
    {
        _2495 = _1931;
        _2497 = _1933;
        _2499 = _1935;
        _2501 = _2276;
        _2503 = _2278;
        _2505 = _2280;
    }
    float _4446 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4457 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _4468 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _2522 = ((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2495 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _727))) + ((_2501 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1567)) * cbPerFrame._m0[3u].x);
    float _2523 = ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2497 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _727))) + ((_2503 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1567)) * cbPerFrame._m0[3u].x);
    float _2524 = ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2499 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _727))) + ((_2505 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1567)) * cbPerFrame._m0[3u].x);
    uint _2525 = _234 + 6u;
    float _2533 = _649 / cbSceneParam._m0[86u].x;
    float _2534 = _650 / cbSceneParam._m0[86u].y;
    vec4 _2548 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, (log2((isnan(cbSceneParam._m0[77u].w) ? _571 : (isnan(_571) ? cbSceneParam._m0[77u].w : min(_571, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2550 = _2548.x;
    float _2551 = _2548.y;
    float _2552 = _2548.z;
    float _2553 = _2548.w;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    if (_571 > cbSceneParam._m0[78u].w)
    {
        float _2608 = isnan(_571) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _571 : min(cbSceneParam._m0[80u].w, _571));
        float _2609 = _2608 / _571;
        float _2620 = _2609 * _622;
        float _2621 = _623 * _2609;
        float _2622 = (-0.0) - _2621;
        float _2624 = _2609 * _624;
        float _2626 = (cbSceneParam._m0[77u].w * _2622) / _2608;
        float _2627 = _2626 + cbSceneParam._m0[79u].w;
        float _2628 = cbSceneParam._m0[79u].w - _2621;
        float _2634 = sqrt(((_2620 * _2620) + (_2621 * _2621)) + (_2624 * _2624));
        float _2637 = (1.0 - (cbSceneParam._m0[77u].w / _2608)) * _2634;
        float _2642 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2644 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2821;
        if (abs((_2622 - _2626) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2821 = ((((_2627 > 0.0) ? exp2(_2642 * _2627) : (2.0 - exp2(_2644 * _2627))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2637;
        }
        else
        {
            float _2765 = 1.0 / cbSceneParam._m0[80u].x;
            float _2766 = isnan(_2628) ? _2627 : (isnan(_2627) ? _2628 : max(_2627, _2628));
            float _2767 = isnan(_2628) ? _2627 : (isnan(_2627) ? _2628 : min(_2627, _2628));
            float _2776 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : min(_2766, 0.0));
            float _2777 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : min(_2767, 0.0));
            _2821 = ((abs(_2634 / _2622) * cbSceneParam._m0[80u].y) * ((((_2776 - _2777) * 2.0) - ((exp2(_2642 * (isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0)))) - exp2(_2642 * (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0))))) * _2765)) - ((exp2(_2644 * _2776) - exp2(_2644 * _2777)) * _2765))) + (_2637 * cbSceneParam._m0[80u].z);
        }
        vec4 _2823 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2533, _2534, 1.0), 0.0);
        float _2832 = exp2((_2821 * (-1.44269502162933349609375)) * (1.0 - _2823.w));
        float _2833 = log2(_2832);
        float _2849 = log2(_2553);
        _2646 = (exp2(_2849 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].x)) * _2823.x) / cbSceneParam._m0[78u].x)) + _2550;
        _2648 = (exp2(_2849 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].y)) * _2823.y) / cbSceneParam._m0[78u].y)) + _2551;
        _2650 = (exp2(_2849 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].z)) * _2823.z) / cbSceneParam._m0[78u].z)) + _2552;
        _2652 = _2832 * _2553;
    }
    else
    {
        _2646 = _2550;
        _2648 = _2551;
        _2650 = _2552;
        _2652 = _2553;
    }
    bool _2859;
    vec4 _2662;
    vec4 _2684;
    float _2686;
    float _2690;
    float _2691;
    float _2692;
    float _2693;
    bool _2703;
    for (;;)
    {
        _2662 = cbMatDynParam._m0[0u];
        float _2664 = roundEven(_2662.y);
        bool _2665 = _2664 == 3.0;
        float _2666 = log2(_2652);
        float _2673 = exp2(_2666 * cbSceneParam._m0[78u].x) * _2522;
        float _2674 = exp2(_2666 * cbSceneParam._m0[78u].y) * _2523;
        float _2675 = exp2(_2666 * cbSceneParam._m0[78u].z) * _2524;
        float _2682 = _638 + (-0.5);
        _2684 = cbMtdParam._m0[1u];
        _2686 = _2684.y * _2682;
        float _2689 = (_2664 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2690 = _2689 * (_2665 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2646)));
        _2691 = _2689 * (_2665 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2648)));
        _2692 = _2689 * (_2665 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2650)));
        _2693 = _2682 * 0.999000012874603271484375;
        _2703 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2703)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2693) < 0.5)
            {
                _2859 = true;
                break;
            }
        }
        uint _2800 = _687 + uint(_2662.w);
        if ((cbInstanceData._m0[_2800].w < 1.0) && ((cbInstanceData._m0[_2800].w + _2693) < 0.5))
        {
            _2859 = true;
            break;
        }
        if ((_2686 + 1.0) < _2684.x)
        {
            _2859 = true;
            break;
        }
        _2859 = false;
        break;
    }
    float _3064;
    if (_2859)
    {
        discard_state = true;
        _3064 = 0.0;
    }
    else
    {
        _3064 = cbInstanceData._m0[_2525].w;
    }
    SV_Target.x = _2690;
    SV_Target.y = _2691;
    SV_Target.z = _2692;
    SV_Target.w = _3064;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2525].w;
    discard_exit();
}


