#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1626;
float _4028;
float _4029;
float _4030;
float _4031;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4040 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4051 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4062 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _386 = _381.x * cbMtdParam._m0[11u].x;
    float _387 = _381.y * cbMtdParam._m0[11u].y;
    float _388 = _381.z * cbMtdParam._m0[11u].z;
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _472 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _489 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _426.x) * 2.0) - ((((_460 - _472) * cbMtdParam._m0[23u].w) + _472) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4073 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _497 = (_490 * ((_407.x * cbMtdParam._m0[12u].x) - _386)) + _386;
    float _498 = (_490 * ((_407.y * cbMtdParam._m0[12u].y) - _387)) + _387;
    float _499 = (_490 * ((_407.z * cbMtdParam._m0[12u].z) - _388)) + _388;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _562 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _426.y) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[23u].w) + _548) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4084 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _573 = (_355.x * cbMtdParam._m0[9u].x) * ((_563 * ((_516.x * cbMtdParam._m0[13u].x) - _497)) + _497);
    float _574 = (_355.y * cbMtdParam._m0[9u].y) * ((_563 * ((_516.y * cbMtdParam._m0[13u].y) - _498)) + _498);
    float _575 = (_355.z * cbMtdParam._m0[9u].z) * ((_563 * ((_516.z * cbMtdParam._m0[13u].z) - _499)) + _499);
    float _579 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _573;
    float _582 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _574;
    float _585 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _575;
    float _593 = (((_573 - _579) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) + _579) * 4.55000019073486328125;
    float _595 = (((_574 - _582) * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) + _582) * 4.55000019073486328125;
    float _597 = (((_575 - _585) * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) + _585) * 4.55000019073486328125;
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _318) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _319) + cbTextureTilingScale._m0[14u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _677 = _675.x;
    float _678 = _675.y;
    float _679 = _675.z;
    float _686 = ((_658.x - _677) * _490) + _677;
    float _687 = ((_658.y - _678) * _490) + _678;
    float _688 = ((_658.z - _679) * _490) + _679;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _713 = ((_700.z - _688) * _563) + _688;
    float _716 = ((((_700.x - _686) * _563) + _686) * 2.0) + (-1.0);
    float _717 = ((((_700.y - _687) * _563) + _687) * 2.0) + (-1.0);
    float _718 = dot(vec2(_716, _717), vec2(_716, _717));
    float _4095 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _723 = sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))));
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _762 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _764 = _762.x;
    float _765 = 1.0 - _764;
    float _774 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _777 = ((isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : min(_774, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _786 = (_777 - ((((((_764 - _765) * cbMtdParam._m0[24u].z) + _765) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _777))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4116 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _787 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _794 = (_787 * ((_616.x * cbMtdParam._m0[18u].x) - _593)) + _593;
    float _795 = (_787 * ((_616.y * cbMtdParam._m0[18u].y) - _595)) + _595;
    float _796 = (_787 * ((_616.z * cbMtdParam._m0[18u].z) - _597)) + _597;
    vec4 _808 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _318) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _319) + cbTextureTilingScale._m0[19u].w));
    float _810 = _808.x;
    float _811 = 1.0 - _810;
    float _836 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_810 - _811) * cbMtdParam._m0[24u].w) + _811) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4127 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _837 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _845 = ((((cbMtdParam._m0[10u].x - _794) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _837) + _794;
    float _846 = ((((cbMtdParam._m0[10u].y - _795) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _837) + _795;
    float _847 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _796)) * _837) + _796;
    vec4 _873 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _875 = _873.x;
    float _892 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _875) * _490) + _875;
    float _909 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _892) * _563) + _892;
    float _913 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _909) * cbMtdParam._m0[19u].z) + _909;
    float _915 = _913 - (_913 * _787);
    float _917 = _915 - (_915 * _837);
    float _922 = (((_635.z - _713) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _713;
    float _926 = ((_737.z - _922) * cbMtdParam._m0[19u].w) + _922;
    vec4 _940 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _947 = (_940.x * 2.0) + (-1.0);
    float _948 = (_940.y * 2.0) + (-1.0);
    float _949 = dot(vec2(_947, _948), vec2(_947, _948));
    float _4138 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _957 = (_787 * (_940.z - _926)) + _926;
    float _960 = ((cbMtdParam._m0[23u].x - _957) * _837) + _957;
    vec4 _981 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _318) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _319) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _987 = (_981.x * 2.0) + (-1.0);
    float _988 = (_981.y * 2.0) + (-1.0);
    float _989 = dot(vec2(_987, _988), vec2(_987, _988));
    float _4149 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _1003 = (_716 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_635.x * 2.0) + (-1.0)))) + (((_737.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1004 = (_717 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_635.y * 2.0) + (-1.0)))) + (((_737.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1016 = (((_947 - _1003) + (cbMtdParam._m0[21u].x * _1003)) * _787) + _1003;
    float _1017 = (((_948 - _1004) + (cbMtdParam._m0[21u].x * _1004)) * _787) + _1004;
    float _1018 = (_787 * (sqrt(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) - _723)) + _723;
    float _1029 = (((_987 - _1016) + (_1016 * cbMtdParam._m0[22u].z)) * _837) + _1016;
    float _1030 = (((_988 - _1017) + (_1017 * cbMtdParam._m0[22u].z)) * _837) + _1017;
    float _1031 = ((sqrt(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) - _1018) * _837) + _1018;
    float _1033 = cbMtdParam._m0[22u].x + _737.w;
    float _1036 = fma(_1031, _267 * NORMAL.x, fma(_1030, _274 * TANGENT.x, (_260 * _252) * _1029));
    float _1039 = fma(_1031, _267 * NORMAL.y, fma(_1030, _274 * TANGENT.y, (_260 * _253) * _1029));
    float _1042 = fma(_1031, _267 * NORMAL.z, fma(_1030, _274 * TANGENT.z, (_260 * _254) * _1029));
    float _1046 = inversesqrt(dot(vec3(_1036, _1039, _1042), vec3(_1036, _1039, _1042)));
    float _1047 = _1046 * _1036;
    float _1048 = _1046 * _1039;
    float _1049 = _1046 * _1042;
    float _4160 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _1050 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _4182 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4193 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4204 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4215 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _1055 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _1069 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1119 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1109);
    float _1120 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1109);
    float _1121 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1109);
    float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
    float _1126 = _1119 * _1125;
    float _1127 = _1120 * _1125;
    float _1128 = _1121 * _1125;
    vec4 _1133 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1135 = _1133.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1307 = sqrt(((_1119 * _1119) + (_1120 * _1120)) + (_1121 * _1121));
        float _1313 = (cbMatDynParam._m0[5u].x * _1307) + cbMatDynParam._m0[5u].y;
        float _4226 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1318 = (cbMatDynParam._m0[5u].z * _1307) + cbMatDynParam._m0[5u].w;
        float _4237 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) - _1314)) + _1314) < ((_1135 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1146 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1147 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1165 = fma(_1049, cbSceneParam._m0[5u].z, fma(_1048, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1047));
    float _1168 = fma(_1049, cbSceneParam._m0[6u].z, fma(_1048, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1047));
    float _1171 = fma(_1049, cbSceneParam._m0[7u].z, fma(_1048, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1047));
    uint _1184 = _299 + 9u;
    uint _1185 = _1184 + uint(cbMatDynParam._m0[0u].w);
    float _1191 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * cbInstanceData._m0[_1185].x;
    float _1192 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * cbInstanceData._m0[_1185].y;
    float _1193 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * cbInstanceData._m0[_1185].z;
    float _4248 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1194 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1195 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1196 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _1197 = 1.0 - _1055;
    float _1198 = _1194 * _1197;
    float _1199 = _1195 * _1197;
    float _1200 = _1196 * _1197;
    float _1205 = (_1194 + (-0.039999999105930328369140625)) * _1055;
    float _1206 = (_1195 + (-0.039999999105930328369140625)) * _1055;
    float _1207 = (_1196 + (-0.039999999105930328369140625)) * _1055;
    float _1208 = _1205 + 0.039999999105930328369140625;
    float _1210 = _1206 + 0.039999999105930328369140625;
    float _1211 = _1207 + 0.039999999105930328369140625;
    vec4 _1220 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1146, cbSceneParam._m0[86u].y * _1147));
    float _1224 = ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * TEXCOORD_5.w) * _1220.x;
    float _1225 = dot(vec3(_1047, _1048, _1049), vec3(_1126, _1127, _1128));
    float _1228 = _1225 * 2.0;
    float _1232 = (_1228 * _1047) - _1126;
    float _1233 = (_1228 * _1048) - _1127;
    float _1234 = (_1228 * _1049) - _1128;
    float _1238 = abs(dot(vec3(_1126, _1127, _1128), vec3(_1047, _1048, _1049)));
    float _4281 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _1240 = sqrt(_1050);
    float _1253 = exp2((_1240 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1240 * 3.0));
    float _1259 = (1.0 - _1253) * ((_1240 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1260 = _1253 * _1240;
    float _1288 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1292 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1296 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1625;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1350 = fma(_1296, cbModelParam._m0[26u].z, fma(_1292, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288));
        float _1354 = fma(_1296, cbModelParam._m0[27u].z, fma(_1292, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288));
        float _1358 = fma(_1296, cbModelParam._m0[28u].z, fma(_1292, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288));
        float _1383 = _1288 + _1047;
        float _1384 = _1292 + _1048;
        float _1385 = _1296 + _1049;
        float _1395 = fma(_1385, cbModelParam._m0[26u].z, fma(_1384, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1383)) - _1350;
        float _1396 = fma(_1385, cbModelParam._m0[27u].z, fma(_1384, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1383)) - _1354;
        float _1397 = fma(_1385, cbModelParam._m0[28u].z, fma(_1384, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1383)) - _1358;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1350 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1354 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[34u].z) + ((((((_1358 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1453 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1419.x + (-0.5));
        float _1455 = _1453 * (_1419.y + (-0.5));
        float _1456 = _1453 * (_1419.z + (-0.5));
        float _1463 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1426.x + (-0.5));
        float _1465 = _1463 * (_1426.y + (-0.5));
        float _1466 = _1463 * (_1426.z + (-0.5));
        float _1473 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1433.x + (-0.5));
        float _1475 = _1473 * (_1433.y + (-0.5));
        float _1476 = _1473 * (_1433.z + (-0.5));
        float _1483 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1440.x + (-0.5));
        float _1485 = _1483 * (_1440.y + (-0.5));
        float _1486 = _1483 * (_1440.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1507 = (dot(vec3(_1047, _1048, _1049), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1517 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4329 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1519 + 1.0))) + _1524) * _1487;
        float _1534 = _1455 * 0.5;
        float _1535 = _1465 * 0.5;
        float _1536 = _1475 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_1047, _1048, _1049), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4362 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1561 + 1.0))) + _1566) * _1488;
        float _1576 = _1456 * 0.5;
        float _1577 = _1466 * 0.5;
        float _1578 = _1476 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_1047, _1048, _1049), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4395 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1603 + 1.0))) + _1608) * _1489;
        _1625 = _1456;
        _1627 = _1455;
        _1628 = _1454;
        _1629 = _1466;
        _1630 = _1465;
        _1631 = _1464;
        _1632 = _1476;
        _1633 = _1475;
        _1634 = _1474;
        _1635 = _1489;
        _1636 = _1488;
        _1637 = _1487;
        _1638 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1639 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1640 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1626;
        _1627 = _1626;
        _1628 = _1626;
        _1629 = _1626;
        _1630 = _1626;
        _1631 = _1626;
        _1632 = _1626;
        _1633 = _1626;
        _1634 = _1626;
        _1635 = _1626;
        _1636 = _1626;
        _1637 = _1626;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1667 = fma(_1296, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1288));
        float _1671 = fma(_1296, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1288));
        float _1675 = fma(_1296, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1288));
        float _1698 = _1288 + _1047;
        float _1699 = _1292 + _1048;
        float _1700 = _1296 + _1049;
        float _1710 = fma(_1700, cbModelParam._m0[30u].z, fma(_1699, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1698)) - _1667;
        float _1711 = fma(_1700, cbModelParam._m0[31u].z, fma(_1699, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1698)) - _1671;
        float _1712 = fma(_1700, cbModelParam._m0[32u].z, fma(_1699, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1698)) - _1675;
        float _1716 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
        float _1729 = ((_1716 * _1710) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1667 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1730 = ((_1716 * _1711) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1671 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1731 = ((_1716 * _1712) / cbModelParam._m0[35u].z) + ((((((_1675 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1733 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        vec4 _1740 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        vec4 _1747 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        vec4 _1754 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1729, _1730, _1731), 0.0);
        float _1766 = exp2((_1733.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1733.x + (-0.5));
        float _1768 = _1766 * (_1733.y + (-0.5));
        float _1769 = _1766 * (_1733.z + (-0.5));
        float _1776 = exp2((_1740.w + (-0.5)) * 20.0) * 2.0;
        float _1777 = _1776 * (_1740.x + (-0.5));
        float _1778 = _1776 * (_1740.y + (-0.5));
        float _1779 = _1776 * (_1740.z + (-0.5));
        float _1786 = exp2((_1747.w + (-0.5)) * 20.0) * 2.0;
        float _1787 = _1786 * (_1747.x + (-0.5));
        float _1788 = _1786 * (_1747.y + (-0.5));
        float _1789 = _1786 * (_1747.z + (-0.5));
        float _1796 = exp2((_1754.w + (-0.5)) * 20.0) * 2.0;
        float _1797 = _1796 * (_1754.x + (-0.5));
        float _1798 = _1796 * (_1754.y + (-0.5));
        float _1799 = _1796 * (_1754.z + (-0.5));
        float _1800 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1801 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1803 = _1767 * 0.5;
        float _1804 = _1777 * 0.5;
        float _1805 = _1787 * 0.5;
        float _1806 = dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805));
        float _1811 = (_1806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1806);
        float _1819 = (dot(vec3(_1047, _1048, _1049), vec3(_1811 * _1803, _1811 * _1804, _1811 * _1805)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1828 = sqrt(((_1804 * _1804) + (_1803 * _1803)) + (_1805 * _1805)) / (_1800 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1830 = _1829 * 2.0;
        float _1834 = (1.0 - _1829) / (_1829 + 1.0);
        float _4458 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1844 = ((((1.0 - _1835) * (_1830 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1830 + 1.0))) + _1835) * _1800;
        float _1845 = _1768 * 0.5;
        float _1846 = _1778 * 0.5;
        float _1847 = _1788 * 0.5;
        float _1848 = dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847));
        float _1853 = (_1848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1848);
        float _1861 = (dot(vec3(_1047, _1048, _1049), vec3(_1853 * _1845, _1853 * _1846, _1853 * _1847)) + 1.0) * 0.5;
        float _4469 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1870 = sqrt(((_1846 * _1846) + (_1845 * _1845)) + (_1847 * _1847)) / (_1801 + 9.9999997473787516355514526367188e-06);
        float _4480 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1872 = _1871 * 2.0;
        float _1876 = (1.0 - _1871) / (_1871 + 1.0);
        float _4491 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1886 = ((((1.0 - _1877) * (_1872 + 2.0)) * exp2(log2(isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_1872 + 1.0))) + _1877) * _1801;
        float _1887 = _1769 * 0.5;
        float _1888 = _1779 * 0.5;
        float _1889 = _1789 * 0.5;
        float _1890 = dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889));
        float _1895 = (_1890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1890);
        float _1903 = (dot(vec3(_1047, _1048, _1049), vec3(_1895 * _1887, _1895 * _1888, _1895 * _1889)) + 1.0) * 0.5;
        float _4502 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1912 = sqrt(((_1888 * _1888) + (_1887 * _1887)) + (_1889 * _1889)) / (_1802 + 9.9999997473787516355514526367188e-06);
        float _4513 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1914 = _1913 * 2.0;
        float _1918 = (1.0 - _1913) / (_1913 + 1.0);
        float _4524 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1928 = ((((1.0 - _1919) * (_1914 + 2.0)) * exp2(log2(isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_1914 + 1.0))) + _1919) * _1802;
        _1936 = _1769;
        _1937 = _1768;
        _1938 = _1767;
        _1939 = _1779;
        _1940 = _1778;
        _1941 = _1777;
        _1942 = _1789;
        _1943 = _1788;
        _1944 = _1787;
        _1945 = _1802;
        _1946 = _1801;
        _1947 = _1800;
        _1948 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)));
        _1949 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)));
        _1950 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)));
    }
    else
    {
        _1936 = _1626;
        _1937 = _1626;
        _1938 = _1626;
        _1939 = _1626;
        _1940 = _1626;
        _1941 = _1626;
        _1942 = _1626;
        _1943 = _1626;
        _1944 = _1626;
        _1945 = _1626;
        _1946 = _1626;
        _1947 = _1626;
        _1948 = 0.0;
        _1949 = 0.0;
        _1950 = 0.0;
    }
    float _1960 = (cbModelParam._m0[1u].x * (_1948 - _1638)) + _1638;
    float _1961 = (cbModelParam._m0[1u].x * (_1949 - _1639)) + _1639;
    float _1962 = (cbModelParam._m0[1u].x * (_1950 - _1640)) + _1640;
    float _1983 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1960));
    float _2004 = _1232 * 0.5;
    float _2005 = _1233 * 0.5;
    float _2006 = _1234 * 0.5;
    float _2007 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1938, _1941, _1944, _1947));
    float _2010 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1937, _1940, _1943, _1946));
    float _2013 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1936, _1939, _1942, _1945));
    float _2047;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2020 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1625, _1629, _1632, _1635));
        float _2024 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1627, _1630, _1633, _1636));
        float _2028 = dot(vec4(_2004, _2005, _2006, 1.0), vec4(_1628, _1631, _1634, _1637));
        float _2035 = dot(vec4(cbModelParam._m0[39u]), vec4(_2004, _2005, _2006, 1.0));
        _2047 = dot(vec3(isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)), isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)), isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2035) ? 0.0 : (isnan(0.0) ? _2035 : max(0.0, _2035))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2047 = 1.0;
    }
    float _2058;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2049 = dot(vec4(cbModelParam._m0[40u]), vec4(_2004, _2005, _2006, 1.0));
        _2058 = dot(vec3(isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)), isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)), isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2049) ? 0.0 : (isnan(0.0) ? _2049 : max(0.0, _2049))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2058 = 1.0;
    }
    float _2062 = (_2058 * cbModelParam._m0[1u].x) + (_2047 * (1.0 - cbModelParam._m0[1u].x));
    float _2072 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1050);
    float _2073 = isnan(_2072) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2072 : min(cbModelParam._m0[25u].z, _2072));
    float _2153;
    float _2155;
    float _2157;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2120 = fma(_1296, cbModelParam._m0[13u].z, fma(_1292, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1288)) + cbModelParam._m0[13u].w;
        float _2124 = fma(_1296, cbModelParam._m0[14u].z, fma(_1292, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1288)) + cbModelParam._m0[14u].w;
        float _2128 = fma(_1296, cbModelParam._m0[15u].z, fma(_1292, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1288)) + cbModelParam._m0[15u].w;
        float _2131 = fma(_1234, cbModelParam._m0[13u].z, fma(_1233, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1232));
        float _2134 = fma(_1234, cbModelParam._m0[14u].z, fma(_1233, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1232));
        float _2137 = fma(_1234, cbModelParam._m0[15u].z, fma(_1233, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1232));
        float _2165;
        if (_2131 > 0.0)
        {
            _2165 = abs((1.0 - _2120) / _2131);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2120 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2165 = frontier_phi_17_15_ladder;
        }
        float _2388;
        if (_2134 > 0.0)
        {
            _2388 = abs((1.0 - _2124) / _2134);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2124 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2388 = frontier_phi_26_22_ladder;
        }
        float _2645;
        if (_2137 > 0.0)
        {
            _2645 = abs((1.0 - _2128) / _2137);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2128 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2645 = frontier_phi_38_33_ladder;
        }
        float _2647 = isnan(_2388) ? _2165 : (isnan(_2165) ? _2388 : min(_2165, _2388));
        float _2648 = isnan(_2645) ? _2647 : (isnan(_2647) ? _2645 : min(_2647, _2645));
        float _2652 = (_2648 * _2131) + _2120;
        float _2653 = (_2648 * _2134) + _2124;
        float _2654 = (_2648 * _2137) + _2128;
        float _2655 = _2648 * 9.9999997473787516355514526367188e-05;
        float _2657 = (-1.0) - _2655;
        float _2659 = _2655 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2654 > _2659) || ((_2654 < _2657) || ((_2653 > _2659) || ((_2653 < _2657) || ((_2652 < _2657) || (_2652 > _2659))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2782 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2654, cbModelParam._m0[9u].z, fma(_2653, cbModelParam._m0[9u].y, _2652 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2654, cbModelParam._m0[10u].z, fma(_2653, cbModelParam._m0[10u].y, _2652 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2654, cbModelParam._m0[11u].z, fma(_2653, cbModelParam._m0[11u].y, _2652 * cbModelParam._m0[11u].x))), _2073);
            frontier_phi_16_38_ladder = _2782.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2782.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2782.x * cbModelParam._m0[1u].y;
        }
        _2153 = frontier_phi_16_38_ladder_2;
        _2155 = frontier_phi_16_38_ladder_1;
        _2157 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2141 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1232, _1233, _1234), _2073);
        _2153 = _2141.x * cbModelParam._m0[1u].y;
        _2155 = _2141.y * cbModelParam._m0[1u].y;
        _2157 = _2141.z * cbModelParam._m0[1u].y;
    }
    float _2161 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1050);
    float _2162 = isnan(_2161) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2161 : min(cbModelParam._m0[25u].w, _2161));
    float _2251;
    float _2253;
    float _2255;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2215 = fma(_1296, cbModelParam._m0[21u].z, fma(_1292, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1288)) + cbModelParam._m0[21u].w;
        float _2219 = fma(_1296, cbModelParam._m0[22u].z, fma(_1292, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1288)) + cbModelParam._m0[22u].w;
        float _2223 = fma(_1296, cbModelParam._m0[23u].z, fma(_1292, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1288)) + cbModelParam._m0[23u].w;
        float _2226 = fma(_1234, cbModelParam._m0[21u].z, fma(_1233, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1232));
        float _2229 = fma(_1234, cbModelParam._m0[22u].z, fma(_1233, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1232));
        float _2232 = fma(_1234, cbModelParam._m0[23u].z, fma(_1233, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1232));
        float _2393;
        if (_2226 > 0.0)
        {
            _2393 = abs((1.0 - _2215) / _2226);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2226 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2215 + 1.0) / _2226);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2393 = frontier_phi_28_24_ladder;
        }
        float _2672;
        if (_2229 > 0.0)
        {
            _2672 = abs((1.0 - _2219) / _2229);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2229 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2219 + 1.0) / _2229);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2672 = frontier_phi_40_35_ladder;
        }
        float _2885;
        if (_2232 > 0.0)
        {
            _2885 = abs((1.0 - _2223) / _2232);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2232 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2223 + 1.0) / _2232);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2885 = frontier_phi_49_46_ladder;
        }
        float _2887 = isnan(_2672) ? _2393 : (isnan(_2393) ? _2672 : min(_2393, _2672));
        float _2888 = isnan(_2885) ? _2887 : (isnan(_2887) ? _2885 : min(_2887, _2885));
        float _2892 = (_2888 * _2226) + _2215;
        float _2893 = (_2888 * _2229) + _2219;
        float _2894 = (_2888 * _2232) + _2223;
        float _2895 = _2888 * 9.9999997473787516355514526367188e-05;
        float _2896 = (-1.0) - _2895;
        float _2898 = _2895 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2894 > _2898) || ((_2894 < _2896) || ((_2893 > _2898) || ((_2893 < _2896) || ((_2892 < _2896) || (_2892 > _2898))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3093 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2894, cbModelParam._m0[17u].z, fma(_2893, cbModelParam._m0[17u].y, _2892 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2894, cbModelParam._m0[18u].z, fma(_2893, cbModelParam._m0[18u].y, _2892 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2894, cbModelParam._m0[19u].z, fma(_2893, cbModelParam._m0[19u].y, _2892 * cbModelParam._m0[19u].x))), _2162);
            frontier_phi_25_49_ladder = _3093.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3093.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3093.x * cbModelParam._m0[1u].z;
        }
        _2251 = frontier_phi_25_49_ladder_2;
        _2253 = frontier_phi_25_49_ladder_1;
        _2255 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2235 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1232, _1233, _1234), _2162);
        _2251 = _2235.x * cbModelParam._m0[1u].z;
        _2253 = _2235.y * cbModelParam._m0[1u].z;
        _2255 = _2235.z * cbModelParam._m0[1u].z;
    }
    float _2268 = (((_1259 * _1208) + _1260) * _1224) * ((cbModelParam._m0[1u].w * (_2251 - _2153)) + _2153);
    float _2270 = (((_1259 * _1210) + _1260) * _1224) * ((cbModelParam._m0[1u].w * (_2253 - _2155)) + _2155);
    float _2272 = (((_1259 * _1211) + _1260) * _1224) * ((cbModelParam._m0[1u].w * (_2255 - _2157)) + _2157);
    float _2275 = fma(_2272, cbSceneParam._m0[89u].z, fma(_2270, cbSceneParam._m0[89u].y, _2268 * cbSceneParam._m0[89u].x));
    float _2278 = fma(_2272, cbSceneParam._m0[90u].z, fma(_2270, cbSceneParam._m0[90u].y, _2268 * cbSceneParam._m0[90u].x));
    float _2281 = fma(_2272, cbSceneParam._m0[91u].z, fma(_2270, cbSceneParam._m0[91u].y, _2268 * cbSceneParam._m0[91u].x));
    vec4 _2289 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1146, _1147));
    float _2291 = _2289.w;
    float _2303 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2291);
    float _2304 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2291);
    float _2305 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2291);
    uvec4 _2309 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2311 = _2309.x * 14u;
    uint _2312 = _2311 + 13u;
    float _2319 = _1224 + (-1.0);
    float _2324 = (cbLight._m0[_2312].x * _2319) + 1.0;
    float _2325 = (cbLight._m0[_2312].y * _2319) + 1.0;
    float _2326 = (cbLight._m0[_2312].z * _2319) + 1.0;
    float _2327 = (cbLight._m0[_2312].w * _2319) + 1.0;
    uint _2328 = _2311 + 5u;
    float _2334 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2338 = _2311 + 4u;
    float _2347 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2351 = _2311 | 1u;
    float _2362 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_1047, _1048, _1049));
    float _2365 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_1047, _1048, _1049));
    float _4660 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _4671 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2370 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * 0.3183098733425140380859375;
    float _2372 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * 0.3183098733425140380859375;
    float _2379 = ((cbLight._m0[_2328].x * _2334) * _2372) + (((cbLight._m0[_2338].x * _2303) * _2347) * _2370);
    float _2380 = ((_2334 * cbLight._m0[_2328].y) * _2372) + (((cbLight._m0[_2338].y * _2304) * _2347) * _2370);
    float _2381 = ((_2334 * cbLight._m0[_2328].z) * _2372) + (((cbLight._m0[_2338].z * _2305) * _2347) * _2370);
    uvec4 _2385 = floatBitsToUint(cbLight._m0[_2311 + 12u]);
    bool _2387 = _2385.x == 0u;
    float _2398;
    float _2400;
    float _2402;
    if (_2387)
    {
        _2398 = _2379;
        _2400 = _2380;
        _2402 = _2381;
    }
    else
    {
        uint _2406 = _2311 + 6u;
        float _2422 = (dot(vec3(cbLight._m0[_2311 + 2u].xyz), vec3(_1047, _1048, _1049)) * 0.5) + 0.5;
        float _2423 = _2422 * _2422;
        float _4682 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2424 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2425 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2398 = (((cbLight._m0[_2406].x * 0.3183098733425140380859375) * _2424) * _2425) + _2379;
        _2400 = (((cbLight._m0[_2406].y * 0.3183098733425140380859375) * _2424) * _2425) + _2380;
        _2402 = (((cbLight._m0[_2406].z * 0.3183098733425140380859375) * _2424) * _2425) + _2381;
    }
    bool _2405 = _2385.y == 0u;
    float _2443;
    float _2445;
    float _2447;
    if (_2405)
    {
        _2443 = _2398;
        _2445 = _2400;
        _2447 = _2402;
    }
    else
    {
        uint _2616 = _2311 + 7u;
        float _2632 = (dot(vec3(cbLight._m0[_2311 + 3u].xyz), vec3(_1047, _1048, _1049)) * 0.5) + 0.5;
        float _2633 = _2632 * _2632;
        float _4698 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2634 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2635 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2443 = (((cbLight._m0[_2616].x * 0.3183098733425140380859375) * _2634) * _2635) + _2398;
        _2445 = (((cbLight._m0[_2616].y * 0.3183098733425140380859375) * _2634) * _2635) + _2400;
        _2447 = (((cbLight._m0[_2616].z * 0.3183098733425140380859375) * _2634) * _2635) + _2402;
    }
    uint _2450 = _2311 + 8u;
    float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _1050) * 0.949999988079071044921875);
    float _2464 = _2463 * _2463;
    float _2465 = cbLight._m0[_2311].x + _1126;
    float _2466 = cbLight._m0[_2311].y + _1127;
    float _2467 = cbLight._m0[_2311].z + _1128;
    float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
    float _2472 = _2471 * _2465;
    float _2473 = _2471 * _2466;
    float _2474 = _2471 * _2467;
    float _2475 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2311].xyz));
    float _4714 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _4725 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _2479 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2480 = dot(vec3(_1047, _1048, _1049), vec3(_2472, _2473, _2474));
    float _4736 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2484 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2472, _2473, _2474));
    float _4747 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2488 = _2464 * _2464;
    float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
    float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
    float _2501 = 0.959999978542327880859375 - _1205;
    float _2503 = 0.959999978542327880859375 - _1206;
    float _2504 = 0.959999978542327880859375 - _1207;
    float _2511 = 1.0 - _2464;
    float _2522 = (0.5 / (((_2479 * ((_2478 * _2511) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2479 * _2511) + _2464) * _2478))) * _2478;
    float _4758 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2524 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
    uint _2538 = _2311 + 9u;
    float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _1050) * 0.949999988079071044921875);
    float _2550 = _2549 * _2549;
    float _2551 = cbLight._m0[_2351].x + _1126;
    float _2552 = cbLight._m0[_2351].y + _1127;
    float _2553 = cbLight._m0[_2351].z + _1128;
    float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
    float _2558 = _2557 * _2551;
    float _2559 = _2557 * _2552;
    float _2560 = _2557 * _2553;
    float _2561 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2351].xyz));
    float _4769 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2565 = dot(vec3(_1047, _1048, _1049), vec3(_2558, _2559, _2560));
    float _4780 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2569 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2558, _2559, _2560));
    float _4791 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = _2550 * _2550;
    float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
    float _2584 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
    float _2591 = 1.0 - _2550;
    float _2601 = (0.5 / (((_2479 * ((_2564 * _2591) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2479 * _2591) + _2550) * _2564))) * _2564;
    float _4802 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2603 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
    float _2613 = (((((_2584 * _2501) + _1208) * cbLight._m0[_2538].x) * _2603) * _2334) + ((((cbLight._m0[_2450].x * _2303) * ((_2500 * _2501) + _1208)) * _2524) * _2347);
    float _2614 = (((((_2584 * _2503) + _1210) * cbLight._m0[_2538].y) * _2603) * _2334) + ((((cbLight._m0[_2450].y * _2304) * ((_2500 * _2503) + _1210)) * _2524) * _2347);
    float _2615 = (((((_2584 * _2504) + _1211) * cbLight._m0[_2538].z) * _2603) * _2334) + ((((cbLight._m0[_2450].z * _2305) * ((_2500 * _2504) + _1211)) * _2524) * _2347);
    float _2677;
    float _2679;
    float _2681;
    if (_2387)
    {
        _2677 = _2613;
        _2679 = _2614;
        _2681 = _2615;
    }
    else
    {
        uint _2683 = _2311 + 2u;
        uint _2687 = _2311 + 10u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _1050) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _1126;
        float _2704 = cbLight._m0[_2683].y + _1127;
        float _2705 = cbLight._m0[_2683].z + _1128;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2683].xyz));
        float _4813 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2717 = dot(vec3(_1047, _1048, _1049), vec3(_2710, _2711, _2712));
        float _4824 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4835 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0);
        float _2743 = 1.0 - _2702;
        float _2753 = (0.5 / (((_2479 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2479 * _2743) + _2702) * _2716))) * _2716;
        float _4846 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2677 = (((((_2736 * _2501) + _1208) * cbLight._m0[_2687].x) * _2755) * _2756) + _2613;
        _2679 = (((((_2736 * _2503) + _1210) * cbLight._m0[_2687].y) * _2755) * _2756) + _2614;
        _2681 = (((((_2736 * _2504) + _1211) * cbLight._m0[_2687].z) * _2755) * _2756) + _2615;
    }
    float _2791;
    float _2793;
    float _2795;
    if (_2405)
    {
        _2791 = _2677;
        _2793 = _2679;
        _2795 = _2681;
    }
    else
    {
        uint _2802 = _2311 + 3u;
        uint _2806 = _2311 + 11u;
        float _2820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2802].w)) * _1050) * 0.949999988079071044921875);
        float _2821 = _2820 * _2820;
        float _2822 = cbLight._m0[_2802].x + _1126;
        float _2823 = cbLight._m0[_2802].y + _1127;
        float _2824 = cbLight._m0[_2802].z + _1128;
        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
        float _2829 = _2828 * _2822;
        float _2830 = _2828 * _2823;
        float _2831 = _2828 * _2824;
        float _2832 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2802].xyz));
        float _4862 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2836 = dot(vec3(_1047, _1048, _1049), vec3(_2829, _2830, _2831));
        float _4873 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2840 = dot(vec3(cbLight._m0[_2802].xyz), vec3(_2829, _2830, _2831));
        float _4884 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2844 = _2821 * _2821;
        float _2848 = ((_2839 * _2839) * (_2844 + (-1.0))) + 1.0;
        float _2855 = exp2(log2(1.0 - (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) * 5.0);
        float _2862 = 1.0 - _2821;
        float _2872 = (0.5 / (((_2479 * ((_2835 * _2862) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2479 * _2862) + _2821) * _2835))) * _2835;
        float _4895 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2874 = (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2844 / ((_2848 * _2848) * 3.141590118408203125));
        float _2875 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2791 = (((((_2855 * _2501) + _1208) * cbLight._m0[_2806].x) * _2874) * _2875) + _2677;
        _2793 = (((((_2855 * _2503) + _1210) * cbLight._m0[_2806].y) * _2874) * _2875) + _2679;
        _2795 = (((((_2855 * _2504) + _1211) * cbLight._m0[_2806].z) * _2874) * _2875) + _2681;
    }
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_2309.y == 0u)
    {
        float _2950 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2951 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2950;
        float _2952 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2950;
        float _2953 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2950;
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.x;
        uint _2977 = uint((float(_2965.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1147) / _2966))) + floor(float(uint(cbSceneParam._m0[85u].x * _1146) / _2966)));
        float _2987 = (log2(_2953 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2988 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        uint _2991 = uint(isnan(14.0) ? _2988 : (isnan(_2988) ? 14.0 : min(_2988, 14.0)));
        uvec4 _2996 = texelFetch(g_lightClusterGridBuffer, int(((_2991 << 2u) + (_2977 << 6u)) >> 2u));
        uint _2997 = _2996.x;
        uint _2998 = _2965.z;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        if (((((1u << ((_2998 >> 4u) & 15u)) + 4294967295u) & _2997) == 0u) || ((_2998 & 240u) == 0u))
        {
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
        }
        else
        {
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            uint _3257 = 0u;
            uint _3266;
            bool _3267;
            for (;;)
            {
                _3266 = texelFetch(g_lightClassification, int((((_2991 << 5u) + (_2977 << 9u)) + (_3257 << 2u)) >> 2u)).x;
                _3267 = _3266 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3267)
                {
                    frontier_phi_66_pred = _3251;
                    frontier_phi_66_pred_1 = _3256;
                    frontier_phi_66_pred_2 = _3255;
                    frontier_phi_66_pred_3 = _3254;
                    frontier_phi_66_pred_4 = _3253;
                    frontier_phi_66_pred_5 = _3252;
                }
                else
                {
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    uint _3402;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3266;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    for (;;)
                    {
                        uint _3406 = uint(findLSB(_3402)) + (_3257 << 5u);
                        uint _3403 = (_3402 + 4294967295u) & _3402;
                        uint _3408 = _3406 * 48u;
                        vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 3u)).x));
                        uint _3428 = (_3406 * 48u) + 4u;
                        vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3428)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 3u)).x));
                        uint _3447 = (_3406 * 48u) + 8u;
                        vec3 _3458 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3447)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 2u)).x));
                        float _3462 = _3422.x - _2951;
                        float _3463 = _3422.y - _2952;
                        float _3464 = _3422.z - _2953;
                        float _3465 = dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464));
                        float _3468 = inversesqrt(_3465);
                        float _3469 = _3468 * _3462;
                        float _3470 = _3468 * _3463;
                        float _3471 = _3468 * _3464;
                        float _3472 = dot(vec3(_1165, _1168, _1171), vec3(_3469, _3470, _3471));
                        float _3477 = 1.0 - (_3465 * _3422.w);
                        float _4921 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3478 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3479 = sqrt(_3465) * _3441.w;
                        float _3482 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                        float _3483 = _3482 * _3482;
                        float _3486 = ((1.0 - _3483) * _3472) + _3483;
                        float _3489 = _3479 * _3479;
                        float _3493 = ((isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0))) * _3478) / ((_3489 * 0.699999988079071044921875) + 1.0);
                        float _3497 = (-0.0) - _2951;
                        float _3498 = (-0.0) - _2952;
                        float _3499 = (-0.0) - _2953;
                        float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                        float _3504 = _3503 * _3497;
                        float _3505 = _3503 * _3498;
                        float _3506 = _3503 * _3499;
                        float _3514 = exp2(log2(1.0 / ((_3489 * 3.5) + 5.0)) * 0.25);
                        float _3515 = 1.0 - _1240;
                        float _3522 = sqrt(1.0 - ((1.0 - (_3515 * _3515)) * (1.0 - (_3514 * _3514))));
                        float _3523 = _3522 * _3522;
                        float _3524 = _3523 * _3523;
                        float _3525 = _3504 + _3469;
                        float _3526 = _3505 + _3470;
                        float _3527 = _3506 + _3471;
                        float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                        float _3535 = dot(vec3(_1165, _1168, _1171), vec3(_3504, _3505, _3506));
                        float _4937 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3538 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3539 = dot(vec3(_1165, _1168, _1171), vec3(_3531 * _3525, _3531 * _3526, _3531 * _3527));
                        float _4948 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3542 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3546 = ((_3542 * _3542) * (_3524 + (-1.0))) + 1.0;
                        float _3547 = _3482 * _3523;
                        float _3548 = _3547 * _3547;
                        float _3551 = ((1.0 - _3548) * _3472) + _3548;
                        float _4959 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3552 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3553 = 1.0 - _3523;
                        float _3563 = (0.5 / (((_3552 * ((_3538 * _3553) + _3523)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3523) * _3538))) * _3552;
                        float _4970 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3574 = (((_3524 * 3.1415927410125732421875) * (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) / ((_3546 * _3546) * ((_3489 * 2.1991131305694580078125) + 3.141590118408203125))) * _3478;
                        _3326 = (_3493 * _3441.x) + _3399;
                        _3327 = (_3493 * _3441.y) + _3400;
                        _3328 = (_3493 * _3441.z) + _3401;
                        _3323 = (_3574 * _3458.x) + _3396;
                        _3324 = (_3574 * _3458.y) + _3397;
                        _3325 = (_3574 * _3458.z) + _3398;
                        if (_3403 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3403;
                        }
                    }
                    frontier_phi_66_pred = _3323;
                    frontier_phi_66_pred_1 = _3328;
                    frontier_phi_66_pred_2 = _3327;
                    frontier_phi_66_pred_3 = _3326;
                    frontier_phi_66_pred_4 = _3325;
                    frontier_phi_66_pred_5 = _3324;
                }
                _3099 = frontier_phi_66_pred;
                _3109 = frontier_phi_66_pred_1;
                _3107 = frontier_phi_66_pred_2;
                _3105 = frontier_phi_66_pred_3;
                _3103 = frontier_phi_66_pred_4;
                _3101 = frontier_phi_66_pred_5;
                uint _3258 = _3257 + 1u;
                if (_3258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3251 = _3099;
                    _3252 = _3101;
                    _3253 = _3103;
                    _3254 = _3105;
                    _3255 = _3107;
                    _3256 = _3109;
                    _3257 = _3258;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
        }
        uvec4 _3112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3113 = _3112.z;
        uint _3115 = (_3113 >> 8u) & 15u;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        if (((4294967295u << _3115) & _2997) == 0u)
        {
            _3219 = _3098;
            _3221 = _3100;
            _3223 = _3102;
            _3225 = _3104;
            _3227 = _3106;
            _3229 = _3108;
        }
        else
        {
            float _3244 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
            float _3245 = _3244 * _2951;
            float _3246 = _3244 * _2952;
            float _3247 = _3244 * _2953;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3115 < ((_3113 >> 12u) & 15u))
            {
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3379 = _3098;
                float _3380 = _3100;
                float _3381 = _3102;
                float _3382 = _3104;
                float _3383 = _3106;
                float _3384 = _3108;
                uint _3385 = _3115;
                uint _3394;
                bool _3395;
                for (;;)
                {
                    _3394 = texelFetch(g_lightClassification, int((((_2991 << 5u) + (_2977 << 9u)) + (_3385 << 2u)) >> 2u)).x;
                    _3395 = _3394 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3395)
                    {
                        frontier_phi_77_pred = _3384;
                        frontier_phi_77_pred_1 = _3383;
                        frontier_phi_77_pred_2 = _3382;
                        frontier_phi_77_pred_3 = _3381;
                        frontier_phi_77_pred_4 = _3380;
                        frontier_phi_77_pred_5 = _3379;
                    }
                    else
                    {
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3601 = _3379;
                        float _3602 = _3380;
                        float _3603 = _3381;
                        float _3604 = _3382;
                        float _3605 = _3383;
                        float _3606 = _3384;
                        uint _3607 = _3394;
                        uint _3608;
                        vec4 _3633;
                        float _3634;
                        vec4 _3649;
                        vec3 _3661;
                        vec4 _3676;
                        vec4 _3691;
                        float _3737;
                        bool _3738;
                        for (;;)
                        {
                            uint _3618 = ((_3385 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3607));
                            _3608 = (_3607 + 4294967295u) & _3607;
                            uint _3620 = _3618 * 40u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            _3634 = _3633.w;
                            uint _3636 = (_3618 * 40u) + 4u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3651 = (_3618 * 40u) + 8u;
                            _3661 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x));
                            uint _3663 = (_3618 * 40u) + 16u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3678 = (_3618 * 40u) + 20u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3693 = (_3618 * 40u) + 24u;
                            vec4 _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            uint _3712 = (_3618 * 40u) + 28u;
                            vec4 _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            _3737 = fma(_2953, _3725.z, fma(_2952, _3725.y, _3725.x * _2951)) + _3725.w;
                            _3738 = !((fma(_2953, _3706.z, fma(_2952, _3706.y, _3706.x * _2951)) + _3706.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3738)
                            {
                                float _3765 = _3633.x - _2951;
                                float _3766 = _3633.y - _2952;
                                float _3767 = _3633.z - _2953;
                                float _3768 = dot(vec3(_3765, _3766, _3767), vec3(_3765, _3766, _3767));
                                float _3771 = inversesqrt(_3768);
                                float _3772 = _3771 * _3765;
                                float _3773 = _3771 * _3766;
                                float _3774 = _3771 * _3767;
                                float _3778 = 1.0 - (_3768 / (_3634 * _3634));
                                float _4981 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3783 = sqrt(_3768) * _3649.w;
                                float _3785 = 1.39999997615814208984375 / (_3783 + 1.39999997615814208984375);
                                float _3786 = _3785 * _3785;
                                float _3789 = ((1.0 - _3786) * dot(vec3(_3772, _3773, _3774), vec3(_1165, _1168, _1171))) + _3786;
                                float _3792 = _3783 * _3783;
                                float _3796 = (fma(_2953, _3676.z, fma(_2952, _3676.y, _3676.x * _2951)) + _3676.w) / _3737;
                                float _3797 = (fma(_2953, _3691.z, fma(_2952, _3691.y, _3691.x * _2951)) + _3691.w) / _3737;
                                float _3801 = 1.0 - dot(vec2(_3796, _3797), vec2(_3796, _3797));
                                float _4997 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3802 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3803 = _3802 * (((isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0))) * _3779) / ((_3792 * 0.699999988079071044921875) + 1.0));
                                float _3815 = exp2(log2(1.0 / ((_3792 * 3.5) + 5.0)) * 0.25);
                                float _3816 = 1.0 - _1240;
                                float _3823 = sqrt(1.0 - ((1.0 - (_3816 * _3816)) * (1.0 - (_3815 * _3815))));
                                float _3824 = _3823 * _3823;
                                float _3825 = _3824 * _3824;
                                float _3826 = _3772 - _3245;
                                float _3827 = _3773 - _3246;
                                float _3828 = _3774 - _3247;
                                float _3832 = inversesqrt(dot(vec3(_3826, _3827, _3828), vec3(_3826, _3827, _3828)));
                                float _3836 = dot(vec3(_1165, _1168, _1171), vec3((-0.0) - _3245, (-0.0) - _3246, (-0.0) - _3247));
                                float _5008 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3839 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3840 = dot(vec3(_1165, _1168, _1171), vec3(_3832 * _3826, _3832 * _3827, _3832 * _3828));
                                float _5019 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3843 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3847 = ((_3843 * _3843) * (_3825 + (-1.0))) + 1.0;
                                float _3848 = _3785 * _3824;
                                float _3849 = _3848 * _3848;
                                float _3855 = ((1.0 - _3849) * dot(vec3(_1165, _1168, _1171), vec3(_3772, _3773, _3774))) + _3849;
                                float _5030 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3856 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3857 = 1.0 - _3824;
                                float _3867 = (0.5 / (((_3856 * ((_3839 * _3857) + _3824)) + 9.9999999392252902907785028219223e-09) + (((_3856 * _3857) + _3824) * _3839))) * _3856;
                                float _5041 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3877 = (_3802 * _3779) * (((_3825 * 3.1415927410125732421875) * (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0)))) / ((_3847 * _3847) * ((_3792 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3803 * _3649.y;
                                frontier_phi_83_pred_1 = _3803 * _3649.x;
                                frontier_phi_83_pred_2 = _3877 * _3661.z;
                                frontier_phi_83_pred_3 = _3877 * _3661.y;
                                frontier_phi_83_pred_4 = _3877 * _3661.x;
                                frontier_phi_83_pred_5 = _3803 * _3649.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3885 = frontier_phi_83_pred;
                            _3884 = frontier_phi_83_pred_1;
                            _3883 = frontier_phi_83_pred_2;
                            _3882 = frontier_phi_83_pred_3;
                            _3881 = frontier_phi_83_pred_4;
                            _3886 = frontier_phi_83_pred_5;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            if (_3608 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3608;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3593;
                        frontier_phi_77_pred_1 = _3592;
                        frontier_phi_77_pred_2 = _3591;
                        frontier_phi_77_pred_3 = _3590;
                        frontier_phi_77_pred_4 = _3589;
                        frontier_phi_77_pred_5 = _3588;
                    }
                    _3230 = frontier_phi_77_pred;
                    _3228 = frontier_phi_77_pred_1;
                    _3226 = frontier_phi_77_pred_2;
                    _3224 = frontier_phi_77_pred_3;
                    _3222 = frontier_phi_77_pred_4;
                    _3220 = frontier_phi_77_pred_5;
                    uint _3386 = _3385 + 1u;
                    if (_3386 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3379 = _3220;
                        _3380 = _3222;
                        _3381 = _3224;
                        _3382 = _3226;
                        _3383 = _3228;
                        _3384 = _3230;
                        _3385 = _3386;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3224;
                frontier_phi_58_59_ladder_1 = _3230;
                frontier_phi_58_59_ladder_2 = _3228;
                frontier_phi_58_59_ladder_3 = _3226;
                frontier_phi_58_59_ladder_4 = _3222;
                frontier_phi_58_59_ladder_5 = _3220;
            }
            else
            {
                frontier_phi_58_59_ladder = _3102;
                frontier_phi_58_59_ladder_1 = _3108;
                frontier_phi_58_59_ladder_2 = _3106;
                frontier_phi_58_59_ladder_3 = _3104;
                frontier_phi_58_59_ladder_4 = _3100;
                frontier_phi_58_59_ladder_5 = _3098;
            }
            _3219 = frontier_phi_58_59_ladder_5;
            _3221 = frontier_phi_58_59_ladder_4;
            _3223 = frontier_phi_58_59_ladder;
            _3225 = frontier_phi_58_59_ladder_3;
            _3227 = frontier_phi_58_59_ladder_2;
            _3229 = frontier_phi_58_59_ladder_1;
        }
        float _3234 = isnan(1.0) ? _1224 : (isnan(_1224) ? 1.0 : min(_1224, 1.0));
        _3010 = (_3234 * _3225) + _2443;
        _3012 = (_3234 * _3227) + _2445;
        _3014 = (_3234 * _3229) + _2447;
        _3016 = ((_3219 * _1208) * _3234) + _2791;
        _3018 = ((_3221 * _1210) * _3234) + _2793;
        _3020 = ((_3223 * _1211) * _3234) + _2795;
    }
    else
    {
        _3010 = _2443;
        _3012 = _2445;
        _3014 = _2447;
        _3016 = _2791;
        _3018 = _2793;
        _3020 = _2795;
    }
    float _5057 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _5068 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _5079 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _3037 = ((isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_3010 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1224))) + ((_3016 + ((isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0))) * _2062)) * cbPerFrame._m0[3u].x);
    float _3038 = ((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3012 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1224))) + ((_3018 + ((isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0))) * _2062)) * cbPerFrame._m0[3u].x);
    float _3039 = ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3014 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1224))) + ((_3020 + ((isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))) * _2062)) * cbPerFrame._m0[3u].x);
    uint _3040 = _299 + 6u;
    float _3048 = _1146 / cbSceneParam._m0[86u].x;
    float _3049 = _1147 / cbSceneParam._m0[86u].y;
    vec4 _3063 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3048, _3049, (log2((isnan(cbSceneParam._m0[77u].w) ? _1069 : (isnan(_1069) ? cbSceneParam._m0[77u].w : min(_1069, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3065 = _3063.x;
    float _3066 = _3063.y;
    float _3067 = _3063.z;
    float _3068 = _3063.w;
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    if (_1069 > cbSceneParam._m0[78u].w)
    {
        float _3123 = isnan(_1069) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1069 : min(cbSceneParam._m0[80u].w, _1069));
        float _3124 = _3123 / _1069;
        float _3135 = _3124 * _1119;
        float _3136 = _1120 * _3124;
        float _3137 = (-0.0) - _3136;
        float _3139 = _3124 * _1121;
        float _3141 = (cbSceneParam._m0[77u].w * _3137) / _3123;
        float _3142 = _3141 + cbSceneParam._m0[79u].w;
        float _3143 = cbSceneParam._m0[79u].w - _3136;
        float _3149 = sqrt(((_3135 * _3135) + (_3136 * _3136)) + (_3139 * _3139));
        float _3152 = (1.0 - (cbSceneParam._m0[77u].w / _3123)) * _3149;
        float _3157 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3159 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3336;
        if (abs((_3137 - _3141) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3336 = ((((_3142 > 0.0) ? exp2(_3157 * _3142) : (2.0 - exp2(_3159 * _3142))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3152;
        }
        else
        {
            float _3280 = 1.0 / cbSceneParam._m0[80u].x;
            float _3281 = isnan(_3143) ? _3142 : (isnan(_3142) ? _3143 : max(_3142, _3143));
            float _3282 = isnan(_3143) ? _3142 : (isnan(_3142) ? _3143 : min(_3142, _3143));
            float _3291 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : min(_3281, 0.0));
            float _3292 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : min(_3282, 0.0));
            _3336 = ((abs(_3149 / _3137) * cbSceneParam._m0[80u].y) * ((((_3291 - _3292) * 2.0) - ((exp2(_3157 * (isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0)))) - exp2(_3157 * (isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))))) * _3280)) - ((exp2(_3159 * _3291) - exp2(_3159 * _3292)) * _3280))) + (_3152 * cbSceneParam._m0[80u].z);
        }
        vec4 _3338 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3048, _3049, 1.0), 0.0);
        float _3347 = exp2((_3336 * (-1.44269502162933349609375)) * (1.0 - _3338.w));
        float _3348 = log2(_3347);
        float _3364 = log2(_3068);
        _3161 = (exp2(_3364 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].x)) * _3338.x) / cbSceneParam._m0[78u].x)) + _3065;
        _3163 = (exp2(_3364 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].y)) * _3338.y) / cbSceneParam._m0[78u].y)) + _3066;
        _3165 = (exp2(_3364 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].z)) * _3338.z) / cbSceneParam._m0[78u].z)) + _3067;
        _3167 = _3347 * _3068;
    }
    else
    {
        _3161 = _3065;
        _3163 = _3066;
        _3165 = _3067;
        _3167 = _3068;
    }
    bool _3374;
    vec4 _3177;
    vec4 _3199;
    float _3201;
    float _3205;
    float _3206;
    float _3207;
    float _3208;
    bool _3218;
    for (;;)
    {
        _3177 = cbMatDynParam._m0[0u];
        float _3179 = roundEven(_3177.y);
        bool _3180 = _3179 == 3.0;
        float _3181 = log2(_3167);
        float _3188 = exp2(_3181 * cbSceneParam._m0[78u].x) * _3037;
        float _3189 = exp2(_3181 * cbSceneParam._m0[78u].y) * _3038;
        float _3190 = exp2(_3181 * cbSceneParam._m0[78u].z) * _3039;
        float _3197 = _1135 + (-0.5);
        _3199 = cbMtdParam._m0[1u];
        _3201 = _3199.y * _3197;
        float _3204 = (_3179 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3205 = _3204 * (_3180 ? _3188 : (_3188 + (cbSceneParam._m0[72u].w * _3161)));
        _3206 = _3204 * (_3180 ? _3189 : (_3189 + (cbSceneParam._m0[72u].w * _3163)));
        _3207 = _3204 * (_3180 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3165)));
        _3208 = _3197 * 0.999000012874603271484375;
        _3218 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3218)
        {
            if ((cbInstanceData._m0[_299 + 7u].x + _3208) < 0.5)
            {
                _3374 = true;
                break;
            }
        }
        uint _3315 = _1184 + uint(_3177.w);
        if ((cbInstanceData._m0[_3315].w < 1.0) && ((cbInstanceData._m0[_3315].w + _3208) < 0.5))
        {
            _3374 = true;
            break;
        }
        if ((_3201 + 1.0) < _3199.x)
        {
            _3374 = true;
            break;
        }
        _3374 = false;
        break;
    }
    float _3579;
    if (_3374)
    {
        discard_state = true;
        _3579 = 0.0;
    }
    else
    {
        _3579 = cbInstanceData._m0[_3040].w;
    }
    SV_Target.x = _3205;
    SV_Target.y = _3206;
    SV_Target.z = _3207;
    SV_Target.w = _3579;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3040].w;
    discard_exit();
}


