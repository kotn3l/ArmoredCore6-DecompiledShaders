#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1572;
float _3950;
float _3951;
float _3952;
float _3953;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3962 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3973 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3984 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _350 = _345.x * cbMtdParam._m0[11u].x;
    float _351 = _345.y * cbMtdParam._m0[11u].y;
    float _352 = _345.z * cbMtdParam._m0[11u].z;
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _390.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3995 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _464 = (_457 * ((_371.x * cbMtdParam._m0[12u].x) - _350)) + _350;
    float _465 = (_457 * ((_371.y * cbMtdParam._m0[12u].y) - _351)) + _351;
    float _466 = (_457 * ((_371.z * cbMtdParam._m0[12u].z) - _352)) + _352;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _390.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4006 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _577 = _575.x;
    float _587 = dot(vec4(_577, _575.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _599 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _390.z) * 2.0) - ((((_577 - _587) * cbMtdParam._m0[23u].w) + _587) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4017 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _607 = (_600 * ((_558.x * cbMtdParam._m0[14u].x) - _537)) + _537;
    float _608 = (_600 * ((_558.y * cbMtdParam._m0[14u].y) - _538)) + _538;
    float _609 = (_600 * ((_558.z * cbMtdParam._m0[14u].z) - _539)) + _539;
    float _613 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _607;
    float _616 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _608;
    float _619 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _609;
    float _626 = ((_607 - _613) * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) + _613;
    float _627 = ((_608 - _616) * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) + _616;
    float _628 = ((_609 - _619) * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) + _619;
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _687 = _685.x;
    float _688 = _685.y;
    float _689 = _685.z;
    float _696 = ((_668.x - _687) * _457) + _687;
    float _697 = ((_668.y - _688) * _457) + _688;
    float _698 = ((_668.z - _689) * _457) + _689;
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _721 = ((_710.x - _696) * _530) + _696;
    float _722 = ((_710.y - _697) * _530) + _697;
    float _723 = ((_710.z - _698) * _530) + _698;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _748 = ((_735.z - _723) * _600) + _723;
    float _751 = ((((_735.x - _721) * _600) + _721) * 2.0) + (-1.0);
    float _752 = ((((_735.y - _722) * _600) + _722) * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _4028 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _758 = sqrt(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))));
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _797 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _799 = _797.x;
    float _800 = 1.0 - _799;
    float _815 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_799 - _800) * cbMtdParam._m0[24u].z) + _800) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4039 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _816 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _823 = (_816 * (cbMtdParam._m0[17u].x - _626)) + _626;
    float _824 = (_816 * (cbMtdParam._m0[17u].y - _627)) + _627;
    float _825 = (_816 * (cbMtdParam._m0[17u].z - _628)) + _628;
    vec4 _851 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _853 = _851.x;
    float _871 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _853) * _457) + _853;
    float _888 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _871) * _530) + _871;
    float _906 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _888) * _600) + _888;
    float _910 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _906) * cbMtdParam._m0[19u].z) + _906;
    float _912 = _910 - (_910 * _816);
    float _917 = (((_645.z - _748) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _748;
    float _921 = ((_772.z - _917) * cbMtdParam._m0[19u].w) + _917;
    vec4 _934 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _941 = (_934.x * 2.0) + (-1.0);
    float _942 = (_934.y * 2.0) + (-1.0);
    float _943 = dot(vec2(_941, _942), vec2(_941, _942));
    float _4050 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _951 = (_816 * (_934.z - _921)) + _921;
    float _960 = (_751 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_645.x * 2.0) + (-1.0)))) + (((_772.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _961 = (_752 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_645.y * 2.0) + (-1.0)))) + (((_772.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _973 = (((_941 - _960) + (cbMtdParam._m0[21u].x * _960)) * _816) + _960;
    float _974 = (((_942 - _961) + (cbMtdParam._m0[21u].x * _961)) * _816) + _961;
    float _975 = (_816 * (sqrt(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) - _758)) + _758;
    float _979 = cbMtdParam._m0[22u].x + _772.w;
    float _982 = fma(_975, _254 * NORMAL.x, fma(_974, _261 * TANGENT.x, (_247 * _239) * _973));
    float _985 = fma(_975, _254 * NORMAL.y, fma(_974, _261 * TANGENT.y, (_247 * _240) * _973));
    float _988 = fma(_975, _254 * NORMAL.z, fma(_974, _261 * TANGENT.z, (_247 * _241) * _973));
    float _992 = inversesqrt(dot(vec3(_982, _985, _988), vec3(_982, _985, _988)));
    float _993 = _992 * _982;
    float _994 = _992 * _985;
    float _995 = _992 * _988;
    float _4061 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _996 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4083 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4094 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4105 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4116 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _1001 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _1015 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1065 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1055);
    float _1066 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1055);
    float _1067 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1055);
    float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
    float _1072 = _1065 * _1071;
    float _1073 = _1066 * _1071;
    float _1074 = _1067 * _1071;
    vec4 _1079 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1081 = _1079.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1253 = sqrt(((_1065 * _1065) + (_1066 * _1066)) + (_1067 * _1067));
        float _1259 = (cbMatDynParam._m0[5u].x * _1253) + cbMatDynParam._m0[5u].y;
        float _4127 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1264 = (cbMatDynParam._m0[5u].z * _1253) + cbMatDynParam._m0[5u].w;
        float _4138 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) - _1260)) + _1260) < ((_1081 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1092 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1093 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1111 = fma(_995, cbSceneParam._m0[5u].z, fma(_994, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _993));
    float _1114 = fma(_995, cbSceneParam._m0[6u].z, fma(_994, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _993));
    float _1117 = fma(_995, cbSceneParam._m0[7u].z, fma(_994, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _993));
    uint _1130 = _288 + 9u;
    uint _1131 = _1130 + uint(cbMatDynParam._m0[0u].w);
    float _1137 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_1131].x;
    float _1138 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_1131].y;
    float _1139 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * cbInstanceData._m0[_1131].z;
    float _4149 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1140 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _4160 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1141 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _1143 = 1.0 - _1001;
    float _1144 = _1140 * _1143;
    float _1145 = _1141 * _1143;
    float _1146 = _1142 * _1143;
    float _1151 = (_1140 + (-0.039999999105930328369140625)) * _1001;
    float _1152 = (_1141 + (-0.039999999105930328369140625)) * _1001;
    float _1153 = (_1142 + (-0.039999999105930328369140625)) * _1001;
    float _1154 = _1151 + 0.039999999105930328369140625;
    float _1156 = _1152 + 0.039999999105930328369140625;
    float _1157 = _1153 + 0.039999999105930328369140625;
    vec4 _1166 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1092, cbSceneParam._m0[86u].y * _1093));
    float _1170 = ((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * TEXCOORD_5.w) * _1166.x;
    float _1171 = dot(vec3(_993, _994, _995), vec3(_1072, _1073, _1074));
    float _1174 = _1171 * 2.0;
    float _1178 = (_1174 * _993) - _1072;
    float _1179 = (_1174 * _994) - _1073;
    float _1180 = (_1174 * _995) - _1074;
    float _1184 = abs(dot(vec3(_1072, _1073, _1074), vec3(_993, _994, _995)));
    float _4182 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1186 = sqrt(_996);
    float _1199 = exp2((_1186 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1186 * 3.0));
    float _1205 = (1.0 - _1199) * ((_1186 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1206 = _1199 * _1186;
    float _1234 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1238 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1571;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1296 = fma(_1242, cbModelParam._m0[26u].z, fma(_1238, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1234));
        float _1300 = fma(_1242, cbModelParam._m0[27u].z, fma(_1238, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1234));
        float _1304 = fma(_1242, cbModelParam._m0[28u].z, fma(_1238, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1234));
        float _1329 = _1234 + _993;
        float _1330 = _1238 + _994;
        float _1331 = _1242 + _995;
        float _1341 = fma(_1331, cbModelParam._m0[26u].z, fma(_1330, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1329)) - _1296;
        float _1342 = fma(_1331, cbModelParam._m0[27u].z, fma(_1330, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1329)) - _1300;
        float _1343 = fma(_1331, cbModelParam._m0[28u].z, fma(_1330, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1329)) - _1304;
        float _1347 = inversesqrt(dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343)));
        float _1360 = ((_1347 * _1341) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1296 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1347 * _1342) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1300 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1347 * _1343) / cbModelParam._m0[34u].z) + ((((((_1304 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        float _1399 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1365.x + (-0.5));
        float _1401 = _1399 * (_1365.y + (-0.5));
        float _1402 = _1399 * (_1365.z + (-0.5));
        float _1409 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1372.x + (-0.5));
        float _1411 = _1409 * (_1372.y + (-0.5));
        float _1412 = _1409 * (_1372.z + (-0.5));
        float _1419 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1379.x + (-0.5));
        float _1421 = _1419 * (_1379.y + (-0.5));
        float _1422 = _1419 * (_1379.z + (-0.5));
        float _1429 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1386.x + (-0.5));
        float _1431 = _1429 * (_1386.y + (-0.5));
        float _1432 = _1429 * (_1386.z + (-0.5));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = _1400 * 0.5;
        float _1437 = _1410 * 0.5;
        float _1438 = _1420 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1453 = (dot(vec3(_993, _994, _995), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1463 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4230 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1465 + 1.0))) + _1470) * _1433;
        float _1480 = _1401 * 0.5;
        float _1481 = _1411 * 0.5;
        float _1482 = _1421 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_993, _994, _995), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4263 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1507 + 1.0))) + _1512) * _1434;
        float _1522 = _1402 * 0.5;
        float _1523 = _1412 * 0.5;
        float _1524 = _1422 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_993, _994, _995), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4296 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1549 + 1.0))) + _1554) * _1435;
        _1571 = _1402;
        _1573 = _1401;
        _1574 = _1400;
        _1575 = _1412;
        _1576 = _1411;
        _1577 = _1410;
        _1578 = _1422;
        _1579 = _1421;
        _1580 = _1420;
        _1581 = _1435;
        _1582 = _1434;
        _1583 = _1433;
        _1584 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1585 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1586 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
    }
    else
    {
        _1571 = _1572;
        _1573 = _1572;
        _1574 = _1572;
        _1575 = _1572;
        _1576 = _1572;
        _1577 = _1572;
        _1578 = _1572;
        _1579 = _1572;
        _1580 = _1572;
        _1581 = _1572;
        _1582 = _1572;
        _1583 = _1572;
        _1584 = 0.0;
        _1585 = 0.0;
        _1586 = 0.0;
    }
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1612 = fma(_1242, cbModelParam._m0[30u].z, fma(_1238, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1234));
        float _1616 = fma(_1242, cbModelParam._m0[31u].z, fma(_1238, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1234));
        float _1620 = fma(_1242, cbModelParam._m0[32u].z, fma(_1238, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1234));
        float _1643 = _1234 + _993;
        float _1644 = _1238 + _994;
        float _1645 = _1242 + _995;
        float _1655 = fma(_1645, cbModelParam._m0[30u].z, fma(_1644, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1643)) - _1612;
        float _1656 = fma(_1645, cbModelParam._m0[31u].z, fma(_1644, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1643)) - _1616;
        float _1657 = fma(_1645, cbModelParam._m0[32u].z, fma(_1644, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1643)) - _1620;
        float _1661 = inversesqrt(dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657)));
        float _1674 = ((_1661 * _1655) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1612 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1675 = ((_1661 * _1656) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1616 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1676 = ((_1661 * _1657) / cbModelParam._m0[35u].z) + ((((((_1620 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1678 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1692 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        float _1711 = exp2((_1678.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1678.x + (-0.5));
        float _1713 = _1711 * (_1678.y + (-0.5));
        float _1714 = _1711 * (_1678.z + (-0.5));
        float _1721 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1685.x + (-0.5));
        float _1723 = _1721 * (_1685.y + (-0.5));
        float _1724 = _1721 * (_1685.z + (-0.5));
        float _1731 = exp2((_1692.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1692.x + (-0.5));
        float _1733 = _1731 * (_1692.y + (-0.5));
        float _1734 = _1731 * (_1692.z + (-0.5));
        float _1741 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1699.x + (-0.5));
        float _1743 = _1741 * (_1699.y + (-0.5));
        float _1744 = _1741 * (_1699.z + (-0.5));
        float _1745 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1746 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = _1712 * 0.5;
        float _1749 = _1722 * 0.5;
        float _1750 = _1732 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_993, _994, _995), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1745 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4359 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1775 + 1.0))) + _1780) * _1745;
        float _1790 = _1713 * 0.5;
        float _1791 = _1723 * 0.5;
        float _1792 = _1733 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_993, _994, _995), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1746 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4392 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1817 + 1.0))) + _1822) * _1746;
        float _1832 = _1714 * 0.5;
        float _1833 = _1724 * 0.5;
        float _1834 = _1734 * 0.5;
        float _1835 = dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834));
        float _1840 = (_1835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1835);
        float _1848 = (dot(vec3(_993, _994, _995), vec3(_1840 * _1832, _1840 * _1833, _1840 * _1834)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1857 = sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1859 = _1858 * 2.0;
        float _1863 = (1.0 - _1858) / (_1858 + 1.0);
        float _4425 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1873 = ((((1.0 - _1864) * (_1859 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1859 + 1.0))) + _1864) * _1747;
        _1881 = _1714;
        _1882 = _1713;
        _1883 = _1712;
        _1884 = _1724;
        _1885 = _1723;
        _1886 = _1722;
        _1887 = _1734;
        _1888 = _1733;
        _1889 = _1732;
        _1890 = _1747;
        _1891 = _1746;
        _1892 = _1745;
        _1893 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
        _1894 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
        _1895 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)));
    }
    else
    {
        _1881 = _1572;
        _1882 = _1572;
        _1883 = _1572;
        _1884 = _1572;
        _1885 = _1572;
        _1886 = _1572;
        _1887 = _1572;
        _1888 = _1572;
        _1889 = _1572;
        _1890 = _1572;
        _1891 = _1572;
        _1892 = _1572;
        _1893 = 0.0;
        _1894 = 0.0;
        _1895 = 0.0;
    }
    float _1905 = (cbModelParam._m0[1u].x * (_1893 - _1584)) + _1584;
    float _1906 = (cbModelParam._m0[1u].x * (_1894 - _1585)) + _1585;
    float _1907 = (cbModelParam._m0[1u].x * (_1895 - _1586)) + _1586;
    float _1928 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1931 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1934 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1905));
    float _1949 = _1178 * 0.5;
    float _1950 = _1179 * 0.5;
    float _1951 = _1180 * 0.5;
    float _1952 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1883, _1886, _1889, _1892));
    float _1955 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1882, _1885, _1888, _1891));
    float _1958 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1881, _1884, _1887, _1890));
    float _1992;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1965 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1571, _1575, _1578, _1581));
        float _1969 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1573, _1576, _1579, _1582));
        float _1973 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1574, _1577, _1580, _1583));
        float _1980 = dot(vec4(cbModelParam._m0[39u]), vec4(_1949, _1950, _1951, 1.0));
        _1992 = dot(vec3(isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1980) ? 0.0 : (isnan(0.0) ? _1980 : max(0.0, _1980))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1992 = 1.0;
    }
    float _2003;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1994 = dot(vec4(cbModelParam._m0[40u]), vec4(_1949, _1950, _1951, 1.0));
        _2003 = dot(vec3(isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1994) ? 0.0 : (isnan(0.0) ? _1994 : max(0.0, _1994))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2003 = 1.0;
    }
    float _2007 = (_2003 * cbModelParam._m0[1u].x) + (_1992 * (1.0 - cbModelParam._m0[1u].x));
    float _2017 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _996);
    float _2018 = isnan(_2017) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2017 : min(cbModelParam._m0[25u].z, _2017));
    float _2098;
    float _2100;
    float _2102;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2065 = fma(_1242, cbModelParam._m0[13u].z, fma(_1238, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1234)) + cbModelParam._m0[13u].w;
        float _2069 = fma(_1242, cbModelParam._m0[14u].z, fma(_1238, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1234)) + cbModelParam._m0[14u].w;
        float _2073 = fma(_1242, cbModelParam._m0[15u].z, fma(_1238, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1234)) + cbModelParam._m0[15u].w;
        float _2076 = fma(_1180, cbModelParam._m0[13u].z, fma(_1179, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1178));
        float _2079 = fma(_1180, cbModelParam._m0[14u].z, fma(_1179, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1178));
        float _2082 = fma(_1180, cbModelParam._m0[15u].z, fma(_1179, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1178));
        float _2110;
        if (_2076 > 0.0)
        {
            _2110 = abs((1.0 - _2065) / _2076);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2065 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2110 = frontier_phi_17_15_ladder;
        }
        float _2313;
        if (_2079 > 0.0)
        {
            _2313 = abs((1.0 - _2069) / _2079);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2069 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2313 = frontier_phi_26_22_ladder;
        }
        float _2567;
        if (_2082 > 0.0)
        {
            _2567 = abs((1.0 - _2073) / _2082);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2073 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2567 = frontier_phi_38_33_ladder;
        }
        float _2569 = isnan(_2313) ? _2110 : (isnan(_2110) ? _2313 : min(_2110, _2313));
        float _2570 = isnan(_2567) ? _2569 : (isnan(_2569) ? _2567 : min(_2569, _2567));
        float _2574 = (_2570 * _2076) + _2065;
        float _2575 = (_2570 * _2079) + _2069;
        float _2576 = (_2570 * _2082) + _2073;
        float _2577 = _2570 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2577;
        float _2581 = _2577 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 > _2581) || ((_2575 < _2579) || ((_2574 < _2579) || (_2574 > _2581))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2704 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2576, cbModelParam._m0[9u].z, fma(_2575, cbModelParam._m0[9u].y, _2574 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2576, cbModelParam._m0[10u].z, fma(_2575, cbModelParam._m0[10u].y, _2574 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2576, cbModelParam._m0[11u].z, fma(_2575, cbModelParam._m0[11u].y, _2574 * cbModelParam._m0[11u].x))), _2018);
            frontier_phi_16_38_ladder = _2704.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2704.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2704.x * cbModelParam._m0[1u].y;
        }
        _2098 = frontier_phi_16_38_ladder_2;
        _2100 = frontier_phi_16_38_ladder_1;
        _2102 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2086 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1178, _1179, _1180), _2018);
        _2098 = _2086.x * cbModelParam._m0[1u].y;
        _2100 = _2086.y * cbModelParam._m0[1u].y;
        _2102 = _2086.z * cbModelParam._m0[1u].y;
    }
    float _2106 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _996);
    float _2107 = isnan(_2106) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2106 : min(cbModelParam._m0[25u].w, _2106));
    float _2197;
    float _2199;
    float _2201;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2161 = fma(_1242, cbModelParam._m0[21u].z, fma(_1238, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1234)) + cbModelParam._m0[21u].w;
        float _2165 = fma(_1242, cbModelParam._m0[22u].z, fma(_1238, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1234)) + cbModelParam._m0[22u].w;
        float _2169 = fma(_1242, cbModelParam._m0[23u].z, fma(_1238, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1234)) + cbModelParam._m0[23u].w;
        float _2172 = fma(_1180, cbModelParam._m0[21u].z, fma(_1179, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1178));
        float _2175 = fma(_1180, cbModelParam._m0[22u].z, fma(_1179, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1178));
        float _2178 = fma(_1180, cbModelParam._m0[23u].z, fma(_1179, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1178));
        float _2318;
        if (_2172 > 0.0)
        {
            _2318 = abs((1.0 - _2161) / _2172);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2172 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2161 + 1.0) / _2172);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2318 = frontier_phi_28_24_ladder;
        }
        float _2594;
        if (_2175 > 0.0)
        {
            _2594 = abs((1.0 - _2165) / _2175);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2175 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2165 + 1.0) / _2175);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2594 = frontier_phi_40_35_ladder;
        }
        float _2807;
        if (_2178 > 0.0)
        {
            _2807 = abs((1.0 - _2169) / _2178);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2169 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2807 = frontier_phi_49_46_ladder;
        }
        float _2809 = isnan(_2594) ? _2318 : (isnan(_2318) ? _2594 : min(_2318, _2594));
        float _2810 = isnan(_2807) ? _2809 : (isnan(_2809) ? _2807 : min(_2809, _2807));
        float _2814 = (_2810 * _2172) + _2161;
        float _2815 = (_2810 * _2175) + _2165;
        float _2816 = (_2810 * _2178) + _2169;
        float _2817 = _2810 * 9.9999997473787516355514526367188e-05;
        float _2818 = (-1.0) - _2817;
        float _2820 = _2817 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2816 > _2820) || ((_2816 < _2818) || ((_2815 > _2820) || ((_2815 < _2818) || ((_2814 < _2818) || (_2814 > _2820))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2816, cbModelParam._m0[17u].z, fma(_2815, cbModelParam._m0[17u].y, _2814 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2816, cbModelParam._m0[18u].z, fma(_2815, cbModelParam._m0[18u].y, _2814 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2816, cbModelParam._m0[19u].z, fma(_2815, cbModelParam._m0[19u].y, _2814 * cbModelParam._m0[19u].x))), _2107);
            frontier_phi_25_49_ladder = _3015.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3015.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3015.x * cbModelParam._m0[1u].z;
        }
        _2197 = frontier_phi_25_49_ladder_2;
        _2199 = frontier_phi_25_49_ladder_1;
        _2201 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2181 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1178, _1179, _1180), _2107);
        _2197 = _2181.x * cbModelParam._m0[1u].z;
        _2199 = _2181.y * cbModelParam._m0[1u].z;
        _2201 = _2181.z * cbModelParam._m0[1u].z;
    }
    float _2214 = (((_1205 * _1154) + _1206) * _1170) * ((cbModelParam._m0[1u].w * (_2197 - _2098)) + _2098);
    float _2216 = (((_1205 * _1156) + _1206) * _1170) * ((cbModelParam._m0[1u].w * (_2199 - _2100)) + _2100);
    float _2218 = (((_1205 * _1157) + _1206) * _1170) * ((cbModelParam._m0[1u].w * (_2201 - _2102)) + _2102);
    float _2221 = fma(_2218, cbSceneParam._m0[89u].z, fma(_2216, cbSceneParam._m0[89u].y, _2214 * cbSceneParam._m0[89u].x));
    float _2224 = fma(_2218, cbSceneParam._m0[90u].z, fma(_2216, cbSceneParam._m0[90u].y, _2214 * cbSceneParam._m0[90u].x));
    float _2227 = fma(_2218, cbSceneParam._m0[91u].z, fma(_2216, cbSceneParam._m0[91u].y, _2214 * cbSceneParam._m0[91u].x));
    uvec4 _2237 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2239 = _2237.x * 14u;
    uint _2240 = _2239 + 13u;
    float _2247 = _1170 + (-1.0);
    float _2252 = (cbLight._m0[_2240].x * _2247) + 1.0;
    float _2253 = (cbLight._m0[_2240].y * _2247) + 1.0;
    float _2254 = (cbLight._m0[_2240].z * _2247) + 1.0;
    float _2255 = (cbLight._m0[_2240].w * _2247) + 1.0;
    uint _2256 = _2239 + 5u;
    float _2262 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
    uint _2266 = _2239 + 4u;
    float _2272 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
    uint _2276 = _2239 | 1u;
    float _2287 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_993, _994, _995));
    float _2290 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_993, _994, _995));
    float _4561 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _4572 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2295 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * 0.3183098733425140380859375;
    float _2297 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * 0.3183098733425140380859375;
    float _2304 = ((cbLight._m0[_2256].x * _2262) * _2297) + ((cbLight._m0[_2266].x * _2272) * _2295);
    float _2305 = ((_2262 * cbLight._m0[_2256].y) * _2297) + ((_2272 * cbLight._m0[_2266].y) * _2295);
    float _2306 = ((_2262 * cbLight._m0[_2256].z) * _2297) + ((_2272 * cbLight._m0[_2266].z) * _2295);
    uvec4 _2310 = floatBitsToUint(cbLight._m0[_2239 + 12u]);
    bool _2312 = _2310.x == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2312)
    {
        _2323 = _2304;
        _2325 = _2305;
        _2327 = _2306;
    }
    else
    {
        uint _2331 = _2239 + 6u;
        float _2347 = (dot(vec3(cbLight._m0[_2239 + 2u].xyz), vec3(_993, _994, _995)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4583 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2350 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2323 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2304;
        _2325 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2305;
        _2327 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2306;
    }
    bool _2330 = _2310.y == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2330)
    {
        _2368 = _2323;
        _2370 = _2325;
        _2372 = _2327;
    }
    else
    {
        uint _2538 = _2239 + 7u;
        float _2554 = (dot(vec3(cbLight._m0[_2239 + 3u].xyz), vec3(_993, _994, _995)) * 0.5) + 0.5;
        float _2555 = _2554 * _2554;
        float _4599 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2556 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2557 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
        _2368 = (((cbLight._m0[_2538].x * 0.3183098733425140380859375) * _2556) * _2557) + _2323;
        _2370 = (((cbLight._m0[_2538].y * 0.3183098733425140380859375) * _2556) * _2557) + _2325;
        _2372 = (((cbLight._m0[_2538].z * 0.3183098733425140380859375) * _2556) * _2557) + _2327;
    }
    uint _2375 = _2239 + 8u;
    float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _996) * 0.949999988079071044921875);
    float _2389 = _2388 * _2388;
    float _2390 = cbLight._m0[_2239].x + _1072;
    float _2391 = cbLight._m0[_2239].y + _1073;
    float _2392 = cbLight._m0[_2239].z + _1074;
    float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
    float _2397 = _2396 * _2390;
    float _2398 = _2396 * _2391;
    float _2399 = _2396 * _2392;
    float _2400 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2239].xyz));
    float _4615 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _4626 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _2404 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2405 = dot(vec3(_993, _994, _995), vec3(_2397, _2398, _2399));
    float _4637 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2397, _2398, _2399));
    float _4648 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2389 * _2389;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0);
    float _2426 = 0.959999978542327880859375 - _1151;
    float _2428 = 0.959999978542327880859375 - _1152;
    float _2429 = 0.959999978542327880859375 - _1153;
    float _2436 = 1.0 - _2389;
    float _2447 = (0.5 / (((_2404 * ((_2403 * _2436) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2436) + _2389) * _2403))) * _2403;
    float _4659 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    uint _2460 = _2239 + 9u;
    float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _996) * 0.949999988079071044921875);
    float _2472 = _2471 * _2471;
    float _2473 = cbLight._m0[_2276].x + _1072;
    float _2474 = cbLight._m0[_2276].y + _1073;
    float _2475 = cbLight._m0[_2276].z + _1074;
    float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
    float _2480 = _2479 * _2473;
    float _2481 = _2479 * _2474;
    float _2482 = _2479 * _2475;
    float _2483 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2276].xyz));
    float _4670 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _2487 = dot(vec3(_993, _994, _995), vec3(_2480, _2481, _2482));
    float _4681 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2480, _2481, _2482));
    float _4692 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2472 * _2472;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
    float _2513 = 1.0 - _2472;
    float _2523 = (0.5 / (((_2404 * ((_2486 * _2513) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2513) + _2472) * _2486))) * _2486;
    float _4703 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2525 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    float _2535 = (((((_2506 * _2426) + _1154) * cbLight._m0[_2460].x) * _2525) * _2262) + (((((_2425 * _2426) + _1154) * cbLight._m0[_2375].x) * _2449) * _2272);
    float _2536 = (((((_2506 * _2428) + _1156) * cbLight._m0[_2460].y) * _2525) * _2262) + (((((_2425 * _2428) + _1156) * cbLight._m0[_2375].y) * _2449) * _2272);
    float _2537 = (((((_2506 * _2429) + _1157) * cbLight._m0[_2460].z) * _2525) * _2262) + (((((_2425 * _2429) + _1157) * cbLight._m0[_2375].z) * _2449) * _2272);
    float _2599;
    float _2601;
    float _2603;
    if (_2312)
    {
        _2599 = _2535;
        _2601 = _2536;
        _2603 = _2537;
    }
    else
    {
        uint _2605 = _2239 + 2u;
        uint _2609 = _2239 + 10u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _996) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _1072;
        float _2626 = cbLight._m0[_2605].y + _1073;
        float _2627 = cbLight._m0[_2605].z + _1074;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2605].xyz));
        float _4714 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2639 = dot(vec3(_993, _994, _995), vec3(_2632, _2633, _2634));
        float _4725 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4736 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
        float _2665 = 1.0 - _2624;
        float _2675 = (0.5 / (((_2404 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2665) + _2624) * _2638))) * _2638;
        float _4747 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2599 = (((((_2658 * _2426) + _1154) * cbLight._m0[_2609].x) * _2677) * _2678) + _2535;
        _2601 = (((((_2658 * _2428) + _1156) * cbLight._m0[_2609].y) * _2677) * _2678) + _2536;
        _2603 = (((((_2658 * _2429) + _1157) * cbLight._m0[_2609].z) * _2677) * _2678) + _2537;
    }
    float _2713;
    float _2715;
    float _2717;
    if (_2330)
    {
        _2713 = _2599;
        _2715 = _2601;
        _2717 = _2603;
    }
    else
    {
        uint _2724 = _2239 + 3u;
        uint _2728 = _2239 + 11u;
        float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2724].w)) * _996) * 0.949999988079071044921875);
        float _2743 = _2742 * _2742;
        float _2744 = cbLight._m0[_2724].x + _1072;
        float _2745 = cbLight._m0[_2724].y + _1073;
        float _2746 = cbLight._m0[_2724].z + _1074;
        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
        float _2751 = _2750 * _2744;
        float _2752 = _2750 * _2745;
        float _2753 = _2750 * _2746;
        float _2754 = dot(vec3(_993, _994, _995), vec3(cbLight._m0[_2724].xyz));
        float _4763 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2758 = dot(vec3(_993, _994, _995), vec3(_2751, _2752, _2753));
        float _4774 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2762 = dot(vec3(cbLight._m0[_2724].xyz), vec3(_2751, _2752, _2753));
        float _4785 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2766 = _2743 * _2743;
        float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
        float _2777 = exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0);
        float _2784 = 1.0 - _2743;
        float _2794 = (0.5 / (((_2404 * ((_2757 * _2784) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2784) + _2743) * _2757))) * _2757;
        float _4796 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2796 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
        float _2797 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
        _2713 = (((((_2777 * _2426) + _1154) * cbLight._m0[_2728].x) * _2796) * _2797) + _2599;
        _2715 = (((((_2777 * _2428) + _1156) * cbLight._m0[_2728].y) * _2796) * _2797) + _2601;
        _2717 = (((((_2777 * _2429) + _1157) * cbLight._m0[_2728].z) * _2796) * _2797) + _2603;
    }
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_2237.y == 0u)
    {
        float _2872 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2873 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2872;
        float _2874 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2872;
        float _2875 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2872;
        uvec4 _2887 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2888 = _2887.x;
        uint _2899 = uint((float(_2887.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1093) / _2888))) + floor(float(uint(cbSceneParam._m0[85u].x * _1092) / _2888)));
        float _2909 = (log2(_2875 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2910 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        uint _2913 = uint(isnan(14.0) ? _2910 : (isnan(_2910) ? 14.0 : min(_2910, 14.0)));
        uvec4 _2918 = texelFetch(g_lightClusterGridBuffer, int(((_2913 << 2u) + (_2899 << 6u)) >> 2u));
        uint _2919 = _2918.x;
        uint _2920 = _2887.z;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((((1u << ((_2920 >> 4u) & 15u)) + 4294967295u) & _2919) == 0u) || ((_2920 & 240u) == 0u))
        {
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
        }
        else
        {
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            uint _3179 = 0u;
            uint _3188;
            bool _3189;
            for (;;)
            {
                _3188 = texelFetch(g_lightClassification, int((((_2913 << 5u) + (_2899 << 9u)) + (_3179 << 2u)) >> 2u)).x;
                _3189 = _3188 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3189)
                {
                    frontier_phi_66_pred = _3173;
                    frontier_phi_66_pred_1 = _3178;
                    frontier_phi_66_pred_2 = _3177;
                    frontier_phi_66_pred_3 = _3176;
                    frontier_phi_66_pred_4 = _3175;
                    frontier_phi_66_pred_5 = _3174;
                }
                else
                {
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    uint _3324;
                    _3318 = _3173;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3178;
                    _3324 = _3188;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    for (;;)
                    {
                        uint _3328 = uint(findLSB(_3324)) + (_3179 << 5u);
                        uint _3325 = (_3324 + 4294967295u) & _3324;
                        uint _3330 = _3328 * 48u;
                        vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3350 = (_3328 * 48u) + 4u;
                        vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 3u)).x));
                        uint _3369 = (_3328 * 48u) + 8u;
                        vec3 _3380 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x));
                        float _3384 = _3344.x - _2873;
                        float _3385 = _3344.y - _2874;
                        float _3386 = _3344.z - _2875;
                        float _3387 = dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386));
                        float _3390 = inversesqrt(_3387);
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3394 = dot(vec3(_1111, _1114, _1117), vec3(_3391, _3392, _3393));
                        float _3399 = 1.0 - (_3387 * _3344.w);
                        float _4822 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3400 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3401 = sqrt(_3387) * _3363.w;
                        float _3404 = 1.39999997615814208984375 / (_3401 + 1.39999997615814208984375);
                        float _3405 = _3404 * _3404;
                        float _3408 = ((1.0 - _3405) * _3394) + _3405;
                        float _3411 = _3401 * _3401;
                        float _3415 = ((isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))) * _3400) / ((_3411 * 0.699999988079071044921875) + 1.0);
                        float _3419 = (-0.0) - _2873;
                        float _3420 = (-0.0) - _2874;
                        float _3421 = (-0.0) - _2875;
                        float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                        float _3426 = _3425 * _3419;
                        float _3427 = _3425 * _3420;
                        float _3428 = _3425 * _3421;
                        float _3436 = exp2(log2(1.0 / ((_3411 * 3.5) + 5.0)) * 0.25);
                        float _3437 = 1.0 - _1186;
                        float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                        float _3445 = _3444 * _3444;
                        float _3446 = _3445 * _3445;
                        float _3447 = _3426 + _3391;
                        float _3448 = _3427 + _3392;
                        float _3449 = _3428 + _3393;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3457 = dot(vec3(_1111, _1114, _1117), vec3(_3426, _3427, _3428));
                        float _4838 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3461 = dot(vec3(_1111, _1114, _1117), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                        float _4849 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                        float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                        float _3469 = _3404 * _3445;
                        float _3470 = _3469 * _3469;
                        float _3473 = ((1.0 - _3470) * _3394) + _3470;
                        float _4860 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3474 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3475 = 1.0 - _3445;
                        float _3485 = (0.5 / (((_3474 * ((_3460 * _3475) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3445) * _3460))) * _3474;
                        float _4871 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3496 = (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) / ((_3468 * _3468) * ((_3411 * 2.1991131305694580078125) + 3.141590118408203125))) * _3400;
                        _3248 = (_3415 * _3363.x) + _3321;
                        _3249 = (_3415 * _3363.y) + _3322;
                        _3250 = (_3415 * _3363.z) + _3323;
                        _3245 = (_3496 * _3380.x) + _3318;
                        _3246 = (_3496 * _3380.y) + _3319;
                        _3247 = (_3496 * _3380.z) + _3320;
                        if (_3325 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3318 = _3245;
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3250;
                            _3324 = _3325;
                        }
                    }
                    frontier_phi_66_pred = _3245;
                    frontier_phi_66_pred_1 = _3250;
                    frontier_phi_66_pred_2 = _3249;
                    frontier_phi_66_pred_3 = _3248;
                    frontier_phi_66_pred_4 = _3247;
                    frontier_phi_66_pred_5 = _3246;
                }
                _3021 = frontier_phi_66_pred;
                _3031 = frontier_phi_66_pred_1;
                _3029 = frontier_phi_66_pred_2;
                _3027 = frontier_phi_66_pred_3;
                _3025 = frontier_phi_66_pred_4;
                _3023 = frontier_phi_66_pred_5;
                uint _3180 = _3179 + 1u;
                if (_3180 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3173 = _3021;
                    _3174 = _3023;
                    _3175 = _3025;
                    _3176 = _3027;
                    _3177 = _3029;
                    _3178 = _3031;
                    _3179 = _3180;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
        }
        uvec4 _3034 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3035 = _3034.z;
        uint _3037 = (_3035 >> 8u) & 15u;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        if (((4294967295u << _3037) & _2919) == 0u)
        {
            _3141 = _3020;
            _3143 = _3022;
            _3145 = _3024;
            _3147 = _3026;
            _3149 = _3028;
            _3151 = _3030;
        }
        else
        {
            float _3166 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
            float _3167 = _3166 * _2873;
            float _3168 = _3166 * _2874;
            float _3169 = _3166 * _2875;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3037 < ((_3035 >> 12u) & 15u))
            {
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3301 = _3020;
                float _3302 = _3022;
                float _3303 = _3024;
                float _3304 = _3026;
                float _3305 = _3028;
                float _3306 = _3030;
                uint _3307 = _3037;
                uint _3316;
                bool _3317;
                for (;;)
                {
                    _3316 = texelFetch(g_lightClassification, int((((_2913 << 5u) + (_2899 << 9u)) + (_3307 << 2u)) >> 2u)).x;
                    _3317 = _3316 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3317)
                    {
                        frontier_phi_77_pred = _3306;
                        frontier_phi_77_pred_1 = _3305;
                        frontier_phi_77_pred_2 = _3304;
                        frontier_phi_77_pred_3 = _3303;
                        frontier_phi_77_pred_4 = _3302;
                        frontier_phi_77_pred_5 = _3301;
                    }
                    else
                    {
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3523 = _3301;
                        float _3524 = _3302;
                        float _3525 = _3303;
                        float _3526 = _3304;
                        float _3527 = _3305;
                        float _3528 = _3306;
                        uint _3529 = _3316;
                        uint _3530;
                        vec4 _3555;
                        float _3556;
                        vec4 _3571;
                        vec3 _3583;
                        vec4 _3598;
                        vec4 _3613;
                        float _3659;
                        bool _3660;
                        for (;;)
                        {
                            uint _3540 = ((_3307 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3529));
                            _3530 = (_3529 + 4294967295u) & _3529;
                            uint _3542 = _3540 * 40u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            _3556 = _3555.w;
                            uint _3558 = (_3540 * 40u) + 4u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3540 * 40u) + 8u;
                            _3583 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x));
                            uint _3585 = (_3540 * 40u) + 16u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3540 * 40u) + 20u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3615 = (_3540 * 40u) + 24u;
                            vec4 _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3634 = (_3540 * 40u) + 28u;
                            vec4 _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            _3659 = fma(_2875, _3647.z, fma(_2874, _3647.y, _3647.x * _2873)) + _3647.w;
                            _3660 = !((fma(_2875, _3628.z, fma(_2874, _3628.y, _3628.x * _2873)) + _3628.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3660)
                            {
                                float _3687 = _3555.x - _2873;
                                float _3688 = _3555.y - _2874;
                                float _3689 = _3555.z - _2875;
                                float _3690 = dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689));
                                float _3693 = inversesqrt(_3690);
                                float _3694 = _3693 * _3687;
                                float _3695 = _3693 * _3688;
                                float _3696 = _3693 * _3689;
                                float _3700 = 1.0 - (_3690 / (_3556 * _3556));
                                float _4882 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3705 = sqrt(_3690) * _3571.w;
                                float _3707 = 1.39999997615814208984375 / (_3705 + 1.39999997615814208984375);
                                float _3708 = _3707 * _3707;
                                float _3711 = ((1.0 - _3708) * dot(vec3(_3694, _3695, _3696), vec3(_1111, _1114, _1117))) + _3708;
                                float _3714 = _3705 * _3705;
                                float _3718 = (fma(_2875, _3598.z, fma(_2874, _3598.y, _3598.x * _2873)) + _3598.w) / _3659;
                                float _3719 = (fma(_2875, _3613.z, fma(_2874, _3613.y, _3613.x * _2873)) + _3613.w) / _3659;
                                float _3723 = 1.0 - dot(vec2(_3718, _3719), vec2(_3718, _3719));
                                float _4898 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3725 = _3724 * (((isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0))) * _3701) / ((_3714 * 0.699999988079071044921875) + 1.0));
                                float _3737 = exp2(log2(1.0 / ((_3714 * 3.5) + 5.0)) * 0.25);
                                float _3738 = 1.0 - _1186;
                                float _3745 = sqrt(1.0 - ((1.0 - (_3738 * _3738)) * (1.0 - (_3737 * _3737))));
                                float _3746 = _3745 * _3745;
                                float _3747 = _3746 * _3746;
                                float _3748 = _3694 - _3167;
                                float _3749 = _3695 - _3168;
                                float _3750 = _3696 - _3169;
                                float _3754 = inversesqrt(dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750)));
                                float _3758 = dot(vec3(_1111, _1114, _1117), vec3((-0.0) - _3167, (-0.0) - _3168, (-0.0) - _3169));
                                float _4909 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3762 = dot(vec3(_1111, _1114, _1117), vec3(_3754 * _3748, _3754 * _3749, _3754 * _3750));
                                float _4920 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3765 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3769 = ((_3765 * _3765) * (_3747 + (-1.0))) + 1.0;
                                float _3770 = _3707 * _3746;
                                float _3771 = _3770 * _3770;
                                float _3777 = ((1.0 - _3771) * dot(vec3(_1111, _1114, _1117), vec3(_3694, _3695, _3696))) + _3771;
                                float _4931 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3779 = 1.0 - _3746;
                                float _3789 = (0.5 / (((_3778 * ((_3761 * _3779) + _3746)) + 9.9999999392252902907785028219223e-09) + (((_3778 * _3779) + _3746) * _3761))) * _3778;
                                float _4942 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3799 = (_3724 * _3701) * (((_3747 * 3.1415927410125732421875) * (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) / ((_3769 * _3769) * ((_3714 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3725 * _3571.y;
                                frontier_phi_83_pred_1 = _3725 * _3571.x;
                                frontier_phi_83_pred_2 = _3799 * _3583.z;
                                frontier_phi_83_pred_3 = _3799 * _3583.y;
                                frontier_phi_83_pred_4 = _3799 * _3583.x;
                                frontier_phi_83_pred_5 = _3725 * _3571.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3807 = frontier_phi_83_pred;
                            _3806 = frontier_phi_83_pred_1;
                            _3805 = frontier_phi_83_pred_2;
                            _3804 = frontier_phi_83_pred_3;
                            _3803 = frontier_phi_83_pred_4;
                            _3808 = frontier_phi_83_pred_5;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3515 = _3808 + _3528;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            _3512 = _3805 + _3525;
                            if (_3530 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3530;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3515;
                        frontier_phi_77_pred_1 = _3514;
                        frontier_phi_77_pred_2 = _3513;
                        frontier_phi_77_pred_3 = _3512;
                        frontier_phi_77_pred_4 = _3511;
                        frontier_phi_77_pred_5 = _3510;
                    }
                    _3152 = frontier_phi_77_pred;
                    _3150 = frontier_phi_77_pred_1;
                    _3148 = frontier_phi_77_pred_2;
                    _3146 = frontier_phi_77_pred_3;
                    _3144 = frontier_phi_77_pred_4;
                    _3142 = frontier_phi_77_pred_5;
                    uint _3308 = _3307 + 1u;
                    if (_3308 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3301 = _3142;
                        _3302 = _3144;
                        _3303 = _3146;
                        _3304 = _3148;
                        _3305 = _3150;
                        _3306 = _3152;
                        _3307 = _3308;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3146;
                frontier_phi_58_59_ladder_1 = _3152;
                frontier_phi_58_59_ladder_2 = _3150;
                frontier_phi_58_59_ladder_3 = _3148;
                frontier_phi_58_59_ladder_4 = _3144;
                frontier_phi_58_59_ladder_5 = _3142;
            }
            else
            {
                frontier_phi_58_59_ladder = _3024;
                frontier_phi_58_59_ladder_1 = _3030;
                frontier_phi_58_59_ladder_2 = _3028;
                frontier_phi_58_59_ladder_3 = _3026;
                frontier_phi_58_59_ladder_4 = _3022;
                frontier_phi_58_59_ladder_5 = _3020;
            }
            _3141 = frontier_phi_58_59_ladder_5;
            _3143 = frontier_phi_58_59_ladder_4;
            _3145 = frontier_phi_58_59_ladder;
            _3147 = frontier_phi_58_59_ladder_3;
            _3149 = frontier_phi_58_59_ladder_2;
            _3151 = frontier_phi_58_59_ladder_1;
        }
        float _3156 = isnan(1.0) ? _1170 : (isnan(_1170) ? 1.0 : min(_1170, 1.0));
        _2932 = (_3156 * _3147) + _2368;
        _2934 = (_3156 * _3149) + _2370;
        _2936 = (_3156 * _3151) + _2372;
        _2938 = ((_3141 * _1154) * _3156) + _2713;
        _2940 = ((_3143 * _1156) * _3156) + _2715;
        _2942 = ((_3145 * _1157) * _3156) + _2717;
    }
    else
    {
        _2932 = _2368;
        _2934 = _2370;
        _2936 = _2372;
        _2938 = _2713;
        _2940 = _2715;
        _2942 = _2717;
    }
    float _4958 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _4969 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _4980 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _2959 = ((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2932 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1170))) + ((_2938 + ((isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0))) * _2007)) * cbPerFrame._m0[3u].x);
    float _2960 = ((isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_2934 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1170))) + ((_2940 + ((isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0))) * _2007)) * cbPerFrame._m0[3u].x);
    float _2961 = ((isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_2936 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1170))) + ((_2942 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2007)) * cbPerFrame._m0[3u].x);
    uint _2962 = _288 + 6u;
    float _2970 = _1092 / cbSceneParam._m0[86u].x;
    float _2971 = _1093 / cbSceneParam._m0[86u].y;
    vec4 _2985 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2970, _2971, (log2((isnan(cbSceneParam._m0[77u].w) ? _1015 : (isnan(_1015) ? cbSceneParam._m0[77u].w : min(_1015, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2987 = _2985.x;
    float _2988 = _2985.y;
    float _2989 = _2985.z;
    float _2990 = _2985.w;
    float _3083;
    float _3085;
    float _3087;
    float _3089;
    if (_1015 > cbSceneParam._m0[78u].w)
    {
        float _3045 = isnan(_1015) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1015 : min(cbSceneParam._m0[80u].w, _1015));
        float _3046 = _3045 / _1015;
        float _3057 = _3046 * _1065;
        float _3058 = _1066 * _3046;
        float _3059 = (-0.0) - _3058;
        float _3061 = _3046 * _1067;
        float _3063 = (cbSceneParam._m0[77u].w * _3059) / _3045;
        float _3064 = _3063 + cbSceneParam._m0[79u].w;
        float _3065 = cbSceneParam._m0[79u].w - _3058;
        float _3071 = sqrt(((_3057 * _3057) + (_3058 * _3058)) + (_3061 * _3061));
        float _3074 = (1.0 - (cbSceneParam._m0[77u].w / _3045)) * _3071;
        float _3079 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3081 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3258;
        if (abs((_3059 - _3063) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3258 = ((((_3064 > 0.0) ? exp2(_3079 * _3064) : (2.0 - exp2(_3081 * _3064))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3074;
        }
        else
        {
            float _3202 = 1.0 / cbSceneParam._m0[80u].x;
            float _3203 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : max(_3064, _3065));
            float _3204 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : min(_3064, _3065));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            _3258 = ((abs(_3071 / _3059) * cbSceneParam._m0[80u].y) * ((((_3213 - _3214) * 2.0) - ((exp2(_3079 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0)))) - exp2(_3079 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0))))) * _3202)) - ((exp2(_3081 * _3213) - exp2(_3081 * _3214)) * _3202))) + (_3074 * cbSceneParam._m0[80u].z);
        }
        vec4 _3260 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2970, _2971, 1.0), 0.0);
        float _3269 = exp2((_3258 * (-1.44269502162933349609375)) * (1.0 - _3260.w));
        float _3270 = log2(_3269);
        float _3286 = log2(_2990);
        _3083 = (exp2(_3286 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3270 * cbSceneParam._m0[78u].x)) * _3260.x) / cbSceneParam._m0[78u].x)) + _2987;
        _3085 = (exp2(_3286 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3270 * cbSceneParam._m0[78u].y)) * _3260.y) / cbSceneParam._m0[78u].y)) + _2988;
        _3087 = (exp2(_3286 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3270 * cbSceneParam._m0[78u].z)) * _3260.z) / cbSceneParam._m0[78u].z)) + _2989;
        _3089 = _3269 * _2990;
    }
    else
    {
        _3083 = _2987;
        _3085 = _2988;
        _3087 = _2989;
        _3089 = _2990;
    }
    bool _3296;
    vec4 _3099;
    vec4 _3121;
    float _3123;
    float _3127;
    float _3128;
    float _3129;
    float _3130;
    bool _3140;
    for (;;)
    {
        _3099 = cbMatDynParam._m0[0u];
        float _3101 = roundEven(_3099.y);
        bool _3102 = _3101 == 3.0;
        float _3103 = log2(_3089);
        float _3110 = exp2(_3103 * cbSceneParam._m0[78u].x) * _2959;
        float _3111 = exp2(_3103 * cbSceneParam._m0[78u].y) * _2960;
        float _3112 = exp2(_3103 * cbSceneParam._m0[78u].z) * _2961;
        float _3119 = _1081 + (-0.5);
        _3121 = cbMtdParam._m0[1u];
        _3123 = _3121.y * _3119;
        float _3126 = (_3101 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3127 = _3126 * (_3102 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3083)));
        _3128 = _3126 * (_3102 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3085)));
        _3129 = _3126 * (_3102 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3087)));
        _3130 = _3119 * 0.999000012874603271484375;
        _3140 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3140)
        {
            if ((cbInstanceData._m0[_288 + 7u].x + _3130) < 0.5)
            {
                _3296 = true;
                break;
            }
        }
        uint _3237 = _1130 + uint(_3099.w);
        if ((cbInstanceData._m0[_3237].w < 1.0) && ((cbInstanceData._m0[_3237].w + _3130) < 0.5))
        {
            _3296 = true;
            break;
        }
        if ((_3123 + 1.0) < _3121.x)
        {
            _3296 = true;
            break;
        }
        _3296 = false;
        break;
    }
    float _3501;
    if (_3296)
    {
        discard_state = true;
        _3501 = 0.0;
    }
    else
    {
        _3501 = cbInstanceData._m0[_2962].w;
    }
    SV_Target.x = _3127;
    SV_Target.y = _3128;
    SV_Target.z = _3129;
    SV_Target.w = _3501;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2962].w;
    discard_exit();
}


