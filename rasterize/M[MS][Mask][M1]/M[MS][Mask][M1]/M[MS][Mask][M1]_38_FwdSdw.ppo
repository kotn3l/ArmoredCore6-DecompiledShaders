#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1431;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4039 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4050 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4061 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4072 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _457 = (_450 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _458 = (_450 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _459 = (_450 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    float _463 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _457;
    float _466 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _458;
    float _469 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _459;
    float _476 = ((_457 - _463) * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) + _463;
    float _477 = ((_458 - _466) * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) + _466;
    float _478 = ((_459 - _469) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) + _469;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _563 = _559.z;
    float _572 = ((_542.z - _563) * _450) + _563;
    float _575 = ((((_542.x - _561) * _450) + _561) * 2.0) + (-1.0);
    float _576 = ((((_542.y - _562) * _450) + _562) * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _4083 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _635 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _638 = ((isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : min(_635, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _647 = (_638 - ((((((_625 - _626) * cbMtdParam._m0[24u].z) + _626) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _638))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4104 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _648 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _655 = (_648 * ((_497.x * cbMtdParam._m0[18u].x) - _476)) + _476;
    float _656 = (_648 * ((_497.y * cbMtdParam._m0[18u].y) - _477)) + _477;
    float _657 = (_648 * ((_497.z * cbMtdParam._m0[18u].z) - _478)) + _478;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _671 = _669.x;
    float _672 = 1.0 - _671;
    float _697 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_671 - _672) * cbMtdParam._m0[24u].w) + _672) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4115 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _698 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _706 = ((((cbMtdParam._m0[10u].x - _655) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _698) + _655;
    float _707 = ((((cbMtdParam._m0[10u].y - _656) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _698) + _656;
    float _708 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _657)) * _698) + _657;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _736 = _734.x;
    float _754 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _736) * _450) + _736;
    float _758 = ((_720.x - _754) * cbMtdParam._m0[19u].z) + _754;
    float _760 = _758 - (_758 * _648);
    float _762 = _760 - (_760 * _698);
    float _767 = (((_517.z - _572) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _572;
    float _771 = ((_598.z - _767) * cbMtdParam._m0[19u].w) + _767;
    vec4 _785 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _792 = (_785.x * 2.0) + (-1.0);
    float _793 = (_785.y * 2.0) + (-1.0);
    float _794 = dot(vec2(_792, _793), vec2(_792, _793));
    float _4126 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _802 = (_648 * (_785.z - _771)) + _771;
    float _805 = ((cbMtdParam._m0[23u].x - _802) * _698) + _802;
    vec4 _824 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _830 = (_824.x * 2.0) + (-1.0);
    float _831 = (_824.y * 2.0) + (-1.0);
    float _832 = dot(vec2(_830, _831), vec2(_830, _831));
    float _4137 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _846 = (_575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_517.x * 2.0) + (-1.0)))) + (((_598.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _847 = (_576 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_517.y * 2.0) + (-1.0)))) + (((_598.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _859 = (((_792 - _846) + (cbMtdParam._m0[21u].x * _846)) * _648) + _846;
    float _860 = (((_793 - _847) + (cbMtdParam._m0[21u].x * _847)) * _648) + _847;
    float _861 = (_648 * (sqrt(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) - _582)) + _582;
    float _872 = (((_830 - _859) + (_859 * cbMtdParam._m0[22u].z)) * _698) + _859;
    float _873 = (((_831 - _860) + (_860 * cbMtdParam._m0[22u].z)) * _698) + _860;
    float _874 = ((sqrt(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) - _861) * _698) + _861;
    float _878 = cbMtdParam._m0[22u].x + _598.w;
    float _881 = fma(_874, _255 * NORMAL.x, fma(_873, _262 * TANGENT.x, (_248 * _240) * _872));
    float _884 = fma(_874, _255 * NORMAL.y, fma(_873, _262 * TANGENT.y, (_248 * _241) * _872));
    float _887 = fma(_874, _255 * NORMAL.z, fma(_873, _262 * TANGENT.z, (_248 * _242) * _872));
    float _891 = inversesqrt(dot(vec3(_881, _884, _887), vec3(_881, _884, _887)));
    float _892 = _891 * _881;
    float _893 = _891 * _884;
    float _894 = _891 * _887;
    float _4148 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _895 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _4159 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4170 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4181 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4192 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4203 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _900 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _914 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _964 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _954);
    float _965 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _954);
    float _966 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _954);
    float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
    float _971 = _964 * _970;
    float _972 = _965 * _970;
    float _973 = _966 * _970;
    float _979 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _980 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _998 = fma(_894, cbSceneParam._m0[5u].z, fma(_893, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _892));
    float _1001 = fma(_894, cbSceneParam._m0[6u].z, fma(_893, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _892));
    float _1004 = fma(_894, cbSceneParam._m0[7u].z, fma(_893, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _892));
    uint _1018 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1024 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * cbInstanceData._m0[_1018].x;
    float _1025 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * cbInstanceData._m0[_1018].y;
    float _1026 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * cbInstanceData._m0[_1018].z;
    float _4214 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _4225 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _1030 = 1.0 - _900;
    float _1031 = _1027 * _1030;
    float _1032 = _1028 * _1030;
    float _1033 = _1029 * _1030;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _900;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _900;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _900;
    float _1041 = _1038 + 0.039999999105930328369140625;
    float _1043 = _1039 + 0.039999999105930328369140625;
    float _1044 = _1040 + 0.039999999105930328369140625;
    vec4 _1053 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _979, cbSceneParam._m0[86u].y * _980));
    float _1057 = ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * TEXCOORD_5.w) * _1053.x;
    float _1058 = dot(vec3(_892, _893, _894), vec3(_971, _972, _973));
    float _1061 = _1058 * 2.0;
    float _1065 = (_1061 * _892) - _971;
    float _1066 = (_1061 * _893) - _972;
    float _1067 = (_1061 * _894) - _973;
    float _1071 = abs(dot(vec3(_971, _972, _973), vec3(_892, _893, _894)));
    float _4247 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1073 = sqrt(_895);
    float _1086 = exp2((_1073 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1073 * 3.0));
    float _1092 = (1.0 - _1086) * ((_1073 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1093 = _1086 * _1073;
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1430;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1155 = fma(_1129, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121));
        float _1159 = fma(_1129, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121));
        float _1163 = fma(_1129, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121));
        float _1188 = _1121 + _892;
        float _1189 = _1125 + _893;
        float _1190 = _1129 + _894;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1155;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1159;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1163;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1155 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1159 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1163 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1258 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1224.x + (-0.5));
        float _1260 = _1258 * (_1224.y + (-0.5));
        float _1261 = _1258 * (_1224.z + (-0.5));
        float _1268 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1231.x + (-0.5));
        float _1270 = _1268 * (_1231.y + (-0.5));
        float _1271 = _1268 * (_1231.z + (-0.5));
        float _1278 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1238.x + (-0.5));
        float _1280 = _1278 * (_1238.y + (-0.5));
        float _1281 = _1278 * (_1238.z + (-0.5));
        float _1288 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1245.x + (-0.5));
        float _1290 = _1288 * (_1245.y + (-0.5));
        float _1291 = _1288 * (_1245.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1312 = (dot(vec3(_892, _893, _894), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1322 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4295 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1324 + 1.0))) + _1329) * _1292;
        float _1339 = _1260 * 0.5;
        float _1340 = _1270 * 0.5;
        float _1341 = _1280 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_892, _893, _894), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4328 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1366 + 1.0))) + _1371) * _1293;
        float _1381 = _1261 * 0.5;
        float _1382 = _1271 * 0.5;
        float _1383 = _1281 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_892, _893, _894), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4361 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1408 + 1.0))) + _1413) * _1294;
        _1430 = _1261;
        _1432 = _1260;
        _1433 = _1259;
        _1434 = _1271;
        _1435 = _1270;
        _1436 = _1269;
        _1437 = _1281;
        _1438 = _1280;
        _1439 = _1279;
        _1440 = _1294;
        _1441 = _1293;
        _1442 = _1292;
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1431;
        _1432 = _1431;
        _1433 = _1431;
        _1434 = _1431;
        _1435 = _1431;
        _1436 = _1431;
        _1437 = _1431;
        _1438 = _1431;
        _1439 = _1431;
        _1440 = _1431;
        _1441 = _1431;
        _1442 = _1431;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1470 = fma(_1129, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121));
        float _1474 = fma(_1129, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121));
        float _1478 = fma(_1129, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121));
        float _1501 = _1121 + _892;
        float _1502 = _1125 + _893;
        float _1503 = _1129 + _894;
        float _1513 = fma(_1503, cbModelParam._m0[30u].z, fma(_1502, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1501)) - _1470;
        float _1514 = fma(_1503, cbModelParam._m0[31u].z, fma(_1502, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1501)) - _1474;
        float _1515 = fma(_1503, cbModelParam._m0[32u].z, fma(_1502, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1501)) - _1478;
        float _1519 = inversesqrt(dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515)));
        float _1532 = ((_1519 * _1513) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1470 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1519 * _1514) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1474 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1519 * _1515) / cbModelParam._m0[35u].z) + ((((((_1478 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        float _1569 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1536.x + (-0.5));
        float _1571 = _1569 * (_1536.y + (-0.5));
        float _1572 = _1569 * (_1536.z + (-0.5));
        float _1579 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1543.x + (-0.5));
        float _1581 = _1579 * (_1543.y + (-0.5));
        float _1582 = _1579 * (_1543.z + (-0.5));
        float _1589 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1550.x + (-0.5));
        float _1591 = _1589 * (_1550.y + (-0.5));
        float _1592 = _1589 * (_1550.z + (-0.5));
        float _1599 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1557.x + (-0.5));
        float _1601 = _1599 * (_1557.y + (-0.5));
        float _1602 = _1599 * (_1557.z + (-0.5));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = _1570 * 0.5;
        float _1607 = _1580 * 0.5;
        float _1608 = _1590 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_892, _893, _894), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4402 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4413 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4424 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_1633 + 1.0))) + _1638) * _1603;
        float _1648 = _1571 * 0.5;
        float _1649 = _1581 * 0.5;
        float _1650 = _1591 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_892, _893, _894), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4457 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1675 + 1.0))) + _1680) * _1604;
        float _1690 = _1572 * 0.5;
        float _1691 = _1582 * 0.5;
        float _1692 = _1592 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_892, _893, _894), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4490 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1717 + 1.0))) + _1722) * _1605;
        _1739 = _1572;
        _1740 = _1571;
        _1741 = _1570;
        _1742 = _1582;
        _1743 = _1581;
        _1744 = _1580;
        _1745 = _1592;
        _1746 = _1591;
        _1747 = _1590;
        _1748 = _1605;
        _1749 = _1604;
        _1750 = _1603;
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
    }
    else
    {
        _1739 = _1431;
        _1740 = _1431;
        _1741 = _1431;
        _1742 = _1431;
        _1743 = _1431;
        _1744 = _1431;
        _1745 = _1431;
        _1746 = _1431;
        _1747 = _1431;
        _1748 = _1431;
        _1749 = _1431;
        _1750 = _1431;
        _1751 = 0.0;
        _1752 = 0.0;
        _1753 = 0.0;
    }
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1443)) + _1443;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1444)) + _1444;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1445)) + _1445;
    float _1786 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1763));
    float _1807 = _1065 * 0.5;
    float _1808 = _1066 * 0.5;
    float _1809 = _1067 * 0.5;
    float _1810 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1813 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1816 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1850;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1823 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1430, _1434, _1437, _1440));
        float _1827 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1831 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1838 = dot(vec4(cbModelParam._m0[39u]), vec4(_1807, _1808, _1809, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1861;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1852 = dot(vec4(cbModelParam._m0[40u]), vec4(_1807, _1808, _1809, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1865 = (_1861 * cbModelParam._m0[1u].x) + (_1850 * (1.0 - cbModelParam._m0[1u].x));
    float _1875 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _895);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1875 : min(cbModelParam._m0[25u].z, _1875));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1923 = fma(_1129, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121)) + cbModelParam._m0[13u].w;
        float _1927 = fma(_1129, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121)) + cbModelParam._m0[14u].w;
        float _1931 = fma(_1129, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121)) + cbModelParam._m0[15u].w;
        float _1934 = fma(_1067, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065));
        float _1937 = fma(_1067, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065));
        float _1940 = fma(_1067, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065));
        float _1968;
        if (_1934 > 0.0)
        {
            _1968 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1968 = frontier_phi_14_12_ladder;
        }
        float _2139;
        if (_1937 > 0.0)
        {
            _2139 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2139 = frontier_phi_23_19_ladder;
        }
        float _2434;
        if (_1940 > 0.0)
        {
            _2434 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2434 = frontier_phi_35_30_ladder;
        }
        float _2436 = isnan(_2139) ? _1968 : (isnan(_1968) ? _2139 : min(_1968, _2139));
        float _2437 = isnan(_2434) ? _2436 : (isnan(_2436) ? _2434 : min(_2436, _2434));
        float _2441 = (_2437 * _1934) + _1923;
        float _2442 = (_2437 * _1937) + _1927;
        float _2443 = (_2437 * _1940) + _1931;
        float _2444 = _2437 * 9.9999997473787516355514526367188e-05;
        float _2446 = (-1.0) - _2444;
        float _2448 = _2444 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2443 > _2448) || ((_2443 < _2446) || ((_2442 > _2448) || ((_2442 < _2446) || ((_2441 < _2446) || (_2441 > _2448))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2443, cbModelParam._m0[9u].z, fma(_2442, cbModelParam._m0[9u].y, _2441 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2443, cbModelParam._m0[10u].z, fma(_2442, cbModelParam._m0[10u].y, _2441 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2443, cbModelParam._m0[11u].z, fma(_2442, cbModelParam._m0[11u].y, _2441 * cbModelParam._m0[11u].x))), _1876);
            frontier_phi_13_35_ladder = _2588.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2588.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2588.x * cbModelParam._m0[1u].y;
        }
        _1956 = frontier_phi_13_35_ladder_2;
        _1958 = frontier_phi_13_35_ladder_1;
        _1960 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1065, _1066, _1067), _1876);
        _1956 = _1944.x * cbModelParam._m0[1u].y;
        _1958 = _1944.y * cbModelParam._m0[1u].y;
        _1960 = _1944.z * cbModelParam._m0[1u].y;
    }
    float _1964 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _895);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1964 : min(cbModelParam._m0[25u].w, _1964));
    float _2054;
    float _2056;
    float _2058;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2018 = fma(_1129, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121)) + cbModelParam._m0[21u].w;
        float _2022 = fma(_1129, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121)) + cbModelParam._m0[22u].w;
        float _2026 = fma(_1129, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121)) + cbModelParam._m0[23u].w;
        float _2029 = fma(_1067, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065));
        float _2032 = fma(_1067, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065));
        float _2035 = fma(_1067, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065));
        float _2144;
        if (_2029 > 0.0)
        {
            _2144 = abs((1.0 - _2018) / _2029);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2018 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2144 = frontier_phi_25_21_ladder;
        }
        float _2461;
        if (_2032 > 0.0)
        {
            _2461 = abs((1.0 - _2022) / _2032);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2022 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2461 = frontier_phi_37_32_ladder;
        }
        float _2799;
        if (_2035 > 0.0)
        {
            _2799 = abs((1.0 - _2026) / _2035);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2026 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2799 = frontier_phi_47_44_ladder;
        }
        float _2801 = isnan(_2461) ? _2144 : (isnan(_2144) ? _2461 : min(_2144, _2461));
        float _2802 = isnan(_2799) ? _2801 : (isnan(_2801) ? _2799 : min(_2801, _2799));
        float _2806 = (_2802 * _2029) + _2018;
        float _2807 = (_2802 * _2032) + _2022;
        float _2808 = (_2802 * _2035) + _2026;
        float _2809 = _2802 * 9.9999997473787516355514526367188e-05;
        float _2810 = (-1.0) - _2809;
        float _2812 = _2809 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2808 > _2812) || ((_2808 < _2810) || ((_2807 > _2812) || ((_2807 < _2810) || ((_2806 < _2810) || (_2806 > _2812))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2930 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2808, cbModelParam._m0[17u].z, fma(_2807, cbModelParam._m0[17u].y, _2806 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2808, cbModelParam._m0[18u].z, fma(_2807, cbModelParam._m0[18u].y, _2806 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2808, cbModelParam._m0[19u].z, fma(_2807, cbModelParam._m0[19u].y, _2806 * cbModelParam._m0[19u].x))), _1965);
            frontier_phi_22_47_ladder = _2930.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2930.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2930.x * cbModelParam._m0[1u].z;
        }
        _2054 = frontier_phi_22_47_ladder_2;
        _2056 = frontier_phi_22_47_ladder_1;
        _2058 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2038 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1065, _1066, _1067), _1965);
        _2054 = _2038.x * cbModelParam._m0[1u].z;
        _2056 = _2038.y * cbModelParam._m0[1u].z;
        _2058 = _2038.z * cbModelParam._m0[1u].z;
    }
    float _2071 = (((_1092 * _1041) + _1093) * _1057) * ((cbModelParam._m0[1u].w * (_2054 - _1956)) + _1956);
    float _2073 = (((_1092 * _1043) + _1093) * _1057) * ((cbModelParam._m0[1u].w * (_2056 - _1958)) + _1958);
    float _2075 = (((_1092 * _1044) + _1093) * _1057) * ((cbModelParam._m0[1u].w * (_2058 - _1960)) + _1960);
    float _2078 = fma(_2075, cbSceneParam._m0[89u].z, fma(_2073, cbSceneParam._m0[89u].y, _2071 * cbSceneParam._m0[89u].x));
    float _2081 = fma(_2075, cbSceneParam._m0[90u].z, fma(_2073, cbSceneParam._m0[90u].y, _2071 * cbSceneParam._m0[90u].x));
    float _2084 = fma(_2075, cbSceneParam._m0[91u].z, fma(_2073, cbSceneParam._m0[91u].y, _2071 * cbSceneParam._m0[91u].x));
    float _2118 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2122 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2126 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2130 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2131 = _2118 / _2130;
    float _2132 = _2122 / _2130;
    float _2133 = _2126 / _2130;
    float _2280;
    float _2281;
    float _2282;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2160 = ((uint(_2133 > cbSceneParam._m0[59u].y) + uint(_2133 > cbSceneParam._m0[59u].x)) + uint(_2133 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2161 = _2160 + 43u;
        uint _2169 = _2160 + 44u;
        uint _2177 = _2160 + 45u;
        uint _2185 = _2160 + 46u;
        float _2196 = fma(_2130, cbSceneParam._m0[_2161].w, fma(_2126, cbSceneParam._m0[_2161].z, fma(_2122, cbSceneParam._m0[_2161].y, _2118 * cbSceneParam._m0[_2161].x)));
        float _2200 = fma(_2130, cbSceneParam._m0[_2169].w, fma(_2126, cbSceneParam._m0[_2169].z, fma(_2122, cbSceneParam._m0[_2169].y, _2118 * cbSceneParam._m0[_2169].x)));
        float _2208 = fma(_2130, cbSceneParam._m0[_2185].w, fma(_2126, cbSceneParam._m0[_2185].z, fma(_2122, cbSceneParam._m0[_2185].y, _2118 * cbSceneParam._m0[_2185].x)));
        float _2213 = cbSceneParam._m0[33u].z * _2208;
        float _2215 = cbSceneParam._m0[33u].w * _2208;
        float _2218 = fma(_2130, cbSceneParam._m0[_2177].w, fma(_2126, cbSceneParam._m0[_2177].z, fma(_2122, cbSceneParam._m0[_2177].y, _2118 * cbSceneParam._m0[_2177].x))) / _2208;
        float _2266 = (cbSceneParam._m0[33u].x - sqrt(((_2132 * _2132) + (_2131 * _2131)) + (_2133 * _2133))) * cbSceneParam._m0[33u].y;
        float _4616 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2273 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2213 + _2196) / _2208, (_2215 + _2200) / _2208), _2218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2215 + _2196) / _2208, (_2200 - _2213) / _2208), _2218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 - _2213) / _2208, (_2200 - _2215) / _2208), _2218), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 - _2215) / _2208, (_2213 + _2200) / _2208), _2218), 0.0)).x), vec4(0.25)));
        _2280 = 1.0 - (_2273 * cbSceneParam._m0[34u].x);
        _2281 = 1.0 - (_2273 * cbSceneParam._m0[34u].y);
        _2282 = 1.0 - (_2273 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2280 = 1.0;
        _2281 = 1.0;
        _2282 = 1.0;
    }
    float _2346;
    float _2348;
    float _2350;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2334 = fma(_2130, cbSceneParam._m0[63u].w, fma(_2126, cbSceneParam._m0[63u].z, fma(_2122, cbSceneParam._m0[63u].y, _2118 * cbSceneParam._m0[63u].x)));
        float _2335 = fma(_2130, cbSceneParam._m0[60u].w, fma(_2126, cbSceneParam._m0[60u].z, fma(_2122, cbSceneParam._m0[60u].y, _2118 * cbSceneParam._m0[60u].x))) / _2334;
        float _2336 = fma(_2130, cbSceneParam._m0[61u].w, fma(_2126, cbSceneParam._m0[61u].z, fma(_2122, cbSceneParam._m0[61u].y, _2118 * cbSceneParam._m0[61u].x))) / _2334;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2335 >= cbSceneParam._m0[64u].x) && (_2336 >= cbSceneParam._m0[64u].y)) && (_2335 <= cbSceneParam._m0[64u].z)) && (_2336 <= cbSceneParam._m0[64u].w))
        {
            float _2474 = fma(_2130, cbSceneParam._m0[62u].w, fma(_2126, cbSceneParam._m0[62u].z, fma(_2122, cbSceneParam._m0[62u].y, _2118 * cbSceneParam._m0[62u].x))) / _2334;
            float _2478 = isnan(cbSceneParam._m0[41u].w) ? _2474 : (isnan(_2474) ? cbSceneParam._m0[41u].w : max(_2474, cbSceneParam._m0[41u].w));
            float _2521 = (cbSceneParam._m0[33u].x - sqrt(((_2132 * _2132) + (_2131 * _2131)) + (_2133 * _2133))) * cbSceneParam._m0[33u].y;
            float _4632 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
            float _2528 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2335, cbSceneParam._m0[33u].w + _2336), _2478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2335, _2336 - cbSceneParam._m0[33u].z), _2478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2335 - cbSceneParam._m0[33u].z, _2336 - cbSceneParam._m0[33u].w), _2478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2335 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2336), _2478), 0.0)).x), vec4(0.25)));
            float _2532 = 1.0 - (_2528 * cbSceneParam._m0[34u].x);
            float _2533 = 1.0 - (_2528 * cbSceneParam._m0[34u].y);
            float _2534 = 1.0 - (_2528 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2534) ? _2282 : (isnan(_2282) ? _2534 : min(_2282, _2534));
            frontier_phi_34_33_ladder_1 = isnan(_2533) ? _2281 : (isnan(_2281) ? _2533 : min(_2281, _2533));
            frontier_phi_34_33_ladder_2 = isnan(_2532) ? _2280 : (isnan(_2280) ? _2532 : min(_2280, _2532));
        }
        else
        {
            frontier_phi_34_33_ladder = _2282;
            frontier_phi_34_33_ladder_1 = _2281;
            frontier_phi_34_33_ladder_2 = _2280;
        }
        _2346 = frontier_phi_34_33_ladder_2;
        _2348 = frontier_phi_34_33_ladder_1;
        _2350 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2346 = _2280;
        _2348 = _2281;
        _2350 = _2282;
    }
    uvec4 _2355 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2357 = _2355.x * 14u;
    uint _2358 = _2357 + 13u;
    float _2365 = _1057 + (-1.0);
    float _2370 = (cbLight._m0[_2358].x * _2365) + 1.0;
    float _2371 = (cbLight._m0[_2358].y * _2365) + 1.0;
    float _2372 = (cbLight._m0[_2358].z * _2365) + 1.0;
    float _2373 = (cbLight._m0[_2358].w * _2365) + 1.0;
    uint _2374 = _2357 + 5u;
    float _2380 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
    uint _2384 = _2357 + 4u;
    float _2393 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
    uint _2397 = _2357 | 1u;
    float _2408 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_892, _893, _894));
    float _2411 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_892, _893, _894));
    float _4668 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _4679 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2416 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * 0.3183098733425140380859375;
    float _2418 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * 0.3183098733425140380859375;
    float _2425 = ((cbLight._m0[_2374].x * _2380) * _2418) + (((cbLight._m0[_2384].x * _2346) * _2393) * _2416);
    float _2426 = ((_2380 * cbLight._m0[_2374].y) * _2418) + (((cbLight._m0[_2384].y * _2348) * _2393) * _2416);
    float _2427 = ((_2380 * cbLight._m0[_2374].z) * _2418) + (((cbLight._m0[_2384].z * _2350) * _2393) * _2416);
    uvec4 _2431 = floatBitsToUint(cbLight._m0[_2357 + 12u]);
    bool _2433 = _2431.x == 0u;
    float _2535;
    float _2537;
    float _2539;
    if (_2433)
    {
        _2535 = _2425;
        _2537 = _2426;
        _2539 = _2427;
    }
    else
    {
        uint _2543 = _2357 + 6u;
        float _2559 = (dot(vec3(cbLight._m0[_2357 + 2u].xyz), vec3(_892, _893, _894)) * 0.5) + 0.5;
        float _2560 = _2559 * _2559;
        float _4690 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2561 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2562 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2535 = (((cbLight._m0[_2543].x * 0.3183098733425140380859375) * _2561) * _2562) + _2425;
        _2537 = (((cbLight._m0[_2543].y * 0.3183098733425140380859375) * _2561) * _2562) + _2426;
        _2539 = (((cbLight._m0[_2543].z * 0.3183098733425140380859375) * _2561) * _2562) + _2427;
    }
    bool _2542 = _2431.y == 0u;
    float _2597;
    float _2599;
    float _2601;
    if (_2542)
    {
        _2597 = _2535;
        _2599 = _2537;
        _2601 = _2539;
    }
    else
    {
        uint _2770 = _2357 + 7u;
        float _2786 = (dot(vec3(cbLight._m0[_2357 + 3u].xyz), vec3(_892, _893, _894)) * 0.5) + 0.5;
        float _2787 = _2786 * _2786;
        float _4706 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2788 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2789 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2597 = (((cbLight._m0[_2770].x * 0.3183098733425140380859375) * _2788) * _2789) + _2535;
        _2599 = (((cbLight._m0[_2770].y * 0.3183098733425140380859375) * _2788) * _2789) + _2537;
        _2601 = (((cbLight._m0[_2770].z * 0.3183098733425140380859375) * _2788) * _2789) + _2539;
    }
    uint _2604 = _2357 + 8u;
    float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _895) * 0.949999988079071044921875);
    float _2618 = _2617 * _2617;
    float _2619 = cbLight._m0[_2357].x + _971;
    float _2620 = cbLight._m0[_2357].y + _972;
    float _2621 = cbLight._m0[_2357].z + _973;
    float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
    float _2626 = _2625 * _2619;
    float _2627 = _2625 * _2620;
    float _2628 = _2625 * _2621;
    float _2629 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2357].xyz));
    float _4722 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2632 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _4733 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _2633 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2634 = dot(vec3(_892, _893, _894), vec3(_2626, _2627, _2628));
    float _4744 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2638 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2626, _2627, _2628));
    float _4755 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2642 = _2618 * _2618;
    float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
    float _2654 = exp2(log2(1.0 - (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) * 5.0);
    float _2655 = 0.959999978542327880859375 - _1038;
    float _2657 = 0.959999978542327880859375 - _1039;
    float _2658 = 0.959999978542327880859375 - _1040;
    float _2665 = 1.0 - _2618;
    float _2676 = (0.5 / (((_2633 * ((_2632 * _2665) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2665) + _2618) * _2632))) * _2632;
    float _4766 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2678 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
    uint _2692 = _2357 + 9u;
    float _2703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _895) * 0.949999988079071044921875);
    float _2704 = _2703 * _2703;
    float _2705 = cbLight._m0[_2397].x + _971;
    float _2706 = cbLight._m0[_2397].y + _972;
    float _2707 = cbLight._m0[_2397].z + _973;
    float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
    float _2712 = _2711 * _2705;
    float _2713 = _2711 * _2706;
    float _2714 = _2711 * _2707;
    float _2715 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2397].xyz));
    float _4777 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2718 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2719 = dot(vec3(_892, _893, _894), vec3(_2712, _2713, _2714));
    float _4788 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2722 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
    float _2723 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2712, _2713, _2714));
    float _4799 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2727 = _2704 * _2704;
    float _2731 = ((_2722 * _2722) * (_2727 + (-1.0))) + 1.0;
    float _2738 = exp2(log2(1.0 - (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) * 5.0);
    float _2745 = 1.0 - _2704;
    float _2755 = (0.5 / (((_2633 * ((_2718 * _2745) + _2704)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2745) + _2704) * _2718))) * _2718;
    float _4810 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2757 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2727 / ((_2731 * _2731) * 3.141590118408203125));
    float _2767 = (((((_2738 * _2655) + _1041) * cbLight._m0[_2692].x) * _2757) * _2380) + ((((cbLight._m0[_2604].x * _2346) * ((_2654 * _2655) + _1041)) * _2678) * _2393);
    float _2768 = (((((_2738 * _2657) + _1043) * cbLight._m0[_2692].y) * _2757) * _2380) + ((((cbLight._m0[_2604].y * _2348) * ((_2654 * _2657) + _1043)) * _2678) * _2393);
    float _2769 = (((((_2738 * _2658) + _1044) * cbLight._m0[_2692].z) * _2757) * _2380) + ((((cbLight._m0[_2604].z * _2350) * ((_2654 * _2658) + _1044)) * _2678) * _2393);
    float _2825;
    float _2827;
    float _2829;
    if (_2433)
    {
        _2825 = _2767;
        _2827 = _2768;
        _2829 = _2769;
    }
    else
    {
        uint _2831 = _2357 + 2u;
        uint _2835 = _2357 + 10u;
        float _2849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2831].w)) * _895) * 0.949999988079071044921875);
        float _2850 = _2849 * _2849;
        float _2851 = cbLight._m0[_2831].x + _971;
        float _2852 = cbLight._m0[_2831].y + _972;
        float _2853 = cbLight._m0[_2831].z + _973;
        float _2857 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
        float _2858 = _2857 * _2851;
        float _2859 = _2857 * _2852;
        float _2860 = _2857 * _2853;
        float _2861 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2831].xyz));
        float _4821 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2864 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2865 = dot(vec3(_892, _893, _894), vec3(_2858, _2859, _2860));
        float _4832 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2868 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2869 = dot(vec3(cbLight._m0[_2831].xyz), vec3(_2858, _2859, _2860));
        float _4843 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2873 = _2850 * _2850;
        float _2877 = ((_2868 * _2868) * (_2873 + (-1.0))) + 1.0;
        float _2884 = exp2(log2(1.0 - (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) * 5.0);
        float _2891 = 1.0 - _2850;
        float _2901 = (0.5 / (((_2633 * ((_2864 * _2891) + _2850)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _2891) + _2850) * _2864))) * _2864;
        float _4854 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2903 = (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2873 / ((_2877 * _2877) * 3.141590118408203125));
        float _2904 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2825 = (((((_2884 * _2655) + _1041) * cbLight._m0[_2835].x) * _2903) * _2904) + _2767;
        _2827 = (((((_2884 * _2657) + _1043) * cbLight._m0[_2835].y) * _2903) * _2904) + _2768;
        _2829 = (((((_2884 * _2658) + _1044) * cbLight._m0[_2835].z) * _2903) * _2904) + _2769;
    }
    float _2935;
    float _2937;
    float _2939;
    if (_2542)
    {
        _2935 = _2825;
        _2937 = _2827;
        _2939 = _2829;
    }
    else
    {
        uint _2946 = _2357 + 3u;
        uint _2950 = _2357 + 11u;
        float _2964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2946].w)) * _895) * 0.949999988079071044921875);
        float _2965 = _2964 * _2964;
        float _2966 = cbLight._m0[_2946].x + _971;
        float _2967 = cbLight._m0[_2946].y + _972;
        float _2968 = cbLight._m0[_2946].z + _973;
        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
        float _2973 = _2972 * _2966;
        float _2974 = _2972 * _2967;
        float _2975 = _2972 * _2968;
        float _2976 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2946].xyz));
        float _4870 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2979 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
        float _2980 = dot(vec3(_892, _893, _894), vec3(_2973, _2974, _2975));
        float _4881 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2983 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
        float _2984 = dot(vec3(cbLight._m0[_2946].xyz), vec3(_2973, _2974, _2975));
        float _4892 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2988 = _2965 * _2965;
        float _2992 = ((_2983 * _2983) * (_2988 + (-1.0))) + 1.0;
        float _2999 = exp2(log2(1.0 - (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) * 5.0);
        float _3006 = 1.0 - _2965;
        float _3016 = (0.5 / (((_2633 * ((_2979 * _3006) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2633 * _3006) + _2965) * _2979))) * _2979;
        float _4903 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3018 = (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2988 / ((_2992 * _2992) * 3.141590118408203125));
        float _3019 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
        _2935 = (((((_2999 * _2655) + _1041) * cbLight._m0[_2950].x) * _3018) * _3019) + _2825;
        _2937 = (((((_2999 * _2657) + _1043) * cbLight._m0[_2950].y) * _3018) * _3019) + _2827;
        _2939 = (((((_2999 * _2658) + _1044) * cbLight._m0[_2950].z) * _3018) * _3019) + _2829;
    }
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    if (_2355.y == 0u)
    {
        uvec4 _3040 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3041 = _3040.x;
        uint _3052 = uint((float(_3040.y) * floor(float(uint(cbSceneParam._m0[85u].y * _980) / _3041))) + floor(float(uint(cbSceneParam._m0[85u].x * _979) / _3041)));
        float _3062 = (log2(_2133 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3063 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
        uint _3066 = uint(isnan(14.0) ? _3063 : (isnan(_3063) ? 14.0 : min(_3063, 14.0)));
        uvec4 _3071 = texelFetch(g_lightClusterGridBuffer, int(((_3066 << 2u) + (_3052 << 6u)) >> 2u));
        uint _3072 = _3071.x;
        uint _3073 = _3040.z;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        if (((((1u << ((_3073 >> 4u) & 15u)) + 4294967295u) & _3072) == 0u) || ((_3073 & 240u) == 0u))
        {
            _3152 = 0.0;
            _3154 = 0.0;
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
            _3162 = 0.0;
        }
        else
        {
            float _3153;
            float _3155;
            float _3157;
            float _3159;
            float _3161;
            float _3163;
            float _3297 = 0.0;
            float _3298 = 0.0;
            float _3299 = 0.0;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            uint _3303 = 0u;
            uint _3312;
            bool _3313;
            for (;;)
            {
                _3312 = texelFetch(g_lightClassification, int((((_3066 << 5u) + (_3052 << 9u)) + (_3303 << 2u)) >> 2u)).x;
                _3313 = _3312 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3313)
                {
                    frontier_phi_66_pred = _3302;
                    frontier_phi_66_pred_1 = _3301;
                    frontier_phi_66_pred_2 = _3300;
                    frontier_phi_66_pred_3 = _3299;
                    frontier_phi_66_pred_4 = _3298;
                    frontier_phi_66_pred_5 = _3297;
                }
                else
                {
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    uint _3427;
                    _3421 = _3297;
                    _3422 = _3298;
                    _3423 = _3299;
                    _3424 = _3300;
                    _3425 = _3301;
                    _3426 = _3302;
                    _3427 = _3312;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    for (;;)
                    {
                        uint _3431 = uint(findLSB(_3427)) + (_3303 << 5u);
                        uint _3428 = (_3427 + 4294967295u) & _3427;
                        uint _3433 = _3431 * 48u;
                        vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 3u)).x));
                        uint _3453 = (_3431 * 48u) + 4u;
                        vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3453)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3453 + 3u)).x));
                        uint _3472 = (_3431 * 48u) + 8u;
                        vec3 _3483 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3472)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 2u)).x));
                        float _3487 = _3447.x - _2131;
                        float _3488 = _3447.y - _2132;
                        float _3489 = _3447.z - _2133;
                        float _3490 = dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489));
                        float _3493 = inversesqrt(_3490);
                        float _3494 = _3493 * _3487;
                        float _3495 = _3493 * _3488;
                        float _3496 = _3493 * _3489;
                        float _3497 = dot(vec3(_998, _1001, _1004), vec3(_3494, _3495, _3496));
                        float _3502 = 1.0 - (_3490 * _3447.w);
                        float _4929 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3503 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3504 = sqrt(_3490) * _3466.w;
                        float _3507 = 1.39999997615814208984375 / (_3504 + 1.39999997615814208984375);
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3497) + _3508;
                        float _3514 = _3504 * _3504;
                        float _3518 = ((isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0))) * _3503) / ((_3514 * 0.699999988079071044921875) + 1.0);
                        float _3522 = (-0.0) - _2131;
                        float _3523 = (-0.0) - _2132;
                        float _3524 = (-0.0) - _2133;
                        float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                        float _3529 = _3528 * _3522;
                        float _3530 = _3528 * _3523;
                        float _3531 = _3528 * _3524;
                        float _3538 = exp2(log2(1.0 / ((_3514 * 3.5) + 5.0)) * 0.25);
                        float _3539 = 1.0 - _1073;
                        float _3546 = sqrt(1.0 - ((1.0 - (_3539 * _3539)) * (1.0 - (_3538 * _3538))));
                        float _3547 = _3546 * _3546;
                        float _3548 = _3547 * _3547;
                        float _3549 = _3529 + _3494;
                        float _3550 = _3530 + _3495;
                        float _3551 = _3531 + _3496;
                        float _3555 = inversesqrt(dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551)));
                        float _3559 = dot(vec3(_998, _1001, _1004), vec3(_3529, _3530, _3531));
                        float _4945 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3562 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                        float _3563 = dot(vec3(_998, _1001, _1004), vec3(_3555 * _3549, _3555 * _3550, _3555 * _3551));
                        float _4956 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3566 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                        float _3570 = ((_3566 * _3566) * (_3548 + (-1.0))) + 1.0;
                        float _3571 = _3507 * _3547;
                        float _3572 = _3571 * _3571;
                        float _3575 = ((1.0 - _3572) * _3497) + _3572;
                        float _4967 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3576 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                        float _3577 = 1.0 - _3547;
                        float _3587 = (0.5 / (((_3576 * ((_3562 * _3577) + _3547)) + 9.9999999392252902907785028219223e-09) + (((_3576 * _3577) + _3547) * _3562))) * _3576;
                        float _4978 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3598 = (((_3548 * 3.1415927410125732421875) * (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0)))) / ((_3570 * _3570) * ((_3514 * 2.1991131305694580078125) + 3.141590118408203125))) * _3503;
                        _3356 = (_3518 * _3466.x) + _3424;
                        _3357 = (_3518 * _3466.y) + _3425;
                        _3358 = (_3518 * _3466.z) + _3426;
                        _3353 = (_3598 * _3483.x) + _3421;
                        _3354 = (_3598 * _3483.y) + _3422;
                        _3355 = (_3598 * _3483.z) + _3423;
                        if (_3428 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3421 = _3353;
                            _3422 = _3354;
                            _3423 = _3355;
                            _3424 = _3356;
                            _3425 = _3357;
                            _3426 = _3358;
                            _3427 = _3428;
                        }
                    }
                    frontier_phi_66_pred = _3358;
                    frontier_phi_66_pred_1 = _3357;
                    frontier_phi_66_pred_2 = _3356;
                    frontier_phi_66_pred_3 = _3355;
                    frontier_phi_66_pred_4 = _3354;
                    frontier_phi_66_pred_5 = _3353;
                }
                _3163 = frontier_phi_66_pred;
                _3161 = frontier_phi_66_pred_1;
                _3159 = frontier_phi_66_pred_2;
                _3157 = frontier_phi_66_pred_3;
                _3155 = frontier_phi_66_pred_4;
                _3153 = frontier_phi_66_pred_5;
                uint _3304 = _3303 + 1u;
                if (_3304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3297 = _3153;
                    _3298 = _3155;
                    _3299 = _3157;
                    _3300 = _3159;
                    _3301 = _3161;
                    _3302 = _3163;
                    _3303 = _3304;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3152 = _3153;
            _3154 = _3155;
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
            _3162 = _3163;
        }
        uvec4 _3166 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3167 = _3166.z;
        uint _3169 = (_3167 >> 8u) & 15u;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        float _3275;
        if (((4294967295u << _3169) & _3072) == 0u)
        {
            _3265 = _3152;
            _3267 = _3154;
            _3269 = _3156;
            _3271 = _3158;
            _3273 = _3160;
            _3275 = _3162;
        }
        else
        {
            float _3290 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
            float _3291 = _3290 * _2131;
            float _3292 = _3290 * _2132;
            float _3293 = _3290 * _2133;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3169 < ((_3167 >> 12u) & 15u))
            {
                float _3266;
                float _3268;
                float _3270;
                float _3272;
                float _3274;
                float _3276;
                float _3404 = _3152;
                float _3405 = _3154;
                float _3406 = _3156;
                float _3407 = _3158;
                float _3408 = _3160;
                float _3409 = _3162;
                uint _3410 = _3169;
                uint _3419;
                bool _3420;
                for (;;)
                {
                    _3419 = texelFetch(g_lightClassification, int((((_3066 << 5u) + (_3052 << 9u)) + (_3410 << 2u)) >> 2u)).x;
                    _3420 = _3419 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3420)
                    {
                        frontier_phi_72_pred = _3409;
                        frontier_phi_72_pred_1 = _3408;
                        frontier_phi_72_pred_2 = _3407;
                        frontier_phi_72_pred_3 = _3406;
                        frontier_phi_72_pred_4 = _3405;
                        frontier_phi_72_pred_5 = _3404;
                    }
                    else
                    {
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3616 = _3404;
                        float _3617 = _3405;
                        float _3618 = _3406;
                        float _3619 = _3407;
                        float _3620 = _3408;
                        float _3621 = _3409;
                        uint _3622 = _3419;
                        uint _3623;
                        vec4 _3648;
                        float _3649;
                        vec4 _3664;
                        vec3 _3676;
                        vec4 _3691;
                        vec4 _3706;
                        float _3752;
                        bool _3753;
                        for (;;)
                        {
                            uint _3633 = ((_3410 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3622));
                            _3623 = (_3622 + 4294967295u) & _3622;
                            uint _3635 = _3633 * 40u;
                            _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            _3649 = _3648.w;
                            uint _3651 = (_3633 * 40u) + 4u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            uint _3666 = (_3633 * 40u) + 8u;
                            _3676 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x));
                            uint _3678 = (_3633 * 40u) + 16u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3693 = (_3633 * 40u) + 20u;
                            _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            uint _3708 = (_3633 * 40u) + 24u;
                            vec4 _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3727 = (_3633 * 40u) + 28u;
                            vec4 _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            _3752 = fma(_2133, _3740.z, fma(_2132, _3740.y, _3740.x * _2131)) + _3740.w;
                            _3753 = !((fma(_2133, _3721.z, fma(_2132, _3721.y, _3721.x * _2131)) + _3721.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3753)
                            {
                                float _3780 = _3648.x - _2131;
                                float _3781 = _3648.y - _2132;
                                float _3782 = _3648.z - _2133;
                                float _3783 = dot(vec3(_3780, _3781, _3782), vec3(_3780, _3781, _3782));
                                float _3786 = inversesqrt(_3783);
                                float _3787 = _3786 * _3780;
                                float _3788 = _3786 * _3781;
                                float _3789 = _3786 * _3782;
                                float _3793 = 1.0 - (_3783 / (_3649 * _3649));
                                float _4989 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3794 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3798 = sqrt(_3783) * _3664.w;
                                float _3800 = 1.39999997615814208984375 / (_3798 + 1.39999997615814208984375);
                                float _3801 = _3800 * _3800;
                                float _3804 = ((1.0 - _3801) * dot(vec3(_3787, _3788, _3789), vec3(_998, _1001, _1004))) + _3801;
                                float _3807 = _3798 * _3798;
                                float _3811 = (fma(_2133, _3691.z, fma(_2132, _3691.y, _3691.x * _2131)) + _3691.w) / _3752;
                                float _3812 = (fma(_2133, _3706.z, fma(_2132, _3706.y, _3706.x * _2131)) + _3706.w) / _3752;
                                float _3816 = 1.0 - dot(vec2(_3811, _3812), vec2(_3811, _3812));
                                float _5005 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3817 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                                float _3818 = _3817 * (((isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0))) * _3794) / ((_3807 * 0.699999988079071044921875) + 1.0));
                                float _3830 = exp2(log2(1.0 / ((_3807 * 3.5) + 5.0)) * 0.25);
                                float _3831 = 1.0 - _1073;
                                float _3838 = sqrt(1.0 - ((1.0 - (_3831 * _3831)) * (1.0 - (_3830 * _3830))));
                                float _3839 = _3838 * _3838;
                                float _3840 = _3839 * _3839;
                                float _3841 = _3787 - _3291;
                                float _3842 = _3788 - _3292;
                                float _3843 = _3789 - _3293;
                                float _3847 = inversesqrt(dot(vec3(_3841, _3842, _3843), vec3(_3841, _3842, _3843)));
                                float _3851 = dot(vec3(_998, _1001, _1004), vec3((-0.0) - _3291, (-0.0) - _3292, (-0.0) - _3293));
                                float _5016 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3854 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                                float _3855 = dot(vec3(_998, _1001, _1004), vec3(_3847 * _3841, _3847 * _3842, _3847 * _3843));
                                float _5027 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3858 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
                                float _3862 = ((_3858 * _3858) * (_3840 + (-1.0))) + 1.0;
                                float _3863 = _3800 * _3839;
                                float _3864 = _3863 * _3863;
                                float _3870 = ((1.0 - _3864) * dot(vec3(_998, _1001, _1004), vec3(_3787, _3788, _3789))) + _3864;
                                float _5038 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3871 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3872 = 1.0 - _3839;
                                float _3882 = (0.5 / (((_3871 * ((_3854 * _3872) + _3839)) + 9.9999999392252902907785028219223e-09) + (((_3871 * _3872) + _3839) * _3854))) * _3871;
                                float _5049 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3892 = (_3817 * _3794) * (((_3840 * 3.1415927410125732421875) * (isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0)))) / ((_3862 * _3862) * ((_3807 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3818 * _3664.y;
                                frontier_phi_78_pred_1 = _3818 * _3664.x;
                                frontier_phi_78_pred_2 = _3892 * _3676.z;
                                frontier_phi_78_pred_3 = _3892 * _3676.y;
                                frontier_phi_78_pred_4 = _3892 * _3676.x;
                                frontier_phi_78_pred_5 = _3818 * _3664.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3900 = frontier_phi_78_pred;
                            _3899 = frontier_phi_78_pred_1;
                            _3898 = frontier_phi_78_pred_2;
                            _3897 = frontier_phi_78_pred_3;
                            _3896 = frontier_phi_78_pred_4;
                            _3901 = frontier_phi_78_pred_5;
                            _3606 = _3899 + _3619;
                            _3607 = _3900 + _3620;
                            _3608 = _3901 + _3621;
                            _3603 = _3896 + _3616;
                            _3604 = _3897 + _3617;
                            _3605 = _3898 + _3618;
                            if (_3623 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3623;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3608;
                        frontier_phi_72_pred_1 = _3607;
                        frontier_phi_72_pred_2 = _3606;
                        frontier_phi_72_pred_3 = _3605;
                        frontier_phi_72_pred_4 = _3604;
                        frontier_phi_72_pred_5 = _3603;
                    }
                    _3276 = frontier_phi_72_pred;
                    _3274 = frontier_phi_72_pred_1;
                    _3272 = frontier_phi_72_pred_2;
                    _3270 = frontier_phi_72_pred_3;
                    _3268 = frontier_phi_72_pred_4;
                    _3266 = frontier_phi_72_pred_5;
                    uint _3411 = _3410 + 1u;
                    if (_3411 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3404 = _3266;
                        _3405 = _3268;
                        _3406 = _3270;
                        _3407 = _3272;
                        _3408 = _3274;
                        _3409 = _3276;
                        _3410 = _3411;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3276;
                frontier_phi_60_61_ladder_1 = _3274;
                frontier_phi_60_61_ladder_2 = _3270;
                frontier_phi_60_61_ladder_3 = _3268;
                frontier_phi_60_61_ladder_4 = _3266;
                frontier_phi_60_61_ladder_5 = _3272;
            }
            else
            {
                frontier_phi_60_61_ladder = _3162;
                frontier_phi_60_61_ladder_1 = _3160;
                frontier_phi_60_61_ladder_2 = _3156;
                frontier_phi_60_61_ladder_3 = _3154;
                frontier_phi_60_61_ladder_4 = _3152;
                frontier_phi_60_61_ladder_5 = _3158;
            }
            _3265 = frontier_phi_60_61_ladder_4;
            _3267 = frontier_phi_60_61_ladder_3;
            _3269 = frontier_phi_60_61_ladder_2;
            _3271 = frontier_phi_60_61_ladder_5;
            _3273 = frontier_phi_60_61_ladder_1;
            _3275 = frontier_phi_60_61_ladder;
        }
        float _3280 = isnan(1.0) ? _1057 : (isnan(_1057) ? 1.0 : min(_1057, 1.0));
        _3085 = (_3280 * _3271) + _2597;
        _3087 = (_3280 * _3273) + _2599;
        _3089 = (_3280 * _3275) + _2601;
        _3091 = ((_3265 * _1041) * _3280) + _2935;
        _3093 = ((_3267 * _1043) * _3280) + _2937;
        _3095 = ((_3269 * _1044) * _3280) + _2939;
    }
    else
    {
        _3085 = _2597;
        _3087 = _2599;
        _3089 = _2601;
        _3091 = _2935;
        _3093 = _2937;
        _3095 = _2939;
    }
    float _5065 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _5076 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _5087 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    uint _3115 = _287 + 6u;
    float _3123 = _979 / cbSceneParam._m0[86u].x;
    float _3124 = _980 / cbSceneParam._m0[86u].y;
    vec4 _3138 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3123, _3124, (log2((isnan(cbSceneParam._m0[77u].w) ? _914 : (isnan(_914) ? cbSceneParam._m0[77u].w : min(_914, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3140 = _3138.x;
    float _3141 = _3138.y;
    float _3142 = _3138.z;
    float _3143 = _3138.w;
    float _3215;
    float _3217;
    float _3219;
    float _3221;
    if (_914 > cbSceneParam._m0[78u].w)
    {
        float _3177 = isnan(_914) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _914 : min(cbSceneParam._m0[80u].w, _914));
        float _3178 = _3177 / _914;
        float _3189 = _3178 * _964;
        float _3190 = _965 * _3178;
        float _3191 = (-0.0) - _3190;
        float _3193 = _3178 * _966;
        float _3195 = (cbSceneParam._m0[77u].w * _3191) / _3177;
        float _3196 = _3195 + cbSceneParam._m0[79u].w;
        float _3197 = cbSceneParam._m0[79u].w - _3190;
        float _3203 = sqrt(((_3189 * _3189) + (_3190 * _3190)) + (_3193 * _3193));
        float _3206 = (1.0 - (cbSceneParam._m0[77u].w / _3177)) * _3203;
        float _3211 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3213 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3366;
        if (abs((_3191 - _3195) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3366 = ((((_3196 > 0.0) ? exp2(_3211 * _3196) : (2.0 - exp2(_3213 * _3196))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3206;
        }
        else
        {
            float _3326 = 1.0 / cbSceneParam._m0[80u].x;
            float _3327 = isnan(_3197) ? _3196 : (isnan(_3196) ? _3197 : max(_3196, _3197));
            float _3328 = isnan(_3197) ? _3196 : (isnan(_3196) ? _3197 : min(_3196, _3197));
            float _3337 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : min(_3327, 0.0));
            float _3338 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : min(_3328, 0.0));
            _3366 = ((abs(_3203 / _3191) * cbSceneParam._m0[80u].y) * ((((_3337 - _3338) * 2.0) - ((exp2(_3211 * (isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0)))) - exp2(_3211 * (isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))))) * _3326)) - ((exp2(_3213 * _3337) - exp2(_3213 * _3338)) * _3326))) + (_3206 * cbSceneParam._m0[80u].z);
        }
        vec4 _3368 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3123, _3124, 1.0), 0.0);
        float _3377 = exp2((_3366 * (-1.44269502162933349609375)) * (1.0 - _3368.w));
        float _3378 = log2(_3377);
        float _3394 = log2(_3143);
        _3215 = (exp2(_3394 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3378 * cbSceneParam._m0[78u].x)) * _3368.x) / cbSceneParam._m0[78u].x)) + _3140;
        _3217 = (exp2(_3394 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3378 * cbSceneParam._m0[78u].y)) * _3368.y) / cbSceneParam._m0[78u].y)) + _3141;
        _3219 = (exp2(_3394 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3378 * cbSceneParam._m0[78u].z)) * _3368.z) / cbSceneParam._m0[78u].z)) + _3142;
        _3221 = _3377 * _3143;
    }
    else
    {
        _3215 = _3140;
        _3217 = _3141;
        _3219 = _3142;
        _3221 = _3143;
    }
    float _3233 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3234 = _3233 == 3.0;
    float _3235 = log2(_3221);
    float _3242 = exp2(_3235 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0))) * (_3085 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1057))) + ((_3091 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _3243 = exp2(_3235 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0))) * (_3087 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1057))) + ((_3093 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _3244 = exp2(_3235 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0))) * (_3089 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1057))) + ((_3095 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _3253 = (_3233 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3253 * (_3234 ? _3242 : (_3242 + (cbSceneParam._m0[72u].w * _3215)));
    SV_Target.y = _3253 * (_3234 ? _3243 : (_3243 + (cbSceneParam._m0[72u].w * _3217)));
    SV_Target.z = _3253 * (_3234 ? _3244 : (_3244 + (cbSceneParam._m0[72u].w * _3219)));
    SV_Target.w = cbInstanceData._m0[_3115].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3115].w;
}


