#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1368;
float _3771;
float _3772;
float _3773;
float _3774;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3783 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3794 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3805 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[23u].w) + _419) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3816 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _444 = (_437 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _445 = (_437 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _446 = (_437 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    float _450 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _444;
    float _453 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _445;
    float _456 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _446;
    float _463 = ((_444 - _450) * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) + _450;
    float _464 = ((_445 - _453) * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) + _453;
    float _465 = ((_446 - _456) * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) + _456;
    vec4 _484 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _293) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _294) + cbTextureTilingScale._m0[14u].w));
    vec4 _504 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _550 = _548.x;
    float _551 = _548.y;
    float _552 = _548.z;
    float _561 = ((_531.z - _552) * _437) + _552;
    float _564 = ((((_531.x - _550) * _437) + _550) * 2.0) + (-1.0);
    float _565 = ((((_531.y - _551) * _437) + _551) * 2.0) + (-1.0);
    float _566 = dot(vec2(_564, _565), vec2(_564, _565));
    float _3827 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _571 = sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _603 = (_564 + ((((_504.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_591.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _604 = (_565 + ((((_504.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_591.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _607 = fma(_571, _241, fma(_604, _248, _603 * _234));
    float _610 = fma(_571, _242, fma(_604, _249, _603 * _235));
    float _613 = fma(_571, _243, fma(_604, _250, _603 * _236));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _646 = _644.x;
    float _647 = 1.0 - _646;
    float _656 = (cbMtdParam._m0[19u].x + dot(vec4(_617 * _607, _617 * _610, _617 * _613, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_646 - _647) * cbMtdParam._m0[24u].z) + _647) * cbMtdParam._m0[21u].z);
    float _3838 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _664 = (_657 * ((_484.x * cbMtdParam._m0[18u].x) - _463)) + _463;
    float _665 = (_657 * ((_484.y * cbMtdParam._m0[18u].y) - _464)) + _464;
    float _666 = (_657 * ((_484.z * cbMtdParam._m0[18u].z) - _465)) + _465;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _694 = _692.x;
    float _712 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _694) * _437) + _694;
    float _716 = ((_678.x - _712) * cbMtdParam._m0[19u].z) + _712;
    float _718 = _716 - (_716 * _657);
    float _723 = (((_504.z - _561) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _561;
    float _727 = ((_591.z - _723) * cbMtdParam._m0[19u].w) + _723;
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _747 = (_740.x * 2.0) + (-1.0);
    float _748 = (_740.y * 2.0) + (-1.0);
    float _749 = dot(vec2(_747, _748), vec2(_747, _748));
    float _3849 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _757 = ((_740.z - _727) * _657) + _727;
    float _767 = ((sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) - _571) * _657) + _571;
    float _770 = (((_747 - _603) * _657) + _603) + (cbMtdParam._m0[21u].x * _603);
    float _771 = (((_748 - _604) * _657) + _604) + (cbMtdParam._m0[21u].x * _604);
    float _773 = cbMtdParam._m0[22u].x + _591.w;
    float _776 = fma(_767, _241, fma(_771, _248, _770 * _234));
    float _779 = fma(_767, _242, fma(_771, _249, _770 * _235));
    float _782 = fma(_767, _243, fma(_771, _250, _770 * _236));
    float _786 = inversesqrt(dot(vec3(_776, _779, _782), vec3(_776, _779, _782)));
    float _787 = _786 * _776;
    float _788 = _786 * _779;
    float _789 = _786 * _782;
    float _3860 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _790 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _3882 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3893 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3904 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3915 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _795 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _809 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _860 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _850);
    float _861 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _850);
    float _862 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _850);
    float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
    float _867 = _860 * _866;
    float _868 = _861 * _866;
    float _869 = _862 * _866;
    vec4 _874 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _876 = _874.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1048 = sqrt(((_860 * _860) + (_861 * _861)) + (_862 * _862));
        float _1054 = (cbMatDynParam._m0[5u].x * _1048) + cbMatDynParam._m0[5u].y;
        float _3926 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1059 = (cbMatDynParam._m0[5u].z * _1048) + cbMatDynParam._m0[5u].w;
        float _3937 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) - _1055)) + _1055) < ((_876 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _887 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _888 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _906 = fma(_789, cbSceneParam._m0[5u].z, fma(_788, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _787));
    float _909 = fma(_789, cbSceneParam._m0[6u].z, fma(_788, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _787));
    float _912 = fma(_789, cbSceneParam._m0[7u].z, fma(_788, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _787));
    uint _925 = _274 + 9u;
    uint _926 = _925 + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_926].z;
    float _3948 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _938 = 1.0 - _795;
    float _939 = _935 * _938;
    float _940 = _936 * _938;
    float _941 = _937 * _938;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _795;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _795;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _795;
    float _949 = _946 + 0.039999999105930328369140625;
    float _951 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _887, cbSceneParam._m0[86u].y * _888));
    float _965 = ((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * TEXCOORD_5.w) * _961.x;
    float _966 = dot(vec3(_787, _788, _789), vec3(_867, _868, _869));
    float _969 = _966 * 2.0;
    float _973 = (_969 * _787) - _867;
    float _974 = (_969 * _788) - _868;
    float _975 = (_969 * _789) - _869;
    float _979 = abs(dot(vec3(_867, _868, _869), vec3(_787, _788, _789)));
    float _3981 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _981 = sqrt(_790);
    float _994 = exp2((_981 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_981 * 3.0));
    float _1000 = (1.0 - _994) * ((_981 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1001 = _994 * _981;
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1092 = fma(_1037, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029));
        float _1096 = fma(_1037, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029));
        float _1100 = fma(_1037, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029));
        float _1125 = _1029 + _787;
        float _1126 = _1033 + _788;
        float _1127 = _1037 + _789;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1092;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1096;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1100;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1092 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1096 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1100 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_787, _788, _789), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4029 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_787, _788, _789), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4062 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_787, _788, _789), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4095 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1410 = fma(_1037, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1029));
        float _1414 = fma(_1037, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1029));
        float _1418 = fma(_1037, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1029));
        float _1441 = _1029 + _787;
        float _1442 = _1033 + _788;
        float _1443 = _1037 + _789;
        float _1453 = fma(_1443, cbModelParam._m0[30u].z, fma(_1442, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1441)) - _1410;
        float _1454 = fma(_1443, cbModelParam._m0[31u].z, fma(_1442, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1441)) - _1414;
        float _1455 = fma(_1443, cbModelParam._m0[32u].z, fma(_1442, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1441)) - _1418;
        float _1459 = inversesqrt(dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455)));
        float _1472 = ((_1459 * _1453) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1410 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1459 * _1454) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1414 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1459 * _1455) / cbModelParam._m0[35u].z) + ((((((_1418 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        float _1509 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1476.x + (-0.5));
        float _1511 = _1509 * (_1476.y + (-0.5));
        float _1512 = _1509 * (_1476.z + (-0.5));
        float _1519 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1483.x + (-0.5));
        float _1521 = _1519 * (_1483.y + (-0.5));
        float _1522 = _1519 * (_1483.z + (-0.5));
        float _1529 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1490.x + (-0.5));
        float _1531 = _1529 * (_1490.y + (-0.5));
        float _1532 = _1529 * (_1490.z + (-0.5));
        float _1539 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1497.x + (-0.5));
        float _1541 = _1539 * (_1497.y + (-0.5));
        float _1542 = _1539 * (_1497.z + (-0.5));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = _1510 * 0.5;
        float _1547 = _1520 * 0.5;
        float _1548 = _1530 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_787, _788, _789), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4158 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1573 + 1.0))) + _1578) * _1543;
        float _1588 = _1511 * 0.5;
        float _1589 = _1521 * 0.5;
        float _1590 = _1531 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_787, _788, _789), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4191 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1615 + 1.0))) + _1620) * _1544;
        float _1630 = _1512 * 0.5;
        float _1631 = _1522 * 0.5;
        float _1632 = _1532 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_787, _788, _789), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4224 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1657 + 1.0))) + _1662) * _1545;
        _1679 = _1512;
        _1680 = _1511;
        _1681 = _1510;
        _1682 = _1522;
        _1683 = _1521;
        _1684 = _1520;
        _1685 = _1532;
        _1686 = _1531;
        _1687 = _1530;
        _1688 = _1545;
        _1689 = _1544;
        _1690 = _1543;
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
    }
    else
    {
        _1679 = _1368;
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = _1368;
        _1687 = _1368;
        _1688 = _1368;
        _1689 = _1368;
        _1690 = _1368;
        _1691 = 0.0;
        _1692 = 0.0;
        _1693 = 0.0;
    }
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1380)) + _1380;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1381)) + _1381;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1382)) + _1382;
    float _1726 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1703));
    float _1747 = _973 * 0.5;
    float _1748 = _974 * 0.5;
    float _1749 = _975 * 0.5;
    float _1750 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1753 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1756 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1790;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1763 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1767 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1771 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1778 = dot(vec4(cbModelParam._m0[39u]), vec4(_1747, _1748, _1749, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1801;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1792 = dot(vec4(cbModelParam._m0[40u]), vec4(_1747, _1748, _1749, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1805 = (_1801 * cbModelParam._m0[1u].x) + (_1790 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _790);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1037, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1037, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1037, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_975, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973));
        float _1877 = fma(_975, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973));
        float _1880 = fma(_975, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1908 = frontier_phi_17_15_ladder;
        }
        float _2131;
        if (_1877 > 0.0)
        {
            _2131 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2131 = frontier_phi_26_22_ladder;
        }
        float _2388;
        if (_1880 > 0.0)
        {
            _2388 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2388 = frontier_phi_38_33_ladder;
        }
        float _2390 = isnan(_2131) ? _1908 : (isnan(_1908) ? _2131 : min(_1908, _2131));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1874) + _1863;
        float _2396 = (_2391 * _1877) + _1867;
        float _2397 = (_2391 * _1880) + _1871;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2398;
        float _2402 = _2398 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 > _2402) || ((_2396 < _2400) || ((_2395 < _2400) || (_2395 > _2402))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2397, cbModelParam._m0[9u].z, fma(_2396, cbModelParam._m0[9u].y, _2395 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2397, cbModelParam._m0[10u].z, fma(_2396, cbModelParam._m0[10u].y, _2395 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2397, cbModelParam._m0[11u].z, fma(_2396, cbModelParam._m0[11u].y, _2395 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_16_38_ladder = _2525.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2525.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2525.x * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_16_38_ladder_2;
        _1898 = frontier_phi_16_38_ladder_1;
        _1900 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_973, _974, _975), _1816);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _790);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1958 = fma(_1037, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029)) + cbModelParam._m0[21u].w;
        float _1962 = fma(_1037, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029)) + cbModelParam._m0[22u].w;
        float _1966 = fma(_1037, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029)) + cbModelParam._m0[23u].w;
        float _1969 = fma(_975, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973));
        float _1972 = fma(_975, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973));
        float _1975 = fma(_975, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973));
        float _2136;
        if (_1969 > 0.0)
        {
            _2136 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2136 = frontier_phi_28_24_ladder;
        }
        float _2415;
        if (_1972 > 0.0)
        {
            _2415 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2415 = frontier_phi_40_35_ladder;
        }
        float _2628;
        if (_1975 > 0.0)
        {
            _2628 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2628 = frontier_phi_49_46_ladder;
        }
        float _2630 = isnan(_2415) ? _2136 : (isnan(_2136) ? _2415 : min(_2136, _2415));
        float _2631 = isnan(_2628) ? _2630 : (isnan(_2630) ? _2628 : min(_2630, _2628));
        float _2635 = (_2631 * _1969) + _1958;
        float _2636 = (_2631 * _1972) + _1962;
        float _2637 = (_2631 * _1975) + _1966;
        float _2638 = _2631 * 9.9999997473787516355514526367188e-05;
        float _2639 = (-1.0) - _2638;
        float _2641 = _2638 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2637 > _2641) || ((_2637 < _2639) || ((_2636 > _2641) || ((_2636 < _2639) || ((_2635 < _2639) || (_2635 > _2641))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2637, cbModelParam._m0[17u].z, fma(_2636, cbModelParam._m0[17u].y, _2635 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2637, cbModelParam._m0[18u].z, fma(_2636, cbModelParam._m0[18u].y, _2635 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2637, cbModelParam._m0[19u].z, fma(_2636, cbModelParam._m0[19u].y, _2635 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_25_49_ladder = _2836.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2836.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2836.x * cbModelParam._m0[1u].z;
        }
        _1994 = frontier_phi_25_49_ladder_2;
        _1996 = frontier_phi_25_49_ladder_1;
        _1998 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_973, _974, _975), _1905);
        _1994 = _1978.x * cbModelParam._m0[1u].z;
        _1996 = _1978.y * cbModelParam._m0[1u].z;
        _1998 = _1978.z * cbModelParam._m0[1u].z;
    }
    float _2011 = (((_1000 * _949) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1994 - _1896)) + _1896);
    float _2013 = (((_1000 * _951) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2015 = (((_1000 * _952) + _1001) * _965) * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2018 = fma(_2015, cbSceneParam._m0[89u].z, fma(_2013, cbSceneParam._m0[89u].y, _2011 * cbSceneParam._m0[89u].x));
    float _2021 = fma(_2015, cbSceneParam._m0[90u].z, fma(_2013, cbSceneParam._m0[90u].y, _2011 * cbSceneParam._m0[90u].x));
    float _2024 = fma(_2015, cbSceneParam._m0[91u].z, fma(_2013, cbSceneParam._m0[91u].y, _2011 * cbSceneParam._m0[91u].x));
    vec4 _2032 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_887, _888));
    float _2034 = _2032.w;
    float _2046 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2034);
    float _2047 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2034);
    float _2048 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2034);
    uvec4 _2052 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2054 = _2052.x * 14u;
    uint _2055 = _2054 + 13u;
    float _2062 = _965 + (-1.0);
    float _2067 = (cbLight._m0[_2055].x * _2062) + 1.0;
    float _2068 = (cbLight._m0[_2055].y * _2062) + 1.0;
    float _2069 = (cbLight._m0[_2055].z * _2062) + 1.0;
    float _2070 = (cbLight._m0[_2055].w * _2062) + 1.0;
    uint _2071 = _2054 + 5u;
    float _2077 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
    uint _2081 = _2054 + 4u;
    float _2090 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
    uint _2094 = _2054 | 1u;
    float _2105 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_787, _788, _789));
    float _2108 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_787, _788, _789));
    float _4360 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _4371 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2113 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2115 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2122 = ((cbLight._m0[_2071].x * _2077) * _2115) + (((cbLight._m0[_2081].x * _2046) * _2090) * _2113);
    float _2123 = ((_2077 * cbLight._m0[_2071].y) * _2115) + (((cbLight._m0[_2081].y * _2047) * _2090) * _2113);
    float _2124 = ((_2077 * cbLight._m0[_2071].z) * _2115) + (((cbLight._m0[_2081].z * _2048) * _2090) * _2113);
    uvec4 _2128 = floatBitsToUint(cbLight._m0[_2054 + 12u]);
    bool _2130 = _2128.x == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2130)
    {
        _2141 = _2122;
        _2143 = _2123;
        _2145 = _2124;
    }
    else
    {
        uint _2149 = _2054 + 6u;
        float _2165 = (dot(vec3(cbLight._m0[_2054 + 2u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4382 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2168 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2141 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _2122;
        _2143 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _2123;
        _2145 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _2124;
    }
    bool _2148 = _2128.y == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2148)
    {
        _2186 = _2141;
        _2188 = _2143;
        _2190 = _2145;
    }
    else
    {
        uint _2359 = _2054 + 7u;
        float _2375 = (dot(vec3(cbLight._m0[_2054 + 3u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4398 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2378 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2186 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2141;
        _2188 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2143;
        _2190 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2145;
    }
    uint _2193 = _2054 + 8u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _790) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_2054].x + _867;
    float _2209 = cbLight._m0[_2054].y + _868;
    float _2210 = cbLight._m0[_2054].z + _869;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2054].xyz));
    float _4414 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _4425 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _2222 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2223 = dot(vec3(_787, _788, _789), vec3(_2215, _2216, _2217));
    float _4436 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2215, _2216, _2217));
    float _4447 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2207 * _2207;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2243 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
    float _2244 = 0.959999978542327880859375 - _946;
    float _2246 = 0.959999978542327880859375 - _947;
    float _2247 = 0.959999978542327880859375 - _948;
    float _2254 = 1.0 - _2207;
    float _2265 = (0.5 / (((_2222 * ((_2221 * _2254) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2254) + _2207) * _2221))) * _2221;
    float _4458 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2267 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    uint _2281 = _2054 + 9u;
    float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _790) * 0.949999988079071044921875);
    float _2293 = _2292 * _2292;
    float _2294 = cbLight._m0[_2094].x + _867;
    float _2295 = cbLight._m0[_2094].y + _868;
    float _2296 = cbLight._m0[_2094].z + _869;
    float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
    float _2301 = _2300 * _2294;
    float _2302 = _2300 * _2295;
    float _2303 = _2300 * _2296;
    float _2304 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2094].xyz));
    float _4469 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2308 = dot(vec3(_787, _788, _789), vec3(_2301, _2302, _2303));
    float _4480 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2301, _2302, _2303));
    float _4491 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2293 * _2293;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2327 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
    float _2334 = 1.0 - _2293;
    float _2344 = (0.5 / (((_2222 * ((_2307 * _2334) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2334) + _2293) * _2307))) * _2307;
    float _4502 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2346 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    float _2356 = (((((_2327 * _2244) + _949) * cbLight._m0[_2281].x) * _2346) * _2077) + ((((cbLight._m0[_2193].x * _2046) * ((_2243 * _2244) + _949)) * _2267) * _2090);
    float _2357 = (((((_2327 * _2246) + _951) * cbLight._m0[_2281].y) * _2346) * _2077) + ((((cbLight._m0[_2193].y * _2047) * ((_2243 * _2246) + _951)) * _2267) * _2090);
    float _2358 = (((((_2327 * _2247) + _952) * cbLight._m0[_2281].z) * _2346) * _2077) + ((((cbLight._m0[_2193].z * _2048) * ((_2243 * _2247) + _952)) * _2267) * _2090);
    float _2420;
    float _2422;
    float _2424;
    if (_2130)
    {
        _2420 = _2356;
        _2422 = _2357;
        _2424 = _2358;
    }
    else
    {
        uint _2426 = _2054 + 2u;
        uint _2430 = _2054 + 10u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _790) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _867;
        float _2447 = cbLight._m0[_2426].y + _868;
        float _2448 = cbLight._m0[_2426].z + _869;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2426].xyz));
        float _4513 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2460 = dot(vec3(_787, _788, _789), vec3(_2453, _2454, _2455));
        float _4524 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4535 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
        float _2486 = 1.0 - _2445;
        float _2496 = (0.5 / (((_2222 * ((_2459 * _2486) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2486) + _2445) * _2459))) * _2459;
        float _4546 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2420 = (((((_2479 * _2244) + _949) * cbLight._m0[_2430].x) * _2498) * _2499) + _2356;
        _2422 = (((((_2479 * _2246) + _951) * cbLight._m0[_2430].y) * _2498) * _2499) + _2357;
        _2424 = (((((_2479 * _2247) + _952) * cbLight._m0[_2430].z) * _2498) * _2499) + _2358;
    }
    float _2534;
    float _2536;
    float _2538;
    if (_2148)
    {
        _2534 = _2420;
        _2536 = _2422;
        _2538 = _2424;
    }
    else
    {
        uint _2545 = _2054 + 3u;
        uint _2549 = _2054 + 11u;
        float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2545].w)) * _790) * 0.949999988079071044921875);
        float _2564 = _2563 * _2563;
        float _2565 = cbLight._m0[_2545].x + _867;
        float _2566 = cbLight._m0[_2545].y + _868;
        float _2567 = cbLight._m0[_2545].z + _869;
        float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
        float _2572 = _2571 * _2565;
        float _2573 = _2571 * _2566;
        float _2574 = _2571 * _2567;
        float _2575 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2545].xyz));
        float _4562 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2579 = dot(vec3(_787, _788, _789), vec3(_2572, _2573, _2574));
        float _4573 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2583 = dot(vec3(cbLight._m0[_2545].xyz), vec3(_2572, _2573, _2574));
        float _4584 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2587 = _2564 * _2564;
        float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
        float _2598 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
        float _2605 = 1.0 - _2564;
        float _2615 = (0.5 / (((_2222 * ((_2578 * _2605) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2605) + _2564) * _2578))) * _2578;
        float _4595 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2617 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
        float _2618 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2534 = (((((_2598 * _2244) + _949) * cbLight._m0[_2549].x) * _2617) * _2618) + _2420;
        _2536 = (((((_2598 * _2246) + _951) * cbLight._m0[_2549].y) * _2617) * _2618) + _2422;
        _2538 = (((((_2598 * _2247) + _952) * cbLight._m0[_2549].z) * _2617) * _2618) + _2424;
    }
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    if (_2052.y == 0u)
    {
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2693;
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2693;
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2693;
        uvec4 _2708 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2709 = _2708.x;
        uint _2720 = uint((float(_2708.y) * floor(float(uint(cbSceneParam._m0[85u].y * _888) / _2709))) + floor(float(uint(cbSceneParam._m0[85u].x * _887) / _2709)));
        float _2730 = (log2(_2696 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2731 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        uint _2734 = uint(isnan(14.0) ? _2731 : (isnan(_2731) ? 14.0 : min(_2731, 14.0)));
        uvec4 _2739 = texelFetch(g_lightClusterGridBuffer, int(((_2734 << 2u) + (_2720 << 6u)) >> 2u));
        uint _2740 = _2739.x;
        uint _2741 = _2708.z;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        if (((((1u << ((_2741 >> 4u) & 15u)) + 4294967295u) & _2740) == 0u) || ((_2741 & 240u) == 0u))
        {
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
        }
        else
        {
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            uint _3000 = 0u;
            uint _3009;
            bool _3010;
            for (;;)
            {
                _3009 = texelFetch(g_lightClassification, int((((_2734 << 5u) + (_2720 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                _3010 = _3009 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3010)
                {
                    frontier_phi_66_pred = _2994;
                    frontier_phi_66_pred_1 = _2999;
                    frontier_phi_66_pred_2 = _2998;
                    frontier_phi_66_pred_3 = _2997;
                    frontier_phi_66_pred_4 = _2996;
                    frontier_phi_66_pred_5 = _2995;
                }
                else
                {
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    uint _3145;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3009;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    for (;;)
                    {
                        uint _3149 = uint(findLSB(_3145)) + (_3000 << 5u);
                        uint _3146 = (_3145 + 4294967295u) & _3145;
                        uint _3151 = _3149 * 48u;
                        vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 3u)).x));
                        uint _3171 = (_3149 * 48u) + 4u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3171)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3171 + 3u)).x));
                        uint _3190 = (_3149 * 48u) + 8u;
                        vec3 _3201 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x));
                        float _3205 = _3165.x - _2694;
                        float _3206 = _3165.y - _2695;
                        float _3207 = _3165.z - _2696;
                        float _3208 = dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207));
                        float _3211 = inversesqrt(_3208);
                        float _3212 = _3211 * _3205;
                        float _3213 = _3211 * _3206;
                        float _3214 = _3211 * _3207;
                        float _3215 = dot(vec3(_906, _909, _912), vec3(_3212, _3213, _3214));
                        float _3220 = 1.0 - (_3208 * _3165.w);
                        float _4621 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3222 = sqrt(_3208) * _3184.w;
                        float _3225 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3215) + _3226;
                        float _3232 = _3222 * _3222;
                        float _3236 = ((isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))) * _3221) / ((_3232 * 0.699999988079071044921875) + 1.0);
                        float _3240 = (-0.0) - _2694;
                        float _3241 = (-0.0) - _2695;
                        float _3242 = (-0.0) - _2696;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3257 = exp2(log2(1.0 / ((_3232 * 3.5) + 5.0)) * 0.25);
                        float _3258 = 1.0 - _981;
                        float _3265 = sqrt(1.0 - ((1.0 - (_3258 * _3258)) * (1.0 - (_3257 * _3257))));
                        float _3266 = _3265 * _3265;
                        float _3267 = _3266 * _3266;
                        float _3268 = _3247 + _3212;
                        float _3269 = _3248 + _3213;
                        float _3270 = _3249 + _3214;
                        float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                        float _3278 = dot(vec3(_906, _909, _912), vec3(_3247, _3248, _3249));
                        float _4637 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3282 = dot(vec3(_906, _909, _912), vec3(_3274 * _3268, _3274 * _3269, _3274 * _3270));
                        float _4648 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3289 = ((_3285 * _3285) * (_3267 + (-1.0))) + 1.0;
                        float _3290 = _3225 * _3266;
                        float _3291 = _3290 * _3290;
                        float _3294 = ((1.0 - _3291) * _3215) + _3291;
                        float _4659 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3295 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3296 = 1.0 - _3266;
                        float _3306 = (0.5 / (((_3295 * ((_3281 * _3296) + _3266)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3266) * _3281))) * _3295;
                        float _4670 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3317 = (((_3267 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3289 * _3289) * ((_3232 * 2.1991131305694580078125) + 3.141590118408203125))) * _3221;
                        _3069 = (_3236 * _3184.x) + _3142;
                        _3070 = (_3236 * _3184.y) + _3143;
                        _3071 = (_3236 * _3184.z) + _3144;
                        _3066 = (_3317 * _3201.x) + _3139;
                        _3067 = (_3317 * _3201.y) + _3140;
                        _3068 = (_3317 * _3201.z) + _3141;
                        if (_3146 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3146;
                        }
                    }
                    frontier_phi_66_pred = _3066;
                    frontier_phi_66_pred_1 = _3071;
                    frontier_phi_66_pred_2 = _3070;
                    frontier_phi_66_pred_3 = _3069;
                    frontier_phi_66_pred_4 = _3068;
                    frontier_phi_66_pred_5 = _3067;
                }
                _2842 = frontier_phi_66_pred;
                _2852 = frontier_phi_66_pred_1;
                _2850 = frontier_phi_66_pred_2;
                _2848 = frontier_phi_66_pred_3;
                _2846 = frontier_phi_66_pred_4;
                _2844 = frontier_phi_66_pred_5;
                uint _3001 = _3000 + 1u;
                if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2994 = _2842;
                    _2995 = _2844;
                    _2996 = _2846;
                    _2997 = _2848;
                    _2998 = _2850;
                    _2999 = _2852;
                    _3000 = _3001;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
        }
        uvec4 _2855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2856 = _2855.z;
        uint _2858 = (_2856 >> 8u) & 15u;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((4294967295u << _2858) & _2740) == 0u)
        {
            _2962 = _2841;
            _2964 = _2843;
            _2966 = _2845;
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
        }
        else
        {
            float _2987 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
            float _2988 = _2987 * _2694;
            float _2989 = _2987 * _2695;
            float _2990 = _2987 * _2696;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2858 < ((_2856 >> 12u) & 15u))
            {
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _3122 = _2841;
                float _3123 = _2843;
                float _3124 = _2845;
                float _3125 = _2847;
                float _3126 = _2849;
                float _3127 = _2851;
                uint _3128 = _2858;
                uint _3137;
                bool _3138;
                for (;;)
                {
                    _3137 = texelFetch(g_lightClassification, int((((_2734 << 5u) + (_2720 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                    _3138 = _3137 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3138)
                    {
                        frontier_phi_77_pred = _3127;
                        frontier_phi_77_pred_1 = _3126;
                        frontier_phi_77_pred_2 = _3125;
                        frontier_phi_77_pred_3 = _3124;
                        frontier_phi_77_pred_4 = _3123;
                        frontier_phi_77_pred_5 = _3122;
                    }
                    else
                    {
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3344 = _3122;
                        float _3345 = _3123;
                        float _3346 = _3124;
                        float _3347 = _3125;
                        float _3348 = _3126;
                        float _3349 = _3127;
                        uint _3350 = _3137;
                        uint _3351;
                        vec4 _3376;
                        float _3377;
                        vec4 _3392;
                        vec3 _3404;
                        vec4 _3419;
                        vec4 _3434;
                        float _3480;
                        bool _3481;
                        for (;;)
                        {
                            uint _3361 = ((_3128 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3350));
                            _3351 = (_3350 + 4294967295u) & _3350;
                            uint _3363 = _3361 * 40u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            _3377 = _3376.w;
                            uint _3379 = (_3361 * 40u) + 4u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            uint _3394 = (_3361 * 40u) + 8u;
                            _3404 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x));
                            uint _3406 = (_3361 * 40u) + 16u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3361 * 40u) + 20u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3361 * 40u) + 24u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3455 = (_3361 * 40u) + 28u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3480 = fma(_2696, _3468.z, fma(_2695, _3468.y, _3468.x * _2694)) + _3468.w;
                            _3481 = !((fma(_2696, _3449.z, fma(_2695, _3449.y, _3449.x * _2694)) + _3449.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3481)
                            {
                                float _3508 = _3376.x - _2694;
                                float _3509 = _3376.y - _2695;
                                float _3510 = _3376.z - _2696;
                                float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                                float _3514 = inversesqrt(_3511);
                                float _3515 = _3514 * _3508;
                                float _3516 = _3514 * _3509;
                                float _3517 = _3514 * _3510;
                                float _3521 = 1.0 - (_3511 / (_3377 * _3377));
                                float _4681 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3526 = sqrt(_3511) * _3392.w;
                                float _3528 = 1.39999997615814208984375 / (_3526 + 1.39999997615814208984375);
                                float _3529 = _3528 * _3528;
                                float _3532 = ((1.0 - _3529) * dot(vec3(_3515, _3516, _3517), vec3(_906, _909, _912))) + _3529;
                                float _3535 = _3526 * _3526;
                                float _3539 = (fma(_2696, _3419.z, fma(_2695, _3419.y, _3419.x * _2694)) + _3419.w) / _3480;
                                float _3540 = (fma(_2696, _3434.z, fma(_2695, _3434.y, _3434.x * _2694)) + _3434.w) / _3480;
                                float _3544 = 1.0 - dot(vec2(_3539, _3540), vec2(_3539, _3540));
                                float _4697 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3546 = _3545 * (((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3522) / ((_3535 * 0.699999988079071044921875) + 1.0));
                                float _3558 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                                float _3559 = 1.0 - _981;
                                float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                                float _3567 = _3566 * _3566;
                                float _3568 = _3567 * _3567;
                                float _3569 = _3515 - _2988;
                                float _3570 = _3516 - _2989;
                                float _3571 = _3517 - _2990;
                                float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                                float _3579 = dot(vec3(_906, _909, _912), vec3((-0.0) - _2988, (-0.0) - _2989, (-0.0) - _2990));
                                float _4708 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3583 = dot(vec3(_906, _909, _912), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                                float _4719 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                                float _3591 = _3528 * _3567;
                                float _3592 = _3591 * _3591;
                                float _3598 = ((1.0 - _3592) * dot(vec3(_906, _909, _912), vec3(_3515, _3516, _3517))) + _3592;
                                float _4730 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3600 = 1.0 - _3567;
                                float _3610 = (0.5 / (((_3599 * ((_3582 * _3600) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3567) * _3582))) * _3599;
                                float _4741 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3620 = (_3545 * _3522) * (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) / ((_3590 * _3590) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3546 * _3392.y;
                                frontier_phi_83_pred_1 = _3546 * _3392.x;
                                frontier_phi_83_pred_2 = _3620 * _3404.z;
                                frontier_phi_83_pred_3 = _3620 * _3404.y;
                                frontier_phi_83_pred_4 = _3620 * _3404.x;
                                frontier_phi_83_pred_5 = _3546 * _3392.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3628 = frontier_phi_83_pred;
                            _3627 = frontier_phi_83_pred_1;
                            _3626 = frontier_phi_83_pred_2;
                            _3625 = frontier_phi_83_pred_3;
                            _3624 = frontier_phi_83_pred_4;
                            _3629 = frontier_phi_83_pred_5;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            if (_3351 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3351;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3336;
                        frontier_phi_77_pred_1 = _3335;
                        frontier_phi_77_pred_2 = _3334;
                        frontier_phi_77_pred_3 = _3333;
                        frontier_phi_77_pred_4 = _3332;
                        frontier_phi_77_pred_5 = _3331;
                    }
                    _2973 = frontier_phi_77_pred;
                    _2971 = frontier_phi_77_pred_1;
                    _2969 = frontier_phi_77_pred_2;
                    _2967 = frontier_phi_77_pred_3;
                    _2965 = frontier_phi_77_pred_4;
                    _2963 = frontier_phi_77_pred_5;
                    uint _3129 = _3128 + 1u;
                    if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3122 = _2963;
                        _3123 = _2965;
                        _3124 = _2967;
                        _3125 = _2969;
                        _3126 = _2971;
                        _3127 = _2973;
                        _3128 = _3129;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2967;
                frontier_phi_58_59_ladder_1 = _2973;
                frontier_phi_58_59_ladder_2 = _2971;
                frontier_phi_58_59_ladder_3 = _2969;
                frontier_phi_58_59_ladder_4 = _2965;
                frontier_phi_58_59_ladder_5 = _2963;
            }
            else
            {
                frontier_phi_58_59_ladder = _2845;
                frontier_phi_58_59_ladder_1 = _2851;
                frontier_phi_58_59_ladder_2 = _2849;
                frontier_phi_58_59_ladder_3 = _2847;
                frontier_phi_58_59_ladder_4 = _2843;
                frontier_phi_58_59_ladder_5 = _2841;
            }
            _2962 = frontier_phi_58_59_ladder_5;
            _2964 = frontier_phi_58_59_ladder_4;
            _2966 = frontier_phi_58_59_ladder;
            _2968 = frontier_phi_58_59_ladder_3;
            _2970 = frontier_phi_58_59_ladder_2;
            _2972 = frontier_phi_58_59_ladder_1;
        }
        float _2977 = isnan(1.0) ? _965 : (isnan(_965) ? 1.0 : min(_965, 1.0));
        _2753 = (_2977 * _2968) + _2186;
        _2755 = (_2977 * _2970) + _2188;
        _2757 = (_2977 * _2972) + _2190;
        _2759 = ((_2962 * _949) * _2977) + _2534;
        _2761 = ((_2964 * _951) * _2977) + _2536;
        _2763 = ((_2966 * _952) * _2977) + _2538;
    }
    else
    {
        _2753 = _2186;
        _2755 = _2188;
        _2757 = _2190;
        _2759 = _2534;
        _2761 = _2536;
        _2763 = _2538;
    }
    float _4757 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4768 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4779 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _2780 = ((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2753 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _965))) + ((_2759 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _2781 = ((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2755 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _965))) + ((_2761 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _2782 = ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2757 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _965))) + ((_2763 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    uint _2783 = _274 + 6u;
    float _2791 = _887 / cbSceneParam._m0[86u].x;
    float _2792 = _888 / cbSceneParam._m0[86u].y;
    vec4 _2806 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2791, _2792, (log2((isnan(cbSceneParam._m0[77u].w) ? _809 : (isnan(_809) ? cbSceneParam._m0[77u].w : min(_809, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2808 = _2806.x;
    float _2809 = _2806.y;
    float _2810 = _2806.z;
    float _2811 = _2806.w;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    if (_809 > cbSceneParam._m0[78u].w)
    {
        float _2866 = isnan(_809) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _809 : min(cbSceneParam._m0[80u].w, _809));
        float _2867 = _2866 / _809;
        float _2878 = _2867 * _860;
        float _2879 = _861 * _2867;
        float _2880 = (-0.0) - _2879;
        float _2882 = _2867 * _862;
        float _2884 = (cbSceneParam._m0[77u].w * _2880) / _2866;
        float _2885 = _2884 + cbSceneParam._m0[79u].w;
        float _2886 = cbSceneParam._m0[79u].w - _2879;
        float _2892 = sqrt(((_2878 * _2878) + (_2879 * _2879)) + (_2882 * _2882));
        float _2895 = (1.0 - (cbSceneParam._m0[77u].w / _2866)) * _2892;
        float _2900 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2902 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3079;
        if (abs((_2880 - _2884) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3079 = ((((_2885 > 0.0) ? exp2(_2900 * _2885) : (2.0 - exp2(_2902 * _2885))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2895;
        }
        else
        {
            float _3023 = 1.0 / cbSceneParam._m0[80u].x;
            float _3024 = isnan(_2886) ? _2885 : (isnan(_2885) ? _2886 : max(_2885, _2886));
            float _3025 = isnan(_2886) ? _2885 : (isnan(_2885) ? _2886 : min(_2885, _2886));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            float _3035 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : min(_3025, 0.0));
            _3079 = ((abs(_2892 / _2880) * cbSceneParam._m0[80u].y) * ((((_3034 - _3035) * 2.0) - ((exp2(_2900 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0)))) - exp2(_2900 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))))) * _3023)) - ((exp2(_2902 * _3034) - exp2(_2902 * _3035)) * _3023))) + (_2895 * cbSceneParam._m0[80u].z);
        }
        vec4 _3081 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2791, _2792, 1.0), 0.0);
        float _3090 = exp2((_3079 * (-1.44269502162933349609375)) * (1.0 - _3081.w));
        float _3091 = log2(_3090);
        float _3107 = log2(_2811);
        _2904 = (exp2(_3107 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].x)) * _3081.x) / cbSceneParam._m0[78u].x)) + _2808;
        _2906 = (exp2(_3107 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].y)) * _3081.y) / cbSceneParam._m0[78u].y)) + _2809;
        _2908 = (exp2(_3107 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3091 * cbSceneParam._m0[78u].z)) * _3081.z) / cbSceneParam._m0[78u].z)) + _2810;
        _2910 = _3090 * _2811;
    }
    else
    {
        _2904 = _2808;
        _2906 = _2809;
        _2908 = _2810;
        _2910 = _2811;
    }
    bool _3117;
    vec4 _2920;
    vec4 _2942;
    float _2944;
    float _2948;
    float _2949;
    float _2950;
    float _2951;
    bool _2961;
    for (;;)
    {
        _2920 = cbMatDynParam._m0[0u];
        float _2922 = roundEven(_2920.y);
        bool _2923 = _2922 == 3.0;
        float _2924 = log2(_2910);
        float _2931 = exp2(_2924 * cbSceneParam._m0[78u].x) * _2780;
        float _2932 = exp2(_2924 * cbSceneParam._m0[78u].y) * _2781;
        float _2933 = exp2(_2924 * cbSceneParam._m0[78u].z) * _2782;
        float _2940 = _876 + (-0.5);
        _2942 = cbMtdParam._m0[1u];
        _2944 = _2942.y * _2940;
        float _2947 = (_2922 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2948 = _2947 * (_2923 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2904)));
        _2949 = _2947 * (_2923 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2906)));
        _2950 = _2947 * (_2923 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2908)));
        _2951 = _2940 * 0.999000012874603271484375;
        _2961 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2961)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _2951) < 0.5)
            {
                _3117 = true;
                break;
            }
        }
        uint _3058 = _925 + uint(_2920.w);
        if ((cbInstanceData._m0[_3058].w < 1.0) && ((cbInstanceData._m0[_3058].w + _2951) < 0.5))
        {
            _3117 = true;
            break;
        }
        if ((_2944 + 1.0) < _2942.x)
        {
            _3117 = true;
            break;
        }
        _3117 = false;
        break;
    }
    float _3322;
    if (_3117)
    {
        discard_state = true;
        _3322 = 0.0;
    }
    else
    {
        _3322 = cbInstanceData._m0[_2783].w;
    }
    SV_Target.x = _2948;
    SV_Target.y = _2949;
    SV_Target.z = _2950;
    SV_Target.w = _3322;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2783].w;
    discard_exit();
}


