#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1525;
float _4186;
float _4187;
float _4188;
float _4189;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4198 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4209 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4220 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _373 = _368.x * cbMtdParam._m0[11u].x;
    float _374 = _368.y * cbMtdParam._m0[11u].y;
    float _375 = _368.z * cbMtdParam._m0[11u].z;
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _413.x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[23u].w) + _459) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4231 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _484 = (_477 * ((_394.x * cbMtdParam._m0[12u].x) - _373)) + _373;
    float _485 = (_477 * ((_394.y * cbMtdParam._m0[12u].y) - _374)) + _374;
    float _486 = (_477 * ((_394.z * cbMtdParam._m0[12u].z) - _375)) + _375;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _525 = _523.x;
    float _535 = dot(vec4(_525, _523.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _549 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _413.y) * 2.0) - ((((_525 - _535) * cbMtdParam._m0[23u].w) + _535) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4242 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _560 = (_342.x * cbMtdParam._m0[9u].x) * ((_550 * ((_503.x * cbMtdParam._m0[13u].x) - _484)) + _484);
    float _561 = (_342.y * cbMtdParam._m0[9u].y) * ((_550 * ((_503.y * cbMtdParam._m0[13u].y) - _485)) + _485);
    float _562 = (_342.z * cbMtdParam._m0[9u].z) * ((_550 * ((_503.z * cbMtdParam._m0[13u].z) - _486)) + _486);
    float _566 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _560;
    float _569 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _561;
    float _572 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _562;
    float _580 = (((_560 - _566) * (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) + _566) * 4.55000019073486328125;
    float _582 = (((_561 - _569) * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) + _569) * 4.55000019073486328125;
    float _584 = (((_562 - _572) * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) + _572) * 4.55000019073486328125;
    vec4 _603 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _305) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _306) + cbTextureTilingScale._m0[14u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _666 = _664.x;
    float _667 = _664.y;
    float _668 = _664.z;
    float _675 = ((_647.x - _666) * _477) + _666;
    float _676 = ((_647.y - _667) * _477) + _667;
    float _677 = ((_647.z - _668) * _477) + _668;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _702 = ((_689.z - _677) * _550) + _677;
    float _705 = ((((_689.x - _675) * _550) + _675) * 2.0) + (-1.0);
    float _706 = ((((_689.y - _676) * _550) + _676) * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _4253 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))));
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _742 = (_705 + ((((_622.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_730.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _743 = (_706 + ((((_622.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_730.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _746 = fma(_712, _253, fma(_743, _260, _742 * _246));
    float _749 = fma(_712, _254, fma(_743, _261, _742 * _247));
    float _752 = fma(_712, _255, fma(_743, _262, _742 * _248));
    float _756 = inversesqrt(dot(vec3(_746, _749, _752), vec3(_746, _749, _752)));
    vec4 _783 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _785 = _783.x;
    float _786 = 1.0 - _785;
    float _795 = (cbMtdParam._m0[19u].x + dot(vec4(_756 * _746, _756 * _749, _756 * _752, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_785 - _786) * cbMtdParam._m0[24u].z) + _786) * cbMtdParam._m0[21u].z);
    float _4264 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _796 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _803 = (_796 * ((_603.x * cbMtdParam._m0[18u].x) - _580)) + _580;
    float _804 = (_796 * ((_603.y * cbMtdParam._m0[18u].y) - _582)) + _582;
    float _805 = (_796 * ((_603.z * cbMtdParam._m0[18u].z) - _584)) + _584;
    vec4 _831 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _833 = _831.x;
    float _850 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _833) * _477) + _833;
    float _867 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _850) * _550) + _850;
    float _871 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _867) * cbMtdParam._m0[19u].z) + _867;
    float _873 = _871 - (_871 * _796);
    float _878 = (((_622.z - _702) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _702;
    float _882 = ((_730.z - _878) * cbMtdParam._m0[19u].w) + _878;
    vec4 _895 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _902 = (_895.x * 2.0) + (-1.0);
    float _903 = (_895.y * 2.0) + (-1.0);
    float _904 = dot(vec2(_902, _903), vec2(_902, _903));
    float _4275 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _912 = ((_895.z - _882) * _796) + _882;
    float _922 = ((sqrt(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) - _712) * _796) + _712;
    float _925 = (((_902 - _742) * _796) + _742) + (cbMtdParam._m0[21u].x * _742);
    float _926 = (((_903 - _743) * _796) + _743) + (cbMtdParam._m0[21u].x * _743);
    float _930 = cbMtdParam._m0[22u].x + _730.w;
    float _933 = fma(_922, _253, fma(_926, _260, _925 * _246));
    float _936 = fma(_922, _254, fma(_926, _261, _925 * _247));
    float _939 = fma(_922, _255, fma(_926, _262, _925 * _248));
    float _943 = inversesqrt(dot(vec3(_933, _936, _939), vec3(_933, _936, _939)));
    float _944 = _943 * _933;
    float _945 = _943 * _936;
    float _946 = _943 * _939;
    float _4286 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _947 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4308 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4319 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4330 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4341 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _952 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _966 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1017 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1007);
    float _1018 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1007);
    float _1019 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1007);
    float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
    float _1024 = _1017 * _1023;
    float _1025 = _1018 * _1023;
    float _1026 = _1019 * _1023;
    vec4 _1031 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1033 = _1031.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1205 = sqrt(((_1017 * _1017) + (_1018 * _1018)) + (_1019 * _1019));
        float _1211 = (cbMatDynParam._m0[5u].x * _1205) + cbMatDynParam._m0[5u].y;
        float _4352 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1216 = (cbMatDynParam._m0[5u].z * _1205) + cbMatDynParam._m0[5u].w;
        float _4363 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) - _1212)) + _1212) < ((_1033 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1044 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1045 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1063 = fma(_946, cbSceneParam._m0[5u].z, fma(_945, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _944));
    float _1066 = fma(_946, cbSceneParam._m0[6u].z, fma(_945, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _944));
    float _1069 = fma(_946, cbSceneParam._m0[7u].z, fma(_945, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _944));
    uint _1082 = _286 + 9u;
    uint _1083 = _1082 + uint(cbMatDynParam._m0[0u].w);
    float _1089 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * cbInstanceData._m0[_1083].x;
    float _1090 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * cbInstanceData._m0[_1083].y;
    float _1091 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * cbInstanceData._m0[_1083].z;
    float _4374 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _4385 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _4396 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _1095 = 1.0 - _952;
    float _1096 = _1092 * _1095;
    float _1097 = _1093 * _1095;
    float _1098 = _1094 * _1095;
    float _1103 = (_1092 + (-0.039999999105930328369140625)) * _952;
    float _1104 = (_1093 + (-0.039999999105930328369140625)) * _952;
    float _1105 = (_1094 + (-0.039999999105930328369140625)) * _952;
    float _1106 = _1103 + 0.039999999105930328369140625;
    float _1108 = _1104 + 0.039999999105930328369140625;
    float _1109 = _1105 + 0.039999999105930328369140625;
    vec4 _1118 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1044, cbSceneParam._m0[86u].y * _1045));
    float _1122 = ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * TEXCOORD_5.w) * _1118.x;
    float _1123 = dot(vec3(_944, _945, _946), vec3(_1024, _1025, _1026));
    float _1126 = _1123 * 2.0;
    float _1130 = (_1126 * _944) - _1024;
    float _1131 = (_1126 * _945) - _1025;
    float _1132 = (_1126 * _946) - _1026;
    float _1136 = abs(dot(vec3(_1024, _1025, _1026), vec3(_944, _945, _946)));
    float _4407 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1138 = sqrt(_947);
    float _1151 = exp2((_1138 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1138 * 3.0));
    float _1157 = (1.0 - _1151) * ((_1138 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1158 = _1151 * _1138;
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1524;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1249 = fma(_1194, cbModelParam._m0[26u].z, fma(_1190, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186));
        float _1253 = fma(_1194, cbModelParam._m0[27u].z, fma(_1190, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186));
        float _1257 = fma(_1194, cbModelParam._m0[28u].z, fma(_1190, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186));
        float _1282 = _1186 + _944;
        float _1283 = _1190 + _945;
        float _1284 = _1194 + _946;
        float _1294 = fma(_1284, cbModelParam._m0[26u].z, fma(_1283, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1282)) - _1249;
        float _1295 = fma(_1284, cbModelParam._m0[27u].z, fma(_1283, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1282)) - _1253;
        float _1296 = fma(_1284, cbModelParam._m0[28u].z, fma(_1283, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1282)) - _1257;
        float _1300 = inversesqrt(dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296)));
        float _1313 = ((_1300 * _1294) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1249 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1300 * _1295) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1253 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1300 * _1296) / cbModelParam._m0[34u].z) + ((((((_1257 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        float _1352 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1318.x + (-0.5));
        float _1354 = _1352 * (_1318.y + (-0.5));
        float _1355 = _1352 * (_1318.z + (-0.5));
        float _1362 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1325.x + (-0.5));
        float _1364 = _1362 * (_1325.y + (-0.5));
        float _1365 = _1362 * (_1325.z + (-0.5));
        float _1372 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1332.x + (-0.5));
        float _1374 = _1372 * (_1332.y + (-0.5));
        float _1375 = _1372 * (_1332.z + (-0.5));
        float _1382 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1339.x + (-0.5));
        float _1384 = _1382 * (_1339.y + (-0.5));
        float _1385 = _1382 * (_1339.z + (-0.5));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = _1353 * 0.5;
        float _1390 = _1363 * 0.5;
        float _1391 = _1373 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1406 = (dot(vec3(_944, _945, _946), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1416 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4455 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1418 + 1.0))) + _1423) * _1386;
        float _1433 = _1354 * 0.5;
        float _1434 = _1364 * 0.5;
        float _1435 = _1374 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_944, _945, _946), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4466 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4477 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4488 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_1460 + 1.0))) + _1465) * _1387;
        float _1475 = _1355 * 0.5;
        float _1476 = _1365 * 0.5;
        float _1477 = _1375 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_944, _945, _946), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4499 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4510 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4521 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_1502 + 1.0))) + _1507) * _1388;
        _1524 = _1355;
        _1526 = _1354;
        _1527 = _1353;
        _1528 = _1365;
        _1529 = _1364;
        _1530 = _1363;
        _1531 = _1375;
        _1532 = _1374;
        _1533 = _1373;
        _1534 = _1388;
        _1535 = _1387;
        _1536 = _1386;
        _1537 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1538 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
    }
    else
    {
        _1524 = _1525;
        _1526 = _1525;
        _1527 = _1525;
        _1528 = _1525;
        _1529 = _1525;
        _1530 = _1525;
        _1531 = _1525;
        _1532 = _1525;
        _1533 = _1525;
        _1534 = _1525;
        _1535 = _1525;
        _1536 = _1525;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1566 = fma(_1194, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186));
        float _1570 = fma(_1194, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186));
        float _1574 = fma(_1194, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186));
        float _1597 = _1186 + _944;
        float _1598 = _1190 + _945;
        float _1599 = _1194 + _946;
        float _1609 = fma(_1599, cbModelParam._m0[30u].z, fma(_1598, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1597)) - _1566;
        float _1610 = fma(_1599, cbModelParam._m0[31u].z, fma(_1598, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1597)) - _1570;
        float _1611 = fma(_1599, cbModelParam._m0[32u].z, fma(_1598, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1597)) - _1574;
        float _1615 = inversesqrt(dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611)));
        float _1628 = ((_1615 * _1609) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1566 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1629 = ((_1615 * _1610) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1570 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1630 = ((_1615 * _1611) / cbModelParam._m0[35u].z) + ((((((_1574 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        vec4 _1653 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        float _1665 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1632.x + (-0.5));
        float _1667 = _1665 * (_1632.y + (-0.5));
        float _1668 = _1665 * (_1632.z + (-0.5));
        float _1675 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1639.x + (-0.5));
        float _1677 = _1675 * (_1639.y + (-0.5));
        float _1678 = _1675 * (_1639.z + (-0.5));
        float _1685 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1686 = _1685 * (_1646.x + (-0.5));
        float _1687 = _1685 * (_1646.y + (-0.5));
        float _1688 = _1685 * (_1646.z + (-0.5));
        float _1695 = exp2((_1653.w + (-0.5)) * 20.0) * 2.0;
        float _1696 = _1695 * (_1653.x + (-0.5));
        float _1697 = _1695 * (_1653.y + (-0.5));
        float _1698 = _1695 * (_1653.z + (-0.5));
        float _1699 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = _1666 * 0.5;
        float _1703 = _1676 * 0.5;
        float _1704 = _1686 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_944, _945, _946), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4562 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1699 + 9.9999997473787516355514526367188e-06);
        float _4573 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4584 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_1729 + 1.0))) + _1734) * _1699;
        float _1744 = _1667 * 0.5;
        float _1745 = _1677 * 0.5;
        float _1746 = _1687 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_944, _945, _946), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4595 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4606 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4617 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_1771 + 1.0))) + _1776) * _1700;
        float _1786 = _1668 * 0.5;
        float _1787 = _1678 * 0.5;
        float _1788 = _1688 * 0.5;
        float _1789 = dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788));
        float _1794 = (_1789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1789);
        float _1802 = (dot(vec3(_944, _945, _946), vec3(_1794 * _1786, _1794 * _1787, _1794 * _1788)) + 1.0) * 0.5;
        float _4628 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1811 = sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4639 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _1813 = _1812 * 2.0;
        float _1817 = (1.0 - _1812) / (_1812 + 1.0);
        float _4650 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _1827 = ((((1.0 - _1818) * (_1813 + 2.0)) * exp2(log2(isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_1813 + 1.0))) + _1818) * _1701;
        _1835 = _1668;
        _1836 = _1667;
        _1837 = _1666;
        _1838 = _1678;
        _1839 = _1677;
        _1840 = _1676;
        _1841 = _1688;
        _1842 = _1687;
        _1843 = _1686;
        _1844 = _1701;
        _1845 = _1700;
        _1846 = _1699;
        _1847 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)));
    }
    else
    {
        _1835 = _1525;
        _1836 = _1525;
        _1837 = _1525;
        _1838 = _1525;
        _1839 = _1525;
        _1840 = _1525;
        _1841 = _1525;
        _1842 = _1525;
        _1843 = _1525;
        _1844 = _1525;
        _1845 = _1525;
        _1846 = _1525;
        _1847 = 0.0;
        _1848 = 0.0;
        _1849 = 0.0;
    }
    float _1859 = (cbModelParam._m0[1u].x * (_1847 - _1537)) + _1537;
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1538)) + _1538;
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1539)) + _1539;
    float _1882 = fma(_1861, cbSceneParam._m0[89u].z, fma(_1860, cbSceneParam._m0[89u].y, _1859 * cbSceneParam._m0[89u].x));
    float _1885 = fma(_1861, cbSceneParam._m0[90u].z, fma(_1860, cbSceneParam._m0[90u].y, _1859 * cbSceneParam._m0[90u].x));
    float _1888 = fma(_1861, cbSceneParam._m0[91u].z, fma(_1860, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1859));
    float _1903 = _1130 * 0.5;
    float _1904 = _1131 * 0.5;
    float _1905 = _1132 * 0.5;
    float _1906 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1909 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1912 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1835, _1838, _1841, _1844));
    float _1946;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1919 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1524, _1528, _1531, _1534));
        float _1923 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1526, _1529, _1532, _1535));
        float _1927 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1527, _1530, _1533, _1536));
        float _1934 = dot(vec4(cbModelParam._m0[39u]), vec4(_1903, _1904, _1905, 1.0));
        _1946 = dot(vec3(isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1934) ? 0.0 : (isnan(0.0) ? _1934 : max(0.0, _1934))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1946 = 1.0;
    }
    float _1957;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1948 = dot(vec4(cbModelParam._m0[40u]), vec4(_1903, _1904, _1905, 1.0));
        _1957 = dot(vec3(isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1948) ? 0.0 : (isnan(0.0) ? _1948 : max(0.0, _1948))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1957 = 1.0;
    }
    float _1961 = (_1957 * cbModelParam._m0[1u].x) + (_1946 * (1.0 - cbModelParam._m0[1u].x));
    float _1971 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _947);
    float _1972 = isnan(_1971) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1971 : min(cbModelParam._m0[25u].z, _1971));
    float _2052;
    float _2054;
    float _2056;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2019 = fma(_1194, cbModelParam._m0[13u].z, fma(_1190, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1186)) + cbModelParam._m0[13u].w;
        float _2023 = fma(_1194, cbModelParam._m0[14u].z, fma(_1190, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1186)) + cbModelParam._m0[14u].w;
        float _2027 = fma(_1194, cbModelParam._m0[15u].z, fma(_1190, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1186)) + cbModelParam._m0[15u].w;
        float _2030 = fma(_1132, cbModelParam._m0[13u].z, fma(_1131, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1130));
        float _2033 = fma(_1132, cbModelParam._m0[14u].z, fma(_1131, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1130));
        float _2036 = fma(_1132, cbModelParam._m0[15u].z, fma(_1131, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1130));
        float _2064;
        if (_2030 > 0.0)
        {
            _2064 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2064 = frontier_phi_17_15_ladder;
        }
        float _2235;
        if (_2033 > 0.0)
        {
            _2235 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2235 = frontier_phi_26_22_ladder;
        }
        float _2530;
        if (_2036 > 0.0)
        {
            _2530 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2530 = frontier_phi_38_33_ladder;
        }
        float _2532 = isnan(_2235) ? _2064 : (isnan(_2064) ? _2235 : min(_2064, _2235));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _2030) + _2019;
        float _2538 = (_2533 * _2033) + _2023;
        float _2539 = (_2533 * _2036) + _2027;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2542 = (-1.0) - _2540;
        float _2544 = _2540 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2539 > _2544) || ((_2539 < _2542) || ((_2538 > _2544) || ((_2538 < _2542) || ((_2537 < _2542) || (_2537 > _2544))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2539, cbModelParam._m0[9u].z, fma(_2538, cbModelParam._m0[9u].y, _2537 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2539, cbModelParam._m0[10u].z, fma(_2538, cbModelParam._m0[10u].y, _2537 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2539, cbModelParam._m0[11u].z, fma(_2538, cbModelParam._m0[11u].y, _2537 * cbModelParam._m0[11u].x))), _1972);
            frontier_phi_16_38_ladder = _2684.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2684.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2684.x * cbModelParam._m0[1u].y;
        }
        _2052 = frontier_phi_16_38_ladder_2;
        _2054 = frontier_phi_16_38_ladder_1;
        _2056 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2040 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1130, _1131, _1132), _1972);
        _2052 = _2040.x * cbModelParam._m0[1u].y;
        _2054 = _2040.y * cbModelParam._m0[1u].y;
        _2056 = _2040.z * cbModelParam._m0[1u].y;
    }
    float _2060 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _947);
    float _2061 = isnan(_2060) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2060 : min(cbModelParam._m0[25u].w, _2060));
    float _2150;
    float _2152;
    float _2154;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2114 = fma(_1194, cbModelParam._m0[21u].z, fma(_1190, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1186)) + cbModelParam._m0[21u].w;
        float _2118 = fma(_1194, cbModelParam._m0[22u].z, fma(_1190, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1186)) + cbModelParam._m0[22u].w;
        float _2122 = fma(_1194, cbModelParam._m0[23u].z, fma(_1190, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1186)) + cbModelParam._m0[23u].w;
        float _2125 = fma(_1132, cbModelParam._m0[21u].z, fma(_1131, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1130));
        float _2128 = fma(_1132, cbModelParam._m0[22u].z, fma(_1131, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1130));
        float _2131 = fma(_1132, cbModelParam._m0[23u].z, fma(_1131, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1130));
        float _2240;
        if (_2125 > 0.0)
        {
            _2240 = abs((1.0 - _2114) / _2125);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2114 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2240 = frontier_phi_28_24_ladder;
        }
        float _2557;
        if (_2128 > 0.0)
        {
            _2557 = abs((1.0 - _2118) / _2128);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2118 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2557 = frontier_phi_40_35_ladder;
        }
        float _2895;
        if (_2131 > 0.0)
        {
            _2895 = abs((1.0 - _2122) / _2131);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2122 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2895 = frontier_phi_50_47_ladder;
        }
        float _2897 = isnan(_2557) ? _2240 : (isnan(_2240) ? _2557 : min(_2240, _2557));
        float _2898 = isnan(_2895) ? _2897 : (isnan(_2897) ? _2895 : min(_2897, _2895));
        float _2902 = (_2898 * _2125) + _2114;
        float _2903 = (_2898 * _2128) + _2118;
        float _2904 = (_2898 * _2131) + _2122;
        float _2905 = _2898 * 9.9999997473787516355514526367188e-05;
        float _2906 = (-1.0) - _2905;
        float _2908 = _2905 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2904 > _2908) || ((_2904 < _2906) || ((_2903 > _2908) || ((_2903 < _2906) || ((_2902 < _2906) || (_2902 > _2908))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3026 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2904, cbModelParam._m0[17u].z, fma(_2903, cbModelParam._m0[17u].y, _2902 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2904, cbModelParam._m0[18u].z, fma(_2903, cbModelParam._m0[18u].y, _2902 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2904, cbModelParam._m0[19u].z, fma(_2903, cbModelParam._m0[19u].y, _2902 * cbModelParam._m0[19u].x))), _2061);
            frontier_phi_25_50_ladder = _3026.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3026.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3026.x * cbModelParam._m0[1u].z;
        }
        _2150 = frontier_phi_25_50_ladder_2;
        _2152 = frontier_phi_25_50_ladder_1;
        _2154 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2134 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1130, _1131, _1132), _2061);
        _2150 = _2134.x * cbModelParam._m0[1u].z;
        _2152 = _2134.y * cbModelParam._m0[1u].z;
        _2154 = _2134.z * cbModelParam._m0[1u].z;
    }
    float _2167 = (((_1157 * _1106) + _1158) * _1122) * ((cbModelParam._m0[1u].w * (_2150 - _2052)) + _2052);
    float _2169 = (((_1157 * _1108) + _1158) * _1122) * ((cbModelParam._m0[1u].w * (_2152 - _2054)) + _2054);
    float _2171 = (((_1157 * _1109) + _1158) * _1122) * ((cbModelParam._m0[1u].w * (_2154 - _2056)) + _2056);
    float _2174 = fma(_2171, cbSceneParam._m0[89u].z, fma(_2169, cbSceneParam._m0[89u].y, _2167 * cbSceneParam._m0[89u].x));
    float _2177 = fma(_2171, cbSceneParam._m0[90u].z, fma(_2169, cbSceneParam._m0[90u].y, _2167 * cbSceneParam._m0[90u].x));
    float _2180 = fma(_2171, cbSceneParam._m0[91u].z, fma(_2169, cbSceneParam._m0[91u].y, _2167 * cbSceneParam._m0[91u].x));
    float _2214 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2218 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2222 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2226 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2227 = _2214 / _2226;
    float _2228 = _2218 / _2226;
    float _2229 = _2222 / _2226;
    float _2376;
    float _2377;
    float _2378;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2256 = ((uint(_2229 > cbSceneParam._m0[59u].y) + uint(_2229 > cbSceneParam._m0[59u].x)) + uint(_2229 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2257 = _2256 + 43u;
        uint _2265 = _2256 + 44u;
        uint _2273 = _2256 + 45u;
        uint _2281 = _2256 + 46u;
        float _2292 = fma(_2226, cbSceneParam._m0[_2257].w, fma(_2222, cbSceneParam._m0[_2257].z, fma(_2218, cbSceneParam._m0[_2257].y, _2214 * cbSceneParam._m0[_2257].x)));
        float _2296 = fma(_2226, cbSceneParam._m0[_2265].w, fma(_2222, cbSceneParam._m0[_2265].z, fma(_2218, cbSceneParam._m0[_2265].y, _2214 * cbSceneParam._m0[_2265].x)));
        float _2304 = fma(_2226, cbSceneParam._m0[_2281].w, fma(_2222, cbSceneParam._m0[_2281].z, fma(_2218, cbSceneParam._m0[_2281].y, _2214 * cbSceneParam._m0[_2281].x)));
        float _2309 = cbSceneParam._m0[33u].z * _2304;
        float _2311 = cbSceneParam._m0[33u].w * _2304;
        float _2314 = fma(_2226, cbSceneParam._m0[_2273].w, fma(_2222, cbSceneParam._m0[_2273].z, fma(_2218, cbSceneParam._m0[_2273].y, _2214 * cbSceneParam._m0[_2273].x))) / _2304;
        float _2362 = (cbSceneParam._m0[33u].x - sqrt(((_2228 * _2228) + (_2227 * _2227)) + (_2229 * _2229))) * cbSceneParam._m0[33u].y;
        float _4776 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2369 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2309 + _2292) / _2304, (_2311 + _2296) / _2304), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2311 + _2292) / _2304, (_2296 - _2309) / _2304), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2292 - _2309) / _2304, (_2296 - _2311) / _2304), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2292 - _2311) / _2304, (_2309 + _2296) / _2304), _2314), 0.0)).x), vec4(0.25)));
        _2376 = 1.0 - (_2369 * cbSceneParam._m0[34u].x);
        _2377 = 1.0 - (_2369 * cbSceneParam._m0[34u].y);
        _2378 = 1.0 - (_2369 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2376 = 1.0;
        _2377 = 1.0;
        _2378 = 1.0;
    }
    float _2442;
    float _2444;
    float _2446;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2430 = fma(_2226, cbSceneParam._m0[63u].w, fma(_2222, cbSceneParam._m0[63u].z, fma(_2218, cbSceneParam._m0[63u].y, _2214 * cbSceneParam._m0[63u].x)));
        float _2431 = fma(_2226, cbSceneParam._m0[60u].w, fma(_2222, cbSceneParam._m0[60u].z, fma(_2218, cbSceneParam._m0[60u].y, _2214 * cbSceneParam._m0[60u].x))) / _2430;
        float _2432 = fma(_2226, cbSceneParam._m0[61u].w, fma(_2222, cbSceneParam._m0[61u].z, fma(_2218, cbSceneParam._m0[61u].y, _2214 * cbSceneParam._m0[61u].x))) / _2430;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2431 >= cbSceneParam._m0[64u].x) && (_2432 >= cbSceneParam._m0[64u].y)) && (_2431 <= cbSceneParam._m0[64u].z)) && (_2432 <= cbSceneParam._m0[64u].w))
        {
            float _2570 = fma(_2226, cbSceneParam._m0[62u].w, fma(_2222, cbSceneParam._m0[62u].z, fma(_2218, cbSceneParam._m0[62u].y, _2214 * cbSceneParam._m0[62u].x))) / _2430;
            float _2574 = isnan(cbSceneParam._m0[41u].w) ? _2570 : (isnan(_2570) ? cbSceneParam._m0[41u].w : max(_2570, cbSceneParam._m0[41u].w));
            float _2617 = (cbSceneParam._m0[33u].x - sqrt(((_2228 * _2228) + (_2227 * _2227)) + (_2229 * _2229))) * cbSceneParam._m0[33u].y;
            float _4792 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
            float _2624 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2431, cbSceneParam._m0[33u].w + _2432), _2574), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2431, _2432 - cbSceneParam._m0[33u].z), _2574), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2431 - cbSceneParam._m0[33u].z, _2432 - cbSceneParam._m0[33u].w), _2574), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2431 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2432), _2574), 0.0)).x), vec4(0.25)));
            float _2628 = 1.0 - (_2624 * cbSceneParam._m0[34u].x);
            float _2629 = 1.0 - (_2624 * cbSceneParam._m0[34u].y);
            float _2630 = 1.0 - (_2624 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2630) ? _2378 : (isnan(_2378) ? _2630 : min(_2378, _2630));
            frontier_phi_37_36_ladder_1 = isnan(_2629) ? _2377 : (isnan(_2377) ? _2629 : min(_2377, _2629));
            frontier_phi_37_36_ladder_2 = isnan(_2628) ? _2376 : (isnan(_2376) ? _2628 : min(_2376, _2628));
        }
        else
        {
            frontier_phi_37_36_ladder = _2378;
            frontier_phi_37_36_ladder_1 = _2377;
            frontier_phi_37_36_ladder_2 = _2376;
        }
        _2442 = frontier_phi_37_36_ladder_2;
        _2444 = frontier_phi_37_36_ladder_1;
        _2446 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2442 = _2376;
        _2444 = _2377;
        _2446 = _2378;
    }
    uvec4 _2451 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2453 = _2451.x * 14u;
    uint _2454 = _2453 + 13u;
    float _2461 = _1122 + (-1.0);
    float _2466 = (cbLight._m0[_2454].x * _2461) + 1.0;
    float _2467 = (cbLight._m0[_2454].y * _2461) + 1.0;
    float _2468 = (cbLight._m0[_2454].z * _2461) + 1.0;
    float _2469 = (cbLight._m0[_2454].w * _2461) + 1.0;
    uint _2470 = _2453 + 5u;
    float _2476 = isnan(1.0) ? _2467 : (isnan(_2467) ? 1.0 : min(_2467, 1.0));
    uint _2480 = _2453 + 4u;
    float _2489 = isnan(1.0) ? _2466 : (isnan(_2466) ? 1.0 : min(_2466, 1.0));
    uint _2493 = _2453 | 1u;
    float _2504 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_944, _945, _946));
    float _2507 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_944, _945, _946));
    float _4828 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _4839 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2512 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * 0.3183098733425140380859375;
    float _2514 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * 0.3183098733425140380859375;
    float _2521 = ((cbLight._m0[_2470].x * _2476) * _2514) + (((cbLight._m0[_2480].x * _2442) * _2489) * _2512);
    float _2522 = ((_2476 * cbLight._m0[_2470].y) * _2514) + (((cbLight._m0[_2480].y * _2444) * _2489) * _2512);
    float _2523 = ((_2476 * cbLight._m0[_2470].z) * _2514) + (((cbLight._m0[_2480].z * _2446) * _2489) * _2512);
    uvec4 _2527 = floatBitsToUint(cbLight._m0[_2453 + 12u]);
    bool _2529 = _2527.x == 0u;
    float _2631;
    float _2633;
    float _2635;
    if (_2529)
    {
        _2631 = _2521;
        _2633 = _2522;
        _2635 = _2523;
    }
    else
    {
        uint _2639 = _2453 + 6u;
        float _2655 = (dot(vec3(cbLight._m0[_2453 + 2u].xyz), vec3(_944, _945, _946)) * 0.5) + 0.5;
        float _2656 = _2655 * _2655;
        float _4850 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2657 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2658 = isnan(1.0) ? _2468 : (isnan(_2468) ? 1.0 : min(_2468, 1.0));
        _2631 = (((cbLight._m0[_2639].x * 0.3183098733425140380859375) * _2657) * _2658) + _2521;
        _2633 = (((cbLight._m0[_2639].y * 0.3183098733425140380859375) * _2657) * _2658) + _2522;
        _2635 = (((cbLight._m0[_2639].z * 0.3183098733425140380859375) * _2657) * _2658) + _2523;
    }
    bool _2638 = _2527.y == 0u;
    float _2693;
    float _2695;
    float _2697;
    if (_2638)
    {
        _2693 = _2631;
        _2695 = _2633;
        _2697 = _2635;
    }
    else
    {
        uint _2866 = _2453 + 7u;
        float _2882 = (dot(vec3(cbLight._m0[_2453 + 3u].xyz), vec3(_944, _945, _946)) * 0.5) + 0.5;
        float _2883 = _2882 * _2882;
        float _4866 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2884 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2885 = isnan(1.0) ? _2469 : (isnan(_2469) ? 1.0 : min(_2469, 1.0));
        _2693 = (((cbLight._m0[_2866].x * 0.3183098733425140380859375) * _2884) * _2885) + _2631;
        _2695 = (((cbLight._m0[_2866].y * 0.3183098733425140380859375) * _2884) * _2885) + _2633;
        _2697 = (((cbLight._m0[_2866].z * 0.3183098733425140380859375) * _2884) * _2885) + _2635;
    }
    uint _2700 = _2453 + 8u;
    float _2713 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _947) * 0.949999988079071044921875);
    float _2714 = _2713 * _2713;
    float _2715 = cbLight._m0[_2453].x + _1024;
    float _2716 = cbLight._m0[_2453].y + _1025;
    float _2717 = cbLight._m0[_2453].z + _1026;
    float _2721 = inversesqrt(dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717)));
    float _2722 = _2721 * _2715;
    float _2723 = _2721 * _2716;
    float _2724 = _2721 * _2717;
    float _2725 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2453].xyz));
    float _4882 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2728 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
    float _4893 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _2729 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
    float _2730 = dot(vec3(_944, _945, _946), vec3(_2722, _2723, _2724));
    float _4904 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2733 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
    float _2734 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2722, _2723, _2724));
    float _4915 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2738 = _2714 * _2714;
    float _2742 = ((_2733 * _2733) * (_2738 + (-1.0))) + 1.0;
    float _2750 = exp2(log2(1.0 - (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) * 5.0);
    float _2751 = 0.959999978542327880859375 - _1103;
    float _2753 = 0.959999978542327880859375 - _1104;
    float _2754 = 0.959999978542327880859375 - _1105;
    float _2761 = 1.0 - _2714;
    float _2772 = (0.5 / (((_2729 * ((_2728 * _2761) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2729 * _2761) + _2714) * _2728))) * _2728;
    float _4926 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2774 = (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2738 / ((_2742 * _2742) * 3.141590118408203125));
    uint _2788 = _2453 + 9u;
    float _2799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _947) * 0.949999988079071044921875);
    float _2800 = _2799 * _2799;
    float _2801 = cbLight._m0[_2493].x + _1024;
    float _2802 = cbLight._m0[_2493].y + _1025;
    float _2803 = cbLight._m0[_2493].z + _1026;
    float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
    float _2808 = _2807 * _2801;
    float _2809 = _2807 * _2802;
    float _2810 = _2807 * _2803;
    float _2811 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2493].xyz));
    float _4937 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
    float _2814 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
    float _2815 = dot(vec3(_944, _945, _946), vec3(_2808, _2809, _2810));
    float _4948 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
    float _2818 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
    float _2819 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2808, _2809, _2810));
    float _4959 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2823 = _2800 * _2800;
    float _2827 = ((_2818 * _2818) * (_2823 + (-1.0))) + 1.0;
    float _2834 = exp2(log2(1.0 - (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0)))) * 5.0);
    float _2841 = 1.0 - _2800;
    float _2851 = (0.5 / (((_2729 * ((_2814 * _2841) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2729 * _2841) + _2800) * _2814))) * _2814;
    float _4970 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2853 = (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0))) * (_2823 / ((_2827 * _2827) * 3.141590118408203125));
    float _2863 = (((((_2834 * _2751) + _1106) * cbLight._m0[_2788].x) * _2853) * _2476) + ((((cbLight._m0[_2700].x * _2442) * ((_2750 * _2751) + _1106)) * _2774) * _2489);
    float _2864 = (((((_2834 * _2753) + _1108) * cbLight._m0[_2788].y) * _2853) * _2476) + ((((cbLight._m0[_2700].y * _2444) * ((_2750 * _2753) + _1108)) * _2774) * _2489);
    float _2865 = (((((_2834 * _2754) + _1109) * cbLight._m0[_2788].z) * _2853) * _2476) + ((((cbLight._m0[_2700].z * _2446) * ((_2750 * _2754) + _1109)) * _2774) * _2489);
    float _2921;
    float _2923;
    float _2925;
    if (_2529)
    {
        _2921 = _2863;
        _2923 = _2864;
        _2925 = _2865;
    }
    else
    {
        uint _2927 = _2453 + 2u;
        uint _2931 = _2453 + 10u;
        float _2945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2927].w)) * _947) * 0.949999988079071044921875);
        float _2946 = _2945 * _2945;
        float _2947 = cbLight._m0[_2927].x + _1024;
        float _2948 = cbLight._m0[_2927].y + _1025;
        float _2949 = cbLight._m0[_2927].z + _1026;
        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
        float _2954 = _2953 * _2947;
        float _2955 = _2953 * _2948;
        float _2956 = _2953 * _2949;
        float _2957 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2927].xyz));
        float _4981 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2960 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
        float _2961 = dot(vec3(_944, _945, _946), vec3(_2954, _2955, _2956));
        float _4992 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2964 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
        float _2965 = dot(vec3(cbLight._m0[_2927].xyz), vec3(_2954, _2955, _2956));
        float _5003 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2969 = _2946 * _2946;
        float _2973 = ((_2964 * _2964) * (_2969 + (-1.0))) + 1.0;
        float _2980 = exp2(log2(1.0 - (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0)))) * 5.0);
        float _2987 = 1.0 - _2946;
        float _2997 = (0.5 / (((_2729 * ((_2960 * _2987) + _2946)) + 9.9999999392252902907785028219223e-09) + (((_2729 * _2987) + _2946) * _2960))) * _2960;
        float _5014 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _2999 = (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_2969 / ((_2973 * _2973) * 3.141590118408203125));
        float _3000 = isnan(1.0) ? _2468 : (isnan(_2468) ? 1.0 : min(_2468, 1.0));
        _2921 = (((((_2980 * _2751) + _1106) * cbLight._m0[_2931].x) * _2999) * _3000) + _2863;
        _2923 = (((((_2980 * _2753) + _1108) * cbLight._m0[_2931].y) * _2999) * _3000) + _2864;
        _2925 = (((((_2980 * _2754) + _1109) * cbLight._m0[_2931].z) * _2999) * _3000) + _2865;
    }
    float _3031;
    float _3033;
    float _3035;
    if (_2638)
    {
        _3031 = _2921;
        _3033 = _2923;
        _3035 = _2925;
    }
    else
    {
        uint _3042 = _2453 + 3u;
        uint _3046 = _2453 + 11u;
        float _3060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3042].w)) * _947) * 0.949999988079071044921875);
        float _3061 = _3060 * _3060;
        float _3062 = cbLight._m0[_3042].x + _1024;
        float _3063 = cbLight._m0[_3042].y + _1025;
        float _3064 = cbLight._m0[_3042].z + _1026;
        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
        float _3069 = _3068 * _3062;
        float _3070 = _3068 * _3063;
        float _3071 = _3068 * _3064;
        float _3072 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_3042].xyz));
        float _5030 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
        float _3075 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
        float _3076 = dot(vec3(_944, _945, _946), vec3(_3069, _3070, _3071));
        float _5041 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        float _3079 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
        float _3080 = dot(vec3(cbLight._m0[_3042].xyz), vec3(_3069, _3070, _3071));
        float _5052 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        float _3084 = _3061 * _3061;
        float _3088 = ((_3079 * _3079) * (_3084 + (-1.0))) + 1.0;
        float _3095 = exp2(log2(1.0 - (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0)))) * 5.0);
        float _3102 = 1.0 - _3061;
        float _3112 = (0.5 / (((_2729 * ((_3075 * _3102) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_2729 * _3102) + _3061) * _3075))) * _3075;
        float _5063 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
        float _3114 = (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0))) * (_3084 / ((_3088 * _3088) * 3.141590118408203125));
        float _3115 = isnan(1.0) ? _2469 : (isnan(_2469) ? 1.0 : min(_2469, 1.0));
        _3031 = (((((_3095 * _2751) + _1106) * cbLight._m0[_3046].x) * _3114) * _3115) + _2921;
        _3033 = (((((_3095 * _2753) + _1108) * cbLight._m0[_3046].y) * _3114) * _3115) + _2923;
        _3035 = (((((_3095 * _2754) + _1109) * cbLight._m0[_3046].z) * _3114) * _3115) + _2925;
    }
    float _3181;
    float _3183;
    float _3185;
    float _3187;
    float _3189;
    float _3191;
    if (_2451.y == 0u)
    {
        uvec4 _3136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3137 = _3136.x;
        uint _3148 = uint((float(_3136.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1045) / _3137))) + floor(float(uint(cbSceneParam._m0[85u].x * _1044) / _3137)));
        float _3158 = (log2(_2229 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3159 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
        uint _3162 = uint(isnan(14.0) ? _3159 : (isnan(_3159) ? 14.0 : min(_3159, 14.0)));
        uvec4 _3167 = texelFetch(g_lightClusterGridBuffer, int(((_3162 << 2u) + (_3148 << 6u)) >> 2u));
        uint _3168 = _3167.x;
        uint _3169 = _3136.z;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        if (((((1u << ((_3169 >> 4u) & 15u)) + 4294967295u) & _3168) == 0u) || ((_3169 & 240u) == 0u))
        {
            _3248 = 0.0;
            _3250 = 0.0;
            _3252 = 0.0;
            _3254 = 0.0;
            _3256 = 0.0;
            _3258 = 0.0;
        }
        else
        {
            float _3249;
            float _3251;
            float _3253;
            float _3255;
            float _3257;
            float _3259;
            float _3401 = 0.0;
            float _3402 = 0.0;
            float _3403 = 0.0;
            float _3404 = 0.0;
            float _3405 = 0.0;
            float _3406 = 0.0;
            uint _3407 = 0u;
            uint _3416;
            bool _3417;
            for (;;)
            {
                _3416 = texelFetch(g_lightClassification, int((((_3162 << 5u) + (_3148 << 9u)) + (_3407 << 2u)) >> 2u)).x;
                _3417 = _3416 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3417)
                {
                    frontier_phi_71_pred = _3406;
                    frontier_phi_71_pred_1 = _3405;
                    frontier_phi_71_pred_2 = _3404;
                    frontier_phi_71_pred_3 = _3403;
                    frontier_phi_71_pred_4 = _3402;
                    frontier_phi_71_pred_5 = _3401;
                }
                else
                {
                    float _3546;
                    float _3547;
                    float _3548;
                    float _3549;
                    float _3550;
                    float _3551;
                    uint _3552;
                    _3546 = _3401;
                    _3547 = _3402;
                    _3548 = _3403;
                    _3549 = _3404;
                    _3550 = _3405;
                    _3551 = _3406;
                    _3552 = _3416;
                    float _3473;
                    float _3474;
                    float _3475;
                    float _3476;
                    float _3477;
                    float _3478;
                    for (;;)
                    {
                        uint _3556 = uint(findLSB(_3552)) + (_3407 << 5u);
                        uint _3553 = (_3552 + 4294967295u) & _3552;
                        uint _3558 = _3556 * 48u;
                        vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3558)).x, texelFetch(g_PointLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3558 + 3u)).x));
                        uint _3578 = (_3556 * 48u) + 4u;
                        vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3578)).x, texelFetch(g_PointLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3578 + 3u)).x));
                        uint _3597 = (_3556 * 48u) + 8u;
                        vec3 _3608 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3597)).x, texelFetch(g_PointLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3597 + 2u)).x));
                        float _3612 = _3572.x - _2227;
                        float _3613 = _3572.y - _2228;
                        float _3614 = _3572.z - _2229;
                        float _3615 = dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614));
                        float _3618 = inversesqrt(_3615);
                        float _3619 = _3618 * _3612;
                        float _3620 = _3618 * _3613;
                        float _3621 = _3618 * _3614;
                        float _3622 = dot(vec3(_1063, _1066, _1069), vec3(_3619, _3620, _3621));
                        float _3627 = 1.0 - (_3615 * _3572.w);
                        float _5089 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3628 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                        float _3629 = sqrt(_3615) * _3591.w;
                        float _3632 = 1.39999997615814208984375 / (_3629 + 1.39999997615814208984375);
                        float _3633 = _3632 * _3632;
                        float _3636 = ((1.0 - _3633) * _3622) + _3633;
                        float _3639 = _3629 * _3629;
                        float _3643 = ((isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0))) * _3628) / ((_3639 * 0.699999988079071044921875) + 1.0);
                        float _3647 = (-0.0) - _2227;
                        float _3648 = (-0.0) - _2228;
                        float _3649 = (-0.0) - _2229;
                        float _3653 = inversesqrt(dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649)));
                        float _3654 = _3653 * _3647;
                        float _3655 = _3653 * _3648;
                        float _3656 = _3653 * _3649;
                        float _3663 = exp2(log2(1.0 / ((_3639 * 3.5) + 5.0)) * 0.25);
                        float _3664 = 1.0 - _1138;
                        float _3671 = sqrt(1.0 - ((1.0 - (_3664 * _3664)) * (1.0 - (_3663 * _3663))));
                        float _3672 = _3671 * _3671;
                        float _3673 = _3672 * _3672;
                        float _3674 = _3654 + _3619;
                        float _3675 = _3655 + _3620;
                        float _3676 = _3656 + _3621;
                        float _3680 = inversesqrt(dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676)));
                        float _3684 = dot(vec3(_1063, _1066, _1069), vec3(_3654, _3655, _3656));
                        float _5105 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                        float _3687 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
                        float _3688 = dot(vec3(_1063, _1066, _1069), vec3(_3680 * _3674, _3680 * _3675, _3680 * _3676));
                        float _5116 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                        float _3691 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                        float _3695 = ((_3691 * _3691) * (_3673 + (-1.0))) + 1.0;
                        float _3696 = _3632 * _3672;
                        float _3697 = _3696 * _3696;
                        float _3700 = ((1.0 - _3697) * _3622) + _3697;
                        float _5127 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                        float _3701 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                        float _3702 = 1.0 - _3672;
                        float _3712 = (0.5 / (((_3701 * ((_3687 * _3702) + _3672)) + 9.9999999392252902907785028219223e-09) + (((_3701 * _3702) + _3672) * _3687))) * _3701;
                        float _5138 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                        float _3723 = (((_3673 * 3.1415927410125732421875) * (isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0)))) / ((_3695 * _3695) * ((_3639 * 2.1991131305694580078125) + 3.141590118408203125))) * _3628;
                        _3476 = (_3643 * _3591.x) + _3549;
                        _3477 = (_3643 * _3591.y) + _3550;
                        _3478 = (_3643 * _3591.z) + _3551;
                        _3473 = (_3723 * _3608.x) + _3546;
                        _3474 = (_3723 * _3608.y) + _3547;
                        _3475 = (_3723 * _3608.z) + _3548;
                        if (_3553 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3546 = _3473;
                            _3547 = _3474;
                            _3548 = _3475;
                            _3549 = _3476;
                            _3550 = _3477;
                            _3551 = _3478;
                            _3552 = _3553;
                        }
                    }
                    frontier_phi_71_pred = _3478;
                    frontier_phi_71_pred_1 = _3477;
                    frontier_phi_71_pred_2 = _3476;
                    frontier_phi_71_pred_3 = _3475;
                    frontier_phi_71_pred_4 = _3474;
                    frontier_phi_71_pred_5 = _3473;
                }
                _3259 = frontier_phi_71_pred;
                _3257 = frontier_phi_71_pred_1;
                _3255 = frontier_phi_71_pred_2;
                _3253 = frontier_phi_71_pred_3;
                _3251 = frontier_phi_71_pred_4;
                _3249 = frontier_phi_71_pred_5;
                uint _3408 = _3407 + 1u;
                if (_3408 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3401 = _3249;
                    _3402 = _3251;
                    _3403 = _3253;
                    _3404 = _3255;
                    _3405 = _3257;
                    _3406 = _3259;
                    _3407 = _3408;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3248 = _3249;
            _3250 = _3251;
            _3252 = _3253;
            _3254 = _3255;
            _3256 = _3257;
            _3258 = _3259;
        }
        uvec4 _3262 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3263 = _3262.z;
        uint _3265 = (_3263 >> 8u) & 15u;
        float _3369;
        float _3371;
        float _3373;
        float _3375;
        float _3377;
        float _3379;
        if (((4294967295u << _3265) & _3168) == 0u)
        {
            _3369 = _3248;
            _3371 = _3250;
            _3373 = _3252;
            _3375 = _3254;
            _3377 = _3256;
            _3379 = _3258;
        }
        else
        {
            float _3394 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
            float _3395 = _3394 * _2227;
            float _3396 = _3394 * _2228;
            float _3397 = _3394 * _2229;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3265 < ((_3263 >> 12u) & 15u))
            {
                float _3370;
                float _3372;
                float _3374;
                float _3376;
                float _3378;
                float _3380;
                float _3529 = _3248;
                float _3530 = _3250;
                float _3531 = _3252;
                float _3532 = _3254;
                float _3533 = _3256;
                float _3534 = _3258;
                uint _3535 = _3265;
                uint _3544;
                bool _3545;
                for (;;)
                {
                    _3544 = texelFetch(g_lightClassification, int((((_3162 << 5u) + (_3148 << 9u)) + (_3535 << 2u)) >> 2u)).x;
                    _3545 = _3544 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3545)
                    {
                        frontier_phi_82_pred = _3534;
                        frontier_phi_82_pred_1 = _3533;
                        frontier_phi_82_pred_2 = _3532;
                        frontier_phi_82_pred_3 = _3531;
                        frontier_phi_82_pred_4 = _3530;
                        frontier_phi_82_pred_5 = _3529;
                    }
                    else
                    {
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _4030;
                        float _4031;
                        float _4032;
                        float _4033;
                        float _4034;
                        float _4035;
                        float _3750 = _3529;
                        float _3751 = _3530;
                        float _3752 = _3531;
                        float _3753 = _3532;
                        float _3754 = _3533;
                        float _3755 = _3534;
                        uint _3756 = _3544;
                        uint _3757;
                        vec4 _3782;
                        float _3783;
                        vec4 _3798;
                        vec3 _3810;
                        vec4 _3825;
                        vec4 _3840;
                        float _3886;
                        bool _3887;
                        for (;;)
                        {
                            uint _3767 = ((_3535 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3756));
                            _3757 = (_3756 + 4294967295u) & _3756;
                            uint _3769 = _3767 * 40u;
                            _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            _3783 = _3782.w;
                            uint _3785 = (_3767 * 40u) + 4u;
                            _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            uint _3800 = (_3767 * 40u) + 8u;
                            _3810 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x));
                            uint _3812 = (_3767 * 40u) + 16u;
                            _3825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 3u)).x));
                            uint _3827 = (_3767 * 40u) + 20u;
                            _3840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 3u)).x));
                            uint _3842 = (_3767 * 40u) + 24u;
                            vec4 _3855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 3u)).x));
                            uint _3861 = (_3767 * 40u) + 28u;
                            vec4 _3874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 3u)).x));
                            _3886 = fma(_2229, _3874.z, fma(_2228, _3874.y, _3874.x * _2227)) + _3874.w;
                            _3887 = !((fma(_2229, _3855.z, fma(_2228, _3855.y, _3855.x * _2227)) + _3855.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3887)
                            {
                                float _3914 = _3782.x - _2227;
                                float _3915 = _3782.y - _2228;
                                float _3916 = _3782.z - _2229;
                                float _3917 = dot(vec3(_3914, _3915, _3916), vec3(_3914, _3915, _3916));
                                float _3920 = inversesqrt(_3917);
                                float _3921 = _3920 * _3914;
                                float _3922 = _3920 * _3915;
                                float _3923 = _3920 * _3916;
                                float _3927 = 1.0 - (_3917 / (_3783 * _3783));
                                float _5149 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3928 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
                                float _3932 = sqrt(_3917) * _3798.w;
                                float _3934 = 1.39999997615814208984375 / (_3932 + 1.39999997615814208984375);
                                float _3935 = _3934 * _3934;
                                float _3938 = ((1.0 - _3935) * dot(vec3(_3921, _3922, _3923), vec3(_1063, _1066, _1069))) + _3935;
                                float _3941 = _3932 * _3932;
                                float _3945 = (fma(_2229, _3825.z, fma(_2228, _3825.y, _3825.x * _2227)) + _3825.w) / _3886;
                                float _3946 = (fma(_2229, _3840.z, fma(_2228, _3840.y, _3840.x * _2227)) + _3840.w) / _3886;
                                float _3950 = 1.0 - dot(vec2(_3945, _3946), vec2(_3945, _3946));
                                float _5165 = isnan(0.0) ? _3950 : (isnan(_3950) ? 0.0 : max(_3950, 0.0));
                                float _3951 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
                                float _3952 = _3951 * (((isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0))) * _3928) / ((_3941 * 0.699999988079071044921875) + 1.0));
                                float _3964 = exp2(log2(1.0 / ((_3941 * 3.5) + 5.0)) * 0.25);
                                float _3965 = 1.0 - _1138;
                                float _3972 = sqrt(1.0 - ((1.0 - (_3965 * _3965)) * (1.0 - (_3964 * _3964))));
                                float _3973 = _3972 * _3972;
                                float _3974 = _3973 * _3973;
                                float _3975 = _3921 - _3395;
                                float _3976 = _3922 - _3396;
                                float _3977 = _3923 - _3397;
                                float _3981 = inversesqrt(dot(vec3(_3975, _3976, _3977), vec3(_3975, _3976, _3977)));
                                float _3985 = dot(vec3(_1063, _1066, _1069), vec3((-0.0) - _3395, (-0.0) - _3396, (-0.0) - _3397));
                                float _5176 = isnan(0.0) ? _3985 : (isnan(_3985) ? 0.0 : max(_3985, 0.0));
                                float _3988 = isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0));
                                float _3989 = dot(vec3(_1063, _1066, _1069), vec3(_3981 * _3975, _3981 * _3976, _3981 * _3977));
                                float _5187 = isnan(0.0) ? _3989 : (isnan(_3989) ? 0.0 : max(_3989, 0.0));
                                float _3992 = isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0));
                                float _3996 = ((_3992 * _3992) * (_3974 + (-1.0))) + 1.0;
                                float _3997 = _3934 * _3973;
                                float _3998 = _3997 * _3997;
                                float _4004 = ((1.0 - _3998) * dot(vec3(_1063, _1066, _1069), vec3(_3921, _3922, _3923))) + _3998;
                                float _5198 = isnan(0.0) ? _4004 : (isnan(_4004) ? 0.0 : max(_4004, 0.0));
                                float _4005 = isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0));
                                float _4006 = 1.0 - _3973;
                                float _4016 = (0.5 / (((_4005 * ((_3988 * _4006) + _3973)) + 9.9999999392252902907785028219223e-09) + (((_4005 * _4006) + _3973) * _3988))) * _4005;
                                float _5209 = isnan(0.0) ? _4016 : (isnan(_4016) ? 0.0 : max(_4016, 0.0));
                                float _4026 = (_3951 * _3928) * (((_3974 * 3.1415927410125732421875) * (isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0)))) / ((_3996 * _3996) * ((_3941 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3952 * _3798.z;
                                frontier_phi_88_pred_1 = _3952 * _3798.y;
                                frontier_phi_88_pred_2 = _3952 * _3798.x;
                                frontier_phi_88_pred_3 = _4026 * _3810.z;
                                frontier_phi_88_pred_4 = _4026 * _3810.y;
                                frontier_phi_88_pred_5 = _4026 * _3810.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4035 = frontier_phi_88_pred;
                            _4034 = frontier_phi_88_pred_1;
                            _4033 = frontier_phi_88_pred_2;
                            _4032 = frontier_phi_88_pred_3;
                            _4031 = frontier_phi_88_pred_4;
                            _4030 = frontier_phi_88_pred_5;
                            _3740 = _4033 + _3753;
                            _3741 = _4034 + _3754;
                            _3742 = _4035 + _3755;
                            _3737 = _4030 + _3750;
                            _3738 = _4031 + _3751;
                            _3739 = _4032 + _3752;
                            if (_3757 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3750 = _3737;
                                _3751 = _3738;
                                _3752 = _3739;
                                _3753 = _3740;
                                _3754 = _3741;
                                _3755 = _3742;
                                _3756 = _3757;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3742;
                        frontier_phi_82_pred_1 = _3741;
                        frontier_phi_82_pred_2 = _3740;
                        frontier_phi_82_pred_3 = _3739;
                        frontier_phi_82_pred_4 = _3738;
                        frontier_phi_82_pred_5 = _3737;
                    }
                    _3380 = frontier_phi_82_pred;
                    _3378 = frontier_phi_82_pred_1;
                    _3376 = frontier_phi_82_pred_2;
                    _3374 = frontier_phi_82_pred_3;
                    _3372 = frontier_phi_82_pred_4;
                    _3370 = frontier_phi_82_pred_5;
                    uint _3536 = _3535 + 1u;
                    if (_3536 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3529 = _3370;
                        _3530 = _3372;
                        _3531 = _3374;
                        _3532 = _3376;
                        _3533 = _3378;
                        _3534 = _3380;
                        _3535 = _3536;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3376;
                frontier_phi_63_64_ladder_1 = _3380;
                frontier_phi_63_64_ladder_2 = _3378;
                frontier_phi_63_64_ladder_3 = _3374;
                frontier_phi_63_64_ladder_4 = _3372;
                frontier_phi_63_64_ladder_5 = _3370;
            }
            else
            {
                frontier_phi_63_64_ladder = _3254;
                frontier_phi_63_64_ladder_1 = _3258;
                frontier_phi_63_64_ladder_2 = _3256;
                frontier_phi_63_64_ladder_3 = _3252;
                frontier_phi_63_64_ladder_4 = _3250;
                frontier_phi_63_64_ladder_5 = _3248;
            }
            _3369 = frontier_phi_63_64_ladder_5;
            _3371 = frontier_phi_63_64_ladder_4;
            _3373 = frontier_phi_63_64_ladder_3;
            _3375 = frontier_phi_63_64_ladder;
            _3377 = frontier_phi_63_64_ladder_2;
            _3379 = frontier_phi_63_64_ladder_1;
        }
        float _3384 = isnan(1.0) ? _1122 : (isnan(_1122) ? 1.0 : min(_1122, 1.0));
        _3181 = (_3384 * _3375) + _2693;
        _3183 = (_3384 * _3377) + _2695;
        _3185 = (_3384 * _3379) + _2697;
        _3187 = ((_3369 * _1106) * _3384) + _3031;
        _3189 = ((_3371 * _1108) * _3384) + _3033;
        _3191 = ((_3373 * _1109) * _3384) + _3035;
    }
    else
    {
        _3181 = _2693;
        _3183 = _2695;
        _3185 = _2697;
        _3187 = _3031;
        _3189 = _3033;
        _3191 = _3035;
    }
    float _5225 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _5236 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _5247 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _3208 = ((isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0))) * (_3181 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1122))) + ((_3187 + ((isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0))) * _1961)) * cbPerFrame._m0[3u].x);
    float _3209 = ((isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0))) * (_3183 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1122))) + ((_3189 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1961)) * cbPerFrame._m0[3u].x);
    float _3210 = ((isnan(1.0) ? _5247 : (isnan(_5247) ? 1.0 : min(_5247, 1.0))) * (_3185 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1122))) + ((_3191 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1961)) * cbPerFrame._m0[3u].x);
    uint _3211 = _286 + 6u;
    float _3219 = _1044 / cbSceneParam._m0[86u].x;
    float _3220 = _1045 / cbSceneParam._m0[86u].y;
    vec4 _3234 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3219, _3220, (log2((isnan(cbSceneParam._m0[77u].w) ? _966 : (isnan(_966) ? cbSceneParam._m0[77u].w : min(_966, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3236 = _3234.x;
    float _3237 = _3234.y;
    float _3238 = _3234.z;
    float _3239 = _3234.w;
    float _3311;
    float _3313;
    float _3315;
    float _3317;
    if (_966 > cbSceneParam._m0[78u].w)
    {
        float _3273 = isnan(_966) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _966 : min(cbSceneParam._m0[80u].w, _966));
        float _3274 = _3273 / _966;
        float _3285 = _3274 * _1017;
        float _3286 = _1018 * _3274;
        float _3287 = (-0.0) - _3286;
        float _3289 = _3274 * _1019;
        float _3291 = (cbSceneParam._m0[77u].w * _3287) / _3273;
        float _3292 = _3291 + cbSceneParam._m0[79u].w;
        float _3293 = cbSceneParam._m0[79u].w - _3286;
        float _3299 = sqrt(((_3285 * _3285) + (_3286 * _3286)) + (_3289 * _3289));
        float _3302 = (1.0 - (cbSceneParam._m0[77u].w / _3273)) * _3299;
        float _3307 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3309 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3486;
        if (abs((_3287 - _3291) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3486 = ((((_3292 > 0.0) ? exp2(_3307 * _3292) : (2.0 - exp2(_3309 * _3292))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3302;
        }
        else
        {
            float _3430 = 1.0 / cbSceneParam._m0[80u].x;
            float _3431 = isnan(_3293) ? _3292 : (isnan(_3292) ? _3293 : max(_3292, _3293));
            float _3432 = isnan(_3293) ? _3292 : (isnan(_3292) ? _3293 : min(_3292, _3293));
            float _3441 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : min(_3431, 0.0));
            float _3442 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : min(_3432, 0.0));
            _3486 = ((abs(_3299 / _3287) * cbSceneParam._m0[80u].y) * ((((_3441 - _3442) * 2.0) - ((exp2(_3307 * (isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0)))) - exp2(_3307 * (isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))))) * _3430)) - ((exp2(_3309 * _3441) - exp2(_3309 * _3442)) * _3430))) + (_3302 * cbSceneParam._m0[80u].z);
        }
        vec4 _3488 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3219, _3220, 1.0), 0.0);
        float _3497 = exp2((_3486 * (-1.44269502162933349609375)) * (1.0 - _3488.w));
        float _3498 = log2(_3497);
        float _3514 = log2(_3239);
        _3311 = (exp2(_3514 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3498 * cbSceneParam._m0[78u].x)) * _3488.x) / cbSceneParam._m0[78u].x)) + _3236;
        _3313 = (exp2(_3514 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3498 * cbSceneParam._m0[78u].y)) * _3488.y) / cbSceneParam._m0[78u].y)) + _3237;
        _3315 = (exp2(_3514 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3498 * cbSceneParam._m0[78u].z)) * _3488.z) / cbSceneParam._m0[78u].z)) + _3238;
        _3317 = _3497 * _3239;
    }
    else
    {
        _3311 = _3236;
        _3313 = _3237;
        _3315 = _3238;
        _3317 = _3239;
    }
    bool _3524;
    vec4 _3327;
    vec4 _3349;
    float _3351;
    float _3355;
    float _3356;
    float _3357;
    float _3358;
    bool _3368;
    for (;;)
    {
        _3327 = cbMatDynParam._m0[0u];
        float _3329 = roundEven(_3327.y);
        bool _3330 = _3329 == 3.0;
        float _3331 = log2(_3317);
        float _3338 = exp2(_3331 * cbSceneParam._m0[78u].x) * _3208;
        float _3339 = exp2(_3331 * cbSceneParam._m0[78u].y) * _3209;
        float _3340 = exp2(_3331 * cbSceneParam._m0[78u].z) * _3210;
        float _3347 = _1033 + (-0.5);
        _3349 = cbMtdParam._m0[1u];
        _3351 = _3349.y * _3347;
        float _3354 = (_3329 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3355 = _3354 * (_3330 ? _3338 : (_3338 + (cbSceneParam._m0[72u].w * _3311)));
        _3356 = _3354 * (_3330 ? _3339 : (_3339 + (cbSceneParam._m0[72u].w * _3313)));
        _3357 = _3354 * (_3330 ? _3340 : (_3340 + (cbSceneParam._m0[72u].w * _3315)));
        _3358 = _3347 * 0.999000012874603271484375;
        _3368 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3368)
        {
            if ((cbInstanceData._m0[_286 + 7u].x + _3358) < 0.5)
            {
                _3524 = true;
                break;
            }
        }
        uint _3465 = _1082 + uint(_3327.w);
        if ((cbInstanceData._m0[_3465].w < 1.0) && ((cbInstanceData._m0[_3465].w + _3358) < 0.5))
        {
            _3524 = true;
            break;
        }
        if ((_3351 + 1.0) < _3349.x)
        {
            _3524 = true;
            break;
        }
        _3524 = false;
        break;
    }
    float _3728;
    if (_3524)
    {
        discard_state = true;
        _3728 = 0.0;
    }
    else
    {
        _3728 = cbInstanceData._m0[_3211].w;
    }
    SV_Target.x = _3355;
    SV_Target.y = _3356;
    SV_Target.z = _3357;
    SV_Target.w = _3728;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3211].w;
    discard_exit();
}


