#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1203;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _378 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _395 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_366 - _378) * cbMtdParam._m0[23u].w) + _378) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3533 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _403 = (_396 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _404 = (_396 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _405 = (_396 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _435 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _448 = ((_418.z - _439) * _396) + _439;
    float _451 = ((((_418.x - _437) * _396) + _437) * 2.0) + (-1.0);
    float _453 = ((((_418.y - _438) * _396) + _438) * 2.0) + (-1.0);
    float _454 = dot(vec2(_451, _453), vec2(_451, _453));
    float _3544 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))));
    vec4 _475 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _487 = (((_475.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _451;
    float _488 = (((_475.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _453;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _502 = _500.x;
    float _503 = 1.0 - _502;
    float _532 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_502 - _503) * cbMtdParam._m0[24u].w) + _503) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3555 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _541 = ((((cbMtdParam._m0[10u].x - _403) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _533) + _403;
    float _542 = ((((cbMtdParam._m0[10u].y - _404) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _533) + _404;
    float _543 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _405)) * _533) + _405;
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _571 = _569.x;
    float _589 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _571) * _396) + _571;
    float _593 = ((_555.x - _589) * cbMtdParam._m0[19u].z) + _589;
    float _595 = _593 - (_593 * _533);
    float _599 = (cbMtdParam._m0[19u].w * (_475.z - _448)) + _448;
    float _603 = ((cbMtdParam._m0[23u].x - _599) * _533) + _599;
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _628 = (_622.x * 2.0) + (-1.0);
    float _629 = (_622.y * 2.0) + (-1.0);
    float _630 = dot(vec2(_628, _629), vec2(_628, _629));
    float _3566 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _646 = (_533 * (((cbMtdParam._m0[22u].z * _487) - _487) + _628)) + _487;
    float _647 = (_533 * (((cbMtdParam._m0[22u].z * _488) - _488) + _629)) + _488;
    float _648 = (_533 * (sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) - _459)) + _459;
    float _650 = cbMtdParam._m0[22u].x + _475.w;
    float _653 = fma(_648, _232 * NORMAL.x, fma(_647, _239 * TANGENT.x, (_225 * _217) * _646));
    float _656 = fma(_648, _232 * NORMAL.y, fma(_647, _239 * TANGENT.y, (_225 * _218) * _646));
    float _659 = fma(_648, _232 * NORMAL.z, fma(_647, _239 * TANGENT.z, (_225 * _219) * _646));
    float _663 = inversesqrt(dot(vec3(_653, _656, _659), vec3(_653, _656, _659)));
    float _664 = _663 * _653;
    float _665 = _663 * _656;
    float _666 = _663 * _659;
    float _3577 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _667 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _3599 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3610 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3621 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3632 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _672 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _736 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _726);
    float _737 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _726);
    float _738 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _726);
    float _742 = inversesqrt(dot(vec3(_736, _737, _738), vec3(_736, _737, _738)));
    float _743 = _736 * _742;
    float _744 = _737 * _742;
    float _745 = _738 * _742;
    float _751 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _752 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _770 = fma(_666, cbSceneParam._m0[5u].z, fma(_665, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _664));
    float _773 = fma(_666, cbSceneParam._m0[6u].z, fma(_665, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _664));
    float _776 = fma(_666, cbSceneParam._m0[7u].z, fma(_665, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _664));
    uint _790 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _796 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_790].x;
    float _797 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_790].y;
    float _798 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_790].z;
    float _3643 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _802 = 1.0 - _672;
    float _803 = _799 * _802;
    float _804 = _800 * _802;
    float _805 = _801 * _802;
    float _810 = (_799 + (-0.039999999105930328369140625)) * _672;
    float _811 = (_800 + (-0.039999999105930328369140625)) * _672;
    float _812 = (_801 + (-0.039999999105930328369140625)) * _672;
    float _813 = _810 + 0.039999999105930328369140625;
    float _815 = _811 + 0.039999999105930328369140625;
    float _816 = _812 + 0.039999999105930328369140625;
    vec4 _825 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _751, cbSceneParam._m0[86u].y * _752));
    float _829 = ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * TEXCOORD_5.w) * _825.x;
    float _830 = dot(vec3(_664, _665, _666), vec3(_743, _744, _745));
    float _833 = _830 * 2.0;
    float _837 = (_833 * _664) - _743;
    float _838 = (_833 * _665) - _744;
    float _839 = (_833 * _666) - _745;
    float _843 = abs(dot(vec3(_743, _744, _745), vec3(_664, _665, _666)));
    float _3676 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _845 = sqrt(_667);
    float _858 = exp2((_845 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_845 * 3.0));
    float _864 = (1.0 - _858) * ((_845 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _865 = _858 * _845;
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1202;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _927 = fma(_901, cbModelParam._m0[26u].z, fma(_897, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893));
        float _931 = fma(_901, cbModelParam._m0[27u].z, fma(_897, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893));
        float _935 = fma(_901, cbModelParam._m0[28u].z, fma(_897, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893));
        float _960 = _893 + _664;
        float _961 = _897 + _665;
        float _962 = _901 + _666;
        float _972 = fma(_962, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _960)) - _927;
        float _973 = fma(_962, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _960)) - _931;
        float _974 = fma(_962, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _960)) - _935;
        float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
        float _991 = ((_978 * _972) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_927 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_978 * _973) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_931 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_978 * _974) / cbModelParam._m0[34u].z) + ((((((_935 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        float _1030 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_996.x + (-0.5));
        float _1032 = _1030 * (_996.y + (-0.5));
        float _1033 = _1030 * (_996.z + (-0.5));
        float _1040 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1003.x + (-0.5));
        float _1042 = _1040 * (_1003.y + (-0.5));
        float _1043 = _1040 * (_1003.z + (-0.5));
        float _1050 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1010.x + (-0.5));
        float _1052 = _1050 * (_1010.y + (-0.5));
        float _1053 = _1050 * (_1010.z + (-0.5));
        float _1060 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1017.x + (-0.5));
        float _1062 = _1060 * (_1017.y + (-0.5));
        float _1063 = _1060 * (_1017.z + (-0.5));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = _1031 * 0.5;
        float _1068 = _1041 * 0.5;
        float _1069 = _1051 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1084 = (dot(vec3(_664, _665, _666), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1094 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3724 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1096 + 1.0))) + _1101) * _1064;
        float _1111 = _1032 * 0.5;
        float _1112 = _1042 * 0.5;
        float _1113 = _1052 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_664, _665, _666), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3757 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1138 + 1.0))) + _1143) * _1065;
        float _1153 = _1033 * 0.5;
        float _1154 = _1043 * 0.5;
        float _1155 = _1053 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_664, _665, _666), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3790 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1180 + 1.0))) + _1185) * _1066;
        _1202 = _1033;
        _1204 = _1032;
        _1205 = _1031;
        _1206 = _1043;
        _1207 = _1042;
        _1208 = _1041;
        _1209 = _1053;
        _1210 = _1052;
        _1211 = _1051;
        _1212 = _1066;
        _1213 = _1065;
        _1214 = _1064;
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
    }
    else
    {
        _1202 = _1203;
        _1204 = _1203;
        _1205 = _1203;
        _1206 = _1203;
        _1207 = _1203;
        _1208 = _1203;
        _1209 = _1203;
        _1210 = _1203;
        _1211 = _1203;
        _1212 = _1203;
        _1213 = _1203;
        _1214 = _1203;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1242 = fma(_901, cbModelParam._m0[30u].z, fma(_897, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _893));
        float _1246 = fma(_901, cbModelParam._m0[31u].z, fma(_897, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _893));
        float _1250 = fma(_901, cbModelParam._m0[32u].z, fma(_897, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _893));
        float _1273 = _893 + _664;
        float _1274 = _897 + _665;
        float _1275 = _901 + _666;
        float _1285 = fma(_1275, cbModelParam._m0[30u].z, fma(_1274, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1273)) - _1242;
        float _1286 = fma(_1275, cbModelParam._m0[31u].z, fma(_1274, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1273)) - _1246;
        float _1287 = fma(_1275, cbModelParam._m0[32u].z, fma(_1274, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1273)) - _1250;
        float _1291 = inversesqrt(dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287)));
        float _1304 = ((_1291 * _1285) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1242 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1291 * _1286) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1246 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1291 * _1287) / cbModelParam._m0[35u].z) + ((((((_1250 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        float _1341 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1308.x + (-0.5));
        float _1343 = _1341 * (_1308.y + (-0.5));
        float _1344 = _1341 * (_1308.z + (-0.5));
        float _1351 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1315.x + (-0.5));
        float _1353 = _1351 * (_1315.y + (-0.5));
        float _1354 = _1351 * (_1315.z + (-0.5));
        float _1361 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1322.x + (-0.5));
        float _1363 = _1361 * (_1322.y + (-0.5));
        float _1364 = _1361 * (_1322.z + (-0.5));
        float _1371 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1329.x + (-0.5));
        float _1373 = _1371 * (_1329.y + (-0.5));
        float _1374 = _1371 * (_1329.z + (-0.5));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = _1342 * 0.5;
        float _1379 = _1352 * 0.5;
        float _1380 = _1362 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_664, _665, _666), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3853 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1405 + 1.0))) + _1410) * _1375;
        float _1420 = _1343 * 0.5;
        float _1421 = _1353 * 0.5;
        float _1422 = _1363 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_664, _665, _666), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3886 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1447 + 1.0))) + _1452) * _1376;
        float _1462 = _1344 * 0.5;
        float _1463 = _1354 * 0.5;
        float _1464 = _1364 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_664, _665, _666), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _3919 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1489 + 1.0))) + _1494) * _1377;
        _1511 = _1344;
        _1512 = _1343;
        _1513 = _1342;
        _1514 = _1354;
        _1515 = _1353;
        _1516 = _1352;
        _1517 = _1364;
        _1518 = _1363;
        _1519 = _1362;
        _1520 = _1377;
        _1521 = _1376;
        _1522 = _1375;
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
    }
    else
    {
        _1511 = _1203;
        _1512 = _1203;
        _1513 = _1203;
        _1514 = _1203;
        _1515 = _1203;
        _1516 = _1203;
        _1517 = _1203;
        _1518 = _1203;
        _1519 = _1203;
        _1520 = _1203;
        _1521 = _1203;
        _1522 = _1203;
        _1523 = 0.0;
        _1524 = 0.0;
        _1525 = 0.0;
    }
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1215)) + _1215;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1216)) + _1216;
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1217)) + _1217;
    float _1558 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1536, cbSceneParam._m0[89u].y, _1535 * cbSceneParam._m0[89u].x));
    float _1561 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1536, cbSceneParam._m0[90u].y, _1535 * cbSceneParam._m0[90u].x));
    float _1564 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1536, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1535));
    float _1579 = _837 * 0.5;
    float _1580 = _838 * 0.5;
    float _1581 = _839 * 0.5;
    float _1582 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1585 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1588 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1622;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1595 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1202, _1206, _1209, _1212));
        float _1599 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1204, _1207, _1210, _1213));
        float _1603 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1205, _1208, _1211, _1214));
        float _1610 = dot(vec4(cbModelParam._m0[39u]), vec4(_1579, _1580, _1581, 1.0));
        _1622 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1610) ? 0.0 : (isnan(0.0) ? _1610 : max(0.0, _1610))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1622 = 1.0;
    }
    float _1633;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1624 = dot(vec4(cbModelParam._m0[40u]), vec4(_1579, _1580, _1581, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1637 = (_1633 * cbModelParam._m0[1u].x) + (_1622 * (1.0 - cbModelParam._m0[1u].x));
    float _1647 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _667);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1647 : min(cbModelParam._m0[25u].z, _1647));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1697 = fma(_901, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893)) + cbModelParam._m0[13u].w;
        float _1701 = fma(_901, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893)) + cbModelParam._m0[14u].w;
        float _1705 = fma(_901, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893)) + cbModelParam._m0[15u].w;
        float _1708 = fma(_839, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837));
        float _1711 = fma(_839, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837));
        float _1714 = fma(_839, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837));
        float _1742;
        if (_1708 > 0.0)
        {
            _1742 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1742 = frontier_phi_14_12_ladder;
        }
        float _1946;
        if (_1711 > 0.0)
        {
            _1946 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1946 = frontier_phi_23_19_ladder;
        }
        float _2200;
        if (_1714 > 0.0)
        {
            _2200 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2200 = frontier_phi_35_30_ladder;
        }
        float _2202 = isnan(_1946) ? _1742 : (isnan(_1742) ? _1946 : min(_1742, _1946));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1708) + _1697;
        float _2208 = (_2203 * _1711) + _1701;
        float _2209 = (_2203 * _1714) + _1705;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2212 = (-1.0) - _2210;
        float _2214 = _2210 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2209 > _2214) || ((_2209 < _2212) || ((_2208 > _2214) || ((_2208 < _2212) || ((_2207 < _2212) || (_2207 > _2214))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2337 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2209, cbModelParam._m0[9u].z, fma(_2208, cbModelParam._m0[9u].y, _2207 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2209, cbModelParam._m0[10u].z, fma(_2208, cbModelParam._m0[10u].y, _2207 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2209, cbModelParam._m0[11u].z, fma(_2208, cbModelParam._m0[11u].y, _2207 * cbModelParam._m0[11u].x))), _1648);
            frontier_phi_13_35_ladder = _2337.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2337.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2337.x * cbModelParam._m0[1u].y;
        }
        _1730 = frontier_phi_13_35_ladder_2;
        _1732 = frontier_phi_13_35_ladder_1;
        _1734 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_837, _838, _839), _1648);
        _1730 = _1718.x * cbModelParam._m0[1u].y;
        _1732 = _1718.y * cbModelParam._m0[1u].y;
        _1734 = _1718.z * cbModelParam._m0[1u].y;
    }
    float _1738 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _667);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1738 : min(cbModelParam._m0[25u].w, _1738));
    float _1830;
    float _1832;
    float _1834;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1794 = fma(_901, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893)) + cbModelParam._m0[21u].w;
        float _1798 = fma(_901, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893)) + cbModelParam._m0[22u].w;
        float _1802 = fma(_901, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893)) + cbModelParam._m0[23u].w;
        float _1805 = fma(_839, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837));
        float _1808 = fma(_839, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837));
        float _1811 = fma(_839, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837));
        float _1951;
        if (_1805 > 0.0)
        {
            _1951 = abs((1.0 - _1794) / _1805);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1794 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1951 = frontier_phi_25_21_ladder;
        }
        float _2227;
        if (_1808 > 0.0)
        {
            _2227 = abs((1.0 - _1798) / _1808);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1798 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2227 = frontier_phi_37_32_ladder;
        }
        float _2440;
        if (_1811 > 0.0)
        {
            _2440 = abs((1.0 - _1802) / _1811);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1802 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2440 = frontier_phi_46_43_ladder;
        }
        float _2442 = isnan(_2227) ? _1951 : (isnan(_1951) ? _2227 : min(_1951, _2227));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1805) + _1794;
        float _2448 = (_2443 * _1808) + _1798;
        float _2449 = (_2443 * _1811) + _1802;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2450;
        float _2453 = _2450 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2449 > _2453) || ((_2449 < _2451) || ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 < _2451) || (_2447 > _2453))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2449, cbModelParam._m0[17u].z, fma(_2448, cbModelParam._m0[17u].y, _2447 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2449, cbModelParam._m0[18u].z, fma(_2448, cbModelParam._m0[18u].y, _2447 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2449, cbModelParam._m0[19u].z, fma(_2448, cbModelParam._m0[19u].y, _2447 * cbModelParam._m0[19u].x))), _1739);
            frontier_phi_22_46_ladder = _2648.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2648.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2648.x * cbModelParam._m0[1u].z;
        }
        _1830 = frontier_phi_22_46_ladder_2;
        _1832 = frontier_phi_22_46_ladder_1;
        _1834 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_837, _838, _839), _1739);
        _1830 = _1814.x * cbModelParam._m0[1u].z;
        _1832 = _1814.y * cbModelParam._m0[1u].z;
        _1834 = _1814.z * cbModelParam._m0[1u].z;
    }
    float _1847 = (((_864 * _813) + _865) * _829) * ((cbModelParam._m0[1u].w * (_1830 - _1730)) + _1730);
    float _1849 = (((_864 * _815) + _865) * _829) * ((cbModelParam._m0[1u].w * (_1832 - _1732)) + _1732);
    float _1851 = (((_864 * _816) + _865) * _829) * ((cbModelParam._m0[1u].w * (_1834 - _1734)) + _1734);
    float _1854 = fma(_1851, cbSceneParam._m0[89u].z, fma(_1849, cbSceneParam._m0[89u].y, _1847 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1851, cbSceneParam._m0[90u].z, fma(_1849, cbSceneParam._m0[90u].y, _1847 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1851, cbSceneParam._m0[91u].z, fma(_1849, cbSceneParam._m0[91u].y, _1847 * cbSceneParam._m0[91u].x));
    uvec4 _1870 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1872 = _1870.x * 14u;
    uint _1873 = _1872 + 13u;
    float _1880 = _829 + (-1.0);
    float _1885 = (cbLight._m0[_1873].x * _1880) + 1.0;
    float _1886 = (cbLight._m0[_1873].y * _1880) + 1.0;
    float _1887 = (cbLight._m0[_1873].z * _1880) + 1.0;
    float _1888 = (cbLight._m0[_1873].w * _1880) + 1.0;
    uint _1889 = _1872 + 5u;
    float _1895 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
    uint _1899 = _1872 + 4u;
    float _1905 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
    uint _1909 = _1872 | 1u;
    float _1920 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_664, _665, _666));
    float _1923 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_664, _665, _666));
    float _4055 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _4066 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1928 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1930 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1937 = ((cbLight._m0[_1889].x * _1895) * _1930) + ((cbLight._m0[_1899].x * _1905) * _1928);
    float _1938 = ((_1895 * cbLight._m0[_1889].y) * _1930) + ((_1905 * cbLight._m0[_1899].y) * _1928);
    float _1939 = ((_1895 * cbLight._m0[_1889].z) * _1930) + ((_1905 * cbLight._m0[_1899].z) * _1928);
    uvec4 _1943 = floatBitsToUint(cbLight._m0[_1872 + 12u]);
    bool _1945 = _1943.x == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1945)
    {
        _1956 = _1937;
        _1958 = _1938;
        _1960 = _1939;
    }
    else
    {
        uint _1964 = _1872 + 6u;
        float _1980 = (dot(vec3(cbLight._m0[_1872 + 2u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _1981 = _1980 * _1980;
        float _4077 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1983 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _1956 = (((cbLight._m0[_1964].x * 0.3183098733425140380859375) * _1982) * _1983) + _1937;
        _1958 = (((cbLight._m0[_1964].y * 0.3183098733425140380859375) * _1982) * _1983) + _1938;
        _1960 = (((cbLight._m0[_1964].z * 0.3183098733425140380859375) * _1982) * _1983) + _1939;
    }
    bool _1963 = _1943.y == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1963)
    {
        _2001 = _1956;
        _2003 = _1958;
        _2005 = _1960;
    }
    else
    {
        uint _2171 = _1872 + 7u;
        float _2187 = (dot(vec3(cbLight._m0[_1872 + 3u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2188 = _2187 * _2187;
        float _4093 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2190 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2001 = (((cbLight._m0[_2171].x * 0.3183098733425140380859375) * _2189) * _2190) + _1956;
        _2003 = (((cbLight._m0[_2171].y * 0.3183098733425140380859375) * _2189) * _2190) + _1958;
        _2005 = (((cbLight._m0[_2171].z * 0.3183098733425140380859375) * _2189) * _2190) + _1960;
    }
    uint _2008 = _1872 + 8u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _667) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1872].x + _743;
    float _2024 = cbLight._m0[_1872].y + _744;
    float _2025 = cbLight._m0[_1872].z + _745;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_1872].xyz));
    float _4109 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _2037 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2038 = dot(vec3(_664, _665, _666), vec3(_2030, _2031, _2032));
    float _4131 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2030, _2031, _2032));
    float _4142 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2022 * _2022;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2058 = exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0);
    float _2059 = 0.959999978542327880859375 - _810;
    float _2061 = 0.959999978542327880859375 - _811;
    float _2062 = 0.959999978542327880859375 - _812;
    float _2069 = 1.0 - _2022;
    float _2080 = (0.5 / (((_2037 * ((_2036 * _2069) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2069) + _2022) * _2036))) * _2036;
    float _4153 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2082 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    uint _2093 = _1872 + 9u;
    float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _667) * 0.949999988079071044921875);
    float _2105 = _2104 * _2104;
    float _2106 = cbLight._m0[_1909].x + _743;
    float _2107 = cbLight._m0[_1909].y + _744;
    float _2108 = cbLight._m0[_1909].z + _745;
    float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
    float _2113 = _2112 * _2106;
    float _2114 = _2112 * _2107;
    float _2115 = _2112 * _2108;
    float _2116 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_1909].xyz));
    float _4164 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2120 = dot(vec3(_664, _665, _666), vec3(_2113, _2114, _2115));
    float _4175 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2124 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_2113, _2114, _2115));
    float _4186 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2128 = _2105 * _2105;
    float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
    float _2139 = exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0);
    float _2146 = 1.0 - _2105;
    float _2156 = (0.5 / (((_2037 * ((_2119 * _2146) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2146) + _2105) * _2119))) * _2119;
    float _4197 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2158 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
    float _2168 = (((((_2139 * _2059) + _813) * cbLight._m0[_2093].x) * _2158) * _1895) + (((((_2058 * _2059) + _813) * cbLight._m0[_2008].x) * _2082) * _1905);
    float _2169 = (((((_2139 * _2061) + _815) * cbLight._m0[_2093].y) * _2158) * _1895) + (((((_2058 * _2061) + _815) * cbLight._m0[_2008].y) * _2082) * _1905);
    float _2170 = (((((_2139 * _2062) + _816) * cbLight._m0[_2093].z) * _2158) * _1895) + (((((_2058 * _2062) + _816) * cbLight._m0[_2008].z) * _2082) * _1905);
    float _2232;
    float _2234;
    float _2236;
    if (_1945)
    {
        _2232 = _2168;
        _2234 = _2169;
        _2236 = _2170;
    }
    else
    {
        uint _2238 = _1872 + 2u;
        uint _2242 = _1872 + 10u;
        float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _667) * 0.949999988079071044921875);
        float _2257 = _2256 * _2256;
        float _2258 = cbLight._m0[_2238].x + _743;
        float _2259 = cbLight._m0[_2238].y + _744;
        float _2260 = cbLight._m0[_2238].z + _745;
        float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
        float _2265 = _2264 * _2258;
        float _2266 = _2264 * _2259;
        float _2267 = _2264 * _2260;
        float _2268 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2238].xyz));
        float _4208 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2272 = dot(vec3(_664, _665, _666), vec3(_2265, _2266, _2267));
        float _4219 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2276 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2265, _2266, _2267));
        float _4230 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2280 = _2257 * _2257;
        float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
        float _2291 = exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0);
        float _2298 = 1.0 - _2257;
        float _2308 = (0.5 / (((_2037 * ((_2271 * _2298) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2298) + _2257) * _2271))) * _2271;
        float _4241 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2310 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
        float _2311 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2232 = (((((_2291 * _2059) + _813) * cbLight._m0[_2242].x) * _2310) * _2311) + _2168;
        _2234 = (((((_2291 * _2061) + _815) * cbLight._m0[_2242].y) * _2310) * _2311) + _2169;
        _2236 = (((((_2291 * _2062) + _816) * cbLight._m0[_2242].z) * _2310) * _2311) + _2170;
    }
    float _2346;
    float _2348;
    float _2350;
    if (_1963)
    {
        _2346 = _2232;
        _2348 = _2234;
        _2350 = _2236;
    }
    else
    {
        uint _2357 = _1872 + 3u;
        uint _2361 = _1872 + 11u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _667) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _743;
        float _2378 = cbLight._m0[_2357].y + _744;
        float _2379 = cbLight._m0[_2357].z + _745;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2357].xyz));
        float _4257 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2391 = dot(vec3(_664, _665, _666), vec3(_2384, _2385, _2386));
        float _4268 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4279 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
        float _2417 = 1.0 - _2376;
        float _2427 = (0.5 / (((_2037 * ((_2390 * _2417) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2417) + _2376) * _2390))) * _2390;
        float _4290 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2429 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2430 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2346 = (((((_2410 * _2059) + _813) * cbLight._m0[_2361].x) * _2429) * _2430) + _2232;
        _2348 = (((((_2410 * _2061) + _815) * cbLight._m0[_2361].y) * _2429) * _2430) + _2234;
        _2350 = (((((_2410 * _2062) + _816) * cbLight._m0[_2361].z) * _2429) * _2430) + _2236;
    }
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_1870.y == 0u)
    {
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2505;
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2505;
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2505;
        uvec4 _2520 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2521 = _2520.x;
        uint _2532 = uint((float(_2520.y) * floor(float(uint(cbSceneParam._m0[85u].y * _752) / _2521))) + floor(float(uint(cbSceneParam._m0[85u].x * _751) / _2521)));
        float _2542 = (log2(_2508 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2543 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        uint _2546 = uint(isnan(14.0) ? _2543 : (isnan(_2543) ? 14.0 : min(_2543, 14.0)));
        uvec4 _2551 = texelFetch(g_lightClusterGridBuffer, int(((_2546 << 2u) + (_2532 << 6u)) >> 2u));
        uint _2552 = _2551.x;
        uint _2553 = _2520.z;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        if (((((1u << ((_2553 >> 4u) & 15u)) + 4294967295u) & _2552) == 0u) || ((_2553 & 240u) == 0u))
        {
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
        }
        else
        {
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            uint _2804 = 0u;
            uint _2813;
            bool _2814;
            for (;;)
            {
                _2813 = texelFetch(g_lightClassification, int((((_2546 << 5u) + (_2532 << 9u)) + (_2804 << 2u)) >> 2u)).x;
                _2814 = _2813 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2814)
                {
                    frontier_phi_61_pred = _2798;
                    frontier_phi_61_pred_1 = _2803;
                    frontier_phi_61_pred_2 = _2802;
                    frontier_phi_61_pred_3 = _2801;
                    frontier_phi_61_pred_4 = _2800;
                    frontier_phi_61_pred_5 = _2799;
                }
                else
                {
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    uint _2928;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2813;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    for (;;)
                    {
                        uint _2932 = uint(findLSB(_2928)) + (_2804 << 5u);
                        uint _2929 = (_2928 + 4294967295u) & _2928;
                        uint _2934 = _2932 * 48u;
                        vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 3u)).x));
                        uint _2954 = (_2932 * 48u) + 4u;
                        vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2954)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 3u)).x));
                        uint _2973 = (_2932 * 48u) + 8u;
                        vec3 _2984 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x));
                        float _2988 = _2948.x - _2506;
                        float _2989 = _2948.y - _2507;
                        float _2990 = _2948.z - _2508;
                        float _2991 = dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990));
                        float _2994 = inversesqrt(_2991);
                        float _2995 = _2994 * _2988;
                        float _2996 = _2994 * _2989;
                        float _2997 = _2994 * _2990;
                        float _2998 = dot(vec3(_770, _773, _776), vec3(_2995, _2996, _2997));
                        float _3003 = 1.0 - (_2991 * _2948.w);
                        float _4316 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3005 = sqrt(_2991) * _2967.w;
                        float _3008 = 1.39999997615814208984375 / (_3005 + 1.39999997615814208984375);
                        float _3009 = _3008 * _3008;
                        float _3012 = ((1.0 - _3009) * _2998) + _3009;
                        float _3015 = _3005 * _3005;
                        float _3019 = ((isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))) * _3004) / ((_3015 * 0.699999988079071044921875) + 1.0);
                        float _3023 = (-0.0) - _2506;
                        float _3024 = (-0.0) - _2507;
                        float _3025 = (-0.0) - _2508;
                        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                        float _3030 = _3029 * _3023;
                        float _3031 = _3029 * _3024;
                        float _3032 = _3029 * _3025;
                        float _3040 = exp2(log2(1.0 / ((_3015 * 3.5) + 5.0)) * 0.25);
                        float _3041 = 1.0 - _845;
                        float _3048 = sqrt(1.0 - ((1.0 - (_3041 * _3041)) * (1.0 - (_3040 * _3040))));
                        float _3049 = _3048 * _3048;
                        float _3050 = _3049 * _3049;
                        float _3051 = _3030 + _2995;
                        float _3052 = _3031 + _2996;
                        float _3053 = _3032 + _2997;
                        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                        float _3061 = dot(vec3(_770, _773, _776), vec3(_3030, _3031, _3032));
                        float _4332 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3064 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3065 = dot(vec3(_770, _773, _776), vec3(_3057 * _3051, _3057 * _3052, _3057 * _3053));
                        float _4343 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3068 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3072 = ((_3068 * _3068) * (_3050 + (-1.0))) + 1.0;
                        float _3073 = _3008 * _3049;
                        float _3074 = _3073 * _3073;
                        float _3077 = ((1.0 - _3074) * _2998) + _3074;
                        float _4354 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3078 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3079 = 1.0 - _3049;
                        float _3089 = (0.5 / (((_3078 * ((_3064 * _3079) + _3049)) + 9.9999999392252902907785028219223e-09) + (((_3078 * _3079) + _3049) * _3064))) * _3078;
                        float _4365 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3100 = (((_3050 * 3.1415927410125732421875) * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) / ((_3072 * _3072) * ((_3015 * 2.1991131305694580078125) + 3.141590118408203125))) * _3004;
                        _2857 = (_3019 * _2967.x) + _2925;
                        _2858 = (_3019 * _2967.y) + _2926;
                        _2859 = (_3019 * _2967.z) + _2927;
                        _2854 = (_3100 * _2984.x) + _2922;
                        _2855 = (_3100 * _2984.y) + _2923;
                        _2856 = (_3100 * _2984.z) + _2924;
                        if (_2929 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2929;
                        }
                    }
                    frontier_phi_61_pred = _2854;
                    frontier_phi_61_pred_1 = _2859;
                    frontier_phi_61_pred_2 = _2858;
                    frontier_phi_61_pred_3 = _2857;
                    frontier_phi_61_pred_4 = _2856;
                    frontier_phi_61_pred_5 = _2855;
                }
                _2654 = frontier_phi_61_pred;
                _2664 = frontier_phi_61_pred_1;
                _2662 = frontier_phi_61_pred_2;
                _2660 = frontier_phi_61_pred_3;
                _2658 = frontier_phi_61_pred_4;
                _2656 = frontier_phi_61_pred_5;
                uint _2805 = _2804 + 1u;
                if (_2805 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2798 = _2654;
                    _2799 = _2656;
                    _2800 = _2658;
                    _2801 = _2660;
                    _2802 = _2662;
                    _2803 = _2664;
                    _2804 = _2805;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
        }
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.z;
        uint _2670 = (_2668 >> 8u) & 15u;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((4294967295u << _2670) & _2552) == 0u)
        {
            _2766 = _2653;
            _2768 = _2655;
            _2770 = _2657;
            _2772 = _2659;
            _2774 = _2661;
            _2776 = _2663;
        }
        else
        {
            float _2791 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
            float _2792 = _2791 * _2506;
            float _2793 = _2791 * _2507;
            float _2794 = _2791 * _2508;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2670 < ((_2668 >> 12u) & 15u))
            {
                float _2767;
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2905 = _2653;
                float _2906 = _2655;
                float _2907 = _2657;
                float _2908 = _2659;
                float _2909 = _2661;
                float _2910 = _2663;
                uint _2911 = _2670;
                uint _2920;
                bool _2921;
                for (;;)
                {
                    _2920 = texelFetch(g_lightClassification, int((((_2546 << 5u) + (_2532 << 9u)) + (_2911 << 2u)) >> 2u)).x;
                    _2921 = _2920 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2921)
                    {
                        frontier_phi_67_pred = _2908;
                        frontier_phi_67_pred_1 = _2909;
                        frontier_phi_67_pred_2 = _2910;
                        frontier_phi_67_pred_3 = _2907;
                        frontier_phi_67_pred_4 = _2906;
                        frontier_phi_67_pred_5 = _2905;
                    }
                    else
                    {
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3118 = _2905;
                        float _3119 = _2906;
                        float _3120 = _2907;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        uint _3124 = _2920;
                        uint _3125;
                        vec4 _3150;
                        float _3151;
                        vec4 _3166;
                        vec3 _3178;
                        vec4 _3193;
                        vec4 _3209;
                        float _3255;
                        bool _3256;
                        for (;;)
                        {
                            uint _3135 = ((_2911 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3124));
                            _3125 = (_3124 + 4294967295u) & _3124;
                            uint _3137 = _3135 * 40u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            _3151 = _3150.w;
                            uint _3153 = (_3135 * 40u) + 4u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3168 = (_3135 * 40u) + 8u;
                            _3178 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x));
                            uint _3180 = (_3135 * 40u) + 16u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3196 = (_3135 * 40u) + 20u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3211 = (_3135 * 40u) + 24u;
                            vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3230 = (_3135 * 40u) + 28u;
                            vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3255 = fma(_2508, _3243.z, fma(_2507, _3243.y, _3243.x * _2506)) + _3243.w;
                            _3256 = !((fma(_2508, _3224.z, fma(_2507, _3224.y, _3224.x * _2506)) + _3224.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3256)
                            {
                                float _3283 = _3150.x - _2506;
                                float _3284 = _3150.y - _2507;
                                float _3285 = _3150.z - _2508;
                                float _3286 = dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285));
                                float _3289 = inversesqrt(_3286);
                                float _3290 = _3289 * _3283;
                                float _3291 = _3289 * _3284;
                                float _3292 = _3289 * _3285;
                                float _3296 = 1.0 - (_3286 / (_3151 * _3151));
                                float _4376 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3301 = sqrt(_3286) * _3166.w;
                                float _3303 = 1.39999997615814208984375 / (_3301 + 1.39999997615814208984375);
                                float _3304 = _3303 * _3303;
                                float _3307 = ((1.0 - _3304) * dot(vec3(_3290, _3291, _3292), vec3(_770, _773, _776))) + _3304;
                                float _3310 = _3301 * _3301;
                                float _3314 = (fma(_2508, _3193.z, fma(_2507, _3193.y, _3193.x * _2506)) + _3193.w) / _3255;
                                float _3315 = (fma(_2508, _3209.z, fma(_2507, _3209.y, _3209.x * _2506)) + _3209.w) / _3255;
                                float _3319 = 1.0 - dot(vec2(_3314, _3315), vec2(_3314, _3315));
                                float _4392 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3321 = _3320 * (((isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0))) * _3297) / ((_3310 * 0.699999988079071044921875) + 1.0));
                                float _3333 = exp2(log2(1.0 / ((_3310 * 3.5) + 5.0)) * 0.25);
                                float _3334 = 1.0 - _845;
                                float _3341 = sqrt(1.0 - ((1.0 - (_3334 * _3334)) * (1.0 - (_3333 * _3333))));
                                float _3342 = _3341 * _3341;
                                float _3343 = _3342 * _3342;
                                float _3344 = _3290 - _2792;
                                float _3345 = _3291 - _2793;
                                float _3346 = _3292 - _2794;
                                float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                                float _3354 = dot(vec3(_770, _773, _776), vec3((-0.0) - _2792, (-0.0) - _2793, (-0.0) - _2794));
                                float _4403 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3358 = dot(vec3(_770, _773, _776), vec3(_3350 * _3344, _3350 * _3345, _3350 * _3346));
                                float _4414 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3365 = ((_3361 * _3361) * (_3343 + (-1.0))) + 1.0;
                                float _3366 = _3303 * _3342;
                                float _3367 = _3366 * _3366;
                                float _3373 = ((1.0 - _3367) * dot(vec3(_770, _773, _776), vec3(_3290, _3291, _3292))) + _3367;
                                float _4425 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3375 = 1.0 - _3342;
                                float _3385 = (0.5 / (((_3374 * ((_3357 * _3375) + _3342)) + 9.9999999392252902907785028219223e-09) + (((_3374 * _3375) + _3342) * _3357))) * _3374;
                                float _4436 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3395 = (_3320 * _3297) * (((_3343 * 3.1415927410125732421875) * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) / ((_3365 * _3365) * ((_3310 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3395 * _3178.x;
                                frontier_phi_73_pred_1 = _3395 * _3178.y;
                                frontier_phi_73_pred_2 = _3321 * _3166.z;
                                frontier_phi_73_pred_3 = _3321 * _3166.y;
                                frontier_phi_73_pred_4 = _3321 * _3166.x;
                                frontier_phi_73_pred_5 = _3395 * _3178.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3399 = frontier_phi_73_pred;
                            _3400 = frontier_phi_73_pred_1;
                            _3404 = frontier_phi_73_pred_2;
                            _3403 = frontier_phi_73_pred_3;
                            _3402 = frontier_phi_73_pred_4;
                            _3401 = frontier_phi_73_pred_5;
                            _3108 = _3402 + _3121;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            _3105 = _3399 + _3118;
                            _3106 = _3400 + _3119;
                            _3107 = _3401 + _3120;
                            if (_3125 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3125;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3108;
                        frontier_phi_67_pred_1 = _3109;
                        frontier_phi_67_pred_2 = _3110;
                        frontier_phi_67_pred_3 = _3107;
                        frontier_phi_67_pred_4 = _3106;
                        frontier_phi_67_pred_5 = _3105;
                    }
                    _2773 = frontier_phi_67_pred;
                    _2775 = frontier_phi_67_pred_1;
                    _2777 = frontier_phi_67_pred_2;
                    _2771 = frontier_phi_67_pred_3;
                    _2769 = frontier_phi_67_pred_4;
                    _2767 = frontier_phi_67_pred_5;
                    uint _2912 = _2911 + 1u;
                    if (_2912 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2905 = _2767;
                        _2906 = _2769;
                        _2907 = _2771;
                        _2908 = _2773;
                        _2909 = _2775;
                        _2910 = _2777;
                        _2911 = _2912;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2775;
                frontier_phi_55_56_ladder_1 = _2777;
                frontier_phi_55_56_ladder_2 = _2773;
                frontier_phi_55_56_ladder_3 = _2771;
                frontier_phi_55_56_ladder_4 = _2769;
                frontier_phi_55_56_ladder_5 = _2767;
            }
            else
            {
                frontier_phi_55_56_ladder = _2661;
                frontier_phi_55_56_ladder_1 = _2663;
                frontier_phi_55_56_ladder_2 = _2659;
                frontier_phi_55_56_ladder_3 = _2657;
                frontier_phi_55_56_ladder_4 = _2655;
                frontier_phi_55_56_ladder_5 = _2653;
            }
            _2766 = frontier_phi_55_56_ladder_5;
            _2768 = frontier_phi_55_56_ladder_4;
            _2770 = frontier_phi_55_56_ladder_3;
            _2772 = frontier_phi_55_56_ladder_2;
            _2774 = frontier_phi_55_56_ladder;
            _2776 = frontier_phi_55_56_ladder_1;
        }
        float _2781 = isnan(1.0) ? _829 : (isnan(_829) ? 1.0 : min(_829, 1.0));
        _2565 = (_2781 * _2772) + _2001;
        _2567 = (_2781 * _2774) + _2003;
        _2569 = (_2781 * _2776) + _2005;
        _2571 = ((_2766 * _813) * _2781) + _2346;
        _2573 = ((_2768 * _815) * _2781) + _2348;
        _2575 = ((_2770 * _816) * _2781) + _2350;
    }
    else
    {
        _2565 = _2001;
        _2567 = _2003;
        _2569 = _2005;
        _2571 = _2346;
        _2573 = _2348;
        _2575 = _2350;
    }
    float _4452 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4463 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4474 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    uint _2595 = _245 + 6u;
    float _2603 = _751 / cbSceneParam._m0[86u].x;
    float _2604 = _752 / cbSceneParam._m0[86u].y;
    vec4 _2618 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2603, _2604, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2620 = _2618.x;
    float _2621 = _2618.y;
    float _2622 = _2618.z;
    float _2623 = _2618.w;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2678 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2679 = _2678 / _686;
        float _2690 = _2679 * _736;
        float _2691 = _737 * _2679;
        float _2692 = (-0.0) - _2691;
        float _2694 = _2679 * _738;
        float _2696 = (cbSceneParam._m0[77u].w * _2692) / _2678;
        float _2697 = _2696 + cbSceneParam._m0[79u].w;
        float _2698 = cbSceneParam._m0[79u].w - _2691;
        float _2704 = sqrt(((_2690 * _2690) + (_2691 * _2691)) + (_2694 * _2694));
        float _2707 = (1.0 - (cbSceneParam._m0[77u].w / _2678)) * _2704;
        float _2712 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2714 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2867;
        if (abs((_2692 - _2696) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2867 = ((((_2697 > 0.0) ? exp2(_2712 * _2697) : (2.0 - exp2(_2714 * _2697))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2707;
        }
        else
        {
            float _2827 = 1.0 / cbSceneParam._m0[80u].x;
            float _2828 = isnan(_2698) ? _2697 : (isnan(_2697) ? _2698 : max(_2697, _2698));
            float _2829 = isnan(_2698) ? _2697 : (isnan(_2697) ? _2698 : min(_2697, _2698));
            float _2838 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : min(_2828, 0.0));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            _2867 = ((abs(_2704 / _2692) * cbSceneParam._m0[80u].y) * ((((_2838 - _2839) * 2.0) - ((exp2(_2712 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0)))) - exp2(_2712 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0))))) * _2827)) - ((exp2(_2714 * _2838) - exp2(_2714 * _2839)) * _2827))) + (_2707 * cbSceneParam._m0[80u].z);
        }
        vec4 _2869 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2603, _2604, 1.0), 0.0);
        float _2878 = exp2((_2867 * (-1.44269502162933349609375)) * (1.0 - _2869.w));
        float _2879 = log2(_2878);
        float _2895 = log2(_2623);
        _2716 = (exp2(_2895 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].x)) * _2869.x) / cbSceneParam._m0[78u].x)) + _2620;
        _2718 = (exp2(_2895 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].y)) * _2869.y) / cbSceneParam._m0[78u].y)) + _2621;
        _2720 = (exp2(_2895 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].z)) * _2869.z) / cbSceneParam._m0[78u].z)) + _2622;
        _2722 = _2878 * _2623;
    }
    else
    {
        _2716 = _2620;
        _2718 = _2621;
        _2720 = _2622;
        _2722 = _2623;
    }
    float _2734 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2735 = _2734 == 3.0;
    float _2736 = log2(_2722);
    float _2743 = exp2(_2736 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2565 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _829))) + ((_2571 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1637)) * cbPerFrame._m0[3u].x));
    float _2744 = exp2(_2736 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2567 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _829))) + ((_2573 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1637)) * cbPerFrame._m0[3u].x));
    float _2745 = exp2(_2736 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2569 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _829))) + ((_2575 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1637)) * cbPerFrame._m0[3u].x));
    float _2754 = (_2734 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2754 * (_2735 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2716)));
    SV_Target.y = _2754 * (_2735 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2718)));
    SV_Target.z = _2754 * (_2735 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2720)));
    SV_Target.w = cbInstanceData._m0[_2595].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2595].w;
}


