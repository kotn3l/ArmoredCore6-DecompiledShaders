#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1523;
float _3925;
float _3926;
float _3927;
float _3928;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3937 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3948 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3959 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _371 = _366.x * cbMtdParam._m0[11u].x;
    float _372 = _366.y * cbMtdParam._m0[11u].y;
    float _373 = _366.z * cbMtdParam._m0[11u].z;
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _411.x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[23u].w) + _457) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3970 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _482 = (_475 * ((_392.x * cbMtdParam._m0[12u].x) - _371)) + _371;
    float _483 = (_475 * ((_392.y * cbMtdParam._m0[12u].y) - _372)) + _372;
    float _484 = (_475 * ((_392.z * cbMtdParam._m0[12u].z) - _373)) + _373;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _523 = _521.x;
    float _533 = dot(vec4(_523, _521.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _547 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _411.y) * 2.0) - ((((_523 - _533) * cbMtdParam._m0[23u].w) + _533) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3981 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _558 = (_340.x * cbMtdParam._m0[9u].x) * ((_548 * ((_501.x * cbMtdParam._m0[13u].x) - _482)) + _482);
    float _559 = (_340.y * cbMtdParam._m0[9u].y) * ((_548 * ((_501.y * cbMtdParam._m0[13u].y) - _483)) + _483);
    float _560 = (_340.z * cbMtdParam._m0[9u].z) * ((_548 * ((_501.z * cbMtdParam._m0[13u].z) - _484)) + _484);
    float _564 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _558;
    float _567 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _559;
    float _570 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _560;
    float _578 = (((_558 - _564) * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) + _564) * 4.55000019073486328125;
    float _580 = (((_559 - _567) * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) + _567) * 4.55000019073486328125;
    float _582 = (((_560 - _570) * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) + _570) * 4.55000019073486328125;
    vec4 _601 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _303) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _304) + cbTextureTilingScale._m0[14u].w));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _664 = _662.x;
    float _665 = _662.y;
    float _666 = _662.z;
    float _673 = ((_645.x - _664) * _475) + _664;
    float _674 = ((_645.y - _665) * _475) + _665;
    float _675 = ((_645.z - _666) * _475) + _666;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _700 = ((_687.z - _675) * _548) + _675;
    float _703 = ((((_687.x - _673) * _548) + _673) * 2.0) + (-1.0);
    float _704 = ((((_687.y - _674) * _548) + _674) * 2.0) + (-1.0);
    float _705 = dot(vec2(_703, _704), vec2(_703, _704));
    float _3992 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _710 = sqrt(1.0 - (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _740 = (_703 + ((((_620.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_728.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _741 = (_704 + ((((_620.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_728.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _744 = fma(_710, _251, fma(_741, _258, _740 * _244));
    float _747 = fma(_710, _252, fma(_741, _259, _740 * _245));
    float _750 = fma(_710, _253, fma(_741, _260, _740 * _246));
    float _754 = inversesqrt(dot(vec3(_744, _747, _750), vec3(_744, _747, _750)));
    vec4 _781 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _783 = _781.x;
    float _784 = 1.0 - _783;
    float _793 = (cbMtdParam._m0[19u].x + dot(vec4(_754 * _744, _754 * _747, _754 * _750, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_783 - _784) * cbMtdParam._m0[24u].z) + _784) * cbMtdParam._m0[21u].z);
    float _4003 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _794 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _801 = (_794 * ((_601.x * cbMtdParam._m0[18u].x) - _578)) + _578;
    float _802 = (_794 * ((_601.y * cbMtdParam._m0[18u].y) - _580)) + _580;
    float _803 = (_794 * ((_601.z * cbMtdParam._m0[18u].z) - _582)) + _582;
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _831 = _829.x;
    float _848 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _831) * _475) + _831;
    float _865 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _848) * _548) + _848;
    float _869 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _865) * cbMtdParam._m0[19u].z) + _865;
    float _871 = _869 - (_869 * _794);
    float _876 = (((_620.z - _700) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _700;
    float _880 = ((_728.z - _876) * cbMtdParam._m0[19u].w) + _876;
    vec4 _893 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _900 = (_893.x * 2.0) + (-1.0);
    float _901 = (_893.y * 2.0) + (-1.0);
    float _902 = dot(vec2(_900, _901), vec2(_900, _901));
    float _4014 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _910 = ((_893.z - _880) * _794) + _880;
    float _920 = ((sqrt(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) - _710) * _794) + _710;
    float _923 = (((_900 - _740) * _794) + _740) + (cbMtdParam._m0[21u].x * _740);
    float _924 = (((_901 - _741) * _794) + _741) + (cbMtdParam._m0[21u].x * _741);
    float _928 = cbMtdParam._m0[22u].x + _728.w;
    float _931 = fma(_920, _251, fma(_924, _258, _923 * _244));
    float _934 = fma(_920, _252, fma(_924, _259, _923 * _245));
    float _937 = fma(_920, _253, fma(_924, _260, _923 * _246));
    float _941 = inversesqrt(dot(vec3(_931, _934, _937), vec3(_931, _934, _937)));
    float _942 = _941 * _931;
    float _943 = _941 * _934;
    float _944 = _941 * _937;
    float _4025 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _945 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4047 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4058 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4069 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4080 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _950 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _964 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1015 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1005);
    float _1016 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1005);
    float _1017 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1005);
    float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
    float _1022 = _1015 * _1021;
    float _1023 = _1016 * _1021;
    float _1024 = _1017 * _1021;
    vec4 _1029 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1031 = _1029.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1203 = sqrt(((_1015 * _1015) + (_1016 * _1016)) + (_1017 * _1017));
        float _1209 = (cbMatDynParam._m0[5u].x * _1203) + cbMatDynParam._m0[5u].y;
        float _4091 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1214 = (cbMatDynParam._m0[5u].z * _1203) + cbMatDynParam._m0[5u].w;
        float _4102 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) - _1210)) + _1210) < ((_1031 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1042 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1043 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1061 = fma(_944, cbSceneParam._m0[5u].z, fma(_943, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _942));
    float _1064 = fma(_944, cbSceneParam._m0[6u].z, fma(_943, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _942));
    float _1067 = fma(_944, cbSceneParam._m0[7u].z, fma(_943, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _942));
    uint _1080 = _284 + 9u;
    uint _1081 = _1080 + uint(cbMatDynParam._m0[0u].w);
    float _1087 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_1081].x;
    float _1088 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * cbInstanceData._m0[_1081].y;
    float _1089 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_1081].z;
    float _4113 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1091 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _1093 = 1.0 - _950;
    float _1094 = _1090 * _1093;
    float _1095 = _1091 * _1093;
    float _1096 = _1092 * _1093;
    float _1101 = (_1090 + (-0.039999999105930328369140625)) * _950;
    float _1102 = (_1091 + (-0.039999999105930328369140625)) * _950;
    float _1103 = (_1092 + (-0.039999999105930328369140625)) * _950;
    float _1104 = _1101 + 0.039999999105930328369140625;
    float _1106 = _1102 + 0.039999999105930328369140625;
    float _1107 = _1103 + 0.039999999105930328369140625;
    vec4 _1116 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1042, cbSceneParam._m0[86u].y * _1043));
    float _1120 = ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * TEXCOORD_5.w) * _1116.x;
    float _1121 = dot(vec3(_942, _943, _944), vec3(_1022, _1023, _1024));
    float _1124 = _1121 * 2.0;
    float _1128 = (_1124 * _942) - _1022;
    float _1129 = (_1124 * _943) - _1023;
    float _1130 = (_1124 * _944) - _1024;
    float _1134 = abs(dot(vec3(_1022, _1023, _1024), vec3(_942, _943, _944)));
    float _4146 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _1136 = sqrt(_945);
    float _1149 = exp2((_1136 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1136 * 3.0));
    float _1155 = (1.0 - _1149) * ((_1136 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1156 = _1149 * _1136;
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1192 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1522;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1247 = fma(_1192, cbModelParam._m0[26u].z, fma(_1188, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184));
        float _1251 = fma(_1192, cbModelParam._m0[27u].z, fma(_1188, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184));
        float _1255 = fma(_1192, cbModelParam._m0[28u].z, fma(_1188, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184));
        float _1280 = _1184 + _942;
        float _1281 = _1188 + _943;
        float _1282 = _1192 + _944;
        float _1292 = fma(_1282, cbModelParam._m0[26u].z, fma(_1281, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1280)) - _1247;
        float _1293 = fma(_1282, cbModelParam._m0[27u].z, fma(_1281, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1280)) - _1251;
        float _1294 = fma(_1282, cbModelParam._m0[28u].z, fma(_1281, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1280)) - _1255;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1311 = ((_1298 * _1292) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1247 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1293) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1251 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1298 * _1294) / cbModelParam._m0[34u].z) + ((((((_1255 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        float _1350 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1316.x + (-0.5));
        float _1352 = _1350 * (_1316.y + (-0.5));
        float _1353 = _1350 * (_1316.z + (-0.5));
        float _1360 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1323.x + (-0.5));
        float _1362 = _1360 * (_1323.y + (-0.5));
        float _1363 = _1360 * (_1323.z + (-0.5));
        float _1370 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1330.x + (-0.5));
        float _1372 = _1370 * (_1330.y + (-0.5));
        float _1373 = _1370 * (_1330.z + (-0.5));
        float _1380 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1337.x + (-0.5));
        float _1382 = _1380 * (_1337.y + (-0.5));
        float _1383 = _1380 * (_1337.z + (-0.5));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = _1351 * 0.5;
        float _1388 = _1361 * 0.5;
        float _1389 = _1371 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1404 = (dot(vec3(_942, _943, _944), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1414 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4194 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1416 + 1.0))) + _1421) * _1384;
        float _1431 = _1352 * 0.5;
        float _1432 = _1362 * 0.5;
        float _1433 = _1372 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_942, _943, _944), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4227 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1458 + 1.0))) + _1463) * _1385;
        float _1473 = _1353 * 0.5;
        float _1474 = _1363 * 0.5;
        float _1475 = _1373 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_942, _943, _944), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4260 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1500 + 1.0))) + _1505) * _1386;
        _1522 = _1353;
        _1524 = _1352;
        _1525 = _1351;
        _1526 = _1363;
        _1527 = _1362;
        _1528 = _1361;
        _1529 = _1373;
        _1530 = _1372;
        _1531 = _1371;
        _1532 = _1386;
        _1533 = _1385;
        _1534 = _1384;
        _1535 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1536 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1537 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
    }
    else
    {
        _1522 = _1523;
        _1524 = _1523;
        _1525 = _1523;
        _1526 = _1523;
        _1527 = _1523;
        _1528 = _1523;
        _1529 = _1523;
        _1530 = _1523;
        _1531 = _1523;
        _1532 = _1523;
        _1533 = _1523;
        _1534 = _1523;
        _1535 = 0.0;
        _1536 = 0.0;
        _1537 = 0.0;
    }
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1564 = fma(_1192, cbModelParam._m0[30u].z, fma(_1188, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184));
        float _1568 = fma(_1192, cbModelParam._m0[31u].z, fma(_1188, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184));
        float _1572 = fma(_1192, cbModelParam._m0[32u].z, fma(_1188, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184));
        float _1595 = _1184 + _942;
        float _1596 = _1188 + _943;
        float _1597 = _1192 + _944;
        float _1607 = fma(_1597, cbModelParam._m0[30u].z, fma(_1596, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1595)) - _1564;
        float _1608 = fma(_1597, cbModelParam._m0[31u].z, fma(_1596, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1595)) - _1568;
        float _1609 = fma(_1597, cbModelParam._m0[32u].z, fma(_1596, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1595)) - _1572;
        float _1613 = inversesqrt(dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609)));
        float _1626 = ((_1613 * _1607) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1564 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1627 = ((_1613 * _1608) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1568 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1628 = ((_1613 * _1609) / cbModelParam._m0[35u].z) + ((((((_1572 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1626, _1627, _1628), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1626, _1627, _1628), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1626, _1627, _1628), 0.0);
        vec4 _1651 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1626, _1627, _1628), 0.0);
        float _1663 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1630.x + (-0.5));
        float _1665 = _1663 * (_1630.y + (-0.5));
        float _1666 = _1663 * (_1630.z + (-0.5));
        float _1673 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1637.x + (-0.5));
        float _1675 = _1673 * (_1637.y + (-0.5));
        float _1676 = _1673 * (_1637.z + (-0.5));
        float _1683 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1644.x + (-0.5));
        float _1685 = _1683 * (_1644.y + (-0.5));
        float _1686 = _1683 * (_1644.z + (-0.5));
        float _1693 = exp2((_1651.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1651.x + (-0.5));
        float _1695 = _1693 * (_1651.y + (-0.5));
        float _1696 = _1693 * (_1651.z + (-0.5));
        float _1697 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1698 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1699 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1700 = _1664 * 0.5;
        float _1701 = _1674 * 0.5;
        float _1702 = _1684 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_942, _943, _944), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1697 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4323 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1727 + 1.0))) + _1732) * _1697;
        float _1742 = _1665 * 0.5;
        float _1743 = _1675 * 0.5;
        float _1744 = _1685 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_942, _943, _944), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1698 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4356 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1769 + 1.0))) + _1774) * _1698;
        float _1784 = _1666 * 0.5;
        float _1785 = _1676 * 0.5;
        float _1786 = _1686 * 0.5;
        float _1787 = dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786));
        float _1792 = (_1787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1787);
        float _1800 = (dot(vec3(_942, _943, _944), vec3(_1792 * _1784, _1792 * _1785, _1792 * _1786)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1809 = sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786)) / (_1699 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1811 = _1810 * 2.0;
        float _1815 = (1.0 - _1810) / (_1810 + 1.0);
        float _4389 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1825 = ((((1.0 - _1816) * (_1811 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1811 + 1.0))) + _1816) * _1699;
        _1833 = _1666;
        _1834 = _1665;
        _1835 = _1664;
        _1836 = _1676;
        _1837 = _1675;
        _1838 = _1674;
        _1839 = _1686;
        _1840 = _1685;
        _1841 = _1684;
        _1842 = _1699;
        _1843 = _1698;
        _1844 = _1697;
        _1845 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
        _1846 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
        _1847 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)));
    }
    else
    {
        _1833 = _1523;
        _1834 = _1523;
        _1835 = _1523;
        _1836 = _1523;
        _1837 = _1523;
        _1838 = _1523;
        _1839 = _1523;
        _1840 = _1523;
        _1841 = _1523;
        _1842 = _1523;
        _1843 = _1523;
        _1844 = _1523;
        _1845 = 0.0;
        _1846 = 0.0;
        _1847 = 0.0;
    }
    float _1857 = (cbModelParam._m0[1u].x * (_1845 - _1535)) + _1535;
    float _1858 = (cbModelParam._m0[1u].x * (_1846 - _1536)) + _1536;
    float _1859 = (cbModelParam._m0[1u].x * (_1847 - _1537)) + _1537;
    float _1880 = fma(_1859, cbSceneParam._m0[89u].z, fma(_1858, cbSceneParam._m0[89u].y, _1857 * cbSceneParam._m0[89u].x));
    float _1883 = fma(_1859, cbSceneParam._m0[90u].z, fma(_1858, cbSceneParam._m0[90u].y, _1857 * cbSceneParam._m0[90u].x));
    float _1886 = fma(_1859, cbSceneParam._m0[91u].z, fma(_1858, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1857));
    float _1901 = _1128 * 0.5;
    float _1902 = _1129 * 0.5;
    float _1903 = _1130 * 0.5;
    float _1904 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1835, _1838, _1841, _1844));
    float _1907 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1834, _1837, _1840, _1843));
    float _1910 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1833, _1836, _1839, _1842));
    float _1944;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1917 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1522, _1526, _1529, _1532));
        float _1921 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1524, _1527, _1530, _1533));
        float _1925 = dot(vec4(_1901, _1902, _1903, 1.0), vec4(_1525, _1528, _1531, _1534));
        float _1932 = dot(vec4(cbModelParam._m0[39u]), vec4(_1901, _1902, _1903, 1.0));
        _1944 = dot(vec3(isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1932) ? 0.0 : (isnan(0.0) ? _1932 : max(0.0, _1932))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1944 = 1.0;
    }
    float _1955;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1946 = dot(vec4(cbModelParam._m0[40u]), vec4(_1901, _1902, _1903, 1.0));
        _1955 = dot(vec3(isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1946) ? 0.0 : (isnan(0.0) ? _1946 : max(0.0, _1946))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1955 = 1.0;
    }
    float _1959 = (_1955 * cbModelParam._m0[1u].x) + (_1944 * (1.0 - cbModelParam._m0[1u].x));
    float _1969 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _945);
    float _1970 = isnan(_1969) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1969 : min(cbModelParam._m0[25u].z, _1969));
    float _2050;
    float _2052;
    float _2054;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2017 = fma(_1192, cbModelParam._m0[13u].z, fma(_1188, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1184)) + cbModelParam._m0[13u].w;
        float _2021 = fma(_1192, cbModelParam._m0[14u].z, fma(_1188, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1184)) + cbModelParam._m0[14u].w;
        float _2025 = fma(_1192, cbModelParam._m0[15u].z, fma(_1188, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1184)) + cbModelParam._m0[15u].w;
        float _2028 = fma(_1130, cbModelParam._m0[13u].z, fma(_1129, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1128));
        float _2031 = fma(_1130, cbModelParam._m0[14u].z, fma(_1129, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1128));
        float _2034 = fma(_1130, cbModelParam._m0[15u].z, fma(_1129, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1128));
        float _2062;
        if (_2028 > 0.0)
        {
            _2062 = abs((1.0 - _2017) / _2028);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2017 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2062 = frontier_phi_17_15_ladder;
        }
        float _2285;
        if (_2031 > 0.0)
        {
            _2285 = abs((1.0 - _2021) / _2031);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2021 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2285 = frontier_phi_26_22_ladder;
        }
        float _2542;
        if (_2034 > 0.0)
        {
            _2542 = abs((1.0 - _2025) / _2034);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2025 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2542 = frontier_phi_38_33_ladder;
        }
        float _2544 = isnan(_2285) ? _2062 : (isnan(_2062) ? _2285 : min(_2062, _2285));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _2028) + _2017;
        float _2550 = (_2545 * _2031) + _2021;
        float _2551 = (_2545 * _2034) + _2025;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2554 = (-1.0) - _2552;
        float _2556 = _2552 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2551 > _2556) || ((_2551 < _2554) || ((_2550 > _2556) || ((_2550 < _2554) || ((_2549 < _2554) || (_2549 > _2556))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2551, cbModelParam._m0[9u].z, fma(_2550, cbModelParam._m0[9u].y, _2549 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2551, cbModelParam._m0[10u].z, fma(_2550, cbModelParam._m0[10u].y, _2549 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2551, cbModelParam._m0[11u].z, fma(_2550, cbModelParam._m0[11u].y, _2549 * cbModelParam._m0[11u].x))), _1970);
            frontier_phi_16_38_ladder = _2679.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2679.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2679.x * cbModelParam._m0[1u].y;
        }
        _2050 = frontier_phi_16_38_ladder_2;
        _2052 = frontier_phi_16_38_ladder_1;
        _2054 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2038 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1128, _1129, _1130), _1970);
        _2050 = _2038.x * cbModelParam._m0[1u].y;
        _2052 = _2038.y * cbModelParam._m0[1u].y;
        _2054 = _2038.z * cbModelParam._m0[1u].y;
    }
    float _2058 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _945);
    float _2059 = isnan(_2058) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2058 : min(cbModelParam._m0[25u].w, _2058));
    float _2148;
    float _2150;
    float _2152;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2112 = fma(_1192, cbModelParam._m0[21u].z, fma(_1188, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1184)) + cbModelParam._m0[21u].w;
        float _2116 = fma(_1192, cbModelParam._m0[22u].z, fma(_1188, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1184)) + cbModelParam._m0[22u].w;
        float _2120 = fma(_1192, cbModelParam._m0[23u].z, fma(_1188, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1184)) + cbModelParam._m0[23u].w;
        float _2123 = fma(_1130, cbModelParam._m0[21u].z, fma(_1129, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1128));
        float _2126 = fma(_1130, cbModelParam._m0[22u].z, fma(_1129, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1128));
        float _2129 = fma(_1130, cbModelParam._m0[23u].z, fma(_1129, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1128));
        float _2290;
        if (_2123 > 0.0)
        {
            _2290 = abs((1.0 - _2112) / _2123);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2112 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2290 = frontier_phi_28_24_ladder;
        }
        float _2569;
        if (_2126 > 0.0)
        {
            _2569 = abs((1.0 - _2116) / _2126);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2116 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2569 = frontier_phi_40_35_ladder;
        }
        float _2782;
        if (_2129 > 0.0)
        {
            _2782 = abs((1.0 - _2120) / _2129);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2120 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2782 = frontier_phi_49_46_ladder;
        }
        float _2784 = isnan(_2569) ? _2290 : (isnan(_2290) ? _2569 : min(_2290, _2569));
        float _2785 = isnan(_2782) ? _2784 : (isnan(_2784) ? _2782 : min(_2784, _2782));
        float _2789 = (_2785 * _2123) + _2112;
        float _2790 = (_2785 * _2126) + _2116;
        float _2791 = (_2785 * _2129) + _2120;
        float _2792 = _2785 * 9.9999997473787516355514526367188e-05;
        float _2793 = (-1.0) - _2792;
        float _2795 = _2792 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2791 > _2795) || ((_2791 < _2793) || ((_2790 > _2795) || ((_2790 < _2793) || ((_2789 < _2793) || (_2789 > _2795))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2990 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2791, cbModelParam._m0[17u].z, fma(_2790, cbModelParam._m0[17u].y, _2789 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2791, cbModelParam._m0[18u].z, fma(_2790, cbModelParam._m0[18u].y, _2789 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2791, cbModelParam._m0[19u].z, fma(_2790, cbModelParam._m0[19u].y, _2789 * cbModelParam._m0[19u].x))), _2059);
            frontier_phi_25_49_ladder = _2990.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2990.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2990.x * cbModelParam._m0[1u].z;
        }
        _2148 = frontier_phi_25_49_ladder_2;
        _2150 = frontier_phi_25_49_ladder_1;
        _2152 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2132 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1128, _1129, _1130), _2059);
        _2148 = _2132.x * cbModelParam._m0[1u].z;
        _2150 = _2132.y * cbModelParam._m0[1u].z;
        _2152 = _2132.z * cbModelParam._m0[1u].z;
    }
    float _2165 = (((_1155 * _1104) + _1156) * _1120) * ((cbModelParam._m0[1u].w * (_2148 - _2050)) + _2050);
    float _2167 = (((_1155 * _1106) + _1156) * _1120) * ((cbModelParam._m0[1u].w * (_2150 - _2052)) + _2052);
    float _2169 = (((_1155 * _1107) + _1156) * _1120) * ((cbModelParam._m0[1u].w * (_2152 - _2054)) + _2054);
    float _2172 = fma(_2169, cbSceneParam._m0[89u].z, fma(_2167, cbSceneParam._m0[89u].y, _2165 * cbSceneParam._m0[89u].x));
    float _2175 = fma(_2169, cbSceneParam._m0[90u].z, fma(_2167, cbSceneParam._m0[90u].y, _2165 * cbSceneParam._m0[90u].x));
    float _2178 = fma(_2169, cbSceneParam._m0[91u].z, fma(_2167, cbSceneParam._m0[91u].y, _2165 * cbSceneParam._m0[91u].x));
    vec4 _2186 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1042, _1043));
    float _2188 = _2186.w;
    float _2200 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2188);
    float _2201 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2188);
    float _2202 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2188);
    uvec4 _2206 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2208 = _2206.x * 14u;
    uint _2209 = _2208 + 13u;
    float _2216 = _1120 + (-1.0);
    float _2221 = (cbLight._m0[_2209].x * _2216) + 1.0;
    float _2222 = (cbLight._m0[_2209].y * _2216) + 1.0;
    float _2223 = (cbLight._m0[_2209].z * _2216) + 1.0;
    float _2224 = (cbLight._m0[_2209].w * _2216) + 1.0;
    uint _2225 = _2208 + 5u;
    float _2231 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
    uint _2235 = _2208 + 4u;
    float _2244 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
    uint _2248 = _2208 | 1u;
    float _2259 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_942, _943, _944));
    float _2262 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_942, _943, _944));
    float _4525 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _4536 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2267 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * 0.3183098733425140380859375;
    float _2269 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * 0.3183098733425140380859375;
    float _2276 = ((cbLight._m0[_2225].x * _2231) * _2269) + (((cbLight._m0[_2235].x * _2200) * _2244) * _2267);
    float _2277 = ((_2231 * cbLight._m0[_2225].y) * _2269) + (((cbLight._m0[_2235].y * _2201) * _2244) * _2267);
    float _2278 = ((_2231 * cbLight._m0[_2225].z) * _2269) + (((cbLight._m0[_2235].z * _2202) * _2244) * _2267);
    uvec4 _2282 = floatBitsToUint(cbLight._m0[_2208 + 12u]);
    bool _2284 = _2282.x == 0u;
    float _2295;
    float _2297;
    float _2299;
    if (_2284)
    {
        _2295 = _2276;
        _2297 = _2277;
        _2299 = _2278;
    }
    else
    {
        uint _2303 = _2208 + 6u;
        float _2319 = (dot(vec3(cbLight._m0[_2208 + 2u].xyz), vec3(_942, _943, _944)) * 0.5) + 0.5;
        float _2320 = _2319 * _2319;
        float _4547 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2321 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2322 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2295 = (((cbLight._m0[_2303].x * 0.3183098733425140380859375) * _2321) * _2322) + _2276;
        _2297 = (((cbLight._m0[_2303].y * 0.3183098733425140380859375) * _2321) * _2322) + _2277;
        _2299 = (((cbLight._m0[_2303].z * 0.3183098733425140380859375) * _2321) * _2322) + _2278;
    }
    bool _2302 = _2282.y == 0u;
    float _2340;
    float _2342;
    float _2344;
    if (_2302)
    {
        _2340 = _2295;
        _2342 = _2297;
        _2344 = _2299;
    }
    else
    {
        uint _2513 = _2208 + 7u;
        float _2529 = (dot(vec3(cbLight._m0[_2208 + 3u].xyz), vec3(_942, _943, _944)) * 0.5) + 0.5;
        float _2530 = _2529 * _2529;
        float _4563 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2531 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2532 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2340 = (((cbLight._m0[_2513].x * 0.3183098733425140380859375) * _2531) * _2532) + _2295;
        _2342 = (((cbLight._m0[_2513].y * 0.3183098733425140380859375) * _2531) * _2532) + _2297;
        _2344 = (((cbLight._m0[_2513].z * 0.3183098733425140380859375) * _2531) * _2532) + _2299;
    }
    uint _2347 = _2208 + 8u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _945) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2208].x + _1022;
    float _2363 = cbLight._m0[_2208].y + _1023;
    float _2364 = cbLight._m0[_2208].z + _1024;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2208].xyz));
    float _4579 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _4590 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _2376 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2377 = dot(vec3(_942, _943, _944), vec3(_2369, _2370, _2371));
    float _4601 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2381 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2369, _2370, _2371));
    float _4612 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2385 = _2361 * _2361;
    float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
    float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
    float _2398 = 0.959999978542327880859375 - _1101;
    float _2400 = 0.959999978542327880859375 - _1102;
    float _2401 = 0.959999978542327880859375 - _1103;
    float _2408 = 1.0 - _2361;
    float _2419 = (0.5 / (((_2376 * ((_2375 * _2408) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2408) + _2361) * _2375))) * _2375;
    float _4623 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2421 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
    uint _2435 = _2208 + 9u;
    float _2446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _945) * 0.949999988079071044921875);
    float _2447 = _2446 * _2446;
    float _2448 = cbLight._m0[_2248].x + _1022;
    float _2449 = cbLight._m0[_2248].y + _1023;
    float _2450 = cbLight._m0[_2248].z + _1024;
    float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
    float _2455 = _2454 * _2448;
    float _2456 = _2454 * _2449;
    float _2457 = _2454 * _2450;
    float _2458 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2248].xyz));
    float _4634 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2462 = dot(vec3(_942, _943, _944), vec3(_2455, _2456, _2457));
    float _4645 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2466 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2455, _2456, _2457));
    float _4656 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2470 = _2447 * _2447;
    float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
    float _2481 = exp2(log2(1.0 - (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) * 5.0);
    float _2488 = 1.0 - _2447;
    float _2498 = (0.5 / (((_2376 * ((_2461 * _2488) + _2447)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2488) + _2447) * _2461))) * _2461;
    float _4667 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2500 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
    float _2510 = (((((_2481 * _2398) + _1104) * cbLight._m0[_2435].x) * _2500) * _2231) + ((((cbLight._m0[_2347].x * _2200) * ((_2397 * _2398) + _1104)) * _2421) * _2244);
    float _2511 = (((((_2481 * _2400) + _1106) * cbLight._m0[_2435].y) * _2500) * _2231) + ((((cbLight._m0[_2347].y * _2201) * ((_2397 * _2400) + _1106)) * _2421) * _2244);
    float _2512 = (((((_2481 * _2401) + _1107) * cbLight._m0[_2435].z) * _2500) * _2231) + ((((cbLight._m0[_2347].z * _2202) * ((_2397 * _2401) + _1107)) * _2421) * _2244);
    float _2574;
    float _2576;
    float _2578;
    if (_2284)
    {
        _2574 = _2510;
        _2576 = _2511;
        _2578 = _2512;
    }
    else
    {
        uint _2580 = _2208 + 2u;
        uint _2584 = _2208 + 10u;
        float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _945) * 0.949999988079071044921875);
        float _2599 = _2598 * _2598;
        float _2600 = cbLight._m0[_2580].x + _1022;
        float _2601 = cbLight._m0[_2580].y + _1023;
        float _2602 = cbLight._m0[_2580].z + _1024;
        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
        float _2607 = _2606 * _2600;
        float _2608 = _2606 * _2601;
        float _2609 = _2606 * _2602;
        float _2610 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2580].xyz));
        float _4678 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2614 = dot(vec3(_942, _943, _944), vec3(_2607, _2608, _2609));
        float _4689 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2618 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2607, _2608, _2609));
        float _4700 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2622 = _2599 * _2599;
        float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
        float _2633 = exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0);
        float _2640 = 1.0 - _2599;
        float _2650 = (0.5 / (((_2376 * ((_2613 * _2640) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2640) + _2599) * _2613))) * _2613;
        float _4711 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2652 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
        float _2653 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2574 = (((((_2633 * _2398) + _1104) * cbLight._m0[_2584].x) * _2652) * _2653) + _2510;
        _2576 = (((((_2633 * _2400) + _1106) * cbLight._m0[_2584].y) * _2652) * _2653) + _2511;
        _2578 = (((((_2633 * _2401) + _1107) * cbLight._m0[_2584].z) * _2652) * _2653) + _2512;
    }
    float _2688;
    float _2690;
    float _2692;
    if (_2302)
    {
        _2688 = _2574;
        _2690 = _2576;
        _2692 = _2578;
    }
    else
    {
        uint _2699 = _2208 + 3u;
        uint _2703 = _2208 + 11u;
        float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2699].w)) * _945) * 0.949999988079071044921875);
        float _2718 = _2717 * _2717;
        float _2719 = cbLight._m0[_2699].x + _1022;
        float _2720 = cbLight._m0[_2699].y + _1023;
        float _2721 = cbLight._m0[_2699].z + _1024;
        float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
        float _2726 = _2725 * _2719;
        float _2727 = _2725 * _2720;
        float _2728 = _2725 * _2721;
        float _2729 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2699].xyz));
        float _4727 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2732 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _2733 = dot(vec3(_942, _943, _944), vec3(_2726, _2727, _2728));
        float _4738 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2737 = dot(vec3(cbLight._m0[_2699].xyz), vec3(_2726, _2727, _2728));
        float _4749 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2741 = _2718 * _2718;
        float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
        float _2752 = exp2(log2(1.0 - (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) * 5.0);
        float _2759 = 1.0 - _2718;
        float _2769 = (0.5 / (((_2376 * ((_2732 * _2759) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2759) + _2718) * _2732))) * _2732;
        float _4760 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2771 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
        float _2772 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2688 = (((((_2752 * _2398) + _1104) * cbLight._m0[_2703].x) * _2771) * _2772) + _2574;
        _2690 = (((((_2752 * _2400) + _1106) * cbLight._m0[_2703].y) * _2771) * _2772) + _2576;
        _2692 = (((((_2752 * _2401) + _1107) * cbLight._m0[_2703].z) * _2771) * _2772) + _2578;
    }
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    if (_2206.y == 0u)
    {
        float _2847 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2848 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2847;
        float _2849 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2847;
        float _2850 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2847;
        uvec4 _2862 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2863 = _2862.x;
        uint _2874 = uint((float(_2862.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1043) / _2863))) + floor(float(uint(cbSceneParam._m0[85u].x * _1042) / _2863)));
        float _2884 = (log2(_2850 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2885 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        uint _2888 = uint(isnan(14.0) ? _2885 : (isnan(_2885) ? 14.0 : min(_2885, 14.0)));
        uvec4 _2893 = texelFetch(g_lightClusterGridBuffer, int(((_2888 << 2u) + (_2874 << 6u)) >> 2u));
        uint _2894 = _2893.x;
        uint _2895 = _2862.z;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        if (((((1u << ((_2895 >> 4u) & 15u)) + 4294967295u) & _2894) == 0u) || ((_2895 & 240u) == 0u))
        {
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
        }
        else
        {
            float _2996;
            float _2998;
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            uint _3154 = 0u;
            uint _3163;
            bool _3164;
            for (;;)
            {
                _3163 = texelFetch(g_lightClassification, int((((_2888 << 5u) + (_2874 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                _3164 = _3163 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3164)
                {
                    frontier_phi_66_pred = _3148;
                    frontier_phi_66_pred_1 = _3153;
                    frontier_phi_66_pred_2 = _3152;
                    frontier_phi_66_pred_3 = _3151;
                    frontier_phi_66_pred_4 = _3150;
                    frontier_phi_66_pred_5 = _3149;
                }
                else
                {
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    uint _3299;
                    _3293 = _3148;
                    _3294 = _3149;
                    _3295 = _3150;
                    _3296 = _3151;
                    _3297 = _3152;
                    _3298 = _3153;
                    _3299 = _3163;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    for (;;)
                    {
                        uint _3303 = uint(findLSB(_3299)) + (_3154 << 5u);
                        uint _3300 = (_3299 + 4294967295u) & _3299;
                        uint _3305 = _3303 * 48u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 3u)).x));
                        uint _3325 = (_3303 * 48u) + 4u;
                        vec4 _3338 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 3u)).x));
                        uint _3344 = (_3303 * 48u) + 8u;
                        vec3 _3355 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x));
                        float _3359 = _3319.x - _2848;
                        float _3360 = _3319.y - _2849;
                        float _3361 = _3319.z - _2850;
                        float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                        float _3365 = inversesqrt(_3362);
                        float _3366 = _3365 * _3359;
                        float _3367 = _3365 * _3360;
                        float _3368 = _3365 * _3361;
                        float _3369 = dot(vec3(_1061, _1064, _1067), vec3(_3366, _3367, _3368));
                        float _3374 = 1.0 - (_3362 * _3319.w);
                        float _4786 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3376 = sqrt(_3362) * _3338.w;
                        float _3379 = 1.39999997615814208984375 / (_3376 + 1.39999997615814208984375);
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3369) + _3380;
                        float _3386 = _3376 * _3376;
                        float _3390 = ((isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))) * _3375) / ((_3386 * 0.699999988079071044921875) + 1.0);
                        float _3394 = (-0.0) - _2848;
                        float _3395 = (-0.0) - _2849;
                        float _3396 = (-0.0) - _2850;
                        float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                        float _3401 = _3400 * _3394;
                        float _3402 = _3400 * _3395;
                        float _3403 = _3400 * _3396;
                        float _3411 = exp2(log2(1.0 / ((_3386 * 3.5) + 5.0)) * 0.25);
                        float _3412 = 1.0 - _1136;
                        float _3419 = sqrt(1.0 - ((1.0 - (_3412 * _3412)) * (1.0 - (_3411 * _3411))));
                        float _3420 = _3419 * _3419;
                        float _3421 = _3420 * _3420;
                        float _3422 = _3401 + _3366;
                        float _3423 = _3402 + _3367;
                        float _3424 = _3403 + _3368;
                        float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                        float _3432 = dot(vec3(_1061, _1064, _1067), vec3(_3401, _3402, _3403));
                        float _4802 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3435 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3436 = dot(vec3(_1061, _1064, _1067), vec3(_3428 * _3422, _3428 * _3423, _3428 * _3424));
                        float _4813 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3439 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3443 = ((_3439 * _3439) * (_3421 + (-1.0))) + 1.0;
                        float _3444 = _3379 * _3420;
                        float _3445 = _3444 * _3444;
                        float _3448 = ((1.0 - _3445) * _3369) + _3445;
                        float _4824 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3450 = 1.0 - _3420;
                        float _3460 = (0.5 / (((_3449 * ((_3435 * _3450) + _3420)) + 9.9999999392252902907785028219223e-09) + (((_3449 * _3450) + _3420) * _3435))) * _3449;
                        float _4835 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3471 = (((_3421 * 3.1415927410125732421875) * (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) / ((_3443 * _3443) * ((_3386 * 2.1991131305694580078125) + 3.141590118408203125))) * _3375;
                        _3223 = (_3390 * _3338.x) + _3296;
                        _3224 = (_3390 * _3338.y) + _3297;
                        _3225 = (_3390 * _3338.z) + _3298;
                        _3220 = (_3471 * _3355.x) + _3293;
                        _3221 = (_3471 * _3355.y) + _3294;
                        _3222 = (_3471 * _3355.z) + _3295;
                        if (_3300 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3293 = _3220;
                            _3294 = _3221;
                            _3295 = _3222;
                            _3296 = _3223;
                            _3297 = _3224;
                            _3298 = _3225;
                            _3299 = _3300;
                        }
                    }
                    frontier_phi_66_pred = _3220;
                    frontier_phi_66_pred_1 = _3225;
                    frontier_phi_66_pred_2 = _3224;
                    frontier_phi_66_pred_3 = _3223;
                    frontier_phi_66_pred_4 = _3222;
                    frontier_phi_66_pred_5 = _3221;
                }
                _2996 = frontier_phi_66_pred;
                _3006 = frontier_phi_66_pred_1;
                _3004 = frontier_phi_66_pred_2;
                _3002 = frontier_phi_66_pred_3;
                _3000 = frontier_phi_66_pred_4;
                _2998 = frontier_phi_66_pred_5;
                uint _3155 = _3154 + 1u;
                if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3148 = _2996;
                    _3149 = _2998;
                    _3150 = _3000;
                    _3151 = _3002;
                    _3152 = _3004;
                    _3153 = _3006;
                    _3154 = _3155;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
        }
        uvec4 _3009 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3010 = _3009.z;
        uint _3012 = (_3010 >> 8u) & 15u;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        if (((4294967295u << _3012) & _2894) == 0u)
        {
            _3116 = _2995;
            _3118 = _2997;
            _3120 = _2999;
            _3122 = _3001;
            _3124 = _3003;
            _3126 = _3005;
        }
        else
        {
            float _3141 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
            float _3142 = _3141 * _2848;
            float _3143 = _3141 * _2849;
            float _3144 = _3141 * _2850;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3012 < ((_3010 >> 12u) & 15u))
            {
                float _3117;
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3276 = _2995;
                float _3277 = _2997;
                float _3278 = _2999;
                float _3279 = _3001;
                float _3280 = _3003;
                float _3281 = _3005;
                uint _3282 = _3012;
                uint _3291;
                bool _3292;
                for (;;)
                {
                    _3291 = texelFetch(g_lightClassification, int((((_2888 << 5u) + (_2874 << 9u)) + (_3282 << 2u)) >> 2u)).x;
                    _3292 = _3291 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3292)
                    {
                        frontier_phi_77_pred = _3281;
                        frontier_phi_77_pred_1 = _3280;
                        frontier_phi_77_pred_2 = _3279;
                        frontier_phi_77_pred_3 = _3278;
                        frontier_phi_77_pred_4 = _3277;
                        frontier_phi_77_pred_5 = _3276;
                    }
                    else
                    {
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3498 = _3276;
                        float _3499 = _3277;
                        float _3500 = _3278;
                        float _3501 = _3279;
                        float _3502 = _3280;
                        float _3503 = _3281;
                        uint _3504 = _3291;
                        uint _3505;
                        vec4 _3530;
                        float _3531;
                        vec4 _3546;
                        vec3 _3558;
                        vec4 _3573;
                        vec4 _3588;
                        float _3634;
                        bool _3635;
                        for (;;)
                        {
                            uint _3515 = ((_3282 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3504));
                            _3505 = (_3504 + 4294967295u) & _3504;
                            uint _3517 = _3515 * 40u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            _3531 = _3530.w;
                            uint _3533 = (_3515 * 40u) + 4u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            uint _3548 = (_3515 * 40u) + 8u;
                            _3558 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x));
                            uint _3560 = (_3515 * 40u) + 16u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3575 = (_3515 * 40u) + 20u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3515 * 40u) + 24u;
                            vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3609 = (_3515 * 40u) + 28u;
                            vec4 _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            _3634 = fma(_2850, _3622.z, fma(_2849, _3622.y, _3622.x * _2848)) + _3622.w;
                            _3635 = !((fma(_2850, _3603.z, fma(_2849, _3603.y, _3603.x * _2848)) + _3603.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3635)
                            {
                                float _3662 = _3530.x - _2848;
                                float _3663 = _3530.y - _2849;
                                float _3664 = _3530.z - _2850;
                                float _3665 = dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664));
                                float _3668 = inversesqrt(_3665);
                                float _3669 = _3668 * _3662;
                                float _3670 = _3668 * _3663;
                                float _3671 = _3668 * _3664;
                                float _3675 = 1.0 - (_3665 / (_3531 * _3531));
                                float _4846 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3680 = sqrt(_3665) * _3546.w;
                                float _3682 = 1.39999997615814208984375 / (_3680 + 1.39999997615814208984375);
                                float _3683 = _3682 * _3682;
                                float _3686 = ((1.0 - _3683) * dot(vec3(_3669, _3670, _3671), vec3(_1061, _1064, _1067))) + _3683;
                                float _3689 = _3680 * _3680;
                                float _3693 = (fma(_2850, _3573.z, fma(_2849, _3573.y, _3573.x * _2848)) + _3573.w) / _3634;
                                float _3694 = (fma(_2850, _3588.z, fma(_2849, _3588.y, _3588.x * _2848)) + _3588.w) / _3634;
                                float _3698 = 1.0 - dot(vec2(_3693, _3694), vec2(_3693, _3694));
                                float _4862 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3700 = _3699 * (((isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0))) * _3676) / ((_3689 * 0.699999988079071044921875) + 1.0));
                                float _3712 = exp2(log2(1.0 / ((_3689 * 3.5) + 5.0)) * 0.25);
                                float _3713 = 1.0 - _1136;
                                float _3720 = sqrt(1.0 - ((1.0 - (_3713 * _3713)) * (1.0 - (_3712 * _3712))));
                                float _3721 = _3720 * _3720;
                                float _3722 = _3721 * _3721;
                                float _3723 = _3669 - _3142;
                                float _3724 = _3670 - _3143;
                                float _3725 = _3671 - _3144;
                                float _3729 = inversesqrt(dot(vec3(_3723, _3724, _3725), vec3(_3723, _3724, _3725)));
                                float _3733 = dot(vec3(_1061, _1064, _1067), vec3((-0.0) - _3142, (-0.0) - _3143, (-0.0) - _3144));
                                float _4873 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3736 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3737 = dot(vec3(_1061, _1064, _1067), vec3(_3729 * _3723, _3729 * _3724, _3729 * _3725));
                                float _4884 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3740 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3744 = ((_3740 * _3740) * (_3722 + (-1.0))) + 1.0;
                                float _3745 = _3682 * _3721;
                                float _3746 = _3745 * _3745;
                                float _3752 = ((1.0 - _3746) * dot(vec3(_1061, _1064, _1067), vec3(_3669, _3670, _3671))) + _3746;
                                float _4895 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3753 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3754 = 1.0 - _3721;
                                float _3764 = (0.5 / (((_3753 * ((_3736 * _3754) + _3721)) + 9.9999999392252902907785028219223e-09) + (((_3753 * _3754) + _3721) * _3736))) * _3753;
                                float _4906 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3774 = (_3699 * _3676) * (((_3722 * 3.1415927410125732421875) * (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) / ((_3744 * _3744) * ((_3689 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3700 * _3546.y;
                                frontier_phi_83_pred_1 = _3700 * _3546.x;
                                frontier_phi_83_pred_2 = _3774 * _3558.z;
                                frontier_phi_83_pred_3 = _3774 * _3558.y;
                                frontier_phi_83_pred_4 = _3774 * _3558.x;
                                frontier_phi_83_pred_5 = _3700 * _3546.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3782 = frontier_phi_83_pred;
                            _3781 = frontier_phi_83_pred_1;
                            _3780 = frontier_phi_83_pred_2;
                            _3779 = frontier_phi_83_pred_3;
                            _3778 = frontier_phi_83_pred_4;
                            _3783 = frontier_phi_83_pred_5;
                            _3488 = _3781 + _3501;
                            _3489 = _3782 + _3502;
                            _3490 = _3783 + _3503;
                            _3485 = _3778 + _3498;
                            _3486 = _3779 + _3499;
                            _3487 = _3780 + _3500;
                            if (_3505 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3505;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3490;
                        frontier_phi_77_pred_1 = _3489;
                        frontier_phi_77_pred_2 = _3488;
                        frontier_phi_77_pred_3 = _3487;
                        frontier_phi_77_pred_4 = _3486;
                        frontier_phi_77_pred_5 = _3485;
                    }
                    _3127 = frontier_phi_77_pred;
                    _3125 = frontier_phi_77_pred_1;
                    _3123 = frontier_phi_77_pred_2;
                    _3121 = frontier_phi_77_pred_3;
                    _3119 = frontier_phi_77_pred_4;
                    _3117 = frontier_phi_77_pred_5;
                    uint _3283 = _3282 + 1u;
                    if (_3283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3276 = _3117;
                        _3277 = _3119;
                        _3278 = _3121;
                        _3279 = _3123;
                        _3280 = _3125;
                        _3281 = _3127;
                        _3282 = _3283;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3121;
                frontier_phi_58_59_ladder_1 = _3127;
                frontier_phi_58_59_ladder_2 = _3125;
                frontier_phi_58_59_ladder_3 = _3123;
                frontier_phi_58_59_ladder_4 = _3119;
                frontier_phi_58_59_ladder_5 = _3117;
            }
            else
            {
                frontier_phi_58_59_ladder = _2999;
                frontier_phi_58_59_ladder_1 = _3005;
                frontier_phi_58_59_ladder_2 = _3003;
                frontier_phi_58_59_ladder_3 = _3001;
                frontier_phi_58_59_ladder_4 = _2997;
                frontier_phi_58_59_ladder_5 = _2995;
            }
            _3116 = frontier_phi_58_59_ladder_5;
            _3118 = frontier_phi_58_59_ladder_4;
            _3120 = frontier_phi_58_59_ladder;
            _3122 = frontier_phi_58_59_ladder_3;
            _3124 = frontier_phi_58_59_ladder_2;
            _3126 = frontier_phi_58_59_ladder_1;
        }
        float _3131 = isnan(1.0) ? _1120 : (isnan(_1120) ? 1.0 : min(_1120, 1.0));
        _2907 = (_3131 * _3122) + _2340;
        _2909 = (_3131 * _3124) + _2342;
        _2911 = (_3131 * _3126) + _2344;
        _2913 = ((_3116 * _1104) * _3131) + _2688;
        _2915 = ((_3118 * _1106) * _3131) + _2690;
        _2917 = ((_3120 * _1107) * _3131) + _2692;
    }
    else
    {
        _2907 = _2340;
        _2909 = _2342;
        _2911 = _2344;
        _2913 = _2688;
        _2915 = _2690;
        _2917 = _2692;
    }
    float _4922 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _4933 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _4944 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _2934 = ((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2907 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1120))) + ((_2913 + ((isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0))) * _1959)) * cbPerFrame._m0[3u].x);
    float _2935 = ((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2909 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1120))) + ((_2915 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1959)) * cbPerFrame._m0[3u].x);
    float _2936 = ((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2911 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1120))) + ((_2917 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1959)) * cbPerFrame._m0[3u].x);
    uint _2937 = _284 + 6u;
    float _2945 = _1042 / cbSceneParam._m0[86u].x;
    float _2946 = _1043 / cbSceneParam._m0[86u].y;
    vec4 _2960 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2945, _2946, (log2((isnan(cbSceneParam._m0[77u].w) ? _964 : (isnan(_964) ? cbSceneParam._m0[77u].w : min(_964, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2962 = _2960.x;
    float _2963 = _2960.y;
    float _2964 = _2960.z;
    float _2965 = _2960.w;
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    if (_964 > cbSceneParam._m0[78u].w)
    {
        float _3020 = isnan(_964) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _964 : min(cbSceneParam._m0[80u].w, _964));
        float _3021 = _3020 / _964;
        float _3032 = _3021 * _1015;
        float _3033 = _1016 * _3021;
        float _3034 = (-0.0) - _3033;
        float _3036 = _3021 * _1017;
        float _3038 = (cbSceneParam._m0[77u].w * _3034) / _3020;
        float _3039 = _3038 + cbSceneParam._m0[79u].w;
        float _3040 = cbSceneParam._m0[79u].w - _3033;
        float _3046 = sqrt(((_3032 * _3032) + (_3033 * _3033)) + (_3036 * _3036));
        float _3049 = (1.0 - (cbSceneParam._m0[77u].w / _3020)) * _3046;
        float _3054 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3056 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3233;
        if (abs((_3034 - _3038) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3233 = ((((_3039 > 0.0) ? exp2(_3054 * _3039) : (2.0 - exp2(_3056 * _3039))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3049;
        }
        else
        {
            float _3177 = 1.0 / cbSceneParam._m0[80u].x;
            float _3178 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : max(_3039, _3040));
            float _3179 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : min(_3039, _3040));
            float _3188 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : min(_3178, 0.0));
            float _3189 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : min(_3179, 0.0));
            _3233 = ((abs(_3046 / _3034) * cbSceneParam._m0[80u].y) * ((((_3188 - _3189) * 2.0) - ((exp2(_3054 * (isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0)))) - exp2(_3054 * (isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))))) * _3177)) - ((exp2(_3056 * _3188) - exp2(_3056 * _3189)) * _3177))) + (_3049 * cbSceneParam._m0[80u].z);
        }
        vec4 _3235 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2945, _2946, 1.0), 0.0);
        float _3244 = exp2((_3233 * (-1.44269502162933349609375)) * (1.0 - _3235.w));
        float _3245 = log2(_3244);
        float _3261 = log2(_2965);
        _3058 = (exp2(_3261 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].x)) * _3235.x) / cbSceneParam._m0[78u].x)) + _2962;
        _3060 = (exp2(_3261 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].y)) * _3235.y) / cbSceneParam._m0[78u].y)) + _2963;
        _3062 = (exp2(_3261 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].z)) * _3235.z) / cbSceneParam._m0[78u].z)) + _2964;
        _3064 = _3244 * _2965;
    }
    else
    {
        _3058 = _2962;
        _3060 = _2963;
        _3062 = _2964;
        _3064 = _2965;
    }
    bool _3271;
    vec4 _3074;
    vec4 _3096;
    float _3098;
    float _3102;
    float _3103;
    float _3104;
    float _3105;
    bool _3115;
    for (;;)
    {
        _3074 = cbMatDynParam._m0[0u];
        float _3076 = roundEven(_3074.y);
        bool _3077 = _3076 == 3.0;
        float _3078 = log2(_3064);
        float _3085 = exp2(_3078 * cbSceneParam._m0[78u].x) * _2934;
        float _3086 = exp2(_3078 * cbSceneParam._m0[78u].y) * _2935;
        float _3087 = exp2(_3078 * cbSceneParam._m0[78u].z) * _2936;
        float _3094 = _1031 + (-0.5);
        _3096 = cbMtdParam._m0[1u];
        _3098 = _3096.y * _3094;
        float _3101 = (_3076 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3102 = _3101 * (_3077 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3058)));
        _3103 = _3101 * (_3077 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3060)));
        _3104 = _3101 * (_3077 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3062)));
        _3105 = _3094 * 0.999000012874603271484375;
        _3115 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3115)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3105) < 0.5)
            {
                _3271 = true;
                break;
            }
        }
        uint _3212 = _1080 + uint(_3074.w);
        if ((cbInstanceData._m0[_3212].w < 1.0) && ((cbInstanceData._m0[_3212].w + _3105) < 0.5))
        {
            _3271 = true;
            break;
        }
        if ((_3098 + 1.0) < _3096.x)
        {
            _3271 = true;
            break;
        }
        _3271 = false;
        break;
    }
    float _3476;
    if (_3271)
    {
        discard_state = true;
        _3476 = 0.0;
    }
    else
    {
        _3476 = cbInstanceData._m0[_2937].w;
    }
    SV_Target.x = _3102;
    SV_Target.y = _3103;
    SV_Target.z = _3104;
    SV_Target.w = _3476;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2937].w;
    discard_exit();
}


