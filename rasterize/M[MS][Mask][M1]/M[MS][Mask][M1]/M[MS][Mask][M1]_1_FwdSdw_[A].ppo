#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1134;
float _3802;
float _3803;
float _3804;
float _3805;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _373 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_361 - _373) * cbMtdParam._m0[23u].w) + _373) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3814 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _398 = (_391 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _399 = (_391 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _400 = (_391 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _443 = ((_413.z - _434) * _391) + _434;
    float _446 = ((((_413.x - _432) * _391) + _432) * 2.0) + (-1.0);
    float _448 = ((((_413.y - _433) * _391) + _433) * 2.0) + (-1.0);
    float _449 = dot(vec2(_446, _448), vec2(_446, _448));
    float _3825 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _482 = (((_470.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _446;
    float _483 = (((_470.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _511 = _509.x;
    float _529 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _511) * _391) + _511;
    float _533 = ((_495.x - _529) * cbMtdParam._m0[19u].z) + _529;
    float _537 = (cbMtdParam._m0[19u].w * (_470.z - _443)) + _443;
    float _539 = cbMtdParam._m0[22u].x + _470.w;
    float _542 = fma(_454, _225 * NORMAL.x, fma(_483, _232 * TANGENT.x, (_218 * _210) * _482));
    float _545 = fma(_454, _225 * NORMAL.y, fma(_483, _232 * TANGENT.y, (_218 * _211) * _482));
    float _548 = fma(_454, _225 * NORMAL.z, fma(_483, _232 * TANGENT.z, (_218 * _212) * _482));
    float _552 = inversesqrt(dot(vec3(_542, _545, _548), vec3(_542, _545, _548)));
    float _553 = _552 * _542;
    float _554 = _552 * _545;
    float _555 = _552 * _548;
    float _3836 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _556 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3858 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3869 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3880 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3891 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _561 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _626 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _616);
    float _627 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _616);
    float _628 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _616);
    float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
    float _633 = _626 * _632;
    float _634 = _627 * _632;
    float _635 = _628 * _632;
    vec4 _640 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _642 = _640.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _814 = sqrt(((_626 * _626) + (_627 * _627)) + (_628 * _628));
        float _820 = (cbMatDynParam._m0[5u].x * _814) + cbMatDynParam._m0[5u].y;
        float _3902 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _825 = (cbMatDynParam._m0[5u].z * _814) + cbMatDynParam._m0[5u].w;
        float _3913 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) - _821)) + _821) < ((_642 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _653 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _654 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _672 = fma(_555, cbSceneParam._m0[5u].z, fma(_554, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _553));
    float _675 = fma(_555, cbSceneParam._m0[6u].z, fma(_554, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _553));
    float _678 = fma(_555, cbSceneParam._m0[7u].z, fma(_554, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _553));
    uint _691 = _238 + 9u;
    uint _692 = _691 + uint(cbMatDynParam._m0[0u].w);
    float _698 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_692].x;
    float _699 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_692].y;
    float _700 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_692].z;
    float _3924 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _703 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _704 = 1.0 - _561;
    float _705 = _701 * _704;
    float _706 = _702 * _704;
    float _707 = _703 * _704;
    float _712 = (_701 + (-0.039999999105930328369140625)) * _561;
    float _713 = (_702 + (-0.039999999105930328369140625)) * _561;
    float _714 = (_703 + (-0.039999999105930328369140625)) * _561;
    float _715 = _712 + 0.039999999105930328369140625;
    float _717 = _713 + 0.039999999105930328369140625;
    float _718 = _714 + 0.039999999105930328369140625;
    vec4 _727 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _653, cbSceneParam._m0[86u].y * _654));
    float _731 = ((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * TEXCOORD_5.w) * _727.x;
    float _732 = dot(vec3(_553, _554, _555), vec3(_633, _634, _635));
    float _735 = _732 * 2.0;
    float _739 = (_735 * _553) - _633;
    float _740 = (_735 * _554) - _634;
    float _741 = (_735 * _555) - _635;
    float _745 = abs(dot(vec3(_633, _634, _635), vec3(_553, _554, _555)));
    float _3957 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _747 = sqrt(_556);
    float _760 = exp2((_747 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_747 * 3.0));
    float _766 = (1.0 - _760) * ((_747 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _767 = _760 * _747;
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1133;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _858 = fma(_803, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795));
        float _862 = fma(_803, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795));
        float _866 = fma(_803, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795));
        float _891 = _795 + _553;
        float _892 = _799 + _554;
        float _893 = _803 + _555;
        float _903 = fma(_893, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _891)) - _858;
        float _904 = fma(_893, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _891)) - _862;
        float _905 = fma(_893, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _891)) - _866;
        float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
        float _922 = ((_909 * _903) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_858 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_909 * _904) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_862 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_909 * _905) / cbModelParam._m0[34u].z) + ((((((_866 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        float _961 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_927.x + (-0.5));
        float _963 = _961 * (_927.y + (-0.5));
        float _964 = _961 * (_927.z + (-0.5));
        float _971 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_934.x + (-0.5));
        float _973 = _971 * (_934.y + (-0.5));
        float _974 = _971 * (_934.z + (-0.5));
        float _981 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_941.x + (-0.5));
        float _983 = _981 * (_941.y + (-0.5));
        float _984 = _981 * (_941.z + (-0.5));
        float _991 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_948.x + (-0.5));
        float _993 = _991 * (_948.y + (-0.5));
        float _994 = _991 * (_948.z + (-0.5));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = _962 * 0.5;
        float _999 = _972 * 0.5;
        float _1000 = _982 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1015 = (dot(vec3(_553, _554, _555), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1025 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _4005 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1027 + 1.0))) + _1032) * _995;
        float _1042 = _963 * 0.5;
        float _1043 = _973 * 0.5;
        float _1044 = _983 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_553, _554, _555), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _4038 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1069 + 1.0))) + _1074) * _996;
        float _1084 = _964 * 0.5;
        float _1085 = _974 * 0.5;
        float _1086 = _984 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_553, _554, _555), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _4071 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1111 + 1.0))) + _1116) * _997;
        _1133 = _964;
        _1135 = _963;
        _1136 = _962;
        _1137 = _974;
        _1138 = _973;
        _1139 = _972;
        _1140 = _984;
        _1141 = _983;
        _1142 = _982;
        _1143 = _997;
        _1144 = _996;
        _1145 = _995;
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
    }
    else
    {
        _1133 = _1134;
        _1135 = _1134;
        _1136 = _1134;
        _1137 = _1134;
        _1138 = _1134;
        _1139 = _1134;
        _1140 = _1134;
        _1141 = _1134;
        _1142 = _1134;
        _1143 = _1134;
        _1144 = _1134;
        _1145 = _1134;
        _1146 = 0.0;
        _1147 = 0.0;
        _1148 = 0.0;
    }
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1176 = fma(_803, cbModelParam._m0[30u].z, fma(_799, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _795));
        float _1180 = fma(_803, cbModelParam._m0[31u].z, fma(_799, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _795));
        float _1184 = fma(_803, cbModelParam._m0[32u].z, fma(_799, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _795));
        float _1207 = _795 + _553;
        float _1208 = _799 + _554;
        float _1209 = _803 + _555;
        float _1219 = fma(_1209, cbModelParam._m0[30u].z, fma(_1208, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1207)) - _1176;
        float _1220 = fma(_1209, cbModelParam._m0[31u].z, fma(_1208, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1207)) - _1180;
        float _1221 = fma(_1209, cbModelParam._m0[32u].z, fma(_1208, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1207)) - _1184;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1176 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1180 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[35u].z) + ((((((_1184 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1275 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1242.x + (-0.5));
        float _1277 = _1275 * (_1242.y + (-0.5));
        float _1278 = _1275 * (_1242.z + (-0.5));
        float _1285 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1249.x + (-0.5));
        float _1287 = _1285 * (_1249.y + (-0.5));
        float _1288 = _1285 * (_1249.z + (-0.5));
        float _1295 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1256.x + (-0.5));
        float _1297 = _1295 * (_1256.y + (-0.5));
        float _1298 = _1295 * (_1256.z + (-0.5));
        float _1305 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1263.x + (-0.5));
        float _1307 = _1305 * (_1263.y + (-0.5));
        float _1308 = _1305 * (_1263.z + (-0.5));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = _1276 * 0.5;
        float _1313 = _1286 * 0.5;
        float _1314 = _1296 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_553, _554, _555), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4134 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1339 + 1.0))) + _1344) * _1309;
        float _1354 = _1277 * 0.5;
        float _1355 = _1287 * 0.5;
        float _1356 = _1297 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_553, _554, _555), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4167 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1381 + 1.0))) + _1386) * _1310;
        float _1396 = _1278 * 0.5;
        float _1397 = _1288 * 0.5;
        float _1398 = _1298 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_553, _554, _555), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4200 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1423 + 1.0))) + _1428) * _1311;
        _1445 = _1278;
        _1446 = _1277;
        _1447 = _1276;
        _1448 = _1288;
        _1449 = _1287;
        _1450 = _1286;
        _1451 = _1298;
        _1452 = _1297;
        _1453 = _1296;
        _1454 = _1311;
        _1455 = _1310;
        _1456 = _1309;
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
    }
    else
    {
        _1445 = _1134;
        _1446 = _1134;
        _1447 = _1134;
        _1448 = _1134;
        _1449 = _1134;
        _1450 = _1134;
        _1451 = _1134;
        _1452 = _1134;
        _1453 = _1134;
        _1454 = _1134;
        _1455 = _1134;
        _1456 = _1134;
        _1457 = 0.0;
        _1458 = 0.0;
        _1459 = 0.0;
    }
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1146)) + _1146;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1147)) + _1147;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1148)) + _1148;
    float _1492 = fma(_1471, cbSceneParam._m0[89u].z, fma(_1470, cbSceneParam._m0[89u].y, _1469 * cbSceneParam._m0[89u].x));
    float _1495 = fma(_1471, cbSceneParam._m0[90u].z, fma(_1470, cbSceneParam._m0[90u].y, _1469 * cbSceneParam._m0[90u].x));
    float _1498 = fma(_1471, cbSceneParam._m0[91u].z, fma(_1470, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1469));
    float _1513 = _739 * 0.5;
    float _1514 = _740 * 0.5;
    float _1515 = _741 * 0.5;
    float _1516 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1519 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1522 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1556;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1529 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1133, _1137, _1140, _1143));
        float _1533 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1537 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1136, _1139, _1142, _1145));
        float _1544 = dot(vec4(cbModelParam._m0[39u]), vec4(_1513, _1514, _1515, 1.0));
        _1556 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1556 = 1.0;
    }
    float _1567;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1558 = dot(vec4(cbModelParam._m0[40u]), vec4(_1513, _1514, _1515, 1.0));
        _1567 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1558) ? 0.0 : (isnan(0.0) ? _1558 : max(0.0, _1558))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1567 = 1.0;
    }
    float _1571 = (_1567 * cbModelParam._m0[1u].x) + (_1556 * (1.0 - cbModelParam._m0[1u].x));
    float _1581 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _556);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1581 : min(cbModelParam._m0[25u].z, _1581));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1631 = fma(_803, cbModelParam._m0[13u].z, fma(_799, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _795)) + cbModelParam._m0[13u].w;
        float _1635 = fma(_803, cbModelParam._m0[14u].z, fma(_799, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _795)) + cbModelParam._m0[14u].w;
        float _1639 = fma(_803, cbModelParam._m0[15u].z, fma(_799, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _795)) + cbModelParam._m0[15u].w;
        float _1642 = fma(_741, cbModelParam._m0[13u].z, fma(_740, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739));
        float _1645 = fma(_741, cbModelParam._m0[14u].z, fma(_740, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739));
        float _1648 = fma(_741, cbModelParam._m0[15u].z, fma(_740, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739));
        float _1676;
        if (_1642 > 0.0)
        {
            _1676 = abs((1.0 - _1631) / _1642);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1631 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1676 = frontier_phi_17_15_ladder;
        }
        float _1849;
        if (_1645 > 0.0)
        {
            _1849 = abs((1.0 - _1635) / _1645);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1635 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1849 = frontier_phi_26_22_ladder;
        }
        float _2144;
        if (_1648 > 0.0)
        {
            _2144 = abs((1.0 - _1639) / _1648);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1639 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2144 = frontier_phi_38_33_ladder;
        }
        float _2146 = isnan(_1849) ? _1676 : (isnan(_1676) ? _1849 : min(_1676, _1849));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1642) + _1631;
        float _2152 = (_2147 * _1645) + _1635;
        float _2153 = (_2147 * _1648) + _1639;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2154;
        float _2158 = _2154 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 > _2158) || ((_2152 < _2156) || ((_2151 < _2156) || (_2151 > _2158))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2298 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2153, cbModelParam._m0[9u].z, fma(_2152, cbModelParam._m0[9u].y, _2151 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2153, cbModelParam._m0[10u].z, fma(_2152, cbModelParam._m0[10u].y, _2151 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2153, cbModelParam._m0[11u].z, fma(_2152, cbModelParam._m0[11u].y, _2151 * cbModelParam._m0[11u].x))), _1582);
            frontier_phi_16_38_ladder = _2298.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2298.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2298.x * cbModelParam._m0[1u].y;
        }
        _1664 = frontier_phi_16_38_ladder_2;
        _1666 = frontier_phi_16_38_ladder_1;
        _1668 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_739, _740, _741), _1582);
        _1664 = _1652.x * cbModelParam._m0[1u].y;
        _1666 = _1652.y * cbModelParam._m0[1u].y;
        _1668 = _1652.z * cbModelParam._m0[1u].y;
    }
    float _1672 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _556);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1672 : min(cbModelParam._m0[25u].w, _1672));
    float _1764;
    float _1766;
    float _1768;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1728 = fma(_803, cbModelParam._m0[21u].z, fma(_799, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _795)) + cbModelParam._m0[21u].w;
        float _1732 = fma(_803, cbModelParam._m0[22u].z, fma(_799, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _795)) + cbModelParam._m0[22u].w;
        float _1736 = fma(_803, cbModelParam._m0[23u].z, fma(_799, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _795)) + cbModelParam._m0[23u].w;
        float _1739 = fma(_741, cbModelParam._m0[21u].z, fma(_740, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739));
        float _1742 = fma(_741, cbModelParam._m0[22u].z, fma(_740, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739));
        float _1745 = fma(_741, cbModelParam._m0[23u].z, fma(_740, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739));
        float _1854;
        if (_1739 > 0.0)
        {
            _1854 = abs((1.0 - _1728) / _1739);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1728 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1854 = frontier_phi_28_24_ladder;
        }
        float _2171;
        if (_1742 > 0.0)
        {
            _2171 = abs((1.0 - _1732) / _1742);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1732 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2171 = frontier_phi_40_35_ladder;
        }
        float _2509;
        if (_1745 > 0.0)
        {
            _2509 = abs((1.0 - _1736) / _1745);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1736 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2509 = frontier_phi_50_47_ladder;
        }
        float _2511 = isnan(_2171) ? _1854 : (isnan(_1854) ? _2171 : min(_1854, _2171));
        float _2512 = isnan(_2509) ? _2511 : (isnan(_2511) ? _2509 : min(_2511, _2509));
        float _2516 = (_2512 * _1739) + _1728;
        float _2517 = (_2512 * _1742) + _1732;
        float _2518 = (_2512 * _1745) + _1736;
        float _2519 = _2512 * 9.9999997473787516355514526367188e-05;
        float _2520 = (-1.0) - _2519;
        float _2522 = _2519 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2518 > _2522) || ((_2518 < _2520) || ((_2517 > _2522) || ((_2517 < _2520) || ((_2516 < _2520) || (_2516 > _2522))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2518, cbModelParam._m0[17u].z, fma(_2517, cbModelParam._m0[17u].y, _2516 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2518, cbModelParam._m0[18u].z, fma(_2517, cbModelParam._m0[18u].y, _2516 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2518, cbModelParam._m0[19u].z, fma(_2517, cbModelParam._m0[19u].y, _2516 * cbModelParam._m0[19u].x))), _1673);
            frontier_phi_25_50_ladder = _2640.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2640.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2640.x * cbModelParam._m0[1u].z;
        }
        _1764 = frontier_phi_25_50_ladder_2;
        _1766 = frontier_phi_25_50_ladder_1;
        _1768 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_739, _740, _741), _1673);
        _1764 = _1748.x * cbModelParam._m0[1u].z;
        _1766 = _1748.y * cbModelParam._m0[1u].z;
        _1768 = _1748.z * cbModelParam._m0[1u].z;
    }
    float _1781 = (((_766 * _715) + _767) * _731) * ((cbModelParam._m0[1u].w * (_1764 - _1664)) + _1664);
    float _1783 = (((_766 * _717) + _767) * _731) * ((cbModelParam._m0[1u].w * (_1766 - _1666)) + _1666);
    float _1785 = (((_766 * _718) + _767) * _731) * ((cbModelParam._m0[1u].w * (_1768 - _1668)) + _1668);
    float _1788 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1783, cbSceneParam._m0[89u].y, _1781 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1783, cbSceneParam._m0[90u].y, _1781 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1783, cbSceneParam._m0[91u].y, _1781 * cbSceneParam._m0[91u].x));
    float _1828 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1832 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1836 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1840 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1841 = _1828 / _1840;
    float _1842 = _1832 / _1840;
    float _1843 = _1836 / _1840;
    float _1990;
    float _1991;
    float _1992;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1870 = ((uint(_1843 > cbSceneParam._m0[59u].y) + uint(_1843 > cbSceneParam._m0[59u].x)) + uint(_1843 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1871 = _1870 + 43u;
        uint _1879 = _1870 + 44u;
        uint _1887 = _1870 + 45u;
        uint _1895 = _1870 + 46u;
        float _1906 = fma(_1840, cbSceneParam._m0[_1871].w, fma(_1836, cbSceneParam._m0[_1871].z, fma(_1832, cbSceneParam._m0[_1871].y, _1828 * cbSceneParam._m0[_1871].x)));
        float _1910 = fma(_1840, cbSceneParam._m0[_1879].w, fma(_1836, cbSceneParam._m0[_1879].z, fma(_1832, cbSceneParam._m0[_1879].y, _1828 * cbSceneParam._m0[_1879].x)));
        float _1918 = fma(_1840, cbSceneParam._m0[_1895].w, fma(_1836, cbSceneParam._m0[_1895].z, fma(_1832, cbSceneParam._m0[_1895].y, _1828 * cbSceneParam._m0[_1895].x)));
        float _1923 = cbSceneParam._m0[33u].z * _1918;
        float _1925 = cbSceneParam._m0[33u].w * _1918;
        float _1928 = fma(_1840, cbSceneParam._m0[_1887].w, fma(_1836, cbSceneParam._m0[_1887].z, fma(_1832, cbSceneParam._m0[_1887].y, _1828 * cbSceneParam._m0[_1887].x))) / _1918;
        float _1976 = (cbSceneParam._m0[33u].x - sqrt(((_1842 * _1842) + (_1841 * _1841)) + (_1843 * _1843))) * cbSceneParam._m0[33u].y;
        float _4326 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1983 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 + _1906) / _1918, (_1925 + _1910) / _1918), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1925 + _1906) / _1918, (_1910 - _1923) / _1918), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1906 - _1923) / _1918, (_1910 - _1925) / _1918), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1906 - _1925) / _1918, (_1923 + _1910) / _1918), _1928), 0.0)).x), vec4(0.25)));
        _1990 = 1.0 - (_1983 * cbSceneParam._m0[34u].x);
        _1991 = 1.0 - (_1983 * cbSceneParam._m0[34u].y);
        _1992 = 1.0 - (_1983 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1990 = 1.0;
        _1991 = 1.0;
        _1992 = 1.0;
    }
    float _2056;
    float _2058;
    float _2060;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2044 = fma(_1840, cbSceneParam._m0[63u].w, fma(_1836, cbSceneParam._m0[63u].z, fma(_1832, cbSceneParam._m0[63u].y, _1828 * cbSceneParam._m0[63u].x)));
        float _2045 = fma(_1840, cbSceneParam._m0[60u].w, fma(_1836, cbSceneParam._m0[60u].z, fma(_1832, cbSceneParam._m0[60u].y, _1828 * cbSceneParam._m0[60u].x))) / _2044;
        float _2046 = fma(_1840, cbSceneParam._m0[61u].w, fma(_1836, cbSceneParam._m0[61u].z, fma(_1832, cbSceneParam._m0[61u].y, _1828 * cbSceneParam._m0[61u].x))) / _2044;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2045 >= cbSceneParam._m0[64u].x) && (_2046 >= cbSceneParam._m0[64u].y)) && (_2045 <= cbSceneParam._m0[64u].z)) && (_2046 <= cbSceneParam._m0[64u].w))
        {
            float _2184 = fma(_1840, cbSceneParam._m0[62u].w, fma(_1836, cbSceneParam._m0[62u].z, fma(_1832, cbSceneParam._m0[62u].y, _1828 * cbSceneParam._m0[62u].x))) / _2044;
            float _2188 = isnan(cbSceneParam._m0[41u].w) ? _2184 : (isnan(_2184) ? cbSceneParam._m0[41u].w : max(_2184, cbSceneParam._m0[41u].w));
            float _2231 = (cbSceneParam._m0[33u].x - sqrt(((_1842 * _1842) + (_1841 * _1841)) + (_1843 * _1843))) * cbSceneParam._m0[33u].y;
            float _4342 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
            float _2238 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2045, cbSceneParam._m0[33u].w + _2046), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2045, _2046 - cbSceneParam._m0[33u].z), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2045 - cbSceneParam._m0[33u].z, _2046 - cbSceneParam._m0[33u].w), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2045 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2046), _2188), 0.0)).x), vec4(0.25)));
            float _2242 = 1.0 - (_2238 * cbSceneParam._m0[34u].x);
            float _2243 = 1.0 - (_2238 * cbSceneParam._m0[34u].y);
            float _2244 = 1.0 - (_2238 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2244) ? _1992 : (isnan(_1992) ? _2244 : min(_1992, _2244));
            frontier_phi_37_36_ladder_1 = isnan(_2243) ? _1991 : (isnan(_1991) ? _2243 : min(_1991, _2243));
            frontier_phi_37_36_ladder_2 = isnan(_2242) ? _1990 : (isnan(_1990) ? _2242 : min(_1990, _2242));
        }
        else
        {
            frontier_phi_37_36_ladder = _1992;
            frontier_phi_37_36_ladder_1 = _1991;
            frontier_phi_37_36_ladder_2 = _1990;
        }
        _2056 = frontier_phi_37_36_ladder_2;
        _2058 = frontier_phi_37_36_ladder_1;
        _2060 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2056 = _1990;
        _2058 = _1991;
        _2060 = _1992;
    }
    uvec4 _2065 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2067 = _2065.x * 14u;
    uint _2068 = _2067 + 13u;
    float _2075 = _731 + (-1.0);
    float _2080 = (cbLight._m0[_2068].x * _2075) + 1.0;
    float _2081 = (cbLight._m0[_2068].y * _2075) + 1.0;
    float _2082 = (cbLight._m0[_2068].z * _2075) + 1.0;
    float _2083 = (cbLight._m0[_2068].w * _2075) + 1.0;
    uint _2084 = _2067 + 5u;
    float _2090 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
    uint _2094 = _2067 + 4u;
    float _2103 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2107 = _2067 | 1u;
    float _2118 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_553, _554, _555));
    float _2121 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_553, _554, _555));
    float _4378 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _4389 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2126 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2128 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2135 = ((cbLight._m0[_2084].x * _2090) * _2128) + (((cbLight._m0[_2094].x * _2056) * _2103) * _2126);
    float _2136 = ((_2090 * cbLight._m0[_2084].y) * _2128) + (((cbLight._m0[_2094].y * _2058) * _2103) * _2126);
    float _2137 = ((_2090 * cbLight._m0[_2084].z) * _2128) + (((cbLight._m0[_2094].z * _2060) * _2103) * _2126);
    uvec4 _2141 = floatBitsToUint(cbLight._m0[_2067 + 12u]);
    bool _2143 = _2141.x == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2143)
    {
        _2245 = _2135;
        _2247 = _2136;
        _2249 = _2137;
    }
    else
    {
        uint _2253 = _2067 + 6u;
        float _2269 = (dot(vec3(cbLight._m0[_2067 + 2u].xyz), vec3(_553, _554, _555)) * 0.5) + 0.5;
        float _2270 = _2269 * _2269;
        float _4400 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2271 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2272 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2245 = (((cbLight._m0[_2253].x * 0.3183098733425140380859375) * _2271) * _2272) + _2135;
        _2247 = (((cbLight._m0[_2253].y * 0.3183098733425140380859375) * _2271) * _2272) + _2136;
        _2249 = (((cbLight._m0[_2253].z * 0.3183098733425140380859375) * _2271) * _2272) + _2137;
    }
    bool _2252 = _2141.y == 0u;
    float _2307;
    float _2309;
    float _2311;
    if (_2252)
    {
        _2307 = _2245;
        _2309 = _2247;
        _2311 = _2249;
    }
    else
    {
        uint _2480 = _2067 + 7u;
        float _2496 = (dot(vec3(cbLight._m0[_2067 + 3u].xyz), vec3(_553, _554, _555)) * 0.5) + 0.5;
        float _2497 = _2496 * _2496;
        float _4416 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2498 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2499 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2307 = (((cbLight._m0[_2480].x * 0.3183098733425140380859375) * _2498) * _2499) + _2245;
        _2309 = (((cbLight._m0[_2480].y * 0.3183098733425140380859375) * _2498) * _2499) + _2247;
        _2311 = (((cbLight._m0[_2480].z * 0.3183098733425140380859375) * _2498) * _2499) + _2249;
    }
    uint _2314 = _2067 + 8u;
    float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _556) * 0.949999988079071044921875);
    float _2328 = _2327 * _2327;
    float _2329 = cbLight._m0[_2067].x + _633;
    float _2330 = cbLight._m0[_2067].y + _634;
    float _2331 = cbLight._m0[_2067].z + _635;
    float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
    float _2336 = _2335 * _2329;
    float _2337 = _2335 * _2330;
    float _2338 = _2335 * _2331;
    float _2339 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2067].xyz));
    float _4432 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _4443 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _2343 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2344 = dot(vec3(_553, _554, _555), vec3(_2336, _2337, _2338));
    float _4454 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2348 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2336, _2337, _2338));
    float _4465 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = _2328 * _2328;
    float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
    float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
    float _2365 = 0.959999978542327880859375 - _712;
    float _2367 = 0.959999978542327880859375 - _713;
    float _2368 = 0.959999978542327880859375 - _714;
    float _2375 = 1.0 - _2328;
    float _2386 = (0.5 / (((_2343 * ((_2342 * _2375) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2375) + _2328) * _2342))) * _2342;
    float _4476 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2388 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
    uint _2402 = _2067 + 9u;
    float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _556) * 0.949999988079071044921875);
    float _2414 = _2413 * _2413;
    float _2415 = cbLight._m0[_2107].x + _633;
    float _2416 = cbLight._m0[_2107].y + _634;
    float _2417 = cbLight._m0[_2107].z + _635;
    float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
    float _2422 = _2421 * _2415;
    float _2423 = _2421 * _2416;
    float _2424 = _2421 * _2417;
    float _2425 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2107].xyz));
    float _4487 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2429 = dot(vec3(_553, _554, _555), vec3(_2422, _2423, _2424));
    float _4498 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2422, _2423, _2424));
    float _4509 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2414 * _2414;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2448 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
    float _2455 = 1.0 - _2414;
    float _2465 = (0.5 / (((_2343 * ((_2428 * _2455) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2455) + _2414) * _2428))) * _2428;
    float _4520 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2467 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    float _2477 = (((((_2448 * _2365) + _715) * cbLight._m0[_2402].x) * _2467) * _2090) + ((((cbLight._m0[_2314].x * _2056) * ((_2364 * _2365) + _715)) * _2388) * _2103);
    float _2478 = (((((_2448 * _2367) + _717) * cbLight._m0[_2402].y) * _2467) * _2090) + ((((cbLight._m0[_2314].y * _2058) * ((_2364 * _2367) + _717)) * _2388) * _2103);
    float _2479 = (((((_2448 * _2368) + _718) * cbLight._m0[_2402].z) * _2467) * _2090) + ((((cbLight._m0[_2314].z * _2060) * ((_2364 * _2368) + _718)) * _2388) * _2103);
    float _2535;
    float _2537;
    float _2539;
    if (_2143)
    {
        _2535 = _2477;
        _2537 = _2478;
        _2539 = _2479;
    }
    else
    {
        uint _2541 = _2067 + 2u;
        uint _2545 = _2067 + 10u;
        float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _556) * 0.949999988079071044921875);
        float _2560 = _2559 * _2559;
        float _2561 = cbLight._m0[_2541].x + _633;
        float _2562 = cbLight._m0[_2541].y + _634;
        float _2563 = cbLight._m0[_2541].z + _635;
        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
        float _2568 = _2567 * _2561;
        float _2569 = _2567 * _2562;
        float _2570 = _2567 * _2563;
        float _2571 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2541].xyz));
        float _4531 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2575 = dot(vec3(_553, _554, _555), vec3(_2568, _2569, _2570));
        float _4542 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2579 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2568, _2569, _2570));
        float _4553 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2583 = _2560 * _2560;
        float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
        float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
        float _2601 = 1.0 - _2560;
        float _2611 = (0.5 / (((_2343 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2601) + _2560) * _2574))) * _2574;
        float _4564 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2613 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
        float _2614 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2535 = (((((_2594 * _2365) + _715) * cbLight._m0[_2545].x) * _2613) * _2614) + _2477;
        _2537 = (((((_2594 * _2367) + _717) * cbLight._m0[_2545].y) * _2613) * _2614) + _2478;
        _2539 = (((((_2594 * _2368) + _718) * cbLight._m0[_2545].z) * _2613) * _2614) + _2479;
    }
    float _2645;
    float _2647;
    float _2649;
    if (_2252)
    {
        _2645 = _2535;
        _2647 = _2537;
        _2649 = _2539;
    }
    else
    {
        uint _2656 = _2067 + 3u;
        uint _2660 = _2067 + 11u;
        float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2656].w)) * _556) * 0.949999988079071044921875);
        float _2675 = _2674 * _2674;
        float _2676 = cbLight._m0[_2656].x + _633;
        float _2677 = cbLight._m0[_2656].y + _634;
        float _2678 = cbLight._m0[_2656].z + _635;
        float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
        float _2683 = _2682 * _2676;
        float _2684 = _2682 * _2677;
        float _2685 = _2682 * _2678;
        float _2686 = dot(vec3(_553, _554, _555), vec3(cbLight._m0[_2656].xyz));
        float _4580 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2690 = dot(vec3(_553, _554, _555), vec3(_2683, _2684, _2685));
        float _4591 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2694 = dot(vec3(cbLight._m0[_2656].xyz), vec3(_2683, _2684, _2685));
        float _4602 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2698 = _2675 * _2675;
        float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
        float _2709 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
        float _2716 = 1.0 - _2675;
        float _2726 = (0.5 / (((_2343 * ((_2689 * _2716) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2716) + _2675) * _2689))) * _2689;
        float _4613 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2728 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
        float _2729 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2645 = (((((_2709 * _2365) + _715) * cbLight._m0[_2660].x) * _2728) * _2729) + _2535;
        _2647 = (((((_2709 * _2367) + _717) * cbLight._m0[_2660].y) * _2728) * _2729) + _2537;
        _2649 = (((((_2709 * _2368) + _718) * cbLight._m0[_2660].z) * _2728) * _2729) + _2539;
    }
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    if (_2065.y == 0u)
    {
        uvec4 _2750 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2751 = _2750.x;
        uint _2762 = uint((float(_2750.y) * floor(float(uint(cbSceneParam._m0[85u].y * _654) / _2751))) + floor(float(uint(cbSceneParam._m0[85u].x * _653) / _2751)));
        float _2772 = (log2(_1843 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2773 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        uint _2776 = uint(isnan(14.0) ? _2773 : (isnan(_2773) ? 14.0 : min(_2773, 14.0)));
        uvec4 _2781 = texelFetch(g_lightClusterGridBuffer, int(((_2776 << 2u) + (_2762 << 6u)) >> 2u));
        uint _2782 = _2781.x;
        uint _2783 = _2750.z;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((((1u << ((_2783 >> 4u) & 15u)) + 4294967295u) & _2782) == 0u) || ((_2783 & 240u) == 0u))
        {
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
        }
        else
        {
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            uint _3021 = 0u;
            uint _3030;
            bool _3031;
            for (;;)
            {
                _3030 = texelFetch(g_lightClassification, int((((_2776 << 5u) + (_2762 << 9u)) + (_3021 << 2u)) >> 2u)).x;
                _3031 = _3030 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3031)
                {
                    frontier_phi_71_pred = _3020;
                    frontier_phi_71_pred_1 = _3019;
                    frontier_phi_71_pred_2 = _3018;
                    frontier_phi_71_pred_3 = _3017;
                    frontier_phi_71_pred_4 = _3016;
                    frontier_phi_71_pred_5 = _3015;
                }
                else
                {
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    uint _3166;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3030;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    for (;;)
                    {
                        uint _3170 = uint(findLSB(_3166)) + (_3021 << 5u);
                        uint _3167 = (_3166 + 4294967295u) & _3166;
                        uint _3172 = _3170 * 48u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 3u)).x));
                        uint _3192 = (_3170 * 48u) + 4u;
                        vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3211 = (_3170 * 48u) + 8u;
                        vec3 _3222 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x));
                        float _3226 = _3186.x - _1841;
                        float _3227 = _3186.y - _1842;
                        float _3228 = _3186.z - _1843;
                        float _3229 = dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228));
                        float _3232 = inversesqrt(_3229);
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3236 = dot(vec3(_672, _675, _678), vec3(_3233, _3234, _3235));
                        float _3241 = 1.0 - (_3229 * _3186.w);
                        float _4639 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3243 = sqrt(_3229) * _3205.w;
                        float _3246 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                        float _3247 = _3246 * _3246;
                        float _3250 = ((1.0 - _3247) * _3236) + _3247;
                        float _3253 = _3243 * _3243;
                        float _3257 = ((isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))) * _3242) / ((_3253 * 0.699999988079071044921875) + 1.0);
                        float _3261 = (-0.0) - _1841;
                        float _3262 = (-0.0) - _1842;
                        float _3263 = (-0.0) - _1843;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3268 = _3267 * _3261;
                        float _3269 = _3267 * _3262;
                        float _3270 = _3267 * _3263;
                        float _3277 = exp2(log2(1.0 / ((_3253 * 3.5) + 5.0)) * 0.25);
                        float _3278 = 1.0 - _747;
                        float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                        float _3286 = _3285 * _3285;
                        float _3287 = _3286 * _3286;
                        float _3288 = _3268 + _3233;
                        float _3289 = _3269 + _3234;
                        float _3290 = _3270 + _3235;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3298 = dot(vec3(_672, _675, _678), vec3(_3268, _3269, _3270));
                        float _4655 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3302 = dot(vec3(_672, _675, _678), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                        float _4666 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                        float _3310 = _3246 * _3286;
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3236) + _3311;
                        float _4677 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3316 = 1.0 - _3286;
                        float _3326 = (0.5 / (((_3315 * ((_3301 * _3316) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3315 * _3316) + _3286) * _3301))) * _3315;
                        float _4688 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3337 = (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3309 * _3309) * ((_3253 * 2.1991131305694580078125) + 3.141590118408203125))) * _3242;
                        _3090 = (_3257 * _3205.x) + _3163;
                        _3091 = (_3257 * _3205.y) + _3164;
                        _3092 = (_3257 * _3205.z) + _3165;
                        _3087 = (_3337 * _3222.x) + _3160;
                        _3088 = (_3337 * _3222.y) + _3161;
                        _3089 = (_3337 * _3222.z) + _3162;
                        if (_3167 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3167;
                        }
                    }
                    frontier_phi_71_pred = _3092;
                    frontier_phi_71_pred_1 = _3091;
                    frontier_phi_71_pred_2 = _3090;
                    frontier_phi_71_pred_3 = _3089;
                    frontier_phi_71_pred_4 = _3088;
                    frontier_phi_71_pred_5 = _3087;
                }
                _2873 = frontier_phi_71_pred;
                _2871 = frontier_phi_71_pred_1;
                _2869 = frontier_phi_71_pred_2;
                _2867 = frontier_phi_71_pred_3;
                _2865 = frontier_phi_71_pred_4;
                _2863 = frontier_phi_71_pred_5;
                uint _3022 = _3021 + 1u;
                if (_3022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3015 = _2863;
                    _3016 = _2865;
                    _3017 = _2867;
                    _3018 = _2869;
                    _3019 = _2871;
                    _3020 = _2873;
                    _3021 = _3022;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
        }
        uvec4 _2876 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2877 = _2876.z;
        uint _2879 = (_2877 >> 8u) & 15u;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        if (((4294967295u << _2879) & _2782) == 0u)
        {
            _2983 = _2862;
            _2985 = _2864;
            _2987 = _2866;
            _2989 = _2868;
            _2991 = _2870;
            _2993 = _2872;
        }
        else
        {
            float _3008 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
            float _3009 = _3008 * _1841;
            float _3010 = _3008 * _1842;
            float _3011 = _3008 * _1843;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2879 < ((_2877 >> 12u) & 15u))
            {
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _3143 = _2862;
                float _3144 = _2864;
                float _3145 = _2866;
                float _3146 = _2868;
                float _3147 = _2870;
                float _3148 = _2872;
                uint _3149 = _2879;
                uint _3158;
                bool _3159;
                for (;;)
                {
                    _3158 = texelFetch(g_lightClassification, int((((_2776 << 5u) + (_2762 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                    _3159 = _3158 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3159)
                    {
                        frontier_phi_82_pred = _3148;
                        frontier_phi_82_pred_1 = _3147;
                        frontier_phi_82_pred_2 = _3146;
                        frontier_phi_82_pred_3 = _3145;
                        frontier_phi_82_pred_4 = _3144;
                        frontier_phi_82_pred_5 = _3143;
                    }
                    else
                    {
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3364 = _3143;
                        float _3365 = _3144;
                        float _3366 = _3145;
                        float _3367 = _3146;
                        float _3368 = _3147;
                        float _3369 = _3148;
                        uint _3370 = _3158;
                        uint _3371;
                        vec4 _3396;
                        float _3397;
                        vec4 _3412;
                        vec3 _3424;
                        vec4 _3439;
                        vec4 _3455;
                        float _3502;
                        bool _3503;
                        for (;;)
                        {
                            uint _3381 = ((_3149 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3370));
                            _3371 = (_3370 + 4294967295u) & _3370;
                            uint _3383 = _3381 * 40u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3397 = _3396.w;
                            uint _3399 = (_3381 * 40u) + 4u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3381 * 40u) + 8u;
                            _3424 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x));
                            uint _3426 = (_3381 * 40u) + 16u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3442 = (_3381 * 40u) + 20u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3458 = (_3381 * 40u) + 24u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3477 = (_3381 * 40u) + 28u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3502 = fma(_1843, _3490.z, fma(_1842, _3490.y, _3490.x * _1841)) + _3490.w;
                            _3503 = !((fma(_1843, _3471.z, fma(_1842, _3471.y, _3471.x * _1841)) + _3471.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3503)
                            {
                                float _3530 = _3396.x - _1841;
                                float _3531 = _3396.y - _1842;
                                float _3532 = _3396.z - _1843;
                                float _3533 = dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532));
                                float _3536 = inversesqrt(_3533);
                                float _3537 = _3536 * _3530;
                                float _3538 = _3536 * _3531;
                                float _3539 = _3536 * _3532;
                                float _3543 = 1.0 - (_3533 / (_3397 * _3397));
                                float _4699 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3548 = sqrt(_3533) * _3412.w;
                                float _3550 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                                float _3551 = _3550 * _3550;
                                float _3554 = ((1.0 - _3551) * dot(vec3(_3537, _3538, _3539), vec3(_672, _675, _678))) + _3551;
                                float _3557 = _3548 * _3548;
                                float _3561 = (fma(_1843, _3439.z, fma(_1842, _3439.y, _3439.x * _1841)) + _3439.w) / _3502;
                                float _3562 = (fma(_1843, _3455.z, fma(_1842, _3455.y, _3455.x * _1841)) + _3455.w) / _3502;
                                float _3566 = 1.0 - dot(vec2(_3561, _3562), vec2(_3561, _3562));
                                float _4715 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3568 = _3567 * (((isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0))) * _3544) / ((_3557 * 0.699999988079071044921875) + 1.0));
                                float _3580 = exp2(log2(1.0 / ((_3557 * 3.5) + 5.0)) * 0.25);
                                float _3581 = 1.0 - _747;
                                float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                                float _3589 = _3588 * _3588;
                                float _3590 = _3589 * _3589;
                                float _3591 = _3537 - _3009;
                                float _3592 = _3538 - _3010;
                                float _3593 = _3539 - _3011;
                                float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                                float _3601 = dot(vec3(_672, _675, _678), vec3((-0.0) - _3009, (-0.0) - _3010, (-0.0) - _3011));
                                float _4726 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3605 = dot(vec3(_672, _675, _678), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                                float _4737 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                                float _3613 = _3550 * _3589;
                                float _3614 = _3613 * _3613;
                                float _3620 = ((1.0 - _3614) * dot(vec3(_672, _675, _678), vec3(_3537, _3538, _3539))) + _3614;
                                float _4748 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3622 = 1.0 - _3589;
                                float _3632 = (0.5 / (((_3621 * ((_3604 * _3622) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3589) * _3604))) * _3621;
                                float _4759 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3642 = (_3567 * _3544) * (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) / ((_3612 * _3612) * ((_3557 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3568 * _3412.z;
                                frontier_phi_88_pred_1 = _3568 * _3412.y;
                                frontier_phi_88_pred_2 = _3568 * _3412.x;
                                frontier_phi_88_pred_3 = _3642 * _3424.z;
                                frontier_phi_88_pred_4 = _3642 * _3424.y;
                                frontier_phi_88_pred_5 = _3642 * _3424.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3651 = frontier_phi_88_pred;
                            _3650 = frontier_phi_88_pred_1;
                            _3649 = frontier_phi_88_pred_2;
                            _3648 = frontier_phi_88_pred_3;
                            _3647 = frontier_phi_88_pred_4;
                            _3646 = frontier_phi_88_pred_5;
                            _3354 = _3649 + _3367;
                            _3355 = _3650 + _3368;
                            _3356 = _3651 + _3369;
                            _3351 = _3646 + _3364;
                            _3352 = _3647 + _3365;
                            _3353 = _3648 + _3366;
                            if (_3371 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3371;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3356;
                        frontier_phi_82_pred_1 = _3355;
                        frontier_phi_82_pred_2 = _3354;
                        frontier_phi_82_pred_3 = _3353;
                        frontier_phi_82_pred_4 = _3352;
                        frontier_phi_82_pred_5 = _3351;
                    }
                    _2994 = frontier_phi_82_pred;
                    _2992 = frontier_phi_82_pred_1;
                    _2990 = frontier_phi_82_pred_2;
                    _2988 = frontier_phi_82_pred_3;
                    _2986 = frontier_phi_82_pred_4;
                    _2984 = frontier_phi_82_pred_5;
                    uint _3150 = _3149 + 1u;
                    if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3143 = _2984;
                        _3144 = _2986;
                        _3145 = _2988;
                        _3146 = _2990;
                        _3147 = _2992;
                        _3148 = _2994;
                        _3149 = _3150;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2990;
                frontier_phi_63_64_ladder_1 = _2994;
                frontier_phi_63_64_ladder_2 = _2992;
                frontier_phi_63_64_ladder_3 = _2988;
                frontier_phi_63_64_ladder_4 = _2986;
                frontier_phi_63_64_ladder_5 = _2984;
            }
            else
            {
                frontier_phi_63_64_ladder = _2868;
                frontier_phi_63_64_ladder_1 = _2872;
                frontier_phi_63_64_ladder_2 = _2870;
                frontier_phi_63_64_ladder_3 = _2866;
                frontier_phi_63_64_ladder_4 = _2864;
                frontier_phi_63_64_ladder_5 = _2862;
            }
            _2983 = frontier_phi_63_64_ladder_5;
            _2985 = frontier_phi_63_64_ladder_4;
            _2987 = frontier_phi_63_64_ladder_3;
            _2989 = frontier_phi_63_64_ladder;
            _2991 = frontier_phi_63_64_ladder_2;
            _2993 = frontier_phi_63_64_ladder_1;
        }
        float _2998 = isnan(1.0) ? _731 : (isnan(_731) ? 1.0 : min(_731, 1.0));
        _2795 = (_2998 * _2989) + _2307;
        _2797 = (_2998 * _2991) + _2309;
        _2799 = (_2998 * _2993) + _2311;
        _2801 = ((_2983 * _715) * _2998) + _2645;
        _2803 = ((_2985 * _717) * _2998) + _2647;
        _2805 = ((_2987 * _718) * _2998) + _2649;
    }
    else
    {
        _2795 = _2307;
        _2797 = _2309;
        _2799 = _2311;
        _2801 = _2645;
        _2803 = _2647;
        _2805 = _2649;
    }
    float _4775 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4786 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4797 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _2822 = ((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2795 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _731))) + ((_2801 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1571)) * cbPerFrame._m0[3u].x);
    float _2823 = ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2797 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _731))) + ((_2803 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1571)) * cbPerFrame._m0[3u].x);
    float _2824 = ((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2799 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _731))) + ((_2805 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1571)) * cbPerFrame._m0[3u].x);
    uint _2825 = _238 + 6u;
    float _2833 = _653 / cbSceneParam._m0[86u].x;
    float _2834 = _654 / cbSceneParam._m0[86u].y;
    vec4 _2848 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2850 = _2848.x;
    float _2851 = _2848.y;
    float _2852 = _2848.z;
    float _2853 = _2848.w;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2887 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2888 = _2887 / _575;
        float _2899 = _2888 * _626;
        float _2900 = _627 * _2888;
        float _2901 = (-0.0) - _2900;
        float _2903 = _2888 * _628;
        float _2905 = (cbSceneParam._m0[77u].w * _2901) / _2887;
        float _2906 = _2905 + cbSceneParam._m0[79u].w;
        float _2907 = cbSceneParam._m0[79u].w - _2900;
        float _2913 = sqrt(((_2899 * _2899) + (_2900 * _2900)) + (_2903 * _2903));
        float _2916 = (1.0 - (cbSceneParam._m0[77u].w / _2887)) * _2913;
        float _2921 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2923 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3100;
        if (abs((_2901 - _2905) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3100 = ((((_2906 > 0.0) ? exp2(_2921 * _2906) : (2.0 - exp2(_2923 * _2906))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2916;
        }
        else
        {
            float _3044 = 1.0 / cbSceneParam._m0[80u].x;
            float _3045 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : max(_2906, _2907));
            float _3046 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : min(_2906, _2907));
            float _3055 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : min(_3045, 0.0));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            _3100 = ((abs(_2913 / _2901) * cbSceneParam._m0[80u].y) * ((((_3055 - _3056) * 2.0) - ((exp2(_2921 * (isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0)))) - exp2(_2921 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))))) * _3044)) - ((exp2(_2923 * _3055) - exp2(_2923 * _3056)) * _3044))) + (_2916 * cbSceneParam._m0[80u].z);
        }
        vec4 _3102 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2833, _2834, 1.0), 0.0);
        float _3111 = exp2((_3100 * (-1.44269502162933349609375)) * (1.0 - _3102.w));
        float _3112 = log2(_3111);
        float _3128 = log2(_2853);
        _2925 = (exp2(_3128 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].x)) * _3102.x) / cbSceneParam._m0[78u].x)) + _2850;
        _2927 = (exp2(_3128 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].y)) * _3102.y) / cbSceneParam._m0[78u].y)) + _2851;
        _2929 = (exp2(_3128 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].z)) * _3102.z) / cbSceneParam._m0[78u].z)) + _2852;
        _2931 = _3111 * _2853;
    }
    else
    {
        _2925 = _2850;
        _2927 = _2851;
        _2929 = _2852;
        _2931 = _2853;
    }
    bool _3138;
    vec4 _2941;
    vec4 _2963;
    float _2965;
    float _2969;
    float _2970;
    float _2971;
    float _2972;
    bool _2982;
    for (;;)
    {
        _2941 = cbMatDynParam._m0[0u];
        float _2943 = roundEven(_2941.y);
        bool _2944 = _2943 == 3.0;
        float _2945 = log2(_2931);
        float _2952 = exp2(_2945 * cbSceneParam._m0[78u].x) * _2822;
        float _2953 = exp2(_2945 * cbSceneParam._m0[78u].y) * _2823;
        float _2954 = exp2(_2945 * cbSceneParam._m0[78u].z) * _2824;
        float _2961 = _642 + (-0.5);
        _2963 = cbMtdParam._m0[1u];
        _2965 = _2963.y * _2961;
        float _2968 = (_2943 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2969 = _2968 * (_2944 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2925)));
        _2970 = _2968 * (_2944 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2927)));
        _2971 = _2968 * (_2944 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2929)));
        _2972 = _2961 * 0.999000012874603271484375;
        _2982 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2982)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2972) < 0.5)
            {
                _3138 = true;
                break;
            }
        }
        uint _3079 = _691 + uint(_2941.w);
        if ((cbInstanceData._m0[_3079].w < 1.0) && ((cbInstanceData._m0[_3079].w + _2972) < 0.5))
        {
            _3138 = true;
            break;
        }
        if ((_2965 + 1.0) < _2963.x)
        {
            _3138 = true;
            break;
        }
        _3138 = false;
        break;
    }
    float _3342;
    if (_3138)
    {
        discard_state = true;
        _3342 = 0.0;
    }
    else
    {
        _3342 = cbInstanceData._m0[_2825].w;
    }
    SV_Target.x = _2969;
    SV_Target.y = _2970;
    SV_Target.z = _2971;
    SV_Target.w = _3342;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2825].w;
    discard_exit();
}


