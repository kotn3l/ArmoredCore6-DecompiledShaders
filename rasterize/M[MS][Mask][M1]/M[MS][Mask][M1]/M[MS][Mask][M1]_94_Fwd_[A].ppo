#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1521;
float _3899;
float _3900;
float _3901;
float _3902;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3911 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3922 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3933 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = _364.x * cbMtdParam._m0[11u].x;
    float _370 = _364.y * cbMtdParam._m0[11u].y;
    float _371 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _455 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _472 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _409.x) * 2.0) - ((((_443 - _455) * cbMtdParam._m0[23u].w) + _455) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3944 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _480 = (_473 * ((_390.x * cbMtdParam._m0[12u].x) - _369)) + _369;
    float _481 = (_473 * ((_390.y * cbMtdParam._m0[12u].y) - _370)) + _370;
    float _482 = (_473 * ((_390.z * cbMtdParam._m0[12u].z) - _371)) + _371;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _521 = _519.x;
    float _531 = dot(vec4(_521, _519.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _545 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _409.y) * 2.0) - ((((_521 - _531) * cbMtdParam._m0[23u].w) + _531) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3955 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _556 = (_338.x * cbMtdParam._m0[9u].x) * ((_546 * ((_499.x * cbMtdParam._m0[13u].x) - _480)) + _480);
    float _557 = (_338.y * cbMtdParam._m0[9u].y) * ((_546 * ((_499.y * cbMtdParam._m0[13u].y) - _481)) + _481);
    float _558 = (_338.z * cbMtdParam._m0[9u].z) * ((_546 * ((_499.z * cbMtdParam._m0[13u].z) - _482)) + _482);
    float _562 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _556;
    float _565 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _557;
    float _568 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _558;
    float _576 = (((_556 - _562) * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) + _562) * 4.55000019073486328125;
    float _578 = (((_557 - _565) * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) + _565) * 4.55000019073486328125;
    float _580 = (((_558 - _568) * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) + _568) * 4.55000019073486328125;
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _301) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _302) + cbTextureTilingScale._m0[14u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _662 = _660.x;
    float _663 = _660.y;
    float _664 = _660.z;
    float _671 = ((_643.x - _662) * _473) + _662;
    float _672 = ((_643.y - _663) * _473) + _663;
    float _673 = ((_643.z - _664) * _473) + _664;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _698 = ((_685.z - _673) * _546) + _673;
    float _701 = ((((_685.x - _671) * _546) + _671) * 2.0) + (-1.0);
    float _702 = ((((_685.y - _672) * _546) + _672) * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _3966 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _708 = sqrt(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _738 = (_701 + ((((_618.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_726.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _739 = (_702 + ((((_618.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_726.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _742 = fma(_708, _249, fma(_739, _256, _738 * _242));
    float _745 = fma(_708, _250, fma(_739, _257, _738 * _243));
    float _748 = fma(_708, _251, fma(_739, _258, _738 * _244));
    float _752 = inversesqrt(dot(vec3(_742, _745, _748), vec3(_742, _745, _748)));
    vec4 _779 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _781 = _779.x;
    float _782 = 1.0 - _781;
    float _791 = (cbMtdParam._m0[19u].x + dot(vec4(_752 * _742, _752 * _745, _752 * _748, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_781 - _782) * cbMtdParam._m0[24u].z) + _782) * cbMtdParam._m0[21u].z);
    float _3977 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _792 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _799 = (_792 * ((_599.x * cbMtdParam._m0[18u].x) - _576)) + _576;
    float _800 = (_792 * ((_599.y * cbMtdParam._m0[18u].y) - _578)) + _578;
    float _801 = (_792 * ((_599.z * cbMtdParam._m0[18u].z) - _580)) + _580;
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _829 = _827.x;
    float _846 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _829) * _473) + _829;
    float _863 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _846) * _546) + _846;
    float _867 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _863) * cbMtdParam._m0[19u].z) + _863;
    float _869 = _867 - (_867 * _792);
    float _874 = (((_618.z - _698) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _698;
    float _878 = ((_726.z - _874) * cbMtdParam._m0[19u].w) + _874;
    vec4 _891 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _898 = (_891.x * 2.0) + (-1.0);
    float _899 = (_891.y * 2.0) + (-1.0);
    float _900 = dot(vec2(_898, _899), vec2(_898, _899));
    float _3988 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _908 = ((_891.z - _878) * _792) + _878;
    float _918 = ((sqrt(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) - _708) * _792) + _708;
    float _921 = (((_898 - _738) * _792) + _738) + (cbMtdParam._m0[21u].x * _738);
    float _922 = (((_899 - _739) * _792) + _739) + (cbMtdParam._m0[21u].x * _739);
    float _926 = cbMtdParam._m0[22u].x + _726.w;
    float _929 = fma(_918, _249, fma(_922, _256, _921 * _242));
    float _932 = fma(_918, _250, fma(_922, _257, _921 * _243));
    float _935 = fma(_918, _251, fma(_922, _258, _921 * _244));
    float _939 = inversesqrt(dot(vec3(_929, _932, _935), vec3(_929, _932, _935)));
    float _940 = _939 * _929;
    float _941 = _939 * _932;
    float _942 = _939 * _935;
    float _3999 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _943 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4021 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4032 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4043 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4054 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _948 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _962 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1013 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1003);
    float _1014 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1003);
    float _1015 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1003);
    float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
    float _1020 = _1013 * _1019;
    float _1021 = _1014 * _1019;
    float _1022 = _1015 * _1019;
    vec4 _1027 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1029 = _1027.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1201 = sqrt(((_1013 * _1013) + (_1014 * _1014)) + (_1015 * _1015));
        float _1207 = (cbMatDynParam._m0[5u].x * _1201) + cbMatDynParam._m0[5u].y;
        float _4065 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1212 = (cbMatDynParam._m0[5u].z * _1201) + cbMatDynParam._m0[5u].w;
        float _4076 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) - _1208)) + _1208) < ((_1029 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1040 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1041 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1059 = fma(_942, cbSceneParam._m0[5u].z, fma(_941, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _940));
    float _1062 = fma(_942, cbSceneParam._m0[6u].z, fma(_941, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _940));
    float _1065 = fma(_942, cbSceneParam._m0[7u].z, fma(_941, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _940));
    uint _1078 = _282 + 9u;
    uint _1079 = _1078 + uint(cbMatDynParam._m0[0u].w);
    float _1085 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_1079].x;
    float _1086 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_1079].y;
    float _1087 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_1079].z;
    float _4087 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1089 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _1091 = 1.0 - _948;
    float _1092 = _1088 * _1091;
    float _1093 = _1089 * _1091;
    float _1094 = _1090 * _1091;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _948;
    float _1100 = (_1089 + (-0.039999999105930328369140625)) * _948;
    float _1101 = (_1090 + (-0.039999999105930328369140625)) * _948;
    float _1102 = _1099 + 0.039999999105930328369140625;
    float _1104 = _1100 + 0.039999999105930328369140625;
    float _1105 = _1101 + 0.039999999105930328369140625;
    vec4 _1114 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1040, cbSceneParam._m0[86u].y * _1041));
    float _1118 = ((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * TEXCOORD_5.w) * _1114.x;
    float _1119 = dot(vec3(_940, _941, _942), vec3(_1020, _1021, _1022));
    float _1122 = _1119 * 2.0;
    float _1126 = (_1122 * _940) - _1020;
    float _1127 = (_1122 * _941) - _1021;
    float _1128 = (_1122 * _942) - _1022;
    float _1132 = abs(dot(vec3(_1020, _1021, _1022), vec3(_940, _941, _942)));
    float _4120 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _1134 = sqrt(_943);
    float _1147 = exp2((_1134 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1134 * 3.0));
    float _1153 = (1.0 - _1147) * ((_1134 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1154 = _1147 * _1134;
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1520;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1245 = fma(_1190, cbModelParam._m0[26u].z, fma(_1186, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1182));
        float _1249 = fma(_1190, cbModelParam._m0[27u].z, fma(_1186, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1182));
        float _1253 = fma(_1190, cbModelParam._m0[28u].z, fma(_1186, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1182));
        float _1278 = _1182 + _940;
        float _1279 = _1186 + _941;
        float _1280 = _1190 + _942;
        float _1290 = fma(_1280, cbModelParam._m0[26u].z, fma(_1279, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1278)) - _1245;
        float _1291 = fma(_1280, cbModelParam._m0[27u].z, fma(_1279, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1278)) - _1249;
        float _1292 = fma(_1280, cbModelParam._m0[28u].z, fma(_1279, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1278)) - _1253;
        float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
        float _1309 = ((_1296 * _1290) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1245 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1296 * _1291) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1249 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1296 * _1292) / cbModelParam._m0[34u].z) + ((((((_1253 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        float _1348 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1314.x + (-0.5));
        float _1350 = _1348 * (_1314.y + (-0.5));
        float _1351 = _1348 * (_1314.z + (-0.5));
        float _1358 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1321.x + (-0.5));
        float _1360 = _1358 * (_1321.y + (-0.5));
        float _1361 = _1358 * (_1321.z + (-0.5));
        float _1368 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1328.x + (-0.5));
        float _1370 = _1368 * (_1328.y + (-0.5));
        float _1371 = _1368 * (_1328.z + (-0.5));
        float _1378 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1335.x + (-0.5));
        float _1380 = _1378 * (_1335.y + (-0.5));
        float _1381 = _1378 * (_1335.z + (-0.5));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = _1349 * 0.5;
        float _1386 = _1359 * 0.5;
        float _1387 = _1369 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1402 = (dot(vec3(_940, _941, _942), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1412 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4168 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1414 + 1.0))) + _1419) * _1382;
        float _1429 = _1350 * 0.5;
        float _1430 = _1360 * 0.5;
        float _1431 = _1370 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_940, _941, _942), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4201 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1456 + 1.0))) + _1461) * _1383;
        float _1471 = _1351 * 0.5;
        float _1472 = _1361 * 0.5;
        float _1473 = _1371 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_940, _941, _942), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4234 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1498 + 1.0))) + _1503) * _1384;
        _1520 = _1351;
        _1522 = _1350;
        _1523 = _1349;
        _1524 = _1361;
        _1525 = _1360;
        _1526 = _1359;
        _1527 = _1371;
        _1528 = _1370;
        _1529 = _1369;
        _1530 = _1384;
        _1531 = _1383;
        _1532 = _1382;
        _1533 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1534 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1535 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
    }
    else
    {
        _1520 = _1521;
        _1522 = _1521;
        _1523 = _1521;
        _1524 = _1521;
        _1525 = _1521;
        _1526 = _1521;
        _1527 = _1521;
        _1528 = _1521;
        _1529 = _1521;
        _1530 = _1521;
        _1531 = _1521;
        _1532 = _1521;
        _1533 = 0.0;
        _1534 = 0.0;
        _1535 = 0.0;
    }
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1562 = fma(_1190, cbModelParam._m0[30u].z, fma(_1186, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1182));
        float _1566 = fma(_1190, cbModelParam._m0[31u].z, fma(_1186, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1182));
        float _1570 = fma(_1190, cbModelParam._m0[32u].z, fma(_1186, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1182));
        float _1593 = _1182 + _940;
        float _1594 = _1186 + _941;
        float _1595 = _1190 + _942;
        float _1605 = fma(_1595, cbModelParam._m0[30u].z, fma(_1594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1593)) - _1562;
        float _1606 = fma(_1595, cbModelParam._m0[31u].z, fma(_1594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1593)) - _1566;
        float _1607 = fma(_1595, cbModelParam._m0[32u].z, fma(_1594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1593)) - _1570;
        float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
        float _1624 = ((_1611 * _1605) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1562 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1625 = ((_1611 * _1606) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1566 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1626 = ((_1611 * _1607) / cbModelParam._m0[35u].z) + ((((((_1570 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        vec4 _1649 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1624, _1625, _1626), 0.0);
        float _1661 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1628.x + (-0.5));
        float _1663 = _1661 * (_1628.y + (-0.5));
        float _1664 = _1661 * (_1628.z + (-0.5));
        float _1671 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1635.x + (-0.5));
        float _1673 = _1671 * (_1635.y + (-0.5));
        float _1674 = _1671 * (_1635.z + (-0.5));
        float _1681 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1642.x + (-0.5));
        float _1683 = _1681 * (_1642.y + (-0.5));
        float _1684 = _1681 * (_1642.z + (-0.5));
        float _1691 = exp2((_1649.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1649.x + (-0.5));
        float _1693 = _1691 * (_1649.y + (-0.5));
        float _1694 = _1691 * (_1649.z + (-0.5));
        float _1695 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1696 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1697 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1698 = _1662 * 0.5;
        float _1699 = _1672 * 0.5;
        float _1700 = _1682 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_940, _941, _942), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1695 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4297 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1725 + 1.0))) + _1730) * _1695;
        float _1740 = _1663 * 0.5;
        float _1741 = _1673 * 0.5;
        float _1742 = _1683 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_940, _941, _942), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1696 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4330 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1767 + 1.0))) + _1772) * _1696;
        float _1782 = _1664 * 0.5;
        float _1783 = _1674 * 0.5;
        float _1784 = _1684 * 0.5;
        float _1785 = dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784));
        float _1790 = (_1785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1785);
        float _1798 = (dot(vec3(_940, _941, _942), vec3(_1790 * _1782, _1790 * _1783, _1790 * _1784)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1807 = sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784)) / (_1697 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1809 = _1808 * 2.0;
        float _1813 = (1.0 - _1808) / (_1808 + 1.0);
        float _4363 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1823 = ((((1.0 - _1814) * (_1809 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1809 + 1.0))) + _1814) * _1697;
        _1831 = _1664;
        _1832 = _1663;
        _1833 = _1662;
        _1834 = _1674;
        _1835 = _1673;
        _1836 = _1672;
        _1837 = _1684;
        _1838 = _1683;
        _1839 = _1682;
        _1840 = _1697;
        _1841 = _1696;
        _1842 = _1695;
        _1843 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
        _1844 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
        _1845 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)));
    }
    else
    {
        _1831 = _1521;
        _1832 = _1521;
        _1833 = _1521;
        _1834 = _1521;
        _1835 = _1521;
        _1836 = _1521;
        _1837 = _1521;
        _1838 = _1521;
        _1839 = _1521;
        _1840 = _1521;
        _1841 = _1521;
        _1842 = _1521;
        _1843 = 0.0;
        _1844 = 0.0;
        _1845 = 0.0;
    }
    float _1855 = (cbModelParam._m0[1u].x * (_1843 - _1533)) + _1533;
    float _1856 = (cbModelParam._m0[1u].x * (_1844 - _1534)) + _1534;
    float _1857 = (cbModelParam._m0[1u].x * (_1845 - _1535)) + _1535;
    float _1878 = fma(_1857, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1855 * cbSceneParam._m0[89u].x));
    float _1881 = fma(_1857, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1855 * cbSceneParam._m0[90u].x));
    float _1884 = fma(_1857, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1855));
    float _1899 = _1126 * 0.5;
    float _1900 = _1127 * 0.5;
    float _1901 = _1128 * 0.5;
    float _1902 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1833, _1836, _1839, _1842));
    float _1905 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1832, _1835, _1838, _1841));
    float _1908 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1831, _1834, _1837, _1840));
    float _1942;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1915 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1520, _1524, _1527, _1530));
        float _1919 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1522, _1525, _1528, _1531));
        float _1923 = dot(vec4(_1899, _1900, _1901, 1.0), vec4(_1523, _1526, _1529, _1532));
        float _1930 = dot(vec4(cbModelParam._m0[39u]), vec4(_1899, _1900, _1901, 1.0));
        _1942 = dot(vec3(isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1930) ? 0.0 : (isnan(0.0) ? _1930 : max(0.0, _1930))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1942 = 1.0;
    }
    float _1953;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1944 = dot(vec4(cbModelParam._m0[40u]), vec4(_1899, _1900, _1901, 1.0));
        _1953 = dot(vec3(isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1944) ? 0.0 : (isnan(0.0) ? _1944 : max(0.0, _1944))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1953 = 1.0;
    }
    float _1957 = (_1953 * cbModelParam._m0[1u].x) + (_1942 * (1.0 - cbModelParam._m0[1u].x));
    float _1967 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _943);
    float _1968 = isnan(_1967) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1967 : min(cbModelParam._m0[25u].z, _1967));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2015 = fma(_1190, cbModelParam._m0[13u].z, fma(_1186, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1182)) + cbModelParam._m0[13u].w;
        float _2019 = fma(_1190, cbModelParam._m0[14u].z, fma(_1186, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1182)) + cbModelParam._m0[14u].w;
        float _2023 = fma(_1190, cbModelParam._m0[15u].z, fma(_1186, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1182)) + cbModelParam._m0[15u].w;
        float _2026 = fma(_1128, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1126));
        float _2029 = fma(_1128, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1126));
        float _2032 = fma(_1128, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1126));
        float _2060;
        if (_2026 > 0.0)
        {
            _2060 = abs((1.0 - _2015) / _2026);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2015 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2060 = frontier_phi_17_15_ladder;
        }
        float _2262;
        if (_2029 > 0.0)
        {
            _2262 = abs((1.0 - _2019) / _2029);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2019 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2262 = frontier_phi_26_22_ladder;
        }
        float _2516;
        if (_2032 > 0.0)
        {
            _2516 = abs((1.0 - _2023) / _2032);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2023 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2516 = frontier_phi_38_33_ladder;
        }
        float _2518 = isnan(_2262) ? _2060 : (isnan(_2060) ? _2262 : min(_2060, _2262));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _2026) + _2015;
        float _2524 = (_2519 * _2029) + _2019;
        float _2525 = (_2519 * _2032) + _2023;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2526;
        float _2530 = _2526 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 > _2530) || ((_2524 < _2528) || ((_2523 < _2528) || (_2523 > _2530))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2525, cbModelParam._m0[9u].z, fma(_2524, cbModelParam._m0[9u].y, _2523 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2525, cbModelParam._m0[10u].z, fma(_2524, cbModelParam._m0[10u].y, _2523 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2525, cbModelParam._m0[11u].z, fma(_2524, cbModelParam._m0[11u].y, _2523 * cbModelParam._m0[11u].x))), _1968);
            frontier_phi_16_38_ladder = _2653.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2653.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2653.x * cbModelParam._m0[1u].y;
        }
        _2048 = frontier_phi_16_38_ladder_2;
        _2050 = frontier_phi_16_38_ladder_1;
        _2052 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2036 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1126, _1127, _1128), _1968);
        _2048 = _2036.x * cbModelParam._m0[1u].y;
        _2050 = _2036.y * cbModelParam._m0[1u].y;
        _2052 = _2036.z * cbModelParam._m0[1u].y;
    }
    float _2056 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _943);
    float _2057 = isnan(_2056) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2056 : min(cbModelParam._m0[25u].w, _2056));
    float _2146;
    float _2148;
    float _2150;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2110 = fma(_1190, cbModelParam._m0[21u].z, fma(_1186, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1182)) + cbModelParam._m0[21u].w;
        float _2114 = fma(_1190, cbModelParam._m0[22u].z, fma(_1186, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1182)) + cbModelParam._m0[22u].w;
        float _2118 = fma(_1190, cbModelParam._m0[23u].z, fma(_1186, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1182)) + cbModelParam._m0[23u].w;
        float _2121 = fma(_1128, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1126));
        float _2124 = fma(_1128, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1126));
        float _2127 = fma(_1128, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1126));
        float _2267;
        if (_2121 > 0.0)
        {
            _2267 = abs((1.0 - _2110) / _2121);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2110 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2267 = frontier_phi_28_24_ladder;
        }
        float _2543;
        if (_2124 > 0.0)
        {
            _2543 = abs((1.0 - _2114) / _2124);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2114 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2543 = frontier_phi_40_35_ladder;
        }
        float _2756;
        if (_2127 > 0.0)
        {
            _2756 = abs((1.0 - _2118) / _2127);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2118 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2756 = frontier_phi_49_46_ladder;
        }
        float _2758 = isnan(_2543) ? _2267 : (isnan(_2267) ? _2543 : min(_2267, _2543));
        float _2759 = isnan(_2756) ? _2758 : (isnan(_2758) ? _2756 : min(_2758, _2756));
        float _2763 = (_2759 * _2121) + _2110;
        float _2764 = (_2759 * _2124) + _2114;
        float _2765 = (_2759 * _2127) + _2118;
        float _2766 = _2759 * 9.9999997473787516355514526367188e-05;
        float _2767 = (-1.0) - _2766;
        float _2769 = _2766 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2765 > _2769) || ((_2765 < _2767) || ((_2764 > _2769) || ((_2764 < _2767) || ((_2763 < _2767) || (_2763 > _2769))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2765, cbModelParam._m0[17u].z, fma(_2764, cbModelParam._m0[17u].y, _2763 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2765, cbModelParam._m0[18u].z, fma(_2764, cbModelParam._m0[18u].y, _2763 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2765, cbModelParam._m0[19u].z, fma(_2764, cbModelParam._m0[19u].y, _2763 * cbModelParam._m0[19u].x))), _2057);
            frontier_phi_25_49_ladder = _2964.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2964.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2964.x * cbModelParam._m0[1u].z;
        }
        _2146 = frontier_phi_25_49_ladder_2;
        _2148 = frontier_phi_25_49_ladder_1;
        _2150 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2130 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1126, _1127, _1128), _2057);
        _2146 = _2130.x * cbModelParam._m0[1u].z;
        _2148 = _2130.y * cbModelParam._m0[1u].z;
        _2150 = _2130.z * cbModelParam._m0[1u].z;
    }
    float _2163 = (((_1153 * _1102) + _1154) * _1118) * ((cbModelParam._m0[1u].w * (_2146 - _2048)) + _2048);
    float _2165 = (((_1153 * _1104) + _1154) * _1118) * ((cbModelParam._m0[1u].w * (_2148 - _2050)) + _2050);
    float _2167 = (((_1153 * _1105) + _1154) * _1118) * ((cbModelParam._m0[1u].w * (_2150 - _2052)) + _2052);
    float _2170 = fma(_2167, cbSceneParam._m0[89u].z, fma(_2165, cbSceneParam._m0[89u].y, _2163 * cbSceneParam._m0[89u].x));
    float _2173 = fma(_2167, cbSceneParam._m0[90u].z, fma(_2165, cbSceneParam._m0[90u].y, _2163 * cbSceneParam._m0[90u].x));
    float _2176 = fma(_2167, cbSceneParam._m0[91u].z, fma(_2165, cbSceneParam._m0[91u].y, _2163 * cbSceneParam._m0[91u].x));
    uvec4 _2186 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2188 = _2186.x * 14u;
    uint _2189 = _2188 + 13u;
    float _2196 = _1118 + (-1.0);
    float _2201 = (cbLight._m0[_2189].x * _2196) + 1.0;
    float _2202 = (cbLight._m0[_2189].y * _2196) + 1.0;
    float _2203 = (cbLight._m0[_2189].z * _2196) + 1.0;
    float _2204 = (cbLight._m0[_2189].w * _2196) + 1.0;
    uint _2205 = _2188 + 5u;
    float _2211 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2215 = _2188 + 4u;
    float _2221 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
    uint _2225 = _2188 | 1u;
    float _2236 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_940, _941, _942));
    float _2239 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_940, _941, _942));
    float _4499 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _4510 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2244 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * 0.3183098733425140380859375;
    float _2246 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2253 = ((cbLight._m0[_2205].x * _2211) * _2246) + ((cbLight._m0[_2215].x * _2221) * _2244);
    float _2254 = ((_2211 * cbLight._m0[_2205].y) * _2246) + ((_2221 * cbLight._m0[_2215].y) * _2244);
    float _2255 = ((_2211 * cbLight._m0[_2205].z) * _2246) + ((_2221 * cbLight._m0[_2215].z) * _2244);
    uvec4 _2259 = floatBitsToUint(cbLight._m0[_2188 + 12u]);
    bool _2261 = _2259.x == 0u;
    float _2272;
    float _2274;
    float _2276;
    if (_2261)
    {
        _2272 = _2253;
        _2274 = _2254;
        _2276 = _2255;
    }
    else
    {
        uint _2280 = _2188 + 6u;
        float _2296 = (dot(vec3(cbLight._m0[_2188 + 2u].xyz), vec3(_940, _941, _942)) * 0.5) + 0.5;
        float _2297 = _2296 * _2296;
        float _4521 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2298 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2299 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2272 = (((cbLight._m0[_2280].x * 0.3183098733425140380859375) * _2298) * _2299) + _2253;
        _2274 = (((cbLight._m0[_2280].y * 0.3183098733425140380859375) * _2298) * _2299) + _2254;
        _2276 = (((cbLight._m0[_2280].z * 0.3183098733425140380859375) * _2298) * _2299) + _2255;
    }
    bool _2279 = _2259.y == 0u;
    float _2317;
    float _2319;
    float _2321;
    if (_2279)
    {
        _2317 = _2272;
        _2319 = _2274;
        _2321 = _2276;
    }
    else
    {
        uint _2487 = _2188 + 7u;
        float _2503 = (dot(vec3(cbLight._m0[_2188 + 3u].xyz), vec3(_940, _941, _942)) * 0.5) + 0.5;
        float _2504 = _2503 * _2503;
        float _4537 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2505 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2506 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2317 = (((cbLight._m0[_2487].x * 0.3183098733425140380859375) * _2505) * _2506) + _2272;
        _2319 = (((cbLight._m0[_2487].y * 0.3183098733425140380859375) * _2505) * _2506) + _2274;
        _2321 = (((cbLight._m0[_2487].z * 0.3183098733425140380859375) * _2505) * _2506) + _2276;
    }
    uint _2324 = _2188 + 8u;
    float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _943) * 0.949999988079071044921875);
    float _2338 = _2337 * _2337;
    float _2339 = cbLight._m0[_2188].x + _1020;
    float _2340 = cbLight._m0[_2188].y + _1021;
    float _2341 = cbLight._m0[_2188].z + _1022;
    float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
    float _2346 = _2345 * _2339;
    float _2347 = _2345 * _2340;
    float _2348 = _2345 * _2341;
    float _2349 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2188].xyz));
    float _4553 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _4564 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _2353 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2354 = dot(vec3(_940, _941, _942), vec3(_2346, _2347, _2348));
    float _4575 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2358 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2346, _2347, _2348));
    float _4586 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2362 = _2338 * _2338;
    float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
    float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
    float _2375 = 0.959999978542327880859375 - _1099;
    float _2377 = 0.959999978542327880859375 - _1100;
    float _2378 = 0.959999978542327880859375 - _1101;
    float _2385 = 1.0 - _2338;
    float _2396 = (0.5 / (((_2353 * ((_2352 * _2385) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2385) + _2338) * _2352))) * _2352;
    float _4597 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
    uint _2409 = _2188 + 9u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _943) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2225].x + _1020;
    float _2423 = cbLight._m0[_2225].y + _1021;
    float _2424 = cbLight._m0[_2225].z + _1022;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2225].xyz));
    float _4608 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2436 = dot(vec3(_940, _941, _942), vec3(_2429, _2430, _2431));
    float _4619 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2440 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2429, _2430, _2431));
    float _4630 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2444 = _2421 * _2421;
    float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
    float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
    float _2462 = 1.0 - _2421;
    float _2472 = (0.5 / (((_2353 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2462) + _2421) * _2435))) * _2435;
    float _4641 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2474 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
    float _2484 = (((((_2455 * _2375) + _1102) * cbLight._m0[_2409].x) * _2474) * _2211) + (((((_2374 * _2375) + _1102) * cbLight._m0[_2324].x) * _2398) * _2221);
    float _2485 = (((((_2455 * _2377) + _1104) * cbLight._m0[_2409].y) * _2474) * _2211) + (((((_2374 * _2377) + _1104) * cbLight._m0[_2324].y) * _2398) * _2221);
    float _2486 = (((((_2455 * _2378) + _1105) * cbLight._m0[_2409].z) * _2474) * _2211) + (((((_2374 * _2378) + _1105) * cbLight._m0[_2324].z) * _2398) * _2221);
    float _2548;
    float _2550;
    float _2552;
    if (_2261)
    {
        _2548 = _2484;
        _2550 = _2485;
        _2552 = _2486;
    }
    else
    {
        uint _2554 = _2188 + 2u;
        uint _2558 = _2188 + 10u;
        float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2554].w)) * _943) * 0.949999988079071044921875);
        float _2573 = _2572 * _2572;
        float _2574 = cbLight._m0[_2554].x + _1020;
        float _2575 = cbLight._m0[_2554].y + _1021;
        float _2576 = cbLight._m0[_2554].z + _1022;
        float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
        float _2581 = _2580 * _2574;
        float _2582 = _2580 * _2575;
        float _2583 = _2580 * _2576;
        float _2584 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2554].xyz));
        float _4652 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2588 = dot(vec3(_940, _941, _942), vec3(_2581, _2582, _2583));
        float _4663 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2592 = dot(vec3(cbLight._m0[_2554].xyz), vec3(_2581, _2582, _2583));
        float _4674 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2596 = _2573 * _2573;
        float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
        float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
        float _2614 = 1.0 - _2573;
        float _2624 = (0.5 / (((_2353 * ((_2587 * _2614) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2614) + _2573) * _2587))) * _2587;
        float _4685 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2626 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
        float _2627 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2548 = (((((_2607 * _2375) + _1102) * cbLight._m0[_2558].x) * _2626) * _2627) + _2484;
        _2550 = (((((_2607 * _2377) + _1104) * cbLight._m0[_2558].y) * _2626) * _2627) + _2485;
        _2552 = (((((_2607 * _2378) + _1105) * cbLight._m0[_2558].z) * _2626) * _2627) + _2486;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2279)
    {
        _2662 = _2548;
        _2664 = _2550;
        _2666 = _2552;
    }
    else
    {
        uint _2673 = _2188 + 3u;
        uint _2677 = _2188 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _943) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _1020;
        float _2694 = cbLight._m0[_2673].y + _1021;
        float _2695 = cbLight._m0[_2673].z + _1022;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_940, _941, _942), vec3(cbLight._m0[_2673].xyz));
        float _4701 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2707 = dot(vec3(_940, _941, _942), vec3(_2700, _2701, _2702));
        float _4712 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4723 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0);
        float _2733 = 1.0 - _2692;
        float _2743 = (0.5 / (((_2353 * ((_2706 * _2733) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2353 * _2733) + _2692) * _2706))) * _2706;
        float _4734 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2662 = (((((_2726 * _2375) + _1102) * cbLight._m0[_2677].x) * _2745) * _2746) + _2548;
        _2664 = (((((_2726 * _2377) + _1104) * cbLight._m0[_2677].y) * _2745) * _2746) + _2550;
        _2666 = (((((_2726 * _2378) + _1105) * cbLight._m0[_2677].z) * _2745) * _2746) + _2552;
    }
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    if (_2186.y == 0u)
    {
        float _2821 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2822 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2821;
        float _2823 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2821;
        float _2824 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2821;
        uvec4 _2836 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2837 = _2836.x;
        uint _2848 = uint((float(_2836.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1041) / _2837))) + floor(float(uint(cbSceneParam._m0[85u].x * _1040) / _2837)));
        float _2858 = (log2(_2824 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2859 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        uint _2862 = uint(isnan(14.0) ? _2859 : (isnan(_2859) ? 14.0 : min(_2859, 14.0)));
        uvec4 _2867 = texelFetch(g_lightClusterGridBuffer, int(((_2862 << 2u) + (_2848 << 6u)) >> 2u));
        uint _2868 = _2867.x;
        uint _2869 = _2836.z;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((((1u << ((_2869 >> 4u) & 15u)) + 4294967295u) & _2868) == 0u) || ((_2869 & 240u) == 0u))
        {
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
        }
        else
        {
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            uint _3128 = 0u;
            uint _3137;
            bool _3138;
            for (;;)
            {
                _3137 = texelFetch(g_lightClassification, int((((_2862 << 5u) + (_2848 << 9u)) + (_3128 << 2u)) >> 2u)).x;
                _3138 = _3137 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3138)
                {
                    frontier_phi_66_pred = _3122;
                    frontier_phi_66_pred_1 = _3127;
                    frontier_phi_66_pred_2 = _3126;
                    frontier_phi_66_pred_3 = _3125;
                    frontier_phi_66_pred_4 = _3124;
                    frontier_phi_66_pred_5 = _3123;
                }
                else
                {
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    uint _3273;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3127;
                    _3273 = _3137;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    for (;;)
                    {
                        uint _3277 = uint(findLSB(_3273)) + (_3128 << 5u);
                        uint _3274 = (_3273 + 4294967295u) & _3273;
                        uint _3279 = _3277 * 48u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 3u)).x));
                        uint _3299 = (_3277 * 48u) + 4u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3318 = (_3277 * 48u) + 8u;
                        vec3 _3329 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x));
                        float _3333 = _3293.x - _2822;
                        float _3334 = _3293.y - _2823;
                        float _3335 = _3293.z - _2824;
                        float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                        float _3339 = inversesqrt(_3336);
                        float _3340 = _3339 * _3333;
                        float _3341 = _3339 * _3334;
                        float _3342 = _3339 * _3335;
                        float _3343 = dot(vec3(_1059, _1062, _1065), vec3(_3340, _3341, _3342));
                        float _3348 = 1.0 - (_3336 * _3293.w);
                        float _4760 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3350 = sqrt(_3336) * _3312.w;
                        float _3353 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3343) + _3354;
                        float _3360 = _3350 * _3350;
                        float _3364 = ((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3349) / ((_3360 * 0.699999988079071044921875) + 1.0);
                        float _3368 = (-0.0) - _2822;
                        float _3369 = (-0.0) - _2823;
                        float _3370 = (-0.0) - _2824;
                        float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3385 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                        float _3386 = 1.0 - _1134;
                        float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                        float _3394 = _3393 * _3393;
                        float _3395 = _3394 * _3394;
                        float _3396 = _3375 + _3340;
                        float _3397 = _3376 + _3341;
                        float _3398 = _3377 + _3342;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3406 = dot(vec3(_1059, _1062, _1065), vec3(_3375, _3376, _3377));
                        float _4776 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3409 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3410 = dot(vec3(_1059, _1062, _1065), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                        float _4787 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                        float _3418 = _3353 * _3394;
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3343) + _3419;
                        float _4798 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3423 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3424 = 1.0 - _3394;
                        float _3434 = (0.5 / (((_3423 * ((_3409 * _3424) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3394) * _3409))) * _3423;
                        float _4809 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3445 = (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) / ((_3417 * _3417) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125))) * _3349;
                        _3197 = (_3364 * _3312.x) + _3270;
                        _3198 = (_3364 * _3312.y) + _3271;
                        _3199 = (_3364 * _3312.z) + _3272;
                        _3194 = (_3445 * _3329.x) + _3267;
                        _3195 = (_3445 * _3329.y) + _3268;
                        _3196 = (_3445 * _3329.z) + _3269;
                        if (_3274 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3199;
                            _3273 = _3274;
                        }
                    }
                    frontier_phi_66_pred = _3194;
                    frontier_phi_66_pred_1 = _3199;
                    frontier_phi_66_pred_2 = _3198;
                    frontier_phi_66_pred_3 = _3197;
                    frontier_phi_66_pred_4 = _3196;
                    frontier_phi_66_pred_5 = _3195;
                }
                _2970 = frontier_phi_66_pred;
                _2980 = frontier_phi_66_pred_1;
                _2978 = frontier_phi_66_pred_2;
                _2976 = frontier_phi_66_pred_3;
                _2974 = frontier_phi_66_pred_4;
                _2972 = frontier_phi_66_pred_5;
                uint _3129 = _3128 + 1u;
                if (_3129 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3122 = _2970;
                    _3123 = _2972;
                    _3124 = _2974;
                    _3125 = _2976;
                    _3126 = _2978;
                    _3127 = _2980;
                    _3128 = _3129;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
        }
        uvec4 _2983 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2984 = _2983.z;
        uint _2986 = (_2984 >> 8u) & 15u;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        if (((4294967295u << _2986) & _2868) == 0u)
        {
            _3090 = _2969;
            _3092 = _2971;
            _3094 = _2973;
            _3096 = _2975;
            _3098 = _2977;
            _3100 = _2979;
        }
        else
        {
            float _3115 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
            float _3116 = _3115 * _2822;
            float _3117 = _3115 * _2823;
            float _3118 = _3115 * _2824;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2986 < ((_2984 >> 12u) & 15u))
            {
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3250 = _2969;
                float _3251 = _2971;
                float _3252 = _2973;
                float _3253 = _2975;
                float _3254 = _2977;
                float _3255 = _2979;
                uint _3256 = _2986;
                uint _3265;
                bool _3266;
                for (;;)
                {
                    _3265 = texelFetch(g_lightClassification, int((((_2862 << 5u) + (_2848 << 9u)) + (_3256 << 2u)) >> 2u)).x;
                    _3266 = _3265 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3266)
                    {
                        frontier_phi_77_pred = _3255;
                        frontier_phi_77_pred_1 = _3254;
                        frontier_phi_77_pred_2 = _3253;
                        frontier_phi_77_pred_3 = _3252;
                        frontier_phi_77_pred_4 = _3251;
                        frontier_phi_77_pred_5 = _3250;
                    }
                    else
                    {
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3472 = _3250;
                        float _3473 = _3251;
                        float _3474 = _3252;
                        float _3475 = _3253;
                        float _3476 = _3254;
                        float _3477 = _3255;
                        uint _3478 = _3265;
                        uint _3479;
                        vec4 _3504;
                        float _3505;
                        vec4 _3520;
                        vec3 _3532;
                        vec4 _3547;
                        vec4 _3562;
                        float _3608;
                        bool _3609;
                        for (;;)
                        {
                            uint _3489 = ((_3256 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3478));
                            _3479 = (_3478 + 4294967295u) & _3478;
                            uint _3491 = _3489 * 40u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            _3505 = _3504.w;
                            uint _3507 = (_3489 * 40u) + 4u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3489 * 40u) + 8u;
                            _3532 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x));
                            uint _3534 = (_3489 * 40u) + 16u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3489 * 40u) + 20u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3489 * 40u) + 24u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3583 = (_3489 * 40u) + 28u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            _3608 = fma(_2824, _3596.z, fma(_2823, _3596.y, _3596.x * _2822)) + _3596.w;
                            _3609 = !((fma(_2824, _3577.z, fma(_2823, _3577.y, _3577.x * _2822)) + _3577.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3609)
                            {
                                float _3636 = _3504.x - _2822;
                                float _3637 = _3504.y - _2823;
                                float _3638 = _3504.z - _2824;
                                float _3639 = dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638));
                                float _3642 = inversesqrt(_3639);
                                float _3643 = _3642 * _3636;
                                float _3644 = _3642 * _3637;
                                float _3645 = _3642 * _3638;
                                float _3649 = 1.0 - (_3639 / (_3505 * _3505));
                                float _4820 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3654 = sqrt(_3639) * _3520.w;
                                float _3656 = 1.39999997615814208984375 / (_3654 + 1.39999997615814208984375);
                                float _3657 = _3656 * _3656;
                                float _3660 = ((1.0 - _3657) * dot(vec3(_3643, _3644, _3645), vec3(_1059, _1062, _1065))) + _3657;
                                float _3663 = _3654 * _3654;
                                float _3667 = (fma(_2824, _3547.z, fma(_2823, _3547.y, _3547.x * _2822)) + _3547.w) / _3608;
                                float _3668 = (fma(_2824, _3562.z, fma(_2823, _3562.y, _3562.x * _2822)) + _3562.w) / _3608;
                                float _3672 = 1.0 - dot(vec2(_3667, _3668), vec2(_3667, _3668));
                                float _4836 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3674 = _3673 * (((isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0))) * _3650) / ((_3663 * 0.699999988079071044921875) + 1.0));
                                float _3686 = exp2(log2(1.0 / ((_3663 * 3.5) + 5.0)) * 0.25);
                                float _3687 = 1.0 - _1134;
                                float _3694 = sqrt(1.0 - ((1.0 - (_3687 * _3687)) * (1.0 - (_3686 * _3686))));
                                float _3695 = _3694 * _3694;
                                float _3696 = _3695 * _3695;
                                float _3697 = _3643 - _3116;
                                float _3698 = _3644 - _3117;
                                float _3699 = _3645 - _3118;
                                float _3703 = inversesqrt(dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699)));
                                float _3707 = dot(vec3(_1059, _1062, _1065), vec3((-0.0) - _3116, (-0.0) - _3117, (-0.0) - _3118));
                                float _4847 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3710 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3711 = dot(vec3(_1059, _1062, _1065), vec3(_3703 * _3697, _3703 * _3698, _3703 * _3699));
                                float _4858 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3714 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3718 = ((_3714 * _3714) * (_3696 + (-1.0))) + 1.0;
                                float _3719 = _3656 * _3695;
                                float _3720 = _3719 * _3719;
                                float _3726 = ((1.0 - _3720) * dot(vec3(_1059, _1062, _1065), vec3(_3643, _3644, _3645))) + _3720;
                                float _4869 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3728 = 1.0 - _3695;
                                float _3738 = (0.5 / (((_3727 * ((_3710 * _3728) + _3695)) + 9.9999999392252902907785028219223e-09) + (((_3727 * _3728) + _3695) * _3710))) * _3727;
                                float _4880 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3748 = (_3673 * _3650) * (((_3696 * 3.1415927410125732421875) * (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) / ((_3718 * _3718) * ((_3663 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3674 * _3520.y;
                                frontier_phi_83_pred_1 = _3674 * _3520.x;
                                frontier_phi_83_pred_2 = _3748 * _3532.z;
                                frontier_phi_83_pred_3 = _3748 * _3532.y;
                                frontier_phi_83_pred_4 = _3748 * _3532.x;
                                frontier_phi_83_pred_5 = _3674 * _3520.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3756 = frontier_phi_83_pred;
                            _3755 = frontier_phi_83_pred_1;
                            _3754 = frontier_phi_83_pred_2;
                            _3753 = frontier_phi_83_pred_3;
                            _3752 = frontier_phi_83_pred_4;
                            _3757 = frontier_phi_83_pred_5;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3464 = _3757 + _3477;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            if (_3479 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3479;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3464;
                        frontier_phi_77_pred_1 = _3463;
                        frontier_phi_77_pred_2 = _3462;
                        frontier_phi_77_pred_3 = _3461;
                        frontier_phi_77_pred_4 = _3460;
                        frontier_phi_77_pred_5 = _3459;
                    }
                    _3101 = frontier_phi_77_pred;
                    _3099 = frontier_phi_77_pred_1;
                    _3097 = frontier_phi_77_pred_2;
                    _3095 = frontier_phi_77_pred_3;
                    _3093 = frontier_phi_77_pred_4;
                    _3091 = frontier_phi_77_pred_5;
                    uint _3257 = _3256 + 1u;
                    if (_3257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3250 = _3091;
                        _3251 = _3093;
                        _3252 = _3095;
                        _3253 = _3097;
                        _3254 = _3099;
                        _3255 = _3101;
                        _3256 = _3257;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3095;
                frontier_phi_58_59_ladder_1 = _3101;
                frontier_phi_58_59_ladder_2 = _3099;
                frontier_phi_58_59_ladder_3 = _3097;
                frontier_phi_58_59_ladder_4 = _3093;
                frontier_phi_58_59_ladder_5 = _3091;
            }
            else
            {
                frontier_phi_58_59_ladder = _2973;
                frontier_phi_58_59_ladder_1 = _2979;
                frontier_phi_58_59_ladder_2 = _2977;
                frontier_phi_58_59_ladder_3 = _2975;
                frontier_phi_58_59_ladder_4 = _2971;
                frontier_phi_58_59_ladder_5 = _2969;
            }
            _3090 = frontier_phi_58_59_ladder_5;
            _3092 = frontier_phi_58_59_ladder_4;
            _3094 = frontier_phi_58_59_ladder;
            _3096 = frontier_phi_58_59_ladder_3;
            _3098 = frontier_phi_58_59_ladder_2;
            _3100 = frontier_phi_58_59_ladder_1;
        }
        float _3105 = isnan(1.0) ? _1118 : (isnan(_1118) ? 1.0 : min(_1118, 1.0));
        _2881 = (_3105 * _3096) + _2317;
        _2883 = (_3105 * _3098) + _2319;
        _2885 = (_3105 * _3100) + _2321;
        _2887 = ((_3090 * _1102) * _3105) + _2662;
        _2889 = ((_3092 * _1104) * _3105) + _2664;
        _2891 = ((_3094 * _1105) * _3105) + _2666;
    }
    else
    {
        _2881 = _2317;
        _2883 = _2319;
        _2885 = _2321;
        _2887 = _2662;
        _2889 = _2664;
        _2891 = _2666;
    }
    float _4896 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _4907 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _4918 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _2908 = ((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2881 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1118))) + ((_2887 + ((isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0))) * _1957)) * cbPerFrame._m0[3u].x);
    float _2909 = ((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2883 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1118))) + ((_2889 + ((isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0))) * _1957)) * cbPerFrame._m0[3u].x);
    float _2910 = ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2885 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1118))) + ((_2891 + ((isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) * _1957)) * cbPerFrame._m0[3u].x);
    uint _2911 = _282 + 6u;
    float _2919 = _1040 / cbSceneParam._m0[86u].x;
    float _2920 = _1041 / cbSceneParam._m0[86u].y;
    vec4 _2934 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2919, _2920, (log2((isnan(cbSceneParam._m0[77u].w) ? _962 : (isnan(_962) ? cbSceneParam._m0[77u].w : min(_962, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2936 = _2934.x;
    float _2937 = _2934.y;
    float _2938 = _2934.z;
    float _2939 = _2934.w;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    if (_962 > cbSceneParam._m0[78u].w)
    {
        float _2994 = isnan(_962) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _962 : min(cbSceneParam._m0[80u].w, _962));
        float _2995 = _2994 / _962;
        float _3006 = _2995 * _1013;
        float _3007 = _1014 * _2995;
        float _3008 = (-0.0) - _3007;
        float _3010 = _2995 * _1015;
        float _3012 = (cbSceneParam._m0[77u].w * _3008) / _2994;
        float _3013 = _3012 + cbSceneParam._m0[79u].w;
        float _3014 = cbSceneParam._m0[79u].w - _3007;
        float _3020 = sqrt(((_3006 * _3006) + (_3007 * _3007)) + (_3010 * _3010));
        float _3023 = (1.0 - (cbSceneParam._m0[77u].w / _2994)) * _3020;
        float _3028 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3030 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3207;
        if (abs((_3008 - _3012) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3207 = ((((_3013 > 0.0) ? exp2(_3028 * _3013) : (2.0 - exp2(_3030 * _3013))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3023;
        }
        else
        {
            float _3151 = 1.0 / cbSceneParam._m0[80u].x;
            float _3152 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : max(_3013, _3014));
            float _3153 = isnan(_3014) ? _3013 : (isnan(_3013) ? _3014 : min(_3013, _3014));
            float _3162 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : min(_3152, 0.0));
            float _3163 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : min(_3153, 0.0));
            _3207 = ((abs(_3020 / _3008) * cbSceneParam._m0[80u].y) * ((((_3162 - _3163) * 2.0) - ((exp2(_3028 * (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0)))) - exp2(_3028 * (isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))))) * _3151)) - ((exp2(_3030 * _3162) - exp2(_3030 * _3163)) * _3151))) + (_3023 * cbSceneParam._m0[80u].z);
        }
        vec4 _3209 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2919, _2920, 1.0), 0.0);
        float _3218 = exp2((_3207 * (-1.44269502162933349609375)) * (1.0 - _3209.w));
        float _3219 = log2(_3218);
        float _3235 = log2(_2939);
        _3032 = (exp2(_3235 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].x)) * _3209.x) / cbSceneParam._m0[78u].x)) + _2936;
        _3034 = (exp2(_3235 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].y)) * _3209.y) / cbSceneParam._m0[78u].y)) + _2937;
        _3036 = (exp2(_3235 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].z)) * _3209.z) / cbSceneParam._m0[78u].z)) + _2938;
        _3038 = _3218 * _2939;
    }
    else
    {
        _3032 = _2936;
        _3034 = _2937;
        _3036 = _2938;
        _3038 = _2939;
    }
    bool _3245;
    vec4 _3048;
    vec4 _3070;
    float _3072;
    float _3076;
    float _3077;
    float _3078;
    float _3079;
    bool _3089;
    for (;;)
    {
        _3048 = cbMatDynParam._m0[0u];
        float _3050 = roundEven(_3048.y);
        bool _3051 = _3050 == 3.0;
        float _3052 = log2(_3038);
        float _3059 = exp2(_3052 * cbSceneParam._m0[78u].x) * _2908;
        float _3060 = exp2(_3052 * cbSceneParam._m0[78u].y) * _2909;
        float _3061 = exp2(_3052 * cbSceneParam._m0[78u].z) * _2910;
        float _3068 = _1029 + (-0.5);
        _3070 = cbMtdParam._m0[1u];
        _3072 = _3070.y * _3068;
        float _3075 = (_3050 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3076 = _3075 * (_3051 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3032)));
        _3077 = _3075 * (_3051 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3034)));
        _3078 = _3075 * (_3051 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3036)));
        _3079 = _3068 * 0.999000012874603271484375;
        _3089 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3089)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3079) < 0.5)
            {
                _3245 = true;
                break;
            }
        }
        uint _3186 = _1078 + uint(_3048.w);
        if ((cbInstanceData._m0[_3186].w < 1.0) && ((cbInstanceData._m0[_3186].w + _3079) < 0.5))
        {
            _3245 = true;
            break;
        }
        if ((_3072 + 1.0) < _3070.x)
        {
            _3245 = true;
            break;
        }
        _3245 = false;
        break;
    }
    float _3450;
    if (_3245)
    {
        discard_state = true;
        _3450 = 0.0;
    }
    else
    {
        _3450 = cbInstanceData._m0[_2911].w;
    }
    SV_Target.x = _3076;
    SV_Target.y = _3077;
    SV_Target.z = _3078;
    SV_Target.w = _3450;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2911].w;
    discard_exit();
}


