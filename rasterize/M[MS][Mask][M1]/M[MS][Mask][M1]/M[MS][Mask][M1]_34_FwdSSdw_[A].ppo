#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1384;
float _3787;
float _3788;
float _3789;
float _3790;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3799 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3810 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3821 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[23u].w) + _448) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3832 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _476 = (_334.x * cbMtdParam._m0[9u].x) * ((_466 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365);
    float _477 = (_334.y * cbMtdParam._m0[9u].y) * ((_466 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366);
    float _478 = (_334.z * cbMtdParam._m0[9u].z) * ((_466 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367);
    float _482 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _476;
    float _485 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _477;
    float _488 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _478;
    float _496 = (((_476 - _482) * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) + _482) * 4.55000019073486328125;
    float _498 = (((_477 - _485) * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) + _485) * 4.55000019073486328125;
    float _500 = (((_478 - _488) * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) + _488) * 4.55000019073486328125;
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _297) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _298) + cbTextureTilingScale._m0[14u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _583 = _581.x;
    float _584 = _581.y;
    float _585 = _581.z;
    float _594 = ((_564.z - _585) * _466) + _585;
    float _597 = ((((_564.x - _583) * _466) + _583) * 2.0) + (-1.0);
    float _598 = ((((_564.y - _584) * _466) + _584) * 2.0) + (-1.0);
    float _599 = dot(vec2(_597, _598), vec2(_597, _598));
    float _3843 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _647 = _645.x;
    float _648 = 1.0 - _647;
    float _664 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_647 - _648) * cbMtdParam._m0[24u].z) + _648) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3854 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _672 = (_665 * ((_519.x * cbMtdParam._m0[18u].x) - _496)) + _496;
    float _673 = (_665 * ((_519.y * cbMtdParam._m0[18u].y) - _498)) + _498;
    float _674 = (_665 * ((_519.z * cbMtdParam._m0[18u].z) - _500)) + _500;
    vec4 _686 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _702 = _700.x;
    float _719 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _702) * _466) + _702;
    float _723 = ((_686.x - _719) * cbMtdParam._m0[19u].z) + _719;
    float _725 = _723 - (_723 * _665);
    float _730 = (((_539.z - _594) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _594;
    float _734 = ((_620.z - _730) * cbMtdParam._m0[19u].w) + _730;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _754 = (_747.x * 2.0) + (-1.0);
    float _755 = (_747.y * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _3865 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _764 = (_665 * (_747.z - _734)) + _734;
    float _773 = (_597 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_539.x * 2.0) + (-1.0)))) + (((_620.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _774 = (_598 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_539.y * 2.0) + (-1.0)))) + (((_620.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _786 = (((_754 - _773) + (cbMtdParam._m0[21u].x * _773)) * _665) + _773;
    float _787 = (((_755 - _774) + (cbMtdParam._m0[21u].x * _774)) * _665) + _774;
    float _788 = (_665 * (sqrt(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) - _604)) + _604;
    float _790 = cbMtdParam._m0[22u].x + _620.w;
    float _793 = fma(_788, _244 * NORMAL.x, fma(_787, _251 * TANGENT.x, (_237 * _229) * _786));
    float _796 = fma(_788, _244 * NORMAL.y, fma(_787, _251 * TANGENT.y, (_237 * _230) * _786));
    float _799 = fma(_788, _244 * NORMAL.z, fma(_787, _251 * TANGENT.z, (_237 * _231) * _786));
    float _803 = inversesqrt(dot(vec3(_793, _796, _799), vec3(_793, _796, _799)));
    float _804 = _803 * _793;
    float _805 = _803 * _796;
    float _806 = _803 * _799;
    float _3876 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _807 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _3898 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3909 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3920 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3931 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _812 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _826 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _877 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _867);
    float _878 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _867);
    float _879 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _867);
    float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
    float _884 = _877 * _883;
    float _885 = _878 * _883;
    float _886 = _879 * _883;
    vec4 _891 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _893 = _891.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1065 = sqrt(((_877 * _877) + (_878 * _878)) + (_879 * _879));
        float _1071 = (cbMatDynParam._m0[5u].x * _1065) + cbMatDynParam._m0[5u].y;
        float _3942 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1076 = (cbMatDynParam._m0[5u].z * _1065) + cbMatDynParam._m0[5u].w;
        float _3953 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) - _1072)) + _1072) < ((_893 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _904 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _905 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _923 = fma(_806, cbSceneParam._m0[5u].z, fma(_805, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _804));
    float _926 = fma(_806, cbSceneParam._m0[6u].z, fma(_805, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _804));
    float _929 = fma(_806, cbSceneParam._m0[7u].z, fma(_805, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _804));
    uint _942 = _278 + 9u;
    uint _943 = _942 + uint(cbMatDynParam._m0[0u].w);
    float _949 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * cbInstanceData._m0[_943].x;
    float _950 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * cbInstanceData._m0[_943].y;
    float _951 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_943].z;
    float _3964 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _955 = 1.0 - _812;
    float _956 = _952 * _955;
    float _957 = _953 * _955;
    float _958 = _954 * _955;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _812;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _812;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _812;
    float _966 = _963 + 0.039999999105930328369140625;
    float _968 = _964 + 0.039999999105930328369140625;
    float _969 = _965 + 0.039999999105930328369140625;
    vec4 _978 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _904, cbSceneParam._m0[86u].y * _905));
    float _982 = ((isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * TEXCOORD_5.w) * _978.x;
    float _983 = dot(vec3(_804, _805, _806), vec3(_884, _885, _886));
    float _986 = _983 * 2.0;
    float _990 = (_986 * _804) - _884;
    float _991 = (_986 * _805) - _885;
    float _992 = (_986 * _806) - _886;
    float _996 = abs(dot(vec3(_884, _885, _886), vec3(_804, _805, _806)));
    float _3997 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _998 = sqrt(_807);
    float _1011 = exp2((_998 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_998 * 3.0));
    float _1017 = (1.0 - _1011) * ((_998 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1018 = _1011 * _998;
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1383;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1108 = fma(_1054, cbModelParam._m0[26u].z, fma(_1050, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1046));
        float _1112 = fma(_1054, cbModelParam._m0[27u].z, fma(_1050, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1046));
        float _1116 = fma(_1054, cbModelParam._m0[28u].z, fma(_1050, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1046));
        float _1141 = _1046 + _804;
        float _1142 = _1050 + _805;
        float _1143 = _1054 + _806;
        float _1153 = fma(_1143, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141)) - _1108;
        float _1154 = fma(_1143, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141)) - _1112;
        float _1155 = fma(_1143, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141)) - _1116;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1108 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1112 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[34u].z) + ((((((_1116 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1211 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1177.x + (-0.5));
        float _1213 = _1211 * (_1177.y + (-0.5));
        float _1214 = _1211 * (_1177.z + (-0.5));
        float _1221 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1184.x + (-0.5));
        float _1223 = _1221 * (_1184.y + (-0.5));
        float _1224 = _1221 * (_1184.z + (-0.5));
        float _1231 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1191.x + (-0.5));
        float _1233 = _1231 * (_1191.y + (-0.5));
        float _1234 = _1231 * (_1191.z + (-0.5));
        float _1241 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1198.x + (-0.5));
        float _1243 = _1241 * (_1198.y + (-0.5));
        float _1244 = _1241 * (_1198.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1265 = (dot(vec3(_804, _805, _806), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1275 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4045 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1277 + 1.0))) + _1282) * _1245;
        float _1292 = _1213 * 0.5;
        float _1293 = _1223 * 0.5;
        float _1294 = _1233 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_804, _805, _806), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4078 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1319 + 1.0))) + _1324) * _1246;
        float _1334 = _1214 * 0.5;
        float _1335 = _1224 * 0.5;
        float _1336 = _1234 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_804, _805, _806), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4111 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1361 + 1.0))) + _1366) * _1247;
        _1383 = _1214;
        _1385 = _1213;
        _1386 = _1212;
        _1387 = _1224;
        _1388 = _1223;
        _1389 = _1222;
        _1390 = _1234;
        _1391 = _1233;
        _1392 = _1232;
        _1393 = _1247;
        _1394 = _1246;
        _1395 = _1245;
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1384;
        _1385 = _1384;
        _1386 = _1384;
        _1387 = _1384;
        _1388 = _1384;
        _1389 = _1384;
        _1390 = _1384;
        _1391 = _1384;
        _1392 = _1384;
        _1393 = _1384;
        _1394 = _1384;
        _1395 = _1384;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1426 = fma(_1054, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1046));
        float _1430 = fma(_1054, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1046));
        float _1434 = fma(_1054, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1046));
        float _1457 = _1046 + _804;
        float _1458 = _1050 + _805;
        float _1459 = _1054 + _806;
        float _1469 = fma(_1459, cbModelParam._m0[30u].z, fma(_1458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457)) - _1426;
        float _1470 = fma(_1459, cbModelParam._m0[31u].z, fma(_1458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457)) - _1430;
        float _1471 = fma(_1459, cbModelParam._m0[32u].z, fma(_1458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457)) - _1434;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1488 = ((_1475 * _1469) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1426 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1475 * _1470) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1430 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1475 * _1471) / cbModelParam._m0[35u].z) + ((((((_1434 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        float _1525 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1492.x + (-0.5));
        float _1527 = _1525 * (_1492.y + (-0.5));
        float _1528 = _1525 * (_1492.z + (-0.5));
        float _1535 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1499.x + (-0.5));
        float _1537 = _1535 * (_1499.y + (-0.5));
        float _1538 = _1535 * (_1499.z + (-0.5));
        float _1545 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1506.x + (-0.5));
        float _1547 = _1545 * (_1506.y + (-0.5));
        float _1548 = _1545 * (_1506.z + (-0.5));
        float _1555 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1513.x + (-0.5));
        float _1557 = _1555 * (_1513.y + (-0.5));
        float _1558 = _1555 * (_1513.z + (-0.5));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = _1526 * 0.5;
        float _1563 = _1536 * 0.5;
        float _1564 = _1546 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_804, _805, _806), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4174 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1589 + 1.0))) + _1594) * _1559;
        float _1604 = _1527 * 0.5;
        float _1605 = _1537 * 0.5;
        float _1606 = _1547 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_804, _805, _806), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4207 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1631 + 1.0))) + _1636) * _1560;
        float _1646 = _1528 * 0.5;
        float _1647 = _1538 * 0.5;
        float _1648 = _1548 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_804, _805, _806), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4240 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1673 + 1.0))) + _1678) * _1561;
        _1695 = _1528;
        _1696 = _1527;
        _1697 = _1526;
        _1698 = _1538;
        _1699 = _1537;
        _1700 = _1536;
        _1701 = _1548;
        _1702 = _1547;
        _1703 = _1546;
        _1704 = _1561;
        _1705 = _1560;
        _1706 = _1559;
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
    }
    else
    {
        _1695 = _1384;
        _1696 = _1384;
        _1697 = _1384;
        _1698 = _1384;
        _1699 = _1384;
        _1700 = _1384;
        _1701 = _1384;
        _1702 = _1384;
        _1703 = _1384;
        _1704 = _1384;
        _1705 = _1384;
        _1706 = _1384;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1396)) + _1396;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1397)) + _1397;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1398)) + _1398;
    float _1742 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1719));
    float _1763 = _990 * 0.5;
    float _1764 = _991 * 0.5;
    float _1765 = _992 * 0.5;
    float _1766 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1769 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1772 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1806;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1779 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1383, _1387, _1390, _1393));
        float _1783 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1787 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1794 = dot(vec4(cbModelParam._m0[39u]), vec4(_1763, _1764, _1765, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1817;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1808 = dot(vec4(cbModelParam._m0[40u]), vec4(_1763, _1764, _1765, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1821 = (_1817 * cbModelParam._m0[1u].x) + (_1806 * (1.0 - cbModelParam._m0[1u].x));
    float _1831 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _807);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1831 : min(cbModelParam._m0[25u].z, _1831));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1879 = fma(_1054, cbModelParam._m0[13u].z, fma(_1050, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046)) + cbModelParam._m0[13u].w;
        float _1883 = fma(_1054, cbModelParam._m0[14u].z, fma(_1050, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046)) + cbModelParam._m0[14u].w;
        float _1887 = fma(_1054, cbModelParam._m0[15u].z, fma(_1050, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046)) + cbModelParam._m0[15u].w;
        float _1890 = fma(_992, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990));
        float _1893 = fma(_992, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990));
        float _1896 = fma(_992, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990));
        float _1924;
        if (_1890 > 0.0)
        {
            _1924 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1924 = frontier_phi_17_15_ladder;
        }
        float _2147;
        if (_1893 > 0.0)
        {
            _2147 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2147 = frontier_phi_26_22_ladder;
        }
        float _2404;
        if (_1896 > 0.0)
        {
            _2404 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2404 = frontier_phi_38_33_ladder;
        }
        float _2406 = isnan(_2147) ? _1924 : (isnan(_1924) ? _2147 : min(_1924, _2147));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1890) + _1879;
        float _2412 = (_2407 * _1893) + _1883;
        float _2413 = (_2407 * _1896) + _1887;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2414;
        float _2418 = _2414 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 > _2418) || ((_2412 < _2416) || ((_2411 < _2416) || (_2411 > _2418))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2413, cbModelParam._m0[9u].z, fma(_2412, cbModelParam._m0[9u].y, _2411 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2413, cbModelParam._m0[10u].z, fma(_2412, cbModelParam._m0[10u].y, _2411 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2413, cbModelParam._m0[11u].z, fma(_2412, cbModelParam._m0[11u].y, _2411 * cbModelParam._m0[11u].x))), _1832);
            frontier_phi_16_38_ladder = _2541.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2541.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2541.x * cbModelParam._m0[1u].y;
        }
        _1912 = frontier_phi_16_38_ladder_2;
        _1914 = frontier_phi_16_38_ladder_1;
        _1916 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_990, _991, _992), _1832);
        _1912 = _1900.x * cbModelParam._m0[1u].y;
        _1914 = _1900.y * cbModelParam._m0[1u].y;
        _1916 = _1900.z * cbModelParam._m0[1u].y;
    }
    float _1920 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _807);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1920 : min(cbModelParam._m0[25u].w, _1920));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1974 = fma(_1054, cbModelParam._m0[21u].z, fma(_1050, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046)) + cbModelParam._m0[21u].w;
        float _1978 = fma(_1054, cbModelParam._m0[22u].z, fma(_1050, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046)) + cbModelParam._m0[22u].w;
        float _1982 = fma(_1054, cbModelParam._m0[23u].z, fma(_1050, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046)) + cbModelParam._m0[23u].w;
        float _1985 = fma(_992, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990));
        float _1988 = fma(_992, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990));
        float _1991 = fma(_992, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990));
        float _2152;
        if (_1985 > 0.0)
        {
            _2152 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2152 = frontier_phi_28_24_ladder;
        }
        float _2431;
        if (_1988 > 0.0)
        {
            _2431 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2431 = frontier_phi_40_35_ladder;
        }
        float _2644;
        if (_1991 > 0.0)
        {
            _2644 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2644 = frontier_phi_49_46_ladder;
        }
        float _2646 = isnan(_2431) ? _2152 : (isnan(_2152) ? _2431 : min(_2152, _2431));
        float _2647 = isnan(_2644) ? _2646 : (isnan(_2646) ? _2644 : min(_2646, _2644));
        float _2651 = (_2647 * _1985) + _1974;
        float _2652 = (_2647 * _1988) + _1978;
        float _2653 = (_2647 * _1991) + _1982;
        float _2654 = _2647 * 9.9999997473787516355514526367188e-05;
        float _2655 = (-1.0) - _2654;
        float _2657 = _2654 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2653 > _2657) || ((_2653 < _2655) || ((_2652 > _2657) || ((_2652 < _2655) || ((_2651 < _2655) || (_2651 > _2657))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2653, cbModelParam._m0[17u].z, fma(_2652, cbModelParam._m0[17u].y, _2651 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2653, cbModelParam._m0[18u].z, fma(_2652, cbModelParam._m0[18u].y, _2651 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2653, cbModelParam._m0[19u].z, fma(_2652, cbModelParam._m0[19u].y, _2651 * cbModelParam._m0[19u].x))), _1921);
            frontier_phi_25_49_ladder = _2852.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2852.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2852.x * cbModelParam._m0[1u].z;
        }
        _2010 = frontier_phi_25_49_ladder_2;
        _2012 = frontier_phi_25_49_ladder_1;
        _2014 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_990, _991, _992), _1921);
        _2010 = _1994.x * cbModelParam._m0[1u].z;
        _2012 = _1994.y * cbModelParam._m0[1u].z;
        _2014 = _1994.z * cbModelParam._m0[1u].z;
    }
    float _2027 = (((_1017 * _966) + _1018) * _982) * ((cbModelParam._m0[1u].w * (_2010 - _1912)) + _1912);
    float _2029 = (((_1017 * _968) + _1018) * _982) * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2031 = (((_1017 * _969) + _1018) * _982) * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2034 = fma(_2031, cbSceneParam._m0[89u].z, fma(_2029, cbSceneParam._m0[89u].y, _2027 * cbSceneParam._m0[89u].x));
    float _2037 = fma(_2031, cbSceneParam._m0[90u].z, fma(_2029, cbSceneParam._m0[90u].y, _2027 * cbSceneParam._m0[90u].x));
    float _2040 = fma(_2031, cbSceneParam._m0[91u].z, fma(_2029, cbSceneParam._m0[91u].y, _2027 * cbSceneParam._m0[91u].x));
    vec4 _2048 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_904, _905));
    float _2050 = _2048.w;
    float _2062 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2050);
    float _2063 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2050);
    float _2064 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2050);
    uvec4 _2068 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2070 = _2068.x * 14u;
    uint _2071 = _2070 + 13u;
    float _2078 = _982 + (-1.0);
    float _2083 = (cbLight._m0[_2071].x * _2078) + 1.0;
    float _2084 = (cbLight._m0[_2071].y * _2078) + 1.0;
    float _2085 = (cbLight._m0[_2071].z * _2078) + 1.0;
    float _2086 = (cbLight._m0[_2071].w * _2078) + 1.0;
    uint _2087 = _2070 + 5u;
    float _2093 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
    uint _2097 = _2070 + 4u;
    float _2106 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    uint _2110 = _2070 | 1u;
    float _2121 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_804, _805, _806));
    float _2124 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_804, _805, _806));
    float _4376 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _4387 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2129 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * 0.3183098733425140380859375;
    float _2131 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * 0.3183098733425140380859375;
    float _2138 = ((cbLight._m0[_2087].x * _2093) * _2131) + (((cbLight._m0[_2097].x * _2062) * _2106) * _2129);
    float _2139 = ((_2093 * cbLight._m0[_2087].y) * _2131) + (((cbLight._m0[_2097].y * _2063) * _2106) * _2129);
    float _2140 = ((_2093 * cbLight._m0[_2087].z) * _2131) + (((cbLight._m0[_2097].z * _2064) * _2106) * _2129);
    uvec4 _2144 = floatBitsToUint(cbLight._m0[_2070 + 12u]);
    bool _2146 = _2144.x == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2146)
    {
        _2157 = _2138;
        _2159 = _2139;
        _2161 = _2140;
    }
    else
    {
        uint _2165 = _2070 + 6u;
        float _2181 = (dot(vec3(cbLight._m0[_2070 + 2u].xyz), vec3(_804, _805, _806)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4398 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2184 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2157 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _2138;
        _2159 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _2139;
        _2161 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _2140;
    }
    bool _2164 = _2144.y == 0u;
    float _2202;
    float _2204;
    float _2206;
    if (_2164)
    {
        _2202 = _2157;
        _2204 = _2159;
        _2206 = _2161;
    }
    else
    {
        uint _2375 = _2070 + 7u;
        float _2391 = (dot(vec3(cbLight._m0[_2070 + 3u].xyz), vec3(_804, _805, _806)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4414 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2394 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2202 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2157;
        _2204 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2159;
        _2206 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2161;
    }
    uint _2209 = _2070 + 8u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _807) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_2070].x + _884;
    float _2225 = cbLight._m0[_2070].y + _885;
    float _2226 = cbLight._m0[_2070].z + _886;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2070].xyz));
    float _4430 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _4441 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _2238 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2239 = dot(vec3(_804, _805, _806), vec3(_2231, _2232, _2233));
    float _4452 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2231, _2232, _2233));
    float _4463 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2223 * _2223;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2259 = exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0);
    float _2260 = 0.959999978542327880859375 - _963;
    float _2262 = 0.959999978542327880859375 - _964;
    float _2263 = 0.959999978542327880859375 - _965;
    float _2270 = 1.0 - _2223;
    float _2281 = (0.5 / (((_2238 * ((_2237 * _2270) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2270) + _2223) * _2237))) * _2237;
    float _4474 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2283 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    uint _2297 = _2070 + 9u;
    float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _807) * 0.949999988079071044921875);
    float _2309 = _2308 * _2308;
    float _2310 = cbLight._m0[_2110].x + _884;
    float _2311 = cbLight._m0[_2110].y + _885;
    float _2312 = cbLight._m0[_2110].z + _886;
    float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
    float _2317 = _2316 * _2310;
    float _2318 = _2316 * _2311;
    float _2319 = _2316 * _2312;
    float _2320 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2110].xyz));
    float _4485 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2324 = dot(vec3(_804, _805, _806), vec3(_2317, _2318, _2319));
    float _4496 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2328 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2317, _2318, _2319));
    float _4507 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2332 = _2309 * _2309;
    float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
    float _2343 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
    float _2350 = 1.0 - _2309;
    float _2360 = (0.5 / (((_2238 * ((_2323 * _2350) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2350) + _2309) * _2323))) * _2323;
    float _4518 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2362 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
    float _2372 = (((((_2343 * _2260) + _966) * cbLight._m0[_2297].x) * _2362) * _2093) + ((((cbLight._m0[_2209].x * _2062) * ((_2259 * _2260) + _966)) * _2283) * _2106);
    float _2373 = (((((_2343 * _2262) + _968) * cbLight._m0[_2297].y) * _2362) * _2093) + ((((cbLight._m0[_2209].y * _2063) * ((_2259 * _2262) + _968)) * _2283) * _2106);
    float _2374 = (((((_2343 * _2263) + _969) * cbLight._m0[_2297].z) * _2362) * _2093) + ((((cbLight._m0[_2209].z * _2064) * ((_2259 * _2263) + _969)) * _2283) * _2106);
    float _2436;
    float _2438;
    float _2440;
    if (_2146)
    {
        _2436 = _2372;
        _2438 = _2373;
        _2440 = _2374;
    }
    else
    {
        uint _2442 = _2070 + 2u;
        uint _2446 = _2070 + 10u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _807) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _884;
        float _2463 = cbLight._m0[_2442].y + _885;
        float _2464 = cbLight._m0[_2442].z + _886;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2442].xyz));
        float _4529 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2476 = dot(vec3(_804, _805, _806), vec3(_2469, _2470, _2471));
        float _4540 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4551 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2495 = exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0);
        float _2502 = 1.0 - _2461;
        float _2512 = (0.5 / (((_2238 * ((_2475 * _2502) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2502) + _2461) * _2475))) * _2475;
        float _4562 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2514 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2515 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2436 = (((((_2495 * _2260) + _966) * cbLight._m0[_2446].x) * _2514) * _2515) + _2372;
        _2438 = (((((_2495 * _2262) + _968) * cbLight._m0[_2446].y) * _2514) * _2515) + _2373;
        _2440 = (((((_2495 * _2263) + _969) * cbLight._m0[_2446].z) * _2514) * _2515) + _2374;
    }
    float _2550;
    float _2552;
    float _2554;
    if (_2164)
    {
        _2550 = _2436;
        _2552 = _2438;
        _2554 = _2440;
    }
    else
    {
        uint _2561 = _2070 + 3u;
        uint _2565 = _2070 + 11u;
        float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2561].w)) * _807) * 0.949999988079071044921875);
        float _2580 = _2579 * _2579;
        float _2581 = cbLight._m0[_2561].x + _884;
        float _2582 = cbLight._m0[_2561].y + _885;
        float _2583 = cbLight._m0[_2561].z + _886;
        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
        float _2588 = _2587 * _2581;
        float _2589 = _2587 * _2582;
        float _2590 = _2587 * _2583;
        float _2591 = dot(vec3(_804, _805, _806), vec3(cbLight._m0[_2561].xyz));
        float _4578 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2595 = dot(vec3(_804, _805, _806), vec3(_2588, _2589, _2590));
        float _4589 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2599 = dot(vec3(cbLight._m0[_2561].xyz), vec3(_2588, _2589, _2590));
        float _4600 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2603 = _2580 * _2580;
        float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
        float _2614 = exp2(log2(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * 5.0);
        float _2621 = 1.0 - _2580;
        float _2631 = (0.5 / (((_2238 * ((_2594 * _2621) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2621) + _2580) * _2594))) * _2594;
        float _4611 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2633 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
        float _2634 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2550 = (((((_2614 * _2260) + _966) * cbLight._m0[_2565].x) * _2633) * _2634) + _2436;
        _2552 = (((((_2614 * _2262) + _968) * cbLight._m0[_2565].y) * _2633) * _2634) + _2438;
        _2554 = (((((_2614 * _2263) + _969) * cbLight._m0[_2565].z) * _2633) * _2634) + _2440;
    }
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_2068.y == 0u)
    {
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2709;
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2709;
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2709;
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.x;
        uint _2736 = uint((float(_2724.y) * floor(float(uint(cbSceneParam._m0[85u].y * _905) / _2725))) + floor(float(uint(cbSceneParam._m0[85u].x * _904) / _2725)));
        float _2746 = (log2(_2712 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2747 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        uint _2750 = uint(isnan(14.0) ? _2747 : (isnan(_2747) ? 14.0 : min(_2747, 14.0)));
        uvec4 _2755 = texelFetch(g_lightClusterGridBuffer, int(((_2750 << 2u) + (_2736 << 6u)) >> 2u));
        uint _2756 = _2755.x;
        uint _2757 = _2724.z;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((((1u << ((_2757 >> 4u) & 15u)) + 4294967295u) & _2756) == 0u) || ((_2757 & 240u) == 0u))
        {
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
        }
        else
        {
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            uint _3016 = 0u;
            uint _3025;
            bool _3026;
            for (;;)
            {
                _3025 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_3016 << 2u)) >> 2u)).x;
                _3026 = _3025 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3026)
                {
                    frontier_phi_66_pred = _3010;
                    frontier_phi_66_pred_1 = _3015;
                    frontier_phi_66_pred_2 = _3014;
                    frontier_phi_66_pred_3 = _3013;
                    frontier_phi_66_pred_4 = _3012;
                    frontier_phi_66_pred_5 = _3011;
                }
                else
                {
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    uint _3161;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3025;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    for (;;)
                    {
                        uint _3165 = uint(findLSB(_3161)) + (_3016 << 5u);
                        uint _3162 = (_3161 + 4294967295u) & _3161;
                        uint _3167 = _3165 * 48u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3187 = (_3165 * 48u) + 4u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3206 = (_3165 * 48u) + 8u;
                        vec3 _3217 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x));
                        float _3221 = _3181.x - _2710;
                        float _3222 = _3181.y - _2711;
                        float _3223 = _3181.z - _2712;
                        float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                        float _3227 = inversesqrt(_3224);
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3231 = dot(vec3(_923, _926, _929), vec3(_3228, _3229, _3230));
                        float _3236 = 1.0 - (_3224 * _3181.w);
                        float _4637 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3238 = sqrt(_3224) * _3200.w;
                        float _3241 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3231) + _3242;
                        float _3248 = _3238 * _3238;
                        float _3252 = ((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3237) / ((_3248 * 0.699999988079071044921875) + 1.0);
                        float _3256 = (-0.0) - _2710;
                        float _3257 = (-0.0) - _2711;
                        float _3258 = (-0.0) - _2712;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3273 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                        float _3274 = 1.0 - _998;
                        float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                        float _3282 = _3281 * _3281;
                        float _3283 = _3282 * _3282;
                        float _3284 = _3263 + _3228;
                        float _3285 = _3264 + _3229;
                        float _3286 = _3265 + _3230;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3294 = dot(vec3(_923, _926, _929), vec3(_3263, _3264, _3265));
                        float _4653 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3298 = dot(vec3(_923, _926, _929), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                        float _4664 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                        float _3306 = _3241 * _3282;
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3231) + _3307;
                        float _4675 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3312 = 1.0 - _3282;
                        float _3322 = (0.5 / (((_3311 * ((_3297 * _3312) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3282) * _3297))) * _3311;
                        float _4686 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3333 = (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) / ((_3305 * _3305) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125))) * _3237;
                        _3085 = (_3252 * _3200.x) + _3158;
                        _3086 = (_3252 * _3200.y) + _3159;
                        _3087 = (_3252 * _3200.z) + _3160;
                        _3082 = (_3333 * _3217.x) + _3155;
                        _3083 = (_3333 * _3217.y) + _3156;
                        _3084 = (_3333 * _3217.z) + _3157;
                        if (_3162 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3162;
                        }
                    }
                    frontier_phi_66_pred = _3082;
                    frontier_phi_66_pred_1 = _3087;
                    frontier_phi_66_pred_2 = _3086;
                    frontier_phi_66_pred_3 = _3085;
                    frontier_phi_66_pred_4 = _3084;
                    frontier_phi_66_pred_5 = _3083;
                }
                _2858 = frontier_phi_66_pred;
                _2868 = frontier_phi_66_pred_1;
                _2866 = frontier_phi_66_pred_2;
                _2864 = frontier_phi_66_pred_3;
                _2862 = frontier_phi_66_pred_4;
                _2860 = frontier_phi_66_pred_5;
                uint _3017 = _3016 + 1u;
                if (_3017 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3010 = _2858;
                    _3011 = _2860;
                    _3012 = _2862;
                    _3013 = _2864;
                    _3014 = _2866;
                    _3015 = _2868;
                    _3016 = _3017;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
        }
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.z;
        uint _2874 = (_2872 >> 8u) & 15u;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        if (((4294967295u << _2874) & _2756) == 0u)
        {
            _2978 = _2857;
            _2980 = _2859;
            _2982 = _2861;
            _2984 = _2863;
            _2986 = _2865;
            _2988 = _2867;
        }
        else
        {
            float _3003 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
            float _3004 = _3003 * _2710;
            float _3005 = _3003 * _2711;
            float _3006 = _3003 * _2712;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2874 < ((_2872 >> 12u) & 15u))
            {
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _3138 = _2857;
                float _3139 = _2859;
                float _3140 = _2861;
                float _3141 = _2863;
                float _3142 = _2865;
                float _3143 = _2867;
                uint _3144 = _2874;
                uint _3153;
                bool _3154;
                for (;;)
                {
                    _3153 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                    _3154 = _3153 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3154)
                    {
                        frontier_phi_77_pred = _3143;
                        frontier_phi_77_pred_1 = _3142;
                        frontier_phi_77_pred_2 = _3141;
                        frontier_phi_77_pred_3 = _3140;
                        frontier_phi_77_pred_4 = _3139;
                        frontier_phi_77_pred_5 = _3138;
                    }
                    else
                    {
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        float _3362 = _3140;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        uint _3366 = _3153;
                        uint _3367;
                        vec4 _3392;
                        float _3393;
                        vec4 _3408;
                        vec3 _3420;
                        vec4 _3435;
                        vec4 _3450;
                        float _3496;
                        bool _3497;
                        for (;;)
                        {
                            uint _3377 = ((_3144 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3366));
                            _3367 = (_3366 + 4294967295u) & _3366;
                            uint _3379 = _3377 * 40u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            _3393 = _3392.w;
                            uint _3395 = (_3377 * 40u) + 4u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3410 = (_3377 * 40u) + 8u;
                            _3420 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x));
                            uint _3422 = (_3377 * 40u) + 16u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3377 * 40u) + 20u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3377 * 40u) + 24u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3471 = (_3377 * 40u) + 28u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            _3496 = fma(_2712, _3484.z, fma(_2711, _3484.y, _3484.x * _2710)) + _3484.w;
                            _3497 = !((fma(_2712, _3465.z, fma(_2711, _3465.y, _3465.x * _2710)) + _3465.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3497)
                            {
                                float _3524 = _3392.x - _2710;
                                float _3525 = _3392.y - _2711;
                                float _3526 = _3392.z - _2712;
                                float _3527 = dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526));
                                float _3530 = inversesqrt(_3527);
                                float _3531 = _3530 * _3524;
                                float _3532 = _3530 * _3525;
                                float _3533 = _3530 * _3526;
                                float _3537 = 1.0 - (_3527 / (_3393 * _3393));
                                float _4697 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3542 = sqrt(_3527) * _3408.w;
                                float _3544 = 1.39999997615814208984375 / (_3542 + 1.39999997615814208984375);
                                float _3545 = _3544 * _3544;
                                float _3548 = ((1.0 - _3545) * dot(vec3(_3531, _3532, _3533), vec3(_923, _926, _929))) + _3545;
                                float _3551 = _3542 * _3542;
                                float _3555 = (fma(_2712, _3435.z, fma(_2711, _3435.y, _3435.x * _2710)) + _3435.w) / _3496;
                                float _3556 = (fma(_2712, _3450.z, fma(_2711, _3450.y, _3450.x * _2710)) + _3450.w) / _3496;
                                float _3560 = 1.0 - dot(vec2(_3555, _3556), vec2(_3555, _3556));
                                float _4713 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3562 = _3561 * (((isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0))) * _3538) / ((_3551 * 0.699999988079071044921875) + 1.0));
                                float _3574 = exp2(log2(1.0 / ((_3551 * 3.5) + 5.0)) * 0.25);
                                float _3575 = 1.0 - _998;
                                float _3582 = sqrt(1.0 - ((1.0 - (_3575 * _3575)) * (1.0 - (_3574 * _3574))));
                                float _3583 = _3582 * _3582;
                                float _3584 = _3583 * _3583;
                                float _3585 = _3531 - _3004;
                                float _3586 = _3532 - _3005;
                                float _3587 = _3533 - _3006;
                                float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                                float _3595 = dot(vec3(_923, _926, _929), vec3((-0.0) - _3004, (-0.0) - _3005, (-0.0) - _3006));
                                float _4724 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3599 = dot(vec3(_923, _926, _929), vec3(_3591 * _3585, _3591 * _3586, _3591 * _3587));
                                float _4735 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3606 = ((_3602 * _3602) * (_3584 + (-1.0))) + 1.0;
                                float _3607 = _3544 * _3583;
                                float _3608 = _3607 * _3607;
                                float _3614 = ((1.0 - _3608) * dot(vec3(_923, _926, _929), vec3(_3531, _3532, _3533))) + _3608;
                                float _4746 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3616 = 1.0 - _3583;
                                float _3626 = (0.5 / (((_3615 * ((_3598 * _3616) + _3583)) + 9.9999999392252902907785028219223e-09) + (((_3615 * _3616) + _3583) * _3598))) * _3615;
                                float _4757 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3636 = (_3561 * _3538) * (((_3584 * 3.1415927410125732421875) * (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) / ((_3606 * _3606) * ((_3551 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3562 * _3408.y;
                                frontier_phi_83_pred_1 = _3562 * _3408.x;
                                frontier_phi_83_pred_2 = _3636 * _3420.z;
                                frontier_phi_83_pred_3 = _3636 * _3420.y;
                                frontier_phi_83_pred_4 = _3636 * _3420.x;
                                frontier_phi_83_pred_5 = _3562 * _3408.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3644 = frontier_phi_83_pred;
                            _3643 = frontier_phi_83_pred_1;
                            _3642 = frontier_phi_83_pred_2;
                            _3641 = frontier_phi_83_pred_3;
                            _3640 = frontier_phi_83_pred_4;
                            _3645 = frontier_phi_83_pred_5;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            if (_3367 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3367;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3352;
                        frontier_phi_77_pred_1 = _3351;
                        frontier_phi_77_pred_2 = _3350;
                        frontier_phi_77_pred_3 = _3349;
                        frontier_phi_77_pred_4 = _3348;
                        frontier_phi_77_pred_5 = _3347;
                    }
                    _2989 = frontier_phi_77_pred;
                    _2987 = frontier_phi_77_pred_1;
                    _2985 = frontier_phi_77_pred_2;
                    _2983 = frontier_phi_77_pred_3;
                    _2981 = frontier_phi_77_pred_4;
                    _2979 = frontier_phi_77_pred_5;
                    uint _3145 = _3144 + 1u;
                    if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3138 = _2979;
                        _3139 = _2981;
                        _3140 = _2983;
                        _3141 = _2985;
                        _3142 = _2987;
                        _3143 = _2989;
                        _3144 = _3145;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2983;
                frontier_phi_58_59_ladder_1 = _2989;
                frontier_phi_58_59_ladder_2 = _2987;
                frontier_phi_58_59_ladder_3 = _2985;
                frontier_phi_58_59_ladder_4 = _2981;
                frontier_phi_58_59_ladder_5 = _2979;
            }
            else
            {
                frontier_phi_58_59_ladder = _2861;
                frontier_phi_58_59_ladder_1 = _2867;
                frontier_phi_58_59_ladder_2 = _2865;
                frontier_phi_58_59_ladder_3 = _2863;
                frontier_phi_58_59_ladder_4 = _2859;
                frontier_phi_58_59_ladder_5 = _2857;
            }
            _2978 = frontier_phi_58_59_ladder_5;
            _2980 = frontier_phi_58_59_ladder_4;
            _2982 = frontier_phi_58_59_ladder;
            _2984 = frontier_phi_58_59_ladder_3;
            _2986 = frontier_phi_58_59_ladder_2;
            _2988 = frontier_phi_58_59_ladder_1;
        }
        float _2993 = isnan(1.0) ? _982 : (isnan(_982) ? 1.0 : min(_982, 1.0));
        _2769 = (_2993 * _2984) + _2202;
        _2771 = (_2993 * _2986) + _2204;
        _2773 = (_2993 * _2988) + _2206;
        _2775 = ((_2978 * _966) * _2993) + _2550;
        _2777 = ((_2980 * _968) * _2993) + _2552;
        _2779 = ((_2982 * _969) * _2993) + _2554;
    }
    else
    {
        _2769 = _2202;
        _2771 = _2204;
        _2773 = _2206;
        _2775 = _2550;
        _2777 = _2552;
        _2779 = _2554;
    }
    float _4773 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4784 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4795 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2796 = ((isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2769 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _982))) + ((_2775 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    float _2797 = ((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2771 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _982))) + ((_2777 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    float _2798 = ((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2773 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _982))) + ((_2779 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    uint _2799 = _278 + 6u;
    float _2807 = _904 / cbSceneParam._m0[86u].x;
    float _2808 = _905 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _826 : (isnan(_826) ? cbSceneParam._m0[77u].w : min(_826, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_826 > cbSceneParam._m0[78u].w)
    {
        float _2882 = isnan(_826) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _826 : min(cbSceneParam._m0[80u].w, _826));
        float _2883 = _2882 / _826;
        float _2894 = _2883 * _877;
        float _2895 = _878 * _2883;
        float _2896 = (-0.0) - _2895;
        float _2898 = _2883 * _879;
        float _2900 = (cbSceneParam._m0[77u].w * _2896) / _2882;
        float _2901 = _2900 + cbSceneParam._m0[79u].w;
        float _2902 = cbSceneParam._m0[79u].w - _2895;
        float _2908 = sqrt(((_2894 * _2894) + (_2895 * _2895)) + (_2898 * _2898));
        float _2911 = (1.0 - (cbSceneParam._m0[77u].w / _2882)) * _2908;
        float _2916 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2918 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3095;
        if (abs((_2896 - _2900) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3095 = ((((_2901 > 0.0) ? exp2(_2916 * _2901) : (2.0 - exp2(_2918 * _2901))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2911;
        }
        else
        {
            float _3039 = 1.0 / cbSceneParam._m0[80u].x;
            float _3040 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : max(_2901, _2902));
            float _3041 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : min(_2901, _2902));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            float _3051 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : min(_3041, 0.0));
            _3095 = ((abs(_2908 / _2896) * cbSceneParam._m0[80u].y) * ((((_3050 - _3051) * 2.0) - ((exp2(_2916 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0)))) - exp2(_2916 * (isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))))) * _3039)) - ((exp2(_2918 * _3050) - exp2(_2918 * _3051)) * _3039))) + (_2911 * cbSceneParam._m0[80u].z);
        }
        vec4 _3097 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3106 = exp2((_3095 * (-1.44269502162933349609375)) * (1.0 - _3097.w));
        float _3107 = log2(_3106);
        float _3123 = log2(_2827);
        _2920 = (exp2(_3123 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].x)) * _3097.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2922 = (exp2(_3123 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].y)) * _3097.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2924 = (exp2(_3123 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].z)) * _3097.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2926 = _3106 * _2827;
    }
    else
    {
        _2920 = _2824;
        _2922 = _2825;
        _2924 = _2826;
        _2926 = _2827;
    }
    bool _3133;
    vec4 _2936;
    vec4 _2958;
    float _2960;
    float _2964;
    float _2965;
    float _2966;
    float _2967;
    bool _2977;
    for (;;)
    {
        _2936 = cbMatDynParam._m0[0u];
        float _2938 = roundEven(_2936.y);
        bool _2939 = _2938 == 3.0;
        float _2940 = log2(_2926);
        float _2947 = exp2(_2940 * cbSceneParam._m0[78u].x) * _2796;
        float _2948 = exp2(_2940 * cbSceneParam._m0[78u].y) * _2797;
        float _2949 = exp2(_2940 * cbSceneParam._m0[78u].z) * _2798;
        float _2956 = _893 + (-0.5);
        _2958 = cbMtdParam._m0[1u];
        _2960 = _2958.y * _2956;
        float _2963 = (_2938 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2964 = _2963 * (_2939 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2920)));
        _2965 = _2963 * (_2939 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2922)));
        _2966 = _2963 * (_2939 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2924)));
        _2967 = _2956 * 0.999000012874603271484375;
        _2977 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2977)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _2967) < 0.5)
            {
                _3133 = true;
                break;
            }
        }
        uint _3074 = _942 + uint(_2936.w);
        if ((cbInstanceData._m0[_3074].w < 1.0) && ((cbInstanceData._m0[_3074].w + _2967) < 0.5))
        {
            _3133 = true;
            break;
        }
        if ((_2960 + 1.0) < _2958.x)
        {
            _3133 = true;
            break;
        }
        _3133 = false;
        break;
    }
    float _3338;
    if (_3133)
    {
        discard_state = true;
        _3338 = 0.0;
    }
    else
    {
        _3338 = cbInstanceData._m0[_2799].w;
    }
    SV_Target.x = _2964;
    SV_Target.y = _2965;
    SV_Target.z = _2966;
    SV_Target.w = _3338;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2799].w;
    discard_exit();
}


