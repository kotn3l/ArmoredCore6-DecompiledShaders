#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1452;
float _4116;
float _4117;
float _4118;
float _4119;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4128 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4139 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4150 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[23u].w) + _434) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4161 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _459 = (_452 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _460 = (_452 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _461 = (_452 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    float _465 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _459;
    float _468 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _460;
    float _471 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _461;
    float _478 = ((_459 - _465) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) + _465;
    float _479 = ((_460 - _468) * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) + _468;
    float _480 = ((_461 - _471) * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) + _471;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _542 = _540.x;
    float _543 = _540.y;
    float _544 = _540.z;
    float _553 = ((_523.z - _544) * _452) + _544;
    float _556 = ((((_523.x - _542) * _452) + _542) * 2.0) + (-1.0);
    float _557 = ((((_523.y - _543) * _452) + _543) * 2.0) + (-1.0);
    float _558 = dot(vec2(_556, _557), vec2(_556, _557));
    float _4172 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _563 = sqrt(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _616 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _619 = ((isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : min(_616, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _628 = (_619 - ((((((_606 - _607) * cbMtdParam._m0[24u].z) + _607) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _619))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4193 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _636 = (_629 * (cbMtdParam._m0[17u].x - _478)) + _478;
    float _637 = (_629 * (cbMtdParam._m0[17u].y - _479)) + _479;
    float _638 = (_629 * (cbMtdParam._m0[17u].z - _480)) + _480;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _652 = _650.x;
    float _653 = 1.0 - _652;
    float _678 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_652 - _653) * cbMtdParam._m0[24u].w) + _653) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4204 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _687 = ((((cbMtdParam._m0[10u].x - _636) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _679) + _636;
    float _688 = ((((cbMtdParam._m0[10u].y - _637) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _679) + _637;
    float _689 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _638)) * _679) + _638;
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _715 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _717 = _715.x;
    float _735 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _717) * _452) + _717;
    float _739 = ((_701.x - _735) * cbMtdParam._m0[19u].z) + _735;
    float _741 = _739 - (_739 * _629);
    float _743 = _741 - (_741 * _679);
    float _748 = (((_498.z - _553) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _553;
    float _752 = ((_579.z - _748) * cbMtdParam._m0[19u].w) + _748;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _773 = (_766.x * 2.0) + (-1.0);
    float _774 = (_766.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _4215 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _783 = (_629 * (_766.z - _752)) + _752;
    float _786 = ((cbMtdParam._m0[23u].x - _783) * _679) + _783;
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _811 = (_805.x * 2.0) + (-1.0);
    float _812 = (_805.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _4226 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _827 = (_556 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_498.x * 2.0) + (-1.0)))) + (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _828 = (_557 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_498.y * 2.0) + (-1.0)))) + (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _840 = (((_773 - _827) + (cbMtdParam._m0[21u].x * _827)) * _629) + _827;
    float _841 = (((_774 - _828) + (cbMtdParam._m0[21u].x * _828)) * _629) + _828;
    float _842 = (_629 * (sqrt(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) - _563)) + _563;
    float _853 = (((_811 - _840) + (_840 * cbMtdParam._m0[22u].z)) * _679) + _840;
    float _854 = (((_812 - _841) + (_841 * cbMtdParam._m0[22u].z)) * _679) + _841;
    float _855 = ((sqrt(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) - _842) * _679) + _842;
    float _859 = cbMtdParam._m0[22u].x + _579.w;
    float _862 = fma(_855, _257 * NORMAL.x, fma(_854, _264 * TANGENT.x, (_250 * _242) * _853));
    float _865 = fma(_855, _257 * NORMAL.y, fma(_854, _264 * TANGENT.y, (_250 * _243) * _853));
    float _868 = fma(_855, _257 * NORMAL.z, fma(_854, _264 * TANGENT.z, (_250 * _244) * _853));
    float _872 = inversesqrt(dot(vec3(_862, _865, _868), vec3(_862, _865, _868)));
    float _873 = _872 * _862;
    float _874 = _872 * _865;
    float _875 = _872 * _868;
    float _4237 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _876 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _4248 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4259 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4270 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4281 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4292 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _881 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _895 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _945 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _935);
    float _946 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _935);
    float _947 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _935);
    float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
    float _952 = _945 * _951;
    float _953 = _946 * _951;
    float _954 = _947 * _951;
    vec4 _959 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _961 = _959.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1133 = sqrt(((_945 * _945) + (_946 * _946)) + (_947 * _947));
        float _1139 = (cbMatDynParam._m0[5u].x * _1133) + cbMatDynParam._m0[5u].y;
        float _4303 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1144 = (cbMatDynParam._m0[5u].z * _1133) + cbMatDynParam._m0[5u].w;
        float _4314 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) - _1140)) + _1140) < ((_961 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _972 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _973 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _991 = fma(_875, cbSceneParam._m0[5u].z, fma(_874, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _873));
    float _994 = fma(_875, cbSceneParam._m0[6u].z, fma(_874, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _873));
    float _997 = fma(_875, cbSceneParam._m0[7u].z, fma(_874, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _873));
    uint _1010 = _289 + 9u;
    uint _1011 = _1010 + uint(cbMatDynParam._m0[0u].w);
    float _1017 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * cbInstanceData._m0[_1011].x;
    float _1018 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * cbInstanceData._m0[_1011].y;
    float _1019 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * cbInstanceData._m0[_1011].z;
    float _4325 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1020 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _4336 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1021 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1022 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _1023 = 1.0 - _881;
    float _1024 = _1020 * _1023;
    float _1025 = _1021 * _1023;
    float _1026 = _1022 * _1023;
    float _1031 = (_1020 + (-0.039999999105930328369140625)) * _881;
    float _1032 = (_1021 + (-0.039999999105930328369140625)) * _881;
    float _1033 = (_1022 + (-0.039999999105930328369140625)) * _881;
    float _1034 = _1031 + 0.039999999105930328369140625;
    float _1036 = _1032 + 0.039999999105930328369140625;
    float _1037 = _1033 + 0.039999999105930328369140625;
    vec4 _1046 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _972, cbSceneParam._m0[86u].y * _973));
    float _1050 = ((isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * TEXCOORD_5.w) * _1046.x;
    float _1051 = dot(vec3(_873, _874, _875), vec3(_952, _953, _954));
    float _1054 = _1051 * 2.0;
    float _1058 = (_1054 * _873) - _952;
    float _1059 = (_1054 * _874) - _953;
    float _1060 = (_1054 * _875) - _954;
    float _1064 = abs(dot(vec3(_952, _953, _954), vec3(_873, _874, _875)));
    float _4358 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1066 = sqrt(_876);
    float _1079 = exp2((_1066 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1066 * 3.0));
    float _1085 = (1.0 - _1079) * ((_1066 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1086 = _1079 * _1066;
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1451;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1176 = fma(_1122, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114));
        float _1180 = fma(_1122, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114));
        float _1184 = fma(_1122, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114));
        float _1209 = _1114 + _873;
        float _1210 = _1118 + _874;
        float _1211 = _1122 + _875;
        float _1221 = fma(_1211, cbModelParam._m0[26u].z, fma(_1210, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1209)) - _1176;
        float _1222 = fma(_1211, cbModelParam._m0[27u].z, fma(_1210, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1209)) - _1180;
        float _1223 = fma(_1211, cbModelParam._m0[28u].z, fma(_1210, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1209)) - _1184;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1240 = ((_1227 * _1221) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1176 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1222) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1180 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1227 * _1223) / cbModelParam._m0[34u].z) + ((((((_1184 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        float _1279 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1245.x + (-0.5));
        float _1281 = _1279 * (_1245.y + (-0.5));
        float _1282 = _1279 * (_1245.z + (-0.5));
        float _1289 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1252.x + (-0.5));
        float _1291 = _1289 * (_1252.y + (-0.5));
        float _1292 = _1289 * (_1252.z + (-0.5));
        float _1299 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1259.x + (-0.5));
        float _1301 = _1299 * (_1259.y + (-0.5));
        float _1302 = _1299 * (_1259.z + (-0.5));
        float _1309 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1266.x + (-0.5));
        float _1311 = _1309 * (_1266.y + (-0.5));
        float _1312 = _1309 * (_1266.z + (-0.5));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = _1280 * 0.5;
        float _1317 = _1290 * 0.5;
        float _1318 = _1300 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1333 = (dot(vec3(_873, _874, _875), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1343 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4406 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1345 + 1.0))) + _1350) * _1313;
        float _1360 = _1281 * 0.5;
        float _1361 = _1291 * 0.5;
        float _1362 = _1301 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_873, _874, _875), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4439 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1387 + 1.0))) + _1392) * _1314;
        float _1402 = _1282 * 0.5;
        float _1403 = _1292 * 0.5;
        float _1404 = _1302 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_873, _874, _875), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4450 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4461 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4472 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_1429 + 1.0))) + _1434) * _1315;
        _1451 = _1282;
        _1453 = _1281;
        _1454 = _1280;
        _1455 = _1292;
        _1456 = _1291;
        _1457 = _1290;
        _1458 = _1302;
        _1459 = _1301;
        _1460 = _1300;
        _1461 = _1315;
        _1462 = _1314;
        _1463 = _1313;
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1452;
        _1453 = _1452;
        _1454 = _1452;
        _1455 = _1452;
        _1456 = _1452;
        _1457 = _1452;
        _1458 = _1452;
        _1459 = _1452;
        _1460 = _1452;
        _1461 = _1452;
        _1462 = _1452;
        _1463 = _1452;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
    }
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1494 = fma(_1122, cbModelParam._m0[30u].z, fma(_1118, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114));
        float _1498 = fma(_1122, cbModelParam._m0[31u].z, fma(_1118, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114));
        float _1502 = fma(_1122, cbModelParam._m0[32u].z, fma(_1118, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114));
        float _1525 = _1114 + _873;
        float _1526 = _1118 + _874;
        float _1527 = _1122 + _875;
        float _1537 = fma(_1527, cbModelParam._m0[30u].z, fma(_1526, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1525)) - _1494;
        float _1538 = fma(_1527, cbModelParam._m0[31u].z, fma(_1526, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1525)) - _1498;
        float _1539 = fma(_1527, cbModelParam._m0[32u].z, fma(_1526, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1525)) - _1502;
        float _1543 = inversesqrt(dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539)));
        float _1556 = ((_1543 * _1537) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1494 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1543 * _1538) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1498 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1543 * _1539) / cbModelParam._m0[35u].z) + ((((((_1502 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1556, _1557, _1558), 0.0);
        float _1593 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1560.x + (-0.5));
        float _1595 = _1593 * (_1560.y + (-0.5));
        float _1596 = _1593 * (_1560.z + (-0.5));
        float _1603 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1567.x + (-0.5));
        float _1605 = _1603 * (_1567.y + (-0.5));
        float _1606 = _1603 * (_1567.z + (-0.5));
        float _1613 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1574.x + (-0.5));
        float _1615 = _1613 * (_1574.y + (-0.5));
        float _1616 = _1613 * (_1574.z + (-0.5));
        float _1623 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1581.x + (-0.5));
        float _1625 = _1623 * (_1581.y + (-0.5));
        float _1626 = _1623 * (_1581.z + (-0.5));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = _1594 * 0.5;
        float _1631 = _1604 * 0.5;
        float _1632 = _1614 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_873, _874, _875), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4513 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4524 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4535 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_1657 + 1.0))) + _1662) * _1627;
        float _1672 = _1595 * 0.5;
        float _1673 = _1605 * 0.5;
        float _1674 = _1615 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_873, _874, _875), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _4546 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4557 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4568 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_1699 + 1.0))) + _1704) * _1628;
        float _1714 = _1596 * 0.5;
        float _1715 = _1606 * 0.5;
        float _1716 = _1616 * 0.5;
        float _1717 = dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716));
        float _1722 = (_1717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1717);
        float _1730 = (dot(vec3(_873, _874, _875), vec3(_1722 * _1714, _1722 * _1715, _1722 * _1716)) + 1.0) * 0.5;
        float _4579 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1739 = sqrt(((_1715 * _1715) + (_1714 * _1714)) + (_1716 * _1716)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4590 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1741 = _1740 * 2.0;
        float _1745 = (1.0 - _1740) / (_1740 + 1.0);
        float _4601 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1755 = ((((1.0 - _1746) * (_1741 + 2.0)) * exp2(log2(isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_1741 + 1.0))) + _1746) * _1629;
        _1763 = _1596;
        _1764 = _1595;
        _1765 = _1594;
        _1766 = _1606;
        _1767 = _1605;
        _1768 = _1604;
        _1769 = _1616;
        _1770 = _1615;
        _1771 = _1614;
        _1772 = _1629;
        _1773 = _1628;
        _1774 = _1627;
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)));
    }
    else
    {
        _1763 = _1452;
        _1764 = _1452;
        _1765 = _1452;
        _1766 = _1452;
        _1767 = _1452;
        _1768 = _1452;
        _1769 = _1452;
        _1770 = _1452;
        _1771 = _1452;
        _1772 = _1452;
        _1773 = _1452;
        _1774 = _1452;
        _1775 = 0.0;
        _1776 = 0.0;
        _1777 = 0.0;
    }
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1464)) + _1464;
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1465)) + _1465;
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1466)) + _1466;
    float _1810 = fma(_1789, cbSceneParam._m0[89u].z, fma(_1788, cbSceneParam._m0[89u].y, _1787 * cbSceneParam._m0[89u].x));
    float _1813 = fma(_1789, cbSceneParam._m0[90u].z, fma(_1788, cbSceneParam._m0[90u].y, _1787 * cbSceneParam._m0[90u].x));
    float _1816 = fma(_1789, cbSceneParam._m0[91u].z, fma(_1788, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1787));
    float _1831 = _1058 * 0.5;
    float _1832 = _1059 * 0.5;
    float _1833 = _1060 * 0.5;
    float _1834 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1837 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1840 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1874;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1847 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1451, _1455, _1458, _1461));
        float _1851 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1855 = dot(vec4(_1831, _1832, _1833, 1.0), vec4(_1454, _1457, _1460, _1463));
        float _1862 = dot(vec4(cbModelParam._m0[39u]), vec4(_1831, _1832, _1833, 1.0));
        _1874 = dot(vec3(isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1862) ? 0.0 : (isnan(0.0) ? _1862 : max(0.0, _1862))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1874 = 1.0;
    }
    float _1885;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1876 = dot(vec4(cbModelParam._m0[40u]), vec4(_1831, _1832, _1833, 1.0));
        _1885 = dot(vec3(isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1876) ? 0.0 : (isnan(0.0) ? _1876 : max(0.0, _1876))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1885 = 1.0;
    }
    float _1889 = (_1885 * cbModelParam._m0[1u].x) + (_1874 * (1.0 - cbModelParam._m0[1u].x));
    float _1899 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _876);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1899 : min(cbModelParam._m0[25u].z, _1899));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1948 = fma(_1122, cbModelParam._m0[13u].z, fma(_1118, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1114)) + cbModelParam._m0[13u].w;
        float _1952 = fma(_1122, cbModelParam._m0[14u].z, fma(_1118, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1114)) + cbModelParam._m0[14u].w;
        float _1956 = fma(_1122, cbModelParam._m0[15u].z, fma(_1118, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1114)) + cbModelParam._m0[15u].w;
        float _1959 = fma(_1060, cbModelParam._m0[13u].z, fma(_1059, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1058));
        float _1962 = fma(_1060, cbModelParam._m0[14u].z, fma(_1059, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1058));
        float _1965 = fma(_1060, cbModelParam._m0[15u].z, fma(_1059, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1058));
        float _1993;
        if (_1959 > 0.0)
        {
            _1993 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1993 = frontier_phi_17_15_ladder;
        }
        float _2165;
        if (_1962 > 0.0)
        {
            _2165 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2165 = frontier_phi_26_22_ladder;
        }
        float _2460;
        if (_1965 > 0.0)
        {
            _2460 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2460 = frontier_phi_38_33_ladder;
        }
        float _2462 = isnan(_2165) ? _1993 : (isnan(_1993) ? _2165 : min(_1993, _2165));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1959) + _1948;
        float _2468 = (_2463 * _1962) + _1952;
        float _2469 = (_2463 * _1965) + _1956;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2470;
        float _2474 = _2470 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 > _2474) || ((_2468 < _2472) || ((_2467 < _2472) || (_2467 > _2474))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2469, cbModelParam._m0[9u].z, fma(_2468, cbModelParam._m0[9u].y, _2467 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2469, cbModelParam._m0[10u].z, fma(_2468, cbModelParam._m0[10u].y, _2467 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2469, cbModelParam._m0[11u].z, fma(_2468, cbModelParam._m0[11u].y, _2467 * cbModelParam._m0[11u].x))), _1900);
            frontier_phi_16_38_ladder = _2614.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2614.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2614.x * cbModelParam._m0[1u].y;
        }
        _1981 = frontier_phi_16_38_ladder_2;
        _1983 = frontier_phi_16_38_ladder_1;
        _1985 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1058, _1059, _1060), _1900);
        _1981 = _1969.x * cbModelParam._m0[1u].y;
        _1983 = _1969.y * cbModelParam._m0[1u].y;
        _1985 = _1969.z * cbModelParam._m0[1u].y;
    }
    float _1989 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _876);
    float _1990 = isnan(_1989) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1989 : min(cbModelParam._m0[25u].w, _1989));
    float _2080;
    float _2082;
    float _2084;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2044 = fma(_1122, cbModelParam._m0[21u].z, fma(_1118, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1114)) + cbModelParam._m0[21u].w;
        float _2048 = fma(_1122, cbModelParam._m0[22u].z, fma(_1118, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1114)) + cbModelParam._m0[22u].w;
        float _2052 = fma(_1122, cbModelParam._m0[23u].z, fma(_1118, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1114)) + cbModelParam._m0[23u].w;
        float _2055 = fma(_1060, cbModelParam._m0[21u].z, fma(_1059, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1058));
        float _2058 = fma(_1060, cbModelParam._m0[22u].z, fma(_1059, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1058));
        float _2061 = fma(_1060, cbModelParam._m0[23u].z, fma(_1059, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1058));
        float _2170;
        if (_2055 > 0.0)
        {
            _2170 = abs((1.0 - _2044) / _2055);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2044 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2170 = frontier_phi_28_24_ladder;
        }
        float _2487;
        if (_2058 > 0.0)
        {
            _2487 = abs((1.0 - _2048) / _2058);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2048 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2487 = frontier_phi_40_35_ladder;
        }
        float _2825;
        if (_2061 > 0.0)
        {
            _2825 = abs((1.0 - _2052) / _2061);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2052 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2825 = frontier_phi_50_47_ladder;
        }
        float _2827 = isnan(_2487) ? _2170 : (isnan(_2170) ? _2487 : min(_2170, _2487));
        float _2828 = isnan(_2825) ? _2827 : (isnan(_2827) ? _2825 : min(_2827, _2825));
        float _2832 = (_2828 * _2055) + _2044;
        float _2833 = (_2828 * _2058) + _2048;
        float _2834 = (_2828 * _2061) + _2052;
        float _2835 = _2828 * 9.9999997473787516355514526367188e-05;
        float _2836 = (-1.0) - _2835;
        float _2838 = _2835 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2834 > _2838) || ((_2834 < _2836) || ((_2833 > _2838) || ((_2833 < _2836) || ((_2832 < _2836) || (_2832 > _2838))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2834, cbModelParam._m0[17u].z, fma(_2833, cbModelParam._m0[17u].y, _2832 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2834, cbModelParam._m0[18u].z, fma(_2833, cbModelParam._m0[18u].y, _2832 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2834, cbModelParam._m0[19u].z, fma(_2833, cbModelParam._m0[19u].y, _2832 * cbModelParam._m0[19u].x))), _1990);
            frontier_phi_25_50_ladder = _2956.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2956.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2956.x * cbModelParam._m0[1u].z;
        }
        _2080 = frontier_phi_25_50_ladder_2;
        _2082 = frontier_phi_25_50_ladder_1;
        _2084 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2064 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1058, _1059, _1060), _1990);
        _2080 = _2064.x * cbModelParam._m0[1u].z;
        _2082 = _2064.y * cbModelParam._m0[1u].z;
        _2084 = _2064.z * cbModelParam._m0[1u].z;
    }
    float _2097 = (((_1085 * _1034) + _1086) * _1050) * ((cbModelParam._m0[1u].w * (_2080 - _1981)) + _1981);
    float _2099 = (((_1085 * _1036) + _1086) * _1050) * ((cbModelParam._m0[1u].w * (_2082 - _1983)) + _1983);
    float _2101 = (((_1085 * _1037) + _1086) * _1050) * ((cbModelParam._m0[1u].w * (_2084 - _1985)) + _1985);
    float _2104 = fma(_2101, cbSceneParam._m0[89u].z, fma(_2099, cbSceneParam._m0[89u].y, _2097 * cbSceneParam._m0[89u].x));
    float _2107 = fma(_2101, cbSceneParam._m0[90u].z, fma(_2099, cbSceneParam._m0[90u].y, _2097 * cbSceneParam._m0[90u].x));
    float _2110 = fma(_2101, cbSceneParam._m0[91u].z, fma(_2099, cbSceneParam._m0[91u].y, _2097 * cbSceneParam._m0[91u].x));
    float _2144 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2148 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2152 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2156 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2157 = _2144 / _2156;
    float _2158 = _2148 / _2156;
    float _2159 = _2152 / _2156;
    float _2306;
    float _2307;
    float _2308;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2186 = ((uint(_2159 > cbSceneParam._m0[59u].y) + uint(_2159 > cbSceneParam._m0[59u].x)) + uint(_2159 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2187 = _2186 + 43u;
        uint _2195 = _2186 + 44u;
        uint _2203 = _2186 + 45u;
        uint _2211 = _2186 + 46u;
        float _2222 = fma(_2156, cbSceneParam._m0[_2187].w, fma(_2152, cbSceneParam._m0[_2187].z, fma(_2148, cbSceneParam._m0[_2187].y, _2144 * cbSceneParam._m0[_2187].x)));
        float _2226 = fma(_2156, cbSceneParam._m0[_2195].w, fma(_2152, cbSceneParam._m0[_2195].z, fma(_2148, cbSceneParam._m0[_2195].y, _2144 * cbSceneParam._m0[_2195].x)));
        float _2234 = fma(_2156, cbSceneParam._m0[_2211].w, fma(_2152, cbSceneParam._m0[_2211].z, fma(_2148, cbSceneParam._m0[_2211].y, _2144 * cbSceneParam._m0[_2211].x)));
        float _2239 = cbSceneParam._m0[33u].z * _2234;
        float _2241 = cbSceneParam._m0[33u].w * _2234;
        float _2244 = fma(_2156, cbSceneParam._m0[_2203].w, fma(_2152, cbSceneParam._m0[_2203].z, fma(_2148, cbSceneParam._m0[_2203].y, _2144 * cbSceneParam._m0[_2203].x))) / _2234;
        float _2292 = (cbSceneParam._m0[33u].x - sqrt(((_2158 * _2158) + (_2157 * _2157)) + (_2159 * _2159))) * cbSceneParam._m0[33u].y;
        float _4727 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2299 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2239 + _2222) / _2234, (_2241 + _2226) / _2234), _2244), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2241 + _2222) / _2234, (_2226 - _2239) / _2234), _2244), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2222 - _2239) / _2234, (_2226 - _2241) / _2234), _2244), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2222 - _2241) / _2234, (_2239 + _2226) / _2234), _2244), 0.0)).x), vec4(0.25)));
        _2306 = 1.0 - (_2299 * cbSceneParam._m0[34u].x);
        _2307 = 1.0 - (_2299 * cbSceneParam._m0[34u].y);
        _2308 = 1.0 - (_2299 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2306 = 1.0;
        _2307 = 1.0;
        _2308 = 1.0;
    }
    float _2372;
    float _2374;
    float _2376;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2360 = fma(_2156, cbSceneParam._m0[63u].w, fma(_2152, cbSceneParam._m0[63u].z, fma(_2148, cbSceneParam._m0[63u].y, _2144 * cbSceneParam._m0[63u].x)));
        float _2361 = fma(_2156, cbSceneParam._m0[60u].w, fma(_2152, cbSceneParam._m0[60u].z, fma(_2148, cbSceneParam._m0[60u].y, _2144 * cbSceneParam._m0[60u].x))) / _2360;
        float _2362 = fma(_2156, cbSceneParam._m0[61u].w, fma(_2152, cbSceneParam._m0[61u].z, fma(_2148, cbSceneParam._m0[61u].y, _2144 * cbSceneParam._m0[61u].x))) / _2360;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2361 >= cbSceneParam._m0[64u].x) && (_2362 >= cbSceneParam._m0[64u].y)) && (_2361 <= cbSceneParam._m0[64u].z)) && (_2362 <= cbSceneParam._m0[64u].w))
        {
            float _2500 = fma(_2156, cbSceneParam._m0[62u].w, fma(_2152, cbSceneParam._m0[62u].z, fma(_2148, cbSceneParam._m0[62u].y, _2144 * cbSceneParam._m0[62u].x))) / _2360;
            float _2504 = isnan(cbSceneParam._m0[41u].w) ? _2500 : (isnan(_2500) ? cbSceneParam._m0[41u].w : max(_2500, cbSceneParam._m0[41u].w));
            float _2547 = (cbSceneParam._m0[33u].x - sqrt(((_2158 * _2158) + (_2157 * _2157)) + (_2159 * _2159))) * cbSceneParam._m0[33u].y;
            float _4743 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
            float _2554 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2361, cbSceneParam._m0[33u].w + _2362), _2504), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2361, _2362 - cbSceneParam._m0[33u].z), _2504), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2361 - cbSceneParam._m0[33u].z, _2362 - cbSceneParam._m0[33u].w), _2504), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2361 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2362), _2504), 0.0)).x), vec4(0.25)));
            float _2558 = 1.0 - (_2554 * cbSceneParam._m0[34u].x);
            float _2559 = 1.0 - (_2554 * cbSceneParam._m0[34u].y);
            float _2560 = 1.0 - (_2554 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2560) ? _2308 : (isnan(_2308) ? _2560 : min(_2308, _2560));
            frontier_phi_37_36_ladder_1 = isnan(_2559) ? _2307 : (isnan(_2307) ? _2559 : min(_2307, _2559));
            frontier_phi_37_36_ladder_2 = isnan(_2558) ? _2306 : (isnan(_2306) ? _2558 : min(_2306, _2558));
        }
        else
        {
            frontier_phi_37_36_ladder = _2308;
            frontier_phi_37_36_ladder_1 = _2307;
            frontier_phi_37_36_ladder_2 = _2306;
        }
        _2372 = frontier_phi_37_36_ladder_2;
        _2374 = frontier_phi_37_36_ladder_1;
        _2376 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2372 = _2306;
        _2374 = _2307;
        _2376 = _2308;
    }
    uvec4 _2381 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2383 = _2381.x * 14u;
    uint _2384 = _2383 + 13u;
    float _2391 = _1050 + (-1.0);
    float _2396 = (cbLight._m0[_2384].x * _2391) + 1.0;
    float _2397 = (cbLight._m0[_2384].y * _2391) + 1.0;
    float _2398 = (cbLight._m0[_2384].z * _2391) + 1.0;
    float _2399 = (cbLight._m0[_2384].w * _2391) + 1.0;
    uint _2400 = _2383 + 5u;
    float _2406 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
    uint _2410 = _2383 + 4u;
    float _2419 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
    uint _2423 = _2383 | 1u;
    float _2434 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_873, _874, _875));
    float _2437 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_873, _874, _875));
    float _4779 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _4790 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2442 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * 0.3183098733425140380859375;
    float _2444 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * 0.3183098733425140380859375;
    float _2451 = ((cbLight._m0[_2400].x * _2406) * _2444) + (((cbLight._m0[_2410].x * _2372) * _2419) * _2442);
    float _2452 = ((_2406 * cbLight._m0[_2400].y) * _2444) + (((cbLight._m0[_2410].y * _2374) * _2419) * _2442);
    float _2453 = ((_2406 * cbLight._m0[_2400].z) * _2444) + (((cbLight._m0[_2410].z * _2376) * _2419) * _2442);
    uvec4 _2457 = floatBitsToUint(cbLight._m0[_2383 + 12u]);
    bool _2459 = _2457.x == 0u;
    float _2561;
    float _2563;
    float _2565;
    if (_2459)
    {
        _2561 = _2451;
        _2563 = _2452;
        _2565 = _2453;
    }
    else
    {
        uint _2569 = _2383 + 6u;
        float _2585 = (dot(vec3(cbLight._m0[_2383 + 2u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2586 = _2585 * _2585;
        float _4801 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2587 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2588 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2561 = (((cbLight._m0[_2569].x * 0.3183098733425140380859375) * _2587) * _2588) + _2451;
        _2563 = (((cbLight._m0[_2569].y * 0.3183098733425140380859375) * _2587) * _2588) + _2452;
        _2565 = (((cbLight._m0[_2569].z * 0.3183098733425140380859375) * _2587) * _2588) + _2453;
    }
    bool _2568 = _2457.y == 0u;
    float _2623;
    float _2625;
    float _2627;
    if (_2568)
    {
        _2623 = _2561;
        _2625 = _2563;
        _2627 = _2565;
    }
    else
    {
        uint _2796 = _2383 + 7u;
        float _2812 = (dot(vec3(cbLight._m0[_2383 + 3u].xyz), vec3(_873, _874, _875)) * 0.5) + 0.5;
        float _2813 = _2812 * _2812;
        float _4817 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2814 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2815 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2623 = (((cbLight._m0[_2796].x * 0.3183098733425140380859375) * _2814) * _2815) + _2561;
        _2625 = (((cbLight._m0[_2796].y * 0.3183098733425140380859375) * _2814) * _2815) + _2563;
        _2627 = (((cbLight._m0[_2796].z * 0.3183098733425140380859375) * _2814) * _2815) + _2565;
    }
    uint _2630 = _2383 + 8u;
    float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _876) * 0.949999988079071044921875);
    float _2644 = _2643 * _2643;
    float _2645 = cbLight._m0[_2383].x + _952;
    float _2646 = cbLight._m0[_2383].y + _953;
    float _2647 = cbLight._m0[_2383].z + _954;
    float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
    float _2652 = _2651 * _2645;
    float _2653 = _2651 * _2646;
    float _2654 = _2651 * _2647;
    float _2655 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2383].xyz));
    float _4833 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2658 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
    float _4844 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _2659 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
    float _2660 = dot(vec3(_873, _874, _875), vec3(_2652, _2653, _2654));
    float _4855 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
    float _2664 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2652, _2653, _2654));
    float _4866 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2668 = _2644 * _2644;
    float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
    float _2680 = exp2(log2(1.0 - (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) * 5.0);
    float _2681 = 0.959999978542327880859375 - _1031;
    float _2683 = 0.959999978542327880859375 - _1032;
    float _2684 = 0.959999978542327880859375 - _1033;
    float _2691 = 1.0 - _2644;
    float _2702 = (0.5 / (((_2659 * ((_2658 * _2691) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2659 * _2691) + _2644) * _2658))) * _2658;
    float _4877 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2704 = (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
    uint _2718 = _2383 + 9u;
    float _2729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _876) * 0.949999988079071044921875);
    float _2730 = _2729 * _2729;
    float _2731 = cbLight._m0[_2423].x + _952;
    float _2732 = cbLight._m0[_2423].y + _953;
    float _2733 = cbLight._m0[_2423].z + _954;
    float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
    float _2738 = _2737 * _2731;
    float _2739 = _2737 * _2732;
    float _2740 = _2737 * _2733;
    float _2741 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2423].xyz));
    float _4888 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2744 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _2745 = dot(vec3(_873, _874, _875), vec3(_2738, _2739, _2740));
    float _4899 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2748 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2749 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2738, _2739, _2740));
    float _4910 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2753 = _2730 * _2730;
    float _2757 = ((_2748 * _2748) * (_2753 + (-1.0))) + 1.0;
    float _2764 = exp2(log2(1.0 - (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) * 5.0);
    float _2771 = 1.0 - _2730;
    float _2781 = (0.5 / (((_2659 * ((_2744 * _2771) + _2730)) + 9.9999999392252902907785028219223e-09) + (((_2659 * _2771) + _2730) * _2744))) * _2744;
    float _4921 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
    float _2783 = (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2753 / ((_2757 * _2757) * 3.141590118408203125));
    float _2793 = (((((_2764 * _2681) + _1034) * cbLight._m0[_2718].x) * _2783) * _2406) + ((((cbLight._m0[_2630].x * _2372) * ((_2680 * _2681) + _1034)) * _2704) * _2419);
    float _2794 = (((((_2764 * _2683) + _1036) * cbLight._m0[_2718].y) * _2783) * _2406) + ((((cbLight._m0[_2630].y * _2374) * ((_2680 * _2683) + _1036)) * _2704) * _2419);
    float _2795 = (((((_2764 * _2684) + _1037) * cbLight._m0[_2718].z) * _2783) * _2406) + ((((cbLight._m0[_2630].z * _2376) * ((_2680 * _2684) + _1037)) * _2704) * _2419);
    float _2851;
    float _2853;
    float _2855;
    if (_2459)
    {
        _2851 = _2793;
        _2853 = _2794;
        _2855 = _2795;
    }
    else
    {
        uint _2857 = _2383 + 2u;
        uint _2861 = _2383 + 10u;
        float _2875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2857].w)) * _876) * 0.949999988079071044921875);
        float _2876 = _2875 * _2875;
        float _2877 = cbLight._m0[_2857].x + _952;
        float _2878 = cbLight._m0[_2857].y + _953;
        float _2879 = cbLight._m0[_2857].z + _954;
        float _2883 = inversesqrt(dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879)));
        float _2884 = _2883 * _2877;
        float _2885 = _2883 * _2878;
        float _2886 = _2883 * _2879;
        float _2887 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2857].xyz));
        float _4932 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2890 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
        float _2891 = dot(vec3(_873, _874, _875), vec3(_2884, _2885, _2886));
        float _4943 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2894 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
        float _2895 = dot(vec3(cbLight._m0[_2857].xyz), vec3(_2884, _2885, _2886));
        float _4954 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2899 = _2876 * _2876;
        float _2903 = ((_2894 * _2894) * (_2899 + (-1.0))) + 1.0;
        float _2910 = exp2(log2(1.0 - (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) * 5.0);
        float _2917 = 1.0 - _2876;
        float _2927 = (0.5 / (((_2659 * ((_2890 * _2917) + _2876)) + 9.9999999392252902907785028219223e-09) + (((_2659 * _2917) + _2876) * _2890))) * _2890;
        float _4965 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2929 = (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_2899 / ((_2903 * _2903) * 3.141590118408203125));
        float _2930 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2851 = (((((_2910 * _2681) + _1034) * cbLight._m0[_2861].x) * _2929) * _2930) + _2793;
        _2853 = (((((_2910 * _2683) + _1036) * cbLight._m0[_2861].y) * _2929) * _2930) + _2794;
        _2855 = (((((_2910 * _2684) + _1037) * cbLight._m0[_2861].z) * _2929) * _2930) + _2795;
    }
    float _2961;
    float _2963;
    float _2965;
    if (_2568)
    {
        _2961 = _2851;
        _2963 = _2853;
        _2965 = _2855;
    }
    else
    {
        uint _2972 = _2383 + 3u;
        uint _2976 = _2383 + 11u;
        float _2990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2972].w)) * _876) * 0.949999988079071044921875);
        float _2991 = _2990 * _2990;
        float _2992 = cbLight._m0[_2972].x + _952;
        float _2993 = cbLight._m0[_2972].y + _953;
        float _2994 = cbLight._m0[_2972].z + _954;
        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
        float _2999 = _2998 * _2992;
        float _3000 = _2998 * _2993;
        float _3001 = _2998 * _2994;
        float _3002 = dot(vec3(_873, _874, _875), vec3(cbLight._m0[_2972].xyz));
        float _4981 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        float _3005 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
        float _3006 = dot(vec3(_873, _874, _875), vec3(_2999, _3000, _3001));
        float _4992 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        float _3009 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
        float _3010 = dot(vec3(cbLight._m0[_2972].xyz), vec3(_2999, _3000, _3001));
        float _5003 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3014 = _2991 * _2991;
        float _3018 = ((_3009 * _3009) * (_3014 + (-1.0))) + 1.0;
        float _3025 = exp2(log2(1.0 - (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0)))) * 5.0);
        float _3032 = 1.0 - _2991;
        float _3042 = (0.5 / (((_2659 * ((_3005 * _3032) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_2659 * _3032) + _2991) * _3005))) * _3005;
        float _5014 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        float _3044 = (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_3014 / ((_3018 * _3018) * 3.141590118408203125));
        float _3045 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2961 = (((((_3025 * _2681) + _1034) * cbLight._m0[_2976].x) * _3044) * _3045) + _2851;
        _2963 = (((((_3025 * _2683) + _1036) * cbLight._m0[_2976].y) * _3044) * _3045) + _2853;
        _2965 = (((((_3025 * _2684) + _1037) * cbLight._m0[_2976].z) * _3044) * _3045) + _2855;
    }
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    if (_2381.y == 0u)
    {
        uvec4 _3066 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3067 = _3066.x;
        uint _3078 = uint((float(_3066.y) * floor(float(uint(cbSceneParam._m0[85u].y * _973) / _3067))) + floor(float(uint(cbSceneParam._m0[85u].x * _972) / _3067)));
        float _3088 = (log2(_2159 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3089 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
        uint _3092 = uint(isnan(14.0) ? _3089 : (isnan(_3089) ? 14.0 : min(_3089, 14.0)));
        uvec4 _3097 = texelFetch(g_lightClusterGridBuffer, int(((_3092 << 2u) + (_3078 << 6u)) >> 2u));
        uint _3098 = _3097.x;
        uint _3099 = _3066.z;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        if (((((1u << ((_3099 >> 4u) & 15u)) + 4294967295u) & _3098) == 0u) || ((_3099 & 240u) == 0u))
        {
            _3178 = 0.0;
            _3180 = 0.0;
            _3182 = 0.0;
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
        }
        else
        {
            float _3179;
            float _3181;
            float _3183;
            float _3185;
            float _3187;
            float _3189;
            float _3331 = 0.0;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            float _3335 = 0.0;
            float _3336 = 0.0;
            uint _3337 = 0u;
            uint _3346;
            bool _3347;
            for (;;)
            {
                _3346 = texelFetch(g_lightClassification, int((((_3092 << 5u) + (_3078 << 9u)) + (_3337 << 2u)) >> 2u)).x;
                _3347 = _3346 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3347)
                {
                    frontier_phi_71_pred = _3336;
                    frontier_phi_71_pred_1 = _3335;
                    frontier_phi_71_pred_2 = _3334;
                    frontier_phi_71_pred_3 = _3333;
                    frontier_phi_71_pred_4 = _3332;
                    frontier_phi_71_pred_5 = _3331;
                }
                else
                {
                    float _3476;
                    float _3477;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    uint _3482;
                    _3476 = _3331;
                    _3477 = _3332;
                    _3478 = _3333;
                    _3479 = _3334;
                    _3480 = _3335;
                    _3481 = _3336;
                    _3482 = _3346;
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    for (;;)
                    {
                        uint _3486 = uint(findLSB(_3482)) + (_3337 << 5u);
                        uint _3483 = (_3482 + 4294967295u) & _3482;
                        uint _3488 = _3486 * 48u;
                        vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3488)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 3u)).x));
                        uint _3508 = (_3486 * 48u) + 4u;
                        vec4 _3521 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3508)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 3u)).x));
                        uint _3527 = (_3486 * 48u) + 8u;
                        vec3 _3538 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3527)).x, texelFetch(g_PointLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3527 + 2u)).x));
                        float _3542 = _3502.x - _2157;
                        float _3543 = _3502.y - _2158;
                        float _3544 = _3502.z - _2159;
                        float _3545 = dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544));
                        float _3548 = inversesqrt(_3545);
                        float _3549 = _3548 * _3542;
                        float _3550 = _3548 * _3543;
                        float _3551 = _3548 * _3544;
                        float _3552 = dot(vec3(_991, _994, _997), vec3(_3549, _3550, _3551));
                        float _3557 = 1.0 - (_3545 * _3502.w);
                        float _5040 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3558 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                        float _3559 = sqrt(_3545) * _3521.w;
                        float _3562 = 1.39999997615814208984375 / (_3559 + 1.39999997615814208984375);
                        float _3563 = _3562 * _3562;
                        float _3566 = ((1.0 - _3563) * _3552) + _3563;
                        float _3569 = _3559 * _3559;
                        float _3573 = ((isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0))) * _3558) / ((_3569 * 0.699999988079071044921875) + 1.0);
                        float _3577 = (-0.0) - _2157;
                        float _3578 = (-0.0) - _2158;
                        float _3579 = (-0.0) - _2159;
                        float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                        float _3584 = _3583 * _3577;
                        float _3585 = _3583 * _3578;
                        float _3586 = _3583 * _3579;
                        float _3593 = exp2(log2(1.0 / ((_3569 * 3.5) + 5.0)) * 0.25);
                        float _3594 = 1.0 - _1066;
                        float _3601 = sqrt(1.0 - ((1.0 - (_3594 * _3594)) * (1.0 - (_3593 * _3593))));
                        float _3602 = _3601 * _3601;
                        float _3603 = _3602 * _3602;
                        float _3604 = _3584 + _3549;
                        float _3605 = _3585 + _3550;
                        float _3606 = _3586 + _3551;
                        float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                        float _3614 = dot(vec3(_991, _994, _997), vec3(_3584, _3585, _3586));
                        float _5056 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                        float _3617 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                        float _3618 = dot(vec3(_991, _994, _997), vec3(_3610 * _3604, _3610 * _3605, _3610 * _3606));
                        float _5067 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3621 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                        float _3625 = ((_3621 * _3621) * (_3603 + (-1.0))) + 1.0;
                        float _3626 = _3562 * _3602;
                        float _3627 = _3626 * _3626;
                        float _3630 = ((1.0 - _3627) * _3552) + _3627;
                        float _5078 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                        float _3631 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                        float _3632 = 1.0 - _3602;
                        float _3642 = (0.5 / (((_3631 * ((_3617 * _3632) + _3602)) + 9.9999999392252902907785028219223e-09) + (((_3631 * _3632) + _3602) * _3617))) * _3631;
                        float _5089 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                        float _3653 = (((_3603 * 3.1415927410125732421875) * (isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0)))) / ((_3625 * _3625) * ((_3569 * 2.1991131305694580078125) + 3.141590118408203125))) * _3558;
                        _3406 = (_3573 * _3521.x) + _3479;
                        _3407 = (_3573 * _3521.y) + _3480;
                        _3408 = (_3573 * _3521.z) + _3481;
                        _3403 = (_3653 * _3538.x) + _3476;
                        _3404 = (_3653 * _3538.y) + _3477;
                        _3405 = (_3653 * _3538.z) + _3478;
                        if (_3483 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3476 = _3403;
                            _3477 = _3404;
                            _3478 = _3405;
                            _3479 = _3406;
                            _3480 = _3407;
                            _3481 = _3408;
                            _3482 = _3483;
                        }
                    }
                    frontier_phi_71_pred = _3408;
                    frontier_phi_71_pred_1 = _3407;
                    frontier_phi_71_pred_2 = _3406;
                    frontier_phi_71_pred_3 = _3405;
                    frontier_phi_71_pred_4 = _3404;
                    frontier_phi_71_pred_5 = _3403;
                }
                _3189 = frontier_phi_71_pred;
                _3187 = frontier_phi_71_pred_1;
                _3185 = frontier_phi_71_pred_2;
                _3183 = frontier_phi_71_pred_3;
                _3181 = frontier_phi_71_pred_4;
                _3179 = frontier_phi_71_pred_5;
                uint _3338 = _3337 + 1u;
                if (_3338 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3331 = _3179;
                    _3332 = _3181;
                    _3333 = _3183;
                    _3334 = _3185;
                    _3335 = _3187;
                    _3336 = _3189;
                    _3337 = _3338;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3178 = _3179;
            _3180 = _3181;
            _3182 = _3183;
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
        }
        uvec4 _3192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3193 = _3192.z;
        uint _3195 = (_3193 >> 8u) & 15u;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        if (((4294967295u << _3195) & _3098) == 0u)
        {
            _3299 = _3178;
            _3301 = _3180;
            _3303 = _3182;
            _3305 = _3184;
            _3307 = _3186;
            _3309 = _3188;
        }
        else
        {
            float _3324 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
            float _3325 = _3324 * _2157;
            float _3326 = _3324 * _2158;
            float _3327 = _3324 * _2159;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3195 < ((_3193 >> 12u) & 15u))
            {
                float _3300;
                float _3302;
                float _3304;
                float _3306;
                float _3308;
                float _3310;
                float _3459 = _3178;
                float _3460 = _3180;
                float _3461 = _3182;
                float _3462 = _3184;
                float _3463 = _3186;
                float _3464 = _3188;
                uint _3465 = _3195;
                uint _3474;
                bool _3475;
                for (;;)
                {
                    _3474 = texelFetch(g_lightClassification, int((((_3092 << 5u) + (_3078 << 9u)) + (_3465 << 2u)) >> 2u)).x;
                    _3475 = _3474 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3475)
                    {
                        frontier_phi_82_pred = _3464;
                        frontier_phi_82_pred_1 = _3463;
                        frontier_phi_82_pred_2 = _3462;
                        frontier_phi_82_pred_3 = _3461;
                        frontier_phi_82_pred_4 = _3460;
                        frontier_phi_82_pred_5 = _3459;
                    }
                    else
                    {
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3960;
                        float _3961;
                        float _3962;
                        float _3963;
                        float _3964;
                        float _3965;
                        float _3680 = _3459;
                        float _3681 = _3460;
                        float _3682 = _3461;
                        float _3683 = _3462;
                        float _3684 = _3463;
                        float _3685 = _3464;
                        uint _3686 = _3474;
                        uint _3687;
                        vec4 _3712;
                        float _3713;
                        vec4 _3728;
                        vec3 _3740;
                        vec4 _3755;
                        vec4 _3770;
                        float _3816;
                        bool _3817;
                        for (;;)
                        {
                            uint _3697 = ((_3465 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3686));
                            _3687 = (_3686 + 4294967295u) & _3686;
                            uint _3699 = _3697 * 40u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            _3713 = _3712.w;
                            uint _3715 = (_3697 * 40u) + 4u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3730 = (_3697 * 40u) + 8u;
                            _3740 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x));
                            uint _3742 = (_3697 * 40u) + 16u;
                            _3755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 3u)).x));
                            uint _3757 = (_3697 * 40u) + 20u;
                            _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            uint _3772 = (_3697 * 40u) + 24u;
                            vec4 _3785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 3u)).x));
                            uint _3791 = (_3697 * 40u) + 28u;
                            vec4 _3804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 3u)).x));
                            _3816 = fma(_2159, _3804.z, fma(_2158, _3804.y, _3804.x * _2157)) + _3804.w;
                            _3817 = !((fma(_2159, _3785.z, fma(_2158, _3785.y, _3785.x * _2157)) + _3785.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3817)
                            {
                                float _3844 = _3712.x - _2157;
                                float _3845 = _3712.y - _2158;
                                float _3846 = _3712.z - _2159;
                                float _3847 = dot(vec3(_3844, _3845, _3846), vec3(_3844, _3845, _3846));
                                float _3850 = inversesqrt(_3847);
                                float _3851 = _3850 * _3844;
                                float _3852 = _3850 * _3845;
                                float _3853 = _3850 * _3846;
                                float _3857 = 1.0 - (_3847 / (_3713 * _3713));
                                float _5100 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3858 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                                float _3862 = sqrt(_3847) * _3728.w;
                                float _3864 = 1.39999997615814208984375 / (_3862 + 1.39999997615814208984375);
                                float _3865 = _3864 * _3864;
                                float _3868 = ((1.0 - _3865) * dot(vec3(_3851, _3852, _3853), vec3(_991, _994, _997))) + _3865;
                                float _3871 = _3862 * _3862;
                                float _3875 = (fma(_2159, _3755.z, fma(_2158, _3755.y, _3755.x * _2157)) + _3755.w) / _3816;
                                float _3876 = (fma(_2159, _3770.z, fma(_2158, _3770.y, _3770.x * _2157)) + _3770.w) / _3816;
                                float _3880 = 1.0 - dot(vec2(_3875, _3876), vec2(_3875, _3876));
                                float _5116 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3881 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                                float _3882 = _3881 * (((isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0))) * _3858) / ((_3871 * 0.699999988079071044921875) + 1.0));
                                float _3894 = exp2(log2(1.0 / ((_3871 * 3.5) + 5.0)) * 0.25);
                                float _3895 = 1.0 - _1066;
                                float _3902 = sqrt(1.0 - ((1.0 - (_3895 * _3895)) * (1.0 - (_3894 * _3894))));
                                float _3903 = _3902 * _3902;
                                float _3904 = _3903 * _3903;
                                float _3905 = _3851 - _3325;
                                float _3906 = _3852 - _3326;
                                float _3907 = _3853 - _3327;
                                float _3911 = inversesqrt(dot(vec3(_3905, _3906, _3907), vec3(_3905, _3906, _3907)));
                                float _3915 = dot(vec3(_991, _994, _997), vec3((-0.0) - _3325, (-0.0) - _3326, (-0.0) - _3327));
                                float _5127 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3918 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                                float _3919 = dot(vec3(_991, _994, _997), vec3(_3911 * _3905, _3911 * _3906, _3911 * _3907));
                                float _5138 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3922 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                                float _3926 = ((_3922 * _3922) * (_3904 + (-1.0))) + 1.0;
                                float _3927 = _3864 * _3903;
                                float _3928 = _3927 * _3927;
                                float _3934 = ((1.0 - _3928) * dot(vec3(_991, _994, _997), vec3(_3851, _3852, _3853))) + _3928;
                                float _5149 = isnan(0.0) ? _3934 : (isnan(_3934) ? 0.0 : max(_3934, 0.0));
                                float _3935 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
                                float _3936 = 1.0 - _3903;
                                float _3946 = (0.5 / (((_3935 * ((_3918 * _3936) + _3903)) + 9.9999999392252902907785028219223e-09) + (((_3935 * _3936) + _3903) * _3918))) * _3935;
                                float _5160 = isnan(0.0) ? _3946 : (isnan(_3946) ? 0.0 : max(_3946, 0.0));
                                float _3956 = (_3881 * _3858) * (((_3904 * 3.1415927410125732421875) * (isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0)))) / ((_3926 * _3926) * ((_3871 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3882 * _3728.z;
                                frontier_phi_88_pred_1 = _3882 * _3728.y;
                                frontier_phi_88_pred_2 = _3882 * _3728.x;
                                frontier_phi_88_pred_3 = _3956 * _3740.z;
                                frontier_phi_88_pred_4 = _3956 * _3740.y;
                                frontier_phi_88_pred_5 = _3956 * _3740.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3965 = frontier_phi_88_pred;
                            _3964 = frontier_phi_88_pred_1;
                            _3963 = frontier_phi_88_pred_2;
                            _3962 = frontier_phi_88_pred_3;
                            _3961 = frontier_phi_88_pred_4;
                            _3960 = frontier_phi_88_pred_5;
                            _3670 = _3963 + _3683;
                            _3671 = _3964 + _3684;
                            _3672 = _3965 + _3685;
                            _3667 = _3960 + _3680;
                            _3668 = _3961 + _3681;
                            _3669 = _3962 + _3682;
                            if (_3687 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3680 = _3667;
                                _3681 = _3668;
                                _3682 = _3669;
                                _3683 = _3670;
                                _3684 = _3671;
                                _3685 = _3672;
                                _3686 = _3687;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3672;
                        frontier_phi_82_pred_1 = _3671;
                        frontier_phi_82_pred_2 = _3670;
                        frontier_phi_82_pred_3 = _3669;
                        frontier_phi_82_pred_4 = _3668;
                        frontier_phi_82_pred_5 = _3667;
                    }
                    _3310 = frontier_phi_82_pred;
                    _3308 = frontier_phi_82_pred_1;
                    _3306 = frontier_phi_82_pred_2;
                    _3304 = frontier_phi_82_pred_3;
                    _3302 = frontier_phi_82_pred_4;
                    _3300 = frontier_phi_82_pred_5;
                    uint _3466 = _3465 + 1u;
                    if (_3466 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3459 = _3300;
                        _3460 = _3302;
                        _3461 = _3304;
                        _3462 = _3306;
                        _3463 = _3308;
                        _3464 = _3310;
                        _3465 = _3466;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3306;
                frontier_phi_63_64_ladder_1 = _3310;
                frontier_phi_63_64_ladder_2 = _3308;
                frontier_phi_63_64_ladder_3 = _3304;
                frontier_phi_63_64_ladder_4 = _3302;
                frontier_phi_63_64_ladder_5 = _3300;
            }
            else
            {
                frontier_phi_63_64_ladder = _3184;
                frontier_phi_63_64_ladder_1 = _3188;
                frontier_phi_63_64_ladder_2 = _3186;
                frontier_phi_63_64_ladder_3 = _3182;
                frontier_phi_63_64_ladder_4 = _3180;
                frontier_phi_63_64_ladder_5 = _3178;
            }
            _3299 = frontier_phi_63_64_ladder_5;
            _3301 = frontier_phi_63_64_ladder_4;
            _3303 = frontier_phi_63_64_ladder_3;
            _3305 = frontier_phi_63_64_ladder;
            _3307 = frontier_phi_63_64_ladder_2;
            _3309 = frontier_phi_63_64_ladder_1;
        }
        float _3314 = isnan(1.0) ? _1050 : (isnan(_1050) ? 1.0 : min(_1050, 1.0));
        _3111 = (_3314 * _3305) + _2623;
        _3113 = (_3314 * _3307) + _2625;
        _3115 = (_3314 * _3309) + _2627;
        _3117 = ((_3299 * _1034) * _3314) + _2961;
        _3119 = ((_3301 * _1036) * _3314) + _2963;
        _3121 = ((_3303 * _1037) * _3314) + _2965;
    }
    else
    {
        _3111 = _2623;
        _3113 = _2625;
        _3115 = _2627;
        _3117 = _2961;
        _3119 = _2963;
        _3121 = _2965;
    }
    float _5176 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _5187 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _5198 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _3138 = ((isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0))) * (_3111 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1050))) + ((_3117 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1889)) * cbPerFrame._m0[3u].x);
    float _3139 = ((isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0))) * (_3113 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1050))) + ((_3119 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1889)) * cbPerFrame._m0[3u].x);
    float _3140 = ((isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0))) * (_3115 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1050))) + ((_3121 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1889)) * cbPerFrame._m0[3u].x);
    uint _3141 = _289 + 6u;
    float _3149 = _972 / cbSceneParam._m0[86u].x;
    float _3150 = _973 / cbSceneParam._m0[86u].y;
    vec4 _3164 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3149, _3150, (log2((isnan(cbSceneParam._m0[77u].w) ? _895 : (isnan(_895) ? cbSceneParam._m0[77u].w : min(_895, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3166 = _3164.x;
    float _3167 = _3164.y;
    float _3168 = _3164.z;
    float _3169 = _3164.w;
    float _3241;
    float _3243;
    float _3245;
    float _3247;
    if (_895 > cbSceneParam._m0[78u].w)
    {
        float _3203 = isnan(_895) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _895 : min(cbSceneParam._m0[80u].w, _895));
        float _3204 = _3203 / _895;
        float _3215 = _3204 * _945;
        float _3216 = _946 * _3204;
        float _3217 = (-0.0) - _3216;
        float _3219 = _3204 * _947;
        float _3221 = (cbSceneParam._m0[77u].w * _3217) / _3203;
        float _3222 = _3221 + cbSceneParam._m0[79u].w;
        float _3223 = cbSceneParam._m0[79u].w - _3216;
        float _3229 = sqrt(((_3215 * _3215) + (_3216 * _3216)) + (_3219 * _3219));
        float _3232 = (1.0 - (cbSceneParam._m0[77u].w / _3203)) * _3229;
        float _3237 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3239 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3416;
        if (abs((_3217 - _3221) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3416 = ((((_3222 > 0.0) ? exp2(_3237 * _3222) : (2.0 - exp2(_3239 * _3222))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3232;
        }
        else
        {
            float _3360 = 1.0 / cbSceneParam._m0[80u].x;
            float _3361 = isnan(_3223) ? _3222 : (isnan(_3222) ? _3223 : max(_3222, _3223));
            float _3362 = isnan(_3223) ? _3222 : (isnan(_3222) ? _3223 : min(_3222, _3223));
            float _3371 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : min(_3361, 0.0));
            float _3372 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : min(_3362, 0.0));
            _3416 = ((abs(_3229 / _3217) * cbSceneParam._m0[80u].y) * ((((_3371 - _3372) * 2.0) - ((exp2(_3237 * (isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0)))) - exp2(_3237 * (isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))))) * _3360)) - ((exp2(_3239 * _3371) - exp2(_3239 * _3372)) * _3360))) + (_3232 * cbSceneParam._m0[80u].z);
        }
        vec4 _3418 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3149, _3150, 1.0), 0.0);
        float _3427 = exp2((_3416 * (-1.44269502162933349609375)) * (1.0 - _3418.w));
        float _3428 = log2(_3427);
        float _3444 = log2(_3169);
        _3241 = (exp2(_3444 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3428 * cbSceneParam._m0[78u].x)) * _3418.x) / cbSceneParam._m0[78u].x)) + _3166;
        _3243 = (exp2(_3444 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3428 * cbSceneParam._m0[78u].y)) * _3418.y) / cbSceneParam._m0[78u].y)) + _3167;
        _3245 = (exp2(_3444 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3428 * cbSceneParam._m0[78u].z)) * _3418.z) / cbSceneParam._m0[78u].z)) + _3168;
        _3247 = _3427 * _3169;
    }
    else
    {
        _3241 = _3166;
        _3243 = _3167;
        _3245 = _3168;
        _3247 = _3169;
    }
    bool _3454;
    vec4 _3257;
    vec4 _3279;
    float _3281;
    float _3285;
    float _3286;
    float _3287;
    float _3288;
    bool _3298;
    for (;;)
    {
        _3257 = cbMatDynParam._m0[0u];
        float _3259 = roundEven(_3257.y);
        bool _3260 = _3259 == 3.0;
        float _3261 = log2(_3247);
        float _3268 = exp2(_3261 * cbSceneParam._m0[78u].x) * _3138;
        float _3269 = exp2(_3261 * cbSceneParam._m0[78u].y) * _3139;
        float _3270 = exp2(_3261 * cbSceneParam._m0[78u].z) * _3140;
        float _3277 = _961 + (-0.5);
        _3279 = cbMtdParam._m0[1u];
        _3281 = _3279.y * _3277;
        float _3284 = (_3259 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3285 = _3284 * (_3260 ? _3268 : (_3268 + (cbSceneParam._m0[72u].w * _3241)));
        _3286 = _3284 * (_3260 ? _3269 : (_3269 + (cbSceneParam._m0[72u].w * _3243)));
        _3287 = _3284 * (_3260 ? _3270 : (_3270 + (cbSceneParam._m0[72u].w * _3245)));
        _3288 = _3277 * 0.999000012874603271484375;
        _3298 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3298)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3288) < 0.5)
            {
                _3454 = true;
                break;
            }
        }
        uint _3395 = _1010 + uint(_3257.w);
        if ((cbInstanceData._m0[_3395].w < 1.0) && ((cbInstanceData._m0[_3395].w + _3288) < 0.5))
        {
            _3454 = true;
            break;
        }
        if ((_3281 + 1.0) < _3279.x)
        {
            _3454 = true;
            break;
        }
        _3454 = false;
        break;
    }
    float _3658;
    if (_3454)
    {
        discard_state = true;
        _3658 = 0.0;
    }
    else
    {
        _3658 = cbInstanceData._m0[_3141].w;
    }
    SV_Target.x = _3285;
    SV_Target.y = _3286;
    SV_Target.z = _3287;
    SV_Target.w = _3658;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3141].w;
    discard_exit();
}


