#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1534;
float _3937;
float _3938;
float _3939;
float _3940;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[23u].w) + _423) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3949 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _448 = (_441 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _449 = (_441 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _450 = (_441 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[23u].w) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3960 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _527 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448);
    float _530 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449);
    float _533 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450);
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _570 = _568.x;
    float _571 = _568.y;
    float _572 = _568.z;
    float _579 = ((_551.x - _570) * _441) + _570;
    float _580 = ((_551.y - _571) * _441) + _571;
    float _581 = ((_551.z - _572) * _441) + _572;
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _606 = ((_593.z - _581) * _514) + _581;
    float _609 = ((((_593.x - _579) * _514) + _579) * 2.0) + (-1.0);
    float _611 = ((((_593.y - _580) * _514) + _580) * 2.0) + (-1.0);
    float _612 = dot(vec2(_609, _611), vec2(_609, _611));
    float _3971 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _617 = sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _643 = (((_631.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _609;
    float _644 = (((_631.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _611;
    float _647 = fma(_617, _253, fma(_644, _260, _643 * _246));
    float _650 = fma(_617, _254, fma(_644, _261, _643 * _247));
    float _653 = fma(_617, _255, fma(_644, _262, _643 * _248));
    float _657 = inversesqrt(dot(vec3(_647, _650, _653), vec3(_647, _650, _653)));
    vec4 _684 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _686 = _684.x;
    float _687 = 1.0 - _686;
    float _696 = (cbMtdParam._m0[19u].x + dot(vec4(_657 * _647, _657 * _650, _657 * _653, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_686 - _687) * cbMtdParam._m0[24u].z) + _687) * cbMtdParam._m0[21u].z);
    float _3982 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _699 = (-0.0) - cbMtdParam._m0[24u].x;
    float _701 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _701 : (isnan(_701) ? 1.0 : min(_701, 1.0));
    float _709 = _697 - ((_697 * TEXCOORD_8.x) * _702);
    float _710 = _697 - ((_697 * TEXCOORD_8.y) * _702);
    float _711 = _697 - ((_697 * TEXCOORD_8.z) * _702);
    float _718 = (_709 * (cbMtdParam._m0[17u].x - _527)) + _527;
    float _719 = (_710 * (cbMtdParam._m0[17u].y - _530)) + _530;
    float _720 = (_711 * (cbMtdParam._m0[17u].z - _533)) + _533;
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _734 = _732.x;
    float _735 = 1.0 - _734;
    float _761 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_734 - _735) * cbMtdParam._m0[24u].w) + _735) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4003 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _770 = ((((cbMtdParam._m0[10u].x - _718) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _762) + _718;
    float _771 = ((((cbMtdParam._m0[10u].y - _719) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _762) + _719;
    float _772 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _720)) * _762) + _720;
    vec4 _798 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _800 = _798.x;
    float _817 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _800) * _441) + _800;
    float _834 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _817) * _514) + _817;
    float _838 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _834) * cbMtdParam._m0[19u].z) + _834;
    float _840 = _838 - (_838 * _709);
    float _842 = _840 - (_840 * _762);
    float _846 = (cbMtdParam._m0[19u].w * (_631.z - _606)) + _606;
    vec4 _860 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _867 = (_860.x * 2.0) + (-1.0);
    float _868 = (_860.y * 2.0) + (-1.0);
    float _869 = dot(vec2(_867, _868), vec2(_867, _868));
    float _4014 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _877 = ((_860.z - _846) * _709) + _846;
    float _880 = ((cbMtdParam._m0[23u].x - _877) * _762) + _877;
    vec4 _899 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _905 = (_899.x * 2.0) + (-1.0);
    float _906 = (_899.y * 2.0) + (-1.0);
    float _907 = dot(vec2(_905, _906), vec2(_905, _906));
    float _4025 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _922 = ((sqrt(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) - _617) * _711) + _617;
    float _925 = (((_867 - _643) * _709) + _643) + (cbMtdParam._m0[21u].x * _643);
    float _926 = (((_868 - _644) * _710) + _644) + (cbMtdParam._m0[21u].x * _644);
    float _937 = (((_905 - _925) + (_925 * cbMtdParam._m0[22u].z)) * _762) + _925;
    float _938 = (((_906 - _926) + (_926 * cbMtdParam._m0[22u].z)) * _762) + _926;
    float _939 = (_762 * (sqrt(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) - _922)) + _922;
    float _941 = cbMtdParam._m0[22u].x + _631.w;
    float _944 = fma(_939, _253, fma(_938, _260, _937 * _246));
    float _947 = fma(_939, _254, fma(_938, _261, _937 * _247));
    float _950 = fma(_939, _255, fma(_938, _262, _937 * _248));
    float _954 = inversesqrt(dot(vec3(_944, _947, _950), vec3(_944, _947, _950)));
    float _955 = _954 * _944;
    float _956 = _954 * _947;
    float _957 = _954 * _950;
    float _4036 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _958 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4058 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4069 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4080 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4091 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _963 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _977 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1027 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1017);
    float _1028 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1017);
    float _1029 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1017);
    float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
    float _1034 = _1027 * _1033;
    float _1035 = _1028 * _1033;
    float _1036 = _1029 * _1033;
    vec4 _1041 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1043 = _1041.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1215 = sqrt(((_1027 * _1027) + (_1028 * _1028)) + (_1029 * _1029));
        float _1221 = (cbMatDynParam._m0[5u].x * _1215) + cbMatDynParam._m0[5u].y;
        float _4102 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1226 = (cbMatDynParam._m0[5u].z * _1215) + cbMatDynParam._m0[5u].w;
        float _4113 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) - _1222)) + _1222) < ((_1043 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1054 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1055 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1073 = fma(_957, cbSceneParam._m0[5u].z, fma(_956, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _955));
    float _1076 = fma(_957, cbSceneParam._m0[6u].z, fma(_956, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _955));
    float _1079 = fma(_957, cbSceneParam._m0[7u].z, fma(_956, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _955));
    uint _1092 = _265 + 9u;
    uint _1093 = _1092 + uint(cbMatDynParam._m0[0u].w);
    float _1099 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * cbInstanceData._m0[_1093].x;
    float _1100 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_1093].y;
    float _1101 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * cbInstanceData._m0[_1093].z;
    float _4124 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _1105 = 1.0 - _963;
    float _1106 = _1102 * _1105;
    float _1107 = _1103 * _1105;
    float _1108 = _1104 * _1105;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _963;
    float _1114 = (_1103 + (-0.039999999105930328369140625)) * _963;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _963;
    float _1116 = _1113 + 0.039999999105930328369140625;
    float _1118 = _1114 + 0.039999999105930328369140625;
    float _1119 = _1115 + 0.039999999105930328369140625;
    vec4 _1128 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1054, cbSceneParam._m0[86u].y * _1055));
    float _1132 = ((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * TEXCOORD_5.w) * _1128.x;
    float _1133 = dot(vec3(_955, _956, _957), vec3(_1034, _1035, _1036));
    float _1136 = _1133 * 2.0;
    float _1140 = (_1136 * _955) - _1034;
    float _1141 = (_1136 * _956) - _1035;
    float _1142 = (_1136 * _957) - _1036;
    float _1146 = abs(dot(vec3(_1034, _1035, _1036), vec3(_955, _956, _957)));
    float _4157 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = sqrt(_958);
    float _1161 = exp2((_1148 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1148 * 3.0));
    float _1167 = (1.0 - _1161) * ((_1148 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1168 = _1161 * _1148;
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1533;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1258 = fma(_1204, cbModelParam._m0[26u].z, fma(_1200, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1196));
        float _1262 = fma(_1204, cbModelParam._m0[27u].z, fma(_1200, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1196));
        float _1266 = fma(_1204, cbModelParam._m0[28u].z, fma(_1200, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1196));
        float _1291 = _1196 + _955;
        float _1292 = _1200 + _956;
        float _1293 = _1204 + _957;
        float _1303 = fma(_1293, cbModelParam._m0[26u].z, fma(_1292, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1291)) - _1258;
        float _1304 = fma(_1293, cbModelParam._m0[27u].z, fma(_1292, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1291)) - _1262;
        float _1305 = fma(_1293, cbModelParam._m0[28u].z, fma(_1292, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1291)) - _1266;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1258 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1262 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[34u].z) + ((((((_1266 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1361 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1327.x + (-0.5));
        float _1363 = _1361 * (_1327.y + (-0.5));
        float _1364 = _1361 * (_1327.z + (-0.5));
        float _1371 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1334.x + (-0.5));
        float _1373 = _1371 * (_1334.y + (-0.5));
        float _1374 = _1371 * (_1334.z + (-0.5));
        float _1381 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1341.x + (-0.5));
        float _1383 = _1381 * (_1341.y + (-0.5));
        float _1384 = _1381 * (_1341.z + (-0.5));
        float _1391 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1348.x + (-0.5));
        float _1393 = _1391 * (_1348.y + (-0.5));
        float _1394 = _1391 * (_1348.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1415 = (dot(vec3(_955, _956, _957), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1425 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4205 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1427 + 1.0))) + _1432) * _1395;
        float _1442 = _1363 * 0.5;
        float _1443 = _1373 * 0.5;
        float _1444 = _1383 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_955, _956, _957), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4238 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1469 + 1.0))) + _1474) * _1396;
        float _1484 = _1364 * 0.5;
        float _1485 = _1374 * 0.5;
        float _1486 = _1384 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_955, _956, _957), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4271 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1511 + 1.0))) + _1516) * _1397;
        _1533 = _1364;
        _1535 = _1363;
        _1536 = _1362;
        _1537 = _1374;
        _1538 = _1373;
        _1539 = _1372;
        _1540 = _1384;
        _1541 = _1383;
        _1542 = _1382;
        _1543 = _1397;
        _1544 = _1396;
        _1545 = _1395;
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1534;
        _1535 = _1534;
        _1536 = _1534;
        _1537 = _1534;
        _1538 = _1534;
        _1539 = _1534;
        _1540 = _1534;
        _1541 = _1534;
        _1542 = _1534;
        _1543 = _1534;
        _1544 = _1534;
        _1545 = _1534;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1575 = fma(_1204, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1196));
        float _1579 = fma(_1204, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1196));
        float _1583 = fma(_1204, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1196));
        float _1606 = _1196 + _955;
        float _1607 = _1200 + _956;
        float _1608 = _1204 + _957;
        float _1618 = fma(_1608, cbModelParam._m0[30u].z, fma(_1607, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1606)) - _1575;
        float _1619 = fma(_1608, cbModelParam._m0[31u].z, fma(_1607, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1606)) - _1579;
        float _1620 = fma(_1608, cbModelParam._m0[32u].z, fma(_1607, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1606)) - _1583;
        float _1624 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
        float _1637 = ((_1624 * _1618) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1575 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1638 = ((_1624 * _1619) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1579 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1639 = ((_1624 * _1620) / cbModelParam._m0[35u].z) + ((((((_1583 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1637, _1638, _1639), 0.0);
        float _1674 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1641.x + (-0.5));
        float _1676 = _1674 * (_1641.y + (-0.5));
        float _1677 = _1674 * (_1641.z + (-0.5));
        float _1684 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1648.x + (-0.5));
        float _1686 = _1684 * (_1648.y + (-0.5));
        float _1687 = _1684 * (_1648.z + (-0.5));
        float _1694 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1655.x + (-0.5));
        float _1696 = _1694 * (_1655.y + (-0.5));
        float _1697 = _1694 * (_1655.z + (-0.5));
        float _1704 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = _1704 * (_1662.x + (-0.5));
        float _1706 = _1704 * (_1662.y + (-0.5));
        float _1707 = _1704 * (_1662.z + (-0.5));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = _1675 * 0.5;
        float _1712 = _1685 * 0.5;
        float _1713 = _1695 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_955, _956, _957), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4334 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1738 + 1.0))) + _1743) * _1708;
        float _1753 = _1676 * 0.5;
        float _1754 = _1686 * 0.5;
        float _1755 = _1696 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_955, _956, _957), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1709 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4367 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1780 + 1.0))) + _1785) * _1709;
        float _1795 = _1677 * 0.5;
        float _1796 = _1687 * 0.5;
        float _1797 = _1697 * 0.5;
        float _1798 = dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797));
        float _1803 = (_1798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1798);
        float _1811 = (dot(vec3(_955, _956, _957), vec3(_1803 * _1795, _1803 * _1796, _1803 * _1797)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1822 = _1821 * 2.0;
        float _1826 = (1.0 - _1821) / (_1821 + 1.0);
        float _4400 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1836 = ((((1.0 - _1827) * (_1822 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1822 + 1.0))) + _1827) * _1710;
        _1844 = _1677;
        _1845 = _1676;
        _1846 = _1675;
        _1847 = _1687;
        _1848 = _1686;
        _1849 = _1685;
        _1850 = _1697;
        _1851 = _1696;
        _1852 = _1695;
        _1853 = _1710;
        _1854 = _1709;
        _1855 = _1708;
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
        _1857 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)));
    }
    else
    {
        _1844 = _1534;
        _1845 = _1534;
        _1846 = _1534;
        _1847 = _1534;
        _1848 = _1534;
        _1849 = _1534;
        _1850 = _1534;
        _1851 = _1534;
        _1852 = _1534;
        _1853 = _1534;
        _1854 = _1534;
        _1855 = _1534;
        _1856 = 0.0;
        _1857 = 0.0;
        _1858 = 0.0;
    }
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1546)) + _1546;
    float _1869 = (cbModelParam._m0[1u].x * (_1857 - _1547)) + _1547;
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1548)) + _1548;
    float _1891 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1868));
    float _1912 = _1140 * 0.5;
    float _1913 = _1141 * 0.5;
    float _1914 = _1142 * 0.5;
    float _1915 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1918 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1845, _1848, _1851, _1854));
    float _1921 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1955;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1928 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1533, _1537, _1540, _1543));
        float _1932 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1535, _1538, _1541, _1544));
        float _1936 = dot(vec4(_1912, _1913, _1914, 1.0), vec4(_1536, _1539, _1542, _1545));
        float _1943 = dot(vec4(cbModelParam._m0[39u]), vec4(_1912, _1913, _1914, 1.0));
        _1955 = dot(vec3(isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)), isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1943) ? 0.0 : (isnan(0.0) ? _1943 : max(0.0, _1943))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1955 = 1.0;
    }
    float _1966;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1957 = dot(vec4(cbModelParam._m0[40u]), vec4(_1912, _1913, _1914, 1.0));
        _1966 = dot(vec3(isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1957) ? 0.0 : (isnan(0.0) ? _1957 : max(0.0, _1957))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1966 = 1.0;
    }
    float _1970 = (_1966 * cbModelParam._m0[1u].x) + (_1955 * (1.0 - cbModelParam._m0[1u].x));
    float _1980 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1981 = isnan(_1980) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1980 : min(cbModelParam._m0[25u].z, _1980));
    float _2062;
    float _2064;
    float _2066;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2029 = fma(_1204, cbModelParam._m0[13u].z, fma(_1200, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1196)) + cbModelParam._m0[13u].w;
        float _2033 = fma(_1204, cbModelParam._m0[14u].z, fma(_1200, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1196)) + cbModelParam._m0[14u].w;
        float _2037 = fma(_1204, cbModelParam._m0[15u].z, fma(_1200, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1196)) + cbModelParam._m0[15u].w;
        float _2040 = fma(_1142, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140));
        float _2043 = fma(_1142, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140));
        float _2046 = fma(_1142, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140));
        float _2074;
        if (_2040 > 0.0)
        {
            _2074 = abs((1.0 - _2029) / _2040);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2029 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2074 = frontier_phi_17_15_ladder;
        }
        float _2298;
        if (_2043 > 0.0)
        {
            _2298 = abs((1.0 - _2033) / _2043);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2033 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2298 = frontier_phi_26_22_ladder;
        }
        float _2555;
        if (_2046 > 0.0)
        {
            _2555 = abs((1.0 - _2037) / _2046);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2037 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2555 = frontier_phi_38_33_ladder;
        }
        float _2557 = isnan(_2298) ? _2074 : (isnan(_2074) ? _2298 : min(_2074, _2298));
        float _2558 = isnan(_2555) ? _2557 : (isnan(_2557) ? _2555 : min(_2557, _2555));
        float _2562 = (_2558 * _2040) + _2029;
        float _2563 = (_2558 * _2043) + _2033;
        float _2564 = (_2558 * _2046) + _2037;
        float _2565 = _2558 * 9.9999997473787516355514526367188e-05;
        float _2567 = (-1.0) - _2565;
        float _2569 = _2565 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2564 > _2569) || ((_2564 < _2567) || ((_2563 > _2569) || ((_2563 < _2567) || ((_2562 < _2567) || (_2562 > _2569))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2564, cbModelParam._m0[9u].z, fma(_2563, cbModelParam._m0[9u].y, _2562 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2564, cbModelParam._m0[10u].z, fma(_2563, cbModelParam._m0[10u].y, _2562 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2564, cbModelParam._m0[11u].z, fma(_2563, cbModelParam._m0[11u].y, _2562 * cbModelParam._m0[11u].x))), _1981);
            frontier_phi_16_38_ladder = _2692.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2692.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2692.x * cbModelParam._m0[1u].y;
        }
        _2062 = frontier_phi_16_38_ladder_2;
        _2064 = frontier_phi_16_38_ladder_1;
        _2066 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2050 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1140, _1141, _1142), _1981);
        _2062 = _2050.x * cbModelParam._m0[1u].y;
        _2064 = _2050.y * cbModelParam._m0[1u].y;
        _2066 = _2050.z * cbModelParam._m0[1u].y;
    }
    float _2070 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2071 = isnan(_2070) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2070 : min(cbModelParam._m0[25u].w, _2070));
    float _2161;
    float _2163;
    float _2165;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2125 = fma(_1204, cbModelParam._m0[21u].z, fma(_1200, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1196)) + cbModelParam._m0[21u].w;
        float _2129 = fma(_1204, cbModelParam._m0[22u].z, fma(_1200, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1196)) + cbModelParam._m0[22u].w;
        float _2133 = fma(_1204, cbModelParam._m0[23u].z, fma(_1200, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1196)) + cbModelParam._m0[23u].w;
        float _2136 = fma(_1142, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140));
        float _2139 = fma(_1142, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140));
        float _2142 = fma(_1142, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140));
        float _2303;
        if (_2136 > 0.0)
        {
            _2303 = abs((1.0 - _2125) / _2136);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2125 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2303 = frontier_phi_28_24_ladder;
        }
        float _2582;
        if (_2139 > 0.0)
        {
            _2582 = abs((1.0 - _2129) / _2139);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2129 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2582 = frontier_phi_40_35_ladder;
        }
        float _2795;
        if (_2142 > 0.0)
        {
            _2795 = abs((1.0 - _2133) / _2142);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2133 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2795 = frontier_phi_49_46_ladder;
        }
        float _2797 = isnan(_2582) ? _2303 : (isnan(_2303) ? _2582 : min(_2303, _2582));
        float _2798 = isnan(_2795) ? _2797 : (isnan(_2797) ? _2795 : min(_2797, _2795));
        float _2802 = (_2798 * _2136) + _2125;
        float _2803 = (_2798 * _2139) + _2129;
        float _2804 = (_2798 * _2142) + _2133;
        float _2805 = _2798 * 9.9999997473787516355514526367188e-05;
        float _2806 = (-1.0) - _2805;
        float _2808 = _2805 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2804 > _2808) || ((_2804 < _2806) || ((_2803 > _2808) || ((_2803 < _2806) || ((_2802 < _2806) || (_2802 > _2808))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2804, cbModelParam._m0[17u].z, fma(_2803, cbModelParam._m0[17u].y, _2802 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2804, cbModelParam._m0[18u].z, fma(_2803, cbModelParam._m0[18u].y, _2802 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2804, cbModelParam._m0[19u].z, fma(_2803, cbModelParam._m0[19u].y, _2802 * cbModelParam._m0[19u].x))), _2071);
            frontier_phi_25_49_ladder = _3003.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3003.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3003.x * cbModelParam._m0[1u].z;
        }
        _2161 = frontier_phi_25_49_ladder_2;
        _2163 = frontier_phi_25_49_ladder_1;
        _2165 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2145 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1140, _1141, _1142), _2071);
        _2161 = _2145.x * cbModelParam._m0[1u].z;
        _2163 = _2145.y * cbModelParam._m0[1u].z;
        _2165 = _2145.z * cbModelParam._m0[1u].z;
    }
    float _2178 = (((_1167 * _1116) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2161 - _2062)) + _2062);
    float _2180 = (((_1167 * _1118) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2163 - _2064)) + _2064);
    float _2182 = (((_1167 * _1119) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2165 - _2066)) + _2066);
    float _2185 = fma(_2182, cbSceneParam._m0[89u].z, fma(_2180, cbSceneParam._m0[89u].y, _2178 * cbSceneParam._m0[89u].x));
    float _2188 = fma(_2182, cbSceneParam._m0[90u].z, fma(_2180, cbSceneParam._m0[90u].y, _2178 * cbSceneParam._m0[90u].x));
    float _2191 = fma(_2182, cbSceneParam._m0[91u].z, fma(_2180, cbSceneParam._m0[91u].y, _2178 * cbSceneParam._m0[91u].x));
    vec4 _2199 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1054, _1055));
    float _2201 = _2199.w;
    float _2213 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2201);
    float _2214 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2201);
    float _2215 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2201);
    uvec4 _2219 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2221 = _2219.x * 14u;
    uint _2222 = _2221 + 13u;
    float _2229 = _1132 + (-1.0);
    float _2234 = (cbLight._m0[_2222].x * _2229) + 1.0;
    float _2235 = (cbLight._m0[_2222].y * _2229) + 1.0;
    float _2236 = (cbLight._m0[_2222].z * _2229) + 1.0;
    float _2237 = (cbLight._m0[_2222].w * _2229) + 1.0;
    uint _2238 = _2221 + 5u;
    float _2244 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
    uint _2248 = _2221 + 4u;
    float _2257 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    uint _2261 = _2221 | 1u;
    float _2272 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_955, _956, _957));
    float _2275 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_955, _956, _957));
    float _4536 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _4547 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2280 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * 0.3183098733425140380859375;
    float _2282 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * 0.3183098733425140380859375;
    float _2289 = ((cbLight._m0[_2238].x * _2244) * _2282) + (((cbLight._m0[_2248].x * _2213) * _2257) * _2280);
    float _2290 = ((_2244 * cbLight._m0[_2238].y) * _2282) + (((cbLight._m0[_2248].y * _2214) * _2257) * _2280);
    float _2291 = ((_2244 * cbLight._m0[_2238].z) * _2282) + (((cbLight._m0[_2248].z * _2215) * _2257) * _2280);
    uvec4 _2295 = floatBitsToUint(cbLight._m0[_2221 + 12u]);
    bool _2297 = _2295.x == 0u;
    float _2308;
    float _2310;
    float _2312;
    if (_2297)
    {
        _2308 = _2289;
        _2310 = _2290;
        _2312 = _2291;
    }
    else
    {
        uint _2316 = _2221 + 6u;
        float _2332 = (dot(vec3(cbLight._m0[_2221 + 2u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2333 = _2332 * _2332;
        float _4558 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2334 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2335 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2308 = (((cbLight._m0[_2316].x * 0.3183098733425140380859375) * _2334) * _2335) + _2289;
        _2310 = (((cbLight._m0[_2316].y * 0.3183098733425140380859375) * _2334) * _2335) + _2290;
        _2312 = (((cbLight._m0[_2316].z * 0.3183098733425140380859375) * _2334) * _2335) + _2291;
    }
    bool _2315 = _2295.y == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2315)
    {
        _2353 = _2308;
        _2355 = _2310;
        _2357 = _2312;
    }
    else
    {
        uint _2526 = _2221 + 7u;
        float _2542 = (dot(vec3(cbLight._m0[_2221 + 3u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2543 = _2542 * _2542;
        float _4574 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2544 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2545 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2353 = (((cbLight._m0[_2526].x * 0.3183098733425140380859375) * _2544) * _2545) + _2308;
        _2355 = (((cbLight._m0[_2526].y * 0.3183098733425140380859375) * _2544) * _2545) + _2310;
        _2357 = (((cbLight._m0[_2526].z * 0.3183098733425140380859375) * _2544) * _2545) + _2312;
    }
    uint _2360 = _2221 + 8u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _958) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2221].x + _1034;
    float _2376 = cbLight._m0[_2221].y + _1035;
    float _2377 = cbLight._m0[_2221].z + _1036;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2221].xyz));
    float _4590 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _4601 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2389 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2390 = dot(vec3(_955, _956, _957), vec3(_2382, _2383, _2384));
    float _4612 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2382, _2383, _2384));
    float _4623 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2374 * _2374;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0);
    float _2411 = 0.959999978542327880859375 - _1113;
    float _2413 = 0.959999978542327880859375 - _1114;
    float _2414 = 0.959999978542327880859375 - _1115;
    float _2421 = 1.0 - _2374;
    float _2432 = (0.5 / (((_2389 * ((_2388 * _2421) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2421) + _2374) * _2388))) * _2388;
    float _4634 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2434 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    uint _2448 = _2221 + 9u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _958) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2261].x + _1034;
    float _2462 = cbLight._m0[_2261].y + _1035;
    float _2463 = cbLight._m0[_2261].z + _1036;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2261].xyz));
    float _4645 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _2475 = dot(vec3(_955, _956, _957), vec3(_2468, _2469, _2470));
    float _4656 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2479 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2468, _2469, _2470));
    float _4667 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2483 = _2460 * _2460;
    float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
    float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) * 5.0);
    float _2501 = 1.0 - _2460;
    float _2511 = (0.5 / (((_2389 * ((_2474 * _2501) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2501) + _2460) * _2474))) * _2474;
    float _4678 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2513 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
    float _2523 = (((((_2494 * _2411) + _1116) * cbLight._m0[_2448].x) * _2513) * _2244) + ((((cbLight._m0[_2360].x * _2213) * ((_2410 * _2411) + _1116)) * _2434) * _2257);
    float _2524 = (((((_2494 * _2413) + _1118) * cbLight._m0[_2448].y) * _2513) * _2244) + ((((cbLight._m0[_2360].y * _2214) * ((_2410 * _2413) + _1118)) * _2434) * _2257);
    float _2525 = (((((_2494 * _2414) + _1119) * cbLight._m0[_2448].z) * _2513) * _2244) + ((((cbLight._m0[_2360].z * _2215) * ((_2410 * _2414) + _1119)) * _2434) * _2257);
    float _2587;
    float _2589;
    float _2591;
    if (_2297)
    {
        _2587 = _2523;
        _2589 = _2524;
        _2591 = _2525;
    }
    else
    {
        uint _2593 = _2221 + 2u;
        uint _2597 = _2221 + 10u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _958) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _1034;
        float _2614 = cbLight._m0[_2593].y + _1035;
        float _2615 = cbLight._m0[_2593].z + _1036;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2593].xyz));
        float _4689 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2627 = dot(vec3(_955, _956, _957), vec3(_2620, _2621, _2622));
        float _4700 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4711 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0);
        float _2653 = 1.0 - _2612;
        float _2663 = (0.5 / (((_2389 * ((_2626 * _2653) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2653) + _2612) * _2626))) * _2626;
        float _4722 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2587 = (((((_2646 * _2411) + _1116) * cbLight._m0[_2597].x) * _2665) * _2666) + _2523;
        _2589 = (((((_2646 * _2413) + _1118) * cbLight._m0[_2597].y) * _2665) * _2666) + _2524;
        _2591 = (((((_2646 * _2414) + _1119) * cbLight._m0[_2597].z) * _2665) * _2666) + _2525;
    }
    float _2701;
    float _2703;
    float _2705;
    if (_2315)
    {
        _2701 = _2587;
        _2703 = _2589;
        _2705 = _2591;
    }
    else
    {
        uint _2712 = _2221 + 3u;
        uint _2716 = _2221 + 11u;
        float _2730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2712].w)) * _958) * 0.949999988079071044921875);
        float _2731 = _2730 * _2730;
        float _2732 = cbLight._m0[_2712].x + _1034;
        float _2733 = cbLight._m0[_2712].y + _1035;
        float _2734 = cbLight._m0[_2712].z + _1036;
        float _2738 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
        float _2739 = _2738 * _2732;
        float _2740 = _2738 * _2733;
        float _2741 = _2738 * _2734;
        float _2742 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2712].xyz));
        float _4738 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2746 = dot(vec3(_955, _956, _957), vec3(_2739, _2740, _2741));
        float _4749 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2749 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2750 = dot(vec3(cbLight._m0[_2712].xyz), vec3(_2739, _2740, _2741));
        float _4760 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2754 = _2731 * _2731;
        float _2758 = ((_2749 * _2749) * (_2754 + (-1.0))) + 1.0;
        float _2765 = exp2(log2(1.0 - (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) * 5.0);
        float _2772 = 1.0 - _2731;
        float _2782 = (0.5 / (((_2389 * ((_2745 * _2772) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2772) + _2731) * _2745))) * _2745;
        float _4771 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2784 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2754 / ((_2758 * _2758) * 3.141590118408203125));
        float _2785 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2701 = (((((_2765 * _2411) + _1116) * cbLight._m0[_2716].x) * _2784) * _2785) + _2587;
        _2703 = (((((_2765 * _2413) + _1118) * cbLight._m0[_2716].y) * _2784) * _2785) + _2589;
        _2705 = (((((_2765 * _2414) + _1119) * cbLight._m0[_2716].z) * _2784) * _2785) + _2591;
    }
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    if (_2219.y == 0u)
    {
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2861 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2860;
        float _2862 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2860;
        float _2863 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2860;
        uvec4 _2875 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2876 = _2875.x;
        uint _2887 = uint((float(_2875.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1055) / _2876))) + floor(float(uint(cbSceneParam._m0[85u].x * _1054) / _2876)));
        float _2897 = (log2(_2863 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2898 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        uint _2901 = uint(isnan(14.0) ? _2898 : (isnan(_2898) ? 14.0 : min(_2898, 14.0)));
        uvec4 _2906 = texelFetch(g_lightClusterGridBuffer, int(((_2901 << 2u) + (_2887 << 6u)) >> 2u));
        uint _2907 = _2906.x;
        uint _2908 = _2875.z;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        if (((((1u << ((_2908 >> 4u) & 15u)) + 4294967295u) & _2907) == 0u) || ((_2908 & 240u) == 0u))
        {
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
        }
        else
        {
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            uint _3166 = 0u;
            uint _3175;
            bool _3176;
            for (;;)
            {
                _3175 = texelFetch(g_lightClassification, int((((_2901 << 5u) + (_2887 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                _3176 = _3175 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3176)
                {
                    frontier_phi_66_pred = _3160;
                    frontier_phi_66_pred_1 = _3165;
                    frontier_phi_66_pred_2 = _3164;
                    frontier_phi_66_pred_3 = _3163;
                    frontier_phi_66_pred_4 = _3162;
                    frontier_phi_66_pred_5 = _3161;
                }
                else
                {
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    uint _3311;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3175;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    for (;;)
                    {
                        uint _3315 = uint(findLSB(_3311)) + (_3166 << 5u);
                        uint _3312 = (_3311 + 4294967295u) & _3311;
                        uint _3317 = _3315 * 48u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3317)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 3u)).x));
                        uint _3337 = (_3315 * 48u) + 4u;
                        vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 3u)).x));
                        uint _3356 = (_3315 * 48u) + 8u;
                        vec3 _3367 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x));
                        float _3371 = _3331.x - _2861;
                        float _3372 = _3331.y - _2862;
                        float _3373 = _3331.z - _2863;
                        float _3374 = dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373));
                        float _3377 = inversesqrt(_3374);
                        float _3378 = _3377 * _3371;
                        float _3379 = _3377 * _3372;
                        float _3380 = _3377 * _3373;
                        float _3381 = dot(vec3(_1073, _1076, _1079), vec3(_3378, _3379, _3380));
                        float _3386 = 1.0 - (_3374 * _3331.w);
                        float _4797 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3387 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3388 = sqrt(_3374) * _3350.w;
                        float _3391 = 1.39999997615814208984375 / (_3388 + 1.39999997615814208984375);
                        float _3392 = _3391 * _3391;
                        float _3395 = ((1.0 - _3392) * _3381) + _3392;
                        float _3398 = _3388 * _3388;
                        float _3402 = ((isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0))) * _3387) / ((_3398 * 0.699999988079071044921875) + 1.0);
                        float _3406 = (-0.0) - _2861;
                        float _3407 = (-0.0) - _2862;
                        float _3408 = (-0.0) - _2863;
                        float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                        float _3413 = _3412 * _3406;
                        float _3414 = _3412 * _3407;
                        float _3415 = _3412 * _3408;
                        float _3423 = exp2(log2(1.0 / ((_3398 * 3.5) + 5.0)) * 0.25);
                        float _3424 = 1.0 - _1148;
                        float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                        float _3432 = _3431 * _3431;
                        float _3433 = _3432 * _3432;
                        float _3434 = _3413 + _3378;
                        float _3435 = _3414 + _3379;
                        float _3436 = _3415 + _3380;
                        float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                        float _3444 = dot(vec3(_1073, _1076, _1079), vec3(_3413, _3414, _3415));
                        float _4813 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3447 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3448 = dot(vec3(_1073, _1076, _1079), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                        float _4824 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3451 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                        float _3456 = _3391 * _3432;
                        float _3457 = _3456 * _3456;
                        float _3460 = ((1.0 - _3457) * _3381) + _3457;
                        float _4835 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3461 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3462 = 1.0 - _3432;
                        float _3472 = (0.5 / (((_3461 * ((_3447 * _3462) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3432) * _3447))) * _3461;
                        float _4846 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3483 = (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) / ((_3455 * _3455) * ((_3398 * 2.1991131305694580078125) + 3.141590118408203125))) * _3387;
                        _3235 = (_3402 * _3350.x) + _3308;
                        _3236 = (_3402 * _3350.y) + _3309;
                        _3237 = (_3402 * _3350.z) + _3310;
                        _3232 = (_3483 * _3367.x) + _3305;
                        _3233 = (_3483 * _3367.y) + _3306;
                        _3234 = (_3483 * _3367.z) + _3307;
                        if (_3312 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3312;
                        }
                    }
                    frontier_phi_66_pred = _3232;
                    frontier_phi_66_pred_1 = _3237;
                    frontier_phi_66_pred_2 = _3236;
                    frontier_phi_66_pred_3 = _3235;
                    frontier_phi_66_pred_4 = _3234;
                    frontier_phi_66_pred_5 = _3233;
                }
                _3009 = frontier_phi_66_pred;
                _3019 = frontier_phi_66_pred_1;
                _3017 = frontier_phi_66_pred_2;
                _3015 = frontier_phi_66_pred_3;
                _3013 = frontier_phi_66_pred_4;
                _3011 = frontier_phi_66_pred_5;
                uint _3167 = _3166 + 1u;
                if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3160 = _3009;
                    _3161 = _3011;
                    _3162 = _3013;
                    _3163 = _3015;
                    _3164 = _3017;
                    _3165 = _3019;
                    _3166 = _3167;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
        }
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.z;
        uint _3025 = (_3023 >> 8u) & 15u;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        if (((4294967295u << _3025) & _2907) == 0u)
        {
            _3128 = _3008;
            _3130 = _3010;
            _3132 = _3012;
            _3134 = _3014;
            _3136 = _3016;
            _3138 = _3018;
        }
        else
        {
            float _3153 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
            float _3154 = _3153 * _2861;
            float _3155 = _3153 * _2862;
            float _3156 = _3153 * _2863;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3025 < ((_3023 >> 12u) & 15u))
            {
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3288 = _3008;
                float _3289 = _3010;
                float _3290 = _3012;
                float _3291 = _3014;
                float _3292 = _3016;
                float _3293 = _3018;
                uint _3294 = _3025;
                uint _3303;
                bool _3304;
                for (;;)
                {
                    _3303 = texelFetch(g_lightClassification, int((((_2901 << 5u) + (_2887 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                    _3304 = _3303 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3304)
                    {
                        frontier_phi_77_pred = _3293;
                        frontier_phi_77_pred_1 = _3292;
                        frontier_phi_77_pred_2 = _3291;
                        frontier_phi_77_pred_3 = _3290;
                        frontier_phi_77_pred_4 = _3289;
                        frontier_phi_77_pred_5 = _3288;
                    }
                    else
                    {
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3510 = _3288;
                        float _3511 = _3289;
                        float _3512 = _3290;
                        float _3513 = _3291;
                        float _3514 = _3292;
                        float _3515 = _3293;
                        uint _3516 = _3303;
                        uint _3517;
                        vec4 _3542;
                        float _3543;
                        vec4 _3558;
                        vec3 _3570;
                        vec4 _3585;
                        vec4 _3600;
                        float _3646;
                        bool _3647;
                        for (;;)
                        {
                            uint _3527 = ((_3294 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3516));
                            _3517 = (_3516 + 4294967295u) & _3516;
                            uint _3529 = _3527 * 40u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            _3543 = _3542.w;
                            uint _3545 = (_3527 * 40u) + 4u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3527 * 40u) + 8u;
                            _3570 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x));
                            uint _3572 = (_3527 * 40u) + 16u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3587 = (_3527 * 40u) + 20u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3527 * 40u) + 24u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3621 = (_3527 * 40u) + 28u;
                            vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3646 = fma(_2863, _3634.z, fma(_2862, _3634.y, _3634.x * _2861)) + _3634.w;
                            _3647 = !((fma(_2863, _3615.z, fma(_2862, _3615.y, _3615.x * _2861)) + _3615.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3647)
                            {
                                float _3674 = _3542.x - _2861;
                                float _3675 = _3542.y - _2862;
                                float _3676 = _3542.z - _2863;
                                float _3677 = dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676));
                                float _3680 = inversesqrt(_3677);
                                float _3681 = _3680 * _3674;
                                float _3682 = _3680 * _3675;
                                float _3683 = _3680 * _3676;
                                float _3687 = 1.0 - (_3677 / (_3543 * _3543));
                                float _4857 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3692 = sqrt(_3677) * _3558.w;
                                float _3694 = 1.39999997615814208984375 / (_3692 + 1.39999997615814208984375);
                                float _3695 = _3694 * _3694;
                                float _3698 = ((1.0 - _3695) * dot(vec3(_3681, _3682, _3683), vec3(_1073, _1076, _1079))) + _3695;
                                float _3701 = _3692 * _3692;
                                float _3705 = (fma(_2863, _3585.z, fma(_2862, _3585.y, _3585.x * _2861)) + _3585.w) / _3646;
                                float _3706 = (fma(_2863, _3600.z, fma(_2862, _3600.y, _3600.x * _2861)) + _3600.w) / _3646;
                                float _3710 = 1.0 - dot(vec2(_3705, _3706), vec2(_3705, _3706));
                                float _4873 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3712 = _3711 * (((isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0))) * _3688) / ((_3701 * 0.699999988079071044921875) + 1.0));
                                float _3724 = exp2(log2(1.0 / ((_3701 * 3.5) + 5.0)) * 0.25);
                                float _3725 = 1.0 - _1148;
                                float _3732 = sqrt(1.0 - ((1.0 - (_3725 * _3725)) * (1.0 - (_3724 * _3724))));
                                float _3733 = _3732 * _3732;
                                float _3734 = _3733 * _3733;
                                float _3735 = _3681 - _3154;
                                float _3736 = _3682 - _3155;
                                float _3737 = _3683 - _3156;
                                float _3741 = inversesqrt(dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737)));
                                float _3745 = dot(vec3(_1073, _1076, _1079), vec3((-0.0) - _3154, (-0.0) - _3155, (-0.0) - _3156));
                                float _4884 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3749 = dot(vec3(_1073, _1076, _1079), vec3(_3741 * _3735, _3741 * _3736, _3741 * _3737));
                                float _4895 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3756 = ((_3752 * _3752) * (_3734 + (-1.0))) + 1.0;
                                float _3757 = _3694 * _3733;
                                float _3758 = _3757 * _3757;
                                float _3764 = ((1.0 - _3758) * dot(vec3(_1073, _1076, _1079), vec3(_3681, _3682, _3683))) + _3758;
                                float _4906 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3765 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3766 = 1.0 - _3733;
                                float _3776 = (0.5 / (((_3765 * ((_3748 * _3766) + _3733)) + 9.9999999392252902907785028219223e-09) + (((_3765 * _3766) + _3733) * _3748))) * _3765;
                                float _4917 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3786 = (_3711 * _3688) * (((_3734 * 3.1415927410125732421875) * (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) / ((_3756 * _3756) * ((_3701 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3712 * _3558.y;
                                frontier_phi_83_pred_1 = _3712 * _3558.x;
                                frontier_phi_83_pred_2 = _3786 * _3570.z;
                                frontier_phi_83_pred_3 = _3786 * _3570.y;
                                frontier_phi_83_pred_4 = _3786 * _3570.x;
                                frontier_phi_83_pred_5 = _3712 * _3558.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3794 = frontier_phi_83_pred;
                            _3793 = frontier_phi_83_pred_1;
                            _3792 = frontier_phi_83_pred_2;
                            _3791 = frontier_phi_83_pred_3;
                            _3790 = frontier_phi_83_pred_4;
                            _3795 = frontier_phi_83_pred_5;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            if (_3517 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3517;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3502;
                        frontier_phi_77_pred_1 = _3501;
                        frontier_phi_77_pred_2 = _3500;
                        frontier_phi_77_pred_3 = _3499;
                        frontier_phi_77_pred_4 = _3498;
                        frontier_phi_77_pred_5 = _3497;
                    }
                    _3139 = frontier_phi_77_pred;
                    _3137 = frontier_phi_77_pred_1;
                    _3135 = frontier_phi_77_pred_2;
                    _3133 = frontier_phi_77_pred_3;
                    _3131 = frontier_phi_77_pred_4;
                    _3129 = frontier_phi_77_pred_5;
                    uint _3295 = _3294 + 1u;
                    if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3288 = _3129;
                        _3289 = _3131;
                        _3290 = _3133;
                        _3291 = _3135;
                        _3292 = _3137;
                        _3293 = _3139;
                        _3294 = _3295;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3133;
                frontier_phi_58_59_ladder_1 = _3139;
                frontier_phi_58_59_ladder_2 = _3137;
                frontier_phi_58_59_ladder_3 = _3135;
                frontier_phi_58_59_ladder_4 = _3131;
                frontier_phi_58_59_ladder_5 = _3129;
            }
            else
            {
                frontier_phi_58_59_ladder = _3012;
                frontier_phi_58_59_ladder_1 = _3018;
                frontier_phi_58_59_ladder_2 = _3016;
                frontier_phi_58_59_ladder_3 = _3014;
                frontier_phi_58_59_ladder_4 = _3010;
                frontier_phi_58_59_ladder_5 = _3008;
            }
            _3128 = frontier_phi_58_59_ladder_5;
            _3130 = frontier_phi_58_59_ladder_4;
            _3132 = frontier_phi_58_59_ladder;
            _3134 = frontier_phi_58_59_ladder_3;
            _3136 = frontier_phi_58_59_ladder_2;
            _3138 = frontier_phi_58_59_ladder_1;
        }
        float _3143 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
        _2920 = (_3143 * _3134) + _2353;
        _2922 = (_3143 * _3136) + _2355;
        _2924 = (_3143 * _3138) + _2357;
        _2926 = ((_3128 * _1116) * _3143) + _2701;
        _2928 = ((_3130 * _1118) * _3143) + _2703;
        _2930 = ((_3132 * _1119) * _3143) + _2705;
    }
    else
    {
        _2920 = _2353;
        _2922 = _2355;
        _2924 = _2357;
        _2926 = _2701;
        _2928 = _2703;
        _2930 = _2705;
    }
    float _4933 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _4944 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _4955 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2947 = ((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2920 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1132))) + ((_2926 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _2948 = ((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2922 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1132))) + ((_2928 + ((isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    float _2949 = ((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2924 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1132))) + ((_2930 + ((isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))) * _1970)) * cbPerFrame._m0[3u].x);
    uint _2950 = _265 + 6u;
    float _2958 = _1054 / cbSceneParam._m0[86u].x;
    float _2959 = _1055 / cbSceneParam._m0[86u].y;
    vec4 _2973 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, (log2((isnan(cbSceneParam._m0[77u].w) ? _977 : (isnan(_977) ? cbSceneParam._m0[77u].w : min(_977, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2975 = _2973.x;
    float _2976 = _2973.y;
    float _2977 = _2973.z;
    float _2978 = _2973.w;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    if (_977 > cbSceneParam._m0[78u].w)
    {
        float _3033 = isnan(_977) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _977 : min(cbSceneParam._m0[80u].w, _977));
        float _3034 = _3033 / _977;
        float _3045 = _3034 * _1027;
        float _3046 = _1028 * _3034;
        float _3047 = (-0.0) - _3046;
        float _3048 = _3034 * _1029;
        float _3050 = (cbSceneParam._m0[77u].w * _3047) / _3033;
        float _3051 = _3050 + cbSceneParam._m0[79u].w;
        float _3052 = cbSceneParam._m0[79u].w - _3046;
        float _3058 = sqrt(((_3045 * _3045) + (_3046 * _3046)) + (_3048 * _3048));
        float _3061 = (1.0 - (cbSceneParam._m0[77u].w / _3033)) * _3058;
        float _3066 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3068 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3245;
        if (abs((_3047 - _3050) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3245 = ((((_3051 > 0.0) ? exp2(_3066 * _3051) : (2.0 - exp2(_3068 * _3051))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3061;
        }
        else
        {
            float _3189 = 1.0 / cbSceneParam._m0[80u].x;
            float _3190 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : max(_3051, _3052));
            float _3191 = isnan(_3052) ? _3051 : (isnan(_3051) ? _3052 : min(_3051, _3052));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            float _3201 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : min(_3191, 0.0));
            _3245 = ((abs(_3058 / _3047) * cbSceneParam._m0[80u].y) * ((((_3200 - _3201) * 2.0) - ((exp2(_3066 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0)))) - exp2(_3066 * (isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))))) * _3189)) - ((exp2(_3068 * _3200) - exp2(_3068 * _3201)) * _3189))) + (_3061 * cbSceneParam._m0[80u].z);
        }
        vec4 _3247 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, 1.0), 0.0);
        float _3256 = exp2((_3245 * (-1.44269502162933349609375)) * (1.0 - _3247.w));
        float _3257 = log2(_3256);
        float _3273 = log2(_2978);
        _3070 = (exp2(_3273 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].x)) * _3247.x) / cbSceneParam._m0[78u].x)) + _2975;
        _3072 = (exp2(_3273 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].y)) * _3247.y) / cbSceneParam._m0[78u].y)) + _2976;
        _3074 = (exp2(_3273 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3257 * cbSceneParam._m0[78u].z)) * _3247.z) / cbSceneParam._m0[78u].z)) + _2977;
        _3076 = _3256 * _2978;
    }
    else
    {
        _3070 = _2975;
        _3072 = _2976;
        _3074 = _2977;
        _3076 = _2978;
    }
    bool _3283;
    vec4 _3086;
    vec4 _3108;
    float _3110;
    float _3114;
    float _3115;
    float _3116;
    float _3117;
    bool _3127;
    for (;;)
    {
        _3086 = cbMatDynParam._m0[0u];
        float _3088 = roundEven(_3086.y);
        bool _3089 = _3088 == 3.0;
        float _3090 = log2(_3076);
        float _3097 = exp2(_3090 * cbSceneParam._m0[78u].x) * _2947;
        float _3098 = exp2(_3090 * cbSceneParam._m0[78u].y) * _2948;
        float _3099 = exp2(_3090 * cbSceneParam._m0[78u].z) * _2949;
        float _3106 = _1043 + (-0.5);
        _3108 = cbMtdParam._m0[1u];
        _3110 = _3108.y * _3106;
        float _3113 = (_3088 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3114 = _3113 * (_3089 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3070)));
        _3115 = _3113 * (_3089 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3072)));
        _3116 = _3113 * (_3089 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3074)));
        _3117 = _3106 * 0.999000012874603271484375;
        _3127 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3127)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3117) < 0.5)
            {
                _3283 = true;
                break;
            }
        }
        uint _3224 = _1092 + uint(_3086.w);
        if ((cbInstanceData._m0[_3224].w < 1.0) && ((cbInstanceData._m0[_3224].w + _3117) < 0.5))
        {
            _3283 = true;
            break;
        }
        if ((_3110 + 1.0) < _3108.x)
        {
            _3283 = true;
            break;
        }
        _3283 = false;
        break;
    }
    float _3488;
    if (_3283)
    {
        discard_state = true;
        _3488 = 0.0;
    }
    else
    {
        _3488 = cbInstanceData._m0[_2950].w;
    }
    SV_Target.x = _3114;
    SV_Target.y = _3115;
    SV_Target.z = _3116;
    SV_Target.w = _3488;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2950].w;
    discard_exit();
}


