#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1375;
float _3779;
float _3780;
float _3781;
float _3782;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[23u].w) + _392) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3791 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _417 = (_410 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _418 = (_410 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _419 = (_410 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _438 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _475 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _477 = _475.x;
    float _478 = _475.y;
    float _479 = _475.z;
    float _488 = ((_458.z - _479) * _410) + _479;
    float _491 = ((((_458.x - _477) * _410) + _477) * 2.0) + (-1.0);
    float _493 = ((((_458.y - _478) * _410) + _478) * 2.0) + (-1.0);
    float _494 = dot(vec2(_491, _493), vec2(_491, _493));
    float _3802 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _499 = sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _542 = _540.x;
    float _543 = 1.0 - _542;
    float _552 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _555 = ((isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : min(_552, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _564 = (_555 - ((((((_542 - _543) * cbMtdParam._m0[24u].z) + _543) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _555))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3823 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _572 = (_565 * ((_438.x * cbMtdParam._m0[18u].x) - _417)) + _417;
    float _573 = (_565 * ((_438.y * cbMtdParam._m0[18u].y) - _418)) + _418;
    float _574 = (_565 * ((_438.z * cbMtdParam._m0[18u].z) - _419)) + _419;
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _614 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_588 - _589) * cbMtdParam._m0[24u].w) + _589) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3834 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _623 = ((((cbMtdParam._m0[10u].x - _572) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _615) + _572;
    float _624 = ((((cbMtdParam._m0[10u].y - _573) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _615) + _573;
    float _625 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _574)) * _615) + _574;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _653 = _651.x;
    float _671 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _653) * _410) + _653;
    float _675 = ((_637.x - _671) * cbMtdParam._m0[19u].z) + _671;
    float _677 = _675 - (_675 * _565);
    float _679 = _677 - (_677 * _615);
    float _683 = (cbMtdParam._m0[19u].w * (_515.z - _488)) + _488;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _704 = (_697.x * 2.0) + (-1.0);
    float _705 = (_697.y * 2.0) + (-1.0);
    float _706 = dot(vec2(_704, _705), vec2(_704, _705));
    float _3845 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _714 = (_565 * (_697.z - _683)) + _683;
    float _717 = ((cbMtdParam._m0[23u].x - _714) * _615) + _714;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _742 = (_736.x * 2.0) + (-1.0);
    float _743 = (_736.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _3856 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _752 = (((_515.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _491;
    float _753 = (((_515.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _493;
    float _765 = (((_704 - _752) + (cbMtdParam._m0[21u].x * _752)) * _565) + _752;
    float _766 = (((_705 - _753) + (cbMtdParam._m0[21u].x * _753)) * _565) + _753;
    float _767 = (_565 * (sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) - _499)) + _499;
    float _778 = (((_742 - _765) + (_765 * cbMtdParam._m0[22u].z)) * _615) + _765;
    float _779 = (((_743 - _766) + (_766 * cbMtdParam._m0[22u].z)) * _615) + _766;
    float _780 = ((sqrt(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) - _767) * _615) + _767;
    float _782 = cbMtdParam._m0[22u].x + _515.w;
    float _785 = fma(_780, _246 * NORMAL.x, fma(_779, _253 * TANGENT.x, (_239 * _231) * _778));
    float _788 = fma(_780, _246 * NORMAL.y, fma(_779, _253 * TANGENT.y, (_239 * _232) * _778));
    float _791 = fma(_780, _246 * NORMAL.z, fma(_779, _253 * TANGENT.z, (_239 * _233) * _778));
    float _795 = inversesqrt(dot(vec3(_785, _788, _791), vec3(_785, _788, _791)));
    float _796 = _795 * _785;
    float _797 = _795 * _788;
    float _798 = _795 * _791;
    float _3867 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _799 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _3889 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3900 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3911 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3922 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _804 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _868 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _858);
    float _869 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _858);
    float _870 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _858);
    float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
    float _875 = _868 * _874;
    float _876 = _869 * _874;
    float _877 = _870 * _874;
    vec4 _882 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _884 = _882.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1056 = sqrt(((_868 * _868) + (_869 * _869)) + (_870 * _870));
        float _1062 = (cbMatDynParam._m0[5u].x * _1056) + cbMatDynParam._m0[5u].y;
        float _3933 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1067 = (cbMatDynParam._m0[5u].z * _1056) + cbMatDynParam._m0[5u].w;
        float _3944 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) - _1063)) + _1063) < ((_884 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _914 = fma(_798, cbSceneParam._m0[5u].z, fma(_797, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _796));
    float _917 = fma(_798, cbSceneParam._m0[6u].z, fma(_797, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _796));
    float _920 = fma(_798, cbSceneParam._m0[7u].z, fma(_797, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _796));
    uint _933 = _259 + 9u;
    uint _934 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_934].z;
    float _3955 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _946 = 1.0 - _804;
    float _947 = _943 * _946;
    float _948 = _944 * _946;
    float _949 = _945 * _946;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _804;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _804;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _804;
    float _957 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    vec4 _969 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _973 = ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * TEXCOORD_5.w) * _969.x;
    float _974 = dot(vec3(_796, _797, _798), vec3(_875, _876, _877));
    float _977 = _974 * 2.0;
    float _981 = (_977 * _796) - _875;
    float _982 = (_977 * _797) - _876;
    float _983 = (_977 * _798) - _877;
    float _987 = abs(dot(vec3(_875, _876, _877), vec3(_796, _797, _798)));
    float _3988 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _989 = sqrt(_799);
    float _1002 = exp2((_989 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_989 * 3.0));
    float _1008 = (1.0 - _1002) * ((_989 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1009 = _1002 * _989;
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1374;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1099 = fma(_1045, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037));
        float _1103 = fma(_1045, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037));
        float _1107 = fma(_1045, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037));
        float _1132 = _1037 + _796;
        float _1133 = _1041 + _797;
        float _1134 = _1045 + _798;
        float _1144 = fma(_1134, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1132)) - _1099;
        float _1145 = fma(_1134, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1132)) - _1103;
        float _1146 = fma(_1134, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1132)) - _1107;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1099 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1103 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[34u].z) + ((((((_1107 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1202 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1168.x + (-0.5));
        float _1204 = _1202 * (_1168.y + (-0.5));
        float _1205 = _1202 * (_1168.z + (-0.5));
        float _1212 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1175.x + (-0.5));
        float _1214 = _1212 * (_1175.y + (-0.5));
        float _1215 = _1212 * (_1175.z + (-0.5));
        float _1222 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1182.x + (-0.5));
        float _1224 = _1222 * (_1182.y + (-0.5));
        float _1225 = _1222 * (_1182.z + (-0.5));
        float _1232 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1189.x + (-0.5));
        float _1234 = _1232 * (_1189.y + (-0.5));
        float _1235 = _1232 * (_1189.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1256 = (dot(vec3(_796, _797, _798), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1266 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4036 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1268 + 1.0))) + _1273) * _1236;
        float _1283 = _1204 * 0.5;
        float _1284 = _1214 * 0.5;
        float _1285 = _1224 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_796, _797, _798), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4069 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1310 + 1.0))) + _1315) * _1237;
        float _1325 = _1205 * 0.5;
        float _1326 = _1215 * 0.5;
        float _1327 = _1225 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_796, _797, _798), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4102 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1352 + 1.0))) + _1357) * _1238;
        _1374 = _1205;
        _1376 = _1204;
        _1377 = _1203;
        _1378 = _1215;
        _1379 = _1214;
        _1380 = _1213;
        _1381 = _1225;
        _1382 = _1224;
        _1383 = _1223;
        _1384 = _1238;
        _1385 = _1237;
        _1386 = _1236;
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1375;
        _1376 = _1375;
        _1377 = _1375;
        _1378 = _1375;
        _1379 = _1375;
        _1380 = _1375;
        _1381 = _1375;
        _1382 = _1375;
        _1383 = _1375;
        _1384 = _1375;
        _1385 = _1375;
        _1386 = _1375;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1417 = fma(_1045, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037));
        float _1421 = fma(_1045, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037));
        float _1425 = fma(_1045, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037));
        float _1448 = _1037 + _796;
        float _1449 = _1041 + _797;
        float _1450 = _1045 + _798;
        float _1460 = fma(_1450, cbModelParam._m0[30u].z, fma(_1449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1448)) - _1417;
        float _1461 = fma(_1450, cbModelParam._m0[31u].z, fma(_1449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1448)) - _1421;
        float _1462 = fma(_1450, cbModelParam._m0[32u].z, fma(_1449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1448)) - _1425;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1479 = ((_1466 * _1460) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1417 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1461) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1421 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1466 * _1462) / cbModelParam._m0[35u].z) + ((((((_1425 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1516 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1483.x + (-0.5));
        float _1518 = _1516 * (_1483.y + (-0.5));
        float _1519 = _1516 * (_1483.z + (-0.5));
        float _1526 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1490.x + (-0.5));
        float _1528 = _1526 * (_1490.y + (-0.5));
        float _1529 = _1526 * (_1490.z + (-0.5));
        float _1536 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1497.x + (-0.5));
        float _1538 = _1536 * (_1497.y + (-0.5));
        float _1539 = _1536 * (_1497.z + (-0.5));
        float _1546 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1504.x + (-0.5));
        float _1548 = _1546 * (_1504.y + (-0.5));
        float _1549 = _1546 * (_1504.z + (-0.5));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = _1517 * 0.5;
        float _1554 = _1527 * 0.5;
        float _1555 = _1537 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_796, _797, _798), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4165 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1580 + 1.0))) + _1585) * _1550;
        float _1595 = _1518 * 0.5;
        float _1596 = _1528 * 0.5;
        float _1597 = _1538 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_796, _797, _798), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4198 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1622 + 1.0))) + _1627) * _1551;
        float _1637 = _1519 * 0.5;
        float _1638 = _1529 * 0.5;
        float _1639 = _1539 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_796, _797, _798), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4231 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1664 + 1.0))) + _1669) * _1552;
        _1686 = _1519;
        _1687 = _1518;
        _1688 = _1517;
        _1689 = _1529;
        _1690 = _1528;
        _1691 = _1527;
        _1692 = _1539;
        _1693 = _1538;
        _1694 = _1537;
        _1695 = _1552;
        _1696 = _1551;
        _1697 = _1550;
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
    }
    else
    {
        _1686 = _1375;
        _1687 = _1375;
        _1688 = _1375;
        _1689 = _1375;
        _1690 = _1375;
        _1691 = _1375;
        _1692 = _1375;
        _1693 = _1375;
        _1694 = _1375;
        _1695 = _1375;
        _1696 = _1375;
        _1697 = _1375;
        _1698 = 0.0;
        _1699 = 0.0;
        _1700 = 0.0;
    }
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1387)) + _1387;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1388)) + _1388;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1389)) + _1389;
    float _1733 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1710));
    float _1754 = _981 * 0.5;
    float _1755 = _982 * 0.5;
    float _1756 = _983 * 0.5;
    float _1757 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1760 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1763 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1797;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1770 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1374, _1378, _1381, _1384));
        float _1774 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1778 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1785 = dot(vec4(cbModelParam._m0[39u]), vec4(_1754, _1755, _1756, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1808;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1799 = dot(vec4(cbModelParam._m0[40u]), vec4(_1754, _1755, _1756, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1812 = (_1808 * cbModelParam._m0[1u].x) + (_1797 * (1.0 - cbModelParam._m0[1u].x));
    float _1822 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _799);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1822 : min(cbModelParam._m0[25u].z, _1822));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1870 = fma(_1045, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037)) + cbModelParam._m0[13u].w;
        float _1874 = fma(_1045, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037)) + cbModelParam._m0[14u].w;
        float _1878 = fma(_1045, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037)) + cbModelParam._m0[15u].w;
        float _1881 = fma(_983, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981));
        float _1884 = fma(_983, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981));
        float _1887 = fma(_983, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981));
        float _1915;
        if (_1881 > 0.0)
        {
            _1915 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1915 = frontier_phi_17_15_ladder;
        }
        float _2138;
        if (_1884 > 0.0)
        {
            _2138 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2138 = frontier_phi_26_22_ladder;
        }
        float _2395;
        if (_1887 > 0.0)
        {
            _2395 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2395 = frontier_phi_38_33_ladder;
        }
        float _2397 = isnan(_2138) ? _1915 : (isnan(_1915) ? _2138 : min(_1915, _2138));
        float _2398 = isnan(_2395) ? _2397 : (isnan(_2397) ? _2395 : min(_2397, _2395));
        float _2402 = (_2398 * _1881) + _1870;
        float _2403 = (_2398 * _1884) + _1874;
        float _2404 = (_2398 * _1887) + _1878;
        float _2405 = _2398 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2405;
        float _2409 = _2405 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 > _2409) || ((_2403 < _2407) || ((_2402 < _2407) || (_2402 > _2409))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2404, cbModelParam._m0[9u].z, fma(_2403, cbModelParam._m0[9u].y, _2402 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2404, cbModelParam._m0[10u].z, fma(_2403, cbModelParam._m0[10u].y, _2402 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2404, cbModelParam._m0[11u].z, fma(_2403, cbModelParam._m0[11u].y, _2402 * cbModelParam._m0[11u].x))), _1823);
            frontier_phi_16_38_ladder = _2532.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2532.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2532.x * cbModelParam._m0[1u].y;
        }
        _1903 = frontier_phi_16_38_ladder_2;
        _1905 = frontier_phi_16_38_ladder_1;
        _1907 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_981, _982, _983), _1823);
        _1903 = _1891.x * cbModelParam._m0[1u].y;
        _1905 = _1891.y * cbModelParam._m0[1u].y;
        _1907 = _1891.z * cbModelParam._m0[1u].y;
    }
    float _1911 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _799);
    float _1912 = isnan(_1911) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1911 : min(cbModelParam._m0[25u].w, _1911));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1965 = fma(_1045, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037)) + cbModelParam._m0[21u].w;
        float _1969 = fma(_1045, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037)) + cbModelParam._m0[22u].w;
        float _1973 = fma(_1045, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037)) + cbModelParam._m0[23u].w;
        float _1976 = fma(_983, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981));
        float _1979 = fma(_983, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981));
        float _1982 = fma(_983, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981));
        float _2143;
        if (_1976 > 0.0)
        {
            _2143 = abs((1.0 - _1965) / _1976);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1965 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2143 = frontier_phi_28_24_ladder;
        }
        float _2422;
        if (_1979 > 0.0)
        {
            _2422 = abs((1.0 - _1969) / _1979);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1969 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2422 = frontier_phi_40_35_ladder;
        }
        float _2635;
        if (_1982 > 0.0)
        {
            _2635 = abs((1.0 - _1973) / _1982);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1973 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2635 = frontier_phi_49_46_ladder;
        }
        float _2637 = isnan(_2422) ? _2143 : (isnan(_2143) ? _2422 : min(_2143, _2422));
        float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
        float _2642 = (_2638 * _1976) + _1965;
        float _2643 = (_2638 * _1979) + _1969;
        float _2644 = (_2638 * _1982) + _1973;
        float _2645 = _2638 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2645;
        float _2648 = _2645 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2644 > _2648) || ((_2644 < _2646) || ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 < _2646) || (_2642 > _2648))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2644, cbModelParam._m0[17u].z, fma(_2643, cbModelParam._m0[17u].y, _2642 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2644, cbModelParam._m0[18u].z, fma(_2643, cbModelParam._m0[18u].y, _2642 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2644, cbModelParam._m0[19u].z, fma(_2643, cbModelParam._m0[19u].y, _2642 * cbModelParam._m0[19u].x))), _1912);
            frontier_phi_25_49_ladder = _2843.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2843.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2843.x * cbModelParam._m0[1u].z;
        }
        _2001 = frontier_phi_25_49_ladder_2;
        _2003 = frontier_phi_25_49_ladder_1;
        _2005 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_981, _982, _983), _1912);
        _2001 = _1985.x * cbModelParam._m0[1u].z;
        _2003 = _1985.y * cbModelParam._m0[1u].z;
        _2005 = _1985.z * cbModelParam._m0[1u].z;
    }
    float _2018 = (((_1008 * _957) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2020 = (((_1008 * _959) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2022 = (((_1008 * _960) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2025 = fma(_2022, cbSceneParam._m0[89u].z, fma(_2020, cbSceneParam._m0[89u].y, _2018 * cbSceneParam._m0[89u].x));
    float _2028 = fma(_2022, cbSceneParam._m0[90u].z, fma(_2020, cbSceneParam._m0[90u].y, _2018 * cbSceneParam._m0[90u].x));
    float _2031 = fma(_2022, cbSceneParam._m0[91u].z, fma(_2020, cbSceneParam._m0[91u].y, _2018 * cbSceneParam._m0[91u].x));
    vec4 _2039 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_895, _896));
    float _2041 = _2039.w;
    float _2053 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2041);
    float _2054 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2041);
    float _2055 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2041);
    uvec4 _2059 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2061 = _2059.x * 14u;
    uint _2062 = _2061 + 13u;
    float _2069 = _973 + (-1.0);
    float _2074 = (cbLight._m0[_2062].x * _2069) + 1.0;
    float _2075 = (cbLight._m0[_2062].y * _2069) + 1.0;
    float _2076 = (cbLight._m0[_2062].z * _2069) + 1.0;
    float _2077 = (cbLight._m0[_2062].w * _2069) + 1.0;
    uint _2078 = _2061 + 5u;
    float _2084 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
    uint _2088 = _2061 + 4u;
    float _2097 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2101 = _2061 | 1u;
    float _2112 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_796, _797, _798));
    float _2115 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_796, _797, _798));
    float _4367 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _4378 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2120 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2122 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2129 = ((cbLight._m0[_2078].x * _2084) * _2122) + (((cbLight._m0[_2088].x * _2053) * _2097) * _2120);
    float _2130 = ((_2084 * cbLight._m0[_2078].y) * _2122) + (((cbLight._m0[_2088].y * _2054) * _2097) * _2120);
    float _2131 = ((_2084 * cbLight._m0[_2078].z) * _2122) + (((cbLight._m0[_2088].z * _2055) * _2097) * _2120);
    uvec4 _2135 = floatBitsToUint(cbLight._m0[_2061 + 12u]);
    bool _2137 = _2135.x == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2137)
    {
        _2148 = _2129;
        _2150 = _2130;
        _2152 = _2131;
    }
    else
    {
        uint _2156 = _2061 + 6u;
        float _2172 = (dot(vec3(cbLight._m0[_2061 + 2u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2173 = _2172 * _2172;
        float _4389 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2174 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2175 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2148 = (((cbLight._m0[_2156].x * 0.3183098733425140380859375) * _2174) * _2175) + _2129;
        _2150 = (((cbLight._m0[_2156].y * 0.3183098733425140380859375) * _2174) * _2175) + _2130;
        _2152 = (((cbLight._m0[_2156].z * 0.3183098733425140380859375) * _2174) * _2175) + _2131;
    }
    bool _2155 = _2135.y == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2155)
    {
        _2193 = _2148;
        _2195 = _2150;
        _2197 = _2152;
    }
    else
    {
        uint _2366 = _2061 + 7u;
        float _2382 = (dot(vec3(cbLight._m0[_2061 + 3u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2383 = _2382 * _2382;
        float _4405 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2384 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2385 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2193 = (((cbLight._m0[_2366].x * 0.3183098733425140380859375) * _2384) * _2385) + _2148;
        _2195 = (((cbLight._m0[_2366].y * 0.3183098733425140380859375) * _2384) * _2385) + _2150;
        _2197 = (((cbLight._m0[_2366].z * 0.3183098733425140380859375) * _2384) * _2385) + _2152;
    }
    uint _2200 = _2061 + 8u;
    float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _799) * 0.949999988079071044921875);
    float _2214 = _2213 * _2213;
    float _2215 = cbLight._m0[_2061].x + _875;
    float _2216 = cbLight._m0[_2061].y + _876;
    float _2217 = cbLight._m0[_2061].z + _877;
    float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
    float _2222 = _2221 * _2215;
    float _2223 = _2221 * _2216;
    float _2224 = _2221 * _2217;
    float _2225 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2061].xyz));
    float _4421 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2229 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2230 = dot(vec3(_796, _797, _798), vec3(_2222, _2223, _2224));
    float _4443 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2222, _2223, _2224));
    float _4454 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2214 * _2214;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2250 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
    float _2251 = 0.959999978542327880859375 - _954;
    float _2253 = 0.959999978542327880859375 - _955;
    float _2254 = 0.959999978542327880859375 - _956;
    float _2261 = 1.0 - _2214;
    float _2272 = (0.5 / (((_2229 * ((_2228 * _2261) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2261) + _2214) * _2228))) * _2228;
    float _4465 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    uint _2288 = _2061 + 9u;
    float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _799) * 0.949999988079071044921875);
    float _2300 = _2299 * _2299;
    float _2301 = cbLight._m0[_2101].x + _875;
    float _2302 = cbLight._m0[_2101].y + _876;
    float _2303 = cbLight._m0[_2101].z + _877;
    float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
    float _2308 = _2307 * _2301;
    float _2309 = _2307 * _2302;
    float _2310 = _2307 * _2303;
    float _2311 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2101].xyz));
    float _4476 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2315 = dot(vec3(_796, _797, _798), vec3(_2308, _2309, _2310));
    float _4487 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2308, _2309, _2310));
    float _4498 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2300 * _2300;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0);
    float _2341 = 1.0 - _2300;
    float _2351 = (0.5 / (((_2229 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2341) + _2300) * _2314))) * _2314;
    float _4509 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2353 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    float _2363 = (((((_2334 * _2251) + _957) * cbLight._m0[_2288].x) * _2353) * _2084) + ((((cbLight._m0[_2200].x * _2053) * ((_2250 * _2251) + _957)) * _2274) * _2097);
    float _2364 = (((((_2334 * _2253) + _959) * cbLight._m0[_2288].y) * _2353) * _2084) + ((((cbLight._m0[_2200].y * _2054) * ((_2250 * _2253) + _959)) * _2274) * _2097);
    float _2365 = (((((_2334 * _2254) + _960) * cbLight._m0[_2288].z) * _2353) * _2084) + ((((cbLight._m0[_2200].z * _2055) * ((_2250 * _2254) + _960)) * _2274) * _2097);
    float _2427;
    float _2429;
    float _2431;
    if (_2137)
    {
        _2427 = _2363;
        _2429 = _2364;
        _2431 = _2365;
    }
    else
    {
        uint _2433 = _2061 + 2u;
        uint _2437 = _2061 + 10u;
        float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _799) * 0.949999988079071044921875);
        float _2452 = _2451 * _2451;
        float _2453 = cbLight._m0[_2433].x + _875;
        float _2454 = cbLight._m0[_2433].y + _876;
        float _2455 = cbLight._m0[_2433].z + _877;
        float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
        float _2460 = _2459 * _2453;
        float _2461 = _2459 * _2454;
        float _2462 = _2459 * _2455;
        float _2463 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2433].xyz));
        float _4520 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2467 = dot(vec3(_796, _797, _798), vec3(_2460, _2461, _2462));
        float _4531 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2471 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2460, _2461, _2462));
        float _4542 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2475 = _2452 * _2452;
        float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
        float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0);
        float _2493 = 1.0 - _2452;
        float _2503 = (0.5 / (((_2229 * ((_2466 * _2493) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2493) + _2452) * _2466))) * _2466;
        float _4553 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2427 = (((((_2486 * _2251) + _957) * cbLight._m0[_2437].x) * _2505) * _2506) + _2363;
        _2429 = (((((_2486 * _2253) + _959) * cbLight._m0[_2437].y) * _2505) * _2506) + _2364;
        _2431 = (((((_2486 * _2254) + _960) * cbLight._m0[_2437].z) * _2505) * _2506) + _2365;
    }
    float _2541;
    float _2543;
    float _2545;
    if (_2155)
    {
        _2541 = _2427;
        _2543 = _2429;
        _2545 = _2431;
    }
    else
    {
        uint _2552 = _2061 + 3u;
        uint _2556 = _2061 + 11u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _799) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _875;
        float _2573 = cbLight._m0[_2552].y + _876;
        float _2574 = cbLight._m0[_2552].z + _877;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2552].xyz));
        float _4569 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2586 = dot(vec3(_796, _797, _798), vec3(_2579, _2580, _2581));
        float _4580 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4591 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
        float _2612 = 1.0 - _2571;
        float _2622 = (0.5 / (((_2229 * ((_2585 * _2612) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2612) + _2571) * _2585))) * _2585;
        float _4602 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2624 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2625 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2541 = (((((_2605 * _2251) + _957) * cbLight._m0[_2556].x) * _2624) * _2625) + _2427;
        _2543 = (((((_2605 * _2253) + _959) * cbLight._m0[_2556].y) * _2624) * _2625) + _2429;
        _2545 = (((((_2605 * _2254) + _960) * cbLight._m0[_2556].z) * _2624) * _2625) + _2431;
    }
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    if (_2059.y == 0u)
    {
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2700;
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2700;
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2700;
        uvec4 _2715 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2716 = _2715.x;
        uint _2727 = uint((float(_2715.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _2716))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _2716)));
        float _2737 = (log2(_2703 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2738 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        uint _2741 = uint(isnan(14.0) ? _2738 : (isnan(_2738) ? 14.0 : min(_2738, 14.0)));
        uvec4 _2746 = texelFetch(g_lightClusterGridBuffer, int(((_2741 << 2u) + (_2727 << 6u)) >> 2u));
        uint _2747 = _2746.x;
        uint _2748 = _2715.z;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((((1u << ((_2748 >> 4u) & 15u)) + 4294967295u) & _2747) == 0u) || ((_2748 & 240u) == 0u))
        {
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
        }
        else
        {
            float _2849;
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            uint _3007 = 0u;
            uint _3016;
            bool _3017;
            for (;;)
            {
                _3016 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                _3017 = _3016 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3017)
                {
                    frontier_phi_66_pred = _3001;
                    frontier_phi_66_pred_1 = _3006;
                    frontier_phi_66_pred_2 = _3005;
                    frontier_phi_66_pred_3 = _3004;
                    frontier_phi_66_pred_4 = _3003;
                    frontier_phi_66_pred_5 = _3002;
                }
                else
                {
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    uint _3152;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3016;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    for (;;)
                    {
                        uint _3156 = uint(findLSB(_3152)) + (_3007 << 5u);
                        uint _3153 = (_3152 + 4294967295u) & _3152;
                        uint _3158 = _3156 * 48u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3178 = (_3156 * 48u) + 4u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3197 = (_3156 * 48u) + 8u;
                        vec3 _3208 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x));
                        float _3212 = _3172.x - _2701;
                        float _3213 = _3172.y - _2702;
                        float _3214 = _3172.z - _2703;
                        float _3215 = dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214));
                        float _3218 = inversesqrt(_3215);
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3222 = dot(vec3(_914, _917, _920), vec3(_3219, _3220, _3221));
                        float _3227 = 1.0 - (_3215 * _3172.w);
                        float _4628 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3229 = sqrt(_3215) * _3191.w;
                        float _3232 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3222) + _3233;
                        float _3239 = _3229 * _3229;
                        float _3243 = ((isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * _3228) / ((_3239 * 0.699999988079071044921875) + 1.0);
                        float _3247 = (-0.0) - _2701;
                        float _3248 = (-0.0) - _2702;
                        float _3249 = (-0.0) - _2703;
                        float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                        float _3254 = _3253 * _3247;
                        float _3255 = _3253 * _3248;
                        float _3256 = _3253 * _3249;
                        float _3264 = exp2(log2(1.0 / ((_3239 * 3.5) + 5.0)) * 0.25);
                        float _3265 = 1.0 - _989;
                        float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                        float _3273 = _3272 * _3272;
                        float _3274 = _3273 * _3273;
                        float _3275 = _3254 + _3219;
                        float _3276 = _3255 + _3220;
                        float _3277 = _3256 + _3221;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3285 = dot(vec3(_914, _917, _920), vec3(_3254, _3255, _3256));
                        float _4644 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3289 = dot(vec3(_914, _917, _920), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                        float _4655 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                        float _3297 = _3232 * _3273;
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3222) + _3298;
                        float _4666 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3303 = 1.0 - _3273;
                        float _3313 = (0.5 / (((_3302 * ((_3288 * _3303) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3273) * _3288))) * _3302;
                        float _4677 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3324 = (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3296 * _3296) * ((_3239 * 2.1991131305694580078125) + 3.141590118408203125))) * _3228;
                        _3076 = (_3243 * _3191.x) + _3149;
                        _3077 = (_3243 * _3191.y) + _3150;
                        _3078 = (_3243 * _3191.z) + _3151;
                        _3073 = (_3324 * _3208.x) + _3146;
                        _3074 = (_3324 * _3208.y) + _3147;
                        _3075 = (_3324 * _3208.z) + _3148;
                        if (_3153 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3153;
                        }
                    }
                    frontier_phi_66_pred = _3073;
                    frontier_phi_66_pred_1 = _3078;
                    frontier_phi_66_pred_2 = _3077;
                    frontier_phi_66_pred_3 = _3076;
                    frontier_phi_66_pred_4 = _3075;
                    frontier_phi_66_pred_5 = _3074;
                }
                _2849 = frontier_phi_66_pred;
                _2859 = frontier_phi_66_pred_1;
                _2857 = frontier_phi_66_pred_2;
                _2855 = frontier_phi_66_pred_3;
                _2853 = frontier_phi_66_pred_4;
                _2851 = frontier_phi_66_pred_5;
                uint _3008 = _3007 + 1u;
                if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3001 = _2849;
                    _3002 = _2851;
                    _3003 = _2853;
                    _3004 = _2855;
                    _3005 = _2857;
                    _3006 = _2859;
                    _3007 = _3008;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
        }
        uvec4 _2862 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2863 = _2862.z;
        uint _2865 = (_2863 >> 8u) & 15u;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((4294967295u << _2865) & _2747) == 0u)
        {
            _2969 = _2848;
            _2971 = _2850;
            _2973 = _2852;
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
        }
        else
        {
            float _2994 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
            float _2995 = _2994 * _2701;
            float _2996 = _2994 * _2702;
            float _2997 = _2994 * _2703;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2865 < ((_2863 >> 12u) & 15u))
            {
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _3129 = _2848;
                float _3130 = _2850;
                float _3131 = _2852;
                float _3132 = _2854;
                float _3133 = _2856;
                float _3134 = _2858;
                uint _3135 = _2865;
                uint _3144;
                bool _3145;
                for (;;)
                {
                    _3144 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                    _3145 = _3144 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3145)
                    {
                        frontier_phi_77_pred = _3134;
                        frontier_phi_77_pred_1 = _3133;
                        frontier_phi_77_pred_2 = _3132;
                        frontier_phi_77_pred_3 = _3131;
                        frontier_phi_77_pred_4 = _3130;
                        frontier_phi_77_pred_5 = _3129;
                    }
                    else
                    {
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        uint _3357 = _3144;
                        uint _3358;
                        vec4 _3383;
                        float _3384;
                        vec4 _3399;
                        vec3 _3411;
                        vec4 _3426;
                        vec4 _3442;
                        float _3488;
                        bool _3489;
                        for (;;)
                        {
                            uint _3368 = ((_3135 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3357));
                            _3358 = (_3357 + 4294967295u) & _3357;
                            uint _3370 = _3368 * 40u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3384 = _3383.w;
                            uint _3386 = (_3368 * 40u) + 4u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3368 * 40u) + 8u;
                            _3411 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x));
                            uint _3413 = (_3368 * 40u) + 16u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3429 = (_3368 * 40u) + 20u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3444 = (_3368 * 40u) + 24u;
                            vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3463 = (_3368 * 40u) + 28u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3488 = fma(_2703, _3476.z, fma(_2702, _3476.y, _3476.x * _2701)) + _3476.w;
                            _3489 = !((fma(_2703, _3457.z, fma(_2702, _3457.y, _3457.x * _2701)) + _3457.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3489)
                            {
                                float _3516 = _3383.x - _2701;
                                float _3517 = _3383.y - _2702;
                                float _3518 = _3383.z - _2703;
                                float _3519 = dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518));
                                float _3522 = inversesqrt(_3519);
                                float _3523 = _3522 * _3516;
                                float _3524 = _3522 * _3517;
                                float _3525 = _3522 * _3518;
                                float _3529 = 1.0 - (_3519 / (_3384 * _3384));
                                float _4688 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3534 = sqrt(_3519) * _3399.w;
                                float _3536 = 1.39999997615814208984375 / (_3534 + 1.39999997615814208984375);
                                float _3537 = _3536 * _3536;
                                float _3540 = ((1.0 - _3537) * dot(vec3(_3523, _3524, _3525), vec3(_914, _917, _920))) + _3537;
                                float _3543 = _3534 * _3534;
                                float _3547 = (fma(_2703, _3426.z, fma(_2702, _3426.y, _3426.x * _2701)) + _3426.w) / _3488;
                                float _3548 = (fma(_2703, _3442.z, fma(_2702, _3442.y, _3442.x * _2701)) + _3442.w) / _3488;
                                float _3552 = 1.0 - dot(vec2(_3547, _3548), vec2(_3547, _3548));
                                float _4704 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3554 = _3553 * (((isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0))) * _3530) / ((_3543 * 0.699999988079071044921875) + 1.0));
                                float _3566 = exp2(log2(1.0 / ((_3543 * 3.5) + 5.0)) * 0.25);
                                float _3567 = 1.0 - _989;
                                float _3574 = sqrt(1.0 - ((1.0 - (_3567 * _3567)) * (1.0 - (_3566 * _3566))));
                                float _3575 = _3574 * _3574;
                                float _3576 = _3575 * _3575;
                                float _3577 = _3523 - _2995;
                                float _3578 = _3524 - _2996;
                                float _3579 = _3525 - _2997;
                                float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                                float _3587 = dot(vec3(_914, _917, _920), vec3((-0.0) - _2995, (-0.0) - _2996, (-0.0) - _2997));
                                float _4715 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3591 = dot(vec3(_914, _917, _920), vec3(_3583 * _3577, _3583 * _3578, _3583 * _3579));
                                float _4726 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3598 = ((_3594 * _3594) * (_3576 + (-1.0))) + 1.0;
                                float _3599 = _3536 * _3575;
                                float _3600 = _3599 * _3599;
                                float _3606 = ((1.0 - _3600) * dot(vec3(_914, _917, _920), vec3(_3523, _3524, _3525))) + _3600;
                                float _4737 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3608 = 1.0 - _3575;
                                float _3618 = (0.5 / (((_3607 * ((_3590 * _3608) + _3575)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3575) * _3590))) * _3607;
                                float _4748 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3628 = (_3553 * _3530) * (((_3576 * 3.1415927410125732421875) * (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) / ((_3598 * _3598) * ((_3543 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3554 * _3399.y;
                                frontier_phi_83_pred_1 = _3554 * _3399.x;
                                frontier_phi_83_pred_2 = _3628 * _3411.z;
                                frontier_phi_83_pred_3 = _3628 * _3411.y;
                                frontier_phi_83_pred_4 = _3628 * _3411.x;
                                frontier_phi_83_pred_5 = _3554 * _3399.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3636 = frontier_phi_83_pred;
                            _3635 = frontier_phi_83_pred_1;
                            _3634 = frontier_phi_83_pred_2;
                            _3633 = frontier_phi_83_pred_3;
                            _3632 = frontier_phi_83_pred_4;
                            _3637 = frontier_phi_83_pred_5;
                            _3341 = _3635 + _3354;
                            _3342 = _3636 + _3355;
                            _3343 = _3637 + _3356;
                            _3338 = _3632 + _3351;
                            _3339 = _3633 + _3352;
                            _3340 = _3634 + _3353;
                            if (_3358 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3358;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3343;
                        frontier_phi_77_pred_1 = _3342;
                        frontier_phi_77_pred_2 = _3341;
                        frontier_phi_77_pred_3 = _3340;
                        frontier_phi_77_pred_4 = _3339;
                        frontier_phi_77_pred_5 = _3338;
                    }
                    _2980 = frontier_phi_77_pred;
                    _2978 = frontier_phi_77_pred_1;
                    _2976 = frontier_phi_77_pred_2;
                    _2974 = frontier_phi_77_pred_3;
                    _2972 = frontier_phi_77_pred_4;
                    _2970 = frontier_phi_77_pred_5;
                    uint _3136 = _3135 + 1u;
                    if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3129 = _2970;
                        _3130 = _2972;
                        _3131 = _2974;
                        _3132 = _2976;
                        _3133 = _2978;
                        _3134 = _2980;
                        _3135 = _3136;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2974;
                frontier_phi_58_59_ladder_1 = _2980;
                frontier_phi_58_59_ladder_2 = _2978;
                frontier_phi_58_59_ladder_3 = _2976;
                frontier_phi_58_59_ladder_4 = _2972;
                frontier_phi_58_59_ladder_5 = _2970;
            }
            else
            {
                frontier_phi_58_59_ladder = _2852;
                frontier_phi_58_59_ladder_1 = _2858;
                frontier_phi_58_59_ladder_2 = _2856;
                frontier_phi_58_59_ladder_3 = _2854;
                frontier_phi_58_59_ladder_4 = _2850;
                frontier_phi_58_59_ladder_5 = _2848;
            }
            _2969 = frontier_phi_58_59_ladder_5;
            _2971 = frontier_phi_58_59_ladder_4;
            _2973 = frontier_phi_58_59_ladder;
            _2975 = frontier_phi_58_59_ladder_3;
            _2977 = frontier_phi_58_59_ladder_2;
            _2979 = frontier_phi_58_59_ladder_1;
        }
        float _2984 = isnan(1.0) ? _973 : (isnan(_973) ? 1.0 : min(_973, 1.0));
        _2760 = (_2984 * _2975) + _2193;
        _2762 = (_2984 * _2977) + _2195;
        _2764 = (_2984 * _2979) + _2197;
        _2766 = ((_2969 * _957) * _2984) + _2541;
        _2768 = ((_2971 * _959) * _2984) + _2543;
        _2770 = ((_2973 * _960) * _2984) + _2545;
    }
    else
    {
        _2760 = _2193;
        _2762 = _2195;
        _2764 = _2197;
        _2766 = _2541;
        _2768 = _2543;
        _2770 = _2545;
    }
    float _4764 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4775 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4786 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2787 = ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2760 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _973))) + ((_2766 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    float _2788 = ((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2762 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _973))) + ((_2768 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    float _2789 = ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2764 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _973))) + ((_2770 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    uint _2790 = _259 + 6u;
    float _2798 = _895 / cbSceneParam._m0[86u].x;
    float _2799 = _896 / cbSceneParam._m0[86u].y;
    vec4 _2813 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2815 = _2813.x;
    float _2816 = _2813.y;
    float _2817 = _2813.z;
    float _2818 = _2813.w;
    float _2911;
    float _2913;
    float _2915;
    float _2917;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _2873 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _2874 = _2873 / _818;
        float _2885 = _2874 * _868;
        float _2886 = _869 * _2874;
        float _2887 = (-0.0) - _2886;
        float _2889 = _2874 * _870;
        float _2891 = (cbSceneParam._m0[77u].w * _2887) / _2873;
        float _2892 = _2891 + cbSceneParam._m0[79u].w;
        float _2893 = cbSceneParam._m0[79u].w - _2886;
        float _2899 = sqrt(((_2885 * _2885) + (_2886 * _2886)) + (_2889 * _2889));
        float _2902 = (1.0 - (cbSceneParam._m0[77u].w / _2873)) * _2899;
        float _2907 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2909 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3086;
        if (abs((_2887 - _2891) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3086 = ((((_2892 > 0.0) ? exp2(_2907 * _2892) : (2.0 - exp2(_2909 * _2892))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2902;
        }
        else
        {
            float _3030 = 1.0 / cbSceneParam._m0[80u].x;
            float _3031 = isnan(_2893) ? _2892 : (isnan(_2892) ? _2893 : max(_2892, _2893));
            float _3032 = isnan(_2893) ? _2892 : (isnan(_2892) ? _2893 : min(_2892, _2893));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            _3086 = ((abs(_2899 / _2887) * cbSceneParam._m0[80u].y) * ((((_3041 - _3042) * 2.0) - ((exp2(_2907 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0)))) - exp2(_2907 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))))) * _3030)) - ((exp2(_2909 * _3041) - exp2(_2909 * _3042)) * _3030))) + (_2902 * cbSceneParam._m0[80u].z);
        }
        vec4 _3088 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, 1.0), 0.0);
        float _3097 = exp2((_3086 * (-1.44269502162933349609375)) * (1.0 - _3088.w));
        float _3098 = log2(_3097);
        float _3114 = log2(_2818);
        _2911 = (exp2(_3114 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].x)) * _3088.x) / cbSceneParam._m0[78u].x)) + _2815;
        _2913 = (exp2(_3114 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].y)) * _3088.y) / cbSceneParam._m0[78u].y)) + _2816;
        _2915 = (exp2(_3114 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3098 * cbSceneParam._m0[78u].z)) * _3088.z) / cbSceneParam._m0[78u].z)) + _2817;
        _2917 = _3097 * _2818;
    }
    else
    {
        _2911 = _2815;
        _2913 = _2816;
        _2915 = _2817;
        _2917 = _2818;
    }
    bool _3124;
    vec4 _2927;
    vec4 _2949;
    float _2951;
    float _2955;
    float _2956;
    float _2957;
    float _2958;
    bool _2968;
    for (;;)
    {
        _2927 = cbMatDynParam._m0[0u];
        float _2929 = roundEven(_2927.y);
        bool _2930 = _2929 == 3.0;
        float _2931 = log2(_2917);
        float _2938 = exp2(_2931 * cbSceneParam._m0[78u].x) * _2787;
        float _2939 = exp2(_2931 * cbSceneParam._m0[78u].y) * _2788;
        float _2940 = exp2(_2931 * cbSceneParam._m0[78u].z) * _2789;
        float _2947 = _884 + (-0.5);
        _2949 = cbMtdParam._m0[1u];
        _2951 = _2949.y * _2947;
        float _2954 = (_2929 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2955 = _2954 * (_2930 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2911)));
        _2956 = _2954 * (_2930 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2913)));
        _2957 = _2954 * (_2930 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2915)));
        _2958 = _2947 * 0.999000012874603271484375;
        _2968 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2968)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _2958) < 0.5)
            {
                _3124 = true;
                break;
            }
        }
        uint _3065 = _933 + uint(_2927.w);
        if ((cbInstanceData._m0[_3065].w < 1.0) && ((cbInstanceData._m0[_3065].w + _2958) < 0.5))
        {
            _3124 = true;
            break;
        }
        if ((_2951 + 1.0) < _2949.x)
        {
            _3124 = true;
            break;
        }
        _3124 = false;
        break;
    }
    float _3329;
    if (_3124)
    {
        discard_state = true;
        _3329 = 0.0;
    }
    else
    {
        _3329 = cbInstanceData._m0[_2790].w;
    }
    SV_Target.x = _2955;
    SV_Target.y = _2956;
    SV_Target.z = _2957;
    SV_Target.w = _3329;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2790].w;
    discard_exit();
}


