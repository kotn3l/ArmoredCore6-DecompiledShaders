#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1527;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3877 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3888 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3899 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3910 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _464 = (_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _465 = (_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _466 = (_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3921 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    float _543 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _537;
    float _546 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _538;
    float _549 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _539;
    float _556 = ((_537 - _543) * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) + _543;
    float _557 = ((_538 - _546) * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) + _546;
    float _558 = ((_539 - _549) * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) + _549;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _617 = _615.x;
    float _618 = _615.y;
    float _619 = _615.z;
    float _626 = ((_598.x - _617) * _457) + _617;
    float _627 = ((_598.y - _618) * _457) + _618;
    float _628 = ((_598.z - _619) * _457) + _619;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _653 = ((_640.z - _628) * _530) + _628;
    float _656 = ((((_640.x - _626) * _530) + _626) * 2.0) + (-1.0);
    float _657 = ((((_640.y - _627) * _530) + _627) * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3932 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _663 = sqrt(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _704 = _702.x;
    float _705 = 1.0 - _704;
    float _714 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _717 = ((isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : min(_714, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _726 = (_717 - ((((((_704 - _705) * cbMtdParam._m0[24u].z) + _705) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _717))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3953 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _727 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _734 = (_727 * (cbMtdParam._m0[17u].x - _556)) + _556;
    float _735 = (_727 * (cbMtdParam._m0[17u].y - _557)) + _557;
    float _736 = (_727 * (cbMtdParam._m0[17u].z - _558)) + _558;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _750 = _748.x;
    float _751 = 1.0 - _750;
    float _776 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_750 - _751) * cbMtdParam._m0[24u].w) + _751) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3964 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _777 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _785 = ((((cbMtdParam._m0[10u].x - _734) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _777) + _734;
    float _786 = ((((cbMtdParam._m0[10u].y - _735) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _777) + _735;
    float _787 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _736)) * _777) + _736;
    vec4 _813 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _815 = _813.x;
    float _833 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _815) * _457) + _815;
    float _850 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _833) * _530) + _833;
    float _854 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _850) * cbMtdParam._m0[19u].z) + _850;
    float _856 = _854 - (_854 * _727);
    float _858 = _856 - (_856 * _777);
    float _863 = (((_575.z - _653) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _653;
    float _867 = ((_677.z - _863) * cbMtdParam._m0[19u].w) + _863;
    vec4 _881 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _888 = (_881.x * 2.0) + (-1.0);
    float _889 = (_881.y * 2.0) + (-1.0);
    float _890 = dot(vec2(_888, _889), vec2(_888, _889));
    float _3975 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _898 = (_727 * (_881.z - _867)) + _867;
    float _901 = ((cbMtdParam._m0[23u].x - _898) * _777) + _898;
    vec4 _922 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _928 = (_922.x * 2.0) + (-1.0);
    float _929 = (_922.y * 2.0) + (-1.0);
    float _930 = dot(vec2(_928, _929), vec2(_928, _929));
    float _3986 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _944 = (_656 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_575.x * 2.0) + (-1.0)))) + (((_677.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _945 = (_657 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_575.y * 2.0) + (-1.0)))) + (((_677.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _957 = (((_888 - _944) + (cbMtdParam._m0[21u].x * _944)) * _727) + _944;
    float _958 = (((_889 - _945) + (cbMtdParam._m0[21u].x * _945)) * _727) + _945;
    float _959 = (_727 * (sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) - _663)) + _663;
    float _970 = (((_928 - _957) + (_957 * cbMtdParam._m0[22u].z)) * _777) + _957;
    float _971 = (((_929 - _958) + (_958 * cbMtdParam._m0[22u].z)) * _777) + _958;
    float _972 = ((sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) - _959) * _777) + _959;
    float _974 = cbMtdParam._m0[22u].x + _677.w;
    float _977 = fma(_972, _259 * NORMAL.x, fma(_971, _266 * TANGENT.x, (_252 * _244) * _970));
    float _980 = fma(_972, _259 * NORMAL.y, fma(_971, _266 * TANGENT.y, (_252 * _245) * _970));
    float _983 = fma(_972, _259 * NORMAL.z, fma(_971, _266 * TANGENT.z, (_252 * _246) * _970));
    float _987 = inversesqrt(dot(vec3(_977, _980, _983), vec3(_977, _980, _983)));
    float _988 = _987 * _977;
    float _989 = _987 * _980;
    float _990 = _987 * _983;
    float _3997 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _991 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4019 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4030 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4041 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4052 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _996 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _1010 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1060 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1050);
    float _1061 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1050);
    float _1062 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1050);
    float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
    float _1067 = _1060 * _1066;
    float _1068 = _1061 * _1066;
    float _1069 = _1062 * _1066;
    float _1075 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1076 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1094 = fma(_990, cbSceneParam._m0[5u].z, fma(_989, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _988));
    float _1097 = fma(_990, cbSceneParam._m0[6u].z, fma(_989, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _988));
    float _1100 = fma(_990, cbSceneParam._m0[7u].z, fma(_989, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _988));
    uint _1114 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1120 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_1114].x;
    float _1121 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_1114].y;
    float _1122 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_1114].z;
    float _4063 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1123 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1124 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _1126 = 1.0 - _996;
    float _1127 = _1123 * _1126;
    float _1128 = _1124 * _1126;
    float _1129 = _1125 * _1126;
    float _1134 = (_1123 + (-0.039999999105930328369140625)) * _996;
    float _1135 = (_1124 + (-0.039999999105930328369140625)) * _996;
    float _1136 = (_1125 + (-0.039999999105930328369140625)) * _996;
    float _1137 = _1134 + 0.039999999105930328369140625;
    float _1139 = _1135 + 0.039999999105930328369140625;
    float _1140 = _1136 + 0.039999999105930328369140625;
    vec4 _1149 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1075, cbSceneParam._m0[86u].y * _1076));
    float _1153 = ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * TEXCOORD_5.w) * _1149.x;
    float _1154 = dot(vec3(_988, _989, _990), vec3(_1067, _1068, _1069));
    float _1157 = _1154 * 2.0;
    float _1161 = (_1157 * _988) - _1067;
    float _1162 = (_1157 * _989) - _1068;
    float _1163 = (_1157 * _990) - _1069;
    float _1167 = abs(dot(vec3(_1067, _1068, _1069), vec3(_988, _989, _990)));
    float _4096 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1169 = sqrt(_991);
    float _1182 = exp2((_1169 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1169 * 3.0));
    float _1188 = (1.0 - _1182) * ((_1169 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1189 = _1182 * _1169;
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1225 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1526;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1251 = fma(_1225, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1217));
        float _1255 = fma(_1225, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1217));
        float _1259 = fma(_1225, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1217));
        float _1284 = _1217 + _988;
        float _1285 = _1221 + _989;
        float _1286 = _1225 + _990;
        float _1296 = fma(_1286, cbModelParam._m0[26u].z, fma(_1285, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1284)) - _1251;
        float _1297 = fma(_1286, cbModelParam._m0[27u].z, fma(_1285, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1284)) - _1255;
        float _1298 = fma(_1286, cbModelParam._m0[28u].z, fma(_1285, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1284)) - _1259;
        float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
        float _1315 = ((_1302 * _1296) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1251 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1302 * _1297) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1255 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1302 * _1298) / cbModelParam._m0[34u].z) + ((((((_1259 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        float _1354 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1320.x + (-0.5));
        float _1356 = _1354 * (_1320.y + (-0.5));
        float _1357 = _1354 * (_1320.z + (-0.5));
        float _1364 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1327.x + (-0.5));
        float _1366 = _1364 * (_1327.y + (-0.5));
        float _1367 = _1364 * (_1327.z + (-0.5));
        float _1374 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1334.x + (-0.5));
        float _1376 = _1374 * (_1334.y + (-0.5));
        float _1377 = _1374 * (_1334.z + (-0.5));
        float _1384 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1341.x + (-0.5));
        float _1386 = _1384 * (_1341.y + (-0.5));
        float _1387 = _1384 * (_1341.z + (-0.5));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = _1355 * 0.5;
        float _1392 = _1365 * 0.5;
        float _1393 = _1375 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1408 = (dot(vec3(_988, _989, _990), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1418 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4144 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1420 + 1.0))) + _1425) * _1388;
        float _1435 = _1356 * 0.5;
        float _1436 = _1366 * 0.5;
        float _1437 = _1376 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_988, _989, _990), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4177 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1462 + 1.0))) + _1467) * _1389;
        float _1477 = _1357 * 0.5;
        float _1478 = _1367 * 0.5;
        float _1479 = _1377 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_988, _989, _990), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4210 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1504 + 1.0))) + _1509) * _1390;
        _1526 = _1357;
        _1528 = _1356;
        _1529 = _1355;
        _1530 = _1367;
        _1531 = _1366;
        _1532 = _1365;
        _1533 = _1377;
        _1534 = _1376;
        _1535 = _1375;
        _1536 = _1390;
        _1537 = _1389;
        _1538 = _1388;
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
    }
    else
    {
        _1526 = _1527;
        _1528 = _1527;
        _1529 = _1527;
        _1530 = _1527;
        _1531 = _1527;
        _1532 = _1527;
        _1533 = _1527;
        _1534 = _1527;
        _1535 = _1527;
        _1536 = _1527;
        _1537 = _1527;
        _1538 = _1527;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1565 = fma(_1225, cbModelParam._m0[30u].z, fma(_1221, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1217));
        float _1569 = fma(_1225, cbModelParam._m0[31u].z, fma(_1221, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1217));
        float _1573 = fma(_1225, cbModelParam._m0[32u].z, fma(_1221, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1217));
        float _1596 = _1217 + _988;
        float _1597 = _1221 + _989;
        float _1598 = _1225 + _990;
        float _1608 = fma(_1598, cbModelParam._m0[30u].z, fma(_1597, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1596)) - _1565;
        float _1609 = fma(_1598, cbModelParam._m0[31u].z, fma(_1597, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1596)) - _1569;
        float _1610 = fma(_1598, cbModelParam._m0[32u].z, fma(_1597, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1596)) - _1573;
        float _1614 = inversesqrt(dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610)));
        float _1627 = ((_1614 * _1608) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1565 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1628 = ((_1614 * _1609) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1569 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1629 = ((_1614 * _1610) / cbModelParam._m0[35u].z) + ((((((_1573 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        float _1664 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1631.x + (-0.5));
        float _1666 = _1664 * (_1631.y + (-0.5));
        float _1667 = _1664 * (_1631.z + (-0.5));
        float _1674 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1638.x + (-0.5));
        float _1676 = _1674 * (_1638.y + (-0.5));
        float _1677 = _1674 * (_1638.z + (-0.5));
        float _1684 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1645.x + (-0.5));
        float _1686 = _1684 * (_1645.y + (-0.5));
        float _1687 = _1684 * (_1645.z + (-0.5));
        float _1694 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1652.x + (-0.5));
        float _1696 = _1694 * (_1652.y + (-0.5));
        float _1697 = _1694 * (_1652.z + (-0.5));
        float _1698 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1699 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = _1665 * 0.5;
        float _1702 = _1675 * 0.5;
        float _1703 = _1685 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_988, _989, _990), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1698 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4273 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1728 + 1.0))) + _1733) * _1698;
        float _1743 = _1666 * 0.5;
        float _1744 = _1676 * 0.5;
        float _1745 = _1686 * 0.5;
        float _1746 = dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745));
        float _1751 = (_1746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1746);
        float _1759 = (dot(vec3(_988, _989, _990), vec3(_1751 * _1743, _1751 * _1744, _1751 * _1745)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1768 = sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745)) / (_1699 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1770 = _1769 * 2.0;
        float _1774 = (1.0 - _1769) / (_1769 + 1.0);
        float _4306 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1784 = ((((1.0 - _1775) * (_1770 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1770 + 1.0))) + _1775) * _1699;
        float _1785 = _1667 * 0.5;
        float _1786 = _1677 * 0.5;
        float _1787 = _1687 * 0.5;
        float _1788 = dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787));
        float _1793 = (_1788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1788);
        float _1801 = (dot(vec3(_988, _989, _990), vec3(_1793 * _1785, _1793 * _1786, _1793 * _1787)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1810 = sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1812 = _1811 * 2.0;
        float _1816 = (1.0 - _1811) / (_1811 + 1.0);
        float _4339 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1826 = ((((1.0 - _1817) * (_1812 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1812 + 1.0))) + _1817) * _1700;
        _1834 = _1667;
        _1835 = _1666;
        _1836 = _1665;
        _1837 = _1677;
        _1838 = _1676;
        _1839 = _1675;
        _1840 = _1687;
        _1841 = _1686;
        _1842 = _1685;
        _1843 = _1700;
        _1844 = _1699;
        _1845 = _1698;
        _1846 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
        _1847 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)));
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)));
    }
    else
    {
        _1834 = _1527;
        _1835 = _1527;
        _1836 = _1527;
        _1837 = _1527;
        _1838 = _1527;
        _1839 = _1527;
        _1840 = _1527;
        _1841 = _1527;
        _1842 = _1527;
        _1843 = _1527;
        _1844 = _1527;
        _1845 = _1527;
        _1846 = 0.0;
        _1847 = 0.0;
        _1848 = 0.0;
    }
    float _1858 = (cbModelParam._m0[1u].x * (_1846 - _1539)) + _1539;
    float _1859 = (cbModelParam._m0[1u].x * (_1847 - _1540)) + _1540;
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1541)) + _1541;
    float _1881 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1858 * cbSceneParam._m0[89u].x));
    float _1884 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1858 * cbSceneParam._m0[90u].x));
    float _1887 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1858));
    float _1902 = _1161 * 0.5;
    float _1903 = _1162 * 0.5;
    float _1904 = _1163 * 0.5;
    float _1905 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1908 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1835, _1838, _1841, _1844));
    float _1911 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1834, _1837, _1840, _1843));
    float _1945;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1918 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1526, _1530, _1533, _1536));
        float _1922 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1528, _1531, _1534, _1537));
        float _1926 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1529, _1532, _1535, _1538));
        float _1933 = dot(vec4(cbModelParam._m0[39u]), vec4(_1902, _1903, _1904, 1.0));
        _1945 = dot(vec3(isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1933) ? 0.0 : (isnan(0.0) ? _1933 : max(0.0, _1933))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1945 = 1.0;
    }
    float _1956;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1947 = dot(vec4(cbModelParam._m0[40u]), vec4(_1902, _1903, _1904, 1.0));
        _1956 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1947) ? 0.0 : (isnan(0.0) ? _1947 : max(0.0, _1947))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1956 = 1.0;
    }
    float _1960 = (_1956 * cbModelParam._m0[1u].x) + (_1945 * (1.0 - cbModelParam._m0[1u].x));
    float _1970 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _991);
    float _1971 = isnan(_1970) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1970 : min(cbModelParam._m0[25u].z, _1970));
    float _2052;
    float _2054;
    float _2056;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2019 = fma(_1225, cbModelParam._m0[13u].z, fma(_1221, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1217)) + cbModelParam._m0[13u].w;
        float _2023 = fma(_1225, cbModelParam._m0[14u].z, fma(_1221, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1217)) + cbModelParam._m0[14u].w;
        float _2027 = fma(_1225, cbModelParam._m0[15u].z, fma(_1221, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1217)) + cbModelParam._m0[15u].w;
        float _2030 = fma(_1163, cbModelParam._m0[13u].z, fma(_1162, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161));
        float _2033 = fma(_1163, cbModelParam._m0[14u].z, fma(_1162, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161));
        float _2036 = fma(_1163, cbModelParam._m0[15u].z, fma(_1162, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161));
        float _2064;
        if (_2030 > 0.0)
        {
            _2064 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2064 = frontier_phi_14_12_ladder;
        }
        float _2288;
        if (_2033 > 0.0)
        {
            _2288 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2288 = frontier_phi_23_19_ladder;
        }
        float _2545;
        if (_2036 > 0.0)
        {
            _2545 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2545 = frontier_phi_35_30_ladder;
        }
        float _2547 = isnan(_2288) ? _2064 : (isnan(_2064) ? _2288 : min(_2064, _2288));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _2030) + _2019;
        float _2553 = (_2548 * _2033) + _2023;
        float _2554 = (_2548 * _2036) + _2027;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2555;
        float _2559 = _2555 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 > _2559) || ((_2553 < _2557) || ((_2552 < _2557) || (_2552 > _2559))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2554, cbModelParam._m0[9u].z, fma(_2553, cbModelParam._m0[9u].y, _2552 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2554, cbModelParam._m0[10u].z, fma(_2553, cbModelParam._m0[10u].y, _2552 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2554, cbModelParam._m0[11u].z, fma(_2553, cbModelParam._m0[11u].y, _2552 * cbModelParam._m0[11u].x))), _1971);
            frontier_phi_13_35_ladder = _2682.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2682.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2682.x * cbModelParam._m0[1u].y;
        }
        _2052 = frontier_phi_13_35_ladder_2;
        _2054 = frontier_phi_13_35_ladder_1;
        _2056 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2040 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1161, _1162, _1163), _1971);
        _2052 = _2040.x * cbModelParam._m0[1u].y;
        _2054 = _2040.y * cbModelParam._m0[1u].y;
        _2056 = _2040.z * cbModelParam._m0[1u].y;
    }
    float _2060 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _991);
    float _2061 = isnan(_2060) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2060 : min(cbModelParam._m0[25u].w, _2060));
    float _2151;
    float _2153;
    float _2155;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2115 = fma(_1225, cbModelParam._m0[21u].z, fma(_1221, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1217)) + cbModelParam._m0[21u].w;
        float _2119 = fma(_1225, cbModelParam._m0[22u].z, fma(_1221, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1217)) + cbModelParam._m0[22u].w;
        float _2123 = fma(_1225, cbModelParam._m0[23u].z, fma(_1221, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1217)) + cbModelParam._m0[23u].w;
        float _2126 = fma(_1163, cbModelParam._m0[21u].z, fma(_1162, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161));
        float _2129 = fma(_1163, cbModelParam._m0[22u].z, fma(_1162, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161));
        float _2132 = fma(_1163, cbModelParam._m0[23u].z, fma(_1162, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161));
        float _2293;
        if (_2126 > 0.0)
        {
            _2293 = abs((1.0 - _2115) / _2126);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2115 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2293 = frontier_phi_25_21_ladder;
        }
        float _2572;
        if (_2129 > 0.0)
        {
            _2572 = abs((1.0 - _2119) / _2129);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2119 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2572 = frontier_phi_37_32_ladder;
        }
        float _2785;
        if (_2132 > 0.0)
        {
            _2785 = abs((1.0 - _2123) / _2132);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2123 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2785 = frontier_phi_46_43_ladder;
        }
        float _2787 = isnan(_2572) ? _2293 : (isnan(_2293) ? _2572 : min(_2293, _2572));
        float _2788 = isnan(_2785) ? _2787 : (isnan(_2787) ? _2785 : min(_2787, _2785));
        float _2792 = (_2788 * _2126) + _2115;
        float _2793 = (_2788 * _2129) + _2119;
        float _2794 = (_2788 * _2132) + _2123;
        float _2795 = _2788 * 9.9999997473787516355514526367188e-05;
        float _2796 = (-1.0) - _2795;
        float _2798 = _2795 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2794 > _2798) || ((_2794 < _2796) || ((_2793 > _2798) || ((_2793 < _2796) || ((_2792 < _2796) || (_2792 > _2798))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2794, cbModelParam._m0[17u].z, fma(_2793, cbModelParam._m0[17u].y, _2792 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2794, cbModelParam._m0[18u].z, fma(_2793, cbModelParam._m0[18u].y, _2792 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2794, cbModelParam._m0[19u].z, fma(_2793, cbModelParam._m0[19u].y, _2792 * cbModelParam._m0[19u].x))), _2061);
            frontier_phi_22_46_ladder = _2993.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2993.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2993.x * cbModelParam._m0[1u].z;
        }
        _2151 = frontier_phi_22_46_ladder_2;
        _2153 = frontier_phi_22_46_ladder_1;
        _2155 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2135 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1161, _1162, _1163), _2061);
        _2151 = _2135.x * cbModelParam._m0[1u].z;
        _2153 = _2135.y * cbModelParam._m0[1u].z;
        _2155 = _2135.z * cbModelParam._m0[1u].z;
    }
    float _2168 = (((_1188 * _1137) + _1189) * _1153) * ((cbModelParam._m0[1u].w * (_2151 - _2052)) + _2052);
    float _2170 = (((_1188 * _1139) + _1189) * _1153) * ((cbModelParam._m0[1u].w * (_2153 - _2054)) + _2054);
    float _2172 = (((_1188 * _1140) + _1189) * _1153) * ((cbModelParam._m0[1u].w * (_2155 - _2056)) + _2056);
    float _2175 = fma(_2172, cbSceneParam._m0[89u].z, fma(_2170, cbSceneParam._m0[89u].y, _2168 * cbSceneParam._m0[89u].x));
    float _2178 = fma(_2172, cbSceneParam._m0[90u].z, fma(_2170, cbSceneParam._m0[90u].y, _2168 * cbSceneParam._m0[90u].x));
    float _2181 = fma(_2172, cbSceneParam._m0[91u].z, fma(_2170, cbSceneParam._m0[91u].y, _2168 * cbSceneParam._m0[91u].x));
    vec4 _2189 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1075, _1076));
    float _2191 = _2189.w;
    float _2203 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2191);
    float _2204 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2191);
    float _2205 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2191);
    uvec4 _2209 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2211 = _2209.x * 14u;
    uint _2212 = _2211 + 13u;
    float _2219 = _1153 + (-1.0);
    float _2224 = (cbLight._m0[_2212].x * _2219) + 1.0;
    float _2225 = (cbLight._m0[_2212].y * _2219) + 1.0;
    float _2226 = (cbLight._m0[_2212].z * _2219) + 1.0;
    float _2227 = (cbLight._m0[_2212].w * _2219) + 1.0;
    uint _2228 = _2211 + 5u;
    float _2234 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2238 = _2211 + 4u;
    float _2247 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    uint _2251 = _2211 | 1u;
    float _2262 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_988, _989, _990));
    float _2265 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_988, _989, _990));
    float _4475 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _4486 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2270 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * 0.3183098733425140380859375;
    float _2272 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * 0.3183098733425140380859375;
    float _2279 = ((cbLight._m0[_2228].x * _2234) * _2272) + (((cbLight._m0[_2238].x * _2203) * _2247) * _2270);
    float _2280 = ((_2234 * cbLight._m0[_2228].y) * _2272) + (((cbLight._m0[_2238].y * _2204) * _2247) * _2270);
    float _2281 = ((_2234 * cbLight._m0[_2228].z) * _2272) + (((cbLight._m0[_2238].z * _2205) * _2247) * _2270);
    uvec4 _2285 = floatBitsToUint(cbLight._m0[_2211 + 12u]);
    bool _2287 = _2285.x == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2287)
    {
        _2298 = _2279;
        _2300 = _2280;
        _2302 = _2281;
    }
    else
    {
        uint _2306 = _2211 + 6u;
        float _2322 = (dot(vec3(cbLight._m0[_2211 + 2u].xyz), vec3(_988, _989, _990)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4497 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2325 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2298 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2279;
        _2300 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2280;
        _2302 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2281;
    }
    bool _2305 = _2285.y == 0u;
    float _2343;
    float _2345;
    float _2347;
    if (_2305)
    {
        _2343 = _2298;
        _2345 = _2300;
        _2347 = _2302;
    }
    else
    {
        uint _2516 = _2211 + 7u;
        float _2532 = (dot(vec3(cbLight._m0[_2211 + 3u].xyz), vec3(_988, _989, _990)) * 0.5) + 0.5;
        float _2533 = _2532 * _2532;
        float _4513 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2534 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2535 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2343 = (((cbLight._m0[_2516].x * 0.3183098733425140380859375) * _2534) * _2535) + _2298;
        _2345 = (((cbLight._m0[_2516].y * 0.3183098733425140380859375) * _2534) * _2535) + _2300;
        _2347 = (((cbLight._m0[_2516].z * 0.3183098733425140380859375) * _2534) * _2535) + _2302;
    }
    uint _2350 = _2211 + 8u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _991) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2211].x + _1067;
    float _2366 = cbLight._m0[_2211].y + _1068;
    float _2367 = cbLight._m0[_2211].z + _1069;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2211].xyz));
    float _4529 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _4540 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _2379 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2380 = dot(vec3(_988, _989, _990), vec3(_2372, _2373, _2374));
    float _4551 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2372, _2373, _2374));
    float _4562 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2364 * _2364;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2400 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
    float _2401 = 0.959999978542327880859375 - _1134;
    float _2403 = 0.959999978542327880859375 - _1135;
    float _2404 = 0.959999978542327880859375 - _1136;
    float _2411 = 1.0 - _2364;
    float _2422 = (0.5 / (((_2379 * ((_2378 * _2411) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2411) + _2364) * _2378))) * _2378;
    float _4573 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    uint _2438 = _2211 + 9u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _991) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2251].x + _1067;
    float _2452 = cbLight._m0[_2251].y + _1068;
    float _2453 = cbLight._m0[_2251].z + _1069;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2251].xyz));
    float _4584 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2465 = dot(vec3(_988, _989, _990), vec3(_2458, _2459, _2460));
    float _4595 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2469 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2458, _2459, _2460));
    float _4606 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2473 = _2450 * _2450;
    float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
    float _2484 = exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0);
    float _2491 = 1.0 - _2450;
    float _2501 = (0.5 / (((_2379 * ((_2464 * _2491) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2491) + _2450) * _2464))) * _2464;
    float _4617 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2503 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
    float _2513 = (((((_2484 * _2401) + _1137) * cbLight._m0[_2438].x) * _2503) * _2234) + ((((cbLight._m0[_2350].x * _2203) * ((_2400 * _2401) + _1137)) * _2424) * _2247);
    float _2514 = (((((_2484 * _2403) + _1139) * cbLight._m0[_2438].y) * _2503) * _2234) + ((((cbLight._m0[_2350].y * _2204) * ((_2400 * _2403) + _1139)) * _2424) * _2247);
    float _2515 = (((((_2484 * _2404) + _1140) * cbLight._m0[_2438].z) * _2503) * _2234) + ((((cbLight._m0[_2350].z * _2205) * ((_2400 * _2404) + _1140)) * _2424) * _2247);
    float _2577;
    float _2579;
    float _2581;
    if (_2287)
    {
        _2577 = _2513;
        _2579 = _2514;
        _2581 = _2515;
    }
    else
    {
        uint _2583 = _2211 + 2u;
        uint _2587 = _2211 + 10u;
        float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _991) * 0.949999988079071044921875);
        float _2602 = _2601 * _2601;
        float _2603 = cbLight._m0[_2583].x + _1067;
        float _2604 = cbLight._m0[_2583].y + _1068;
        float _2605 = cbLight._m0[_2583].z + _1069;
        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
        float _2610 = _2609 * _2603;
        float _2611 = _2609 * _2604;
        float _2612 = _2609 * _2605;
        float _2613 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2583].xyz));
        float _4628 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2617 = dot(vec3(_988, _989, _990), vec3(_2610, _2611, _2612));
        float _4639 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2621 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2610, _2611, _2612));
        float _4650 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2625 = _2602 * _2602;
        float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
        float _2636 = exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0);
        float _2643 = 1.0 - _2602;
        float _2653 = (0.5 / (((_2379 * ((_2616 * _2643) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2643) + _2602) * _2616))) * _2616;
        float _4661 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2655 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
        float _2656 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2577 = (((((_2636 * _2401) + _1137) * cbLight._m0[_2587].x) * _2655) * _2656) + _2513;
        _2579 = (((((_2636 * _2403) + _1139) * cbLight._m0[_2587].y) * _2655) * _2656) + _2514;
        _2581 = (((((_2636 * _2404) + _1140) * cbLight._m0[_2587].z) * _2655) * _2656) + _2515;
    }
    float _2691;
    float _2693;
    float _2695;
    if (_2305)
    {
        _2691 = _2577;
        _2693 = _2579;
        _2695 = _2581;
    }
    else
    {
        uint _2702 = _2211 + 3u;
        uint _2706 = _2211 + 11u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _991) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _1067;
        float _2723 = cbLight._m0[_2702].y + _1068;
        float _2724 = cbLight._m0[_2702].z + _1069;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_988, _989, _990), vec3(cbLight._m0[_2702].xyz));
        float _4677 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2736 = dot(vec3(_988, _989, _990), vec3(_2729, _2730, _2731));
        float _4688 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4699 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
        float _2762 = 1.0 - _2721;
        float _2772 = (0.5 / (((_2379 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2762) + _2721) * _2735))) * _2735;
        float _4710 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2691 = (((((_2755 * _2401) + _1137) * cbLight._m0[_2706].x) * _2774) * _2775) + _2577;
        _2693 = (((((_2755 * _2403) + _1139) * cbLight._m0[_2706].y) * _2774) * _2775) + _2579;
        _2695 = (((((_2755 * _2404) + _1140) * cbLight._m0[_2706].z) * _2774) * _2775) + _2581;
    }
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_2209.y == 0u)
    {
        float _2850 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2851 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2850;
        float _2852 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2850;
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2850;
        uvec4 _2865 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2866 = _2865.x;
        uint _2877 = uint((float(_2865.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1076) / _2866))) + floor(float(uint(cbSceneParam._m0[85u].x * _1075) / _2866)));
        float _2887 = (log2(_2853 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2888 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        uint _2891 = uint(isnan(14.0) ? _2888 : (isnan(_2888) ? 14.0 : min(_2888, 14.0)));
        uvec4 _2896 = texelFetch(g_lightClusterGridBuffer, int(((_2891 << 2u) + (_2877 << 6u)) >> 2u));
        uint _2897 = _2896.x;
        uint _2898 = _2865.z;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((((1u << ((_2898 >> 4u) & 15u)) + 4294967295u) & _2897) == 0u) || ((_2898 & 240u) == 0u))
        {
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
        }
        else
        {
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            uint _3149 = 0u;
            uint _3158;
            bool _3159;
            for (;;)
            {
                _3158 = texelFetch(g_lightClassification, int((((_2891 << 5u) + (_2877 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                _3159 = _3158 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3159)
                {
                    frontier_phi_61_pred = _3143;
                    frontier_phi_61_pred_1 = _3148;
                    frontier_phi_61_pred_2 = _3147;
                    frontier_phi_61_pred_3 = _3146;
                    frontier_phi_61_pred_4 = _3145;
                    frontier_phi_61_pred_5 = _3144;
                }
                else
                {
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    uint _3273;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3145;
                    _3270 = _3146;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3158;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3277 = uint(findLSB(_3273)) + (_3149 << 5u);
                        uint _3274 = (_3273 + 4294967295u) & _3273;
                        uint _3279 = _3277 * 48u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 3u)).x));
                        uint _3299 = (_3277 * 48u) + 4u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3318 = (_3277 * 48u) + 8u;
                        vec3 _3329 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x));
                        float _3333 = _3293.x - _2851;
                        float _3334 = _3293.y - _2852;
                        float _3335 = _3293.z - _2853;
                        float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                        float _3339 = inversesqrt(_3336);
                        float _3340 = _3339 * _3333;
                        float _3341 = _3339 * _3334;
                        float _3342 = _3339 * _3335;
                        float _3343 = dot(vec3(_1094, _1097, _1100), vec3(_3340, _3341, _3342));
                        float _3348 = 1.0 - (_3336 * _3293.w);
                        float _4736 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3350 = sqrt(_3336) * _3312.w;
                        float _3353 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3343) + _3354;
                        float _3360 = _3350 * _3350;
                        float _3364 = ((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3349) / ((_3360 * 0.699999988079071044921875) + 1.0);
                        float _3368 = (-0.0) - _2851;
                        float _3369 = (-0.0) - _2852;
                        float _3370 = (-0.0) - _2853;
                        float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3385 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                        float _3386 = 1.0 - _1169;
                        float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                        float _3394 = _3393 * _3393;
                        float _3395 = _3394 * _3394;
                        float _3396 = _3375 + _3340;
                        float _3397 = _3376 + _3341;
                        float _3398 = _3377 + _3342;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3406 = dot(vec3(_1094, _1097, _1100), vec3(_3375, _3376, _3377));
                        float _4752 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3409 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3410 = dot(vec3(_1094, _1097, _1100), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                        float _4763 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                        float _3418 = _3353 * _3394;
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3343) + _3419;
                        float _4774 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3423 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3424 = 1.0 - _3394;
                        float _3434 = (0.5 / (((_3423 * ((_3409 * _3424) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3394) * _3409))) * _3423;
                        float _4785 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3445 = (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) / ((_3417 * _3417) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125))) * _3349;
                        _3202 = (_3364 * _3312.x) + _3270;
                        _3203 = (_3364 * _3312.y) + _3271;
                        _3204 = (_3364 * _3312.z) + _3272;
                        _3199 = (_3445 * _3329.x) + _3267;
                        _3200 = (_3445 * _3329.y) + _3268;
                        _3201 = (_3445 * _3329.z) + _3269;
                        if (_3274 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3201;
                            _3270 = _3202;
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3274;
                        }
                    }
                    frontier_phi_61_pred = _3199;
                    frontier_phi_61_pred_1 = _3204;
                    frontier_phi_61_pred_2 = _3203;
                    frontier_phi_61_pred_3 = _3202;
                    frontier_phi_61_pred_4 = _3201;
                    frontier_phi_61_pred_5 = _3200;
                }
                _2999 = frontier_phi_61_pred;
                _3009 = frontier_phi_61_pred_1;
                _3007 = frontier_phi_61_pred_2;
                _3005 = frontier_phi_61_pred_3;
                _3003 = frontier_phi_61_pred_4;
                _3001 = frontier_phi_61_pred_5;
                uint _3150 = _3149 + 1u;
                if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3143 = _2999;
                    _3144 = _3001;
                    _3145 = _3003;
                    _3146 = _3005;
                    _3147 = _3007;
                    _3148 = _3009;
                    _3149 = _3150;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
        }
        uvec4 _3012 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3013 = _3012.z;
        uint _3015 = (_3013 >> 8u) & 15u;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        if (((4294967295u << _3015) & _2897) == 0u)
        {
            _3111 = _2998;
            _3113 = _3000;
            _3115 = _3002;
            _3117 = _3004;
            _3119 = _3006;
            _3121 = _3008;
        }
        else
        {
            float _3136 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
            float _3137 = _3136 * _2851;
            float _3138 = _3136 * _2852;
            float _3139 = _3136 * _2853;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3015 < ((_3013 >> 12u) & 15u))
            {
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3250 = _2998;
                float _3251 = _3000;
                float _3252 = _3002;
                float _3253 = _3004;
                float _3254 = _3006;
                float _3255 = _3008;
                uint _3256 = _3015;
                uint _3265;
                bool _3266;
                for (;;)
                {
                    _3265 = texelFetch(g_lightClassification, int((((_2891 << 5u) + (_2877 << 9u)) + (_3256 << 2u)) >> 2u)).x;
                    _3266 = _3265 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3266)
                    {
                        frontier_phi_67_pred = _3253;
                        frontier_phi_67_pred_1 = _3254;
                        frontier_phi_67_pred_2 = _3255;
                        frontier_phi_67_pred_3 = _3252;
                        frontier_phi_67_pred_4 = _3251;
                        frontier_phi_67_pred_5 = _3250;
                    }
                    else
                    {
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3463 = _3250;
                        float _3464 = _3251;
                        float _3465 = _3252;
                        float _3466 = _3253;
                        float _3467 = _3254;
                        float _3468 = _3255;
                        uint _3469 = _3265;
                        uint _3470;
                        vec4 _3495;
                        float _3496;
                        vec4 _3511;
                        vec3 _3523;
                        vec4 _3538;
                        vec4 _3553;
                        float _3599;
                        bool _3600;
                        for (;;)
                        {
                            uint _3480 = ((_3256 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3469));
                            _3470 = (_3469 + 4294967295u) & _3469;
                            uint _3482 = _3480 * 40u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            _3496 = _3495.w;
                            uint _3498 = (_3480 * 40u) + 4u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3513 = (_3480 * 40u) + 8u;
                            _3523 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x));
                            uint _3525 = (_3480 * 40u) + 16u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3480 * 40u) + 20u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3480 * 40u) + 24u;
                            vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 3u)).x));
                            uint _3574 = (_3480 * 40u) + 28u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            _3599 = fma(_2853, _3587.z, fma(_2852, _3587.y, _3587.x * _2851)) + _3587.w;
                            _3600 = !((fma(_2853, _3568.z, fma(_2852, _3568.y, _3568.x * _2851)) + _3568.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3600)
                            {
                                float _3627 = _3495.x - _2851;
                                float _3628 = _3495.y - _2852;
                                float _3629 = _3495.z - _2853;
                                float _3630 = dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629));
                                float _3633 = inversesqrt(_3630);
                                float _3634 = _3633 * _3627;
                                float _3635 = _3633 * _3628;
                                float _3636 = _3633 * _3629;
                                float _3640 = 1.0 - (_3630 / (_3496 * _3496));
                                float _4796 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3645 = sqrt(_3630) * _3511.w;
                                float _3647 = 1.39999997615814208984375 / (_3645 + 1.39999997615814208984375);
                                float _3648 = _3647 * _3647;
                                float _3651 = ((1.0 - _3648) * dot(vec3(_3634, _3635, _3636), vec3(_1094, _1097, _1100))) + _3648;
                                float _3654 = _3645 * _3645;
                                float _3658 = (fma(_2853, _3538.z, fma(_2852, _3538.y, _3538.x * _2851)) + _3538.w) / _3599;
                                float _3659 = (fma(_2853, _3553.z, fma(_2852, _3553.y, _3553.x * _2851)) + _3553.w) / _3599;
                                float _3663 = 1.0 - dot(vec2(_3658, _3659), vec2(_3658, _3659));
                                float _4812 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3665 = _3664 * (((isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0))) * _3641) / ((_3654 * 0.699999988079071044921875) + 1.0));
                                float _3677 = exp2(log2(1.0 / ((_3654 * 3.5) + 5.0)) * 0.25);
                                float _3678 = 1.0 - _1169;
                                float _3685 = sqrt(1.0 - ((1.0 - (_3678 * _3678)) * (1.0 - (_3677 * _3677))));
                                float _3686 = _3685 * _3685;
                                float _3687 = _3686 * _3686;
                                float _3688 = _3634 - _3137;
                                float _3689 = _3635 - _3138;
                                float _3690 = _3636 - _3139;
                                float _3694 = inversesqrt(dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690)));
                                float _3698 = dot(vec3(_1094, _1097, _1100), vec3((-0.0) - _3137, (-0.0) - _3138, (-0.0) - _3139));
                                float _4823 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3701 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3702 = dot(vec3(_1094, _1097, _1100), vec3(_3694 * _3688, _3694 * _3689, _3694 * _3690));
                                float _4834 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3709 = ((_3705 * _3705) * (_3687 + (-1.0))) + 1.0;
                                float _3710 = _3647 * _3686;
                                float _3711 = _3710 * _3710;
                                float _3717 = ((1.0 - _3711) * dot(vec3(_1094, _1097, _1100), vec3(_3634, _3635, _3636))) + _3711;
                                float _4845 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3718 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3719 = 1.0 - _3686;
                                float _3729 = (0.5 / (((_3718 * ((_3701 * _3719) + _3686)) + 9.9999999392252902907785028219223e-09) + (((_3718 * _3719) + _3686) * _3701))) * _3718;
                                float _4856 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3739 = (_3664 * _3641) * (((_3687 * 3.1415927410125732421875) * (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) / ((_3709 * _3709) * ((_3654 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3739 * _3523.x;
                                frontier_phi_73_pred_1 = _3739 * _3523.y;
                                frontier_phi_73_pred_2 = _3665 * _3511.z;
                                frontier_phi_73_pred_3 = _3665 * _3511.y;
                                frontier_phi_73_pred_4 = _3665 * _3511.x;
                                frontier_phi_73_pred_5 = _3739 * _3523.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3743 = frontier_phi_73_pred;
                            _3744 = frontier_phi_73_pred_1;
                            _3748 = frontier_phi_73_pred_2;
                            _3747 = frontier_phi_73_pred_3;
                            _3746 = frontier_phi_73_pred_4;
                            _3745 = frontier_phi_73_pred_5;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            if (_3470 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3470;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3453;
                        frontier_phi_67_pred_1 = _3454;
                        frontier_phi_67_pred_2 = _3455;
                        frontier_phi_67_pred_3 = _3452;
                        frontier_phi_67_pred_4 = _3451;
                        frontier_phi_67_pred_5 = _3450;
                    }
                    _3118 = frontier_phi_67_pred;
                    _3120 = frontier_phi_67_pred_1;
                    _3122 = frontier_phi_67_pred_2;
                    _3116 = frontier_phi_67_pred_3;
                    _3114 = frontier_phi_67_pred_4;
                    _3112 = frontier_phi_67_pred_5;
                    uint _3257 = _3256 + 1u;
                    if (_3257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3250 = _3112;
                        _3251 = _3114;
                        _3252 = _3116;
                        _3253 = _3118;
                        _3254 = _3120;
                        _3255 = _3122;
                        _3256 = _3257;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3120;
                frontier_phi_55_56_ladder_1 = _3122;
                frontier_phi_55_56_ladder_2 = _3118;
                frontier_phi_55_56_ladder_3 = _3116;
                frontier_phi_55_56_ladder_4 = _3114;
                frontier_phi_55_56_ladder_5 = _3112;
            }
            else
            {
                frontier_phi_55_56_ladder = _3006;
                frontier_phi_55_56_ladder_1 = _3008;
                frontier_phi_55_56_ladder_2 = _3004;
                frontier_phi_55_56_ladder_3 = _3002;
                frontier_phi_55_56_ladder_4 = _3000;
                frontier_phi_55_56_ladder_5 = _2998;
            }
            _3111 = frontier_phi_55_56_ladder_5;
            _3113 = frontier_phi_55_56_ladder_4;
            _3115 = frontier_phi_55_56_ladder_3;
            _3117 = frontier_phi_55_56_ladder_2;
            _3119 = frontier_phi_55_56_ladder;
            _3121 = frontier_phi_55_56_ladder_1;
        }
        float _3126 = isnan(1.0) ? _1153 : (isnan(_1153) ? 1.0 : min(_1153, 1.0));
        _2910 = (_3126 * _3117) + _2343;
        _2912 = (_3126 * _3119) + _2345;
        _2914 = (_3126 * _3121) + _2347;
        _2916 = ((_3111 * _1137) * _3126) + _2691;
        _2918 = ((_3113 * _1139) * _3126) + _2693;
        _2920 = ((_3115 * _1140) * _3126) + _2695;
    }
    else
    {
        _2910 = _2343;
        _2912 = _2345;
        _2914 = _2347;
        _2916 = _2691;
        _2918 = _2693;
        _2920 = _2695;
    }
    float _4872 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _4883 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _4894 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    uint _2940 = _291 + 6u;
    float _2948 = _1075 / cbSceneParam._m0[86u].x;
    float _2949 = _1076 / cbSceneParam._m0[86u].y;
    vec4 _2963 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, (log2((isnan(cbSceneParam._m0[77u].w) ? _1010 : (isnan(_1010) ? cbSceneParam._m0[77u].w : min(_1010, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2965 = _2963.x;
    float _2966 = _2963.y;
    float _2967 = _2963.z;
    float _2968 = _2963.w;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    if (_1010 > cbSceneParam._m0[78u].w)
    {
        float _3023 = isnan(_1010) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1010 : min(cbSceneParam._m0[80u].w, _1010));
        float _3024 = _3023 / _1010;
        float _3035 = _3024 * _1060;
        float _3036 = _1061 * _3024;
        float _3037 = (-0.0) - _3036;
        float _3039 = _3024 * _1062;
        float _3041 = (cbSceneParam._m0[77u].w * _3037) / _3023;
        float _3042 = _3041 + cbSceneParam._m0[79u].w;
        float _3043 = cbSceneParam._m0[79u].w - _3036;
        float _3049 = sqrt(((_3035 * _3035) + (_3036 * _3036)) + (_3039 * _3039));
        float _3052 = (1.0 - (cbSceneParam._m0[77u].w / _3023)) * _3049;
        float _3057 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3059 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3212;
        if (abs((_3037 - _3041) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3212 = ((((_3042 > 0.0) ? exp2(_3057 * _3042) : (2.0 - exp2(_3059 * _3042))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3052;
        }
        else
        {
            float _3172 = 1.0 / cbSceneParam._m0[80u].x;
            float _3173 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : max(_3042, _3043));
            float _3174 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : min(_3042, _3043));
            float _3183 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : min(_3173, 0.0));
            float _3184 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : min(_3174, 0.0));
            _3212 = ((abs(_3049 / _3037) * cbSceneParam._m0[80u].y) * ((((_3183 - _3184) * 2.0) - ((exp2(_3057 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0)))) - exp2(_3057 * (isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))))) * _3172)) - ((exp2(_3059 * _3183) - exp2(_3059 * _3184)) * _3172))) + (_3052 * cbSceneParam._m0[80u].z);
        }
        vec4 _3214 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, 1.0), 0.0);
        float _3223 = exp2((_3212 * (-1.44269502162933349609375)) * (1.0 - _3214.w));
        float _3224 = log2(_3223);
        float _3240 = log2(_2968);
        _3061 = (exp2(_3240 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].x)) * _3214.x) / cbSceneParam._m0[78u].x)) + _2965;
        _3063 = (exp2(_3240 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].y)) * _3214.y) / cbSceneParam._m0[78u].y)) + _2966;
        _3065 = (exp2(_3240 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].z)) * _3214.z) / cbSceneParam._m0[78u].z)) + _2967;
        _3067 = _3223 * _2968;
    }
    else
    {
        _3061 = _2965;
        _3063 = _2966;
        _3065 = _2967;
        _3067 = _2968;
    }
    float _3079 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3080 = _3079 == 3.0;
    float _3081 = log2(_3067);
    float _3088 = exp2(_3081 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2910 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1153))) + ((_2916 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1960)) * cbPerFrame._m0[3u].x));
    float _3089 = exp2(_3081 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2912 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1153))) + ((_2918 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1960)) * cbPerFrame._m0[3u].x));
    float _3090 = exp2(_3081 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2914 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1153))) + ((_2920 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1960)) * cbPerFrame._m0[3u].x));
    float _3099 = (_3079 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3099 * (_3080 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3061)));
    SV_Target.y = _3099 * (_3080 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3063)));
    SV_Target.z = _3099 * (_3080 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3065)));
    SV_Target.w = cbInstanceData._m0[_2940].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2940].w;
}


