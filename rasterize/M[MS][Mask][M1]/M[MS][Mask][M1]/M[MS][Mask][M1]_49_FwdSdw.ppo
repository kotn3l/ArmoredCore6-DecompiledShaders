#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1488;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4095 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4106 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4117 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _374 = _369.x * cbMtdParam._m0[11u].x;
    float _375 = _369.y * cbMtdParam._m0[11u].y;
    float _376 = _369.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[23u].w) + _457) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4128 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _485 = (_343.x * cbMtdParam._m0[9u].x) * ((_475 * ((_395.x * cbMtdParam._m0[12u].x) - _374)) + _374);
    float _486 = (_343.y * cbMtdParam._m0[9u].y) * ((_475 * ((_395.y * cbMtdParam._m0[12u].y) - _375)) + _375);
    float _487 = (_343.z * cbMtdParam._m0[9u].z) * ((_475 * ((_395.z * cbMtdParam._m0[12u].z) - _376)) + _376);
    float _491 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _485;
    float _494 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _486;
    float _497 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _487;
    float _505 = (((_485 - _491) * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) + _491) * 4.55000019073486328125;
    float _507 = (((_486 - _494) * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) + _494) * 4.55000019073486328125;
    float _509 = (((_487 - _497) * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) + _497) * 4.55000019073486328125;
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _596 = _592.z;
    float _605 = ((_575.z - _596) * _475) + _596;
    float _608 = ((((_575.x - _594) * _475) + _594) * 2.0) + (-1.0);
    float _609 = ((((_575.y - _595) * _475) + _595) * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _4139 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _647 = (_608 + ((((_548.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_635.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _648 = (_609 + ((((_548.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_635.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _651 = fma(_615, _256, fma(_648, _263, _647 * _249));
    float _654 = fma(_615, _257, fma(_648, _264, _647 * _250));
    float _657 = fma(_615, _258, fma(_648, _265, _647 * _251));
    float _661 = inversesqrt(dot(vec3(_651, _654, _657), vec3(_651, _654, _657)));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _690 = _688.x;
    float _691 = 1.0 - _690;
    float _700 = (cbMtdParam._m0[19u].x + dot(vec4(_661 * _651, _661 * _654, _661 * _657, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_690 - _691) * cbMtdParam._m0[24u].z) + _691) * cbMtdParam._m0[21u].z);
    float _4150 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _703 = (-0.0) - cbMtdParam._m0[24u].x;
    float _705 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
    float _713 = _701 - ((_701 * TEXCOORD_8.x) * _706);
    float _714 = _701 - ((_701 * TEXCOORD_8.y) * _706);
    float _715 = _701 - ((_701 * TEXCOORD_8.z) * _706);
    float _722 = (_713 * ((_528.x * cbMtdParam._m0[18u].x) - _505)) + _505;
    float _723 = (_714 * ((_528.y * cbMtdParam._m0[18u].y) - _507)) + _507;
    float _724 = (_715 * ((_528.z * cbMtdParam._m0[18u].z) - _509)) + _509;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _738 = _736.x;
    float _739 = 1.0 - _738;
    float _765 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_738 - _739) * cbMtdParam._m0[24u].w) + _739) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4171 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _766 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _774 = ((((cbMtdParam._m0[10u].x - _722) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _766) + _722;
    float _775 = ((((cbMtdParam._m0[10u].y - _723) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _766) + _723;
    float _776 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _724)) * _766) + _724;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _802 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _804 = _802.x;
    float _821 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _804) * _475) + _804;
    float _825 = ((_788.x - _821) * cbMtdParam._m0[19u].z) + _821;
    float _827 = _825 - (_825 * _713);
    float _829 = _827 - (_827 * _766);
    float _834 = (((_548.z - _605) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _605;
    float _838 = ((_635.z - _834) * cbMtdParam._m0[19u].w) + _834;
    vec4 _852 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _859 = (_852.x * 2.0) + (-1.0);
    float _860 = (_852.y * 2.0) + (-1.0);
    float _861 = dot(vec2(_859, _860), vec2(_859, _860));
    float _4182 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _869 = ((_852.z - _838) * _713) + _838;
    float _872 = ((cbMtdParam._m0[23u].x - _869) * _766) + _869;
    vec4 _893 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _899 = (_893.x * 2.0) + (-1.0);
    float _900 = (_893.y * 2.0) + (-1.0);
    float _901 = dot(vec2(_899, _900), vec2(_899, _900));
    float _4193 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _916 = ((sqrt(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) - _615) * _715) + _615;
    float _919 = (((_859 - _647) * _713) + _647) + (cbMtdParam._m0[21u].x * _647);
    float _920 = (((_860 - _648) * _714) + _648) + (cbMtdParam._m0[21u].x * _648);
    float _931 = (((_899 - _919) + (_919 * cbMtdParam._m0[22u].z)) * _766) + _919;
    float _932 = (((_900 - _920) + (_920 * cbMtdParam._m0[22u].z)) * _766) + _920;
    float _933 = (_766 * (sqrt(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) - _916)) + _916;
    float _935 = cbMtdParam._m0[22u].x + _635.w;
    float _938 = fma(_933, _256, fma(_932, _263, _931 * _249));
    float _941 = fma(_933, _257, fma(_932, _264, _931 * _250));
    float _944 = fma(_933, _258, fma(_932, _265, _931 * _251));
    float _948 = inversesqrt(dot(vec3(_938, _941, _944), vec3(_938, _941, _944)));
    float _949 = _948 * _938;
    float _950 = _948 * _941;
    float _951 = _948 * _944;
    float _4204 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _952 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4226 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4237 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4248 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4259 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _957 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _971 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1021 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1011);
    float _1022 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1011);
    float _1023 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1011);
    float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
    float _1028 = _1021 * _1027;
    float _1029 = _1022 * _1027;
    float _1030 = _1023 * _1027;
    float _1036 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1037 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1055 = fma(_951, cbSceneParam._m0[5u].z, fma(_950, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _949));
    float _1058 = fma(_951, cbSceneParam._m0[6u].z, fma(_950, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _949));
    float _1061 = fma(_951, cbSceneParam._m0[7u].z, fma(_950, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _949));
    uint _1075 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1081 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * cbInstanceData._m0[_1075].x;
    float _1082 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * cbInstanceData._m0[_1075].y;
    float _1083 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * cbInstanceData._m0[_1075].z;
    float _4270 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _4292 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _1087 = 1.0 - _957;
    float _1088 = _1084 * _1087;
    float _1089 = _1085 * _1087;
    float _1090 = _1086 * _1087;
    float _1095 = (_1084 + (-0.039999999105930328369140625)) * _957;
    float _1096 = (_1085 + (-0.039999999105930328369140625)) * _957;
    float _1097 = (_1086 + (-0.039999999105930328369140625)) * _957;
    float _1098 = _1095 + 0.039999999105930328369140625;
    float _1100 = _1096 + 0.039999999105930328369140625;
    float _1101 = _1097 + 0.039999999105930328369140625;
    vec4 _1110 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1036, cbSceneParam._m0[86u].y * _1037));
    float _1114 = ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * TEXCOORD_5.w) * _1110.x;
    float _1115 = dot(vec3(_949, _950, _951), vec3(_1028, _1029, _1030));
    float _1118 = _1115 * 2.0;
    float _1122 = (_1118 * _949) - _1028;
    float _1123 = (_1118 * _950) - _1029;
    float _1124 = (_1118 * _951) - _1030;
    float _1128 = abs(dot(vec3(_1028, _1029, _1030), vec3(_949, _950, _951)));
    float _4303 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1130 = sqrt(_952);
    float _1143 = exp2((_1130 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1130 * 3.0));
    float _1149 = (1.0 - _1143) * ((_1130 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1150 = _1143 * _1130;
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1487;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1212 = fma(_1186, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178));
        float _1216 = fma(_1186, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178));
        float _1220 = fma(_1186, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178));
        float _1245 = _1178 + _949;
        float _1246 = _1182 + _950;
        float _1247 = _1186 + _951;
        float _1257 = fma(_1247, cbModelParam._m0[26u].z, fma(_1246, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1245)) - _1212;
        float _1258 = fma(_1247, cbModelParam._m0[27u].z, fma(_1246, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1245)) - _1216;
        float _1259 = fma(_1247, cbModelParam._m0[28u].z, fma(_1246, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1245)) - _1220;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1212 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1216 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[34u].z) + ((((((_1220 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1315 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1281.x + (-0.5));
        float _1317 = _1315 * (_1281.y + (-0.5));
        float _1318 = _1315 * (_1281.z + (-0.5));
        float _1325 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1288.x + (-0.5));
        float _1327 = _1325 * (_1288.y + (-0.5));
        float _1328 = _1325 * (_1288.z + (-0.5));
        float _1335 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1295.x + (-0.5));
        float _1337 = _1335 * (_1295.y + (-0.5));
        float _1338 = _1335 * (_1295.z + (-0.5));
        float _1345 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1302.x + (-0.5));
        float _1347 = _1345 * (_1302.y + (-0.5));
        float _1348 = _1345 * (_1302.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1369 = (dot(vec3(_949, _950, _951), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1379 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4351 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1381 + 1.0))) + _1386) * _1349;
        float _1396 = _1317 * 0.5;
        float _1397 = _1327 * 0.5;
        float _1398 = _1337 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_949, _950, _951), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4384 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1423 + 1.0))) + _1428) * _1350;
        float _1438 = _1318 * 0.5;
        float _1439 = _1328 * 0.5;
        float _1440 = _1338 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_949, _950, _951), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4417 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1465 + 1.0))) + _1470) * _1351;
        _1487 = _1318;
        _1489 = _1317;
        _1490 = _1316;
        _1491 = _1328;
        _1492 = _1327;
        _1493 = _1326;
        _1494 = _1338;
        _1495 = _1337;
        _1496 = _1336;
        _1497 = _1351;
        _1498 = _1350;
        _1499 = _1349;
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
    }
    else
    {
        _1487 = _1488;
        _1489 = _1488;
        _1490 = _1488;
        _1491 = _1488;
        _1492 = _1488;
        _1493 = _1488;
        _1494 = _1488;
        _1495 = _1488;
        _1496 = _1488;
        _1497 = _1488;
        _1498 = _1488;
        _1499 = _1488;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1527 = fma(_1186, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178));
        float _1531 = fma(_1186, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178));
        float _1535 = fma(_1186, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178));
        float _1558 = _1178 + _949;
        float _1559 = _1182 + _950;
        float _1560 = _1186 + _951;
        float _1570 = fma(_1560, cbModelParam._m0[30u].z, fma(_1559, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1558)) - _1527;
        float _1571 = fma(_1560, cbModelParam._m0[31u].z, fma(_1559, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1558)) - _1531;
        float _1572 = fma(_1560, cbModelParam._m0[32u].z, fma(_1559, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1558)) - _1535;
        float _1576 = inversesqrt(dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572)));
        float _1589 = ((_1576 * _1570) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1527 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1576 * _1571) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1531 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1591 = ((_1576 * _1572) / cbModelParam._m0[35u].z) + ((((((_1535 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1589, _1590, _1591), 0.0);
        float _1626 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1593.x + (-0.5));
        float _1628 = _1626 * (_1593.y + (-0.5));
        float _1629 = _1626 * (_1593.z + (-0.5));
        float _1636 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1600.x + (-0.5));
        float _1638 = _1636 * (_1600.y + (-0.5));
        float _1639 = _1636 * (_1600.z + (-0.5));
        float _1646 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1607.x + (-0.5));
        float _1648 = _1646 * (_1607.y + (-0.5));
        float _1649 = _1646 * (_1607.z + (-0.5));
        float _1656 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1614.x + (-0.5));
        float _1658 = _1656 * (_1614.y + (-0.5));
        float _1659 = _1656 * (_1614.z + (-0.5));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1663 = _1627 * 0.5;
        float _1664 = _1637 * 0.5;
        float _1665 = _1647 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_949, _950, _951), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4458 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4469 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4480 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_1690 + 1.0))) + _1695) * _1660;
        float _1705 = _1628 * 0.5;
        float _1706 = _1638 * 0.5;
        float _1707 = _1648 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_949, _950, _951), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4491 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4502 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4513 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_1732 + 1.0))) + _1737) * _1661;
        float _1747 = _1629 * 0.5;
        float _1748 = _1639 * 0.5;
        float _1749 = _1649 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_949, _950, _951), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4524 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1662 + 9.9999997473787516355514526367188e-06);
        float _4535 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4546 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_1774 + 1.0))) + _1779) * _1662;
        _1796 = _1629;
        _1797 = _1628;
        _1798 = _1627;
        _1799 = _1639;
        _1800 = _1638;
        _1801 = _1637;
        _1802 = _1649;
        _1803 = _1648;
        _1804 = _1647;
        _1805 = _1662;
        _1806 = _1661;
        _1807 = _1660;
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
        _1810 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
    }
    else
    {
        _1796 = _1488;
        _1797 = _1488;
        _1798 = _1488;
        _1799 = _1488;
        _1800 = _1488;
        _1801 = _1488;
        _1802 = _1488;
        _1803 = _1488;
        _1804 = _1488;
        _1805 = _1488;
        _1806 = _1488;
        _1807 = _1488;
        _1808 = 0.0;
        _1809 = 0.0;
        _1810 = 0.0;
    }
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1500)) + _1500;
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1501)) + _1501;
    float _1822 = (cbModelParam._m0[1u].x * (_1810 - _1502)) + _1502;
    float _1843 = fma(_1822, cbSceneParam._m0[89u].z, fma(_1821, cbSceneParam._m0[89u].y, _1820 * cbSceneParam._m0[89u].x));
    float _1846 = fma(_1822, cbSceneParam._m0[90u].z, fma(_1821, cbSceneParam._m0[90u].y, _1820 * cbSceneParam._m0[90u].x));
    float _1849 = fma(_1822, cbSceneParam._m0[91u].z, fma(_1821, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1820));
    float _1864 = _1122 * 0.5;
    float _1865 = _1123 * 0.5;
    float _1866 = _1124 * 0.5;
    float _1867 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1798, _1801, _1804, _1807));
    float _1870 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1873 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1907;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1880 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1487, _1491, _1494, _1497));
        float _1884 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1489, _1492, _1495, _1498));
        float _1888 = dot(vec4(_1864, _1865, _1866, 1.0), vec4(_1490, _1493, _1496, _1499));
        float _1895 = dot(vec4(cbModelParam._m0[39u]), vec4(_1864, _1865, _1866, 1.0));
        _1907 = dot(vec3(isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1895) ? 0.0 : (isnan(0.0) ? _1895 : max(0.0, _1895))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1907 = 1.0;
    }
    float _1918;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1909 = dot(vec4(cbModelParam._m0[40u]), vec4(_1864, _1865, _1866, 1.0));
        _1918 = dot(vec3(isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1909) ? 0.0 : (isnan(0.0) ? _1909 : max(0.0, _1909))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1918 = 1.0;
    }
    float _1922 = (_1918 * cbModelParam._m0[1u].x) + (_1907 * (1.0 - cbModelParam._m0[1u].x));
    float _1932 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _952);
    float _1933 = isnan(_1932) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1932 : min(cbModelParam._m0[25u].z, _1932));
    float _2013;
    float _2015;
    float _2017;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1980 = fma(_1186, cbModelParam._m0[13u].z, fma(_1182, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1178)) + cbModelParam._m0[13u].w;
        float _1984 = fma(_1186, cbModelParam._m0[14u].z, fma(_1182, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1178)) + cbModelParam._m0[14u].w;
        float _1988 = fma(_1186, cbModelParam._m0[15u].z, fma(_1182, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1178)) + cbModelParam._m0[15u].w;
        float _1991 = fma(_1124, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122));
        float _1994 = fma(_1124, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122));
        float _1997 = fma(_1124, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122));
        float _2025;
        if (_1991 > 0.0)
        {
            _2025 = abs((1.0 - _1980) / _1991);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1980 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2025 = frontier_phi_14_12_ladder;
        }
        float _2196;
        if (_1994 > 0.0)
        {
            _2196 = abs((1.0 - _1984) / _1994);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1984 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2196 = frontier_phi_23_19_ladder;
        }
        float _2491;
        if (_1997 > 0.0)
        {
            _2491 = abs((1.0 - _1988) / _1997);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1988 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2491 = frontier_phi_35_30_ladder;
        }
        float _2493 = isnan(_2196) ? _2025 : (isnan(_2025) ? _2196 : min(_2025, _2196));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1991) + _1980;
        float _2499 = (_2494 * _1994) + _1984;
        float _2500 = (_2494 * _1997) + _1988;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2501;
        float _2505 = _2501 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 > _2505) || ((_2499 < _2503) || ((_2498 < _2503) || (_2498 > _2505))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2500, cbModelParam._m0[9u].z, fma(_2499, cbModelParam._m0[9u].y, _2498 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2500, cbModelParam._m0[10u].z, fma(_2499, cbModelParam._m0[10u].y, _2498 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2500, cbModelParam._m0[11u].z, fma(_2499, cbModelParam._m0[11u].y, _2498 * cbModelParam._m0[11u].x))), _1933);
            frontier_phi_13_35_ladder = _2645.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2645.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2645.x * cbModelParam._m0[1u].y;
        }
        _2013 = frontier_phi_13_35_ladder_2;
        _2015 = frontier_phi_13_35_ladder_1;
        _2017 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1122, _1123, _1124), _1933);
        _2013 = _2001.x * cbModelParam._m0[1u].y;
        _2015 = _2001.y * cbModelParam._m0[1u].y;
        _2017 = _2001.z * cbModelParam._m0[1u].y;
    }
    float _2021 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _952);
    float _2022 = isnan(_2021) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2021 : min(cbModelParam._m0[25u].w, _2021));
    float _2111;
    float _2113;
    float _2115;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2075 = fma(_1186, cbModelParam._m0[21u].z, fma(_1182, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1178)) + cbModelParam._m0[21u].w;
        float _2079 = fma(_1186, cbModelParam._m0[22u].z, fma(_1182, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1178)) + cbModelParam._m0[22u].w;
        float _2083 = fma(_1186, cbModelParam._m0[23u].z, fma(_1182, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1178)) + cbModelParam._m0[23u].w;
        float _2086 = fma(_1124, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122));
        float _2089 = fma(_1124, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122));
        float _2092 = fma(_1124, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122));
        float _2201;
        if (_2086 > 0.0)
        {
            _2201 = abs((1.0 - _2075) / _2086);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2075 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2201 = frontier_phi_25_21_ladder;
        }
        float _2518;
        if (_2089 > 0.0)
        {
            _2518 = abs((1.0 - _2079) / _2089);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2079 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2518 = frontier_phi_37_32_ladder;
        }
        float _2856;
        if (_2092 > 0.0)
        {
            _2856 = abs((1.0 - _2083) / _2092);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2083 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2856 = frontier_phi_47_44_ladder;
        }
        float _2858 = isnan(_2518) ? _2201 : (isnan(_2201) ? _2518 : min(_2201, _2518));
        float _2859 = isnan(_2856) ? _2858 : (isnan(_2858) ? _2856 : min(_2858, _2856));
        float _2863 = (_2859 * _2086) + _2075;
        float _2864 = (_2859 * _2089) + _2079;
        float _2865 = (_2859 * _2092) + _2083;
        float _2866 = _2859 * 9.9999997473787516355514526367188e-05;
        float _2867 = (-1.0) - _2866;
        float _2869 = _2866 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2865 > _2869) || ((_2865 < _2867) || ((_2864 > _2869) || ((_2864 < _2867) || ((_2863 < _2867) || (_2863 > _2869))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2865, cbModelParam._m0[17u].z, fma(_2864, cbModelParam._m0[17u].y, _2863 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2865, cbModelParam._m0[18u].z, fma(_2864, cbModelParam._m0[18u].y, _2863 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2865, cbModelParam._m0[19u].z, fma(_2864, cbModelParam._m0[19u].y, _2863 * cbModelParam._m0[19u].x))), _2022);
            frontier_phi_22_47_ladder = _2987.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2987.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2987.x * cbModelParam._m0[1u].z;
        }
        _2111 = frontier_phi_22_47_ladder_2;
        _2113 = frontier_phi_22_47_ladder_1;
        _2115 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1122, _1123, _1124), _2022);
        _2111 = _2095.x * cbModelParam._m0[1u].z;
        _2113 = _2095.y * cbModelParam._m0[1u].z;
        _2115 = _2095.z * cbModelParam._m0[1u].z;
    }
    float _2128 = (((_1149 * _1098) + _1150) * _1114) * ((cbModelParam._m0[1u].w * (_2111 - _2013)) + _2013);
    float _2130 = (((_1149 * _1100) + _1150) * _1114) * ((cbModelParam._m0[1u].w * (_2113 - _2015)) + _2015);
    float _2132 = (((_1149 * _1101) + _1150) * _1114) * ((cbModelParam._m0[1u].w * (_2115 - _2017)) + _2017);
    float _2135 = fma(_2132, cbSceneParam._m0[89u].z, fma(_2130, cbSceneParam._m0[89u].y, _2128 * cbSceneParam._m0[89u].x));
    float _2138 = fma(_2132, cbSceneParam._m0[90u].z, fma(_2130, cbSceneParam._m0[90u].y, _2128 * cbSceneParam._m0[90u].x));
    float _2141 = fma(_2132, cbSceneParam._m0[91u].z, fma(_2130, cbSceneParam._m0[91u].y, _2128 * cbSceneParam._m0[91u].x));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2179 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2183 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2187 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2188 = _2175 / _2187;
    float _2189 = _2179 / _2187;
    float _2190 = _2183 / _2187;
    float _2337;
    float _2338;
    float _2339;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2217 = ((uint(_2190 > cbSceneParam._m0[59u].y) + uint(_2190 > cbSceneParam._m0[59u].x)) + uint(_2190 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2218 = _2217 + 43u;
        uint _2226 = _2217 + 44u;
        uint _2234 = _2217 + 45u;
        uint _2242 = _2217 + 46u;
        float _2253 = fma(_2187, cbSceneParam._m0[_2218].w, fma(_2183, cbSceneParam._m0[_2218].z, fma(_2179, cbSceneParam._m0[_2218].y, _2175 * cbSceneParam._m0[_2218].x)));
        float _2257 = fma(_2187, cbSceneParam._m0[_2226].w, fma(_2183, cbSceneParam._m0[_2226].z, fma(_2179, cbSceneParam._m0[_2226].y, _2175 * cbSceneParam._m0[_2226].x)));
        float _2265 = fma(_2187, cbSceneParam._m0[_2242].w, fma(_2183, cbSceneParam._m0[_2242].z, fma(_2179, cbSceneParam._m0[_2242].y, _2175 * cbSceneParam._m0[_2242].x)));
        float _2270 = cbSceneParam._m0[33u].z * _2265;
        float _2272 = cbSceneParam._m0[33u].w * _2265;
        float _2275 = fma(_2187, cbSceneParam._m0[_2234].w, fma(_2183, cbSceneParam._m0[_2234].z, fma(_2179, cbSceneParam._m0[_2234].y, _2175 * cbSceneParam._m0[_2234].x))) / _2265;
        float _2323 = (cbSceneParam._m0[33u].x - sqrt(((_2189 * _2189) + (_2188 * _2188)) + (_2190 * _2190))) * cbSceneParam._m0[33u].y;
        float _4672 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2330 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2270 + _2253) / _2265, (_2272 + _2257) / _2265), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2272 + _2253) / _2265, (_2257 - _2270) / _2265), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2253 - _2270) / _2265, (_2257 - _2272) / _2265), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2253 - _2272) / _2265, (_2270 + _2257) / _2265), _2275), 0.0)).x), vec4(0.25)));
        _2337 = 1.0 - (_2330 * cbSceneParam._m0[34u].x);
        _2338 = 1.0 - (_2330 * cbSceneParam._m0[34u].y);
        _2339 = 1.0 - (_2330 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2337 = 1.0;
        _2338 = 1.0;
        _2339 = 1.0;
    }
    float _2403;
    float _2405;
    float _2407;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2391 = fma(_2187, cbSceneParam._m0[63u].w, fma(_2183, cbSceneParam._m0[63u].z, fma(_2179, cbSceneParam._m0[63u].y, _2175 * cbSceneParam._m0[63u].x)));
        float _2392 = fma(_2187, cbSceneParam._m0[60u].w, fma(_2183, cbSceneParam._m0[60u].z, fma(_2179, cbSceneParam._m0[60u].y, _2175 * cbSceneParam._m0[60u].x))) / _2391;
        float _2393 = fma(_2187, cbSceneParam._m0[61u].w, fma(_2183, cbSceneParam._m0[61u].z, fma(_2179, cbSceneParam._m0[61u].y, _2175 * cbSceneParam._m0[61u].x))) / _2391;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2392 >= cbSceneParam._m0[64u].x) && (_2393 >= cbSceneParam._m0[64u].y)) && (_2392 <= cbSceneParam._m0[64u].z)) && (_2393 <= cbSceneParam._m0[64u].w))
        {
            float _2531 = fma(_2187, cbSceneParam._m0[62u].w, fma(_2183, cbSceneParam._m0[62u].z, fma(_2179, cbSceneParam._m0[62u].y, _2175 * cbSceneParam._m0[62u].x))) / _2391;
            float _2535 = isnan(cbSceneParam._m0[41u].w) ? _2531 : (isnan(_2531) ? cbSceneParam._m0[41u].w : max(_2531, cbSceneParam._m0[41u].w));
            float _2578 = (cbSceneParam._m0[33u].x - sqrt(((_2189 * _2189) + (_2188 * _2188)) + (_2190 * _2190))) * cbSceneParam._m0[33u].y;
            float _4688 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
            float _2585 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2392, cbSceneParam._m0[33u].w + _2393), _2535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2392, _2393 - cbSceneParam._m0[33u].z), _2535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2392 - cbSceneParam._m0[33u].z, _2393 - cbSceneParam._m0[33u].w), _2535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2392 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2393), _2535), 0.0)).x), vec4(0.25)));
            float _2589 = 1.0 - (_2585 * cbSceneParam._m0[34u].x);
            float _2590 = 1.0 - (_2585 * cbSceneParam._m0[34u].y);
            float _2591 = 1.0 - (_2585 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2591) ? _2339 : (isnan(_2339) ? _2591 : min(_2339, _2591));
            frontier_phi_34_33_ladder_1 = isnan(_2590) ? _2338 : (isnan(_2338) ? _2590 : min(_2338, _2590));
            frontier_phi_34_33_ladder_2 = isnan(_2589) ? _2337 : (isnan(_2337) ? _2589 : min(_2337, _2589));
        }
        else
        {
            frontier_phi_34_33_ladder = _2339;
            frontier_phi_34_33_ladder_1 = _2338;
            frontier_phi_34_33_ladder_2 = _2337;
        }
        _2403 = frontier_phi_34_33_ladder_2;
        _2405 = frontier_phi_34_33_ladder_1;
        _2407 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2403 = _2337;
        _2405 = _2338;
        _2407 = _2339;
    }
    uvec4 _2412 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2414 = _2412.x * 14u;
    uint _2415 = _2414 + 13u;
    float _2422 = _1114 + (-1.0);
    float _2427 = (cbLight._m0[_2415].x * _2422) + 1.0;
    float _2428 = (cbLight._m0[_2415].y * _2422) + 1.0;
    float _2429 = (cbLight._m0[_2415].z * _2422) + 1.0;
    float _2430 = (cbLight._m0[_2415].w * _2422) + 1.0;
    uint _2431 = _2414 + 5u;
    float _2437 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
    uint _2441 = _2414 + 4u;
    float _2450 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
    uint _2454 = _2414 | 1u;
    float _2465 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_949, _950, _951));
    float _2468 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_949, _950, _951));
    float _4724 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _4735 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2473 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * 0.3183098733425140380859375;
    float _2475 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * 0.3183098733425140380859375;
    float _2482 = ((cbLight._m0[_2431].x * _2437) * _2475) + (((cbLight._m0[_2441].x * _2403) * _2450) * _2473);
    float _2483 = ((_2437 * cbLight._m0[_2431].y) * _2475) + (((cbLight._m0[_2441].y * _2405) * _2450) * _2473);
    float _2484 = ((_2437 * cbLight._m0[_2431].z) * _2475) + (((cbLight._m0[_2441].z * _2407) * _2450) * _2473);
    uvec4 _2488 = floatBitsToUint(cbLight._m0[_2414 + 12u]);
    bool _2490 = _2488.x == 0u;
    float _2592;
    float _2594;
    float _2596;
    if (_2490)
    {
        _2592 = _2482;
        _2594 = _2483;
        _2596 = _2484;
    }
    else
    {
        uint _2600 = _2414 + 6u;
        float _2616 = (dot(vec3(cbLight._m0[_2414 + 2u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2617 = _2616 * _2616;
        float _4746 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2618 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2619 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2592 = (((cbLight._m0[_2600].x * 0.3183098733425140380859375) * _2618) * _2619) + _2482;
        _2594 = (((cbLight._m0[_2600].y * 0.3183098733425140380859375) * _2618) * _2619) + _2483;
        _2596 = (((cbLight._m0[_2600].z * 0.3183098733425140380859375) * _2618) * _2619) + _2484;
    }
    bool _2599 = _2488.y == 0u;
    float _2654;
    float _2656;
    float _2658;
    if (_2599)
    {
        _2654 = _2592;
        _2656 = _2594;
        _2658 = _2596;
    }
    else
    {
        uint _2827 = _2414 + 7u;
        float _2843 = (dot(vec3(cbLight._m0[_2414 + 3u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2844 = _2843 * _2843;
        float _4762 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2845 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2846 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2654 = (((cbLight._m0[_2827].x * 0.3183098733425140380859375) * _2845) * _2846) + _2592;
        _2656 = (((cbLight._m0[_2827].y * 0.3183098733425140380859375) * _2845) * _2846) + _2594;
        _2658 = (((cbLight._m0[_2827].z * 0.3183098733425140380859375) * _2845) * _2846) + _2596;
    }
    uint _2661 = _2414 + 8u;
    float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2414].w)) * _952) * 0.949999988079071044921875);
    float _2675 = _2674 * _2674;
    float _2676 = cbLight._m0[_2414].x + _1028;
    float _2677 = cbLight._m0[_2414].y + _1029;
    float _2678 = cbLight._m0[_2414].z + _1030;
    float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
    float _2683 = _2682 * _2676;
    float _2684 = _2682 * _2677;
    float _2685 = _2682 * _2678;
    float _2686 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2414].xyz));
    float _4778 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
    float _4789 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _2690 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
    float _2691 = dot(vec3(_949, _950, _951), vec3(_2683, _2684, _2685));
    float _4800 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
    float _2695 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_2683, _2684, _2685));
    float _4811 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2699 = _2675 * _2675;
    float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
    float _2711 = exp2(log2(1.0 - (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) * 5.0);
    float _2712 = 0.959999978542327880859375 - _1095;
    float _2714 = 0.959999978542327880859375 - _1096;
    float _2715 = 0.959999978542327880859375 - _1097;
    float _2722 = 1.0 - _2675;
    float _2733 = (0.5 / (((_2690 * ((_2689 * _2722) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2722) + _2675) * _2689))) * _2689;
    float _4822 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2735 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
    uint _2749 = _2414 + 9u;
    float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2454].w)) * _952) * 0.949999988079071044921875);
    float _2761 = _2760 * _2760;
    float _2762 = cbLight._m0[_2454].x + _1028;
    float _2763 = cbLight._m0[_2454].y + _1029;
    float _2764 = cbLight._m0[_2454].z + _1030;
    float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
    float _2769 = _2768 * _2762;
    float _2770 = _2768 * _2763;
    float _2771 = _2768 * _2764;
    float _2772 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2454].xyz));
    float _4833 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2775 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
    float _2776 = dot(vec3(_949, _950, _951), vec3(_2769, _2770, _2771));
    float _4844 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2779 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
    float _2780 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_2769, _2770, _2771));
    float _4855 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2784 = _2761 * _2761;
    float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
    float _2795 = exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0);
    float _2802 = 1.0 - _2761;
    float _2812 = (0.5 / (((_2690 * ((_2775 * _2802) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2802) + _2761) * _2775))) * _2775;
    float _4866 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2814 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
    float _2824 = (((((_2795 * _2712) + _1098) * cbLight._m0[_2749].x) * _2814) * _2437) + ((((cbLight._m0[_2661].x * _2403) * ((_2711 * _2712) + _1098)) * _2735) * _2450);
    float _2825 = (((((_2795 * _2714) + _1100) * cbLight._m0[_2749].y) * _2814) * _2437) + ((((cbLight._m0[_2661].y * _2405) * ((_2711 * _2714) + _1100)) * _2735) * _2450);
    float _2826 = (((((_2795 * _2715) + _1101) * cbLight._m0[_2749].z) * _2814) * _2437) + ((((cbLight._m0[_2661].z * _2407) * ((_2711 * _2715) + _1101)) * _2735) * _2450);
    float _2882;
    float _2884;
    float _2886;
    if (_2490)
    {
        _2882 = _2824;
        _2884 = _2825;
        _2886 = _2826;
    }
    else
    {
        uint _2888 = _2414 + 2u;
        uint _2892 = _2414 + 10u;
        float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2888].w)) * _952) * 0.949999988079071044921875);
        float _2907 = _2906 * _2906;
        float _2908 = cbLight._m0[_2888].x + _1028;
        float _2909 = cbLight._m0[_2888].y + _1029;
        float _2910 = cbLight._m0[_2888].z + _1030;
        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
        float _2915 = _2914 * _2908;
        float _2916 = _2914 * _2909;
        float _2917 = _2914 * _2910;
        float _2918 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2888].xyz));
        float _4877 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2922 = dot(vec3(_949, _950, _951), vec3(_2915, _2916, _2917));
        float _4888 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2925 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2926 = dot(vec3(cbLight._m0[_2888].xyz), vec3(_2915, _2916, _2917));
        float _4899 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2930 = _2907 * _2907;
        float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
        float _2941 = exp2(log2(1.0 - (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) * 5.0);
        float _2948 = 1.0 - _2907;
        float _2958 = (0.5 / (((_2690 * ((_2921 * _2948) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2948) + _2907) * _2921))) * _2921;
        float _4910 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2960 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
        float _2961 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2882 = (((((_2941 * _2712) + _1098) * cbLight._m0[_2892].x) * _2960) * _2961) + _2824;
        _2884 = (((((_2941 * _2714) + _1100) * cbLight._m0[_2892].y) * _2960) * _2961) + _2825;
        _2886 = (((((_2941 * _2715) + _1101) * cbLight._m0[_2892].z) * _2960) * _2961) + _2826;
    }
    float _2992;
    float _2994;
    float _2996;
    if (_2599)
    {
        _2992 = _2882;
        _2994 = _2884;
        _2996 = _2886;
    }
    else
    {
        uint _3003 = _2414 + 3u;
        uint _3007 = _2414 + 11u;
        float _3021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3003].w)) * _952) * 0.949999988079071044921875);
        float _3022 = _3021 * _3021;
        float _3023 = cbLight._m0[_3003].x + _1028;
        float _3024 = cbLight._m0[_3003].y + _1029;
        float _3025 = cbLight._m0[_3003].z + _1030;
        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
        float _3030 = _3029 * _3023;
        float _3031 = _3029 * _3024;
        float _3032 = _3029 * _3025;
        float _3033 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_3003].xyz));
        float _4926 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3036 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
        float _3037 = dot(vec3(_949, _950, _951), vec3(_3030, _3031, _3032));
        float _4937 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        float _3040 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
        float _3041 = dot(vec3(cbLight._m0[_3003].xyz), vec3(_3030, _3031, _3032));
        float _4948 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
        float _3045 = _3022 * _3022;
        float _3049 = ((_3040 * _3040) * (_3045 + (-1.0))) + 1.0;
        float _3056 = exp2(log2(1.0 - (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0)))) * 5.0);
        float _3063 = 1.0 - _3022;
        float _3073 = (0.5 / (((_2690 * ((_3036 * _3063) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _3063) + _3022) * _3036))) * _3036;
        float _4959 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
        float _3075 = (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (_3045 / ((_3049 * _3049) * 3.141590118408203125));
        float _3076 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2992 = (((((_3056 * _2712) + _1098) * cbLight._m0[_3007].x) * _3075) * _3076) + _2882;
        _2994 = (((((_3056 * _2714) + _1100) * cbLight._m0[_3007].y) * _3075) * _3076) + _2884;
        _2996 = (((((_3056 * _2715) + _1101) * cbLight._m0[_3007].z) * _3075) * _3076) + _2886;
    }
    float _3142;
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    if (_2412.y == 0u)
    {
        uvec4 _3097 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3098 = _3097.x;
        uint _3109 = uint((float(_3097.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1037) / _3098))) + floor(float(uint(cbSceneParam._m0[85u].x * _1036) / _3098)));
        float _3119 = (log2(_2190 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3120 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
        uint _3123 = uint(isnan(14.0) ? _3120 : (isnan(_3120) ? 14.0 : min(_3120, 14.0)));
        uvec4 _3128 = texelFetch(g_lightClusterGridBuffer, int(((_3123 << 2u) + (_3109 << 6u)) >> 2u));
        uint _3129 = _3128.x;
        uint _3130 = _3097.z;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        if (((((1u << ((_3130 >> 4u) & 15u)) + 4294967295u) & _3129) == 0u) || ((_3130 & 240u) == 0u))
        {
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
            _3217 = 0.0;
            _3219 = 0.0;
        }
        else
        {
            float _3210;
            float _3212;
            float _3214;
            float _3216;
            float _3218;
            float _3220;
            float _3353 = 0.0;
            float _3354 = 0.0;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            uint _3359 = 0u;
            uint _3368;
            bool _3369;
            for (;;)
            {
                _3368 = texelFetch(g_lightClassification, int((((_3123 << 5u) + (_3109 << 9u)) + (_3359 << 2u)) >> 2u)).x;
                _3369 = _3368 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3369)
                {
                    frontier_phi_66_pred = _3358;
                    frontier_phi_66_pred_1 = _3357;
                    frontier_phi_66_pred_2 = _3356;
                    frontier_phi_66_pred_3 = _3355;
                    frontier_phi_66_pred_4 = _3354;
                    frontier_phi_66_pred_5 = _3353;
                }
                else
                {
                    float _3477;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    uint _3483;
                    _3477 = _3353;
                    _3478 = _3354;
                    _3479 = _3355;
                    _3480 = _3356;
                    _3481 = _3357;
                    _3482 = _3358;
                    _3483 = _3368;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    for (;;)
                    {
                        uint _3487 = uint(findLSB(_3483)) + (_3359 << 5u);
                        uint _3484 = (_3483 + 4294967295u) & _3483;
                        uint _3489 = _3487 * 48u;
                        vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3489)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 3u)).x));
                        uint _3509 = (_3487 * 48u) + 4u;
                        vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3509)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 3u)).x));
                        uint _3528 = (_3487 * 48u) + 8u;
                        vec3 _3539 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3528)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 2u)).x));
                        float _3543 = _3503.x - _2188;
                        float _3544 = _3503.y - _2189;
                        float _3545 = _3503.z - _2190;
                        float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                        float _3549 = inversesqrt(_3546);
                        float _3550 = _3549 * _3543;
                        float _3551 = _3549 * _3544;
                        float _3552 = _3549 * _3545;
                        float _3553 = dot(vec3(_1055, _1058, _1061), vec3(_3550, _3551, _3552));
                        float _3558 = 1.0 - (_3546 * _3503.w);
                        float _4985 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3559 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                        float _3560 = sqrt(_3546) * _3522.w;
                        float _3563 = 1.39999997615814208984375 / (_3560 + 1.39999997615814208984375);
                        float _3564 = _3563 * _3563;
                        float _3567 = ((1.0 - _3564) * _3553) + _3564;
                        float _3570 = _3560 * _3560;
                        float _3574 = ((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3559) / ((_3570 * 0.699999988079071044921875) + 1.0);
                        float _3578 = (-0.0) - _2188;
                        float _3579 = (-0.0) - _2189;
                        float _3580 = (-0.0) - _2190;
                        float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                        float _3585 = _3584 * _3578;
                        float _3586 = _3584 * _3579;
                        float _3587 = _3584 * _3580;
                        float _3594 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                        float _3595 = 1.0 - _1130;
                        float _3602 = sqrt(1.0 - ((1.0 - (_3595 * _3595)) * (1.0 - (_3594 * _3594))));
                        float _3603 = _3602 * _3602;
                        float _3604 = _3603 * _3603;
                        float _3605 = _3585 + _3550;
                        float _3606 = _3586 + _3551;
                        float _3607 = _3587 + _3552;
                        float _3611 = inversesqrt(dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607)));
                        float _3615 = dot(vec3(_1055, _1058, _1061), vec3(_3585, _3586, _3587));
                        float _5001 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3618 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                        float _3619 = dot(vec3(_1055, _1058, _1061), vec3(_3611 * _3605, _3611 * _3606, _3611 * _3607));
                        float _5012 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3622 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                        float _3626 = ((_3622 * _3622) * (_3604 + (-1.0))) + 1.0;
                        float _3627 = _3563 * _3603;
                        float _3628 = _3627 * _3627;
                        float _3631 = ((1.0 - _3628) * _3553) + _3628;
                        float _5023 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                        float _3632 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                        float _3633 = 1.0 - _3603;
                        float _3643 = (0.5 / (((_3632 * ((_3618 * _3633) + _3603)) + 9.9999999392252902907785028219223e-09) + (((_3632 * _3633) + _3603) * _3618))) * _3632;
                        float _5034 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3654 = (((_3604 * 3.1415927410125732421875) * (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) / ((_3626 * _3626) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125))) * _3559;
                        _3412 = (_3574 * _3522.x) + _3480;
                        _3413 = (_3574 * _3522.y) + _3481;
                        _3414 = (_3574 * _3522.z) + _3482;
                        _3409 = (_3654 * _3539.x) + _3477;
                        _3410 = (_3654 * _3539.y) + _3478;
                        _3411 = (_3654 * _3539.z) + _3479;
                        if (_3484 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3477 = _3409;
                            _3478 = _3410;
                            _3479 = _3411;
                            _3480 = _3412;
                            _3481 = _3413;
                            _3482 = _3414;
                            _3483 = _3484;
                        }
                    }
                    frontier_phi_66_pred = _3414;
                    frontier_phi_66_pred_1 = _3413;
                    frontier_phi_66_pred_2 = _3412;
                    frontier_phi_66_pred_3 = _3411;
                    frontier_phi_66_pred_4 = _3410;
                    frontier_phi_66_pred_5 = _3409;
                }
                _3220 = frontier_phi_66_pred;
                _3218 = frontier_phi_66_pred_1;
                _3216 = frontier_phi_66_pred_2;
                _3214 = frontier_phi_66_pred_3;
                _3212 = frontier_phi_66_pred_4;
                _3210 = frontier_phi_66_pred_5;
                uint _3360 = _3359 + 1u;
                if (_3360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3353 = _3210;
                    _3354 = _3212;
                    _3355 = _3214;
                    _3356 = _3216;
                    _3357 = _3218;
                    _3358 = _3220;
                    _3359 = _3360;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
            _3217 = _3218;
            _3219 = _3220;
        }
        uvec4 _3223 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3224 = _3223.z;
        uint _3226 = (_3224 >> 8u) & 15u;
        float _3321;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        if (((4294967295u << _3226) & _3129) == 0u)
        {
            _3321 = _3209;
            _3323 = _3211;
            _3325 = _3213;
            _3327 = _3215;
            _3329 = _3217;
            _3331 = _3219;
        }
        else
        {
            float _3346 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
            float _3347 = _3346 * _2188;
            float _3348 = _3346 * _2189;
            float _3349 = _3346 * _2190;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3226 < ((_3224 >> 12u) & 15u))
            {
                float _3322;
                float _3324;
                float _3326;
                float _3328;
                float _3330;
                float _3332;
                float _3460 = _3209;
                float _3461 = _3211;
                float _3462 = _3213;
                float _3463 = _3215;
                float _3464 = _3217;
                float _3465 = _3219;
                uint _3466 = _3226;
                uint _3475;
                bool _3476;
                for (;;)
                {
                    _3475 = texelFetch(g_lightClassification, int((((_3123 << 5u) + (_3109 << 9u)) + (_3466 << 2u)) >> 2u)).x;
                    _3476 = _3475 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3476)
                    {
                        frontier_phi_72_pred = _3465;
                        frontier_phi_72_pred_1 = _3464;
                        frontier_phi_72_pred_2 = _3463;
                        frontier_phi_72_pred_3 = _3462;
                        frontier_phi_72_pred_4 = _3461;
                        frontier_phi_72_pred_5 = _3460;
                    }
                    else
                    {
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3952;
                        float _3953;
                        float _3954;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3672 = _3460;
                        float _3673 = _3461;
                        float _3674 = _3462;
                        float _3675 = _3463;
                        float _3676 = _3464;
                        float _3677 = _3465;
                        uint _3678 = _3475;
                        uint _3679;
                        vec4 _3704;
                        float _3705;
                        vec4 _3720;
                        vec3 _3732;
                        vec4 _3747;
                        vec4 _3762;
                        float _3808;
                        bool _3809;
                        for (;;)
                        {
                            uint _3689 = ((_3466 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3678));
                            _3679 = (_3678 + 4294967295u) & _3678;
                            uint _3691 = _3689 * 40u;
                            _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            _3705 = _3704.w;
                            uint _3707 = (_3689 * 40u) + 4u;
                            _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            uint _3722 = (_3689 * 40u) + 8u;
                            _3732 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x));
                            uint _3734 = (_3689 * 40u) + 16u;
                            _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            uint _3749 = (_3689 * 40u) + 20u;
                            _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            uint _3764 = (_3689 * 40u) + 24u;
                            vec4 _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            uint _3783 = (_3689 * 40u) + 28u;
                            vec4 _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            _3808 = fma(_2190, _3796.z, fma(_2189, _3796.y, _3796.x * _2188)) + _3796.w;
                            _3809 = !((fma(_2190, _3777.z, fma(_2189, _3777.y, _3777.x * _2188)) + _3777.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3809)
                            {
                                float _3836 = _3704.x - _2188;
                                float _3837 = _3704.y - _2189;
                                float _3838 = _3704.z - _2190;
                                float _3839 = dot(vec3(_3836, _3837, _3838), vec3(_3836, _3837, _3838));
                                float _3842 = inversesqrt(_3839);
                                float _3843 = _3842 * _3836;
                                float _3844 = _3842 * _3837;
                                float _3845 = _3842 * _3838;
                                float _3849 = 1.0 - (_3839 / (_3705 * _3705));
                                float _5045 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3854 = sqrt(_3839) * _3720.w;
                                float _3856 = 1.39999997615814208984375 / (_3854 + 1.39999997615814208984375);
                                float _3857 = _3856 * _3856;
                                float _3860 = ((1.0 - _3857) * dot(vec3(_3843, _3844, _3845), vec3(_1055, _1058, _1061))) + _3857;
                                float _3863 = _3854 * _3854;
                                float _3867 = (fma(_2190, _3747.z, fma(_2189, _3747.y, _3747.x * _2188)) + _3747.w) / _3808;
                                float _3868 = (fma(_2190, _3762.z, fma(_2189, _3762.y, _3762.x * _2188)) + _3762.w) / _3808;
                                float _3872 = 1.0 - dot(vec2(_3867, _3868), vec2(_3867, _3868));
                                float _5061 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3873 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                                float _3874 = _3873 * (((isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0))) * _3850) / ((_3863 * 0.699999988079071044921875) + 1.0));
                                float _3886 = exp2(log2(1.0 / ((_3863 * 3.5) + 5.0)) * 0.25);
                                float _3887 = 1.0 - _1130;
                                float _3894 = sqrt(1.0 - ((1.0 - (_3887 * _3887)) * (1.0 - (_3886 * _3886))));
                                float _3895 = _3894 * _3894;
                                float _3896 = _3895 * _3895;
                                float _3897 = _3843 - _3347;
                                float _3898 = _3844 - _3348;
                                float _3899 = _3845 - _3349;
                                float _3903 = inversesqrt(dot(vec3(_3897, _3898, _3899), vec3(_3897, _3898, _3899)));
                                float _3907 = dot(vec3(_1055, _1058, _1061), vec3((-0.0) - _3347, (-0.0) - _3348, (-0.0) - _3349));
                                float _5072 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3910 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                                float _3911 = dot(vec3(_1055, _1058, _1061), vec3(_3903 * _3897, _3903 * _3898, _3903 * _3899));
                                float _5083 = isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0));
                                float _3914 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                                float _3918 = ((_3914 * _3914) * (_3896 + (-1.0))) + 1.0;
                                float _3919 = _3856 * _3895;
                                float _3920 = _3919 * _3919;
                                float _3926 = ((1.0 - _3920) * dot(vec3(_1055, _1058, _1061), vec3(_3843, _3844, _3845))) + _3920;
                                float _5094 = isnan(0.0) ? _3926 : (isnan(_3926) ? 0.0 : max(_3926, 0.0));
                                float _3927 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                                float _3928 = 1.0 - _3895;
                                float _3938 = (0.5 / (((_3927 * ((_3910 * _3928) + _3895)) + 9.9999999392252902907785028219223e-09) + (((_3927 * _3928) + _3895) * _3910))) * _3927;
                                float _5105 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3948 = (_3873 * _3850) * (((_3896 * 3.1415927410125732421875) * (isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0)))) / ((_3918 * _3918) * ((_3863 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3874 * _3720.y;
                                frontier_phi_78_pred_1 = _3874 * _3720.x;
                                frontier_phi_78_pred_2 = _3948 * _3732.z;
                                frontier_phi_78_pred_3 = _3948 * _3732.y;
                                frontier_phi_78_pred_4 = _3948 * _3732.x;
                                frontier_phi_78_pred_5 = _3874 * _3720.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3956 = frontier_phi_78_pred;
                            _3955 = frontier_phi_78_pred_1;
                            _3954 = frontier_phi_78_pred_2;
                            _3953 = frontier_phi_78_pred_3;
                            _3952 = frontier_phi_78_pred_4;
                            _3957 = frontier_phi_78_pred_5;
                            _3662 = _3955 + _3675;
                            _3663 = _3956 + _3676;
                            _3664 = _3957 + _3677;
                            _3659 = _3952 + _3672;
                            _3660 = _3953 + _3673;
                            _3661 = _3954 + _3674;
                            if (_3679 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3672 = _3659;
                                _3673 = _3660;
                                _3674 = _3661;
                                _3675 = _3662;
                                _3676 = _3663;
                                _3677 = _3664;
                                _3678 = _3679;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3664;
                        frontier_phi_72_pred_1 = _3663;
                        frontier_phi_72_pred_2 = _3662;
                        frontier_phi_72_pred_3 = _3661;
                        frontier_phi_72_pred_4 = _3660;
                        frontier_phi_72_pred_5 = _3659;
                    }
                    _3332 = frontier_phi_72_pred;
                    _3330 = frontier_phi_72_pred_1;
                    _3328 = frontier_phi_72_pred_2;
                    _3326 = frontier_phi_72_pred_3;
                    _3324 = frontier_phi_72_pred_4;
                    _3322 = frontier_phi_72_pred_5;
                    uint _3467 = _3466 + 1u;
                    if (_3467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3460 = _3322;
                        _3461 = _3324;
                        _3462 = _3326;
                        _3463 = _3328;
                        _3464 = _3330;
                        _3465 = _3332;
                        _3466 = _3467;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3332;
                frontier_phi_60_61_ladder_1 = _3330;
                frontier_phi_60_61_ladder_2 = _3326;
                frontier_phi_60_61_ladder_3 = _3324;
                frontier_phi_60_61_ladder_4 = _3322;
                frontier_phi_60_61_ladder_5 = _3328;
            }
            else
            {
                frontier_phi_60_61_ladder = _3219;
                frontier_phi_60_61_ladder_1 = _3217;
                frontier_phi_60_61_ladder_2 = _3213;
                frontier_phi_60_61_ladder_3 = _3211;
                frontier_phi_60_61_ladder_4 = _3209;
                frontier_phi_60_61_ladder_5 = _3215;
            }
            _3321 = frontier_phi_60_61_ladder_4;
            _3323 = frontier_phi_60_61_ladder_3;
            _3325 = frontier_phi_60_61_ladder_2;
            _3327 = frontier_phi_60_61_ladder_5;
            _3329 = frontier_phi_60_61_ladder_1;
            _3331 = frontier_phi_60_61_ladder;
        }
        float _3336 = isnan(1.0) ? _1114 : (isnan(_1114) ? 1.0 : min(_1114, 1.0));
        _3142 = (_3336 * _3327) + _2654;
        _3144 = (_3336 * _3329) + _2656;
        _3146 = (_3336 * _3331) + _2658;
        _3148 = ((_3321 * _1098) * _3336) + _2992;
        _3150 = ((_3323 * _1100) * _3336) + _2994;
        _3152 = ((_3325 * _1101) * _3336) + _2996;
    }
    else
    {
        _3142 = _2654;
        _3144 = _2656;
        _3146 = _2658;
        _3148 = _2992;
        _3150 = _2994;
        _3152 = _2996;
    }
    float _5121 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _5132 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _5143 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    uint _3172 = _287 + 6u;
    float _3180 = _1036 / cbSceneParam._m0[86u].x;
    float _3181 = _1037 / cbSceneParam._m0[86u].y;
    vec4 _3195 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3180, _3181, (log2((isnan(cbSceneParam._m0[77u].w) ? _971 : (isnan(_971) ? cbSceneParam._m0[77u].w : min(_971, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3197 = _3195.x;
    float _3198 = _3195.y;
    float _3199 = _3195.z;
    float _3200 = _3195.w;
    float _3271;
    float _3273;
    float _3275;
    float _3277;
    if (_971 > cbSceneParam._m0[78u].w)
    {
        float _3234 = isnan(_971) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _971 : min(cbSceneParam._m0[80u].w, _971));
        float _3235 = _3234 / _971;
        float _3246 = _3235 * _1021;
        float _3247 = _1022 * _3235;
        float _3248 = (-0.0) - _3247;
        float _3249 = _3235 * _1023;
        float _3251 = (cbSceneParam._m0[77u].w * _3248) / _3234;
        float _3252 = _3251 + cbSceneParam._m0[79u].w;
        float _3253 = cbSceneParam._m0[79u].w - _3247;
        float _3259 = sqrt(((_3246 * _3246) + (_3247 * _3247)) + (_3249 * _3249));
        float _3262 = (1.0 - (cbSceneParam._m0[77u].w / _3234)) * _3259;
        float _3267 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3269 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3422;
        if (abs((_3248 - _3251) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3422 = ((((_3252 > 0.0) ? exp2(_3267 * _3252) : (2.0 - exp2(_3269 * _3252))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3262;
        }
        else
        {
            float _3382 = 1.0 / cbSceneParam._m0[80u].x;
            float _3383 = isnan(_3253) ? _3252 : (isnan(_3252) ? _3253 : max(_3252, _3253));
            float _3384 = isnan(_3253) ? _3252 : (isnan(_3252) ? _3253 : min(_3252, _3253));
            float _3393 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : min(_3383, 0.0));
            float _3394 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : min(_3384, 0.0));
            _3422 = ((abs(_3259 / _3248) * cbSceneParam._m0[80u].y) * ((((_3393 - _3394) * 2.0) - ((exp2(_3267 * (isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0)))) - exp2(_3267 * (isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))))) * _3382)) - ((exp2(_3269 * _3393) - exp2(_3269 * _3394)) * _3382))) + (_3262 * cbSceneParam._m0[80u].z);
        }
        vec4 _3424 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3180, _3181, 1.0), 0.0);
        float _3433 = exp2((_3422 * (-1.44269502162933349609375)) * (1.0 - _3424.w));
        float _3434 = log2(_3433);
        float _3450 = log2(_3200);
        _3271 = (exp2(_3450 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].x)) * _3424.x) / cbSceneParam._m0[78u].x)) + _3197;
        _3273 = (exp2(_3450 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].y)) * _3424.y) / cbSceneParam._m0[78u].y)) + _3198;
        _3275 = (exp2(_3450 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].z)) * _3424.z) / cbSceneParam._m0[78u].z)) + _3199;
        _3277 = _3433 * _3200;
    }
    else
    {
        _3271 = _3197;
        _3273 = _3198;
        _3275 = _3199;
        _3277 = _3200;
    }
    float _3289 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3290 = _3289 == 3.0;
    float _3291 = log2(_3277);
    float _3298 = exp2(_3291 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0))) * (_3142 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1114))) + ((_3148 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1922)) * cbPerFrame._m0[3u].x));
    float _3299 = exp2(_3291 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0))) * (_3144 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1114))) + ((_3150 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1922)) * cbPerFrame._m0[3u].x));
    float _3300 = exp2(_3291 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0))) * (_3146 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1114))) + ((_3152 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1922)) * cbPerFrame._m0[3u].x));
    float _3309 = (_3289 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3309 * (_3290 ? _3298 : (_3298 + (cbSceneParam._m0[72u].w * _3271)));
    SV_Target.y = _3309 * (_3290 ? _3299 : (_3299 + (cbSceneParam._m0[72u].w * _3273)));
    SV_Target.z = _3309 * (_3290 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3275)));
    SV_Target.w = cbInstanceData._m0[_3172].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3172].w;
}


