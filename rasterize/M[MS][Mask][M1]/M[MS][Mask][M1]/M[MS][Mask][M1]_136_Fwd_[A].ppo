#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1622;
float _3999;
float _4000;
float _4001;
float _4002;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _313.x * cbMtdParam._m0[11u].x;
    float _320 = _313.y * cbMtdParam._m0[11u].y;
    float _321 = _313.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _359.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4011 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _437 = (_430 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _438 = (_430 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _439 = (_430 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _359.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[23u].w) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4022 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _510 = (_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437;
    float _511 = (_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438;
    float _512 = (_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _550 = _548.x;
    float _560 = dot(vec4(_550, _548.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _572 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _359.z) * 2.0) - ((((_550 - _560) * cbMtdParam._m0[23u].w) + _560) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4033 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _580 = (_573 * ((_531.x * cbMtdParam._m0[14u].x) - _510)) + _510;
    float _581 = (_573 * ((_531.y * cbMtdParam._m0[14u].y) - _511)) + _511;
    float _582 = (_573 * ((_531.z * cbMtdParam._m0[14u].z) - _512)) + _512;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _639 = _637.x;
    float _640 = _637.y;
    float _641 = _637.z;
    float _648 = ((_620.x - _639) * _430) + _639;
    float _649 = ((_620.y - _640) * _430) + _640;
    float _650 = ((_620.z - _641) * _430) + _641;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _673 = ((_662.x - _648) * _503) + _648;
    float _674 = ((_662.y - _649) * _503) + _649;
    float _675 = ((_662.z - _650) * _503) + _650;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _700 = ((_687.z - _675) * _573) + _675;
    float _703 = ((((_687.x - _673) * _573) + _673) * 2.0) + (-1.0);
    float _705 = ((((_687.y - _674) * _573) + _674) * 2.0) + (-1.0);
    float _706 = dot(vec2(_703, _705), vec2(_703, _705));
    float _4044 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _711 = sqrt(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _752 = _750.x;
    float _753 = 1.0 - _752;
    float _761 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _764 = ((isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : min(_761, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _773 = (_764 - ((((((_752 - _753) * cbMtdParam._m0[24u].z) + _753) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _764))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4065 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _774 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _781 = (_774 * ((_600.x * cbMtdParam._m0[18u].x) - _580)) + _580;
    float _782 = (_774 * ((_600.y * cbMtdParam._m0[18u].y) - _581)) + _581;
    float _783 = (_774 * ((_600.z * cbMtdParam._m0[18u].z) - _582)) + _582;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _797 = _795.x;
    float _798 = 1.0 - _797;
    float _823 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_797 - _798) * cbMtdParam._m0[24u].w) + _798) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4076 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _824 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _832 = ((((cbMtdParam._m0[10u].x - _781) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _824) + _781;
    float _833 = ((((cbMtdParam._m0[10u].y - _782) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _824) + _782;
    float _834 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _783)) * _824) + _783;
    vec4 _860 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _862 = _860.x;
    float _880 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _862) * _430) + _862;
    float _897 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _880) * _503) + _880;
    float _914 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _897) * _573) + _897;
    float _918 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _914) * cbMtdParam._m0[19u].z) + _914;
    float _920 = _918 - (_918 * _774);
    float _922 = _920 - (_920 * _824);
    float _926 = (cbMtdParam._m0[19u].w * (_725.z - _700)) + _700;
    vec4 _940 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _947 = (_940.x * 2.0) + (-1.0);
    float _948 = (_940.y * 2.0) + (-1.0);
    float _949 = dot(vec2(_947, _948), vec2(_947, _948));
    float _4087 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _957 = (_774 * (_940.z - _926)) + _926;
    float _960 = ((cbMtdParam._m0[23u].x - _957) * _824) + _957;
    vec4 _983 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _989 = (_983.x * 2.0) + (-1.0);
    float _990 = (_983.y * 2.0) + (-1.0);
    float _991 = dot(vec2(_989, _990), vec2(_989, _990));
    float _4098 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _999 = (((_725.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _703;
    float _1000 = (((_725.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _705;
    float _1012 = (((_947 - _999) + (cbMtdParam._m0[21u].x * _999)) * _774) + _999;
    float _1013 = (((_948 - _1000) + (cbMtdParam._m0[21u].x * _1000)) * _774) + _1000;
    float _1014 = (_774 * (sqrt(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) - _711)) + _711;
    float _1025 = (((_989 - _1012) + (_1012 * cbMtdParam._m0[22u].z)) * _824) + _1012;
    float _1026 = (((_990 - _1013) + (_1013 * cbMtdParam._m0[22u].z)) * _824) + _1013;
    float _1027 = ((sqrt(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) - _1014) * _824) + _1014;
    float _1029 = cbMtdParam._m0[22u].x + _725.w;
    float _1032 = fma(_1027, _260 * NORMAL.x, fma(_1026, _267 * TANGENT.x, (_253 * _245) * _1025));
    float _1035 = fma(_1027, _260 * NORMAL.y, fma(_1026, _267 * TANGENT.y, (_253 * _246) * _1025));
    float _1038 = fma(_1027, _260 * NORMAL.z, fma(_1026, _267 * TANGENT.z, (_253 * _247) * _1025));
    float _1042 = inversesqrt(dot(vec3(_1032, _1035, _1038), vec3(_1032, _1035, _1038)));
    float _1043 = _1042 * _1032;
    float _1044 = _1042 * _1035;
    float _1045 = _1042 * _1038;
    float _4109 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _1046 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4131 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4142 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4153 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4164 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _1051 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _1065 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1115 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1105);
    float _1116 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1105);
    float _1117 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1105);
    float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
    float _1122 = _1115 * _1121;
    float _1123 = _1116 * _1121;
    float _1124 = _1117 * _1121;
    vec4 _1129 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1131 = _1129.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1303 = sqrt(((_1115 * _1115) + (_1116 * _1116)) + (_1117 * _1117));
        float _1309 = (cbMatDynParam._m0[5u].x * _1303) + cbMatDynParam._m0[5u].y;
        float _4175 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1314 = (cbMatDynParam._m0[5u].z * _1303) + cbMatDynParam._m0[5u].w;
        float _4186 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) - _1310)) + _1310) < ((_1131 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1142 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1143 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1161 = fma(_1045, cbSceneParam._m0[5u].z, fma(_1044, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1043));
    float _1164 = fma(_1045, cbSceneParam._m0[6u].z, fma(_1044, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1043));
    float _1167 = fma(_1045, cbSceneParam._m0[7u].z, fma(_1044, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1043));
    uint _1180 = _273 + 9u;
    uint _1181 = _1180 + uint(cbMatDynParam._m0[0u].w);
    float _1187 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * cbInstanceData._m0[_1181].x;
    float _1188 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * cbInstanceData._m0[_1181].y;
    float _1189 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * cbInstanceData._m0[_1181].z;
    float _4197 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1190 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _1192 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _1193 = 1.0 - _1051;
    float _1194 = _1190 * _1193;
    float _1195 = _1191 * _1193;
    float _1196 = _1192 * _1193;
    float _1201 = (_1190 + (-0.039999999105930328369140625)) * _1051;
    float _1202 = (_1191 + (-0.039999999105930328369140625)) * _1051;
    float _1203 = (_1192 + (-0.039999999105930328369140625)) * _1051;
    float _1204 = _1201 + 0.039999999105930328369140625;
    float _1206 = _1202 + 0.039999999105930328369140625;
    float _1207 = _1203 + 0.039999999105930328369140625;
    vec4 _1216 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1142, cbSceneParam._m0[86u].y * _1143));
    float _1220 = ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * TEXCOORD_5.w) * _1216.x;
    float _1221 = dot(vec3(_1043, _1044, _1045), vec3(_1122, _1123, _1124));
    float _1224 = _1221 * 2.0;
    float _1228 = (_1224 * _1043) - _1122;
    float _1229 = (_1224 * _1044) - _1123;
    float _1230 = (_1224 * _1045) - _1124;
    float _1234 = abs(dot(vec3(_1122, _1123, _1124), vec3(_1043, _1044, _1045)));
    float _4230 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _1236 = sqrt(_1046);
    float _1249 = exp2((_1236 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1236 * 3.0));
    float _1255 = (1.0 - _1249) * ((_1236 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1256 = _1249 * _1236;
    float _1284 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1288 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1292 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1621;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1346 = fma(_1292, cbModelParam._m0[26u].z, fma(_1288, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1284));
        float _1350 = fma(_1292, cbModelParam._m0[27u].z, fma(_1288, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1284));
        float _1354 = fma(_1292, cbModelParam._m0[28u].z, fma(_1288, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1284));
        float _1379 = _1284 + _1043;
        float _1380 = _1288 + _1044;
        float _1381 = _1292 + _1045;
        float _1391 = fma(_1381, cbModelParam._m0[26u].z, fma(_1380, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1379)) - _1346;
        float _1392 = fma(_1381, cbModelParam._m0[27u].z, fma(_1380, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1379)) - _1350;
        float _1393 = fma(_1381, cbModelParam._m0[28u].z, fma(_1380, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1379)) - _1354;
        float _1397 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
        float _1410 = ((_1397 * _1391) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1346 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1397 * _1392) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1350 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1397 * _1393) / cbModelParam._m0[34u].z) + ((((((_1354 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        float _1449 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1415.x + (-0.5));
        float _1451 = _1449 * (_1415.y + (-0.5));
        float _1452 = _1449 * (_1415.z + (-0.5));
        float _1459 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1422.x + (-0.5));
        float _1461 = _1459 * (_1422.y + (-0.5));
        float _1462 = _1459 * (_1422.z + (-0.5));
        float _1469 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1429.x + (-0.5));
        float _1471 = _1469 * (_1429.y + (-0.5));
        float _1472 = _1469 * (_1429.z + (-0.5));
        float _1479 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1436.x + (-0.5));
        float _1481 = _1479 * (_1436.y + (-0.5));
        float _1482 = _1479 * (_1436.z + (-0.5));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = _1450 * 0.5;
        float _1487 = _1460 * 0.5;
        float _1488 = _1470 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1503 = (dot(vec3(_1043, _1044, _1045), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1513 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4278 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1515 + 1.0))) + _1520) * _1483;
        float _1530 = _1451 * 0.5;
        float _1531 = _1461 * 0.5;
        float _1532 = _1471 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_1043, _1044, _1045), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4311 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1557 + 1.0))) + _1562) * _1484;
        float _1572 = _1452 * 0.5;
        float _1573 = _1462 * 0.5;
        float _1574 = _1472 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_1043, _1044, _1045), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4344 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1599 + 1.0))) + _1604) * _1485;
        _1621 = _1452;
        _1623 = _1451;
        _1624 = _1450;
        _1625 = _1462;
        _1626 = _1461;
        _1627 = _1460;
        _1628 = _1472;
        _1629 = _1471;
        _1630 = _1470;
        _1631 = _1485;
        _1632 = _1484;
        _1633 = _1483;
        _1634 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1635 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1636 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
    }
    else
    {
        _1621 = _1622;
        _1623 = _1622;
        _1624 = _1622;
        _1625 = _1622;
        _1626 = _1622;
        _1627 = _1622;
        _1628 = _1622;
        _1629 = _1622;
        _1630 = _1622;
        _1631 = _1622;
        _1632 = _1622;
        _1633 = _1622;
        _1634 = 0.0;
        _1635 = 0.0;
        _1636 = 0.0;
    }
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1662 = fma(_1292, cbModelParam._m0[30u].z, fma(_1288, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1284));
        float _1666 = fma(_1292, cbModelParam._m0[31u].z, fma(_1288, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1284));
        float _1670 = fma(_1292, cbModelParam._m0[32u].z, fma(_1288, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1284));
        float _1693 = _1284 + _1043;
        float _1694 = _1288 + _1044;
        float _1695 = _1292 + _1045;
        float _1705 = fma(_1695, cbModelParam._m0[30u].z, fma(_1694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1693)) - _1662;
        float _1706 = fma(_1695, cbModelParam._m0[31u].z, fma(_1694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1693)) - _1666;
        float _1707 = fma(_1695, cbModelParam._m0[32u].z, fma(_1694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1693)) - _1670;
        float _1711 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
        float _1724 = ((_1711 * _1705) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1662 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1725 = ((_1711 * _1706) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1666 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1726 = ((_1711 * _1707) / cbModelParam._m0[35u].z) + ((((((_1670 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1728 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        vec4 _1735 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        vec4 _1742 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        vec4 _1749 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        float _1761 = exp2((_1728.w + (-0.5)) * 20.0) * 2.0;
        float _1762 = _1761 * (_1728.x + (-0.5));
        float _1763 = _1761 * (_1728.y + (-0.5));
        float _1764 = _1761 * (_1728.z + (-0.5));
        float _1771 = exp2((_1735.w + (-0.5)) * 20.0) * 2.0;
        float _1772 = _1771 * (_1735.x + (-0.5));
        float _1773 = _1771 * (_1735.y + (-0.5));
        float _1774 = _1771 * (_1735.z + (-0.5));
        float _1781 = exp2((_1742.w + (-0.5)) * 20.0) * 2.0;
        float _1782 = _1781 * (_1742.x + (-0.5));
        float _1783 = _1781 * (_1742.y + (-0.5));
        float _1784 = _1781 * (_1742.z + (-0.5));
        float _1791 = exp2((_1749.w + (-0.5)) * 20.0) * 2.0;
        float _1792 = _1791 * (_1749.x + (-0.5));
        float _1793 = _1791 * (_1749.y + (-0.5));
        float _1794 = _1791 * (_1749.z + (-0.5));
        float _1795 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1796 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1797 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1798 = _1762 * 0.5;
        float _1799 = _1772 * 0.5;
        float _1800 = _1782 * 0.5;
        float _1801 = dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800));
        float _1806 = (_1801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1801);
        float _1814 = (dot(vec3(_1043, _1044, _1045), vec3(_1806 * _1798, _1806 * _1799, _1806 * _1800)) + 1.0) * 0.5;
        float _4385 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1823 = sqrt(((_1799 * _1799) + (_1798 * _1798)) + (_1800 * _1800)) / (_1795 + 9.9999997473787516355514526367188e-06);
        float _4396 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1825 = _1824 * 2.0;
        float _1829 = (1.0 - _1824) / (_1824 + 1.0);
        float _4407 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1839 = ((((1.0 - _1830) * (_1825 + 2.0)) * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_1825 + 1.0))) + _1830) * _1795;
        float _1840 = _1763 * 0.5;
        float _1841 = _1773 * 0.5;
        float _1842 = _1783 * 0.5;
        float _1843 = dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842));
        float _1848 = (_1843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1843);
        float _1856 = (dot(vec3(_1043, _1044, _1045), vec3(_1848 * _1840, _1848 * _1841, _1848 * _1842)) + 1.0) * 0.5;
        float _4418 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842)) / (_1796 + 9.9999997473787516355514526367188e-06);
        float _4429 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1867 = _1866 * 2.0;
        float _1871 = (1.0 - _1866) / (_1866 + 1.0);
        float _4440 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1881 = ((((1.0 - _1872) * (_1867 + 2.0)) * exp2(log2(isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_1867 + 1.0))) + _1872) * _1796;
        float _1882 = _1764 * 0.5;
        float _1883 = _1774 * 0.5;
        float _1884 = _1784 * 0.5;
        float _1885 = dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884));
        float _1890 = (_1885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1885);
        float _1898 = (dot(vec3(_1043, _1044, _1045), vec3(_1890 * _1882, _1890 * _1883, _1890 * _1884)) + 1.0) * 0.5;
        float _4451 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1907 = sqrt(((_1883 * _1883) + (_1882 * _1882)) + (_1884 * _1884)) / (_1797 + 9.9999997473787516355514526367188e-06);
        float _4462 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1909 = _1908 * 2.0;
        float _1913 = (1.0 - _1908) / (_1908 + 1.0);
        float _4473 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1923 = ((((1.0 - _1914) * (_1909 + 2.0)) * exp2(log2(isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_1909 + 1.0))) + _1914) * _1797;
        _1931 = _1764;
        _1932 = _1763;
        _1933 = _1762;
        _1934 = _1774;
        _1935 = _1773;
        _1936 = _1772;
        _1937 = _1784;
        _1938 = _1783;
        _1939 = _1782;
        _1940 = _1797;
        _1941 = _1796;
        _1942 = _1795;
        _1943 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)));
        _1944 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)));
        _1945 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)));
    }
    else
    {
        _1931 = _1622;
        _1932 = _1622;
        _1933 = _1622;
        _1934 = _1622;
        _1935 = _1622;
        _1936 = _1622;
        _1937 = _1622;
        _1938 = _1622;
        _1939 = _1622;
        _1940 = _1622;
        _1941 = _1622;
        _1942 = _1622;
        _1943 = 0.0;
        _1944 = 0.0;
        _1945 = 0.0;
    }
    float _1955 = (cbModelParam._m0[1u].x * (_1943 - _1634)) + _1634;
    float _1956 = (cbModelParam._m0[1u].x * (_1944 - _1635)) + _1635;
    float _1957 = (cbModelParam._m0[1u].x * (_1945 - _1636)) + _1636;
    float _1978 = fma(_1957, cbSceneParam._m0[89u].z, fma(_1956, cbSceneParam._m0[89u].y, _1955 * cbSceneParam._m0[89u].x));
    float _1981 = fma(_1957, cbSceneParam._m0[90u].z, fma(_1956, cbSceneParam._m0[90u].y, _1955 * cbSceneParam._m0[90u].x));
    float _1984 = fma(_1957, cbSceneParam._m0[91u].z, fma(_1956, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1955));
    float _1999 = _1228 * 0.5;
    float _2000 = _1229 * 0.5;
    float _2001 = _1230 * 0.5;
    float _2002 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1933, _1936, _1939, _1942));
    float _2005 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1932, _1935, _1938, _1941));
    float _2008 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1931, _1934, _1937, _1940));
    float _2042;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2015 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1621, _1625, _1628, _1631));
        float _2019 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1623, _1626, _1629, _1632));
        float _2023 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1624, _1627, _1630, _1633));
        float _2030 = dot(vec4(cbModelParam._m0[39u]), vec4(_1999, _2000, _2001, 1.0));
        _2042 = dot(vec3(isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0)), isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0)), isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2030) ? 0.0 : (isnan(0.0) ? _2030 : max(0.0, _2030))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2042 = 1.0;
    }
    float _2053;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2044 = dot(vec4(cbModelParam._m0[40u]), vec4(_1999, _2000, _2001, 1.0));
        _2053 = dot(vec3(isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)), isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)), isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2044) ? 0.0 : (isnan(0.0) ? _2044 : max(0.0, _2044))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2053 = 1.0;
    }
    float _2057 = (_2053 * cbModelParam._m0[1u].x) + (_2042 * (1.0 - cbModelParam._m0[1u].x));
    float _2067 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1046);
    float _2068 = isnan(_2067) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2067 : min(cbModelParam._m0[25u].z, _2067));
    float _2148;
    float _2150;
    float _2152;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2115 = fma(_1292, cbModelParam._m0[13u].z, fma(_1288, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1284)) + cbModelParam._m0[13u].w;
        float _2119 = fma(_1292, cbModelParam._m0[14u].z, fma(_1288, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1284)) + cbModelParam._m0[14u].w;
        float _2123 = fma(_1292, cbModelParam._m0[15u].z, fma(_1288, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1284)) + cbModelParam._m0[15u].w;
        float _2126 = fma(_1230, cbModelParam._m0[13u].z, fma(_1229, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1228));
        float _2129 = fma(_1230, cbModelParam._m0[14u].z, fma(_1229, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1228));
        float _2132 = fma(_1230, cbModelParam._m0[15u].z, fma(_1229, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1228));
        float _2160;
        if (_2126 > 0.0)
        {
            _2160 = abs((1.0 - _2115) / _2126);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2115 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2160 = frontier_phi_17_15_ladder;
        }
        float _2362;
        if (_2129 > 0.0)
        {
            _2362 = abs((1.0 - _2119) / _2129);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2119 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2362 = frontier_phi_26_22_ladder;
        }
        float _2616;
        if (_2132 > 0.0)
        {
            _2616 = abs((1.0 - _2123) / _2132);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2123 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2616 = frontier_phi_38_33_ladder;
        }
        float _2618 = isnan(_2362) ? _2160 : (isnan(_2160) ? _2362 : min(_2160, _2362));
        float _2619 = isnan(_2616) ? _2618 : (isnan(_2618) ? _2616 : min(_2618, _2616));
        float _2623 = (_2619 * _2126) + _2115;
        float _2624 = (_2619 * _2129) + _2119;
        float _2625 = (_2619 * _2132) + _2123;
        float _2626 = _2619 * 9.9999997473787516355514526367188e-05;
        float _2628 = (-1.0) - _2626;
        float _2630 = _2626 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2625 > _2630) || ((_2625 < _2628) || ((_2624 > _2630) || ((_2624 < _2628) || ((_2623 < _2628) || (_2623 > _2630))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2625, cbModelParam._m0[9u].z, fma(_2624, cbModelParam._m0[9u].y, _2623 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2625, cbModelParam._m0[10u].z, fma(_2624, cbModelParam._m0[10u].y, _2623 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2625, cbModelParam._m0[11u].z, fma(_2624, cbModelParam._m0[11u].y, _2623 * cbModelParam._m0[11u].x))), _2068);
            frontier_phi_16_38_ladder = _2753.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2753.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2753.x * cbModelParam._m0[1u].y;
        }
        _2148 = frontier_phi_16_38_ladder_2;
        _2150 = frontier_phi_16_38_ladder_1;
        _2152 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2136 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1228, _1229, _1230), _2068);
        _2148 = _2136.x * cbModelParam._m0[1u].y;
        _2150 = _2136.y * cbModelParam._m0[1u].y;
        _2152 = _2136.z * cbModelParam._m0[1u].y;
    }
    float _2156 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1046);
    float _2157 = isnan(_2156) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2156 : min(cbModelParam._m0[25u].w, _2156));
    float _2246;
    float _2248;
    float _2250;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2210 = fma(_1292, cbModelParam._m0[21u].z, fma(_1288, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1284)) + cbModelParam._m0[21u].w;
        float _2214 = fma(_1292, cbModelParam._m0[22u].z, fma(_1288, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1284)) + cbModelParam._m0[22u].w;
        float _2218 = fma(_1292, cbModelParam._m0[23u].z, fma(_1288, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1284)) + cbModelParam._m0[23u].w;
        float _2221 = fma(_1230, cbModelParam._m0[21u].z, fma(_1229, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1228));
        float _2224 = fma(_1230, cbModelParam._m0[22u].z, fma(_1229, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1228));
        float _2227 = fma(_1230, cbModelParam._m0[23u].z, fma(_1229, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1228));
        float _2367;
        if (_2221 > 0.0)
        {
            _2367 = abs((1.0 - _2210) / _2221);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2221 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2210 + 1.0) / _2221);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2367 = frontier_phi_28_24_ladder;
        }
        float _2643;
        if (_2224 > 0.0)
        {
            _2643 = abs((1.0 - _2214) / _2224);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2224 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2214 + 1.0) / _2224);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2643 = frontier_phi_40_35_ladder;
        }
        float _2856;
        if (_2227 > 0.0)
        {
            _2856 = abs((1.0 - _2218) / _2227);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2218 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2856 = frontier_phi_49_46_ladder;
        }
        float _2858 = isnan(_2643) ? _2367 : (isnan(_2367) ? _2643 : min(_2367, _2643));
        float _2859 = isnan(_2856) ? _2858 : (isnan(_2858) ? _2856 : min(_2858, _2856));
        float _2863 = (_2859 * _2221) + _2210;
        float _2864 = (_2859 * _2224) + _2214;
        float _2865 = (_2859 * _2227) + _2218;
        float _2866 = _2859 * 9.9999997473787516355514526367188e-05;
        float _2867 = (-1.0) - _2866;
        float _2869 = _2866 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2865 > _2869) || ((_2865 < _2867) || ((_2864 > _2869) || ((_2864 < _2867) || ((_2863 < _2867) || (_2863 > _2869))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3064 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2865, cbModelParam._m0[17u].z, fma(_2864, cbModelParam._m0[17u].y, _2863 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2865, cbModelParam._m0[18u].z, fma(_2864, cbModelParam._m0[18u].y, _2863 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2865, cbModelParam._m0[19u].z, fma(_2864, cbModelParam._m0[19u].y, _2863 * cbModelParam._m0[19u].x))), _2157);
            frontier_phi_25_49_ladder = _3064.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3064.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3064.x * cbModelParam._m0[1u].z;
        }
        _2246 = frontier_phi_25_49_ladder_2;
        _2248 = frontier_phi_25_49_ladder_1;
        _2250 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2230 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1228, _1229, _1230), _2157);
        _2246 = _2230.x * cbModelParam._m0[1u].z;
        _2248 = _2230.y * cbModelParam._m0[1u].z;
        _2250 = _2230.z * cbModelParam._m0[1u].z;
    }
    float _2263 = (((_1255 * _1204) + _1256) * _1220) * ((cbModelParam._m0[1u].w * (_2246 - _2148)) + _2148);
    float _2265 = (((_1255 * _1206) + _1256) * _1220) * ((cbModelParam._m0[1u].w * (_2248 - _2150)) + _2150);
    float _2267 = (((_1255 * _1207) + _1256) * _1220) * ((cbModelParam._m0[1u].w * (_2250 - _2152)) + _2152);
    float _2270 = fma(_2267, cbSceneParam._m0[89u].z, fma(_2265, cbSceneParam._m0[89u].y, _2263 * cbSceneParam._m0[89u].x));
    float _2273 = fma(_2267, cbSceneParam._m0[90u].z, fma(_2265, cbSceneParam._m0[90u].y, _2263 * cbSceneParam._m0[90u].x));
    float _2276 = fma(_2267, cbSceneParam._m0[91u].z, fma(_2265, cbSceneParam._m0[91u].y, _2263 * cbSceneParam._m0[91u].x));
    uvec4 _2286 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2288 = _2286.x * 14u;
    uint _2289 = _2288 + 13u;
    float _2296 = _1220 + (-1.0);
    float _2301 = (cbLight._m0[_2289].x * _2296) + 1.0;
    float _2302 = (cbLight._m0[_2289].y * _2296) + 1.0;
    float _2303 = (cbLight._m0[_2289].z * _2296) + 1.0;
    float _2304 = (cbLight._m0[_2289].w * _2296) + 1.0;
    uint _2305 = _2288 + 5u;
    float _2311 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2315 = _2288 + 4u;
    float _2321 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2325 = _2288 | 1u;
    float _2336 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_1043, _1044, _1045));
    float _2339 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_1043, _1044, _1045));
    float _4609 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _4620 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2344 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.3183098733425140380859375;
    float _2346 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * 0.3183098733425140380859375;
    float _2353 = ((cbLight._m0[_2305].x * _2311) * _2346) + ((cbLight._m0[_2315].x * _2321) * _2344);
    float _2354 = ((_2311 * cbLight._m0[_2305].y) * _2346) + ((_2321 * cbLight._m0[_2315].y) * _2344);
    float _2355 = ((_2311 * cbLight._m0[_2305].z) * _2346) + ((_2321 * cbLight._m0[_2315].z) * _2344);
    uvec4 _2359 = floatBitsToUint(cbLight._m0[_2288 + 12u]);
    bool _2361 = _2359.x == 0u;
    float _2372;
    float _2374;
    float _2376;
    if (_2361)
    {
        _2372 = _2353;
        _2374 = _2354;
        _2376 = _2355;
    }
    else
    {
        uint _2380 = _2288 + 6u;
        float _2396 = (dot(vec3(cbLight._m0[_2288 + 2u].xyz), vec3(_1043, _1044, _1045)) * 0.5) + 0.5;
        float _2397 = _2396 * _2396;
        float _4631 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2398 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2399 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2372 = (((cbLight._m0[_2380].x * 0.3183098733425140380859375) * _2398) * _2399) + _2353;
        _2374 = (((cbLight._m0[_2380].y * 0.3183098733425140380859375) * _2398) * _2399) + _2354;
        _2376 = (((cbLight._m0[_2380].z * 0.3183098733425140380859375) * _2398) * _2399) + _2355;
    }
    bool _2379 = _2359.y == 0u;
    float _2417;
    float _2419;
    float _2421;
    if (_2379)
    {
        _2417 = _2372;
        _2419 = _2374;
        _2421 = _2376;
    }
    else
    {
        uint _2587 = _2288 + 7u;
        float _2603 = (dot(vec3(cbLight._m0[_2288 + 3u].xyz), vec3(_1043, _1044, _1045)) * 0.5) + 0.5;
        float _2604 = _2603 * _2603;
        float _4647 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2605 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2606 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2417 = (((cbLight._m0[_2587].x * 0.3183098733425140380859375) * _2605) * _2606) + _2372;
        _2419 = (((cbLight._m0[_2587].y * 0.3183098733425140380859375) * _2605) * _2606) + _2374;
        _2421 = (((cbLight._m0[_2587].z * 0.3183098733425140380859375) * _2605) * _2606) + _2376;
    }
    uint _2424 = _2288 + 8u;
    float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _1046) * 0.949999988079071044921875);
    float _2438 = _2437 * _2437;
    float _2439 = cbLight._m0[_2288].x + _1122;
    float _2440 = cbLight._m0[_2288].y + _1123;
    float _2441 = cbLight._m0[_2288].z + _1124;
    float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
    float _2446 = _2445 * _2439;
    float _2447 = _2445 * _2440;
    float _2448 = _2445 * _2441;
    float _2449 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2288].xyz));
    float _4663 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _4674 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _2453 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2454 = dot(vec3(_1043, _1044, _1045), vec3(_2446, _2447, _2448));
    float _4685 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2458 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2446, _2447, _2448));
    float _4696 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2462 = _2438 * _2438;
    float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
    float _2474 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
    float _2475 = 0.959999978542327880859375 - _1201;
    float _2477 = 0.959999978542327880859375 - _1202;
    float _2478 = 0.959999978542327880859375 - _1203;
    float _2485 = 1.0 - _2438;
    float _2496 = (0.5 / (((_2453 * ((_2452 * _2485) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2453 * _2485) + _2438) * _2452))) * _2452;
    float _4707 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2498 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
    uint _2509 = _2288 + 9u;
    float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _1046) * 0.949999988079071044921875);
    float _2521 = _2520 * _2520;
    float _2522 = cbLight._m0[_2325].x + _1122;
    float _2523 = cbLight._m0[_2325].y + _1123;
    float _2524 = cbLight._m0[_2325].z + _1124;
    float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
    float _2529 = _2528 * _2522;
    float _2530 = _2528 * _2523;
    float _2531 = _2528 * _2524;
    float _2532 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2325].xyz));
    float _4718 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2536 = dot(vec3(_1043, _1044, _1045), vec3(_2529, _2530, _2531));
    float _4729 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2540 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2529, _2530, _2531));
    float _4740 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2544 = _2521 * _2521;
    float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
    float _2555 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2562 = 1.0 - _2521;
    float _2572 = (0.5 / (((_2453 * ((_2535 * _2562) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2453 * _2562) + _2521) * _2535))) * _2535;
    float _4751 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2574 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
    float _2584 = (((((_2555 * _2475) + _1204) * cbLight._m0[_2509].x) * _2574) * _2311) + (((((_2474 * _2475) + _1204) * cbLight._m0[_2424].x) * _2498) * _2321);
    float _2585 = (((((_2555 * _2477) + _1206) * cbLight._m0[_2509].y) * _2574) * _2311) + (((((_2474 * _2477) + _1206) * cbLight._m0[_2424].y) * _2498) * _2321);
    float _2586 = (((((_2555 * _2478) + _1207) * cbLight._m0[_2509].z) * _2574) * _2311) + (((((_2474 * _2478) + _1207) * cbLight._m0[_2424].z) * _2498) * _2321);
    float _2648;
    float _2650;
    float _2652;
    if (_2361)
    {
        _2648 = _2584;
        _2650 = _2585;
        _2652 = _2586;
    }
    else
    {
        uint _2654 = _2288 + 2u;
        uint _2658 = _2288 + 10u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _1046) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _1122;
        float _2675 = cbLight._m0[_2654].y + _1123;
        float _2676 = cbLight._m0[_2654].z + _1124;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2654].xyz));
        float _4762 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2688 = dot(vec3(_1043, _1044, _1045), vec3(_2681, _2682, _2683));
        float _4773 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4784 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
        float _2714 = 1.0 - _2673;
        float _2724 = (0.5 / (((_2453 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2453 * _2714) + _2673) * _2687))) * _2687;
        float _4795 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2648 = (((((_2707 * _2475) + _1204) * cbLight._m0[_2658].x) * _2726) * _2727) + _2584;
        _2650 = (((((_2707 * _2477) + _1206) * cbLight._m0[_2658].y) * _2726) * _2727) + _2585;
        _2652 = (((((_2707 * _2478) + _1207) * cbLight._m0[_2658].z) * _2726) * _2727) + _2586;
    }
    float _2762;
    float _2764;
    float _2766;
    if (_2379)
    {
        _2762 = _2648;
        _2764 = _2650;
        _2766 = _2652;
    }
    else
    {
        uint _2773 = _2288 + 3u;
        uint _2777 = _2288 + 11u;
        float _2791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2773].w)) * _1046) * 0.949999988079071044921875);
        float _2792 = _2791 * _2791;
        float _2793 = cbLight._m0[_2773].x + _1122;
        float _2794 = cbLight._m0[_2773].y + _1123;
        float _2795 = cbLight._m0[_2773].z + _1124;
        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
        float _2800 = _2799 * _2793;
        float _2801 = _2799 * _2794;
        float _2802 = _2799 * _2795;
        float _2803 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2773].xyz));
        float _4811 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2807 = dot(vec3(_1043, _1044, _1045), vec3(_2800, _2801, _2802));
        float _4822 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2811 = dot(vec3(cbLight._m0[_2773].xyz), vec3(_2800, _2801, _2802));
        float _4833 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2815 = _2792 * _2792;
        float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
        float _2826 = exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0);
        float _2833 = 1.0 - _2792;
        float _2843 = (0.5 / (((_2453 * ((_2806 * _2833) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2453 * _2833) + _2792) * _2806))) * _2806;
        float _4844 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2845 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
        float _2846 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2762 = (((((_2826 * _2475) + _1204) * cbLight._m0[_2777].x) * _2845) * _2846) + _2648;
        _2764 = (((((_2826 * _2477) + _1206) * cbLight._m0[_2777].y) * _2845) * _2846) + _2650;
        _2766 = (((((_2826 * _2478) + _1207) * cbLight._m0[_2777].z) * _2845) * _2846) + _2652;
    }
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_2286.y == 0u)
    {
        float _2921 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2922 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2921;
        float _2923 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2921;
        float _2924 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2921;
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.x;
        uint _2948 = uint((float(_2936.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1143) / _2937))) + floor(float(uint(cbSceneParam._m0[85u].x * _1142) / _2937)));
        float _2958 = (log2(_2924 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2959 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        uint _2962 = uint(isnan(14.0) ? _2959 : (isnan(_2959) ? 14.0 : min(_2959, 14.0)));
        uvec4 _2967 = texelFetch(g_lightClusterGridBuffer, int(((_2962 << 2u) + (_2948 << 6u)) >> 2u));
        uint _2968 = _2967.x;
        uint _2969 = _2936.z;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((((1u << ((_2969 >> 4u) & 15u)) + 4294967295u) & _2968) == 0u) || ((_2969 & 240u) == 0u))
        {
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
        }
        else
        {
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            uint _3228 = 0u;
            uint _3237;
            bool _3238;
            for (;;)
            {
                _3237 = texelFetch(g_lightClassification, int((((_2962 << 5u) + (_2948 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                _3238 = _3237 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3238)
                {
                    frontier_phi_66_pred = _3222;
                    frontier_phi_66_pred_1 = _3227;
                    frontier_phi_66_pred_2 = _3226;
                    frontier_phi_66_pred_3 = _3225;
                    frontier_phi_66_pred_4 = _3224;
                    frontier_phi_66_pred_5 = _3223;
                }
                else
                {
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    uint _3373;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3237;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    for (;;)
                    {
                        uint _3377 = uint(findLSB(_3373)) + (_3228 << 5u);
                        uint _3374 = (_3373 + 4294967295u) & _3373;
                        uint _3379 = _3377 * 48u;
                        vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3399 = (_3377 * 48u) + 4u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3418 = (_3377 * 48u) + 8u;
                        vec3 _3429 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x));
                        float _3433 = _3393.x - _2922;
                        float _3434 = _3393.y - _2923;
                        float _3435 = _3393.z - _2924;
                        float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                        float _3439 = inversesqrt(_3436);
                        float _3440 = _3439 * _3433;
                        float _3441 = _3439 * _3434;
                        float _3442 = _3439 * _3435;
                        float _3443 = dot(vec3(_1161, _1164, _1167), vec3(_3440, _3441, _3442));
                        float _3448 = 1.0 - (_3436 * _3393.w);
                        float _4870 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3450 = sqrt(_3436) * _3412.w;
                        float _3453 = 1.39999997615814208984375 / (_3450 + 1.39999997615814208984375);
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3443) + _3454;
                        float _3460 = _3450 * _3450;
                        float _3464 = ((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3449) / ((_3460 * 0.699999988079071044921875) + 1.0);
                        float _3468 = (-0.0) - _2922;
                        float _3469 = (-0.0) - _2923;
                        float _3470 = (-0.0) - _2924;
                        float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                        float _3475 = _3474 * _3468;
                        float _3476 = _3474 * _3469;
                        float _3477 = _3474 * _3470;
                        float _3485 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                        float _3486 = 1.0 - _1236;
                        float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                        float _3494 = _3493 * _3493;
                        float _3495 = _3494 * _3494;
                        float _3496 = _3475 + _3440;
                        float _3497 = _3476 + _3441;
                        float _3498 = _3477 + _3442;
                        float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                        float _3506 = dot(vec3(_1161, _1164, _1167), vec3(_3475, _3476, _3477));
                        float _4886 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3509 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3510 = dot(vec3(_1161, _1164, _1167), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                        float _4897 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3513 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                        float _3518 = _3453 * _3494;
                        float _3519 = _3518 * _3518;
                        float _3522 = ((1.0 - _3519) * _3443) + _3519;
                        float _4908 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3523 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3524 = 1.0 - _3494;
                        float _3534 = (0.5 / (((_3523 * ((_3509 * _3524) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3523 * _3524) + _3494) * _3509))) * _3523;
                        float _4919 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3545 = (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3517 * _3517) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125))) * _3449;
                        _3297 = (_3464 * _3412.x) + _3370;
                        _3298 = (_3464 * _3412.y) + _3371;
                        _3299 = (_3464 * _3412.z) + _3372;
                        _3294 = (_3545 * _3429.x) + _3367;
                        _3295 = (_3545 * _3429.y) + _3368;
                        _3296 = (_3545 * _3429.z) + _3369;
                        if (_3374 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3374;
                        }
                    }
                    frontier_phi_66_pred = _3294;
                    frontier_phi_66_pred_1 = _3299;
                    frontier_phi_66_pred_2 = _3298;
                    frontier_phi_66_pred_3 = _3297;
                    frontier_phi_66_pred_4 = _3296;
                    frontier_phi_66_pred_5 = _3295;
                }
                _3070 = frontier_phi_66_pred;
                _3080 = frontier_phi_66_pred_1;
                _3078 = frontier_phi_66_pred_2;
                _3076 = frontier_phi_66_pred_3;
                _3074 = frontier_phi_66_pred_4;
                _3072 = frontier_phi_66_pred_5;
                uint _3229 = _3228 + 1u;
                if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3222 = _3070;
                    _3223 = _3072;
                    _3224 = _3074;
                    _3225 = _3076;
                    _3226 = _3078;
                    _3227 = _3080;
                    _3228 = _3229;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
        }
        uvec4 _3083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3084 = _3083.z;
        uint _3086 = (_3084 >> 8u) & 15u;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        if (((4294967295u << _3086) & _2968) == 0u)
        {
            _3190 = _3069;
            _3192 = _3071;
            _3194 = _3073;
            _3196 = _3075;
            _3198 = _3077;
            _3200 = _3079;
        }
        else
        {
            float _3215 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
            float _3216 = _3215 * _2922;
            float _3217 = _3215 * _2923;
            float _3218 = _3215 * _2924;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3086 < ((_3084 >> 12u) & 15u))
            {
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3350 = _3069;
                float _3351 = _3071;
                float _3352 = _3073;
                float _3353 = _3075;
                float _3354 = _3077;
                float _3355 = _3079;
                uint _3356 = _3086;
                uint _3365;
                bool _3366;
                for (;;)
                {
                    _3365 = texelFetch(g_lightClassification, int((((_2962 << 5u) + (_2948 << 9u)) + (_3356 << 2u)) >> 2u)).x;
                    _3366 = _3365 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3366)
                    {
                        frontier_phi_77_pred = _3355;
                        frontier_phi_77_pred_1 = _3354;
                        frontier_phi_77_pred_2 = _3353;
                        frontier_phi_77_pred_3 = _3352;
                        frontier_phi_77_pred_4 = _3351;
                        frontier_phi_77_pred_5 = _3350;
                    }
                    else
                    {
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3572 = _3350;
                        float _3573 = _3351;
                        float _3574 = _3352;
                        float _3575 = _3353;
                        float _3576 = _3354;
                        float _3577 = _3355;
                        uint _3578 = _3365;
                        uint _3579;
                        vec4 _3604;
                        float _3605;
                        vec4 _3620;
                        vec3 _3632;
                        vec4 _3647;
                        vec4 _3662;
                        float _3708;
                        bool _3709;
                        for (;;)
                        {
                            uint _3589 = ((_3356 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3578));
                            _3579 = (_3578 + 4294967295u) & _3578;
                            uint _3591 = _3589 * 40u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            _3605 = _3604.w;
                            uint _3607 = (_3589 * 40u) + 4u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3622 = (_3589 * 40u) + 8u;
                            _3632 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x));
                            uint _3634 = (_3589 * 40u) + 16u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3649 = (_3589 * 40u) + 20u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3664 = (_3589 * 40u) + 24u;
                            vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3683 = (_3589 * 40u) + 28u;
                            vec4 _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            _3708 = fma(_2924, _3696.z, fma(_2923, _3696.y, _3696.x * _2922)) + _3696.w;
                            _3709 = !((fma(_2924, _3677.z, fma(_2923, _3677.y, _3677.x * _2922)) + _3677.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3709)
                            {
                                float _3736 = _3604.x - _2922;
                                float _3737 = _3604.y - _2923;
                                float _3738 = _3604.z - _2924;
                                float _3739 = dot(vec3(_3736, _3737, _3738), vec3(_3736, _3737, _3738));
                                float _3742 = inversesqrt(_3739);
                                float _3743 = _3742 * _3736;
                                float _3744 = _3742 * _3737;
                                float _3745 = _3742 * _3738;
                                float _3749 = 1.0 - (_3739 / (_3605 * _3605));
                                float _4930 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3754 = sqrt(_3739) * _3620.w;
                                float _3756 = 1.39999997615814208984375 / (_3754 + 1.39999997615814208984375);
                                float _3757 = _3756 * _3756;
                                float _3760 = ((1.0 - _3757) * dot(vec3(_3743, _3744, _3745), vec3(_1161, _1164, _1167))) + _3757;
                                float _3763 = _3754 * _3754;
                                float _3767 = (fma(_2924, _3647.z, fma(_2923, _3647.y, _3647.x * _2922)) + _3647.w) / _3708;
                                float _3768 = (fma(_2924, _3662.z, fma(_2923, _3662.y, _3662.x * _2922)) + _3662.w) / _3708;
                                float _3772 = 1.0 - dot(vec2(_3767, _3768), vec2(_3767, _3768));
                                float _4946 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3774 = _3773 * (((isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0))) * _3750) / ((_3763 * 0.699999988079071044921875) + 1.0));
                                float _3786 = exp2(log2(1.0 / ((_3763 * 3.5) + 5.0)) * 0.25);
                                float _3787 = 1.0 - _1236;
                                float _3794 = sqrt(1.0 - ((1.0 - (_3787 * _3787)) * (1.0 - (_3786 * _3786))));
                                float _3795 = _3794 * _3794;
                                float _3796 = _3795 * _3795;
                                float _3797 = _3743 - _3216;
                                float _3798 = _3744 - _3217;
                                float _3799 = _3745 - _3218;
                                float _3803 = inversesqrt(dot(vec3(_3797, _3798, _3799), vec3(_3797, _3798, _3799)));
                                float _3807 = dot(vec3(_1161, _1164, _1167), vec3((-0.0) - _3216, (-0.0) - _3217, (-0.0) - _3218));
                                float _4957 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3810 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3811 = dot(vec3(_1161, _1164, _1167), vec3(_3803 * _3797, _3803 * _3798, _3803 * _3799));
                                float _4968 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3814 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3818 = ((_3814 * _3814) * (_3796 + (-1.0))) + 1.0;
                                float _3819 = _3756 * _3795;
                                float _3820 = _3819 * _3819;
                                float _3826 = ((1.0 - _3820) * dot(vec3(_1161, _1164, _1167), vec3(_3743, _3744, _3745))) + _3820;
                                float _4979 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3828 = 1.0 - _3795;
                                float _3838 = (0.5 / (((_3827 * ((_3810 * _3828) + _3795)) + 9.9999999392252902907785028219223e-09) + (((_3827 * _3828) + _3795) * _3810))) * _3827;
                                float _4990 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3848 = (_3773 * _3750) * (((_3796 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3818 * _3818) * ((_3763 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3774 * _3620.y;
                                frontier_phi_83_pred_1 = _3774 * _3620.x;
                                frontier_phi_83_pred_2 = _3848 * _3632.z;
                                frontier_phi_83_pred_3 = _3848 * _3632.y;
                                frontier_phi_83_pred_4 = _3848 * _3632.x;
                                frontier_phi_83_pred_5 = _3774 * _3620.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3856 = frontier_phi_83_pred;
                            _3855 = frontier_phi_83_pred_1;
                            _3854 = frontier_phi_83_pred_2;
                            _3853 = frontier_phi_83_pred_3;
                            _3852 = frontier_phi_83_pred_4;
                            _3857 = frontier_phi_83_pred_5;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            _3564 = _3857 + _3577;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            if (_3579 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3579;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3564;
                        frontier_phi_77_pred_1 = _3563;
                        frontier_phi_77_pred_2 = _3562;
                        frontier_phi_77_pred_3 = _3561;
                        frontier_phi_77_pred_4 = _3560;
                        frontier_phi_77_pred_5 = _3559;
                    }
                    _3201 = frontier_phi_77_pred;
                    _3199 = frontier_phi_77_pred_1;
                    _3197 = frontier_phi_77_pred_2;
                    _3195 = frontier_phi_77_pred_3;
                    _3193 = frontier_phi_77_pred_4;
                    _3191 = frontier_phi_77_pred_5;
                    uint _3357 = _3356 + 1u;
                    if (_3357 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3350 = _3191;
                        _3351 = _3193;
                        _3352 = _3195;
                        _3353 = _3197;
                        _3354 = _3199;
                        _3355 = _3201;
                        _3356 = _3357;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3195;
                frontier_phi_58_59_ladder_1 = _3201;
                frontier_phi_58_59_ladder_2 = _3199;
                frontier_phi_58_59_ladder_3 = _3197;
                frontier_phi_58_59_ladder_4 = _3193;
                frontier_phi_58_59_ladder_5 = _3191;
            }
            else
            {
                frontier_phi_58_59_ladder = _3073;
                frontier_phi_58_59_ladder_1 = _3079;
                frontier_phi_58_59_ladder_2 = _3077;
                frontier_phi_58_59_ladder_3 = _3075;
                frontier_phi_58_59_ladder_4 = _3071;
                frontier_phi_58_59_ladder_5 = _3069;
            }
            _3190 = frontier_phi_58_59_ladder_5;
            _3192 = frontier_phi_58_59_ladder_4;
            _3194 = frontier_phi_58_59_ladder;
            _3196 = frontier_phi_58_59_ladder_3;
            _3198 = frontier_phi_58_59_ladder_2;
            _3200 = frontier_phi_58_59_ladder_1;
        }
        float _3205 = isnan(1.0) ? _1220 : (isnan(_1220) ? 1.0 : min(_1220, 1.0));
        _2981 = (_3205 * _3196) + _2417;
        _2983 = (_3205 * _3198) + _2419;
        _2985 = (_3205 * _3200) + _2421;
        _2987 = ((_3190 * _1204) * _3205) + _2762;
        _2989 = ((_3192 * _1206) * _3205) + _2764;
        _2991 = ((_3194 * _1207) * _3205) + _2766;
    }
    else
    {
        _2981 = _2417;
        _2983 = _2419;
        _2985 = _2421;
        _2987 = _2762;
        _2989 = _2764;
        _2991 = _2766;
    }
    float _5006 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _5017 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _5028 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _3008 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2981 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1220))) + ((_2987 + ((isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0))) * _2057)) * cbPerFrame._m0[3u].x);
    float _3009 = ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2983 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1220))) + ((_2989 + ((isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0))) * _2057)) * cbPerFrame._m0[3u].x);
    float _3010 = ((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2985 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1220))) + ((_2991 + ((isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))) * _2057)) * cbPerFrame._m0[3u].x);
    uint _3011 = _273 + 6u;
    float _3019 = _1142 / cbSceneParam._m0[86u].x;
    float _3020 = _1143 / cbSceneParam._m0[86u].y;
    vec4 _3034 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, (log2((isnan(cbSceneParam._m0[77u].w) ? _1065 : (isnan(_1065) ? cbSceneParam._m0[77u].w : min(_1065, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3036 = _3034.x;
    float _3037 = _3034.y;
    float _3038 = _3034.z;
    float _3039 = _3034.w;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    if (_1065 > cbSceneParam._m0[78u].w)
    {
        float _3094 = isnan(_1065) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1065 : min(cbSceneParam._m0[80u].w, _1065));
        float _3095 = _3094 / _1065;
        float _3106 = _3095 * _1115;
        float _3107 = _1116 * _3095;
        float _3108 = (-0.0) - _3107;
        float _3110 = _3095 * _1117;
        float _3112 = (cbSceneParam._m0[77u].w * _3108) / _3094;
        float _3113 = _3112 + cbSceneParam._m0[79u].w;
        float _3114 = cbSceneParam._m0[79u].w - _3107;
        float _3120 = sqrt(((_3106 * _3106) + (_3107 * _3107)) + (_3110 * _3110));
        float _3123 = (1.0 - (cbSceneParam._m0[77u].w / _3094)) * _3120;
        float _3128 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3130 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3307;
        if (abs((_3108 - _3112) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3307 = ((((_3113 > 0.0) ? exp2(_3128 * _3113) : (2.0 - exp2(_3130 * _3113))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3123;
        }
        else
        {
            float _3251 = 1.0 / cbSceneParam._m0[80u].x;
            float _3252 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : max(_3113, _3114));
            float _3253 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : min(_3113, _3114));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            _3307 = ((abs(_3120 / _3108) * cbSceneParam._m0[80u].y) * ((((_3262 - _3263) * 2.0) - ((exp2(_3128 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0)))) - exp2(_3128 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))))) * _3251)) - ((exp2(_3130 * _3262) - exp2(_3130 * _3263)) * _3251))) + (_3123 * cbSceneParam._m0[80u].z);
        }
        vec4 _3309 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, 1.0), 0.0);
        float _3318 = exp2((_3307 * (-1.44269502162933349609375)) * (1.0 - _3309.w));
        float _3319 = log2(_3318);
        float _3335 = log2(_3039);
        _3132 = (exp2(_3335 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].x)) * _3309.x) / cbSceneParam._m0[78u].x)) + _3036;
        _3134 = (exp2(_3335 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].y)) * _3309.y) / cbSceneParam._m0[78u].y)) + _3037;
        _3136 = (exp2(_3335 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].z)) * _3309.z) / cbSceneParam._m0[78u].z)) + _3038;
        _3138 = _3318 * _3039;
    }
    else
    {
        _3132 = _3036;
        _3134 = _3037;
        _3136 = _3038;
        _3138 = _3039;
    }
    bool _3345;
    vec4 _3148;
    vec4 _3170;
    float _3172;
    float _3176;
    float _3177;
    float _3178;
    float _3179;
    bool _3189;
    for (;;)
    {
        _3148 = cbMatDynParam._m0[0u];
        float _3150 = roundEven(_3148.y);
        bool _3151 = _3150 == 3.0;
        float _3152 = log2(_3138);
        float _3159 = exp2(_3152 * cbSceneParam._m0[78u].x) * _3008;
        float _3160 = exp2(_3152 * cbSceneParam._m0[78u].y) * _3009;
        float _3161 = exp2(_3152 * cbSceneParam._m0[78u].z) * _3010;
        float _3168 = _1131 + (-0.5);
        _3170 = cbMtdParam._m0[1u];
        _3172 = _3170.y * _3168;
        float _3175 = (_3150 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3176 = _3175 * (_3151 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3132)));
        _3177 = _3175 * (_3151 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3134)));
        _3178 = _3175 * (_3151 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3136)));
        _3179 = _3168 * 0.999000012874603271484375;
        _3189 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3189)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3179) < 0.5)
            {
                _3345 = true;
                break;
            }
        }
        uint _3286 = _1180 + uint(_3148.w);
        if ((cbInstanceData._m0[_3286].w < 1.0) && ((cbInstanceData._m0[_3286].w + _3179) < 0.5))
        {
            _3345 = true;
            break;
        }
        if ((_3172 + 1.0) < _3170.x)
        {
            _3345 = true;
            break;
        }
        _3345 = false;
        break;
    }
    float _3550;
    if (_3345)
    {
        discard_state = true;
        _3550 = 0.0;
    }
    else
    {
        _3550 = cbInstanceData._m0[_3011].w;
    }
    SV_Target.x = _3176;
    SV_Target.y = _3177;
    SV_Target.z = _3178;
    SV_Target.w = _3550;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3011].w;
    discard_exit();
}


