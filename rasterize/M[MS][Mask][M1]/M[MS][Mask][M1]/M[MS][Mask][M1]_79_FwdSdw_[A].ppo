#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1630;
float _4292;
float _4293;
float _4294;
float _4295;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _259 = _258 * _250;
    float _260 = _258 * _251;
    float _261 = _258 * _252;
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = _265 * NORMAL.x;
    float _267 = _265 * NORMAL.y;
    float _268 = _265 * NORMAL.z;
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = _272 * TANGENT.x;
    float _274 = _272 * TANGENT.y;
    float _275 = _272 * TANGENT.z;
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4304 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4315 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4326 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[23u].w) + _470) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4337 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _495 = (_488 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _496 = (_488 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _497 = (_488 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[23u].w) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4348 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _571 = (_353.x * cbMtdParam._m0[9u].x) * ((_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495);
    float _572 = (_353.y * cbMtdParam._m0[9u].y) * ((_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496);
    float _573 = (_353.z * cbMtdParam._m0[9u].z) * ((_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497);
    float _577 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _571;
    float _580 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _572;
    float _583 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _573;
    float _591 = (((_571 - _577) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) + _577) * 4.55000019073486328125;
    float _593 = (((_572 - _580) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) + _580) * 4.55000019073486328125;
    float _595 = (((_573 - _583) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) + _583) * 4.55000019073486328125;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _656 = _654.x;
    float _657 = _654.y;
    float _658 = _654.z;
    float _665 = ((_637.x - _656) * _488) + _656;
    float _666 = ((_637.y - _657) * _488) + _657;
    float _667 = ((_637.z - _658) * _488) + _658;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _692 = ((_679.z - _667) * _561) + _667;
    float _695 = ((((_679.x - _665) * _561) + _665) * 2.0) + (-1.0);
    float _696 = ((((_679.y - _666) * _561) + _666) * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _4359 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _702 = sqrt(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _732 = (_695 + ((((_612.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_720.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _733 = (_696 + ((((_612.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_720.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _736 = fma(_702, _266, fma(_733, _273, _732 * _259));
    float _739 = fma(_702, _267, fma(_733, _274, _732 * _260));
    float _742 = fma(_702, _268, fma(_733, _275, _732 * _261));
    float _746 = inversesqrt(dot(vec3(_736, _739, _742), vec3(_736, _739, _742)));
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _775 = _773.x;
    float _776 = 1.0 - _775;
    float _785 = (cbMtdParam._m0[19u].x + dot(vec4(_746 * _736, _746 * _739, _746 * _742, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_775 - _776) * cbMtdParam._m0[24u].z) + _776) * cbMtdParam._m0[21u].z);
    float _4370 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _786 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _788 = (-0.0) - cbMtdParam._m0[24u].x;
    float _790 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _790 : (isnan(_790) ? 1.0 : min(_790, 1.0));
    float _798 = _786 - ((_786 * TEXCOORD_8.x) * _791);
    float _799 = _786 - ((_786 * TEXCOORD_8.y) * _791);
    float _800 = _786 - ((_786 * TEXCOORD_8.z) * _791);
    float _807 = (_798 * (cbMtdParam._m0[17u].x - _591)) + _591;
    float _808 = (_799 * (cbMtdParam._m0[17u].y - _593)) + _593;
    float _809 = (_800 * (cbMtdParam._m0[17u].z - _595)) + _595;
    vec4 _821 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _823 = _821.x;
    float _824 = 1.0 - _823;
    float _850 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_823 - _824) * cbMtdParam._m0[24u].w) + _824) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4391 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _851 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _859 = ((((cbMtdParam._m0[10u].x - _807) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _851) + _807;
    float _860 = ((((cbMtdParam._m0[10u].y - _808) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _851) + _808;
    float _861 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _809)) * _851) + _809;
    vec4 _887 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _889 = _887.x;
    float _906 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _889) * _488) + _889;
    float _923 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _906) * _561) + _906;
    float _927 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _923) * cbMtdParam._m0[19u].z) + _923;
    float _929 = _927 - (_927 * _798);
    float _931 = _929 - (_929 * _851);
    float _936 = (((_612.z - _692) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _692;
    float _940 = ((_720.z - _936) * cbMtdParam._m0[19u].w) + _936;
    vec4 _954 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _961 = (_954.x * 2.0) + (-1.0);
    float _962 = (_954.y * 2.0) + (-1.0);
    float _963 = dot(vec2(_961, _962), vec2(_961, _962));
    float _4402 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _971 = ((_954.z - _940) * _798) + _940;
    float _974 = ((cbMtdParam._m0[23u].x - _971) * _851) + _971;
    vec4 _995 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1001 = (_995.x * 2.0) + (-1.0);
    float _1002 = (_995.y * 2.0) + (-1.0);
    float _1003 = dot(vec2(_1001, _1002), vec2(_1001, _1002));
    float _4413 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1018 = ((sqrt(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) - _702) * _800) + _702;
    float _1021 = (((_961 - _732) * _798) + _732) + (cbMtdParam._m0[21u].x * _732);
    float _1022 = (((_962 - _733) * _799) + _733) + (cbMtdParam._m0[21u].x * _733);
    float _1033 = (((_1001 - _1021) + (_1021 * cbMtdParam._m0[22u].z)) * _851) + _1021;
    float _1034 = (((_1002 - _1022) + (_1022 * cbMtdParam._m0[22u].z)) * _851) + _1022;
    float _1035 = (_851 * (sqrt(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) - _1018)) + _1018;
    float _1037 = cbMtdParam._m0[22u].x + _720.w;
    float _1040 = fma(_1035, _266, fma(_1034, _273, _1033 * _259));
    float _1043 = fma(_1035, _267, fma(_1034, _274, _1033 * _260));
    float _1046 = fma(_1035, _268, fma(_1034, _275, _1033 * _261));
    float _1050 = inversesqrt(dot(vec3(_1040, _1043, _1046), vec3(_1040, _1043, _1046)));
    float _1051 = _1050 * _1040;
    float _1052 = _1050 * _1043;
    float _1053 = _1050 * _1046;
    float _4424 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _1054 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _4435 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4446 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4457 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4468 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4479 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _1059 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _1073 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1123 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1113);
    float _1124 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1113);
    float _1125 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1113);
    float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
    float _1130 = _1123 * _1129;
    float _1131 = _1124 * _1129;
    float _1132 = _1125 * _1129;
    vec4 _1137 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1139 = _1137.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1311 = sqrt(((_1123 * _1123) + (_1124 * _1124)) + (_1125 * _1125));
        float _1317 = (cbMatDynParam._m0[5u].x * _1311) + cbMatDynParam._m0[5u].y;
        float _4490 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1322 = (cbMatDynParam._m0[5u].z * _1311) + cbMatDynParam._m0[5u].w;
        float _4501 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) - _1318)) + _1318) < ((_1139 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1150 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1151 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1169 = fma(_1053, cbSceneParam._m0[5u].z, fma(_1052, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1051));
    float _1172 = fma(_1053, cbSceneParam._m0[6u].z, fma(_1052, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1051));
    float _1175 = fma(_1053, cbSceneParam._m0[7u].z, fma(_1052, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1051));
    uint _1188 = _297 + 9u;
    uint _1189 = _1188 + uint(cbMatDynParam._m0[0u].w);
    float _1195 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * cbInstanceData._m0[_1189].x;
    float _1196 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * cbInstanceData._m0[_1189].y;
    float _1197 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * cbInstanceData._m0[_1189].z;
    float _4512 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _4523 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _1199 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _4534 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _1200 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _1201 = 1.0 - _1059;
    float _1202 = _1198 * _1201;
    float _1203 = _1199 * _1201;
    float _1204 = _1200 * _1201;
    float _1209 = (_1198 + (-0.039999999105930328369140625)) * _1059;
    float _1210 = (_1199 + (-0.039999999105930328369140625)) * _1059;
    float _1211 = (_1200 + (-0.039999999105930328369140625)) * _1059;
    float _1212 = _1209 + 0.039999999105930328369140625;
    float _1214 = _1210 + 0.039999999105930328369140625;
    float _1215 = _1211 + 0.039999999105930328369140625;
    vec4 _1224 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1150, cbSceneParam._m0[86u].y * _1151));
    float _1228 = ((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * TEXCOORD_5.w) * _1224.x;
    float _1229 = dot(vec3(_1051, _1052, _1053), vec3(_1130, _1131, _1132));
    float _1232 = _1229 * 2.0;
    float _1236 = (_1232 * _1051) - _1130;
    float _1237 = (_1232 * _1052) - _1131;
    float _1238 = (_1232 * _1053) - _1132;
    float _1242 = abs(dot(vec3(_1130, _1131, _1132), vec3(_1051, _1052, _1053)));
    float _4545 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _1244 = sqrt(_1054);
    float _1257 = exp2((_1244 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1244 * 3.0));
    float _1263 = (1.0 - _1257) * ((_1244 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1264 = _1257 * _1244;
    float _1292 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1296 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1300 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1629;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1354 = fma(_1300, cbModelParam._m0[26u].z, fma(_1296, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1292));
        float _1358 = fma(_1300, cbModelParam._m0[27u].z, fma(_1296, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1292));
        float _1362 = fma(_1300, cbModelParam._m0[28u].z, fma(_1296, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1292));
        float _1387 = _1292 + _1051;
        float _1388 = _1296 + _1052;
        float _1389 = _1300 + _1053;
        float _1399 = fma(_1389, cbModelParam._m0[26u].z, fma(_1388, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1387)) - _1354;
        float _1400 = fma(_1389, cbModelParam._m0[27u].z, fma(_1388, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1387)) - _1358;
        float _1401 = fma(_1389, cbModelParam._m0[28u].z, fma(_1388, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1387)) - _1362;
        float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
        float _1418 = ((_1405 * _1399) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1354 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1405 * _1400) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1358 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1405 * _1401) / cbModelParam._m0[34u].z) + ((((((_1362 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        float _1457 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1423.x + (-0.5));
        float _1459 = _1457 * (_1423.y + (-0.5));
        float _1460 = _1457 * (_1423.z + (-0.5));
        float _1467 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1430.x + (-0.5));
        float _1469 = _1467 * (_1430.y + (-0.5));
        float _1470 = _1467 * (_1430.z + (-0.5));
        float _1477 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1437.x + (-0.5));
        float _1479 = _1477 * (_1437.y + (-0.5));
        float _1480 = _1477 * (_1437.z + (-0.5));
        float _1487 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1444.x + (-0.5));
        float _1489 = _1487 * (_1444.y + (-0.5));
        float _1490 = _1487 * (_1444.z + (-0.5));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = _1458 * 0.5;
        float _1495 = _1468 * 0.5;
        float _1496 = _1478 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1511 = (dot(vec3(_1051, _1052, _1053), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4571 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1521 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4582 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4593 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_1523 + 1.0))) + _1528) * _1491;
        float _1538 = _1459 * 0.5;
        float _1539 = _1469 * 0.5;
        float _1540 = _1479 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_1051, _1052, _1053), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4604 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4615 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4626 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_1565 + 1.0))) + _1570) * _1492;
        float _1580 = _1460 * 0.5;
        float _1581 = _1470 * 0.5;
        float _1582 = _1480 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_1051, _1052, _1053), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4637 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4648 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4659 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_1607 + 1.0))) + _1612) * _1493;
        _1629 = _1460;
        _1631 = _1459;
        _1632 = _1458;
        _1633 = _1470;
        _1634 = _1469;
        _1635 = _1468;
        _1636 = _1480;
        _1637 = _1479;
        _1638 = _1478;
        _1639 = _1493;
        _1640 = _1492;
        _1641 = _1491;
        _1642 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1643 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1644 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
    }
    else
    {
        _1629 = _1630;
        _1631 = _1630;
        _1632 = _1630;
        _1633 = _1630;
        _1634 = _1630;
        _1635 = _1630;
        _1636 = _1630;
        _1637 = _1630;
        _1638 = _1630;
        _1639 = _1630;
        _1640 = _1630;
        _1641 = _1630;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1671 = fma(_1300, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1292));
        float _1675 = fma(_1300, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1292));
        float _1679 = fma(_1300, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1292));
        float _1702 = _1292 + _1051;
        float _1703 = _1296 + _1052;
        float _1704 = _1300 + _1053;
        float _1714 = fma(_1704, cbModelParam._m0[30u].z, fma(_1703, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1702)) - _1671;
        float _1715 = fma(_1704, cbModelParam._m0[31u].z, fma(_1703, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1702)) - _1675;
        float _1716 = fma(_1704, cbModelParam._m0[32u].z, fma(_1703, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1702)) - _1679;
        float _1720 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
        float _1733 = ((_1720 * _1714) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1671 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1734 = ((_1720 * _1715) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1675 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1735 = ((_1720 * _1716) / cbModelParam._m0[35u].z) + ((((((_1679 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1737 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1733, _1734, _1735), 0.0);
        vec4 _1744 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1733, _1734, _1735), 0.0);
        vec4 _1751 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1733, _1734, _1735), 0.0);
        vec4 _1758 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1733, _1734, _1735), 0.0);
        float _1770 = exp2((_1737.w + (-0.5)) * 20.0) * 2.0;
        float _1771 = _1770 * (_1737.x + (-0.5));
        float _1772 = _1770 * (_1737.y + (-0.5));
        float _1773 = _1770 * (_1737.z + (-0.5));
        float _1780 = exp2((_1744.w + (-0.5)) * 20.0) * 2.0;
        float _1781 = _1780 * (_1744.x + (-0.5));
        float _1782 = _1780 * (_1744.y + (-0.5));
        float _1783 = _1780 * (_1744.z + (-0.5));
        float _1790 = exp2((_1751.w + (-0.5)) * 20.0) * 2.0;
        float _1791 = _1790 * (_1751.x + (-0.5));
        float _1792 = _1790 * (_1751.y + (-0.5));
        float _1793 = _1790 * (_1751.z + (-0.5));
        float _1800 = exp2((_1758.w + (-0.5)) * 20.0) * 2.0;
        float _1801 = _1800 * (_1758.x + (-0.5));
        float _1802 = _1800 * (_1758.y + (-0.5));
        float _1803 = _1800 * (_1758.z + (-0.5));
        float _1804 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1805 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1806 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1807 = _1771 * 0.5;
        float _1808 = _1781 * 0.5;
        float _1809 = _1791 * 0.5;
        float _1810 = dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809));
        float _1815 = (_1810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1810);
        float _1823 = (dot(vec3(_1051, _1052, _1053), vec3(_1815 * _1807, _1815 * _1808, _1815 * _1809)) + 1.0) * 0.5;
        float _4700 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1832 = sqrt(((_1808 * _1808) + (_1807 * _1807)) + (_1809 * _1809)) / (_1804 + 9.9999997473787516355514526367188e-06);
        float _4711 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _1834 = _1833 * 2.0;
        float _1838 = (1.0 - _1833) / (_1833 + 1.0);
        float _4722 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _1848 = ((((1.0 - _1839) * (_1834 + 2.0)) * exp2(log2(isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_1834 + 1.0))) + _1839) * _1804;
        float _1849 = _1772 * 0.5;
        float _1850 = _1782 * 0.5;
        float _1851 = _1792 * 0.5;
        float _1852 = dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851));
        float _1857 = (_1852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1852);
        float _1865 = (dot(vec3(_1051, _1052, _1053), vec3(_1857 * _1849, _1857 * _1850, _1857 * _1851)) + 1.0) * 0.5;
        float _4733 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1874 = sqrt(((_1850 * _1850) + (_1849 * _1849)) + (_1851 * _1851)) / (_1805 + 9.9999997473787516355514526367188e-06);
        float _4744 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _1876 = _1875 * 2.0;
        float _1880 = (1.0 - _1875) / (_1875 + 1.0);
        float _4755 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _1890 = ((((1.0 - _1881) * (_1876 + 2.0)) * exp2(log2(isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_1876 + 1.0))) + _1881) * _1805;
        float _1891 = _1773 * 0.5;
        float _1892 = _1783 * 0.5;
        float _1893 = _1793 * 0.5;
        float _1894 = dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893));
        float _1899 = (_1894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1894);
        float _1907 = (dot(vec3(_1051, _1052, _1053), vec3(_1899 * _1891, _1899 * _1892, _1899 * _1893)) + 1.0) * 0.5;
        float _4766 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1916 = sqrt(((_1892 * _1892) + (_1891 * _1891)) + (_1893 * _1893)) / (_1806 + 9.9999997473787516355514526367188e-06);
        float _4777 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1917 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _1918 = _1917 * 2.0;
        float _1922 = (1.0 - _1917) / (_1917 + 1.0);
        float _4788 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _1932 = ((((1.0 - _1923) * (_1918 + 2.0)) * exp2(log2(isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_1918 + 1.0))) + _1923) * _1806;
        _1940 = _1773;
        _1941 = _1772;
        _1942 = _1771;
        _1943 = _1783;
        _1944 = _1782;
        _1945 = _1781;
        _1946 = _1793;
        _1947 = _1792;
        _1948 = _1791;
        _1949 = _1806;
        _1950 = _1805;
        _1951 = _1804;
        _1952 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)));
        _1953 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)));
        _1954 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)));
    }
    else
    {
        _1940 = _1630;
        _1941 = _1630;
        _1942 = _1630;
        _1943 = _1630;
        _1944 = _1630;
        _1945 = _1630;
        _1946 = _1630;
        _1947 = _1630;
        _1948 = _1630;
        _1949 = _1630;
        _1950 = _1630;
        _1951 = _1630;
        _1952 = 0.0;
        _1953 = 0.0;
        _1954 = 0.0;
    }
    float _1964 = (cbModelParam._m0[1u].x * (_1952 - _1642)) + _1642;
    float _1965 = (cbModelParam._m0[1u].x * (_1953 - _1643)) + _1643;
    float _1966 = (cbModelParam._m0[1u].x * (_1954 - _1644)) + _1644;
    float _1987 = fma(_1966, cbSceneParam._m0[89u].z, fma(_1965, cbSceneParam._m0[89u].y, _1964 * cbSceneParam._m0[89u].x));
    float _1990 = fma(_1966, cbSceneParam._m0[90u].z, fma(_1965, cbSceneParam._m0[90u].y, _1964 * cbSceneParam._m0[90u].x));
    float _1993 = fma(_1966, cbSceneParam._m0[91u].z, fma(_1965, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1964));
    float _2008 = _1236 * 0.5;
    float _2009 = _1237 * 0.5;
    float _2010 = _1238 * 0.5;
    float _2011 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1942, _1945, _1948, _1951));
    float _2014 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1941, _1944, _1947, _1950));
    float _2017 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1940, _1943, _1946, _1949));
    float _2051;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2024 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1629, _1633, _1636, _1639));
        float _2028 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1631, _1634, _1637, _1640));
        float _2032 = dot(vec4(_2008, _2009, _2010, 1.0), vec4(_1632, _1635, _1638, _1641));
        float _2039 = dot(vec4(cbModelParam._m0[39u]), vec4(_2008, _2009, _2010, 1.0));
        _2051 = dot(vec3(isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0)), isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)), isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2039) ? 0.0 : (isnan(0.0) ? _2039 : max(0.0, _2039))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2051 = 1.0;
    }
    float _2062;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2053 = dot(vec4(cbModelParam._m0[40u]), vec4(_2008, _2009, _2010, 1.0));
        _2062 = dot(vec3(isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)), isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)), isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2053) ? 0.0 : (isnan(0.0) ? _2053 : max(0.0, _2053))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2062 = 1.0;
    }
    float _2066 = (_2062 * cbModelParam._m0[1u].x) + (_2051 * (1.0 - cbModelParam._m0[1u].x));
    float _2076 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1054);
    float _2077 = isnan(_2076) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2076 : min(cbModelParam._m0[25u].z, _2076));
    float _2158;
    float _2160;
    float _2162;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2125 = fma(_1300, cbModelParam._m0[13u].z, fma(_1296, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1292)) + cbModelParam._m0[13u].w;
        float _2129 = fma(_1300, cbModelParam._m0[14u].z, fma(_1296, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1292)) + cbModelParam._m0[14u].w;
        float _2133 = fma(_1300, cbModelParam._m0[15u].z, fma(_1296, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1292)) + cbModelParam._m0[15u].w;
        float _2136 = fma(_1238, cbModelParam._m0[13u].z, fma(_1237, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1236));
        float _2139 = fma(_1238, cbModelParam._m0[14u].z, fma(_1237, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1236));
        float _2142 = fma(_1238, cbModelParam._m0[15u].z, fma(_1237, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1236));
        float _2170;
        if (_2136 > 0.0)
        {
            _2170 = abs((1.0 - _2125) / _2136);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2125 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2170 = frontier_phi_17_15_ladder;
        }
        float _2342;
        if (_2139 > 0.0)
        {
            _2342 = abs((1.0 - _2129) / _2139);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2129 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2342 = frontier_phi_26_22_ladder;
        }
        float _2637;
        if (_2142 > 0.0)
        {
            _2637 = abs((1.0 - _2133) / _2142);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2133 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2637 = frontier_phi_38_33_ladder;
        }
        float _2639 = isnan(_2342) ? _2170 : (isnan(_2170) ? _2342 : min(_2170, _2342));
        float _2640 = isnan(_2637) ? _2639 : (isnan(_2639) ? _2637 : min(_2639, _2637));
        float _2644 = (_2640 * _2136) + _2125;
        float _2645 = (_2640 * _2139) + _2129;
        float _2646 = (_2640 * _2142) + _2133;
        float _2647 = _2640 * 9.9999997473787516355514526367188e-05;
        float _2649 = (-1.0) - _2647;
        float _2651 = _2647 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2646 > _2651) || ((_2646 < _2649) || ((_2645 > _2651) || ((_2645 < _2649) || ((_2644 < _2649) || (_2644 > _2651))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2791 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2646, cbModelParam._m0[9u].z, fma(_2645, cbModelParam._m0[9u].y, _2644 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2646, cbModelParam._m0[10u].z, fma(_2645, cbModelParam._m0[10u].y, _2644 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2646, cbModelParam._m0[11u].z, fma(_2645, cbModelParam._m0[11u].y, _2644 * cbModelParam._m0[11u].x))), _2077);
            frontier_phi_16_38_ladder = _2791.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2791.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2791.x * cbModelParam._m0[1u].y;
        }
        _2158 = frontier_phi_16_38_ladder_2;
        _2160 = frontier_phi_16_38_ladder_1;
        _2162 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2146 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1236, _1237, _1238), _2077);
        _2158 = _2146.x * cbModelParam._m0[1u].y;
        _2160 = _2146.y * cbModelParam._m0[1u].y;
        _2162 = _2146.z * cbModelParam._m0[1u].y;
    }
    float _2166 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1054);
    float _2167 = isnan(_2166) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2166 : min(cbModelParam._m0[25u].w, _2166));
    float _2257;
    float _2259;
    float _2261;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2221 = fma(_1300, cbModelParam._m0[21u].z, fma(_1296, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1292)) + cbModelParam._m0[21u].w;
        float _2225 = fma(_1300, cbModelParam._m0[22u].z, fma(_1296, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1292)) + cbModelParam._m0[22u].w;
        float _2229 = fma(_1300, cbModelParam._m0[23u].z, fma(_1296, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1292)) + cbModelParam._m0[23u].w;
        float _2232 = fma(_1238, cbModelParam._m0[21u].z, fma(_1237, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1236));
        float _2235 = fma(_1238, cbModelParam._m0[22u].z, fma(_1237, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1236));
        float _2238 = fma(_1238, cbModelParam._m0[23u].z, fma(_1237, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1236));
        float _2347;
        if (_2232 > 0.0)
        {
            _2347 = abs((1.0 - _2221) / _2232);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2232 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2221 + 1.0) / _2232);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2347 = frontier_phi_28_24_ladder;
        }
        float _2664;
        if (_2235 > 0.0)
        {
            _2664 = abs((1.0 - _2225) / _2235);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2235 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2225 + 1.0) / _2235);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2664 = frontier_phi_40_35_ladder;
        }
        float _3002;
        if (_2238 > 0.0)
        {
            _3002 = abs((1.0 - _2229) / _2238);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2238 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2229 + 1.0) / _2238);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3002 = frontier_phi_50_47_ladder;
        }
        float _3004 = isnan(_2664) ? _2347 : (isnan(_2347) ? _2664 : min(_2347, _2664));
        float _3005 = isnan(_3002) ? _3004 : (isnan(_3004) ? _3002 : min(_3004, _3002));
        float _3009 = (_3005 * _2232) + _2221;
        float _3010 = (_3005 * _2235) + _2225;
        float _3011 = (_3005 * _2238) + _2229;
        float _3012 = _3005 * 9.9999997473787516355514526367188e-05;
        float _3013 = (-1.0) - _3012;
        float _3015 = _3012 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3011 > _3015) || ((_3011 < _3013) || ((_3010 > _3015) || ((_3010 < _3013) || ((_3009 < _3013) || (_3009 > _3015))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3133 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3011, cbModelParam._m0[17u].z, fma(_3010, cbModelParam._m0[17u].y, _3009 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3011, cbModelParam._m0[18u].z, fma(_3010, cbModelParam._m0[18u].y, _3009 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3011, cbModelParam._m0[19u].z, fma(_3010, cbModelParam._m0[19u].y, _3009 * cbModelParam._m0[19u].x))), _2167);
            frontier_phi_25_50_ladder = _3133.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3133.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3133.x * cbModelParam._m0[1u].z;
        }
        _2257 = frontier_phi_25_50_ladder_2;
        _2259 = frontier_phi_25_50_ladder_1;
        _2261 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2241 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1236, _1237, _1238), _2167);
        _2257 = _2241.x * cbModelParam._m0[1u].z;
        _2259 = _2241.y * cbModelParam._m0[1u].z;
        _2261 = _2241.z * cbModelParam._m0[1u].z;
    }
    float _2274 = (((_1263 * _1212) + _1264) * _1228) * ((cbModelParam._m0[1u].w * (_2257 - _2158)) + _2158);
    float _2276 = (((_1263 * _1214) + _1264) * _1228) * ((cbModelParam._m0[1u].w * (_2259 - _2160)) + _2160);
    float _2278 = (((_1263 * _1215) + _1264) * _1228) * ((cbModelParam._m0[1u].w * (_2261 - _2162)) + _2162);
    float _2281 = fma(_2278, cbSceneParam._m0[89u].z, fma(_2276, cbSceneParam._m0[89u].y, _2274 * cbSceneParam._m0[89u].x));
    float _2284 = fma(_2278, cbSceneParam._m0[90u].z, fma(_2276, cbSceneParam._m0[90u].y, _2274 * cbSceneParam._m0[90u].x));
    float _2287 = fma(_2278, cbSceneParam._m0[91u].z, fma(_2276, cbSceneParam._m0[91u].y, _2274 * cbSceneParam._m0[91u].x));
    float _2321 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2325 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2329 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2333 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2334 = _2321 / _2333;
    float _2335 = _2325 / _2333;
    float _2336 = _2329 / _2333;
    float _2483;
    float _2484;
    float _2485;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2363 = ((uint(_2336 > cbSceneParam._m0[59u].y) + uint(_2336 > cbSceneParam._m0[59u].x)) + uint(_2336 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2364 = _2363 + 43u;
        uint _2372 = _2363 + 44u;
        uint _2380 = _2363 + 45u;
        uint _2388 = _2363 + 46u;
        float _2399 = fma(_2333, cbSceneParam._m0[_2364].w, fma(_2329, cbSceneParam._m0[_2364].z, fma(_2325, cbSceneParam._m0[_2364].y, _2321 * cbSceneParam._m0[_2364].x)));
        float _2403 = fma(_2333, cbSceneParam._m0[_2372].w, fma(_2329, cbSceneParam._m0[_2372].z, fma(_2325, cbSceneParam._m0[_2372].y, _2321 * cbSceneParam._m0[_2372].x)));
        float _2411 = fma(_2333, cbSceneParam._m0[_2388].w, fma(_2329, cbSceneParam._m0[_2388].z, fma(_2325, cbSceneParam._m0[_2388].y, _2321 * cbSceneParam._m0[_2388].x)));
        float _2416 = cbSceneParam._m0[33u].z * _2411;
        float _2418 = cbSceneParam._m0[33u].w * _2411;
        float _2421 = fma(_2333, cbSceneParam._m0[_2380].w, fma(_2329, cbSceneParam._m0[_2380].z, fma(_2325, cbSceneParam._m0[_2380].y, _2321 * cbSceneParam._m0[_2380].x))) / _2411;
        float _2469 = (cbSceneParam._m0[33u].x - sqrt(((_2335 * _2335) + (_2334 * _2334)) + (_2336 * _2336))) * cbSceneParam._m0[33u].y;
        float _4914 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2476 = (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2416 + _2399) / _2411, (_2418 + _2403) / _2411), _2421), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2418 + _2399) / _2411, (_2403 - _2416) / _2411), _2421), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2399 - _2416) / _2411, (_2403 - _2418) / _2411), _2421), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2399 - _2418) / _2411, (_2416 + _2403) / _2411), _2421), 0.0)).x), vec4(0.25)));
        _2483 = 1.0 - (_2476 * cbSceneParam._m0[34u].x);
        _2484 = 1.0 - (_2476 * cbSceneParam._m0[34u].y);
        _2485 = 1.0 - (_2476 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2483 = 1.0;
        _2484 = 1.0;
        _2485 = 1.0;
    }
    float _2549;
    float _2551;
    float _2553;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2537 = fma(_2333, cbSceneParam._m0[63u].w, fma(_2329, cbSceneParam._m0[63u].z, fma(_2325, cbSceneParam._m0[63u].y, _2321 * cbSceneParam._m0[63u].x)));
        float _2538 = fma(_2333, cbSceneParam._m0[60u].w, fma(_2329, cbSceneParam._m0[60u].z, fma(_2325, cbSceneParam._m0[60u].y, _2321 * cbSceneParam._m0[60u].x))) / _2537;
        float _2539 = fma(_2333, cbSceneParam._m0[61u].w, fma(_2329, cbSceneParam._m0[61u].z, fma(_2325, cbSceneParam._m0[61u].y, _2321 * cbSceneParam._m0[61u].x))) / _2537;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2538 >= cbSceneParam._m0[64u].x) && (_2539 >= cbSceneParam._m0[64u].y)) && (_2538 <= cbSceneParam._m0[64u].z)) && (_2539 <= cbSceneParam._m0[64u].w))
        {
            float _2677 = fma(_2333, cbSceneParam._m0[62u].w, fma(_2329, cbSceneParam._m0[62u].z, fma(_2325, cbSceneParam._m0[62u].y, _2321 * cbSceneParam._m0[62u].x))) / _2537;
            float _2681 = isnan(cbSceneParam._m0[41u].w) ? _2677 : (isnan(_2677) ? cbSceneParam._m0[41u].w : max(_2677, cbSceneParam._m0[41u].w));
            float _2724 = (cbSceneParam._m0[33u].x - sqrt(((_2335 * _2335) + (_2334 * _2334)) + (_2336 * _2336))) * cbSceneParam._m0[33u].y;
            float _4930 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
            float _2731 = (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2538, cbSceneParam._m0[33u].w + _2539), _2681), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2538, _2539 - cbSceneParam._m0[33u].z), _2681), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2538 - cbSceneParam._m0[33u].z, _2539 - cbSceneParam._m0[33u].w), _2681), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2538 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2539), _2681), 0.0)).x), vec4(0.25)));
            float _2735 = 1.0 - (_2731 * cbSceneParam._m0[34u].x);
            float _2736 = 1.0 - (_2731 * cbSceneParam._m0[34u].y);
            float _2737 = 1.0 - (_2731 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2737) ? _2485 : (isnan(_2485) ? _2737 : min(_2485, _2737));
            frontier_phi_37_36_ladder_1 = isnan(_2736) ? _2484 : (isnan(_2484) ? _2736 : min(_2484, _2736));
            frontier_phi_37_36_ladder_2 = isnan(_2735) ? _2483 : (isnan(_2483) ? _2735 : min(_2483, _2735));
        }
        else
        {
            frontier_phi_37_36_ladder = _2485;
            frontier_phi_37_36_ladder_1 = _2484;
            frontier_phi_37_36_ladder_2 = _2483;
        }
        _2549 = frontier_phi_37_36_ladder_2;
        _2551 = frontier_phi_37_36_ladder_1;
        _2553 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2549 = _2483;
        _2551 = _2484;
        _2553 = _2485;
    }
    uvec4 _2558 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2560 = _2558.x * 14u;
    uint _2561 = _2560 + 13u;
    float _2568 = _1228 + (-1.0);
    float _2573 = (cbLight._m0[_2561].x * _2568) + 1.0;
    float _2574 = (cbLight._m0[_2561].y * _2568) + 1.0;
    float _2575 = (cbLight._m0[_2561].z * _2568) + 1.0;
    float _2576 = (cbLight._m0[_2561].w * _2568) + 1.0;
    uint _2577 = _2560 + 5u;
    float _2583 = isnan(1.0) ? _2574 : (isnan(_2574) ? 1.0 : min(_2574, 1.0));
    uint _2587 = _2560 + 4u;
    float _2596 = isnan(1.0) ? _2573 : (isnan(_2573) ? 1.0 : min(_2573, 1.0));
    uint _2600 = _2560 | 1u;
    float _2611 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_1051, _1052, _1053));
    float _2614 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_1051, _1052, _1053));
    float _4966 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _4977 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2619 = (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * 0.3183098733425140380859375;
    float _2621 = (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * 0.3183098733425140380859375;
    float _2628 = ((cbLight._m0[_2577].x * _2583) * _2621) + (((cbLight._m0[_2587].x * _2549) * _2596) * _2619);
    float _2629 = ((_2583 * cbLight._m0[_2577].y) * _2621) + (((cbLight._m0[_2587].y * _2551) * _2596) * _2619);
    float _2630 = ((_2583 * cbLight._m0[_2577].z) * _2621) + (((cbLight._m0[_2587].z * _2553) * _2596) * _2619);
    uvec4 _2634 = floatBitsToUint(cbLight._m0[_2560 + 12u]);
    bool _2636 = _2634.x == 0u;
    float _2738;
    float _2740;
    float _2742;
    if (_2636)
    {
        _2738 = _2628;
        _2740 = _2629;
        _2742 = _2630;
    }
    else
    {
        uint _2746 = _2560 + 6u;
        float _2762 = (dot(vec3(cbLight._m0[_2560 + 2u].xyz), vec3(_1051, _1052, _1053)) * 0.5) + 0.5;
        float _2763 = _2762 * _2762;
        float _4988 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2764 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
        float _2765 = isnan(1.0) ? _2575 : (isnan(_2575) ? 1.0 : min(_2575, 1.0));
        _2738 = (((cbLight._m0[_2746].x * 0.3183098733425140380859375) * _2764) * _2765) + _2628;
        _2740 = (((cbLight._m0[_2746].y * 0.3183098733425140380859375) * _2764) * _2765) + _2629;
        _2742 = (((cbLight._m0[_2746].z * 0.3183098733425140380859375) * _2764) * _2765) + _2630;
    }
    bool _2745 = _2634.y == 0u;
    float _2800;
    float _2802;
    float _2804;
    if (_2745)
    {
        _2800 = _2738;
        _2802 = _2740;
        _2804 = _2742;
    }
    else
    {
        uint _2973 = _2560 + 7u;
        float _2989 = (dot(vec3(cbLight._m0[_2560 + 3u].xyz), vec3(_1051, _1052, _1053)) * 0.5) + 0.5;
        float _2990 = _2989 * _2989;
        float _5004 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2991 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
        float _2992 = isnan(1.0) ? _2576 : (isnan(_2576) ? 1.0 : min(_2576, 1.0));
        _2800 = (((cbLight._m0[_2973].x * 0.3183098733425140380859375) * _2991) * _2992) + _2738;
        _2802 = (((cbLight._m0[_2973].y * 0.3183098733425140380859375) * _2991) * _2992) + _2740;
        _2804 = (((cbLight._m0[_2973].z * 0.3183098733425140380859375) * _2991) * _2992) + _2742;
    }
    uint _2807 = _2560 + 8u;
    float _2820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2560].w)) * _1054) * 0.949999988079071044921875);
    float _2821 = _2820 * _2820;
    float _2822 = cbLight._m0[_2560].x + _1130;
    float _2823 = cbLight._m0[_2560].y + _1131;
    float _2824 = cbLight._m0[_2560].z + _1132;
    float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
    float _2829 = _2828 * _2822;
    float _2830 = _2828 * _2823;
    float _2831 = _2828 * _2824;
    float _2832 = dot(vec3(_1051, _1052, _1053), vec3(cbLight._m0[_2560].xyz));
    float _5020 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
    float _2835 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
    float _5031 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _2836 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
    float _2837 = dot(vec3(_1051, _1052, _1053), vec3(_2829, _2830, _2831));
    float _5042 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
    float _2840 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
    float _2841 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_2829, _2830, _2831));
    float _5053 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
    float _2845 = _2821 * _2821;
    float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
    float _2857 = exp2(log2(1.0 - (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0)))) * 5.0);
    float _2858 = 0.959999978542327880859375 - _1209;
    float _2860 = 0.959999978542327880859375 - _1210;
    float _2861 = 0.959999978542327880859375 - _1211;
    float _2868 = 1.0 - _2821;
    float _2879 = (0.5 / (((_2836 * ((_2835 * _2868) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2836 * _2868) + _2821) * _2835))) * _2835;
    float _5064 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
    float _2881 = (isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
    uint _2895 = _2560 + 9u;
    float _2906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _1054) * 0.949999988079071044921875);
    float _2907 = _2906 * _2906;
    float _2908 = cbLight._m0[_2600].x + _1130;
    float _2909 = cbLight._m0[_2600].y + _1131;
    float _2910 = cbLight._m0[_2600].z + _1132;
    float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
    float _2915 = _2914 * _2908;
    float _2916 = _2914 * _2909;
    float _2917 = _2914 * _2910;
    float _2918 = dot(vec3(_1051, _1052, _1053), vec3(cbLight._m0[_2600].xyz));
    float _5075 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
    float _2921 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
    float _2922 = dot(vec3(_1051, _1052, _1053), vec3(_2915, _2916, _2917));
    float _5086 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
    float _2925 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
    float _2926 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2915, _2916, _2917));
    float _5097 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
    float _2930 = _2907 * _2907;
    float _2934 = ((_2925 * _2925) * (_2930 + (-1.0))) + 1.0;
    float _2941 = exp2(log2(1.0 - (isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0)))) * 5.0);
    float _2948 = 1.0 - _2907;
    float _2958 = (0.5 / (((_2836 * ((_2921 * _2948) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2836 * _2948) + _2907) * _2921))) * _2921;
    float _5108 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
    float _2960 = (isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0))) * (_2930 / ((_2934 * _2934) * 3.141590118408203125));
    float _2970 = (((((_2941 * _2858) + _1212) * cbLight._m0[_2895].x) * _2960) * _2583) + ((((cbLight._m0[_2807].x * _2549) * ((_2857 * _2858) + _1212)) * _2881) * _2596);
    float _2971 = (((((_2941 * _2860) + _1214) * cbLight._m0[_2895].y) * _2960) * _2583) + ((((cbLight._m0[_2807].y * _2551) * ((_2857 * _2860) + _1214)) * _2881) * _2596);
    float _2972 = (((((_2941 * _2861) + _1215) * cbLight._m0[_2895].z) * _2960) * _2583) + ((((cbLight._m0[_2807].z * _2553) * ((_2857 * _2861) + _1215)) * _2881) * _2596);
    float _3028;
    float _3030;
    float _3032;
    if (_2636)
    {
        _3028 = _2970;
        _3030 = _2971;
        _3032 = _2972;
    }
    else
    {
        uint _3034 = _2560 + 2u;
        uint _3038 = _2560 + 10u;
        float _3052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3034].w)) * _1054) * 0.949999988079071044921875);
        float _3053 = _3052 * _3052;
        float _3054 = cbLight._m0[_3034].x + _1130;
        float _3055 = cbLight._m0[_3034].y + _1131;
        float _3056 = cbLight._m0[_3034].z + _1132;
        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
        float _3061 = _3060 * _3054;
        float _3062 = _3060 * _3055;
        float _3063 = _3060 * _3056;
        float _3064 = dot(vec3(_1051, _1052, _1053), vec3(cbLight._m0[_3034].xyz));
        float _5119 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        float _3067 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
        float _3068 = dot(vec3(_1051, _1052, _1053), vec3(_3061, _3062, _3063));
        float _5130 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
        float _3071 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
        float _3072 = dot(vec3(cbLight._m0[_3034].xyz), vec3(_3061, _3062, _3063));
        float _5141 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
        float _3076 = _3053 * _3053;
        float _3080 = ((_3071 * _3071) * (_3076 + (-1.0))) + 1.0;
        float _3087 = exp2(log2(1.0 - (isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0)))) * 5.0);
        float _3094 = 1.0 - _3053;
        float _3104 = (0.5 / (((_2836 * ((_3067 * _3094) + _3053)) + 9.9999999392252902907785028219223e-09) + (((_2836 * _3094) + _3053) * _3067))) * _3067;
        float _5152 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
        float _3106 = (isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0))) * (_3076 / ((_3080 * _3080) * 3.141590118408203125));
        float _3107 = isnan(1.0) ? _2575 : (isnan(_2575) ? 1.0 : min(_2575, 1.0));
        _3028 = (((((_3087 * _2858) + _1212) * cbLight._m0[_3038].x) * _3106) * _3107) + _2970;
        _3030 = (((((_3087 * _2860) + _1214) * cbLight._m0[_3038].y) * _3106) * _3107) + _2971;
        _3032 = (((((_3087 * _2861) + _1215) * cbLight._m0[_3038].z) * _3106) * _3107) + _2972;
    }
    float _3138;
    float _3140;
    float _3142;
    if (_2745)
    {
        _3138 = _3028;
        _3140 = _3030;
        _3142 = _3032;
    }
    else
    {
        uint _3149 = _2560 + 3u;
        uint _3153 = _2560 + 11u;
        float _3167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3149].w)) * _1054) * 0.949999988079071044921875);
        float _3168 = _3167 * _3167;
        float _3169 = cbLight._m0[_3149].x + _1130;
        float _3170 = cbLight._m0[_3149].y + _1131;
        float _3171 = cbLight._m0[_3149].z + _1132;
        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
        float _3176 = _3175 * _3169;
        float _3177 = _3175 * _3170;
        float _3178 = _3175 * _3171;
        float _3179 = dot(vec3(_1051, _1052, _1053), vec3(cbLight._m0[_3149].xyz));
        float _5168 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
        float _3182 = isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0));
        float _3183 = dot(vec3(_1051, _1052, _1053), vec3(_3176, _3177, _3178));
        float _5179 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
        float _3186 = isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0));
        float _3187 = dot(vec3(cbLight._m0[_3149].xyz), vec3(_3176, _3177, _3178));
        float _5190 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
        float _3191 = _3168 * _3168;
        float _3195 = ((_3186 * _3186) * (_3191 + (-1.0))) + 1.0;
        float _3202 = exp2(log2(1.0 - (isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0)))) * 5.0);
        float _3209 = 1.0 - _3168;
        float _3219 = (0.5 / (((_2836 * ((_3182 * _3209) + _3168)) + 9.9999999392252902907785028219223e-09) + (((_2836 * _3209) + _3168) * _3182))) * _3182;
        float _5201 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
        float _3221 = (isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0))) * (_3191 / ((_3195 * _3195) * 3.141590118408203125));
        float _3222 = isnan(1.0) ? _2576 : (isnan(_2576) ? 1.0 : min(_2576, 1.0));
        _3138 = (((((_3202 * _2858) + _1212) * cbLight._m0[_3153].x) * _3221) * _3222) + _3028;
        _3140 = (((((_3202 * _2860) + _1214) * cbLight._m0[_3153].y) * _3221) * _3222) + _3030;
        _3142 = (((((_3202 * _2861) + _1215) * cbLight._m0[_3153].z) * _3221) * _3222) + _3032;
    }
    float _3288;
    float _3290;
    float _3292;
    float _3294;
    float _3296;
    float _3298;
    if (_2558.y == 0u)
    {
        uvec4 _3243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3244 = _3243.x;
        uint _3255 = uint((float(_3243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1151) / _3244))) + floor(float(uint(cbSceneParam._m0[85u].x * _1150) / _3244)));
        float _3265 = (log2(_2336 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3266 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
        uint _3269 = uint(isnan(14.0) ? _3266 : (isnan(_3266) ? 14.0 : min(_3266, 14.0)));
        uvec4 _3274 = texelFetch(g_lightClusterGridBuffer, int(((_3269 << 2u) + (_3255 << 6u)) >> 2u));
        uint _3275 = _3274.x;
        uint _3276 = _3243.z;
        float _3355;
        float _3357;
        float _3359;
        float _3361;
        float _3363;
        float _3365;
        if (((((1u << ((_3276 >> 4u) & 15u)) + 4294967295u) & _3275) == 0u) || ((_3276 & 240u) == 0u))
        {
            _3355 = 0.0;
            _3357 = 0.0;
            _3359 = 0.0;
            _3361 = 0.0;
            _3363 = 0.0;
            _3365 = 0.0;
        }
        else
        {
            float _3356;
            float _3358;
            float _3360;
            float _3362;
            float _3364;
            float _3366;
            float _3507 = 0.0;
            float _3508 = 0.0;
            float _3509 = 0.0;
            float _3510 = 0.0;
            float _3511 = 0.0;
            float _3512 = 0.0;
            uint _3513 = 0u;
            uint _3522;
            bool _3523;
            for (;;)
            {
                _3522 = texelFetch(g_lightClassification, int((((_3269 << 5u) + (_3255 << 9u)) + (_3513 << 2u)) >> 2u)).x;
                _3523 = _3522 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3523)
                {
                    frontier_phi_71_pred = _3512;
                    frontier_phi_71_pred_1 = _3511;
                    frontier_phi_71_pred_2 = _3510;
                    frontier_phi_71_pred_3 = _3509;
                    frontier_phi_71_pred_4 = _3508;
                    frontier_phi_71_pred_5 = _3507;
                }
                else
                {
                    float _3652;
                    float _3653;
                    float _3654;
                    float _3655;
                    float _3656;
                    float _3657;
                    uint _3658;
                    _3652 = _3507;
                    _3653 = _3508;
                    _3654 = _3509;
                    _3655 = _3510;
                    _3656 = _3511;
                    _3657 = _3512;
                    _3658 = _3522;
                    float _3579;
                    float _3580;
                    float _3581;
                    float _3582;
                    float _3583;
                    float _3584;
                    for (;;)
                    {
                        uint _3662 = uint(findLSB(_3658)) + (_3513 << 5u);
                        uint _3659 = (_3658 + 4294967295u) & _3658;
                        uint _3664 = _3662 * 48u;
                        vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3664)).x, texelFetch(g_PointLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3664 + 3u)).x));
                        uint _3684 = (_3662 * 48u) + 4u;
                        vec4 _3697 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3684)).x, texelFetch(g_PointLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3684 + 3u)).x));
                        uint _3703 = (_3662 * 48u) + 8u;
                        vec3 _3714 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3703)).x, texelFetch(g_PointLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3703 + 2u)).x));
                        float _3718 = _3678.x - _2334;
                        float _3719 = _3678.y - _2335;
                        float _3720 = _3678.z - _2336;
                        float _3721 = dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720));
                        float _3724 = inversesqrt(_3721);
                        float _3725 = _3724 * _3718;
                        float _3726 = _3724 * _3719;
                        float _3727 = _3724 * _3720;
                        float _3728 = dot(vec3(_1169, _1172, _1175), vec3(_3725, _3726, _3727));
                        float _3733 = 1.0 - (_3721 * _3678.w);
                        float _5227 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                        float _3734 = isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0));
                        float _3735 = sqrt(_3721) * _3697.w;
                        float _3738 = 1.39999997615814208984375 / (_3735 + 1.39999997615814208984375);
                        float _3739 = _3738 * _3738;
                        float _3742 = ((1.0 - _3739) * _3728) + _3739;
                        float _3745 = _3735 * _3735;
                        float _3749 = ((isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0))) * _3734) / ((_3745 * 0.699999988079071044921875) + 1.0);
                        float _3753 = (-0.0) - _2334;
                        float _3754 = (-0.0) - _2335;
                        float _3755 = (-0.0) - _2336;
                        float _3759 = inversesqrt(dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755)));
                        float _3760 = _3759 * _3753;
                        float _3761 = _3759 * _3754;
                        float _3762 = _3759 * _3755;
                        float _3769 = exp2(log2(1.0 / ((_3745 * 3.5) + 5.0)) * 0.25);
                        float _3770 = 1.0 - _1244;
                        float _3777 = sqrt(1.0 - ((1.0 - (_3770 * _3770)) * (1.0 - (_3769 * _3769))));
                        float _3778 = _3777 * _3777;
                        float _3779 = _3778 * _3778;
                        float _3780 = _3760 + _3725;
                        float _3781 = _3761 + _3726;
                        float _3782 = _3762 + _3727;
                        float _3786 = inversesqrt(dot(vec3(_3780, _3781, _3782), vec3(_3780, _3781, _3782)));
                        float _3790 = dot(vec3(_1169, _1172, _1175), vec3(_3760, _3761, _3762));
                        float _5243 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                        float _3793 = isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0));
                        float _3794 = dot(vec3(_1169, _1172, _1175), vec3(_3786 * _3780, _3786 * _3781, _3786 * _3782));
                        float _5254 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                        float _3797 = isnan(1.0) ? _5254 : (isnan(_5254) ? 1.0 : min(_5254, 1.0));
                        float _3801 = ((_3797 * _3797) * (_3779 + (-1.0))) + 1.0;
                        float _3802 = _3738 * _3778;
                        float _3803 = _3802 * _3802;
                        float _3806 = ((1.0 - _3803) * _3728) + _3803;
                        float _5265 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                        float _3807 = isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0));
                        float _3808 = 1.0 - _3778;
                        float _3818 = (0.5 / (((_3807 * ((_3793 * _3808) + _3778)) + 9.9999999392252902907785028219223e-09) + (((_3807 * _3808) + _3778) * _3793))) * _3807;
                        float _5276 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                        float _3829 = (((_3779 * 3.1415927410125732421875) * (isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0)))) / ((_3801 * _3801) * ((_3745 * 2.1991131305694580078125) + 3.141590118408203125))) * _3734;
                        _3582 = (_3749 * _3697.x) + _3655;
                        _3583 = (_3749 * _3697.y) + _3656;
                        _3584 = (_3749 * _3697.z) + _3657;
                        _3579 = (_3829 * _3714.x) + _3652;
                        _3580 = (_3829 * _3714.y) + _3653;
                        _3581 = (_3829 * _3714.z) + _3654;
                        if (_3659 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3652 = _3579;
                            _3653 = _3580;
                            _3654 = _3581;
                            _3655 = _3582;
                            _3656 = _3583;
                            _3657 = _3584;
                            _3658 = _3659;
                        }
                    }
                    frontier_phi_71_pred = _3584;
                    frontier_phi_71_pred_1 = _3583;
                    frontier_phi_71_pred_2 = _3582;
                    frontier_phi_71_pred_3 = _3581;
                    frontier_phi_71_pred_4 = _3580;
                    frontier_phi_71_pred_5 = _3579;
                }
                _3366 = frontier_phi_71_pred;
                _3364 = frontier_phi_71_pred_1;
                _3362 = frontier_phi_71_pred_2;
                _3360 = frontier_phi_71_pred_3;
                _3358 = frontier_phi_71_pred_4;
                _3356 = frontier_phi_71_pred_5;
                uint _3514 = _3513 + 1u;
                if (_3514 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3507 = _3356;
                    _3508 = _3358;
                    _3509 = _3360;
                    _3510 = _3362;
                    _3511 = _3364;
                    _3512 = _3366;
                    _3513 = _3514;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3355 = _3356;
            _3357 = _3358;
            _3359 = _3360;
            _3361 = _3362;
            _3363 = _3364;
            _3365 = _3366;
        }
        uvec4 _3369 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3370 = _3369.z;
        uint _3372 = (_3370 >> 8u) & 15u;
        float _3475;
        float _3477;
        float _3479;
        float _3481;
        float _3483;
        float _3485;
        if (((4294967295u << _3372) & _3275) == 0u)
        {
            _3475 = _3355;
            _3477 = _3357;
            _3479 = _3359;
            _3481 = _3361;
            _3483 = _3363;
            _3485 = _3365;
        }
        else
        {
            float _3500 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
            float _3501 = _3500 * _2334;
            float _3502 = _3500 * _2335;
            float _3503 = _3500 * _2336;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3372 < ((_3370 >> 12u) & 15u))
            {
                float _3476;
                float _3478;
                float _3480;
                float _3482;
                float _3484;
                float _3486;
                float _3635 = _3355;
                float _3636 = _3357;
                float _3637 = _3359;
                float _3638 = _3361;
                float _3639 = _3363;
                float _3640 = _3365;
                uint _3641 = _3372;
                uint _3650;
                bool _3651;
                for (;;)
                {
                    _3650 = texelFetch(g_lightClassification, int((((_3269 << 5u) + (_3255 << 9u)) + (_3641 << 2u)) >> 2u)).x;
                    _3651 = _3650 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3651)
                    {
                        frontier_phi_82_pred = _3640;
                        frontier_phi_82_pred_1 = _3639;
                        frontier_phi_82_pred_2 = _3638;
                        frontier_phi_82_pred_3 = _3637;
                        frontier_phi_82_pred_4 = _3636;
                        frontier_phi_82_pred_5 = _3635;
                    }
                    else
                    {
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _4136;
                        float _4137;
                        float _4138;
                        float _4139;
                        float _4140;
                        float _4141;
                        float _3856 = _3635;
                        float _3857 = _3636;
                        float _3858 = _3637;
                        float _3859 = _3638;
                        float _3860 = _3639;
                        float _3861 = _3640;
                        uint _3862 = _3650;
                        uint _3863;
                        vec4 _3888;
                        float _3889;
                        vec4 _3904;
                        vec3 _3916;
                        vec4 _3931;
                        vec4 _3946;
                        float _3992;
                        bool _3993;
                        for (;;)
                        {
                            uint _3873 = ((_3641 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3862));
                            _3863 = (_3862 + 4294967295u) & _3862;
                            uint _3875 = _3873 * 40u;
                            _3888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3875 + 3u)).x));
                            _3889 = _3888.w;
                            uint _3891 = (_3873 * 40u) + 4u;
                            _3904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3891 + 3u)).x));
                            uint _3906 = (_3873 * 40u) + 8u;
                            _3916 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3906 + 2u)).x));
                            uint _3918 = (_3873 * 40u) + 16u;
                            _3931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3918 + 3u)).x));
                            uint _3933 = (_3873 * 40u) + 20u;
                            _3946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 3u)).x));
                            uint _3948 = (_3873 * 40u) + 24u;
                            vec4 _3961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3948 + 3u)).x));
                            uint _3967 = (_3873 * 40u) + 28u;
                            vec4 _3980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3967 + 3u)).x));
                            _3992 = fma(_2336, _3980.z, fma(_2335, _3980.y, _3980.x * _2334)) + _3980.w;
                            _3993 = !((fma(_2336, _3961.z, fma(_2335, _3961.y, _3961.x * _2334)) + _3961.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3993)
                            {
                                float _4020 = _3888.x - _2334;
                                float _4021 = _3888.y - _2335;
                                float _4022 = _3888.z - _2336;
                                float _4023 = dot(vec3(_4020, _4021, _4022), vec3(_4020, _4021, _4022));
                                float _4026 = inversesqrt(_4023);
                                float _4027 = _4026 * _4020;
                                float _4028 = _4026 * _4021;
                                float _4029 = _4026 * _4022;
                                float _4033 = 1.0 - (_4023 / (_3889 * _3889));
                                float _5287 = isnan(0.0) ? _4033 : (isnan(_4033) ? 0.0 : max(_4033, 0.0));
                                float _4034 = isnan(1.0) ? _5287 : (isnan(_5287) ? 1.0 : min(_5287, 1.0));
                                float _4038 = sqrt(_4023) * _3904.w;
                                float _4040 = 1.39999997615814208984375 / (_4038 + 1.39999997615814208984375);
                                float _4041 = _4040 * _4040;
                                float _4044 = ((1.0 - _4041) * dot(vec3(_4027, _4028, _4029), vec3(_1169, _1172, _1175))) + _4041;
                                float _4047 = _4038 * _4038;
                                float _4051 = (fma(_2336, _3931.z, fma(_2335, _3931.y, _3931.x * _2334)) + _3931.w) / _3992;
                                float _4052 = (fma(_2336, _3946.z, fma(_2335, _3946.y, _3946.x * _2334)) + _3946.w) / _3992;
                                float _4056 = 1.0 - dot(vec2(_4051, _4052), vec2(_4051, _4052));
                                float _5303 = isnan(0.0) ? _4056 : (isnan(_4056) ? 0.0 : max(_4056, 0.0));
                                float _4057 = isnan(1.0) ? _5303 : (isnan(_5303) ? 1.0 : min(_5303, 1.0));
                                float _4058 = _4057 * (((isnan(0.0) ? _4044 : (isnan(_4044) ? 0.0 : max(_4044, 0.0))) * _4034) / ((_4047 * 0.699999988079071044921875) + 1.0));
                                float _4070 = exp2(log2(1.0 / ((_4047 * 3.5) + 5.0)) * 0.25);
                                float _4071 = 1.0 - _1244;
                                float _4078 = sqrt(1.0 - ((1.0 - (_4071 * _4071)) * (1.0 - (_4070 * _4070))));
                                float _4079 = _4078 * _4078;
                                float _4080 = _4079 * _4079;
                                float _4081 = _4027 - _3501;
                                float _4082 = _4028 - _3502;
                                float _4083 = _4029 - _3503;
                                float _4087 = inversesqrt(dot(vec3(_4081, _4082, _4083), vec3(_4081, _4082, _4083)));
                                float _4091 = dot(vec3(_1169, _1172, _1175), vec3((-0.0) - _3501, (-0.0) - _3502, (-0.0) - _3503));
                                float _5314 = isnan(0.0) ? _4091 : (isnan(_4091) ? 0.0 : max(_4091, 0.0));
                                float _4094 = isnan(1.0) ? _5314 : (isnan(_5314) ? 1.0 : min(_5314, 1.0));
                                float _4095 = dot(vec3(_1169, _1172, _1175), vec3(_4087 * _4081, _4087 * _4082, _4087 * _4083));
                                float _5325 = isnan(0.0) ? _4095 : (isnan(_4095) ? 0.0 : max(_4095, 0.0));
                                float _4098 = isnan(1.0) ? _5325 : (isnan(_5325) ? 1.0 : min(_5325, 1.0));
                                float _4102 = ((_4098 * _4098) * (_4080 + (-1.0))) + 1.0;
                                float _4103 = _4040 * _4079;
                                float _4104 = _4103 * _4103;
                                float _4110 = ((1.0 - _4104) * dot(vec3(_1169, _1172, _1175), vec3(_4027, _4028, _4029))) + _4104;
                                float _5336 = isnan(0.0) ? _4110 : (isnan(_4110) ? 0.0 : max(_4110, 0.0));
                                float _4111 = isnan(1.0) ? _5336 : (isnan(_5336) ? 1.0 : min(_5336, 1.0));
                                float _4112 = 1.0 - _4079;
                                float _4122 = (0.5 / (((_4111 * ((_4094 * _4112) + _4079)) + 9.9999999392252902907785028219223e-09) + (((_4111 * _4112) + _4079) * _4094))) * _4111;
                                float _5347 = isnan(0.0) ? _4122 : (isnan(_4122) ? 0.0 : max(_4122, 0.0));
                                float _4132 = (_4057 * _4034) * (((_4080 * 3.1415927410125732421875) * (isnan(1.0) ? _5347 : (isnan(_5347) ? 1.0 : min(_5347, 1.0)))) / ((_4102 * _4102) * ((_4047 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4058 * _3904.z;
                                frontier_phi_88_pred_1 = _4058 * _3904.y;
                                frontier_phi_88_pred_2 = _4058 * _3904.x;
                                frontier_phi_88_pred_3 = _4132 * _3916.z;
                                frontier_phi_88_pred_4 = _4132 * _3916.y;
                                frontier_phi_88_pred_5 = _4132 * _3916.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4141 = frontier_phi_88_pred;
                            _4140 = frontier_phi_88_pred_1;
                            _4139 = frontier_phi_88_pred_2;
                            _4138 = frontier_phi_88_pred_3;
                            _4137 = frontier_phi_88_pred_4;
                            _4136 = frontier_phi_88_pred_5;
                            _3846 = _4139 + _3859;
                            _3847 = _4140 + _3860;
                            _3848 = _4141 + _3861;
                            _3843 = _4136 + _3856;
                            _3844 = _4137 + _3857;
                            _3845 = _4138 + _3858;
                            if (_3863 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3856 = _3843;
                                _3857 = _3844;
                                _3858 = _3845;
                                _3859 = _3846;
                                _3860 = _3847;
                                _3861 = _3848;
                                _3862 = _3863;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3848;
                        frontier_phi_82_pred_1 = _3847;
                        frontier_phi_82_pred_2 = _3846;
                        frontier_phi_82_pred_3 = _3845;
                        frontier_phi_82_pred_4 = _3844;
                        frontier_phi_82_pred_5 = _3843;
                    }
                    _3486 = frontier_phi_82_pred;
                    _3484 = frontier_phi_82_pred_1;
                    _3482 = frontier_phi_82_pred_2;
                    _3480 = frontier_phi_82_pred_3;
                    _3478 = frontier_phi_82_pred_4;
                    _3476 = frontier_phi_82_pred_5;
                    uint _3642 = _3641 + 1u;
                    if (_3642 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3635 = _3476;
                        _3636 = _3478;
                        _3637 = _3480;
                        _3638 = _3482;
                        _3639 = _3484;
                        _3640 = _3486;
                        _3641 = _3642;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3482;
                frontier_phi_63_64_ladder_1 = _3486;
                frontier_phi_63_64_ladder_2 = _3484;
                frontier_phi_63_64_ladder_3 = _3480;
                frontier_phi_63_64_ladder_4 = _3478;
                frontier_phi_63_64_ladder_5 = _3476;
            }
            else
            {
                frontier_phi_63_64_ladder = _3361;
                frontier_phi_63_64_ladder_1 = _3365;
                frontier_phi_63_64_ladder_2 = _3363;
                frontier_phi_63_64_ladder_3 = _3359;
                frontier_phi_63_64_ladder_4 = _3357;
                frontier_phi_63_64_ladder_5 = _3355;
            }
            _3475 = frontier_phi_63_64_ladder_5;
            _3477 = frontier_phi_63_64_ladder_4;
            _3479 = frontier_phi_63_64_ladder_3;
            _3481 = frontier_phi_63_64_ladder;
            _3483 = frontier_phi_63_64_ladder_2;
            _3485 = frontier_phi_63_64_ladder_1;
        }
        float _3490 = isnan(1.0) ? _1228 : (isnan(_1228) ? 1.0 : min(_1228, 1.0));
        _3288 = (_3490 * _3481) + _2800;
        _3290 = (_3490 * _3483) + _2802;
        _3292 = (_3490 * _3485) + _2804;
        _3294 = ((_3475 * _1212) * _3490) + _3138;
        _3296 = ((_3477 * _1214) * _3490) + _3140;
        _3298 = ((_3479 * _1215) * _3490) + _3142;
    }
    else
    {
        _3288 = _2800;
        _3290 = _2802;
        _3292 = _2804;
        _3294 = _3138;
        _3296 = _3140;
        _3298 = _3142;
    }
    float _5363 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _5374 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _5385 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _3315 = ((isnan(1.0) ? _5363 : (isnan(_5363) ? 1.0 : min(_5363, 1.0))) * (_3288 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1228))) + ((_3294 + ((isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))) * _2066)) * cbPerFrame._m0[3u].x);
    float _3316 = ((isnan(1.0) ? _5374 : (isnan(_5374) ? 1.0 : min(_5374, 1.0))) * (_3290 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1228))) + ((_3296 + ((isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0))) * _2066)) * cbPerFrame._m0[3u].x);
    float _3317 = ((isnan(1.0) ? _5385 : (isnan(_5385) ? 1.0 : min(_5385, 1.0))) * (_3292 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1228))) + ((_3298 + ((isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))) * _2066)) * cbPerFrame._m0[3u].x);
    uint _3318 = _297 + 6u;
    float _3326 = _1150 / cbSceneParam._m0[86u].x;
    float _3327 = _1151 / cbSceneParam._m0[86u].y;
    vec4 _3341 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3326, _3327, (log2((isnan(cbSceneParam._m0[77u].w) ? _1073 : (isnan(_1073) ? cbSceneParam._m0[77u].w : min(_1073, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3343 = _3341.x;
    float _3344 = _3341.y;
    float _3345 = _3341.z;
    float _3346 = _3341.w;
    float _3417;
    float _3419;
    float _3421;
    float _3423;
    if (_1073 > cbSceneParam._m0[78u].w)
    {
        float _3380 = isnan(_1073) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1073 : min(cbSceneParam._m0[80u].w, _1073));
        float _3381 = _3380 / _1073;
        float _3392 = _3381 * _1123;
        float _3393 = _1124 * _3381;
        float _3394 = (-0.0) - _3393;
        float _3395 = _3381 * _1125;
        float _3397 = (cbSceneParam._m0[77u].w * _3394) / _3380;
        float _3398 = _3397 + cbSceneParam._m0[79u].w;
        float _3399 = cbSceneParam._m0[79u].w - _3393;
        float _3405 = sqrt(((_3392 * _3392) + (_3393 * _3393)) + (_3395 * _3395));
        float _3408 = (1.0 - (cbSceneParam._m0[77u].w / _3380)) * _3405;
        float _3413 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3415 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3592;
        if (abs((_3394 - _3397) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3592 = ((((_3398 > 0.0) ? exp2(_3413 * _3398) : (2.0 - exp2(_3415 * _3398))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3408;
        }
        else
        {
            float _3536 = 1.0 / cbSceneParam._m0[80u].x;
            float _3537 = isnan(_3399) ? _3398 : (isnan(_3398) ? _3399 : max(_3398, _3399));
            float _3538 = isnan(_3399) ? _3398 : (isnan(_3398) ? _3399 : min(_3398, _3399));
            float _3547 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : min(_3537, 0.0));
            float _3548 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : min(_3538, 0.0));
            _3592 = ((abs(_3405 / _3394) * cbSceneParam._m0[80u].y) * ((((_3547 - _3548) * 2.0) - ((exp2(_3413 * (isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0)))) - exp2(_3413 * (isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0))))) * _3536)) - ((exp2(_3415 * _3547) - exp2(_3415 * _3548)) * _3536))) + (_3408 * cbSceneParam._m0[80u].z);
        }
        vec4 _3594 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3326, _3327, 1.0), 0.0);
        float _3603 = exp2((_3592 * (-1.44269502162933349609375)) * (1.0 - _3594.w));
        float _3604 = log2(_3603);
        float _3620 = log2(_3346);
        _3417 = (exp2(_3620 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3604 * cbSceneParam._m0[78u].x)) * _3594.x) / cbSceneParam._m0[78u].x)) + _3343;
        _3419 = (exp2(_3620 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3604 * cbSceneParam._m0[78u].y)) * _3594.y) / cbSceneParam._m0[78u].y)) + _3344;
        _3421 = (exp2(_3620 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3604 * cbSceneParam._m0[78u].z)) * _3594.z) / cbSceneParam._m0[78u].z)) + _3345;
        _3423 = _3603 * _3346;
    }
    else
    {
        _3417 = _3343;
        _3419 = _3344;
        _3421 = _3345;
        _3423 = _3346;
    }
    bool _3630;
    vec4 _3433;
    vec4 _3455;
    float _3457;
    float _3461;
    float _3462;
    float _3463;
    float _3464;
    bool _3474;
    for (;;)
    {
        _3433 = cbMatDynParam._m0[0u];
        float _3435 = roundEven(_3433.y);
        bool _3436 = _3435 == 3.0;
        float _3437 = log2(_3423);
        float _3444 = exp2(_3437 * cbSceneParam._m0[78u].x) * _3315;
        float _3445 = exp2(_3437 * cbSceneParam._m0[78u].y) * _3316;
        float _3446 = exp2(_3437 * cbSceneParam._m0[78u].z) * _3317;
        float _3453 = _1139 + (-0.5);
        _3455 = cbMtdParam._m0[1u];
        _3457 = _3455.y * _3453;
        float _3460 = (_3435 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3461 = _3460 * (_3436 ? _3444 : (_3444 + (cbSceneParam._m0[72u].w * _3417)));
        _3462 = _3460 * (_3436 ? _3445 : (_3445 + (cbSceneParam._m0[72u].w * _3419)));
        _3463 = _3460 * (_3436 ? _3446 : (_3446 + (cbSceneParam._m0[72u].w * _3421)));
        _3464 = _3453 * 0.999000012874603271484375;
        _3474 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3474)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3464) < 0.5)
            {
                _3630 = true;
                break;
            }
        }
        uint _3571 = _1188 + uint(_3433.w);
        if ((cbInstanceData._m0[_3571].w < 1.0) && ((cbInstanceData._m0[_3571].w + _3464) < 0.5))
        {
            _3630 = true;
            break;
        }
        if ((_3457 + 1.0) < _3455.x)
        {
            _3630 = true;
            break;
        }
        _3630 = false;
        break;
    }
    float _3834;
    if (_3630)
    {
        discard_state = true;
        _3834 = 0.0;
    }
    else
    {
        _3834 = cbInstanceData._m0[_3318].w;
    }
    SV_Target.x = _3461;
    SV_Target.y = _3462;
    SV_Target.z = _3463;
    SV_Target.w = _3834;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3318].w;
    discard_exit();
}


