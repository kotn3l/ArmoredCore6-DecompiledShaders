#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1411;
float _3790;
float _3791;
float _3792;
float _3793;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _403 = _401.x;
    float _415 = dot(vec4(_403, _401.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _432 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _362.x) * 2.0) - ((((_403 - _415) * cbMtdParam._m0[23u].w) + _415) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3802 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _440 = (_433 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _441 = (_433 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _442 = (_433 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _481 = _479.x;
    float _491 = dot(vec4(_481, _479.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _505 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _362.y) * 2.0) - ((((_481 - _491) * cbMtdParam._m0[23u].w) + _491) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3813 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _513 = (_506 * ((_459.x * cbMtdParam._m0[13u].x) - _440)) + _440;
    float _514 = (_506 * ((_459.y * cbMtdParam._m0[13u].y) - _441)) + _441;
    float _515 = (_506 * ((_459.z * cbMtdParam._m0[13u].z) - _442)) + _442;
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _272) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _273) + cbTextureTilingScale._m0[24u].w));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _553 = _551.x;
    float _563 = dot(vec4(_553, _551.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _575 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _362.z) * 2.0) - ((((_553 - _563) * cbMtdParam._m0[23u].w) + _563) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3824 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _589 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_576 * ((_534.x * cbMtdParam._m0[14u].x) - _513)) + _513);
    float _592 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_576 * ((_534.y * cbMtdParam._m0[14u].y) - _514)) + _514);
    float _595 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_576 * ((_534.z * cbMtdParam._m0[14u].z) - _515)) + _515);
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _627 = _625.x;
    float _628 = _625.y;
    float _629 = _625.z;
    float _636 = ((_608.x - _627) * _433) + _627;
    float _637 = ((_608.y - _628) * _433) + _628;
    float _638 = ((_608.z - _629) * _433) + _629;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _661 = ((_650.x - _636) * _506) + _636;
    float _662 = ((_650.y - _637) * _506) + _637;
    float _663 = ((_650.z - _638) * _506) + _638;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _272) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _273) + cbTextureTilingScale._m0[23u].w));
    float _688 = ((_675.z - _663) * _576) + _663;
    float _691 = ((((_675.x - _661) * _576) + _661) * 2.0) + (-1.0);
    float _693 = ((((_675.y - _662) * _576) + _662) * 2.0) + (-1.0);
    float _694 = dot(vec2(_691, _693), vec2(_691, _693));
    float _3835 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _699 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _725 = (((_713.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _691;
    float _726 = (((_713.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _693;
    vec4 _752 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _754 = _752.x;
    float _771 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _754) * _433) + _754;
    float _789 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _771) * _506) + _771;
    float _807 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _272) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _273) + cbTextureTilingScale._m0[10u].w)).x - _789) * _576) + _789;
    float _811 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _807) * cbMtdParam._m0[19u].z) + _807;
    float _815 = (cbMtdParam._m0[19u].w * (_713.z - _688)) + _688;
    float _817 = cbMtdParam._m0[22u].x + _713.w;
    float _820 = fma(_699, _239 * NORMAL.x, fma(_726, _246 * TANGENT.x, (_232 * _224) * _725));
    float _823 = fma(_699, _239 * NORMAL.y, fma(_726, _246 * TANGENT.y, (_232 * _225) * _725));
    float _826 = fma(_699, _239 * NORMAL.z, fma(_726, _246 * TANGENT.z, (_232 * _226) * _725));
    float _830 = inversesqrt(dot(vec3(_820, _823, _826), vec3(_820, _823, _826)));
    float _831 = _830 * _820;
    float _832 = _830 * _823;
    float _833 = _830 * _826;
    float _3846 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _834 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _3868 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _3879 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3890 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3901 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _839 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _853 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _903 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _893);
    float _904 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _893);
    float _905 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _893);
    float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
    float _910 = _903 * _909;
    float _911 = _904 * _909;
    float _912 = _905 * _909;
    vec4 _917 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _919 = _917.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1091 = sqrt(((_903 * _903) + (_904 * _904)) + (_905 * _905));
        float _1097 = (cbMatDynParam._m0[5u].x * _1091) + cbMatDynParam._m0[5u].y;
        float _3912 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1102 = (cbMatDynParam._m0[5u].z * _1091) + cbMatDynParam._m0[5u].w;
        float _3923 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) - _1098)) + _1098) < ((_919 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _930 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _931 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _949 = fma(_833, cbSceneParam._m0[5u].z, fma(_832, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _831));
    float _952 = fma(_833, cbSceneParam._m0[6u].z, fma(_832, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _831));
    float _955 = fma(_833, cbSceneParam._m0[7u].z, fma(_832, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _831));
    uint _968 = _252 + 9u;
    uint _969 = _968 + uint(cbMatDynParam._m0[0u].w);
    float _975 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_969].x;
    float _976 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_969].y;
    float _977 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_969].z;
    float _3934 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _981 = 1.0 - _839;
    float _982 = _978 * _981;
    float _983 = _979 * _981;
    float _984 = _980 * _981;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _839;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _839;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _839;
    float _992 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _930, cbSceneParam._m0[86u].y * _931));
    float _1008 = ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * TEXCOORD_5.w) * _1004.x;
    float _1009 = dot(vec3(_831, _832, _833), vec3(_910, _911, _912));
    float _1012 = _1009 * 2.0;
    float _1016 = (_1012 * _831) - _910;
    float _1017 = (_1012 * _832) - _911;
    float _1018 = (_1012 * _833) - _912;
    float _1022 = abs(dot(vec3(_910, _911, _912), vec3(_831, _832, _833)));
    float _3967 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1024 = sqrt(_834);
    float _1037 = exp2((_1024 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1024 * 3.0));
    float _1043 = (1.0 - _1037) * ((_1024 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1044 = _1037 * _1024;
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1410;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1135 = fma(_1080, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072));
        float _1139 = fma(_1080, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072));
        float _1143 = fma(_1080, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072));
        float _1168 = _1072 + _831;
        float _1169 = _1076 + _832;
        float _1170 = _1080 + _833;
        float _1180 = fma(_1170, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168)) - _1135;
        float _1181 = fma(_1170, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168)) - _1139;
        float _1182 = fma(_1170, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168)) - _1143;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1135 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1139 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[34u].z) + ((((((_1143 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1238 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1204.x + (-0.5));
        float _1240 = _1238 * (_1204.y + (-0.5));
        float _1241 = _1238 * (_1204.z + (-0.5));
        float _1248 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1211.x + (-0.5));
        float _1250 = _1248 * (_1211.y + (-0.5));
        float _1251 = _1248 * (_1211.z + (-0.5));
        float _1258 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1218.x + (-0.5));
        float _1260 = _1258 * (_1218.y + (-0.5));
        float _1261 = _1258 * (_1218.z + (-0.5));
        float _1268 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1225.x + (-0.5));
        float _1270 = _1268 * (_1225.y + (-0.5));
        float _1271 = _1268 * (_1225.z + (-0.5));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = _1239 * 0.5;
        float _1276 = _1249 * 0.5;
        float _1277 = _1259 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1292 = (dot(vec3(_831, _832, _833), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1302 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4015 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1304 + 1.0))) + _1309) * _1272;
        float _1319 = _1240 * 0.5;
        float _1320 = _1250 * 0.5;
        float _1321 = _1260 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_831, _832, _833), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _4048 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1346 + 1.0))) + _1351) * _1273;
        float _1361 = _1241 * 0.5;
        float _1362 = _1251 * 0.5;
        float _1363 = _1261 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_831, _832, _833), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4081 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1388 + 1.0))) + _1393) * _1274;
        _1410 = _1241;
        _1412 = _1240;
        _1413 = _1239;
        _1414 = _1251;
        _1415 = _1250;
        _1416 = _1249;
        _1417 = _1261;
        _1418 = _1260;
        _1419 = _1259;
        _1420 = _1274;
        _1421 = _1273;
        _1422 = _1272;
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1425 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1411;
        _1412 = _1411;
        _1413 = _1411;
        _1414 = _1411;
        _1415 = _1411;
        _1416 = _1411;
        _1417 = _1411;
        _1418 = _1411;
        _1419 = _1411;
        _1420 = _1411;
        _1421 = _1411;
        _1422 = _1411;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1451 = fma(_1080, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072));
        float _1455 = fma(_1080, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072));
        float _1459 = fma(_1080, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072));
        float _1482 = _1072 + _831;
        float _1483 = _1076 + _832;
        float _1484 = _1080 + _833;
        float _1494 = fma(_1484, cbModelParam._m0[30u].z, fma(_1483, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1482)) - _1451;
        float _1495 = fma(_1484, cbModelParam._m0[31u].z, fma(_1483, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1482)) - _1455;
        float _1496 = fma(_1484, cbModelParam._m0[32u].z, fma(_1483, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1482)) - _1459;
        float _1500 = inversesqrt(dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496)));
        float _1513 = ((_1500 * _1494) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1451 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1500 * _1495) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1455 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1500 * _1496) / cbModelParam._m0[35u].z) + ((((((_1459 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        float _1550 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1517.x + (-0.5));
        float _1552 = _1550 * (_1517.y + (-0.5));
        float _1553 = _1550 * (_1517.z + (-0.5));
        float _1560 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1524.x + (-0.5));
        float _1562 = _1560 * (_1524.y + (-0.5));
        float _1563 = _1560 * (_1524.z + (-0.5));
        float _1570 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1531.x + (-0.5));
        float _1572 = _1570 * (_1531.y + (-0.5));
        float _1573 = _1570 * (_1531.z + (-0.5));
        float _1580 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1538.x + (-0.5));
        float _1582 = _1580 * (_1538.y + (-0.5));
        float _1583 = _1580 * (_1538.z + (-0.5));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = _1551 * 0.5;
        float _1588 = _1561 * 0.5;
        float _1589 = _1571 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_831, _832, _833), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4144 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1614 + 1.0))) + _1619) * _1584;
        float _1629 = _1552 * 0.5;
        float _1630 = _1562 * 0.5;
        float _1631 = _1572 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_831, _832, _833), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4177 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1656 + 1.0))) + _1661) * _1585;
        float _1671 = _1553 * 0.5;
        float _1672 = _1563 * 0.5;
        float _1673 = _1573 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_831, _832, _833), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4210 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1698 + 1.0))) + _1703) * _1586;
        _1720 = _1553;
        _1721 = _1552;
        _1722 = _1551;
        _1723 = _1563;
        _1724 = _1562;
        _1725 = _1561;
        _1726 = _1573;
        _1727 = _1572;
        _1728 = _1571;
        _1729 = _1586;
        _1730 = _1585;
        _1731 = _1584;
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
    }
    else
    {
        _1720 = _1411;
        _1721 = _1411;
        _1722 = _1411;
        _1723 = _1411;
        _1724 = _1411;
        _1725 = _1411;
        _1726 = _1411;
        _1727 = _1411;
        _1728 = _1411;
        _1729 = _1411;
        _1730 = _1411;
        _1731 = _1411;
        _1732 = 0.0;
        _1733 = 0.0;
        _1734 = 0.0;
    }
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1423)) + _1423;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1424)) + _1424;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1425)) + _1425;
    float _1767 = fma(_1746, cbSceneParam._m0[89u].z, fma(_1745, cbSceneParam._m0[89u].y, _1744 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1746, cbSceneParam._m0[90u].z, fma(_1745, cbSceneParam._m0[90u].y, _1744 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1746, cbSceneParam._m0[91u].z, fma(_1745, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1744));
    float _1788 = _1016 * 0.5;
    float _1789 = _1017 * 0.5;
    float _1790 = _1018 * 0.5;
    float _1791 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1794 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1797 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1831;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1804 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1410, _1414, _1417, _1420));
        float _1808 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1812 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1413, _1416, _1419, _1422));
        float _1819 = dot(vec4(cbModelParam._m0[39u]), vec4(_1788, _1789, _1790, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1842;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1833 = dot(vec4(cbModelParam._m0[40u]), vec4(_1788, _1789, _1790, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1833) ? 0.0 : (isnan(0.0) ? _1833 : max(0.0, _1833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1846 = (_1842 * cbModelParam._m0[1u].x) + (_1831 * (1.0 - cbModelParam._m0[1u].x));
    float _1856 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _834);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1856 : min(cbModelParam._m0[25u].z, _1856));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1905 = fma(_1080, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072)) + cbModelParam._m0[13u].w;
        float _1909 = fma(_1080, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072)) + cbModelParam._m0[14u].w;
        float _1913 = fma(_1080, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072)) + cbModelParam._m0[15u].w;
        float _1916 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1919 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1922 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1950;
        if (_1916 > 0.0)
        {
            _1950 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1950 = frontier_phi_17_15_ladder;
        }
        float _2153;
        if (_1919 > 0.0)
        {
            _2153 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2153 = frontier_phi_26_22_ladder;
        }
        float _2407;
        if (_1922 > 0.0)
        {
            _2407 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2407 = frontier_phi_38_33_ladder;
        }
        float _2409 = isnan(_2153) ? _1950 : (isnan(_1950) ? _2153 : min(_1950, _2153));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1916) + _1905;
        float _2415 = (_2410 * _1919) + _1909;
        float _2416 = (_2410 * _1922) + _1913;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2417;
        float _2421 = _2417 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 > _2421) || ((_2415 < _2419) || ((_2414 < _2419) || (_2414 > _2421))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2416, cbModelParam._m0[9u].z, fma(_2415, cbModelParam._m0[9u].y, _2414 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2416, cbModelParam._m0[10u].z, fma(_2415, cbModelParam._m0[10u].y, _2414 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2416, cbModelParam._m0[11u].z, fma(_2415, cbModelParam._m0[11u].y, _2414 * cbModelParam._m0[11u].x))), _1857);
            frontier_phi_16_38_ladder = _2544.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2544.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2544.x * cbModelParam._m0[1u].y;
        }
        _1938 = frontier_phi_16_38_ladder_2;
        _1940 = frontier_phi_16_38_ladder_1;
        _1942 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1857);
        _1938 = _1926.x * cbModelParam._m0[1u].y;
        _1940 = _1926.y * cbModelParam._m0[1u].y;
        _1942 = _1926.z * cbModelParam._m0[1u].y;
    }
    float _1946 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _834);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1946 : min(cbModelParam._m0[25u].w, _1946));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2001 = fma(_1080, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072)) + cbModelParam._m0[21u].w;
        float _2005 = fma(_1080, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072)) + cbModelParam._m0[22u].w;
        float _2009 = fma(_1080, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072)) + cbModelParam._m0[23u].w;
        float _2012 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _2015 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _2018 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2158;
        if (_2012 > 0.0)
        {
            _2158 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2158 = frontier_phi_28_24_ladder;
        }
        float _2434;
        if (_2015 > 0.0)
        {
            _2434 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2434 = frontier_phi_40_35_ladder;
        }
        float _2647;
        if (_2018 > 0.0)
        {
            _2647 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2647 = frontier_phi_49_46_ladder;
        }
        float _2649 = isnan(_2434) ? _2158 : (isnan(_2158) ? _2434 : min(_2158, _2434));
        float _2650 = isnan(_2647) ? _2649 : (isnan(_2649) ? _2647 : min(_2649, _2647));
        float _2654 = (_2650 * _2012) + _2001;
        float _2655 = (_2650 * _2015) + _2005;
        float _2656 = (_2650 * _2018) + _2009;
        float _2657 = _2650 * 9.9999997473787516355514526367188e-05;
        float _2658 = (-1.0) - _2657;
        float _2660 = _2657 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2656 > _2660) || ((_2656 < _2658) || ((_2655 > _2660) || ((_2655 < _2658) || ((_2654 < _2658) || (_2654 > _2660))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2656, cbModelParam._m0[17u].z, fma(_2655, cbModelParam._m0[17u].y, _2654 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2656, cbModelParam._m0[18u].z, fma(_2655, cbModelParam._m0[18u].y, _2654 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2656, cbModelParam._m0[19u].z, fma(_2655, cbModelParam._m0[19u].y, _2654 * cbModelParam._m0[19u].x))), _1947);
            frontier_phi_25_49_ladder = _2855.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2855.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2855.x * cbModelParam._m0[1u].z;
        }
        _2037 = frontier_phi_25_49_ladder_2;
        _2039 = frontier_phi_25_49_ladder_1;
        _2041 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1947);
        _2037 = _2021.x * cbModelParam._m0[1u].z;
        _2039 = _2021.y * cbModelParam._m0[1u].z;
        _2041 = _2021.z * cbModelParam._m0[1u].z;
    }
    float _2054 = (((_1043 * _992) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2037 - _1938)) + _1938);
    float _2056 = (((_1043 * _994) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2058 = (((_1043 * _995) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2041 - _1942)) + _1942);
    float _2061 = fma(_2058, cbSceneParam._m0[89u].z, fma(_2056, cbSceneParam._m0[89u].y, _2054 * cbSceneParam._m0[89u].x));
    float _2064 = fma(_2058, cbSceneParam._m0[90u].z, fma(_2056, cbSceneParam._m0[90u].y, _2054 * cbSceneParam._m0[90u].x));
    float _2067 = fma(_2058, cbSceneParam._m0[91u].z, fma(_2056, cbSceneParam._m0[91u].y, _2054 * cbSceneParam._m0[91u].x));
    uvec4 _2077 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2079 = _2077.x * 14u;
    uint _2080 = _2079 + 13u;
    float _2087 = _1008 + (-1.0);
    float _2092 = (cbLight._m0[_2080].x * _2087) + 1.0;
    float _2093 = (cbLight._m0[_2080].y * _2087) + 1.0;
    float _2094 = (cbLight._m0[_2080].z * _2087) + 1.0;
    float _2095 = (cbLight._m0[_2080].w * _2087) + 1.0;
    uint _2096 = _2079 + 5u;
    float _2102 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2106 = _2079 + 4u;
    float _2112 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2116 = _2079 | 1u;
    float _2127 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_831, _832, _833));
    float _2130 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_831, _832, _833));
    float _4346 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _4357 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2135 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2137 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2144 = ((cbLight._m0[_2096].x * _2102) * _2137) + ((cbLight._m0[_2106].x * _2112) * _2135);
    float _2145 = ((_2102 * cbLight._m0[_2096].y) * _2137) + ((_2112 * cbLight._m0[_2106].y) * _2135);
    float _2146 = ((_2102 * cbLight._m0[_2096].z) * _2137) + ((_2112 * cbLight._m0[_2106].z) * _2135);
    uvec4 _2150 = floatBitsToUint(cbLight._m0[_2079 + 12u]);
    bool _2152 = _2150.x == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2152)
    {
        _2163 = _2144;
        _2165 = _2145;
        _2167 = _2146;
    }
    else
    {
        uint _2171 = _2079 + 6u;
        float _2187 = (dot(vec3(cbLight._m0[_2079 + 2u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2188 = _2187 * _2187;
        float _4368 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2190 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2163 = (((cbLight._m0[_2171].x * 0.3183098733425140380859375) * _2189) * _2190) + _2144;
        _2165 = (((cbLight._m0[_2171].y * 0.3183098733425140380859375) * _2189) * _2190) + _2145;
        _2167 = (((cbLight._m0[_2171].z * 0.3183098733425140380859375) * _2189) * _2190) + _2146;
    }
    bool _2170 = _2150.y == 0u;
    float _2208;
    float _2210;
    float _2212;
    if (_2170)
    {
        _2208 = _2163;
        _2210 = _2165;
        _2212 = _2167;
    }
    else
    {
        uint _2378 = _2079 + 7u;
        float _2394 = (dot(vec3(cbLight._m0[_2079 + 3u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2395 = _2394 * _2394;
        float _4384 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2396 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2397 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2208 = (((cbLight._m0[_2378].x * 0.3183098733425140380859375) * _2396) * _2397) + _2163;
        _2210 = (((cbLight._m0[_2378].y * 0.3183098733425140380859375) * _2396) * _2397) + _2165;
        _2212 = (((cbLight._m0[_2378].z * 0.3183098733425140380859375) * _2396) * _2397) + _2167;
    }
    uint _2215 = _2079 + 8u;
    float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _834) * 0.949999988079071044921875);
    float _2229 = _2228 * _2228;
    float _2230 = cbLight._m0[_2079].x + _910;
    float _2231 = cbLight._m0[_2079].y + _911;
    float _2232 = cbLight._m0[_2079].z + _912;
    float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
    float _2237 = _2236 * _2230;
    float _2238 = _2236 * _2231;
    float _2239 = _2236 * _2232;
    float _2240 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2079].xyz));
    float _4400 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2244 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2245 = dot(vec3(_831, _832, _833), vec3(_2237, _2238, _2239));
    float _4422 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2249 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2237, _2238, _2239));
    float _4433 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2253 = _2229 * _2229;
    float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
    float _2265 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
    float _2266 = 0.959999978542327880859375 - _989;
    float _2268 = 0.959999978542327880859375 - _990;
    float _2269 = 0.959999978542327880859375 - _991;
    float _2276 = 1.0 - _2229;
    float _2287 = (0.5 / (((_2244 * ((_2243 * _2276) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2276) + _2229) * _2243))) * _2243;
    float _4444 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
    uint _2300 = _2079 + 9u;
    float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _834) * 0.949999988079071044921875);
    float _2312 = _2311 * _2311;
    float _2313 = cbLight._m0[_2116].x + _910;
    float _2314 = cbLight._m0[_2116].y + _911;
    float _2315 = cbLight._m0[_2116].z + _912;
    float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
    float _2320 = _2319 * _2313;
    float _2321 = _2319 * _2314;
    float _2322 = _2319 * _2315;
    float _2323 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2116].xyz));
    float _4455 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2327 = dot(vec3(_831, _832, _833), vec3(_2320, _2321, _2322));
    float _4466 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2331 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2320, _2321, _2322));
    float _4477 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2335 = _2312 * _2312;
    float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
    float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0);
    float _2353 = 1.0 - _2312;
    float _2363 = (0.5 / (((_2244 * ((_2326 * _2353) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2353) + _2312) * _2326))) * _2326;
    float _4488 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2365 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
    float _2375 = (((((_2346 * _2266) + _992) * cbLight._m0[_2300].x) * _2365) * _2102) + (((((_2265 * _2266) + _992) * cbLight._m0[_2215].x) * _2289) * _2112);
    float _2376 = (((((_2346 * _2268) + _994) * cbLight._m0[_2300].y) * _2365) * _2102) + (((((_2265 * _2268) + _994) * cbLight._m0[_2215].y) * _2289) * _2112);
    float _2377 = (((((_2346 * _2269) + _995) * cbLight._m0[_2300].z) * _2365) * _2102) + (((((_2265 * _2269) + _995) * cbLight._m0[_2215].z) * _2289) * _2112);
    float _2439;
    float _2441;
    float _2443;
    if (_2152)
    {
        _2439 = _2375;
        _2441 = _2376;
        _2443 = _2377;
    }
    else
    {
        uint _2445 = _2079 + 2u;
        uint _2449 = _2079 + 10u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _834) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _910;
        float _2466 = cbLight._m0[_2445].y + _911;
        float _2467 = cbLight._m0[_2445].z + _912;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2445].xyz));
        float _4499 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2479 = dot(vec3(_831, _832, _833), vec3(_2472, _2473, _2474));
        float _4510 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4521 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2244 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2505) + _2464) * _2478))) * _2478;
        float _4532 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2439 = (((((_2498 * _2266) + _992) * cbLight._m0[_2449].x) * _2517) * _2518) + _2375;
        _2441 = (((((_2498 * _2268) + _994) * cbLight._m0[_2449].y) * _2517) * _2518) + _2376;
        _2443 = (((((_2498 * _2269) + _995) * cbLight._m0[_2449].z) * _2517) * _2518) + _2377;
    }
    float _2553;
    float _2555;
    float _2557;
    if (_2170)
    {
        _2553 = _2439;
        _2555 = _2441;
        _2557 = _2443;
    }
    else
    {
        uint _2564 = _2079 + 3u;
        uint _2568 = _2079 + 11u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _834) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _910;
        float _2585 = cbLight._m0[_2564].y + _911;
        float _2586 = cbLight._m0[_2564].z + _912;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2564].xyz));
        float _4548 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2598 = dot(vec3(_831, _832, _833), vec3(_2591, _2592, _2593));
        float _4559 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4570 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0);
        float _2624 = 1.0 - _2583;
        float _2634 = (0.5 / (((_2244 * ((_2597 * _2624) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2624) + _2583) * _2597))) * _2597;
        float _4581 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2636 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2637 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2553 = (((((_2617 * _2266) + _992) * cbLight._m0[_2568].x) * _2636) * _2637) + _2439;
        _2555 = (((((_2617 * _2268) + _994) * cbLight._m0[_2568].y) * _2636) * _2637) + _2441;
        _2557 = (((((_2617 * _2269) + _995) * cbLight._m0[_2568].z) * _2636) * _2637) + _2443;
    }
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_2077.y == 0u)
    {
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2712;
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2712;
        float _2715 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2712;
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.x;
        uint _2739 = uint((float(_2727.y) * floor(float(uint(cbSceneParam._m0[85u].y * _931) / _2728))) + floor(float(uint(cbSceneParam._m0[85u].x * _930) / _2728)));
        float _2749 = (log2(_2715 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2750 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        uint _2753 = uint(isnan(14.0) ? _2750 : (isnan(_2750) ? 14.0 : min(_2750, 14.0)));
        uvec4 _2758 = texelFetch(g_lightClusterGridBuffer, int(((_2753 << 2u) + (_2739 << 6u)) >> 2u));
        uint _2759 = _2758.x;
        uint _2760 = _2727.z;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((((1u << ((_2760 >> 4u) & 15u)) + 4294967295u) & _2759) == 0u) || ((_2760 & 240u) == 0u))
        {
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
        }
        else
        {
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            uint _3019 = 0u;
            uint _3028;
            bool _3029;
            for (;;)
            {
                _3028 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                _3029 = _3028 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3029)
                {
                    frontier_phi_66_pred = _3013;
                    frontier_phi_66_pred_1 = _3018;
                    frontier_phi_66_pred_2 = _3017;
                    frontier_phi_66_pred_3 = _3016;
                    frontier_phi_66_pred_4 = _3015;
                    frontier_phi_66_pred_5 = _3014;
                }
                else
                {
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    uint _3164;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3028;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    for (;;)
                    {
                        uint _3168 = uint(findLSB(_3164)) + (_3019 << 5u);
                        uint _3165 = (_3164 + 4294967295u) & _3164;
                        uint _3170 = _3168 * 48u;
                        vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3190 = (_3168 * 48u) + 4u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3209 = (_3168 * 48u) + 8u;
                        vec3 _3220 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x));
                        float _3224 = _3184.x - _2713;
                        float _3225 = _3184.y - _2714;
                        float _3226 = _3184.z - _2715;
                        float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                        float _3230 = inversesqrt(_3227);
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3234 = dot(vec3(_949, _952, _955), vec3(_3231, _3232, _3233));
                        float _3239 = 1.0 - (_3227 * _3184.w);
                        float _4607 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3241 = sqrt(_3227) * _3203.w;
                        float _3244 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3234) + _3245;
                        float _3251 = _3241 * _3241;
                        float _3255 = ((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3240) / ((_3251 * 0.699999988079071044921875) + 1.0);
                        float _3259 = (-0.0) - _2713;
                        float _3260 = (-0.0) - _2714;
                        float _3261 = (-0.0) - _2715;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3266 = _3265 * _3259;
                        float _3267 = _3265 * _3260;
                        float _3268 = _3265 * _3261;
                        float _3276 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                        float _3277 = 1.0 - _1024;
                        float _3284 = sqrt(1.0 - ((1.0 - (_3277 * _3277)) * (1.0 - (_3276 * _3276))));
                        float _3285 = _3284 * _3284;
                        float _3286 = _3285 * _3285;
                        float _3287 = _3266 + _3231;
                        float _3288 = _3267 + _3232;
                        float _3289 = _3268 + _3233;
                        float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                        float _3297 = dot(vec3(_949, _952, _955), vec3(_3266, _3267, _3268));
                        float _4623 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3300 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3301 = dot(vec3(_949, _952, _955), vec3(_3293 * _3287, _3293 * _3288, _3293 * _3289));
                        float _4634 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3304 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3308 = ((_3304 * _3304) * (_3286 + (-1.0))) + 1.0;
                        float _3309 = _3244 * _3285;
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3234) + _3310;
                        float _4645 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3314 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3315 = 1.0 - _3285;
                        float _3325 = (0.5 / (((_3314 * ((_3300 * _3315) + _3285)) + 9.9999999392252902907785028219223e-09) + (((_3314 * _3315) + _3285) * _3300))) * _3314;
                        float _4656 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3336 = (((_3286 * 3.1415927410125732421875) * (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0)))) / ((_3308 * _3308) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125))) * _3240;
                        _3088 = (_3255 * _3203.x) + _3161;
                        _3089 = (_3255 * _3203.y) + _3162;
                        _3090 = (_3255 * _3203.z) + _3163;
                        _3085 = (_3336 * _3220.x) + _3158;
                        _3086 = (_3336 * _3220.y) + _3159;
                        _3087 = (_3336 * _3220.z) + _3160;
                        if (_3165 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3165;
                        }
                    }
                    frontier_phi_66_pred = _3085;
                    frontier_phi_66_pred_1 = _3090;
                    frontier_phi_66_pred_2 = _3089;
                    frontier_phi_66_pred_3 = _3088;
                    frontier_phi_66_pred_4 = _3087;
                    frontier_phi_66_pred_5 = _3086;
                }
                _2861 = frontier_phi_66_pred;
                _2871 = frontier_phi_66_pred_1;
                _2869 = frontier_phi_66_pred_2;
                _2867 = frontier_phi_66_pred_3;
                _2865 = frontier_phi_66_pred_4;
                _2863 = frontier_phi_66_pred_5;
                uint _3020 = _3019 + 1u;
                if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3013 = _2861;
                    _3014 = _2863;
                    _3015 = _2865;
                    _3016 = _2867;
                    _3017 = _2869;
                    _3018 = _2871;
                    _3019 = _3020;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
        }
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.z;
        uint _2877 = (_2875 >> 8u) & 15u;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        if (((4294967295u << _2877) & _2759) == 0u)
        {
            _2981 = _2860;
            _2983 = _2862;
            _2985 = _2864;
            _2987 = _2866;
            _2989 = _2868;
            _2991 = _2870;
        }
        else
        {
            float _3006 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
            float _3007 = _3006 * _2713;
            float _3008 = _3006 * _2714;
            float _3009 = _3006 * _2715;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2877 < ((_2875 >> 12u) & 15u))
            {
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _3141 = _2860;
                float _3142 = _2862;
                float _3143 = _2864;
                float _3144 = _2866;
                float _3145 = _2868;
                float _3146 = _2870;
                uint _3147 = _2877;
                uint _3156;
                bool _3157;
                for (;;)
                {
                    _3156 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                    _3157 = _3156 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3157)
                    {
                        frontier_phi_77_pred = _3146;
                        frontier_phi_77_pred_1 = _3145;
                        frontier_phi_77_pred_2 = _3144;
                        frontier_phi_77_pred_3 = _3143;
                        frontier_phi_77_pred_4 = _3142;
                        frontier_phi_77_pred_5 = _3141;
                    }
                    else
                    {
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        float _3366 = _3144;
                        float _3367 = _3145;
                        float _3368 = _3146;
                        uint _3369 = _3156;
                        uint _3370;
                        vec4 _3395;
                        float _3396;
                        vec4 _3411;
                        vec3 _3423;
                        vec4 _3438;
                        vec4 _3453;
                        float _3499;
                        bool _3500;
                        for (;;)
                        {
                            uint _3380 = ((_3147 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3369));
                            _3370 = (_3369 + 4294967295u) & _3369;
                            uint _3382 = _3380 * 40u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3396 = _3395.w;
                            uint _3398 = (_3380 * 40u) + 4u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3380 * 40u) + 8u;
                            _3423 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x));
                            uint _3425 = (_3380 * 40u) + 16u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3380 * 40u) + 20u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3380 * 40u) + 24u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3474 = (_3380 * 40u) + 28u;
                            vec4 _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            _3499 = fma(_2715, _3487.z, fma(_2714, _3487.y, _3487.x * _2713)) + _3487.w;
                            _3500 = !((fma(_2715, _3468.z, fma(_2714, _3468.y, _3468.x * _2713)) + _3468.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3500)
                            {
                                float _3527 = _3395.x - _2713;
                                float _3528 = _3395.y - _2714;
                                float _3529 = _3395.z - _2715;
                                float _3530 = dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529));
                                float _3533 = inversesqrt(_3530);
                                float _3534 = _3533 * _3527;
                                float _3535 = _3533 * _3528;
                                float _3536 = _3533 * _3529;
                                float _3540 = 1.0 - (_3530 / (_3396 * _3396));
                                float _4667 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3545 = sqrt(_3530) * _3411.w;
                                float _3547 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                                float _3548 = _3547 * _3547;
                                float _3551 = ((1.0 - _3548) * dot(vec3(_3534, _3535, _3536), vec3(_949, _952, _955))) + _3548;
                                float _3554 = _3545 * _3545;
                                float _3558 = (fma(_2715, _3438.z, fma(_2714, _3438.y, _3438.x * _2713)) + _3438.w) / _3499;
                                float _3559 = (fma(_2715, _3453.z, fma(_2714, _3453.y, _3453.x * _2713)) + _3453.w) / _3499;
                                float _3563 = 1.0 - dot(vec2(_3558, _3559), vec2(_3558, _3559));
                                float _4683 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3565 = _3564 * (((isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0))) * _3541) / ((_3554 * 0.699999988079071044921875) + 1.0));
                                float _3577 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                                float _3578 = 1.0 - _1024;
                                float _3585 = sqrt(1.0 - ((1.0 - (_3578 * _3578)) * (1.0 - (_3577 * _3577))));
                                float _3586 = _3585 * _3585;
                                float _3587 = _3586 * _3586;
                                float _3588 = _3534 - _3007;
                                float _3589 = _3535 - _3008;
                                float _3590 = _3536 - _3009;
                                float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                                float _3598 = dot(vec3(_949, _952, _955), vec3((-0.0) - _3007, (-0.0) - _3008, (-0.0) - _3009));
                                float _4694 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3602 = dot(vec3(_949, _952, _955), vec3(_3594 * _3588, _3594 * _3589, _3594 * _3590));
                                float _4705 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3609 = ((_3605 * _3605) * (_3587 + (-1.0))) + 1.0;
                                float _3610 = _3547 * _3586;
                                float _3611 = _3610 * _3610;
                                float _3617 = ((1.0 - _3611) * dot(vec3(_949, _952, _955), vec3(_3534, _3535, _3536))) + _3611;
                                float _4716 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3619 = 1.0 - _3586;
                                float _3629 = (0.5 / (((_3618 * ((_3601 * _3619) + _3586)) + 9.9999999392252902907785028219223e-09) + (((_3618 * _3619) + _3586) * _3601))) * _3618;
                                float _4727 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3639 = (_3564 * _3541) * (((_3587 * 3.1415927410125732421875) * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) / ((_3609 * _3609) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3565 * _3411.y;
                                frontier_phi_83_pred_1 = _3565 * _3411.x;
                                frontier_phi_83_pred_2 = _3639 * _3423.z;
                                frontier_phi_83_pred_3 = _3639 * _3423.y;
                                frontier_phi_83_pred_4 = _3639 * _3423.x;
                                frontier_phi_83_pred_5 = _3565 * _3411.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3647 = frontier_phi_83_pred;
                            _3646 = frontier_phi_83_pred_1;
                            _3645 = frontier_phi_83_pred_2;
                            _3644 = frontier_phi_83_pred_3;
                            _3643 = frontier_phi_83_pred_4;
                            _3648 = frontier_phi_83_pred_5;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            if (_3370 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3370;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3355;
                        frontier_phi_77_pred_1 = _3354;
                        frontier_phi_77_pred_2 = _3353;
                        frontier_phi_77_pred_3 = _3352;
                        frontier_phi_77_pred_4 = _3351;
                        frontier_phi_77_pred_5 = _3350;
                    }
                    _2992 = frontier_phi_77_pred;
                    _2990 = frontier_phi_77_pred_1;
                    _2988 = frontier_phi_77_pred_2;
                    _2986 = frontier_phi_77_pred_3;
                    _2984 = frontier_phi_77_pred_4;
                    _2982 = frontier_phi_77_pred_5;
                    uint _3148 = _3147 + 1u;
                    if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3141 = _2982;
                        _3142 = _2984;
                        _3143 = _2986;
                        _3144 = _2988;
                        _3145 = _2990;
                        _3146 = _2992;
                        _3147 = _3148;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2986;
                frontier_phi_58_59_ladder_1 = _2992;
                frontier_phi_58_59_ladder_2 = _2990;
                frontier_phi_58_59_ladder_3 = _2988;
                frontier_phi_58_59_ladder_4 = _2984;
                frontier_phi_58_59_ladder_5 = _2982;
            }
            else
            {
                frontier_phi_58_59_ladder = _2864;
                frontier_phi_58_59_ladder_1 = _2870;
                frontier_phi_58_59_ladder_2 = _2868;
                frontier_phi_58_59_ladder_3 = _2866;
                frontier_phi_58_59_ladder_4 = _2862;
                frontier_phi_58_59_ladder_5 = _2860;
            }
            _2981 = frontier_phi_58_59_ladder_5;
            _2983 = frontier_phi_58_59_ladder_4;
            _2985 = frontier_phi_58_59_ladder;
            _2987 = frontier_phi_58_59_ladder_3;
            _2989 = frontier_phi_58_59_ladder_2;
            _2991 = frontier_phi_58_59_ladder_1;
        }
        float _2996 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
        _2772 = (_2996 * _2987) + _2208;
        _2774 = (_2996 * _2989) + _2210;
        _2776 = (_2996 * _2991) + _2212;
        _2778 = ((_2981 * _992) * _2996) + _2553;
        _2780 = ((_2983 * _994) * _2996) + _2555;
        _2782 = ((_2985 * _995) * _2996) + _2557;
    }
    else
    {
        _2772 = _2208;
        _2774 = _2210;
        _2776 = _2212;
        _2778 = _2553;
        _2780 = _2555;
        _2782 = _2557;
    }
    float _4743 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4754 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4765 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2799 = ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2772 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1008))) + ((_2778 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    float _2800 = ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2774 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1008))) + ((_2780 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    float _2801 = ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2776 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1008))) + ((_2782 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    uint _2802 = _252 + 6u;
    float _2810 = _930 / cbSceneParam._m0[86u].x;
    float _2811 = _931 / cbSceneParam._m0[86u].y;
    vec4 _2825 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, (log2((isnan(cbSceneParam._m0[77u].w) ? _853 : (isnan(_853) ? cbSceneParam._m0[77u].w : min(_853, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2827 = _2825.x;
    float _2828 = _2825.y;
    float _2829 = _2825.z;
    float _2830 = _2825.w;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    if (_853 > cbSceneParam._m0[78u].w)
    {
        float _2885 = isnan(_853) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _853 : min(cbSceneParam._m0[80u].w, _853));
        float _2886 = _2885 / _853;
        float _2897 = _2886 * _903;
        float _2898 = _904 * _2886;
        float _2899 = (-0.0) - _2898;
        float _2901 = _2886 * _905;
        float _2903 = (cbSceneParam._m0[77u].w * _2899) / _2885;
        float _2904 = _2903 + cbSceneParam._m0[79u].w;
        float _2905 = cbSceneParam._m0[79u].w - _2898;
        float _2911 = sqrt(((_2897 * _2897) + (_2898 * _2898)) + (_2901 * _2901));
        float _2914 = (1.0 - (cbSceneParam._m0[77u].w / _2885)) * _2911;
        float _2919 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2921 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3098;
        if (abs((_2899 - _2903) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3098 = ((((_2904 > 0.0) ? exp2(_2919 * _2904) : (2.0 - exp2(_2921 * _2904))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2914;
        }
        else
        {
            float _3042 = 1.0 / cbSceneParam._m0[80u].x;
            float _3043 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : max(_2904, _2905));
            float _3044 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : min(_2904, _2905));
            float _3053 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : min(_3043, 0.0));
            float _3054 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : min(_3044, 0.0));
            _3098 = ((abs(_2911 / _2899) * cbSceneParam._m0[80u].y) * ((((_3053 - _3054) * 2.0) - ((exp2(_2919 * (isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0)))) - exp2(_2919 * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))))) * _3042)) - ((exp2(_2921 * _3053) - exp2(_2921 * _3054)) * _3042))) + (_2914 * cbSceneParam._m0[80u].z);
        }
        vec4 _3100 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, 1.0), 0.0);
        float _3109 = exp2((_3098 * (-1.44269502162933349609375)) * (1.0 - _3100.w));
        float _3110 = log2(_3109);
        float _3126 = log2(_2830);
        _2923 = (exp2(_3126 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].x)) * _3100.x) / cbSceneParam._m0[78u].x)) + _2827;
        _2925 = (exp2(_3126 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].y)) * _3100.y) / cbSceneParam._m0[78u].y)) + _2828;
        _2927 = (exp2(_3126 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].z)) * _3100.z) / cbSceneParam._m0[78u].z)) + _2829;
        _2929 = _3109 * _2830;
    }
    else
    {
        _2923 = _2827;
        _2925 = _2828;
        _2927 = _2829;
        _2929 = _2830;
    }
    bool _3136;
    vec4 _2939;
    vec4 _2961;
    float _2963;
    float _2967;
    float _2968;
    float _2969;
    float _2970;
    bool _2980;
    for (;;)
    {
        _2939 = cbMatDynParam._m0[0u];
        float _2941 = roundEven(_2939.y);
        bool _2942 = _2941 == 3.0;
        float _2943 = log2(_2929);
        float _2950 = exp2(_2943 * cbSceneParam._m0[78u].x) * _2799;
        float _2951 = exp2(_2943 * cbSceneParam._m0[78u].y) * _2800;
        float _2952 = exp2(_2943 * cbSceneParam._m0[78u].z) * _2801;
        float _2959 = _919 + (-0.5);
        _2961 = cbMtdParam._m0[1u];
        _2963 = _2961.y * _2959;
        float _2966 = (_2941 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2967 = _2966 * (_2942 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2923)));
        _2968 = _2966 * (_2942 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2925)));
        _2969 = _2966 * (_2942 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2927)));
        _2970 = _2959 * 0.999000012874603271484375;
        _2980 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2980)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _2970) < 0.5)
            {
                _3136 = true;
                break;
            }
        }
        uint _3077 = _968 + uint(_2939.w);
        if ((cbInstanceData._m0[_3077].w < 1.0) && ((cbInstanceData._m0[_3077].w + _2970) < 0.5))
        {
            _3136 = true;
            break;
        }
        if ((_2963 + 1.0) < _2961.x)
        {
            _3136 = true;
            break;
        }
        _3136 = false;
        break;
    }
    float _3341;
    if (_3136)
    {
        discard_state = true;
        _3341 = 0.0;
    }
    else
    {
        _3341 = cbInstanceData._m0[_2802].w;
    }
    SV_Target.x = _2967;
    SV_Target.y = _2968;
    SV_Target.z = _2969;
    SV_Target.w = _3341;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2802].w;
    discard_exit();
}


