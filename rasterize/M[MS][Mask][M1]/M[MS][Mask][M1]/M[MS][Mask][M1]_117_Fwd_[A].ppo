#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1633;
float _4011;
float _4012;
float _4013;
float _4014;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _381.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[23u].w) + _434) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4023 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _459 = (_452 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _460 = (_452 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _461 = (_452 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _381.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[23u].w) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4034 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _572 = _570.x;
    float _582 = dot(vec4(_572, _570.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _594 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _381.z) * 2.0) - ((((_572 - _582) * cbMtdParam._m0[23u].w) + _582) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4045 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _608 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _312.x) * ((_595 * ((_553.x * cbMtdParam._m0[14u].x) - _532)) + _532);
    float _611 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _312.y) * ((_595 * ((_553.y * cbMtdParam._m0[14u].y) - _533)) + _533);
    float _614 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _312.z) * ((_595 * ((_553.z * cbMtdParam._m0[14u].z) - _534)) + _534);
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _651 = _649.x;
    float _652 = _649.y;
    float _653 = _649.z;
    float _660 = ((_632.x - _651) * _452) + _651;
    float _661 = ((_632.y - _652) * _452) + _652;
    float _662 = ((_632.z - _653) * _452) + _653;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _685 = ((_674.x - _660) * _525) + _660;
    float _686 = ((_674.y - _661) * _525) + _661;
    float _687 = ((_674.z - _662) * _525) + _662;
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _712 = ((_699.z - _687) * _595) + _687;
    float _715 = ((((_699.x - _685) * _595) + _685) * 2.0) + (-1.0);
    float _717 = ((((_699.y - _686) * _595) + _686) * 2.0) + (-1.0);
    float _718 = dot(vec2(_715, _717), vec2(_715, _717));
    float _4056 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _723 = sqrt(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))));
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _762 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _764 = _762.x;
    float _765 = 1.0 - _764;
    float _773 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _776 = ((isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : min(_773, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _785 = (_776 - ((((((_764 - _765) * cbMtdParam._m0[24u].z) + _765) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _776))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4077 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _786 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _793 = (_786 * (cbMtdParam._m0[17u].x - _608)) + _608;
    float _794 = (_786 * (cbMtdParam._m0[17u].y - _611)) + _611;
    float _795 = (_786 * (cbMtdParam._m0[17u].z - _614)) + _614;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _809 = _807.x;
    float _810 = 1.0 - _809;
    float _835 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_809 - _810) * cbMtdParam._m0[24u].w) + _810) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4088 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _836 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _844 = ((((cbMtdParam._m0[10u].x - _793) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _836) + _793;
    float _845 = ((((cbMtdParam._m0[10u].y - _794) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _836) + _794;
    float _846 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _795)) * _836) + _795;
    vec4 _872 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _874 = _872.x;
    float _891 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _874) * _452) + _874;
    float _908 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _891) * _525) + _891;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _908) * _595) + _908;
    float _929 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _925) * cbMtdParam._m0[19u].z) + _925;
    float _931 = _929 - (_929 * _786);
    float _933 = _931 - (_931 * _836);
    float _937 = (cbMtdParam._m0[19u].w * (_737.z - _712)) + _712;
    vec4 _951 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _958 = (_951.x * 2.0) + (-1.0);
    float _959 = (_951.y * 2.0) + (-1.0);
    float _960 = dot(vec2(_958, _959), vec2(_958, _959));
    float _4099 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _968 = (_786 * (_951.z - _937)) + _937;
    float _971 = ((cbMtdParam._m0[23u].x - _968) * _836) + _968;
    vec4 _994 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1000 = (_994.x * 2.0) + (-1.0);
    float _1001 = (_994.y * 2.0) + (-1.0);
    float _1002 = dot(vec2(_1000, _1001), vec2(_1000, _1001));
    float _4110 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1010 = (((_737.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _715;
    float _1011 = (((_737.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _717;
    float _1023 = (((_958 - _1010) + (cbMtdParam._m0[21u].x * _1010)) * _786) + _1010;
    float _1024 = (((_959 - _1011) + (cbMtdParam._m0[21u].x * _1011)) * _786) + _1011;
    float _1025 = (_786 * (sqrt(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) - _723)) + _723;
    float _1036 = (((_1000 - _1023) + (_1023 * cbMtdParam._m0[22u].z)) * _836) + _1023;
    float _1037 = (((_1001 - _1024) + (_1024 * cbMtdParam._m0[22u].z)) * _836) + _1024;
    float _1038 = ((sqrt(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) - _1025) * _836) + _1025;
    float _1040 = cbMtdParam._m0[22u].x + _737.w;
    float _1043 = fma(_1038, _260 * NORMAL.x, fma(_1037, _267 * TANGENT.x, (_253 * _245) * _1036));
    float _1046 = fma(_1038, _260 * NORMAL.y, fma(_1037, _267 * TANGENT.y, (_253 * _246) * _1036));
    float _1049 = fma(_1038, _260 * NORMAL.z, fma(_1037, _267 * TANGENT.z, (_253 * _247) * _1036));
    float _1053 = inversesqrt(dot(vec3(_1043, _1046, _1049), vec3(_1043, _1046, _1049)));
    float _1054 = _1053 * _1043;
    float _1055 = _1053 * _1046;
    float _1056 = _1053 * _1049;
    float _4121 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _1057 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _4143 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4154 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4165 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4176 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _1062 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _1076 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1126 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1116);
    float _1127 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1116);
    float _1128 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1116);
    float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
    float _1133 = _1126 * _1132;
    float _1134 = _1127 * _1132;
    float _1135 = _1128 * _1132;
    vec4 _1140 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1142 = _1140.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1314 = sqrt(((_1126 * _1126) + (_1127 * _1127)) + (_1128 * _1128));
        float _1320 = (cbMatDynParam._m0[5u].x * _1314) + cbMatDynParam._m0[5u].y;
        float _4187 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1325 = (cbMatDynParam._m0[5u].z * _1314) + cbMatDynParam._m0[5u].w;
        float _4198 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) - _1321)) + _1321) < ((_1142 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1153 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1154 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1172 = fma(_1056, cbSceneParam._m0[5u].z, fma(_1055, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1054));
    float _1175 = fma(_1056, cbSceneParam._m0[6u].z, fma(_1055, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1054));
    float _1178 = fma(_1056, cbSceneParam._m0[7u].z, fma(_1055, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1054));
    uint _1191 = _273 + 9u;
    uint _1192 = _1191 + uint(cbMatDynParam._m0[0u].w);
    float _1198 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * cbInstanceData._m0[_1192].x;
    float _1199 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * cbInstanceData._m0[_1192].y;
    float _1200 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_1192].z;
    float _4209 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _1201 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _1202 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _1203 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _1204 = 1.0 - _1062;
    float _1205 = _1201 * _1204;
    float _1206 = _1202 * _1204;
    float _1207 = _1203 * _1204;
    float _1212 = (_1201 + (-0.039999999105930328369140625)) * _1062;
    float _1213 = (_1202 + (-0.039999999105930328369140625)) * _1062;
    float _1214 = (_1203 + (-0.039999999105930328369140625)) * _1062;
    float _1215 = _1212 + 0.039999999105930328369140625;
    float _1217 = _1213 + 0.039999999105930328369140625;
    float _1218 = _1214 + 0.039999999105930328369140625;
    vec4 _1227 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1153, cbSceneParam._m0[86u].y * _1154));
    float _1231 = ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * TEXCOORD_5.w) * _1227.x;
    float _1232 = dot(vec3(_1054, _1055, _1056), vec3(_1133, _1134, _1135));
    float _1235 = _1232 * 2.0;
    float _1239 = (_1235 * _1054) - _1133;
    float _1240 = (_1235 * _1055) - _1134;
    float _1241 = (_1235 * _1056) - _1135;
    float _1245 = abs(dot(vec3(_1133, _1134, _1135), vec3(_1054, _1055, _1056)));
    float _4242 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _1247 = sqrt(_1057);
    float _1260 = exp2((_1247 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1247 * 3.0));
    float _1266 = (1.0 - _1260) * ((_1247 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1267 = _1260 * _1247;
    float _1295 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1299 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1303 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1632;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1357 = fma(_1303, cbModelParam._m0[26u].z, fma(_1299, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1295));
        float _1361 = fma(_1303, cbModelParam._m0[27u].z, fma(_1299, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1295));
        float _1365 = fma(_1303, cbModelParam._m0[28u].z, fma(_1299, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1295));
        float _1390 = _1295 + _1054;
        float _1391 = _1299 + _1055;
        float _1392 = _1303 + _1056;
        float _1402 = fma(_1392, cbModelParam._m0[26u].z, fma(_1391, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1390)) - _1357;
        float _1403 = fma(_1392, cbModelParam._m0[27u].z, fma(_1391, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1390)) - _1361;
        float _1404 = fma(_1392, cbModelParam._m0[28u].z, fma(_1391, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1390)) - _1365;
        float _1408 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
        float _1421 = ((_1408 * _1402) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1357 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1408 * _1403) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1361 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1408 * _1404) / cbModelParam._m0[34u].z) + ((((((_1365 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        float _1460 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1426.x + (-0.5));
        float _1462 = _1460 * (_1426.y + (-0.5));
        float _1463 = _1460 * (_1426.z + (-0.5));
        float _1470 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1433.x + (-0.5));
        float _1472 = _1470 * (_1433.y + (-0.5));
        float _1473 = _1470 * (_1433.z + (-0.5));
        float _1480 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1440.x + (-0.5));
        float _1482 = _1480 * (_1440.y + (-0.5));
        float _1483 = _1480 * (_1440.z + (-0.5));
        float _1490 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1447.x + (-0.5));
        float _1492 = _1490 * (_1447.y + (-0.5));
        float _1493 = _1490 * (_1447.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1514 = (dot(vec3(_1054, _1055, _1056), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1524 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4290 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1526 + 1.0))) + _1531) * _1494;
        float _1541 = _1462 * 0.5;
        float _1542 = _1472 * 0.5;
        float _1543 = _1482 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_1054, _1055, _1056), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4323 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1568 + 1.0))) + _1573) * _1495;
        float _1583 = _1463 * 0.5;
        float _1584 = _1473 * 0.5;
        float _1585 = _1483 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_1054, _1055, _1056), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4356 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1610 + 1.0))) + _1615) * _1496;
        _1632 = _1463;
        _1634 = _1462;
        _1635 = _1461;
        _1636 = _1473;
        _1637 = _1472;
        _1638 = _1471;
        _1639 = _1483;
        _1640 = _1482;
        _1641 = _1481;
        _1642 = _1496;
        _1643 = _1495;
        _1644 = _1494;
        _1645 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1646 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1647 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
    }
    else
    {
        _1632 = _1633;
        _1634 = _1633;
        _1635 = _1633;
        _1636 = _1633;
        _1637 = _1633;
        _1638 = _1633;
        _1639 = _1633;
        _1640 = _1633;
        _1641 = _1633;
        _1642 = _1633;
        _1643 = _1633;
        _1644 = _1633;
        _1645 = 0.0;
        _1646 = 0.0;
        _1647 = 0.0;
    }
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1673 = fma(_1303, cbModelParam._m0[30u].z, fma(_1299, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295));
        float _1677 = fma(_1303, cbModelParam._m0[31u].z, fma(_1299, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295));
        float _1681 = fma(_1303, cbModelParam._m0[32u].z, fma(_1299, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295));
        float _1704 = _1295 + _1054;
        float _1705 = _1299 + _1055;
        float _1706 = _1303 + _1056;
        float _1716 = fma(_1706, cbModelParam._m0[30u].z, fma(_1705, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1704)) - _1673;
        float _1717 = fma(_1706, cbModelParam._m0[31u].z, fma(_1705, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1704)) - _1677;
        float _1718 = fma(_1706, cbModelParam._m0[32u].z, fma(_1705, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1704)) - _1681;
        float _1722 = inversesqrt(dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718)));
        float _1735 = ((_1722 * _1716) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1673 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1736 = ((_1722 * _1717) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1677 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1737 = ((_1722 * _1718) / cbModelParam._m0[35u].z) + ((((((_1681 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1739 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1735, _1736, _1737), 0.0);
        vec4 _1746 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1735, _1736, _1737), 0.0);
        vec4 _1753 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1735, _1736, _1737), 0.0);
        vec4 _1760 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1735, _1736, _1737), 0.0);
        float _1772 = exp2((_1739.w + (-0.5)) * 20.0) * 2.0;
        float _1773 = _1772 * (_1739.x + (-0.5));
        float _1774 = _1772 * (_1739.y + (-0.5));
        float _1775 = _1772 * (_1739.z + (-0.5));
        float _1782 = exp2((_1746.w + (-0.5)) * 20.0) * 2.0;
        float _1783 = _1782 * (_1746.x + (-0.5));
        float _1784 = _1782 * (_1746.y + (-0.5));
        float _1785 = _1782 * (_1746.z + (-0.5));
        float _1792 = exp2((_1753.w + (-0.5)) * 20.0) * 2.0;
        float _1793 = _1792 * (_1753.x + (-0.5));
        float _1794 = _1792 * (_1753.y + (-0.5));
        float _1795 = _1792 * (_1753.z + (-0.5));
        float _1802 = exp2((_1760.w + (-0.5)) * 20.0) * 2.0;
        float _1803 = _1802 * (_1760.x + (-0.5));
        float _1804 = _1802 * (_1760.y + (-0.5));
        float _1805 = _1802 * (_1760.z + (-0.5));
        float _1806 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1807 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1808 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1809 = _1773 * 0.5;
        float _1810 = _1783 * 0.5;
        float _1811 = _1793 * 0.5;
        float _1812 = dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811));
        float _1817 = (_1812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1812);
        float _1825 = (dot(vec3(_1054, _1055, _1056), vec3(_1817 * _1809, _1817 * _1810, _1817 * _1811)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1834 = sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811)) / (_1806 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1836 = _1835 * 2.0;
        float _1840 = (1.0 - _1835) / (_1835 + 1.0);
        float _4419 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1850 = ((((1.0 - _1841) * (_1836 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1836 + 1.0))) + _1841) * _1806;
        float _1851 = _1774 * 0.5;
        float _1852 = _1784 * 0.5;
        float _1853 = _1794 * 0.5;
        float _1854 = dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853));
        float _1859 = (_1854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1854);
        float _1867 = (dot(vec3(_1054, _1055, _1056), vec3(_1859 * _1851, _1859 * _1852, _1859 * _1853)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1876 = sqrt(((_1852 * _1852) + (_1851 * _1851)) + (_1853 * _1853)) / (_1807 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1878 = _1877 * 2.0;
        float _1882 = (1.0 - _1877) / (_1877 + 1.0);
        float _4452 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1892 = ((((1.0 - _1883) * (_1878 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1878 + 1.0))) + _1883) * _1807;
        float _1893 = _1775 * 0.5;
        float _1894 = _1785 * 0.5;
        float _1895 = _1795 * 0.5;
        float _1896 = dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895));
        float _1901 = (_1896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1896);
        float _1909 = (dot(vec3(_1054, _1055, _1056), vec3(_1901 * _1893, _1901 * _1894, _1901 * _1895)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1918 = sqrt(((_1894 * _1894) + (_1893 * _1893)) + (_1895 * _1895)) / (_1808 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1920 = _1919 * 2.0;
        float _1924 = (1.0 - _1919) / (_1919 + 1.0);
        float _4485 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1934 = ((((1.0 - _1925) * (_1920 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1920 + 1.0))) + _1925) * _1808;
        _1942 = _1775;
        _1943 = _1774;
        _1944 = _1773;
        _1945 = _1785;
        _1946 = _1784;
        _1947 = _1783;
        _1948 = _1795;
        _1949 = _1794;
        _1950 = _1793;
        _1951 = _1808;
        _1952 = _1807;
        _1953 = _1806;
        _1954 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)));
        _1955 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)));
        _1956 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)));
    }
    else
    {
        _1942 = _1633;
        _1943 = _1633;
        _1944 = _1633;
        _1945 = _1633;
        _1946 = _1633;
        _1947 = _1633;
        _1948 = _1633;
        _1949 = _1633;
        _1950 = _1633;
        _1951 = _1633;
        _1952 = _1633;
        _1953 = _1633;
        _1954 = 0.0;
        _1955 = 0.0;
        _1956 = 0.0;
    }
    float _1966 = (cbModelParam._m0[1u].x * (_1954 - _1645)) + _1645;
    float _1967 = (cbModelParam._m0[1u].x * (_1955 - _1646)) + _1646;
    float _1968 = (cbModelParam._m0[1u].x * (_1956 - _1647)) + _1647;
    float _1989 = fma(_1968, cbSceneParam._m0[89u].z, fma(_1967, cbSceneParam._m0[89u].y, _1966 * cbSceneParam._m0[89u].x));
    float _1992 = fma(_1968, cbSceneParam._m0[90u].z, fma(_1967, cbSceneParam._m0[90u].y, _1966 * cbSceneParam._m0[90u].x));
    float _1995 = fma(_1968, cbSceneParam._m0[91u].z, fma(_1967, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1966));
    float _2010 = _1239 * 0.5;
    float _2011 = _1240 * 0.5;
    float _2012 = _1241 * 0.5;
    float _2013 = dot(vec4(_2010, _2011, _2012, 1.0), vec4(_1944, _1947, _1950, _1953));
    float _2016 = dot(vec4(_2010, _2011, _2012, 1.0), vec4(_1943, _1946, _1949, _1952));
    float _2019 = dot(vec4(_2010, _2011, _2012, 1.0), vec4(_1942, _1945, _1948, _1951));
    float _2053;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2026 = dot(vec4(_2010, _2011, _2012, 1.0), vec4(_1632, _1636, _1639, _1642));
        float _2030 = dot(vec4(_2010, _2011, _2012, 1.0), vec4(_1634, _1637, _1640, _1643));
        float _2034 = dot(vec4(_2010, _2011, _2012, 1.0), vec4(_1635, _1638, _1641, _1644));
        float _2041 = dot(vec4(cbModelParam._m0[39u]), vec4(_2010, _2011, _2012, 1.0));
        _2053 = dot(vec3(isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0)), isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)), isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2041) ? 0.0 : (isnan(0.0) ? _2041 : max(0.0, _2041))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2053 = 1.0;
    }
    float _2064;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2055 = dot(vec4(cbModelParam._m0[40u]), vec4(_2010, _2011, _2012, 1.0));
        _2064 = dot(vec3(isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0)), isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0)), isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2055) ? 0.0 : (isnan(0.0) ? _2055 : max(0.0, _2055))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2064 = 1.0;
    }
    float _2068 = (_2064 * cbModelParam._m0[1u].x) + (_2053 * (1.0 - cbModelParam._m0[1u].x));
    float _2078 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1057);
    float _2079 = isnan(_2078) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2078 : min(cbModelParam._m0[25u].z, _2078));
    float _2159;
    float _2161;
    float _2163;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2126 = fma(_1303, cbModelParam._m0[13u].z, fma(_1299, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1295)) + cbModelParam._m0[13u].w;
        float _2130 = fma(_1303, cbModelParam._m0[14u].z, fma(_1299, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1295)) + cbModelParam._m0[14u].w;
        float _2134 = fma(_1303, cbModelParam._m0[15u].z, fma(_1299, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1295)) + cbModelParam._m0[15u].w;
        float _2137 = fma(_1241, cbModelParam._m0[13u].z, fma(_1240, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1239));
        float _2140 = fma(_1241, cbModelParam._m0[14u].z, fma(_1240, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1239));
        float _2143 = fma(_1241, cbModelParam._m0[15u].z, fma(_1240, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1239));
        float _2171;
        if (_2137 > 0.0)
        {
            _2171 = abs((1.0 - _2126) / _2137);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2126 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2171 = frontier_phi_17_15_ladder;
        }
        float _2374;
        if (_2140 > 0.0)
        {
            _2374 = abs((1.0 - _2130) / _2140);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2130 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2374 = frontier_phi_26_22_ladder;
        }
        float _2628;
        if (_2143 > 0.0)
        {
            _2628 = abs((1.0 - _2134) / _2143);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2143 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2134 + 1.0) / _2143);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2628 = frontier_phi_38_33_ladder;
        }
        float _2630 = isnan(_2374) ? _2171 : (isnan(_2171) ? _2374 : min(_2171, _2374));
        float _2631 = isnan(_2628) ? _2630 : (isnan(_2630) ? _2628 : min(_2630, _2628));
        float _2635 = (_2631 * _2137) + _2126;
        float _2636 = (_2631 * _2140) + _2130;
        float _2637 = (_2631 * _2143) + _2134;
        float _2638 = _2631 * 9.9999997473787516355514526367188e-05;
        float _2640 = (-1.0) - _2638;
        float _2642 = _2638 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2637 > _2642) || ((_2637 < _2640) || ((_2636 > _2642) || ((_2636 < _2640) || ((_2635 < _2640) || (_2635 > _2642))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2637, cbModelParam._m0[9u].z, fma(_2636, cbModelParam._m0[9u].y, _2635 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2637, cbModelParam._m0[10u].z, fma(_2636, cbModelParam._m0[10u].y, _2635 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2637, cbModelParam._m0[11u].z, fma(_2636, cbModelParam._m0[11u].y, _2635 * cbModelParam._m0[11u].x))), _2079);
            frontier_phi_16_38_ladder = _2765.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2765.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2765.x * cbModelParam._m0[1u].y;
        }
        _2159 = frontier_phi_16_38_ladder_2;
        _2161 = frontier_phi_16_38_ladder_1;
        _2163 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2147 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1239, _1240, _1241), _2079);
        _2159 = _2147.x * cbModelParam._m0[1u].y;
        _2161 = _2147.y * cbModelParam._m0[1u].y;
        _2163 = _2147.z * cbModelParam._m0[1u].y;
    }
    float _2167 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1057);
    float _2168 = isnan(_2167) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2167 : min(cbModelParam._m0[25u].w, _2167));
    float _2258;
    float _2260;
    float _2262;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2222 = fma(_1303, cbModelParam._m0[21u].z, fma(_1299, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1295)) + cbModelParam._m0[21u].w;
        float _2226 = fma(_1303, cbModelParam._m0[22u].z, fma(_1299, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1295)) + cbModelParam._m0[22u].w;
        float _2230 = fma(_1303, cbModelParam._m0[23u].z, fma(_1299, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1295)) + cbModelParam._m0[23u].w;
        float _2233 = fma(_1241, cbModelParam._m0[21u].z, fma(_1240, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1239));
        float _2236 = fma(_1241, cbModelParam._m0[22u].z, fma(_1240, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1239));
        float _2239 = fma(_1241, cbModelParam._m0[23u].z, fma(_1240, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1239));
        float _2379;
        if (_2233 > 0.0)
        {
            _2379 = abs((1.0 - _2222) / _2233);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2233 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2222 + 1.0) / _2233);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2379 = frontier_phi_28_24_ladder;
        }
        float _2655;
        if (_2236 > 0.0)
        {
            _2655 = abs((1.0 - _2226) / _2236);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2236 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2226 + 1.0) / _2236);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2655 = frontier_phi_40_35_ladder;
        }
        float _2868;
        if (_2239 > 0.0)
        {
            _2868 = abs((1.0 - _2230) / _2239);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2239 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2230 + 1.0) / _2239);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2868 = frontier_phi_49_46_ladder;
        }
        float _2870 = isnan(_2655) ? _2379 : (isnan(_2379) ? _2655 : min(_2379, _2655));
        float _2871 = isnan(_2868) ? _2870 : (isnan(_2870) ? _2868 : min(_2870, _2868));
        float _2875 = (_2871 * _2233) + _2222;
        float _2876 = (_2871 * _2236) + _2226;
        float _2877 = (_2871 * _2239) + _2230;
        float _2878 = _2871 * 9.9999997473787516355514526367188e-05;
        float _2879 = (-1.0) - _2878;
        float _2881 = _2878 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2877 > _2881) || ((_2877 < _2879) || ((_2876 > _2881) || ((_2876 < _2879) || ((_2875 < _2879) || (_2875 > _2881))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3076 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2877, cbModelParam._m0[17u].z, fma(_2876, cbModelParam._m0[17u].y, _2875 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2877, cbModelParam._m0[18u].z, fma(_2876, cbModelParam._m0[18u].y, _2875 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2877, cbModelParam._m0[19u].z, fma(_2876, cbModelParam._m0[19u].y, _2875 * cbModelParam._m0[19u].x))), _2168);
            frontier_phi_25_49_ladder = _3076.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3076.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3076.x * cbModelParam._m0[1u].z;
        }
        _2258 = frontier_phi_25_49_ladder_2;
        _2260 = frontier_phi_25_49_ladder_1;
        _2262 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2242 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1239, _1240, _1241), _2168);
        _2258 = _2242.x * cbModelParam._m0[1u].z;
        _2260 = _2242.y * cbModelParam._m0[1u].z;
        _2262 = _2242.z * cbModelParam._m0[1u].z;
    }
    float _2275 = (((_1266 * _1215) + _1267) * _1231) * ((cbModelParam._m0[1u].w * (_2258 - _2159)) + _2159);
    float _2277 = (((_1266 * _1217) + _1267) * _1231) * ((cbModelParam._m0[1u].w * (_2260 - _2161)) + _2161);
    float _2279 = (((_1266 * _1218) + _1267) * _1231) * ((cbModelParam._m0[1u].w * (_2262 - _2163)) + _2163);
    float _2282 = fma(_2279, cbSceneParam._m0[89u].z, fma(_2277, cbSceneParam._m0[89u].y, _2275 * cbSceneParam._m0[89u].x));
    float _2285 = fma(_2279, cbSceneParam._m0[90u].z, fma(_2277, cbSceneParam._m0[90u].y, _2275 * cbSceneParam._m0[90u].x));
    float _2288 = fma(_2279, cbSceneParam._m0[91u].z, fma(_2277, cbSceneParam._m0[91u].y, _2275 * cbSceneParam._m0[91u].x));
    uvec4 _2298 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2300 = _2298.x * 14u;
    uint _2301 = _2300 + 13u;
    float _2308 = _1231 + (-1.0);
    float _2313 = (cbLight._m0[_2301].x * _2308) + 1.0;
    float _2314 = (cbLight._m0[_2301].y * _2308) + 1.0;
    float _2315 = (cbLight._m0[_2301].z * _2308) + 1.0;
    float _2316 = (cbLight._m0[_2301].w * _2308) + 1.0;
    uint _2317 = _2300 + 5u;
    float _2323 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
    uint _2327 = _2300 + 4u;
    float _2333 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
    uint _2337 = _2300 | 1u;
    float _2348 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_1054, _1055, _1056));
    float _2351 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_1054, _1055, _1056));
    float _4621 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _4632 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2356 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * 0.3183098733425140380859375;
    float _2358 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * 0.3183098733425140380859375;
    float _2365 = ((cbLight._m0[_2317].x * _2323) * _2358) + ((cbLight._m0[_2327].x * _2333) * _2356);
    float _2366 = ((_2323 * cbLight._m0[_2317].y) * _2358) + ((_2333 * cbLight._m0[_2327].y) * _2356);
    float _2367 = ((_2323 * cbLight._m0[_2317].z) * _2358) + ((_2333 * cbLight._m0[_2327].z) * _2356);
    uvec4 _2371 = floatBitsToUint(cbLight._m0[_2300 + 12u]);
    bool _2373 = _2371.x == 0u;
    float _2384;
    float _2386;
    float _2388;
    if (_2373)
    {
        _2384 = _2365;
        _2386 = _2366;
        _2388 = _2367;
    }
    else
    {
        uint _2392 = _2300 + 6u;
        float _2408 = (dot(vec3(cbLight._m0[_2300 + 2u].xyz), vec3(_1054, _1055, _1056)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4643 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2411 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2384 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2365;
        _2386 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2366;
        _2388 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2367;
    }
    bool _2391 = _2371.y == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2391)
    {
        _2429 = _2384;
        _2431 = _2386;
        _2433 = _2388;
    }
    else
    {
        uint _2599 = _2300 + 7u;
        float _2615 = (dot(vec3(cbLight._m0[_2300 + 3u].xyz), vec3(_1054, _1055, _1056)) * 0.5) + 0.5;
        float _2616 = _2615 * _2615;
        float _4659 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2617 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2618 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2429 = (((cbLight._m0[_2599].x * 0.3183098733425140380859375) * _2617) * _2618) + _2384;
        _2431 = (((cbLight._m0[_2599].y * 0.3183098733425140380859375) * _2617) * _2618) + _2386;
        _2433 = (((cbLight._m0[_2599].z * 0.3183098733425140380859375) * _2617) * _2618) + _2388;
    }
    uint _2436 = _2300 + 8u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _1057) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2300].x + _1133;
    float _2452 = cbLight._m0[_2300].y + _1134;
    float _2453 = cbLight._m0[_2300].z + _1135;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2300].xyz));
    float _4675 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _4686 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
    float _2465 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _2466 = dot(vec3(_1054, _1055, _1056), vec3(_2458, _2459, _2460));
    float _4697 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2458, _2459, _2460));
    float _4708 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2450 * _2450;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0);
    float _2487 = 0.959999978542327880859375 - _1212;
    float _2489 = 0.959999978542327880859375 - _1213;
    float _2490 = 0.959999978542327880859375 - _1214;
    float _2497 = 1.0 - _2450;
    float _2508 = (0.5 / (((_2465 * ((_2464 * _2497) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2497) + _2450) * _2464))) * _2464;
    float _4719 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    uint _2521 = _2300 + 9u;
    float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _1057) * 0.949999988079071044921875);
    float _2533 = _2532 * _2532;
    float _2534 = cbLight._m0[_2337].x + _1133;
    float _2535 = cbLight._m0[_2337].y + _1134;
    float _2536 = cbLight._m0[_2337].z + _1135;
    float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
    float _2541 = _2540 * _2534;
    float _2542 = _2540 * _2535;
    float _2543 = _2540 * _2536;
    float _2544 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2337].xyz));
    float _4730 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2548 = dot(vec3(_1054, _1055, _1056), vec3(_2541, _2542, _2543));
    float _4741 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2552 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2541, _2542, _2543));
    float _4752 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2556 = _2533 * _2533;
    float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
    float _2567 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
    float _2574 = 1.0 - _2533;
    float _2584 = (0.5 / (((_2465 * ((_2547 * _2574) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2574) + _2533) * _2547))) * _2547;
    float _4763 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2586 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
    float _2596 = (((((_2567 * _2487) + _1215) * cbLight._m0[_2521].x) * _2586) * _2323) + (((((_2486 * _2487) + _1215) * cbLight._m0[_2436].x) * _2510) * _2333);
    float _2597 = (((((_2567 * _2489) + _1217) * cbLight._m0[_2521].y) * _2586) * _2323) + (((((_2486 * _2489) + _1217) * cbLight._m0[_2436].y) * _2510) * _2333);
    float _2598 = (((((_2567 * _2490) + _1218) * cbLight._m0[_2521].z) * _2586) * _2323) + (((((_2486 * _2490) + _1218) * cbLight._m0[_2436].z) * _2510) * _2333);
    float _2660;
    float _2662;
    float _2664;
    if (_2373)
    {
        _2660 = _2596;
        _2662 = _2597;
        _2664 = _2598;
    }
    else
    {
        uint _2666 = _2300 + 2u;
        uint _2670 = _2300 + 10u;
        float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2666].w)) * _1057) * 0.949999988079071044921875);
        float _2685 = _2684 * _2684;
        float _2686 = cbLight._m0[_2666].x + _1133;
        float _2687 = cbLight._m0[_2666].y + _1134;
        float _2688 = cbLight._m0[_2666].z + _1135;
        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
        float _2693 = _2692 * _2686;
        float _2694 = _2692 * _2687;
        float _2695 = _2692 * _2688;
        float _2696 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2666].xyz));
        float _4774 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2700 = dot(vec3(_1054, _1055, _1056), vec3(_2693, _2694, _2695));
        float _4785 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2704 = dot(vec3(cbLight._m0[_2666].xyz), vec3(_2693, _2694, _2695));
        float _4796 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2708 = _2685 * _2685;
        float _2712 = ((_2703 * _2703) * (_2708 + (-1.0))) + 1.0;
        float _2719 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
        float _2726 = 1.0 - _2685;
        float _2736 = (0.5 / (((_2465 * ((_2699 * _2726) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2726) + _2685) * _2699))) * _2699;
        float _4807 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2738 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2708 / ((_2712 * _2712) * 3.141590118408203125));
        float _2739 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2660 = (((((_2719 * _2487) + _1215) * cbLight._m0[_2670].x) * _2738) * _2739) + _2596;
        _2662 = (((((_2719 * _2489) + _1217) * cbLight._m0[_2670].y) * _2738) * _2739) + _2597;
        _2664 = (((((_2719 * _2490) + _1218) * cbLight._m0[_2670].z) * _2738) * _2739) + _2598;
    }
    float _2774;
    float _2776;
    float _2778;
    if (_2391)
    {
        _2774 = _2660;
        _2776 = _2662;
        _2778 = _2664;
    }
    else
    {
        uint _2785 = _2300 + 3u;
        uint _2789 = _2300 + 11u;
        float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2785].w)) * _1057) * 0.949999988079071044921875);
        float _2804 = _2803 * _2803;
        float _2805 = cbLight._m0[_2785].x + _1133;
        float _2806 = cbLight._m0[_2785].y + _1134;
        float _2807 = cbLight._m0[_2785].z + _1135;
        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
        float _2812 = _2811 * _2805;
        float _2813 = _2811 * _2806;
        float _2814 = _2811 * _2807;
        float _2815 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2785].xyz));
        float _4823 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2819 = dot(vec3(_1054, _1055, _1056), vec3(_2812, _2813, _2814));
        float _4834 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2823 = dot(vec3(cbLight._m0[_2785].xyz), vec3(_2812, _2813, _2814));
        float _4845 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2827 = _2804 * _2804;
        float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
        float _2838 = exp2(log2(1.0 - (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) * 5.0);
        float _2845 = 1.0 - _2804;
        float _2855 = (0.5 / (((_2465 * ((_2818 * _2845) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2845) + _2804) * _2818))) * _2818;
        float _4856 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2857 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
        float _2858 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2774 = (((((_2838 * _2487) + _1215) * cbLight._m0[_2789].x) * _2857) * _2858) + _2660;
        _2776 = (((((_2838 * _2489) + _1217) * cbLight._m0[_2789].y) * _2857) * _2858) + _2662;
        _2778 = (((((_2838 * _2490) + _1218) * cbLight._m0[_2789].z) * _2857) * _2858) + _2664;
    }
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    if (_2298.y == 0u)
    {
        float _2933 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2934 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2933;
        float _2935 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2933;
        float _2936 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2933;
        uvec4 _2948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2949 = _2948.x;
        uint _2960 = uint((float(_2948.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1154) / _2949))) + floor(float(uint(cbSceneParam._m0[85u].x * _1153) / _2949)));
        float _2970 = (log2(_2936 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2971 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        uint _2974 = uint(isnan(14.0) ? _2971 : (isnan(_2971) ? 14.0 : min(_2971, 14.0)));
        uvec4 _2979 = texelFetch(g_lightClusterGridBuffer, int(((_2974 << 2u) + (_2960 << 6u)) >> 2u));
        uint _2980 = _2979.x;
        uint _2981 = _2948.z;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        if (((((1u << ((_2981 >> 4u) & 15u)) + 4294967295u) & _2980) == 0u) || ((_2981 & 240u) == 0u))
        {
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
        }
        else
        {
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            uint _3240 = 0u;
            uint _3249;
            bool _3250;
            for (;;)
            {
                _3249 = texelFetch(g_lightClassification, int((((_2974 << 5u) + (_2960 << 9u)) + (_3240 << 2u)) >> 2u)).x;
                _3250 = _3249 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3250)
                {
                    frontier_phi_66_pred = _3234;
                    frontier_phi_66_pred_1 = _3239;
                    frontier_phi_66_pred_2 = _3238;
                    frontier_phi_66_pred_3 = _3237;
                    frontier_phi_66_pred_4 = _3236;
                    frontier_phi_66_pred_5 = _3235;
                }
                else
                {
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    uint _3385;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3249;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    for (;;)
                    {
                        uint _3389 = uint(findLSB(_3385)) + (_3240 << 5u);
                        uint _3386 = (_3385 + 4294967295u) & _3385;
                        uint _3391 = _3389 * 48u;
                        vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3391)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 3u)).x));
                        uint _3411 = (_3389 * 48u) + 4u;
                        vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3411)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 3u)).x));
                        uint _3430 = (_3389 * 48u) + 8u;
                        vec3 _3441 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3430)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 2u)).x));
                        float _3445 = _3405.x - _2934;
                        float _3446 = _3405.y - _2935;
                        float _3447 = _3405.z - _2936;
                        float _3448 = dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447));
                        float _3451 = inversesqrt(_3448);
                        float _3452 = _3451 * _3445;
                        float _3453 = _3451 * _3446;
                        float _3454 = _3451 * _3447;
                        float _3455 = dot(vec3(_1172, _1175, _1178), vec3(_3452, _3453, _3454));
                        float _3460 = 1.0 - (_3448 * _3405.w);
                        float _4882 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3461 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                        float _3462 = sqrt(_3448) * _3424.w;
                        float _3465 = 1.39999997615814208984375 / (_3462 + 1.39999997615814208984375);
                        float _3466 = _3465 * _3465;
                        float _3469 = ((1.0 - _3466) * _3455) + _3466;
                        float _3472 = _3462 * _3462;
                        float _3476 = ((isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0))) * _3461) / ((_3472 * 0.699999988079071044921875) + 1.0);
                        float _3480 = (-0.0) - _2934;
                        float _3481 = (-0.0) - _2935;
                        float _3482 = (-0.0) - _2936;
                        float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                        float _3487 = _3486 * _3480;
                        float _3488 = _3486 * _3481;
                        float _3489 = _3486 * _3482;
                        float _3497 = exp2(log2(1.0 / ((_3472 * 3.5) + 5.0)) * 0.25);
                        float _3498 = 1.0 - _1247;
                        float _3505 = sqrt(1.0 - ((1.0 - (_3498 * _3498)) * (1.0 - (_3497 * _3497))));
                        float _3506 = _3505 * _3505;
                        float _3507 = _3506 * _3506;
                        float _3508 = _3487 + _3452;
                        float _3509 = _3488 + _3453;
                        float _3510 = _3489 + _3454;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3518 = dot(vec3(_1172, _1175, _1178), vec3(_3487, _3488, _3489));
                        float _4898 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3522 = dot(vec3(_1172, _1175, _1178), vec3(_3514 * _3508, _3514 * _3509, _3514 * _3510));
                        float _4909 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3525 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3529 = ((_3525 * _3525) * (_3507 + (-1.0))) + 1.0;
                        float _3530 = _3465 * _3506;
                        float _3531 = _3530 * _3530;
                        float _3534 = ((1.0 - _3531) * _3455) + _3531;
                        float _4920 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3535 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3536 = 1.0 - _3506;
                        float _3546 = (0.5 / (((_3535 * ((_3521 * _3536) + _3506)) + 9.9999999392252902907785028219223e-09) + (((_3535 * _3536) + _3506) * _3521))) * _3535;
                        float _4931 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3557 = (((_3507 * 3.1415927410125732421875) * (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) / ((_3529 * _3529) * ((_3472 * 2.1991131305694580078125) + 3.141590118408203125))) * _3461;
                        _3309 = (_3476 * _3424.x) + _3382;
                        _3310 = (_3476 * _3424.y) + _3383;
                        _3311 = (_3476 * _3424.z) + _3384;
                        _3306 = (_3557 * _3441.x) + _3379;
                        _3307 = (_3557 * _3441.y) + _3380;
                        _3308 = (_3557 * _3441.z) + _3381;
                        if (_3386 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3386;
                        }
                    }
                    frontier_phi_66_pred = _3306;
                    frontier_phi_66_pred_1 = _3311;
                    frontier_phi_66_pred_2 = _3310;
                    frontier_phi_66_pred_3 = _3309;
                    frontier_phi_66_pred_4 = _3308;
                    frontier_phi_66_pred_5 = _3307;
                }
                _3082 = frontier_phi_66_pred;
                _3092 = frontier_phi_66_pred_1;
                _3090 = frontier_phi_66_pred_2;
                _3088 = frontier_phi_66_pred_3;
                _3086 = frontier_phi_66_pred_4;
                _3084 = frontier_phi_66_pred_5;
                uint _3241 = _3240 + 1u;
                if (_3241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3234 = _3082;
                    _3235 = _3084;
                    _3236 = _3086;
                    _3237 = _3088;
                    _3238 = _3090;
                    _3239 = _3092;
                    _3240 = _3241;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
        }
        uvec4 _3095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3096 = _3095.z;
        uint _3098 = (_3096 >> 8u) & 15u;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        if (((4294967295u << _3098) & _2980) == 0u)
        {
            _3202 = _3081;
            _3204 = _3083;
            _3206 = _3085;
            _3208 = _3087;
            _3210 = _3089;
            _3212 = _3091;
        }
        else
        {
            float _3227 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
            float _3228 = _3227 * _2934;
            float _3229 = _3227 * _2935;
            float _3230 = _3227 * _2936;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3098 < ((_3096 >> 12u) & 15u))
            {
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3362 = _3081;
                float _3363 = _3083;
                float _3364 = _3085;
                float _3365 = _3087;
                float _3366 = _3089;
                float _3367 = _3091;
                uint _3368 = _3098;
                uint _3377;
                bool _3378;
                for (;;)
                {
                    _3377 = texelFetch(g_lightClassification, int((((_2974 << 5u) + (_2960 << 9u)) + (_3368 << 2u)) >> 2u)).x;
                    _3378 = _3377 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3378)
                    {
                        frontier_phi_77_pred = _3367;
                        frontier_phi_77_pred_1 = _3366;
                        frontier_phi_77_pred_2 = _3365;
                        frontier_phi_77_pred_3 = _3364;
                        frontier_phi_77_pred_4 = _3363;
                        frontier_phi_77_pred_5 = _3362;
                    }
                    else
                    {
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3584 = _3362;
                        float _3585 = _3363;
                        float _3586 = _3364;
                        float _3587 = _3365;
                        float _3588 = _3366;
                        float _3589 = _3367;
                        uint _3590 = _3377;
                        uint _3591;
                        vec4 _3616;
                        float _3617;
                        vec4 _3632;
                        vec3 _3644;
                        vec4 _3659;
                        vec4 _3674;
                        float _3720;
                        bool _3721;
                        for (;;)
                        {
                            uint _3601 = ((_3368 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3590));
                            _3591 = (_3590 + 4294967295u) & _3590;
                            uint _3603 = _3601 * 40u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3617 = _3616.w;
                            uint _3619 = (_3601 * 40u) + 4u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3601 * 40u) + 8u;
                            _3644 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x));
                            uint _3646 = (_3601 * 40u) + 16u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3601 * 40u) + 20u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3601 * 40u) + 24u;
                            vec4 _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3695 = (_3601 * 40u) + 28u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            _3720 = fma(_2936, _3708.z, fma(_2935, _3708.y, _3708.x * _2934)) + _3708.w;
                            _3721 = !((fma(_2936, _3689.z, fma(_2935, _3689.y, _3689.x * _2934)) + _3689.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3721)
                            {
                                float _3748 = _3616.x - _2934;
                                float _3749 = _3616.y - _2935;
                                float _3750 = _3616.z - _2936;
                                float _3751 = dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750));
                                float _3754 = inversesqrt(_3751);
                                float _3755 = _3754 * _3748;
                                float _3756 = _3754 * _3749;
                                float _3757 = _3754 * _3750;
                                float _3761 = 1.0 - (_3751 / (_3617 * _3617));
                                float _4942 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3766 = sqrt(_3751) * _3632.w;
                                float _3768 = 1.39999997615814208984375 / (_3766 + 1.39999997615814208984375);
                                float _3769 = _3768 * _3768;
                                float _3772 = ((1.0 - _3769) * dot(vec3(_3755, _3756, _3757), vec3(_1172, _1175, _1178))) + _3769;
                                float _3775 = _3766 * _3766;
                                float _3779 = (fma(_2936, _3659.z, fma(_2935, _3659.y, _3659.x * _2934)) + _3659.w) / _3720;
                                float _3780 = (fma(_2936, _3674.z, fma(_2935, _3674.y, _3674.x * _2934)) + _3674.w) / _3720;
                                float _3784 = 1.0 - dot(vec2(_3779, _3780), vec2(_3779, _3780));
                                float _4958 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3786 = _3785 * (((isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0))) * _3762) / ((_3775 * 0.699999988079071044921875) + 1.0));
                                float _3798 = exp2(log2(1.0 / ((_3775 * 3.5) + 5.0)) * 0.25);
                                float _3799 = 1.0 - _1247;
                                float _3806 = sqrt(1.0 - ((1.0 - (_3799 * _3799)) * (1.0 - (_3798 * _3798))));
                                float _3807 = _3806 * _3806;
                                float _3808 = _3807 * _3807;
                                float _3809 = _3755 - _3228;
                                float _3810 = _3756 - _3229;
                                float _3811 = _3757 - _3230;
                                float _3815 = inversesqrt(dot(vec3(_3809, _3810, _3811), vec3(_3809, _3810, _3811)));
                                float _3819 = dot(vec3(_1172, _1175, _1178), vec3((-0.0) - _3228, (-0.0) - _3229, (-0.0) - _3230));
                                float _4969 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3823 = dot(vec3(_1172, _1175, _1178), vec3(_3815 * _3809, _3815 * _3810, _3815 * _3811));
                                float _4980 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3826 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3830 = ((_3826 * _3826) * (_3808 + (-1.0))) + 1.0;
                                float _3831 = _3768 * _3807;
                                float _3832 = _3831 * _3831;
                                float _3838 = ((1.0 - _3832) * dot(vec3(_1172, _1175, _1178), vec3(_3755, _3756, _3757))) + _3832;
                                float _4991 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3840 = 1.0 - _3807;
                                float _3850 = (0.5 / (((_3839 * ((_3822 * _3840) + _3807)) + 9.9999999392252902907785028219223e-09) + (((_3839 * _3840) + _3807) * _3822))) * _3839;
                                float _5002 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3860 = (_3785 * _3762) * (((_3808 * 3.1415927410125732421875) * (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0)))) / ((_3830 * _3830) * ((_3775 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3786 * _3632.y;
                                frontier_phi_83_pred_1 = _3786 * _3632.x;
                                frontier_phi_83_pred_2 = _3860 * _3644.z;
                                frontier_phi_83_pred_3 = _3860 * _3644.y;
                                frontier_phi_83_pred_4 = _3860 * _3644.x;
                                frontier_phi_83_pred_5 = _3786 * _3632.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3868 = frontier_phi_83_pred;
                            _3867 = frontier_phi_83_pred_1;
                            _3866 = frontier_phi_83_pred_2;
                            _3865 = frontier_phi_83_pred_3;
                            _3864 = frontier_phi_83_pred_4;
                            _3869 = frontier_phi_83_pred_5;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            if (_3591 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3591;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3576;
                        frontier_phi_77_pred_1 = _3575;
                        frontier_phi_77_pred_2 = _3574;
                        frontier_phi_77_pred_3 = _3573;
                        frontier_phi_77_pred_4 = _3572;
                        frontier_phi_77_pred_5 = _3571;
                    }
                    _3213 = frontier_phi_77_pred;
                    _3211 = frontier_phi_77_pred_1;
                    _3209 = frontier_phi_77_pred_2;
                    _3207 = frontier_phi_77_pred_3;
                    _3205 = frontier_phi_77_pred_4;
                    _3203 = frontier_phi_77_pred_5;
                    uint _3369 = _3368 + 1u;
                    if (_3369 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3362 = _3203;
                        _3363 = _3205;
                        _3364 = _3207;
                        _3365 = _3209;
                        _3366 = _3211;
                        _3367 = _3213;
                        _3368 = _3369;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3207;
                frontier_phi_58_59_ladder_1 = _3213;
                frontier_phi_58_59_ladder_2 = _3211;
                frontier_phi_58_59_ladder_3 = _3209;
                frontier_phi_58_59_ladder_4 = _3205;
                frontier_phi_58_59_ladder_5 = _3203;
            }
            else
            {
                frontier_phi_58_59_ladder = _3085;
                frontier_phi_58_59_ladder_1 = _3091;
                frontier_phi_58_59_ladder_2 = _3089;
                frontier_phi_58_59_ladder_3 = _3087;
                frontier_phi_58_59_ladder_4 = _3083;
                frontier_phi_58_59_ladder_5 = _3081;
            }
            _3202 = frontier_phi_58_59_ladder_5;
            _3204 = frontier_phi_58_59_ladder_4;
            _3206 = frontier_phi_58_59_ladder;
            _3208 = frontier_phi_58_59_ladder_3;
            _3210 = frontier_phi_58_59_ladder_2;
            _3212 = frontier_phi_58_59_ladder_1;
        }
        float _3217 = isnan(1.0) ? _1231 : (isnan(_1231) ? 1.0 : min(_1231, 1.0));
        _2993 = (_3217 * _3208) + _2429;
        _2995 = (_3217 * _3210) + _2431;
        _2997 = (_3217 * _3212) + _2433;
        _2999 = ((_3202 * _1215) * _3217) + _2774;
        _3001 = ((_3204 * _1217) * _3217) + _2776;
        _3003 = ((_3206 * _1218) * _3217) + _2778;
    }
    else
    {
        _2993 = _2429;
        _2995 = _2431;
        _2997 = _2433;
        _2999 = _2774;
        _3001 = _2776;
        _3003 = _2778;
    }
    float _5018 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _5029 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _5040 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _3020 = ((isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_2993 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1231))) + ((_2999 + ((isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0))) * _2068)) * cbPerFrame._m0[3u].x);
    float _3021 = ((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2995 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1231))) + ((_3001 + ((isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0))) * _2068)) * cbPerFrame._m0[3u].x);
    float _3022 = ((isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_2997 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1231))) + ((_3003 + ((isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0))) * _2068)) * cbPerFrame._m0[3u].x);
    uint _3023 = _273 + 6u;
    float _3031 = _1153 / cbSceneParam._m0[86u].x;
    float _3032 = _1154 / cbSceneParam._m0[86u].y;
    vec4 _3046 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, (log2((isnan(cbSceneParam._m0[77u].w) ? _1076 : (isnan(_1076) ? cbSceneParam._m0[77u].w : min(_1076, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3048 = _3046.x;
    float _3049 = _3046.y;
    float _3050 = _3046.z;
    float _3051 = _3046.w;
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    if (_1076 > cbSceneParam._m0[78u].w)
    {
        float _3106 = isnan(_1076) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1076 : min(cbSceneParam._m0[80u].w, _1076));
        float _3107 = _3106 / _1076;
        float _3118 = _3107 * _1126;
        float _3119 = _1127 * _3107;
        float _3120 = (-0.0) - _3119;
        float _3122 = _3107 * _1128;
        float _3124 = (cbSceneParam._m0[77u].w * _3120) / _3106;
        float _3125 = _3124 + cbSceneParam._m0[79u].w;
        float _3126 = cbSceneParam._m0[79u].w - _3119;
        float _3132 = sqrt(((_3118 * _3118) + (_3119 * _3119)) + (_3122 * _3122));
        float _3135 = (1.0 - (cbSceneParam._m0[77u].w / _3106)) * _3132;
        float _3140 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3142 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3319;
        if (abs((_3120 - _3124) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3319 = ((((_3125 > 0.0) ? exp2(_3140 * _3125) : (2.0 - exp2(_3142 * _3125))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3135;
        }
        else
        {
            float _3263 = 1.0 / cbSceneParam._m0[80u].x;
            float _3264 = isnan(_3126) ? _3125 : (isnan(_3125) ? _3126 : max(_3125, _3126));
            float _3265 = isnan(_3126) ? _3125 : (isnan(_3125) ? _3126 : min(_3125, _3126));
            float _3274 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : min(_3264, 0.0));
            float _3275 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : min(_3265, 0.0));
            _3319 = ((abs(_3132 / _3120) * cbSceneParam._m0[80u].y) * ((((_3274 - _3275) * 2.0) - ((exp2(_3140 * (isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0)))) - exp2(_3140 * (isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))))) * _3263)) - ((exp2(_3142 * _3274) - exp2(_3142 * _3275)) * _3263))) + (_3135 * cbSceneParam._m0[80u].z);
        }
        vec4 _3321 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, 1.0), 0.0);
        float _3330 = exp2((_3319 * (-1.44269502162933349609375)) * (1.0 - _3321.w));
        float _3331 = log2(_3330);
        float _3347 = log2(_3051);
        _3144 = (exp2(_3347 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3331 * cbSceneParam._m0[78u].x)) * _3321.x) / cbSceneParam._m0[78u].x)) + _3048;
        _3146 = (exp2(_3347 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3331 * cbSceneParam._m0[78u].y)) * _3321.y) / cbSceneParam._m0[78u].y)) + _3049;
        _3148 = (exp2(_3347 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3331 * cbSceneParam._m0[78u].z)) * _3321.z) / cbSceneParam._m0[78u].z)) + _3050;
        _3150 = _3330 * _3051;
    }
    else
    {
        _3144 = _3048;
        _3146 = _3049;
        _3148 = _3050;
        _3150 = _3051;
    }
    bool _3357;
    vec4 _3160;
    vec4 _3182;
    float _3184;
    float _3188;
    float _3189;
    float _3190;
    float _3191;
    bool _3201;
    for (;;)
    {
        _3160 = cbMatDynParam._m0[0u];
        float _3162 = roundEven(_3160.y);
        bool _3163 = _3162 == 3.0;
        float _3164 = log2(_3150);
        float _3171 = exp2(_3164 * cbSceneParam._m0[78u].x) * _3020;
        float _3172 = exp2(_3164 * cbSceneParam._m0[78u].y) * _3021;
        float _3173 = exp2(_3164 * cbSceneParam._m0[78u].z) * _3022;
        float _3180 = _1142 + (-0.5);
        _3182 = cbMtdParam._m0[1u];
        _3184 = _3182.y * _3180;
        float _3187 = (_3162 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3188 = _3187 * (_3163 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3144)));
        _3189 = _3187 * (_3163 ? _3172 : (_3172 + (cbSceneParam._m0[72u].w * _3146)));
        _3190 = _3187 * (_3163 ? _3173 : (_3173 + (cbSceneParam._m0[72u].w * _3148)));
        _3191 = _3180 * 0.999000012874603271484375;
        _3201 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3201)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3191) < 0.5)
            {
                _3357 = true;
                break;
            }
        }
        uint _3298 = _1191 + uint(_3160.w);
        if ((cbInstanceData._m0[_3298].w < 1.0) && ((cbInstanceData._m0[_3298].w + _3191) < 0.5))
        {
            _3357 = true;
            break;
        }
        if ((_3184 + 1.0) < _3182.x)
        {
            _3357 = true;
            break;
        }
        _3357 = false;
        break;
    }
    float _3562;
    if (_3357)
    {
        discard_state = true;
        _3562 = 0.0;
    }
    else
    {
        _3562 = cbInstanceData._m0[_3023].w;
    }
    SV_Target.x = _3188;
    SV_Target.y = _3189;
    SV_Target.z = _3190;
    SV_Target.w = _3562;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3023].w;
    discard_exit();
}


