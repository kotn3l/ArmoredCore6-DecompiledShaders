#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1332;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _393 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _343.x) * 2.0) - ((((_381 - _393) * cbMtdParam._m0[23u].w) + _393) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3942 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _418 = (_411 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _419 = (_411 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _420 = (_411 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _457 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _459 = _457.x;
    float _469 = dot(vec4(_459, _457.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _483 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _343.y) * 2.0) - ((((_459 - _469) * cbMtdParam._m0[23u].w) + _469) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3953 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _491 = (_484 * ((_437.x * cbMtdParam._m0[13u].x) - _418)) + _418;
    float _492 = (_484 * ((_437.y * cbMtdParam._m0[13u].y) - _419)) + _419;
    float _493 = (_484 * ((_437.z * cbMtdParam._m0[13u].z) - _420)) + _420;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    float _534 = ((_506.x - _525) * _411) + _525;
    float _535 = ((_506.y - _526) * _411) + _526;
    float _536 = ((_506.z - _527) * _411) + _527;
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _561 = ((_548.z - _536) * _484) + _536;
    float _564 = ((((_548.x - _534) * _484) + _534) * 2.0) + (-1.0);
    float _566 = ((((_548.y - _535) * _484) + _535) * 2.0) + (-1.0);
    float _567 = dot(vec2(_564, _566), vec2(_564, _566));
    float _3964 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _598 = (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _564;
    float _599 = (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _566;
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _613 = _611.x;
    float _614 = 1.0 - _613;
    float _643 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_613 - _614) * cbMtdParam._m0[24u].w) + _614) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3975 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _652 = ((((cbMtdParam._m0[10u].x - _491) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _644) + _491;
    float _653 = ((((cbMtdParam._m0[10u].y - _492) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _644) + _492;
    float _654 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _493)) * _644) + _493;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _682 = _680.x;
    float _700 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _682) * _411) + _682;
    float _718 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _700) * _484) + _700;
    float _722 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _718) * cbMtdParam._m0[19u].z) + _718;
    float _724 = _722 - (_722 * _644);
    float _728 = (cbMtdParam._m0[19u].w * (_586.z - _561)) + _561;
    float _732 = ((cbMtdParam._m0[23u].x - _728) * _644) + _728;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _757 = (_751.x * 2.0) + (-1.0);
    float _758 = (_751.y * 2.0) + (-1.0);
    float _759 = dot(vec2(_757, _758), vec2(_757, _758));
    float _3986 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _775 = (_644 * (((cbMtdParam._m0[22u].z * _598) - _598) + _757)) + _598;
    float _776 = (_644 * (((cbMtdParam._m0[22u].z * _599) - _599) + _758)) + _599;
    float _777 = (_644 * (sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) - _572)) + _572;
    float _779 = cbMtdParam._m0[22u].x + _586.w;
    float _782 = fma(_777, _244 * NORMAL.x, fma(_776, _251 * TANGENT.x, (_237 * _229) * _775));
    float _785 = fma(_777, _244 * NORMAL.y, fma(_776, _251 * TANGENT.y, (_237 * _230) * _775));
    float _788 = fma(_777, _244 * NORMAL.z, fma(_776, _251 * TANGENT.z, (_237 * _231) * _775));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    float _793 = _792 * _782;
    float _794 = _792 * _785;
    float _795 = _792 * _788;
    float _3997 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _796 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4019 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4030 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4041 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4052 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _801 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _815 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _865 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _867 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
    float _872 = _865 * _871;
    float _873 = _866 * _871;
    float _874 = _867 * _871;
    float _880 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _881 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _899 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _793));
    float _902 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _793));
    float _905 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _793));
    uint _919 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _925 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_919].x;
    float _926 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_919].y;
    float _927 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_919].z;
    float _4063 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _931 = 1.0 - _801;
    float _932 = _928 * _931;
    float _933 = _929 * _931;
    float _934 = _930 * _931;
    float _939 = (_928 + (-0.039999999105930328369140625)) * _801;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _801;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _801;
    float _942 = _939 + 0.039999999105930328369140625;
    float _944 = _940 + 0.039999999105930328369140625;
    float _945 = _941 + 0.039999999105930328369140625;
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _880, cbSceneParam._m0[86u].y * _881));
    float _958 = ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * TEXCOORD_5.w) * _954.x;
    float _959 = dot(vec3(_793, _794, _795), vec3(_872, _873, _874));
    float _962 = _959 * 2.0;
    float _966 = (_962 * _793) - _872;
    float _967 = (_962 * _794) - _873;
    float _968 = (_962 * _795) - _874;
    float _972 = abs(dot(vec3(_872, _873, _874), vec3(_793, _794, _795)));
    float _4096 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _974 = sqrt(_796);
    float _987 = exp2((_974 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_974 * 3.0));
    float _993 = (1.0 - _987) * ((_974 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _994 = _987 * _974;
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1331;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1056 = fma(_1030, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022));
        float _1060 = fma(_1030, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022));
        float _1064 = fma(_1030, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022));
        float _1089 = _1022 + _793;
        float _1090 = _1026 + _794;
        float _1091 = _1030 + _795;
        float _1101 = fma(_1091, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089)) - _1056;
        float _1102 = fma(_1091, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089)) - _1060;
        float _1103 = fma(_1091, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089)) - _1064;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1056 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1060 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[34u].z) + ((((((_1064 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1159 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1125.x + (-0.5));
        float _1161 = _1159 * (_1125.y + (-0.5));
        float _1162 = _1159 * (_1125.z + (-0.5));
        float _1169 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1132.x + (-0.5));
        float _1171 = _1169 * (_1132.y + (-0.5));
        float _1172 = _1169 * (_1132.z + (-0.5));
        float _1179 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1139.x + (-0.5));
        float _1181 = _1179 * (_1139.y + (-0.5));
        float _1182 = _1179 * (_1139.z + (-0.5));
        float _1189 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1146.x + (-0.5));
        float _1191 = _1189 * (_1146.y + (-0.5));
        float _1192 = _1189 * (_1146.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1213 = (dot(vec3(_793, _794, _795), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1223 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _4144 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1225 + 1.0))) + _1230) * _1193;
        float _1240 = _1161 * 0.5;
        float _1241 = _1171 * 0.5;
        float _1242 = _1181 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_793, _794, _795), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4177 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1267 + 1.0))) + _1272) * _1194;
        float _1282 = _1162 * 0.5;
        float _1283 = _1172 * 0.5;
        float _1284 = _1182 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_793, _794, _795), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4210 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1309 + 1.0))) + _1314) * _1195;
        _1331 = _1162;
        _1333 = _1161;
        _1334 = _1160;
        _1335 = _1172;
        _1336 = _1171;
        _1337 = _1170;
        _1338 = _1182;
        _1339 = _1181;
        _1340 = _1180;
        _1341 = _1195;
        _1342 = _1194;
        _1343 = _1193;
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1332;
        _1333 = _1332;
        _1334 = _1332;
        _1335 = _1332;
        _1336 = _1332;
        _1337 = _1332;
        _1338 = _1332;
        _1339 = _1332;
        _1340 = _1332;
        _1341 = _1332;
        _1342 = _1332;
        _1343 = _1332;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1370 = fma(_1030, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022));
        float _1374 = fma(_1030, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022));
        float _1378 = fma(_1030, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022));
        float _1401 = _1022 + _793;
        float _1402 = _1026 + _794;
        float _1403 = _1030 + _795;
        float _1413 = fma(_1403, cbModelParam._m0[30u].z, fma(_1402, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401)) - _1370;
        float _1414 = fma(_1403, cbModelParam._m0[31u].z, fma(_1402, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401)) - _1374;
        float _1415 = fma(_1403, cbModelParam._m0[32u].z, fma(_1402, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401)) - _1378;
        float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
        float _1432 = ((_1419 * _1413) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1370 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1419 * _1414) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1374 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1419 * _1415) / cbModelParam._m0[35u].z) + ((((((_1378 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        float _1469 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1436.x + (-0.5));
        float _1471 = _1469 * (_1436.y + (-0.5));
        float _1472 = _1469 * (_1436.z + (-0.5));
        float _1479 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1443.x + (-0.5));
        float _1481 = _1479 * (_1443.y + (-0.5));
        float _1482 = _1479 * (_1443.z + (-0.5));
        float _1489 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1450.x + (-0.5));
        float _1491 = _1489 * (_1450.y + (-0.5));
        float _1492 = _1489 * (_1450.z + (-0.5));
        float _1499 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1457.x + (-0.5));
        float _1501 = _1499 * (_1457.y + (-0.5));
        float _1502 = _1499 * (_1457.z + (-0.5));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = _1470 * 0.5;
        float _1507 = _1480 * 0.5;
        float _1508 = _1490 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_793, _794, _795), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4273 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1533 + 1.0))) + _1538) * _1503;
        float _1548 = _1471 * 0.5;
        float _1549 = _1481 * 0.5;
        float _1550 = _1491 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_793, _794, _795), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4306 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1575 + 1.0))) + _1580) * _1504;
        float _1590 = _1472 * 0.5;
        float _1591 = _1482 * 0.5;
        float _1592 = _1492 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_793, _794, _795), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4339 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1617 + 1.0))) + _1622) * _1505;
        _1639 = _1472;
        _1640 = _1471;
        _1641 = _1470;
        _1642 = _1482;
        _1643 = _1481;
        _1644 = _1480;
        _1645 = _1492;
        _1646 = _1491;
        _1647 = _1490;
        _1648 = _1505;
        _1649 = _1504;
        _1650 = _1503;
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
    }
    else
    {
        _1639 = _1332;
        _1640 = _1332;
        _1641 = _1332;
        _1642 = _1332;
        _1643 = _1332;
        _1644 = _1332;
        _1645 = _1332;
        _1646 = _1332;
        _1647 = _1332;
        _1648 = _1332;
        _1649 = _1332;
        _1650 = _1332;
        _1651 = 0.0;
        _1652 = 0.0;
        _1653 = 0.0;
    }
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1344)) + _1344;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1345)) + _1345;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1346)) + _1346;
    float _1686 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1663));
    float _1707 = _966 * 0.5;
    float _1708 = _967 * 0.5;
    float _1709 = _968 * 0.5;
    float _1710 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1713 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1716 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1750;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1723 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1331, _1335, _1338, _1341));
        float _1727 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1731 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1738 = dot(vec4(cbModelParam._m0[39u]), vec4(_1707, _1708, _1709, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1761;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1752 = dot(vec4(cbModelParam._m0[40u]), vec4(_1707, _1708, _1709, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1765 = (_1761 * cbModelParam._m0[1u].x) + (_1750 * (1.0 - cbModelParam._m0[1u].x));
    float _1775 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1775 : min(cbModelParam._m0[25u].z, _1775));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1825 = fma(_1030, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022)) + cbModelParam._m0[13u].w;
        float _1829 = fma(_1030, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022)) + cbModelParam._m0[14u].w;
        float _1833 = fma(_1030, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022)) + cbModelParam._m0[15u].w;
        float _1836 = fma(_968, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966));
        float _1839 = fma(_968, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966));
        float _1842 = fma(_968, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966));
        float _1870;
        if (_1836 > 0.0)
        {
            _1870 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1870 = frontier_phi_14_12_ladder;
        }
        float _2042;
        if (_1839 > 0.0)
        {
            _2042 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2042 = frontier_phi_23_19_ladder;
        }
        float _2337;
        if (_1842 > 0.0)
        {
            _2337 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2337 = frontier_phi_35_30_ladder;
        }
        float _2339 = isnan(_2042) ? _1870 : (isnan(_1870) ? _2042 : min(_1870, _2042));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1836) + _1825;
        float _2345 = (_2340 * _1839) + _1829;
        float _2346 = (_2340 * _1842) + _1833;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2347;
        float _2351 = _2347 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 > _2351) || ((_2345 < _2349) || ((_2344 < _2349) || (_2344 > _2351))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2346, cbModelParam._m0[9u].z, fma(_2345, cbModelParam._m0[9u].y, _2344 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2346, cbModelParam._m0[10u].z, fma(_2345, cbModelParam._m0[10u].y, _2344 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2346, cbModelParam._m0[11u].z, fma(_2345, cbModelParam._m0[11u].y, _2344 * cbModelParam._m0[11u].x))), _1776);
            frontier_phi_13_35_ladder = _2491.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2491.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2491.x * cbModelParam._m0[1u].y;
        }
        _1858 = frontier_phi_13_35_ladder_2;
        _1860 = frontier_phi_13_35_ladder_1;
        _1862 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_966, _967, _968), _1776);
        _1858 = _1846.x * cbModelParam._m0[1u].y;
        _1860 = _1846.y * cbModelParam._m0[1u].y;
        _1862 = _1846.z * cbModelParam._m0[1u].y;
    }
    float _1866 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1866 : min(cbModelParam._m0[25u].w, _1866));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1921 = fma(_1030, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022)) + cbModelParam._m0[21u].w;
        float _1925 = fma(_1030, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022)) + cbModelParam._m0[22u].w;
        float _1929 = fma(_1030, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022)) + cbModelParam._m0[23u].w;
        float _1932 = fma(_968, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966));
        float _1935 = fma(_968, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966));
        float _1938 = fma(_968, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966));
        float _2047;
        if (_1932 > 0.0)
        {
            _2047 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2047 = frontier_phi_25_21_ladder;
        }
        float _2364;
        if (_1935 > 0.0)
        {
            _2364 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2364 = frontier_phi_37_32_ladder;
        }
        float _2702;
        if (_1938 > 0.0)
        {
            _2702 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2702 = frontier_phi_47_44_ladder;
        }
        float _2704 = isnan(_2364) ? _2047 : (isnan(_2047) ? _2364 : min(_2047, _2364));
        float _2705 = isnan(_2702) ? _2704 : (isnan(_2704) ? _2702 : min(_2704, _2702));
        float _2709 = (_2705 * _1932) + _1921;
        float _2710 = (_2705 * _1935) + _1925;
        float _2711 = (_2705 * _1938) + _1929;
        float _2712 = _2705 * 9.9999997473787516355514526367188e-05;
        float _2713 = (-1.0) - _2712;
        float _2715 = _2712 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2711 > _2715) || ((_2711 < _2713) || ((_2710 > _2715) || ((_2710 < _2713) || ((_2709 < _2713) || (_2709 > _2715))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2711, cbModelParam._m0[17u].z, fma(_2710, cbModelParam._m0[17u].y, _2709 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2711, cbModelParam._m0[18u].z, fma(_2710, cbModelParam._m0[18u].y, _2709 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2711, cbModelParam._m0[19u].z, fma(_2710, cbModelParam._m0[19u].y, _2709 * cbModelParam._m0[19u].x))), _1867);
            frontier_phi_22_47_ladder = _2833.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2833.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2833.x * cbModelParam._m0[1u].z;
        }
        _1957 = frontier_phi_22_47_ladder_2;
        _1959 = frontier_phi_22_47_ladder_1;
        _1961 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_966, _967, _968), _1867);
        _1957 = _1941.x * cbModelParam._m0[1u].z;
        _1959 = _1941.y * cbModelParam._m0[1u].z;
        _1961 = _1941.z * cbModelParam._m0[1u].z;
    }
    float _1974 = (((_993 * _942) + _994) * _958) * ((cbModelParam._m0[1u].w * (_1957 - _1858)) + _1858);
    float _1976 = (((_993 * _944) + _994) * _958) * ((cbModelParam._m0[1u].w * (_1959 - _1860)) + _1860);
    float _1978 = (((_993 * _945) + _994) * _958) * ((cbModelParam._m0[1u].w * (_1961 - _1862)) + _1862);
    float _1981 = fma(_1978, cbSceneParam._m0[89u].z, fma(_1976, cbSceneParam._m0[89u].y, _1974 * cbSceneParam._m0[89u].x));
    float _1984 = fma(_1978, cbSceneParam._m0[90u].z, fma(_1976, cbSceneParam._m0[90u].y, _1974 * cbSceneParam._m0[90u].x));
    float _1987 = fma(_1978, cbSceneParam._m0[91u].z, fma(_1976, cbSceneParam._m0[91u].y, _1974 * cbSceneParam._m0[91u].x));
    float _2021 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2025 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2033 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2034 = _2021 / _2033;
    float _2035 = _2025 / _2033;
    float _2036 = _2029 / _2033;
    float _2183;
    float _2184;
    float _2185;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2063 = ((uint(_2036 > cbSceneParam._m0[59u].y) + uint(_2036 > cbSceneParam._m0[59u].x)) + uint(_2036 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2064 = _2063 + 43u;
        uint _2072 = _2063 + 44u;
        uint _2080 = _2063 + 45u;
        uint _2088 = _2063 + 46u;
        float _2099 = fma(_2033, cbSceneParam._m0[_2064].w, fma(_2029, cbSceneParam._m0[_2064].z, fma(_2025, cbSceneParam._m0[_2064].y, _2021 * cbSceneParam._m0[_2064].x)));
        float _2103 = fma(_2033, cbSceneParam._m0[_2072].w, fma(_2029, cbSceneParam._m0[_2072].z, fma(_2025, cbSceneParam._m0[_2072].y, _2021 * cbSceneParam._m0[_2072].x)));
        float _2111 = fma(_2033, cbSceneParam._m0[_2088].w, fma(_2029, cbSceneParam._m0[_2088].z, fma(_2025, cbSceneParam._m0[_2088].y, _2021 * cbSceneParam._m0[_2088].x)));
        float _2116 = cbSceneParam._m0[33u].z * _2111;
        float _2118 = cbSceneParam._m0[33u].w * _2111;
        float _2121 = fma(_2033, cbSceneParam._m0[_2080].w, fma(_2029, cbSceneParam._m0[_2080].z, fma(_2025, cbSceneParam._m0[_2080].y, _2021 * cbSceneParam._m0[_2080].x))) / _2111;
        float _2169 = (cbSceneParam._m0[33u].x - sqrt(((_2035 * _2035) + (_2034 * _2034)) + (_2036 * _2036))) * cbSceneParam._m0[33u].y;
        float _4465 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2176 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2116 + _2099) / _2111, (_2118 + _2103) / _2111), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 + _2099) / _2111, (_2103 - _2116) / _2111), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2099 - _2116) / _2111, (_2103 - _2118) / _2111), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2099 - _2118) / _2111, (_2116 + _2103) / _2111), _2121), 0.0)).x), vec4(0.25)));
        _2183 = 1.0 - (_2176 * cbSceneParam._m0[34u].x);
        _2184 = 1.0 - (_2176 * cbSceneParam._m0[34u].y);
        _2185 = 1.0 - (_2176 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2183 = 1.0;
        _2184 = 1.0;
        _2185 = 1.0;
    }
    float _2249;
    float _2251;
    float _2253;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2237 = fma(_2033, cbSceneParam._m0[63u].w, fma(_2029, cbSceneParam._m0[63u].z, fma(_2025, cbSceneParam._m0[63u].y, _2021 * cbSceneParam._m0[63u].x)));
        float _2238 = fma(_2033, cbSceneParam._m0[60u].w, fma(_2029, cbSceneParam._m0[60u].z, fma(_2025, cbSceneParam._m0[60u].y, _2021 * cbSceneParam._m0[60u].x))) / _2237;
        float _2239 = fma(_2033, cbSceneParam._m0[61u].w, fma(_2029, cbSceneParam._m0[61u].z, fma(_2025, cbSceneParam._m0[61u].y, _2021 * cbSceneParam._m0[61u].x))) / _2237;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2238 >= cbSceneParam._m0[64u].x) && (_2239 >= cbSceneParam._m0[64u].y)) && (_2238 <= cbSceneParam._m0[64u].z)) && (_2239 <= cbSceneParam._m0[64u].w))
        {
            float _2377 = fma(_2033, cbSceneParam._m0[62u].w, fma(_2029, cbSceneParam._m0[62u].z, fma(_2025, cbSceneParam._m0[62u].y, _2021 * cbSceneParam._m0[62u].x))) / _2237;
            float _2381 = isnan(cbSceneParam._m0[41u].w) ? _2377 : (isnan(_2377) ? cbSceneParam._m0[41u].w : max(_2377, cbSceneParam._m0[41u].w));
            float _2424 = (cbSceneParam._m0[33u].x - sqrt(((_2035 * _2035) + (_2034 * _2034)) + (_2036 * _2036))) * cbSceneParam._m0[33u].y;
            float _4481 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
            float _2431 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2238, cbSceneParam._m0[33u].w + _2239), _2381), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2238, _2239 - cbSceneParam._m0[33u].z), _2381), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2238 - cbSceneParam._m0[33u].z, _2239 - cbSceneParam._m0[33u].w), _2381), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2238 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2239), _2381), 0.0)).x), vec4(0.25)));
            float _2435 = 1.0 - (_2431 * cbSceneParam._m0[34u].x);
            float _2436 = 1.0 - (_2431 * cbSceneParam._m0[34u].y);
            float _2437 = 1.0 - (_2431 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2437) ? _2185 : (isnan(_2185) ? _2437 : min(_2185, _2437));
            frontier_phi_34_33_ladder_1 = isnan(_2436) ? _2184 : (isnan(_2184) ? _2436 : min(_2184, _2436));
            frontier_phi_34_33_ladder_2 = isnan(_2435) ? _2183 : (isnan(_2183) ? _2435 : min(_2183, _2435));
        }
        else
        {
            frontier_phi_34_33_ladder = _2185;
            frontier_phi_34_33_ladder_1 = _2184;
            frontier_phi_34_33_ladder_2 = _2183;
        }
        _2249 = frontier_phi_34_33_ladder_2;
        _2251 = frontier_phi_34_33_ladder_1;
        _2253 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2249 = _2183;
        _2251 = _2184;
        _2253 = _2185;
    }
    uvec4 _2258 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2260 = _2258.x * 14u;
    uint _2261 = _2260 + 13u;
    float _2268 = _958 + (-1.0);
    float _2273 = (cbLight._m0[_2261].x * _2268) + 1.0;
    float _2274 = (cbLight._m0[_2261].y * _2268) + 1.0;
    float _2275 = (cbLight._m0[_2261].z * _2268) + 1.0;
    float _2276 = (cbLight._m0[_2261].w * _2268) + 1.0;
    uint _2277 = _2260 + 5u;
    float _2283 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
    uint _2287 = _2260 + 4u;
    float _2296 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2300 = _2260 | 1u;
    float _2311 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_793, _794, _795));
    float _2314 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_793, _794, _795));
    float _4517 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _4528 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2319 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * 0.3183098733425140380859375;
    float _2321 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * 0.3183098733425140380859375;
    float _2328 = ((cbLight._m0[_2277].x * _2283) * _2321) + (((cbLight._m0[_2287].x * _2249) * _2296) * _2319);
    float _2329 = ((_2283 * cbLight._m0[_2277].y) * _2321) + (((cbLight._m0[_2287].y * _2251) * _2296) * _2319);
    float _2330 = ((_2283 * cbLight._m0[_2277].z) * _2321) + (((cbLight._m0[_2287].z * _2253) * _2296) * _2319);
    uvec4 _2334 = floatBitsToUint(cbLight._m0[_2260 + 12u]);
    bool _2336 = _2334.x == 0u;
    float _2438;
    float _2440;
    float _2442;
    if (_2336)
    {
        _2438 = _2328;
        _2440 = _2329;
        _2442 = _2330;
    }
    else
    {
        uint _2446 = _2260 + 6u;
        float _2462 = (dot(vec3(cbLight._m0[_2260 + 2u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2463 = _2462 * _2462;
        float _4539 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2464 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2465 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2438 = (((cbLight._m0[_2446].x * 0.3183098733425140380859375) * _2464) * _2465) + _2328;
        _2440 = (((cbLight._m0[_2446].y * 0.3183098733425140380859375) * _2464) * _2465) + _2329;
        _2442 = (((cbLight._m0[_2446].z * 0.3183098733425140380859375) * _2464) * _2465) + _2330;
    }
    bool _2445 = _2334.y == 0u;
    float _2500;
    float _2502;
    float _2504;
    if (_2445)
    {
        _2500 = _2438;
        _2502 = _2440;
        _2504 = _2442;
    }
    else
    {
        uint _2673 = _2260 + 7u;
        float _2689 = (dot(vec3(cbLight._m0[_2260 + 3u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2690 = _2689 * _2689;
        float _4555 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2691 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2692 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2500 = (((cbLight._m0[_2673].x * 0.3183098733425140380859375) * _2691) * _2692) + _2438;
        _2502 = (((cbLight._m0[_2673].y * 0.3183098733425140380859375) * _2691) * _2692) + _2440;
        _2504 = (((cbLight._m0[_2673].z * 0.3183098733425140380859375) * _2691) * _2692) + _2442;
    }
    uint _2507 = _2260 + 8u;
    float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _796) * 0.949999988079071044921875);
    float _2521 = _2520 * _2520;
    float _2522 = cbLight._m0[_2260].x + _872;
    float _2523 = cbLight._m0[_2260].y + _873;
    float _2524 = cbLight._m0[_2260].z + _874;
    float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
    float _2529 = _2528 * _2522;
    float _2530 = _2528 * _2523;
    float _2531 = _2528 * _2524;
    float _2532 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2260].xyz));
    float _4571 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _4582 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _2536 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2537 = dot(vec3(_793, _794, _795), vec3(_2529, _2530, _2531));
    float _4593 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2540 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2541 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2529, _2530, _2531));
    float _4604 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2545 = _2521 * _2521;
    float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
    float _2557 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
    float _2558 = 0.959999978542327880859375 - _939;
    float _2560 = 0.959999978542327880859375 - _940;
    float _2561 = 0.959999978542327880859375 - _941;
    float _2568 = 1.0 - _2521;
    float _2579 = (0.5 / (((_2536 * ((_2535 * _2568) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2536 * _2568) + _2521) * _2535))) * _2535;
    float _4615 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2581 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
    uint _2595 = _2260 + 9u;
    float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _796) * 0.949999988079071044921875);
    float _2607 = _2606 * _2606;
    float _2608 = cbLight._m0[_2300].x + _872;
    float _2609 = cbLight._m0[_2300].y + _873;
    float _2610 = cbLight._m0[_2300].z + _874;
    float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
    float _2615 = _2614 * _2608;
    float _2616 = _2614 * _2609;
    float _2617 = _2614 * _2610;
    float _2618 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2300].xyz));
    float _4626 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2621 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2622 = dot(vec3(_793, _794, _795), vec3(_2615, _2616, _2617));
    float _4637 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2625 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2626 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2615, _2616, _2617));
    float _4648 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2630 = _2607 * _2607;
    float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
    float _2641 = exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0);
    float _2648 = 1.0 - _2607;
    float _2658 = (0.5 / (((_2536 * ((_2621 * _2648) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2536 * _2648) + _2607) * _2621))) * _2621;
    float _4659 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2660 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
    float _2670 = (((((_2641 * _2558) + _942) * cbLight._m0[_2595].x) * _2660) * _2283) + ((((cbLight._m0[_2507].x * _2249) * ((_2557 * _2558) + _942)) * _2581) * _2296);
    float _2671 = (((((_2641 * _2560) + _944) * cbLight._m0[_2595].y) * _2660) * _2283) + ((((cbLight._m0[_2507].y * _2251) * ((_2557 * _2560) + _944)) * _2581) * _2296);
    float _2672 = (((((_2641 * _2561) + _945) * cbLight._m0[_2595].z) * _2660) * _2283) + ((((cbLight._m0[_2507].z * _2253) * ((_2557 * _2561) + _945)) * _2581) * _2296);
    float _2728;
    float _2730;
    float _2732;
    if (_2336)
    {
        _2728 = _2670;
        _2730 = _2671;
        _2732 = _2672;
    }
    else
    {
        uint _2734 = _2260 + 2u;
        uint _2738 = _2260 + 10u;
        float _2752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2734].w)) * _796) * 0.949999988079071044921875);
        float _2753 = _2752 * _2752;
        float _2754 = cbLight._m0[_2734].x + _872;
        float _2755 = cbLight._m0[_2734].y + _873;
        float _2756 = cbLight._m0[_2734].z + _874;
        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
        float _2761 = _2760 * _2754;
        float _2762 = _2760 * _2755;
        float _2763 = _2760 * _2756;
        float _2764 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2734].xyz));
        float _4670 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2768 = dot(vec3(_793, _794, _795), vec3(_2761, _2762, _2763));
        float _4681 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2771 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2772 = dot(vec3(cbLight._m0[_2734].xyz), vec3(_2761, _2762, _2763));
        float _4692 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2776 = _2753 * _2753;
        float _2780 = ((_2771 * _2771) * (_2776 + (-1.0))) + 1.0;
        float _2787 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
        float _2794 = 1.0 - _2753;
        float _2804 = (0.5 / (((_2536 * ((_2767 * _2794) + _2753)) + 9.9999999392252902907785028219223e-09) + (((_2536 * _2794) + _2753) * _2767))) * _2767;
        float _4703 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2806 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2776 / ((_2780 * _2780) * 3.141590118408203125));
        float _2807 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2728 = (((((_2787 * _2558) + _942) * cbLight._m0[_2738].x) * _2806) * _2807) + _2670;
        _2730 = (((((_2787 * _2560) + _944) * cbLight._m0[_2738].y) * _2806) * _2807) + _2671;
        _2732 = (((((_2787 * _2561) + _945) * cbLight._m0[_2738].z) * _2806) * _2807) + _2672;
    }
    float _2838;
    float _2840;
    float _2842;
    if (_2445)
    {
        _2838 = _2728;
        _2840 = _2730;
        _2842 = _2732;
    }
    else
    {
        uint _2849 = _2260 + 3u;
        uint _2853 = _2260 + 11u;
        float _2867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2849].w)) * _796) * 0.949999988079071044921875);
        float _2868 = _2867 * _2867;
        float _2869 = cbLight._m0[_2849].x + _872;
        float _2870 = cbLight._m0[_2849].y + _873;
        float _2871 = cbLight._m0[_2849].z + _874;
        float _2875 = inversesqrt(dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871)));
        float _2876 = _2875 * _2869;
        float _2877 = _2875 * _2870;
        float _2878 = _2875 * _2871;
        float _2879 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2849].xyz));
        float _4719 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2882 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2883 = dot(vec3(_793, _794, _795), vec3(_2876, _2877, _2878));
        float _4730 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2886 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2887 = dot(vec3(cbLight._m0[_2849].xyz), vec3(_2876, _2877, _2878));
        float _4741 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2891 = _2868 * _2868;
        float _2895 = ((_2886 * _2886) * (_2891 + (-1.0))) + 1.0;
        float _2902 = exp2(log2(1.0 - (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) * 5.0);
        float _2909 = 1.0 - _2868;
        float _2919 = (0.5 / (((_2536 * ((_2882 * _2909) + _2868)) + 9.9999999392252902907785028219223e-09) + (((_2536 * _2909) + _2868) * _2882))) * _2882;
        float _4752 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2921 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2891 / ((_2895 * _2895) * 3.141590118408203125));
        float _2922 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2838 = (((((_2902 * _2558) + _942) * cbLight._m0[_2853].x) * _2921) * _2922) + _2728;
        _2840 = (((((_2902 * _2560) + _944) * cbLight._m0[_2853].y) * _2921) * _2922) + _2730;
        _2842 = (((((_2902 * _2561) + _945) * cbLight._m0[_2853].z) * _2921) * _2922) + _2732;
    }
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_2258.y == 0u)
    {
        uvec4 _2943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2944 = _2943.x;
        uint _2955 = uint((float(_2943.y) * floor(float(uint(cbSceneParam._m0[85u].y * _881) / _2944))) + floor(float(uint(cbSceneParam._m0[85u].x * _880) / _2944)));
        float _2965 = (log2(_2036 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2966 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        uint _2969 = uint(isnan(14.0) ? _2966 : (isnan(_2966) ? 14.0 : min(_2966, 14.0)));
        uvec4 _2974 = texelFetch(g_lightClusterGridBuffer, int(((_2969 << 2u) + (_2955 << 6u)) >> 2u));
        uint _2975 = _2974.x;
        uint _2976 = _2943.z;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((((1u << ((_2976 >> 4u) & 15u)) + 4294967295u) & _2975) == 0u) || ((_2976 & 240u) == 0u))
        {
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
        }
        else
        {
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            uint _3206 = 0u;
            uint _3215;
            bool _3216;
            for (;;)
            {
                _3215 = texelFetch(g_lightClassification, int((((_2969 << 5u) + (_2955 << 9u)) + (_3206 << 2u)) >> 2u)).x;
                _3216 = _3215 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3216)
                {
                    frontier_phi_66_pred = _3205;
                    frontier_phi_66_pred_1 = _3204;
                    frontier_phi_66_pred_2 = _3203;
                    frontier_phi_66_pred_3 = _3202;
                    frontier_phi_66_pred_4 = _3201;
                    frontier_phi_66_pred_5 = _3200;
                }
                else
                {
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    uint _3330;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3205;
                    _3330 = _3215;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    for (;;)
                    {
                        uint _3334 = uint(findLSB(_3330)) + (_3206 << 5u);
                        uint _3331 = (_3330 + 4294967295u) & _3330;
                        uint _3336 = _3334 * 48u;
                        vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3356 = (_3334 * 48u) + 4u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 3u)).x));
                        uint _3375 = (_3334 * 48u) + 8u;
                        vec3 _3386 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x));
                        float _3390 = _3350.x - _2034;
                        float _3391 = _3350.y - _2035;
                        float _3392 = _3350.z - _2036;
                        float _3393 = dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392));
                        float _3396 = inversesqrt(_3393);
                        float _3397 = _3396 * _3390;
                        float _3398 = _3396 * _3391;
                        float _3399 = _3396 * _3392;
                        float _3400 = dot(vec3(_899, _902, _905), vec3(_3397, _3398, _3399));
                        float _3405 = 1.0 - (_3393 * _3350.w);
                        float _4778 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3407 = sqrt(_3393) * _3369.w;
                        float _3410 = 1.39999997615814208984375 / (_3407 + 1.39999997615814208984375);
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3400) + _3411;
                        float _3417 = _3407 * _3407;
                        float _3421 = ((isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * _3406) / ((_3417 * 0.699999988079071044921875) + 1.0);
                        float _3425 = (-0.0) - _2034;
                        float _3426 = (-0.0) - _2035;
                        float _3427 = (-0.0) - _2036;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3432 = _3431 * _3425;
                        float _3433 = _3431 * _3426;
                        float _3434 = _3431 * _3427;
                        float _3441 = exp2(log2(1.0 / ((_3417 * 3.5) + 5.0)) * 0.25);
                        float _3442 = 1.0 - _974;
                        float _3449 = sqrt(1.0 - ((1.0 - (_3442 * _3442)) * (1.0 - (_3441 * _3441))));
                        float _3450 = _3449 * _3449;
                        float _3451 = _3450 * _3450;
                        float _3452 = _3432 + _3397;
                        float _3453 = _3433 + _3398;
                        float _3454 = _3434 + _3399;
                        float _3458 = inversesqrt(dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454)));
                        float _3462 = dot(vec3(_899, _902, _905), vec3(_3432, _3433, _3434));
                        float _4794 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3465 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3466 = dot(vec3(_899, _902, _905), vec3(_3458 * _3452, _3458 * _3453, _3458 * _3454));
                        float _4805 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3469 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3473 = ((_3469 * _3469) * (_3451 + (-1.0))) + 1.0;
                        float _3474 = _3410 * _3450;
                        float _3475 = _3474 * _3474;
                        float _3478 = ((1.0 - _3475) * _3400) + _3475;
                        float _4816 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3479 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3480 = 1.0 - _3450;
                        float _3490 = (0.5 / (((_3479 * ((_3465 * _3480) + _3450)) + 9.9999999392252902907785028219223e-09) + (((_3479 * _3480) + _3450) * _3465))) * _3479;
                        float _4827 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3501 = (((_3451 * 3.1415927410125732421875) * (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) / ((_3473 * _3473) * ((_3417 * 2.1991131305694580078125) + 3.141590118408203125))) * _3406;
                        _3259 = (_3421 * _3369.x) + _3327;
                        _3260 = (_3421 * _3369.y) + _3328;
                        _3261 = (_3421 * _3369.z) + _3329;
                        _3256 = (_3501 * _3386.x) + _3324;
                        _3257 = (_3501 * _3386.y) + _3325;
                        _3258 = (_3501 * _3386.z) + _3326;
                        if (_3331 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3261;
                            _3330 = _3331;
                        }
                    }
                    frontier_phi_66_pred = _3261;
                    frontier_phi_66_pred_1 = _3260;
                    frontier_phi_66_pred_2 = _3259;
                    frontier_phi_66_pred_3 = _3258;
                    frontier_phi_66_pred_4 = _3257;
                    frontier_phi_66_pred_5 = _3256;
                }
                _3066 = frontier_phi_66_pred;
                _3064 = frontier_phi_66_pred_1;
                _3062 = frontier_phi_66_pred_2;
                _3060 = frontier_phi_66_pred_3;
                _3058 = frontier_phi_66_pred_4;
                _3056 = frontier_phi_66_pred_5;
                uint _3207 = _3206 + 1u;
                if (_3207 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3200 = _3056;
                    _3201 = _3058;
                    _3202 = _3060;
                    _3203 = _3062;
                    _3204 = _3064;
                    _3205 = _3066;
                    _3206 = _3207;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
        }
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.z;
        uint _3072 = (_3070 >> 8u) & 15u;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        if (((4294967295u << _3072) & _2975) == 0u)
        {
            _3168 = _3055;
            _3170 = _3057;
            _3172 = _3059;
            _3174 = _3061;
            _3176 = _3063;
            _3178 = _3065;
        }
        else
        {
            float _3193 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
            float _3194 = _3193 * _2034;
            float _3195 = _3193 * _2035;
            float _3196 = _3193 * _2036;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3072 < ((_3070 >> 12u) & 15u))
            {
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3307 = _3055;
                float _3308 = _3057;
                float _3309 = _3059;
                float _3310 = _3061;
                float _3311 = _3063;
                float _3312 = _3065;
                uint _3313 = _3072;
                uint _3322;
                bool _3323;
                for (;;)
                {
                    _3322 = texelFetch(g_lightClassification, int((((_2969 << 5u) + (_2955 << 9u)) + (_3313 << 2u)) >> 2u)).x;
                    _3323 = _3322 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3323)
                    {
                        frontier_phi_72_pred = _3312;
                        frontier_phi_72_pred_1 = _3311;
                        frontier_phi_72_pred_2 = _3310;
                        frontier_phi_72_pred_3 = _3309;
                        frontier_phi_72_pred_4 = _3308;
                        frontier_phi_72_pred_5 = _3307;
                    }
                    else
                    {
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3519 = _3307;
                        float _3520 = _3308;
                        float _3521 = _3309;
                        float _3522 = _3310;
                        float _3523 = _3311;
                        float _3524 = _3312;
                        uint _3525 = _3322;
                        uint _3526;
                        vec4 _3551;
                        float _3552;
                        vec4 _3567;
                        vec3 _3579;
                        vec4 _3594;
                        vec4 _3609;
                        float _3655;
                        bool _3656;
                        for (;;)
                        {
                            uint _3536 = ((_3313 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3525));
                            _3526 = (_3525 + 4294967295u) & _3525;
                            uint _3538 = _3536 * 40u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            _3552 = _3551.w;
                            uint _3554 = (_3536 * 40u) + 4u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3536 * 40u) + 8u;
                            _3579 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x));
                            uint _3581 = (_3536 * 40u) + 16u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3596 = (_3536 * 40u) + 20u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3536 * 40u) + 24u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3630 = (_3536 * 40u) + 28u;
                            vec4 _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            _3655 = fma(_2036, _3643.z, fma(_2035, _3643.y, _3643.x * _2034)) + _3643.w;
                            _3656 = !((fma(_2036, _3624.z, fma(_2035, _3624.y, _3624.x * _2034)) + _3624.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3656)
                            {
                                float _3683 = _3551.x - _2034;
                                float _3684 = _3551.y - _2035;
                                float _3685 = _3551.z - _2036;
                                float _3686 = dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685));
                                float _3689 = inversesqrt(_3686);
                                float _3690 = _3689 * _3683;
                                float _3691 = _3689 * _3684;
                                float _3692 = _3689 * _3685;
                                float _3696 = 1.0 - (_3686 / (_3552 * _3552));
                                float _4838 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3701 = sqrt(_3686) * _3567.w;
                                float _3703 = 1.39999997615814208984375 / (_3701 + 1.39999997615814208984375);
                                float _3704 = _3703 * _3703;
                                float _3707 = ((1.0 - _3704) * dot(vec3(_3690, _3691, _3692), vec3(_899, _902, _905))) + _3704;
                                float _3710 = _3701 * _3701;
                                float _3714 = (fma(_2036, _3594.z, fma(_2035, _3594.y, _3594.x * _2034)) + _3594.w) / _3655;
                                float _3715 = (fma(_2036, _3609.z, fma(_2035, _3609.y, _3609.x * _2034)) + _3609.w) / _3655;
                                float _3719 = 1.0 - dot(vec2(_3714, _3715), vec2(_3714, _3715));
                                float _4854 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3721 = _3720 * (((isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0))) * _3697) / ((_3710 * 0.699999988079071044921875) + 1.0));
                                float _3733 = exp2(log2(1.0 / ((_3710 * 3.5) + 5.0)) * 0.25);
                                float _3734 = 1.0 - _974;
                                float _3741 = sqrt(1.0 - ((1.0 - (_3734 * _3734)) * (1.0 - (_3733 * _3733))));
                                float _3742 = _3741 * _3741;
                                float _3743 = _3742 * _3742;
                                float _3744 = _3690 - _3194;
                                float _3745 = _3691 - _3195;
                                float _3746 = _3692 - _3196;
                                float _3750 = inversesqrt(dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746)));
                                float _3754 = dot(vec3(_899, _902, _905), vec3((-0.0) - _3194, (-0.0) - _3195, (-0.0) - _3196));
                                float _4865 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3758 = dot(vec3(_899, _902, _905), vec3(_3750 * _3744, _3750 * _3745, _3750 * _3746));
                                float _4876 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3765 = ((_3761 * _3761) * (_3743 + (-1.0))) + 1.0;
                                float _3766 = _3703 * _3742;
                                float _3767 = _3766 * _3766;
                                float _3773 = ((1.0 - _3767) * dot(vec3(_899, _902, _905), vec3(_3690, _3691, _3692))) + _3767;
                                float _4887 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3775 = 1.0 - _3742;
                                float _3785 = (0.5 / (((_3774 * ((_3757 * _3775) + _3742)) + 9.9999999392252902907785028219223e-09) + (((_3774 * _3775) + _3742) * _3757))) * _3774;
                                float _4898 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3795 = (_3720 * _3697) * (((_3743 * 3.1415927410125732421875) * (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) / ((_3765 * _3765) * ((_3710 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3721 * _3567.y;
                                frontier_phi_78_pred_1 = _3721 * _3567.x;
                                frontier_phi_78_pred_2 = _3795 * _3579.z;
                                frontier_phi_78_pred_3 = _3795 * _3579.y;
                                frontier_phi_78_pred_4 = _3795 * _3579.x;
                                frontier_phi_78_pred_5 = _3721 * _3567.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3803 = frontier_phi_78_pred;
                            _3802 = frontier_phi_78_pred_1;
                            _3801 = frontier_phi_78_pred_2;
                            _3800 = frontier_phi_78_pred_3;
                            _3799 = frontier_phi_78_pred_4;
                            _3804 = frontier_phi_78_pred_5;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            if (_3526 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3526;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3511;
                        frontier_phi_72_pred_1 = _3510;
                        frontier_phi_72_pred_2 = _3509;
                        frontier_phi_72_pred_3 = _3508;
                        frontier_phi_72_pred_4 = _3507;
                        frontier_phi_72_pred_5 = _3506;
                    }
                    _3179 = frontier_phi_72_pred;
                    _3177 = frontier_phi_72_pred_1;
                    _3175 = frontier_phi_72_pred_2;
                    _3173 = frontier_phi_72_pred_3;
                    _3171 = frontier_phi_72_pred_4;
                    _3169 = frontier_phi_72_pred_5;
                    uint _3314 = _3313 + 1u;
                    if (_3314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3307 = _3169;
                        _3308 = _3171;
                        _3309 = _3173;
                        _3310 = _3175;
                        _3311 = _3177;
                        _3312 = _3179;
                        _3313 = _3314;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3179;
                frontier_phi_60_61_ladder_1 = _3177;
                frontier_phi_60_61_ladder_2 = _3173;
                frontier_phi_60_61_ladder_3 = _3171;
                frontier_phi_60_61_ladder_4 = _3169;
                frontier_phi_60_61_ladder_5 = _3175;
            }
            else
            {
                frontier_phi_60_61_ladder = _3065;
                frontier_phi_60_61_ladder_1 = _3063;
                frontier_phi_60_61_ladder_2 = _3059;
                frontier_phi_60_61_ladder_3 = _3057;
                frontier_phi_60_61_ladder_4 = _3055;
                frontier_phi_60_61_ladder_5 = _3061;
            }
            _3168 = frontier_phi_60_61_ladder_4;
            _3170 = frontier_phi_60_61_ladder_3;
            _3172 = frontier_phi_60_61_ladder_2;
            _3174 = frontier_phi_60_61_ladder_5;
            _3176 = frontier_phi_60_61_ladder_1;
            _3178 = frontier_phi_60_61_ladder;
        }
        float _3183 = isnan(1.0) ? _958 : (isnan(_958) ? 1.0 : min(_958, 1.0));
        _2988 = (_3183 * _3174) + _2500;
        _2990 = (_3183 * _3176) + _2502;
        _2992 = (_3183 * _3178) + _2504;
        _2994 = ((_3168 * _942) * _3183) + _2838;
        _2996 = ((_3170 * _944) * _3183) + _2840;
        _2998 = ((_3172 * _945) * _3183) + _2842;
    }
    else
    {
        _2988 = _2500;
        _2990 = _2502;
        _2992 = _2504;
        _2994 = _2838;
        _2996 = _2840;
        _2998 = _2842;
    }
    float _4914 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4925 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4936 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    uint _3018 = _257 + 6u;
    float _3026 = _880 / cbSceneParam._m0[86u].x;
    float _3027 = _881 / cbSceneParam._m0[86u].y;
    vec4 _3041 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, (log2((isnan(cbSceneParam._m0[77u].w) ? _815 : (isnan(_815) ? cbSceneParam._m0[77u].w : min(_815, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3043 = _3041.x;
    float _3044 = _3041.y;
    float _3045 = _3041.z;
    float _3046 = _3041.w;
    float _3118;
    float _3120;
    float _3122;
    float _3124;
    if (_815 > cbSceneParam._m0[78u].w)
    {
        float _3080 = isnan(_815) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _815 : min(cbSceneParam._m0[80u].w, _815));
        float _3081 = _3080 / _815;
        float _3092 = _3081 * _865;
        float _3093 = _866 * _3081;
        float _3094 = (-0.0) - _3093;
        float _3096 = _3081 * _867;
        float _3098 = (cbSceneParam._m0[77u].w * _3094) / _3080;
        float _3099 = _3098 + cbSceneParam._m0[79u].w;
        float _3100 = cbSceneParam._m0[79u].w - _3093;
        float _3106 = sqrt(((_3092 * _3092) + (_3093 * _3093)) + (_3096 * _3096));
        float _3109 = (1.0 - (cbSceneParam._m0[77u].w / _3080)) * _3106;
        float _3114 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3116 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3269;
        if (abs((_3094 - _3098) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3269 = ((((_3099 > 0.0) ? exp2(_3114 * _3099) : (2.0 - exp2(_3116 * _3099))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3109;
        }
        else
        {
            float _3229 = 1.0 / cbSceneParam._m0[80u].x;
            float _3230 = isnan(_3100) ? _3099 : (isnan(_3099) ? _3100 : max(_3099, _3100));
            float _3231 = isnan(_3100) ? _3099 : (isnan(_3099) ? _3100 : min(_3099, _3100));
            float _3240 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : min(_3230, 0.0));
            float _3241 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : min(_3231, 0.0));
            _3269 = ((abs(_3106 / _3094) * cbSceneParam._m0[80u].y) * ((((_3240 - _3241) * 2.0) - ((exp2(_3114 * (isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0)))) - exp2(_3114 * (isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))))) * _3229)) - ((exp2(_3116 * _3240) - exp2(_3116 * _3241)) * _3229))) + (_3109 * cbSceneParam._m0[80u].z);
        }
        vec4 _3271 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, 1.0), 0.0);
        float _3280 = exp2((_3269 * (-1.44269502162933349609375)) * (1.0 - _3271.w));
        float _3281 = log2(_3280);
        float _3297 = log2(_3046);
        _3118 = (exp2(_3297 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].x)) * _3271.x) / cbSceneParam._m0[78u].x)) + _3043;
        _3120 = (exp2(_3297 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].y)) * _3271.y) / cbSceneParam._m0[78u].y)) + _3044;
        _3122 = (exp2(_3297 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].z)) * _3271.z) / cbSceneParam._m0[78u].z)) + _3045;
        _3124 = _3280 * _3046;
    }
    else
    {
        _3118 = _3043;
        _3120 = _3044;
        _3122 = _3045;
        _3124 = _3046;
    }
    float _3136 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3137 = _3136 == 3.0;
    float _3138 = log2(_3124);
    float _3145 = exp2(_3138 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2988 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _958))) + ((_2994 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _3146 = exp2(_3138 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2990 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _958))) + ((_2996 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _3147 = exp2(_3138 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2992 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _958))) + ((_2998 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1765)) * cbPerFrame._m0[3u].x));
    float _3156 = (_3136 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3156 * (_3137 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3118)));
    SV_Target.y = _3156 * (_3137 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3120)));
    SV_Target.z = _3156 * (_3137 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3122)));
    SV_Target.w = cbInstanceData._m0[_3018].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3018].w;
}


