#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1398;
float _4059;
float _4060;
float _4061;
float _4062;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _340.x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[23u].w) + _390) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4071 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _415 = (_408 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _416 = (_408 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _417 = (_408 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _466 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _480 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _340.y) * 2.0) - ((((_456 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4082 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _488 = (_481 * ((_434.x * cbMtdParam._m0[13u].x) - _415)) + _415;
    float _489 = (_481 * ((_434.y * cbMtdParam._m0[13u].y) - _416)) + _416;
    float _490 = (_481 * ((_434.z * cbMtdParam._m0[13u].z) - _417)) + _417;
    vec4 _509 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _550 = _546.z;
    float _557 = ((_529.x - _548) * _408) + _548;
    float _558 = ((_529.y - _549) * _408) + _549;
    float _559 = ((_529.z - _550) * _408) + _550;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _584 = ((_571.z - _559) * _481) + _559;
    float _587 = ((((_571.x - _557) * _481) + _557) * 2.0) + (-1.0);
    float _589 = ((((_571.y - _558) * _481) + _558) * 2.0) + (-1.0);
    float _590 = dot(vec2(_587, _589), vec2(_587, _589));
    float _4093 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _595 = sqrt(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _621 = (((_609.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _587;
    float _622 = (((_609.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _589;
    float _625 = fma(_595, _240, fma(_622, _247, _621 * _233));
    float _628 = fma(_595, _241, fma(_622, _248, _621 * _234));
    float _631 = fma(_595, _242, fma(_622, _249, _621 * _235));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _664 = _662.x;
    float _665 = 1.0 - _664;
    float _674 = (cbMtdParam._m0[19u].x + dot(vec4(_635 * _625, _635 * _628, _635 * _631, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_664 - _665) * cbMtdParam._m0[24u].z) + _665) * cbMtdParam._m0[21u].z);
    float _4104 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _682 = (_675 * ((_509.x * cbMtdParam._m0[18u].x) - _488)) + _488;
    float _683 = (_675 * ((_509.y * cbMtdParam._m0[18u].y) - _489)) + _489;
    float _684 = (_675 * ((_509.z * cbMtdParam._m0[18u].z) - _490)) + _490;
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _712 = _710.x;
    float _730 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _712) * _408) + _712;
    float _747 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _730) * _481) + _730;
    float _751 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _747) * cbMtdParam._m0[19u].z) + _747;
    float _753 = _751 - (_751 * _675);
    float _757 = (cbMtdParam._m0[19u].w * (_609.z - _584)) + _584;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _777 = (_770.x * 2.0) + (-1.0);
    float _778 = (_770.y * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _4115 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _787 = ((_770.z - _757) * _675) + _757;
    float _797 = ((sqrt(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) - _595) * _675) + _595;
    float _800 = (((_777 - _621) * _675) + _621) + (cbMtdParam._m0[21u].x * _621);
    float _801 = (((_778 - _622) * _675) + _622) + (cbMtdParam._m0[21u].x * _622);
    float _803 = cbMtdParam._m0[22u].x + _609.w;
    float _806 = fma(_797, _240, fma(_801, _247, _800 * _233));
    float _809 = fma(_797, _241, fma(_801, _248, _800 * _234));
    float _812 = fma(_797, _242, fma(_801, _249, _800 * _235));
    float _816 = inversesqrt(dot(vec3(_806, _809, _812), vec3(_806, _809, _812)));
    float _817 = _816 * _806;
    float _818 = _816 * _809;
    float _819 = _816 * _812;
    float _4126 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _820 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4148 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4159 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4170 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4181 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _825 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _839 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _890 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _880);
    float _891 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _880);
    float _892 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _880);
    float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
    float _897 = _890 * _896;
    float _898 = _891 * _896;
    float _899 = _892 * _896;
    vec4 _904 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _906 = _904.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1078 = sqrt(((_890 * _890) + (_891 * _891)) + (_892 * _892));
        float _1084 = (cbMatDynParam._m0[5u].x * _1078) + cbMatDynParam._m0[5u].y;
        float _4192 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1089 = (cbMatDynParam._m0[5u].z * _1078) + cbMatDynParam._m0[5u].w;
        float _4203 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) - _1085)) + _1085) < ((_906 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _917 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _918 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _936 = fma(_819, cbSceneParam._m0[5u].z, fma(_818, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _817));
    float _939 = fma(_819, cbSceneParam._m0[6u].z, fma(_818, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _817));
    float _942 = fma(_819, cbSceneParam._m0[7u].z, fma(_818, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _817));
    uint _955 = _252 + 9u;
    uint _956 = _955 + uint(cbMatDynParam._m0[0u].w);
    float _962 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * cbInstanceData._m0[_956].x;
    float _963 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * cbInstanceData._m0[_956].y;
    float _964 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * cbInstanceData._m0[_956].z;
    float _4214 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _4225 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _968 = 1.0 - _825;
    float _969 = _965 * _968;
    float _970 = _966 * _968;
    float _971 = _967 * _968;
    float _976 = (_965 + (-0.039999999105930328369140625)) * _825;
    float _977 = (_966 + (-0.039999999105930328369140625)) * _825;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _825;
    float _979 = _976 + 0.039999999105930328369140625;
    float _981 = _977 + 0.039999999105930328369140625;
    float _982 = _978 + 0.039999999105930328369140625;
    vec4 _991 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _917, cbSceneParam._m0[86u].y * _918));
    float _995 = ((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * TEXCOORD_5.w) * _991.x;
    float _996 = dot(vec3(_817, _818, _819), vec3(_897, _898, _899));
    float _999 = _996 * 2.0;
    float _1003 = (_999 * _817) - _897;
    float _1004 = (_999 * _818) - _898;
    float _1005 = (_999 * _819) - _899;
    float _1009 = abs(dot(vec3(_897, _898, _899), vec3(_817, _818, _819)));
    float _4247 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1011 = sqrt(_820);
    float _1024 = exp2((_1011 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1011 * 3.0));
    float _1030 = (1.0 - _1024) * ((_1011 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1031 = _1024 * _1011;
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1397;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1122 = fma(_1067, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059));
        float _1126 = fma(_1067, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059));
        float _1130 = fma(_1067, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059));
        float _1155 = _1059 + _817;
        float _1156 = _1063 + _818;
        float _1157 = _1067 + _819;
        float _1167 = fma(_1157, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155)) - _1122;
        float _1168 = fma(_1157, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155)) - _1126;
        float _1169 = fma(_1157, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155)) - _1130;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1122 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1126 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[34u].z) + ((((((_1130 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1225 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1191.x + (-0.5));
        float _1227 = _1225 * (_1191.y + (-0.5));
        float _1228 = _1225 * (_1191.z + (-0.5));
        float _1235 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1198.x + (-0.5));
        float _1237 = _1235 * (_1198.y + (-0.5));
        float _1238 = _1235 * (_1198.z + (-0.5));
        float _1245 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1205.x + (-0.5));
        float _1247 = _1245 * (_1205.y + (-0.5));
        float _1248 = _1245 * (_1205.z + (-0.5));
        float _1255 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1212.x + (-0.5));
        float _1257 = _1255 * (_1212.y + (-0.5));
        float _1258 = _1255 * (_1212.z + (-0.5));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = _1226 * 0.5;
        float _1263 = _1236 * 0.5;
        float _1264 = _1246 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1279 = (dot(vec3(_817, _818, _819), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1289 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4295 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1291 + 1.0))) + _1296) * _1259;
        float _1306 = _1227 * 0.5;
        float _1307 = _1237 * 0.5;
        float _1308 = _1247 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_817, _818, _819), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4328 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1333 + 1.0))) + _1338) * _1260;
        float _1348 = _1228 * 0.5;
        float _1349 = _1238 * 0.5;
        float _1350 = _1248 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_817, _818, _819), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4361 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1375 + 1.0))) + _1380) * _1261;
        _1397 = _1228;
        _1399 = _1227;
        _1400 = _1226;
        _1401 = _1238;
        _1402 = _1237;
        _1403 = _1236;
        _1404 = _1248;
        _1405 = _1247;
        _1406 = _1246;
        _1407 = _1261;
        _1408 = _1260;
        _1409 = _1259;
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
    }
    else
    {
        _1397 = _1398;
        _1399 = _1398;
        _1400 = _1398;
        _1401 = _1398;
        _1402 = _1398;
        _1403 = _1398;
        _1404 = _1398;
        _1405 = _1398;
        _1406 = _1398;
        _1407 = _1398;
        _1408 = _1398;
        _1409 = _1398;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1439 = fma(_1067, cbModelParam._m0[30u].z, fma(_1063, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059));
        float _1443 = fma(_1067, cbModelParam._m0[31u].z, fma(_1063, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059));
        float _1447 = fma(_1067, cbModelParam._m0[32u].z, fma(_1063, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059));
        float _1470 = _1059 + _817;
        float _1471 = _1063 + _818;
        float _1472 = _1067 + _819;
        float _1482 = fma(_1472, cbModelParam._m0[30u].z, fma(_1471, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1470)) - _1439;
        float _1483 = fma(_1472, cbModelParam._m0[31u].z, fma(_1471, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1470)) - _1443;
        float _1484 = fma(_1472, cbModelParam._m0[32u].z, fma(_1471, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1470)) - _1447;
        float _1488 = inversesqrt(dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484)));
        float _1501 = ((_1488 * _1482) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1439 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1488 * _1483) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1443 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1488 * _1484) / cbModelParam._m0[35u].z) + ((((((_1447 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1501, _1502, _1503), 0.0);
        float _1538 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1505.x + (-0.5));
        float _1540 = _1538 * (_1505.y + (-0.5));
        float _1541 = _1538 * (_1505.z + (-0.5));
        float _1548 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1512.x + (-0.5));
        float _1550 = _1548 * (_1512.y + (-0.5));
        float _1551 = _1548 * (_1512.z + (-0.5));
        float _1558 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1519.x + (-0.5));
        float _1560 = _1558 * (_1519.y + (-0.5));
        float _1561 = _1558 * (_1519.z + (-0.5));
        float _1568 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1526.x + (-0.5));
        float _1570 = _1568 * (_1526.y + (-0.5));
        float _1571 = _1568 * (_1526.z + (-0.5));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = _1539 * 0.5;
        float _1576 = _1549 * 0.5;
        float _1577 = _1559 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_817, _818, _819), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4402 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4413 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4424 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_1602 + 1.0))) + _1607) * _1572;
        float _1617 = _1540 * 0.5;
        float _1618 = _1550 * 0.5;
        float _1619 = _1560 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_817, _818, _819), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4457 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1644 + 1.0))) + _1649) * _1573;
        float _1659 = _1541 * 0.5;
        float _1660 = _1551 * 0.5;
        float _1661 = _1561 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_817, _818, _819), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4490 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1686 + 1.0))) + _1691) * _1574;
        _1708 = _1541;
        _1709 = _1540;
        _1710 = _1539;
        _1711 = _1551;
        _1712 = _1550;
        _1713 = _1549;
        _1714 = _1561;
        _1715 = _1560;
        _1716 = _1559;
        _1717 = _1574;
        _1718 = _1573;
        _1719 = _1572;
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
    }
    else
    {
        _1708 = _1398;
        _1709 = _1398;
        _1710 = _1398;
        _1711 = _1398;
        _1712 = _1398;
        _1713 = _1398;
        _1714 = _1398;
        _1715 = _1398;
        _1716 = _1398;
        _1717 = _1398;
        _1718 = _1398;
        _1719 = _1398;
        _1720 = 0.0;
        _1721 = 0.0;
        _1722 = 0.0;
    }
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1410)) + _1410;
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1411)) + _1411;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1412)) + _1412;
    float _1755 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1732));
    float _1776 = _1003 * 0.5;
    float _1777 = _1004 * 0.5;
    float _1778 = _1005 * 0.5;
    float _1779 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1782 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1785 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1819;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1792 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1397, _1401, _1404, _1407));
        float _1796 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1800 = dot(vec4(_1776, _1777, _1778, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1807 = dot(vec4(cbModelParam._m0[39u]), vec4(_1776, _1777, _1778, 1.0));
        _1819 = dot(vec3(isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1807) ? 0.0 : (isnan(0.0) ? _1807 : max(0.0, _1807))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1819 = 1.0;
    }
    float _1830;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1821 = dot(vec4(cbModelParam._m0[40u]), vec4(_1776, _1777, _1778, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1821) ? 0.0 : (isnan(0.0) ? _1821 : max(0.0, _1821))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1834 = (_1830 * cbModelParam._m0[1u].x) + (_1819 * (1.0 - cbModelParam._m0[1u].x));
    float _1844 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _820);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1844 : min(cbModelParam._m0[25u].z, _1844));
    float _1925;
    float _1927;
    float _1929;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1892 = fma(_1067, cbModelParam._m0[13u].z, fma(_1063, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1059)) + cbModelParam._m0[13u].w;
        float _1896 = fma(_1067, cbModelParam._m0[14u].z, fma(_1063, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1059)) + cbModelParam._m0[14u].w;
        float _1900 = fma(_1067, cbModelParam._m0[15u].z, fma(_1063, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1059)) + cbModelParam._m0[15u].w;
        float _1903 = fma(_1005, cbModelParam._m0[13u].z, fma(_1004, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003));
        float _1906 = fma(_1005, cbModelParam._m0[14u].z, fma(_1004, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003));
        float _1909 = fma(_1005, cbModelParam._m0[15u].z, fma(_1004, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003));
        float _1937;
        if (_1903 > 0.0)
        {
            _1937 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1937 = frontier_phi_17_15_ladder;
        }
        float _2108;
        if (_1906 > 0.0)
        {
            _2108 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2108 = frontier_phi_26_22_ladder;
        }
        float _2403;
        if (_1909 > 0.0)
        {
            _2403 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2403 = frontier_phi_38_33_ladder;
        }
        float _2405 = isnan(_2108) ? _1937 : (isnan(_1937) ? _2108 : min(_1937, _2108));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1903) + _1892;
        float _2411 = (_2406 * _1906) + _1896;
        float _2412 = (_2406 * _1909) + _1900;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2413;
        float _2417 = _2413 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 > _2417) || ((_2411 < _2415) || ((_2410 < _2415) || (_2410 > _2417))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2412, cbModelParam._m0[9u].z, fma(_2411, cbModelParam._m0[9u].y, _2410 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2412, cbModelParam._m0[10u].z, fma(_2411, cbModelParam._m0[10u].y, _2410 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2412, cbModelParam._m0[11u].z, fma(_2411, cbModelParam._m0[11u].y, _2410 * cbModelParam._m0[11u].x))), _1845);
            frontier_phi_16_38_ladder = _2557.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2557.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2557.x * cbModelParam._m0[1u].y;
        }
        _1925 = frontier_phi_16_38_ladder_2;
        _1927 = frontier_phi_16_38_ladder_1;
        _1929 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1913 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1003, _1004, _1005), _1845);
        _1925 = _1913.x * cbModelParam._m0[1u].y;
        _1927 = _1913.y * cbModelParam._m0[1u].y;
        _1929 = _1913.z * cbModelParam._m0[1u].y;
    }
    float _1933 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _820);
    float _1934 = isnan(_1933) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1933 : min(cbModelParam._m0[25u].w, _1933));
    float _2023;
    float _2025;
    float _2027;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1987 = fma(_1067, cbModelParam._m0[21u].z, fma(_1063, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1059)) + cbModelParam._m0[21u].w;
        float _1991 = fma(_1067, cbModelParam._m0[22u].z, fma(_1063, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1059)) + cbModelParam._m0[22u].w;
        float _1995 = fma(_1067, cbModelParam._m0[23u].z, fma(_1063, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1059)) + cbModelParam._m0[23u].w;
        float _1998 = fma(_1005, cbModelParam._m0[21u].z, fma(_1004, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003));
        float _2001 = fma(_1005, cbModelParam._m0[22u].z, fma(_1004, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003));
        float _2004 = fma(_1005, cbModelParam._m0[23u].z, fma(_1004, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003));
        float _2113;
        if (_1998 > 0.0)
        {
            _2113 = abs((1.0 - _1987) / _1998);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1987 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2113 = frontier_phi_28_24_ladder;
        }
        float _2430;
        if (_2001 > 0.0)
        {
            _2430 = abs((1.0 - _1991) / _2001);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1991 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2430 = frontier_phi_40_35_ladder;
        }
        float _2768;
        if (_2004 > 0.0)
        {
            _2768 = abs((1.0 - _1995) / _2004);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1995 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2768 = frontier_phi_50_47_ladder;
        }
        float _2770 = isnan(_2430) ? _2113 : (isnan(_2113) ? _2430 : min(_2113, _2430));
        float _2771 = isnan(_2768) ? _2770 : (isnan(_2770) ? _2768 : min(_2770, _2768));
        float _2775 = (_2771 * _1998) + _1987;
        float _2776 = (_2771 * _2001) + _1991;
        float _2777 = (_2771 * _2004) + _1995;
        float _2778 = _2771 * 9.9999997473787516355514526367188e-05;
        float _2779 = (-1.0) - _2778;
        float _2781 = _2778 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2777 > _2781) || ((_2777 < _2779) || ((_2776 > _2781) || ((_2776 < _2779) || ((_2775 < _2779) || (_2775 > _2781))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2777, cbModelParam._m0[17u].z, fma(_2776, cbModelParam._m0[17u].y, _2775 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2777, cbModelParam._m0[18u].z, fma(_2776, cbModelParam._m0[18u].y, _2775 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2777, cbModelParam._m0[19u].z, fma(_2776, cbModelParam._m0[19u].y, _2775 * cbModelParam._m0[19u].x))), _1934);
            frontier_phi_25_50_ladder = _2899.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2899.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2899.x * cbModelParam._m0[1u].z;
        }
        _2023 = frontier_phi_25_50_ladder_2;
        _2025 = frontier_phi_25_50_ladder_1;
        _2027 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2007 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1003, _1004, _1005), _1934);
        _2023 = _2007.x * cbModelParam._m0[1u].z;
        _2025 = _2007.y * cbModelParam._m0[1u].z;
        _2027 = _2007.z * cbModelParam._m0[1u].z;
    }
    float _2040 = (((_1030 * _979) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2023 - _1925)) + _1925);
    float _2042 = (((_1030 * _981) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2025 - _1927)) + _1927);
    float _2044 = (((_1030 * _982) + _1031) * _995) * ((cbModelParam._m0[1u].w * (_2027 - _1929)) + _1929);
    float _2047 = fma(_2044, cbSceneParam._m0[89u].z, fma(_2042, cbSceneParam._m0[89u].y, _2040 * cbSceneParam._m0[89u].x));
    float _2050 = fma(_2044, cbSceneParam._m0[90u].z, fma(_2042, cbSceneParam._m0[90u].y, _2040 * cbSceneParam._m0[90u].x));
    float _2053 = fma(_2044, cbSceneParam._m0[91u].z, fma(_2042, cbSceneParam._m0[91u].y, _2040 * cbSceneParam._m0[91u].x));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2095 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2099 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2100 = _2087 / _2099;
    float _2101 = _2091 / _2099;
    float _2102 = _2095 / _2099;
    float _2249;
    float _2250;
    float _2251;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2129 = ((uint(_2102 > cbSceneParam._m0[59u].y) + uint(_2102 > cbSceneParam._m0[59u].x)) + uint(_2102 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2130 = _2129 + 43u;
        uint _2138 = _2129 + 44u;
        uint _2146 = _2129 + 45u;
        uint _2154 = _2129 + 46u;
        float _2165 = fma(_2099, cbSceneParam._m0[_2130].w, fma(_2095, cbSceneParam._m0[_2130].z, fma(_2091, cbSceneParam._m0[_2130].y, _2087 * cbSceneParam._m0[_2130].x)));
        float _2169 = fma(_2099, cbSceneParam._m0[_2138].w, fma(_2095, cbSceneParam._m0[_2138].z, fma(_2091, cbSceneParam._m0[_2138].y, _2087 * cbSceneParam._m0[_2138].x)));
        float _2177 = fma(_2099, cbSceneParam._m0[_2154].w, fma(_2095, cbSceneParam._m0[_2154].z, fma(_2091, cbSceneParam._m0[_2154].y, _2087 * cbSceneParam._m0[_2154].x)));
        float _2182 = cbSceneParam._m0[33u].z * _2177;
        float _2184 = cbSceneParam._m0[33u].w * _2177;
        float _2187 = fma(_2099, cbSceneParam._m0[_2146].w, fma(_2095, cbSceneParam._m0[_2146].z, fma(_2091, cbSceneParam._m0[_2146].y, _2087 * cbSceneParam._m0[_2146].x))) / _2177;
        float _2235 = (cbSceneParam._m0[33u].x - sqrt(((_2101 * _2101) + (_2100 * _2100)) + (_2102 * _2102))) * cbSceneParam._m0[33u].y;
        float _4616 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2242 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2182 + _2165) / _2177, (_2184 + _2169) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2184 + _2165) / _2177, (_2169 - _2182) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 - _2182) / _2177, (_2169 - _2184) / _2177), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 - _2184) / _2177, (_2182 + _2169) / _2177), _2187), 0.0)).x), vec4(0.25)));
        _2249 = 1.0 - (_2242 * cbSceneParam._m0[34u].x);
        _2250 = 1.0 - (_2242 * cbSceneParam._m0[34u].y);
        _2251 = 1.0 - (_2242 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2249 = 1.0;
        _2250 = 1.0;
        _2251 = 1.0;
    }
    float _2315;
    float _2317;
    float _2319;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2303 = fma(_2099, cbSceneParam._m0[63u].w, fma(_2095, cbSceneParam._m0[63u].z, fma(_2091, cbSceneParam._m0[63u].y, _2087 * cbSceneParam._m0[63u].x)));
        float _2304 = fma(_2099, cbSceneParam._m0[60u].w, fma(_2095, cbSceneParam._m0[60u].z, fma(_2091, cbSceneParam._m0[60u].y, _2087 * cbSceneParam._m0[60u].x))) / _2303;
        float _2305 = fma(_2099, cbSceneParam._m0[61u].w, fma(_2095, cbSceneParam._m0[61u].z, fma(_2091, cbSceneParam._m0[61u].y, _2087 * cbSceneParam._m0[61u].x))) / _2303;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2304 >= cbSceneParam._m0[64u].x) && (_2305 >= cbSceneParam._m0[64u].y)) && (_2304 <= cbSceneParam._m0[64u].z)) && (_2305 <= cbSceneParam._m0[64u].w))
        {
            float _2443 = fma(_2099, cbSceneParam._m0[62u].w, fma(_2095, cbSceneParam._m0[62u].z, fma(_2091, cbSceneParam._m0[62u].y, _2087 * cbSceneParam._m0[62u].x))) / _2303;
            float _2447 = isnan(cbSceneParam._m0[41u].w) ? _2443 : (isnan(_2443) ? cbSceneParam._m0[41u].w : max(_2443, cbSceneParam._m0[41u].w));
            float _2490 = (cbSceneParam._m0[33u].x - sqrt(((_2101 * _2101) + (_2100 * _2100)) + (_2102 * _2102))) * cbSceneParam._m0[33u].y;
            float _4632 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
            float _2497 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2304, cbSceneParam._m0[33u].w + _2305), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2304, _2305 - cbSceneParam._m0[33u].z), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2304 - cbSceneParam._m0[33u].z, _2305 - cbSceneParam._m0[33u].w), _2447), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2304 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2305), _2447), 0.0)).x), vec4(0.25)));
            float _2501 = 1.0 - (_2497 * cbSceneParam._m0[34u].x);
            float _2502 = 1.0 - (_2497 * cbSceneParam._m0[34u].y);
            float _2503 = 1.0 - (_2497 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2503) ? _2251 : (isnan(_2251) ? _2503 : min(_2251, _2503));
            frontier_phi_37_36_ladder_1 = isnan(_2502) ? _2250 : (isnan(_2250) ? _2502 : min(_2250, _2502));
            frontier_phi_37_36_ladder_2 = isnan(_2501) ? _2249 : (isnan(_2249) ? _2501 : min(_2249, _2501));
        }
        else
        {
            frontier_phi_37_36_ladder = _2251;
            frontier_phi_37_36_ladder_1 = _2250;
            frontier_phi_37_36_ladder_2 = _2249;
        }
        _2315 = frontier_phi_37_36_ladder_2;
        _2317 = frontier_phi_37_36_ladder_1;
        _2319 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2315 = _2249;
        _2317 = _2250;
        _2319 = _2251;
    }
    uvec4 _2324 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2326 = _2324.x * 14u;
    uint _2327 = _2326 + 13u;
    float _2334 = _995 + (-1.0);
    float _2339 = (cbLight._m0[_2327].x * _2334) + 1.0;
    float _2340 = (cbLight._m0[_2327].y * _2334) + 1.0;
    float _2341 = (cbLight._m0[_2327].z * _2334) + 1.0;
    float _2342 = (cbLight._m0[_2327].w * _2334) + 1.0;
    uint _2343 = _2326 + 5u;
    float _2349 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
    uint _2353 = _2326 + 4u;
    float _2362 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
    uint _2366 = _2326 | 1u;
    float _2377 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_817, _818, _819));
    float _2380 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_817, _818, _819));
    float _4668 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _4679 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2385 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * 0.3183098733425140380859375;
    float _2387 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * 0.3183098733425140380859375;
    float _2394 = ((cbLight._m0[_2343].x * _2349) * _2387) + (((cbLight._m0[_2353].x * _2315) * _2362) * _2385);
    float _2395 = ((_2349 * cbLight._m0[_2343].y) * _2387) + (((cbLight._m0[_2353].y * _2317) * _2362) * _2385);
    float _2396 = ((_2349 * cbLight._m0[_2343].z) * _2387) + (((cbLight._m0[_2353].z * _2319) * _2362) * _2385);
    uvec4 _2400 = floatBitsToUint(cbLight._m0[_2326 + 12u]);
    bool _2402 = _2400.x == 0u;
    float _2504;
    float _2506;
    float _2508;
    if (_2402)
    {
        _2504 = _2394;
        _2506 = _2395;
        _2508 = _2396;
    }
    else
    {
        uint _2512 = _2326 + 6u;
        float _2528 = (dot(vec3(cbLight._m0[_2326 + 2u].xyz), vec3(_817, _818, _819)) * 0.5) + 0.5;
        float _2529 = _2528 * _2528;
        float _4690 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2530 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2531 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2504 = (((cbLight._m0[_2512].x * 0.3183098733425140380859375) * _2530) * _2531) + _2394;
        _2506 = (((cbLight._m0[_2512].y * 0.3183098733425140380859375) * _2530) * _2531) + _2395;
        _2508 = (((cbLight._m0[_2512].z * 0.3183098733425140380859375) * _2530) * _2531) + _2396;
    }
    bool _2511 = _2400.y == 0u;
    float _2566;
    float _2568;
    float _2570;
    if (_2511)
    {
        _2566 = _2504;
        _2568 = _2506;
        _2570 = _2508;
    }
    else
    {
        uint _2739 = _2326 + 7u;
        float _2755 = (dot(vec3(cbLight._m0[_2326 + 3u].xyz), vec3(_817, _818, _819)) * 0.5) + 0.5;
        float _2756 = _2755 * _2755;
        float _4706 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2757 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2758 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2566 = (((cbLight._m0[_2739].x * 0.3183098733425140380859375) * _2757) * _2758) + _2504;
        _2568 = (((cbLight._m0[_2739].y * 0.3183098733425140380859375) * _2757) * _2758) + _2506;
        _2570 = (((cbLight._m0[_2739].z * 0.3183098733425140380859375) * _2757) * _2758) + _2508;
    }
    uint _2573 = _2326 + 8u;
    float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _820) * 0.949999988079071044921875);
    float _2587 = _2586 * _2586;
    float _2588 = cbLight._m0[_2326].x + _897;
    float _2589 = cbLight._m0[_2326].y + _898;
    float _2590 = cbLight._m0[_2326].z + _899;
    float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
    float _2595 = _2594 * _2588;
    float _2596 = _2594 * _2589;
    float _2597 = _2594 * _2590;
    float _2598 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2326].xyz));
    float _4722 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2601 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _4733 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _2602 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2603 = dot(vec3(_817, _818, _819), vec3(_2595, _2596, _2597));
    float _4744 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2607 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2595, _2596, _2597));
    float _4755 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2611 = _2587 * _2587;
    float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
    float _2623 = exp2(log2(1.0 - (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) * 5.0);
    float _2624 = 0.959999978542327880859375 - _976;
    float _2626 = 0.959999978542327880859375 - _977;
    float _2627 = 0.959999978542327880859375 - _978;
    float _2634 = 1.0 - _2587;
    float _2645 = (0.5 / (((_2602 * ((_2601 * _2634) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2634) + _2587) * _2601))) * _2601;
    float _4766 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2647 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
    uint _2661 = _2326 + 9u;
    float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _820) * 0.949999988079071044921875);
    float _2673 = _2672 * _2672;
    float _2674 = cbLight._m0[_2366].x + _897;
    float _2675 = cbLight._m0[_2366].y + _898;
    float _2676 = cbLight._m0[_2366].z + _899;
    float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
    float _2681 = _2680 * _2674;
    float _2682 = _2680 * _2675;
    float _2683 = _2680 * _2676;
    float _2684 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2366].xyz));
    float _4777 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2687 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2688 = dot(vec3(_817, _818, _819), vec3(_2681, _2682, _2683));
    float _4788 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
    float _2692 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2681, _2682, _2683));
    float _4799 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2696 = _2673 * _2673;
    float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
    float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) * 5.0);
    float _2714 = 1.0 - _2673;
    float _2724 = (0.5 / (((_2602 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2714) + _2673) * _2687))) * _2687;
    float _4810 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2726 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
    float _2736 = (((((_2707 * _2624) + _979) * cbLight._m0[_2661].x) * _2726) * _2349) + ((((cbLight._m0[_2573].x * _2315) * ((_2623 * _2624) + _979)) * _2647) * _2362);
    float _2737 = (((((_2707 * _2626) + _981) * cbLight._m0[_2661].y) * _2726) * _2349) + ((((cbLight._m0[_2573].y * _2317) * ((_2623 * _2626) + _981)) * _2647) * _2362);
    float _2738 = (((((_2707 * _2627) + _982) * cbLight._m0[_2661].z) * _2726) * _2349) + ((((cbLight._m0[_2573].z * _2319) * ((_2623 * _2627) + _982)) * _2647) * _2362);
    float _2794;
    float _2796;
    float _2798;
    if (_2402)
    {
        _2794 = _2736;
        _2796 = _2737;
        _2798 = _2738;
    }
    else
    {
        uint _2800 = _2326 + 2u;
        uint _2804 = _2326 + 10u;
        float _2818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2800].w)) * _820) * 0.949999988079071044921875);
        float _2819 = _2818 * _2818;
        float _2820 = cbLight._m0[_2800].x + _897;
        float _2821 = cbLight._m0[_2800].y + _898;
        float _2822 = cbLight._m0[_2800].z + _899;
        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
        float _2827 = _2826 * _2820;
        float _2828 = _2826 * _2821;
        float _2829 = _2826 * _2822;
        float _2830 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2800].xyz));
        float _4821 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2834 = dot(vec3(_817, _818, _819), vec3(_2827, _2828, _2829));
        float _4832 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2838 = dot(vec3(cbLight._m0[_2800].xyz), vec3(_2827, _2828, _2829));
        float _4843 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2842 = _2819 * _2819;
        float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
        float _2853 = exp2(log2(1.0 - (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) * 5.0);
        float _2860 = 1.0 - _2819;
        float _2870 = (0.5 / (((_2602 * ((_2833 * _2860) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2860) + _2819) * _2833))) * _2833;
        float _4854 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2872 = (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
        float _2873 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
        _2794 = (((((_2853 * _2624) + _979) * cbLight._m0[_2804].x) * _2872) * _2873) + _2736;
        _2796 = (((((_2853 * _2626) + _981) * cbLight._m0[_2804].y) * _2872) * _2873) + _2737;
        _2798 = (((((_2853 * _2627) + _982) * cbLight._m0[_2804].z) * _2872) * _2873) + _2738;
    }
    float _2904;
    float _2906;
    float _2908;
    if (_2511)
    {
        _2904 = _2794;
        _2906 = _2796;
        _2908 = _2798;
    }
    else
    {
        uint _2915 = _2326 + 3u;
        uint _2919 = _2326 + 11u;
        float _2933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2915].w)) * _820) * 0.949999988079071044921875);
        float _2934 = _2933 * _2933;
        float _2935 = cbLight._m0[_2915].x + _897;
        float _2936 = cbLight._m0[_2915].y + _898;
        float _2937 = cbLight._m0[_2915].z + _899;
        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
        float _2942 = _2941 * _2935;
        float _2943 = _2941 * _2936;
        float _2944 = _2941 * _2937;
        float _2945 = dot(vec3(_817, _818, _819), vec3(cbLight._m0[_2915].xyz));
        float _4870 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2948 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
        float _2949 = dot(vec3(_817, _818, _819), vec3(_2942, _2943, _2944));
        float _4881 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2952 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
        float _2953 = dot(vec3(cbLight._m0[_2915].xyz), vec3(_2942, _2943, _2944));
        float _4892 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2957 = _2934 * _2934;
        float _2961 = ((_2952 * _2952) * (_2957 + (-1.0))) + 1.0;
        float _2968 = exp2(log2(1.0 - (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) * 5.0);
        float _2975 = 1.0 - _2934;
        float _2985 = (0.5 / (((_2602 * ((_2948 * _2975) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2975) + _2934) * _2948))) * _2948;
        float _4903 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2987 = (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2957 / ((_2961 * _2961) * 3.141590118408203125));
        float _2988 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2904 = (((((_2968 * _2624) + _979) * cbLight._m0[_2919].x) * _2987) * _2988) + _2794;
        _2906 = (((((_2968 * _2626) + _981) * cbLight._m0[_2919].y) * _2987) * _2988) + _2796;
        _2908 = (((((_2968 * _2627) + _982) * cbLight._m0[_2919].z) * _2987) * _2988) + _2798;
    }
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    if (_2324.y == 0u)
    {
        uvec4 _3009 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3010 = _3009.x;
        uint _3021 = uint((float(_3009.y) * floor(float(uint(cbSceneParam._m0[85u].y * _918) / _3010))) + floor(float(uint(cbSceneParam._m0[85u].x * _917) / _3010)));
        float _3031 = (log2(_2102 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3032 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        uint _3035 = uint(isnan(14.0) ? _3032 : (isnan(_3032) ? 14.0 : min(_3032, 14.0)));
        uvec4 _3040 = texelFetch(g_lightClusterGridBuffer, int(((_3035 << 2u) + (_3021 << 6u)) >> 2u));
        uint _3041 = _3040.x;
        uint _3042 = _3009.z;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        if (((((1u << ((_3042 >> 4u) & 15u)) + 4294967295u) & _3041) == 0u) || ((_3042 & 240u) == 0u))
        {
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
        }
        else
        {
            float _3122;
            float _3124;
            float _3126;
            float _3128;
            float _3130;
            float _3132;
            float _3274 = 0.0;
            float _3275 = 0.0;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            uint _3280 = 0u;
            uint _3289;
            bool _3290;
            for (;;)
            {
                _3289 = texelFetch(g_lightClassification, int((((_3035 << 5u) + (_3021 << 9u)) + (_3280 << 2u)) >> 2u)).x;
                _3290 = _3289 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3290)
                {
                    frontier_phi_71_pred = _3279;
                    frontier_phi_71_pred_1 = _3278;
                    frontier_phi_71_pred_2 = _3277;
                    frontier_phi_71_pred_3 = _3276;
                    frontier_phi_71_pred_4 = _3275;
                    frontier_phi_71_pred_5 = _3274;
                }
                else
                {
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    uint _3425;
                    _3419 = _3274;
                    _3420 = _3275;
                    _3421 = _3276;
                    _3422 = _3277;
                    _3423 = _3278;
                    _3424 = _3279;
                    _3425 = _3289;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    for (;;)
                    {
                        uint _3429 = uint(findLSB(_3425)) + (_3280 << 5u);
                        uint _3426 = (_3425 + 4294967295u) & _3425;
                        uint _3431 = _3429 * 48u;
                        vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 3u)).x));
                        uint _3451 = (_3429 * 48u) + 4u;
                        vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3451)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 3u)).x));
                        uint _3470 = (_3429 * 48u) + 8u;
                        vec3 _3481 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3470)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 2u)).x));
                        float _3485 = _3445.x - _2100;
                        float _3486 = _3445.y - _2101;
                        float _3487 = _3445.z - _2102;
                        float _3488 = dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487));
                        float _3491 = inversesqrt(_3488);
                        float _3492 = _3491 * _3485;
                        float _3493 = _3491 * _3486;
                        float _3494 = _3491 * _3487;
                        float _3495 = dot(vec3(_936, _939, _942), vec3(_3492, _3493, _3494));
                        float _3500 = 1.0 - (_3488 * _3445.w);
                        float _4929 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3501 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3502 = sqrt(_3488) * _3464.w;
                        float _3505 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                        float _3506 = _3505 * _3505;
                        float _3509 = ((1.0 - _3506) * _3495) + _3506;
                        float _3512 = _3502 * _3502;
                        float _3516 = ((isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0))) * _3501) / ((_3512 * 0.699999988079071044921875) + 1.0);
                        float _3520 = (-0.0) - _2100;
                        float _3521 = (-0.0) - _2101;
                        float _3522 = (-0.0) - _2102;
                        float _3526 = inversesqrt(dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522)));
                        float _3527 = _3526 * _3520;
                        float _3528 = _3526 * _3521;
                        float _3529 = _3526 * _3522;
                        float _3536 = exp2(log2(1.0 / ((_3512 * 3.5) + 5.0)) * 0.25);
                        float _3537 = 1.0 - _1011;
                        float _3544 = sqrt(1.0 - ((1.0 - (_3537 * _3537)) * (1.0 - (_3536 * _3536))));
                        float _3545 = _3544 * _3544;
                        float _3546 = _3545 * _3545;
                        float _3547 = _3527 + _3492;
                        float _3548 = _3528 + _3493;
                        float _3549 = _3529 + _3494;
                        float _3553 = inversesqrt(dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549)));
                        float _3557 = dot(vec3(_936, _939, _942), vec3(_3527, _3528, _3529));
                        float _4945 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3560 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                        float _3561 = dot(vec3(_936, _939, _942), vec3(_3553 * _3547, _3553 * _3548, _3553 * _3549));
                        float _4956 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3564 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                        float _3568 = ((_3564 * _3564) * (_3546 + (-1.0))) + 1.0;
                        float _3569 = _3505 * _3545;
                        float _3570 = _3569 * _3569;
                        float _3573 = ((1.0 - _3570) * _3495) + _3570;
                        float _4967 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3574 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                        float _3575 = 1.0 - _3545;
                        float _3585 = (0.5 / (((_3574 * ((_3560 * _3575) + _3545)) + 9.9999999392252902907785028219223e-09) + (((_3574 * _3575) + _3545) * _3560))) * _3574;
                        float _4978 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                        float _3596 = (((_3546 * 3.1415927410125732421875) * (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0)))) / ((_3568 * _3568) * ((_3512 * 2.1991131305694580078125) + 3.141590118408203125))) * _3501;
                        _3349 = (_3516 * _3464.x) + _3422;
                        _3350 = (_3516 * _3464.y) + _3423;
                        _3351 = (_3516 * _3464.z) + _3424;
                        _3346 = (_3596 * _3481.x) + _3419;
                        _3347 = (_3596 * _3481.y) + _3420;
                        _3348 = (_3596 * _3481.z) + _3421;
                        if (_3426 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3419 = _3346;
                            _3420 = _3347;
                            _3421 = _3348;
                            _3422 = _3349;
                            _3423 = _3350;
                            _3424 = _3351;
                            _3425 = _3426;
                        }
                    }
                    frontier_phi_71_pred = _3351;
                    frontier_phi_71_pred_1 = _3350;
                    frontier_phi_71_pred_2 = _3349;
                    frontier_phi_71_pred_3 = _3348;
                    frontier_phi_71_pred_4 = _3347;
                    frontier_phi_71_pred_5 = _3346;
                }
                _3132 = frontier_phi_71_pred;
                _3130 = frontier_phi_71_pred_1;
                _3128 = frontier_phi_71_pred_2;
                _3126 = frontier_phi_71_pred_3;
                _3124 = frontier_phi_71_pred_4;
                _3122 = frontier_phi_71_pred_5;
                uint _3281 = _3280 + 1u;
                if (_3281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3274 = _3122;
                    _3275 = _3124;
                    _3276 = _3126;
                    _3277 = _3128;
                    _3278 = _3130;
                    _3279 = _3132;
                    _3280 = _3281;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
        }
        uvec4 _3135 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3136 = _3135.z;
        uint _3138 = (_3136 >> 8u) & 15u;
        float _3242;
        float _3244;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        if (((4294967295u << _3138) & _3041) == 0u)
        {
            _3242 = _3121;
            _3244 = _3123;
            _3246 = _3125;
            _3248 = _3127;
            _3250 = _3129;
            _3252 = _3131;
        }
        else
        {
            float _3267 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
            float _3268 = _3267 * _2100;
            float _3269 = _3267 * _2101;
            float _3270 = _3267 * _2102;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3138 < ((_3136 >> 12u) & 15u))
            {
                float _3243;
                float _3245;
                float _3247;
                float _3249;
                float _3251;
                float _3253;
                float _3402 = _3121;
                float _3403 = _3123;
                float _3404 = _3125;
                float _3405 = _3127;
                float _3406 = _3129;
                float _3407 = _3131;
                uint _3408 = _3138;
                uint _3417;
                bool _3418;
                for (;;)
                {
                    _3417 = texelFetch(g_lightClassification, int((((_3035 << 5u) + (_3021 << 9u)) + (_3408 << 2u)) >> 2u)).x;
                    _3418 = _3417 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3418)
                    {
                        frontier_phi_82_pred = _3407;
                        frontier_phi_82_pred_1 = _3406;
                        frontier_phi_82_pred_2 = _3405;
                        frontier_phi_82_pred_3 = _3404;
                        frontier_phi_82_pred_4 = _3403;
                        frontier_phi_82_pred_5 = _3402;
                    }
                    else
                    {
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3623 = _3402;
                        float _3624 = _3403;
                        float _3625 = _3404;
                        float _3626 = _3405;
                        float _3627 = _3406;
                        float _3628 = _3407;
                        uint _3629 = _3417;
                        uint _3630;
                        vec4 _3655;
                        float _3656;
                        vec4 _3671;
                        vec3 _3683;
                        vec4 _3698;
                        vec4 _3713;
                        float _3759;
                        bool _3760;
                        for (;;)
                        {
                            uint _3640 = ((_3408 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3629));
                            _3630 = (_3629 + 4294967295u) & _3629;
                            uint _3642 = _3640 * 40u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            _3656 = _3655.w;
                            uint _3658 = (_3640 * 40u) + 4u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3640 * 40u) + 8u;
                            _3683 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x));
                            uint _3685 = (_3640 * 40u) + 16u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3700 = (_3640 * 40u) + 20u;
                            _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3715 = (_3640 * 40u) + 24u;
                            vec4 _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3734 = (_3640 * 40u) + 28u;
                            vec4 _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            _3759 = fma(_2102, _3747.z, fma(_2101, _3747.y, _3747.x * _2100)) + _3747.w;
                            _3760 = !((fma(_2102, _3728.z, fma(_2101, _3728.y, _3728.x * _2100)) + _3728.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3760)
                            {
                                float _3787 = _3655.x - _2100;
                                float _3788 = _3655.y - _2101;
                                float _3789 = _3655.z - _2102;
                                float _3790 = dot(vec3(_3787, _3788, _3789), vec3(_3787, _3788, _3789));
                                float _3793 = inversesqrt(_3790);
                                float _3794 = _3793 * _3787;
                                float _3795 = _3793 * _3788;
                                float _3796 = _3793 * _3789;
                                float _3800 = 1.0 - (_3790 / (_3656 * _3656));
                                float _4989 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3801 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3805 = sqrt(_3790) * _3671.w;
                                float _3807 = 1.39999997615814208984375 / (_3805 + 1.39999997615814208984375);
                                float _3808 = _3807 * _3807;
                                float _3811 = ((1.0 - _3808) * dot(vec3(_3794, _3795, _3796), vec3(_936, _939, _942))) + _3808;
                                float _3814 = _3805 * _3805;
                                float _3818 = (fma(_2102, _3698.z, fma(_2101, _3698.y, _3698.x * _2100)) + _3698.w) / _3759;
                                float _3819 = (fma(_2102, _3713.z, fma(_2101, _3713.y, _3713.x * _2100)) + _3713.w) / _3759;
                                float _3823 = 1.0 - dot(vec2(_3818, _3819), vec2(_3818, _3819));
                                float _5005 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3824 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                                float _3825 = _3824 * (((isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0))) * _3801) / ((_3814 * 0.699999988079071044921875) + 1.0));
                                float _3837 = exp2(log2(1.0 / ((_3814 * 3.5) + 5.0)) * 0.25);
                                float _3838 = 1.0 - _1011;
                                float _3845 = sqrt(1.0 - ((1.0 - (_3838 * _3838)) * (1.0 - (_3837 * _3837))));
                                float _3846 = _3845 * _3845;
                                float _3847 = _3846 * _3846;
                                float _3848 = _3794 - _3268;
                                float _3849 = _3795 - _3269;
                                float _3850 = _3796 - _3270;
                                float _3854 = inversesqrt(dot(vec3(_3848, _3849, _3850), vec3(_3848, _3849, _3850)));
                                float _3858 = dot(vec3(_936, _939, _942), vec3((-0.0) - _3268, (-0.0) - _3269, (-0.0) - _3270));
                                float _5016 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3861 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                                float _3862 = dot(vec3(_936, _939, _942), vec3(_3854 * _3848, _3854 * _3849, _3854 * _3850));
                                float _5027 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3865 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
                                float _3869 = ((_3865 * _3865) * (_3847 + (-1.0))) + 1.0;
                                float _3870 = _3807 * _3846;
                                float _3871 = _3870 * _3870;
                                float _3877 = ((1.0 - _3871) * dot(vec3(_936, _939, _942), vec3(_3794, _3795, _3796))) + _3871;
                                float _5038 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3878 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3879 = 1.0 - _3846;
                                float _3889 = (0.5 / (((_3878 * ((_3861 * _3879) + _3846)) + 9.9999999392252902907785028219223e-09) + (((_3878 * _3879) + _3846) * _3861))) * _3878;
                                float _5049 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3899 = (_3824 * _3801) * (((_3847 * 3.1415927410125732421875) * (isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0)))) / ((_3869 * _3869) * ((_3814 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3825 * _3671.z;
                                frontier_phi_88_pred_1 = _3825 * _3671.y;
                                frontier_phi_88_pred_2 = _3825 * _3671.x;
                                frontier_phi_88_pred_3 = _3899 * _3683.z;
                                frontier_phi_88_pred_4 = _3899 * _3683.y;
                                frontier_phi_88_pred_5 = _3899 * _3683.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3908 = frontier_phi_88_pred;
                            _3907 = frontier_phi_88_pred_1;
                            _3906 = frontier_phi_88_pred_2;
                            _3905 = frontier_phi_88_pred_3;
                            _3904 = frontier_phi_88_pred_4;
                            _3903 = frontier_phi_88_pred_5;
                            _3613 = _3906 + _3626;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            _3612 = _3905 + _3625;
                            if (_3630 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3630;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3615;
                        frontier_phi_82_pred_1 = _3614;
                        frontier_phi_82_pred_2 = _3613;
                        frontier_phi_82_pred_3 = _3612;
                        frontier_phi_82_pred_4 = _3611;
                        frontier_phi_82_pred_5 = _3610;
                    }
                    _3253 = frontier_phi_82_pred;
                    _3251 = frontier_phi_82_pred_1;
                    _3249 = frontier_phi_82_pred_2;
                    _3247 = frontier_phi_82_pred_3;
                    _3245 = frontier_phi_82_pred_4;
                    _3243 = frontier_phi_82_pred_5;
                    uint _3409 = _3408 + 1u;
                    if (_3409 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3402 = _3243;
                        _3403 = _3245;
                        _3404 = _3247;
                        _3405 = _3249;
                        _3406 = _3251;
                        _3407 = _3253;
                        _3408 = _3409;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3249;
                frontier_phi_63_64_ladder_1 = _3253;
                frontier_phi_63_64_ladder_2 = _3251;
                frontier_phi_63_64_ladder_3 = _3247;
                frontier_phi_63_64_ladder_4 = _3245;
                frontier_phi_63_64_ladder_5 = _3243;
            }
            else
            {
                frontier_phi_63_64_ladder = _3127;
                frontier_phi_63_64_ladder_1 = _3131;
                frontier_phi_63_64_ladder_2 = _3129;
                frontier_phi_63_64_ladder_3 = _3125;
                frontier_phi_63_64_ladder_4 = _3123;
                frontier_phi_63_64_ladder_5 = _3121;
            }
            _3242 = frontier_phi_63_64_ladder_5;
            _3244 = frontier_phi_63_64_ladder_4;
            _3246 = frontier_phi_63_64_ladder_3;
            _3248 = frontier_phi_63_64_ladder;
            _3250 = frontier_phi_63_64_ladder_2;
            _3252 = frontier_phi_63_64_ladder_1;
        }
        float _3257 = isnan(1.0) ? _995 : (isnan(_995) ? 1.0 : min(_995, 1.0));
        _3054 = (_3257 * _3248) + _2566;
        _3056 = (_3257 * _3250) + _2568;
        _3058 = (_3257 * _3252) + _2570;
        _3060 = ((_3242 * _979) * _3257) + _2904;
        _3062 = ((_3244 * _981) * _3257) + _2906;
        _3064 = ((_3246 * _982) * _3257) + _2908;
    }
    else
    {
        _3054 = _2566;
        _3056 = _2568;
        _3058 = _2570;
        _3060 = _2904;
        _3062 = _2906;
        _3064 = _2908;
    }
    float _5065 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _5076 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _5087 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _3081 = ((isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0))) * (_3054 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _995))) + ((_3060 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    float _3082 = ((isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0))) * (_3056 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _995))) + ((_3062 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    float _3083 = ((isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0))) * (_3058 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _995))) + ((_3064 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1834)) * cbPerFrame._m0[3u].x);
    uint _3084 = _252 + 6u;
    float _3092 = _917 / cbSceneParam._m0[86u].x;
    float _3093 = _918 / cbSceneParam._m0[86u].y;
    vec4 _3107 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3092, _3093, (log2((isnan(cbSceneParam._m0[77u].w) ? _839 : (isnan(_839) ? cbSceneParam._m0[77u].w : min(_839, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3109 = _3107.x;
    float _3110 = _3107.y;
    float _3111 = _3107.z;
    float _3112 = _3107.w;
    float _3184;
    float _3186;
    float _3188;
    float _3190;
    if (_839 > cbSceneParam._m0[78u].w)
    {
        float _3146 = isnan(_839) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _839 : min(cbSceneParam._m0[80u].w, _839));
        float _3147 = _3146 / _839;
        float _3158 = _3147 * _890;
        float _3159 = _891 * _3147;
        float _3160 = (-0.0) - _3159;
        float _3162 = _3147 * _892;
        float _3164 = (cbSceneParam._m0[77u].w * _3160) / _3146;
        float _3165 = _3164 + cbSceneParam._m0[79u].w;
        float _3166 = cbSceneParam._m0[79u].w - _3159;
        float _3172 = sqrt(((_3158 * _3158) + (_3159 * _3159)) + (_3162 * _3162));
        float _3175 = (1.0 - (cbSceneParam._m0[77u].w / _3146)) * _3172;
        float _3180 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3182 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3359;
        if (abs((_3160 - _3164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3359 = ((((_3165 > 0.0) ? exp2(_3180 * _3165) : (2.0 - exp2(_3182 * _3165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3175;
        }
        else
        {
            float _3303 = 1.0 / cbSceneParam._m0[80u].x;
            float _3304 = isnan(_3166) ? _3165 : (isnan(_3165) ? _3166 : max(_3165, _3166));
            float _3305 = isnan(_3166) ? _3165 : (isnan(_3165) ? _3166 : min(_3165, _3166));
            float _3314 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : min(_3304, 0.0));
            float _3315 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : min(_3305, 0.0));
            _3359 = ((abs(_3172 / _3160) * cbSceneParam._m0[80u].y) * ((((_3314 - _3315) * 2.0) - ((exp2(_3180 * (isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0)))) - exp2(_3180 * (isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0))))) * _3303)) - ((exp2(_3182 * _3314) - exp2(_3182 * _3315)) * _3303))) + (_3175 * cbSceneParam._m0[80u].z);
        }
        vec4 _3361 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3092, _3093, 1.0), 0.0);
        float _3370 = exp2((_3359 * (-1.44269502162933349609375)) * (1.0 - _3361.w));
        float _3371 = log2(_3370);
        float _3387 = log2(_3112);
        _3184 = (exp2(_3387 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3371 * cbSceneParam._m0[78u].x)) * _3361.x) / cbSceneParam._m0[78u].x)) + _3109;
        _3186 = (exp2(_3387 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3371 * cbSceneParam._m0[78u].y)) * _3361.y) / cbSceneParam._m0[78u].y)) + _3110;
        _3188 = (exp2(_3387 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3371 * cbSceneParam._m0[78u].z)) * _3361.z) / cbSceneParam._m0[78u].z)) + _3111;
        _3190 = _3370 * _3112;
    }
    else
    {
        _3184 = _3109;
        _3186 = _3110;
        _3188 = _3111;
        _3190 = _3112;
    }
    bool _3397;
    vec4 _3200;
    vec4 _3222;
    float _3224;
    float _3228;
    float _3229;
    float _3230;
    float _3231;
    bool _3241;
    for (;;)
    {
        _3200 = cbMatDynParam._m0[0u];
        float _3202 = roundEven(_3200.y);
        bool _3203 = _3202 == 3.0;
        float _3204 = log2(_3190);
        float _3211 = exp2(_3204 * cbSceneParam._m0[78u].x) * _3081;
        float _3212 = exp2(_3204 * cbSceneParam._m0[78u].y) * _3082;
        float _3213 = exp2(_3204 * cbSceneParam._m0[78u].z) * _3083;
        float _3220 = _906 + (-0.5);
        _3222 = cbMtdParam._m0[1u];
        _3224 = _3222.y * _3220;
        float _3227 = (_3202 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3228 = _3227 * (_3203 ? _3211 : (_3211 + (cbSceneParam._m0[72u].w * _3184)));
        _3229 = _3227 * (_3203 ? _3212 : (_3212 + (cbSceneParam._m0[72u].w * _3186)));
        _3230 = _3227 * (_3203 ? _3213 : (_3213 + (cbSceneParam._m0[72u].w * _3188)));
        _3231 = _3220 * 0.999000012874603271484375;
        _3241 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3241)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _3231) < 0.5)
            {
                _3397 = true;
                break;
            }
        }
        uint _3338 = _955 + uint(_3200.w);
        if ((cbInstanceData._m0[_3338].w < 1.0) && ((cbInstanceData._m0[_3338].w + _3231) < 0.5))
        {
            _3397 = true;
            break;
        }
        if ((_3224 + 1.0) < _3222.x)
        {
            _3397 = true;
            break;
        }
        _3397 = false;
        break;
    }
    float _3601;
    if (_3397)
    {
        discard_state = true;
        _3601 = 0.0;
    }
    else
    {
        _3601 = cbInstanceData._m0[_3084].w;
    }
    SV_Target.x = _3228;
    SV_Target.y = _3229;
    SV_Target.z = _3230;
    SV_Target.w = _3601;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3084].w;
    discard_exit();
}


