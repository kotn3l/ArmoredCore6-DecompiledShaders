#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1501;
float _4162;
float _4163;
float _4164;
float _4165;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _309.x * cbMtdParam._m0[11u].x;
    float _316 = _309.y * cbMtdParam._m0[11u].y;
    float _317 = _309.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _355.x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[23u].w) + _405) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4174 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _430 = (_423 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _431 = (_423 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _432 = (_423 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _449 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _481 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _495 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _355.y) * 2.0) - ((((_471 - _481) * cbMtdParam._m0[23u].w) + _481) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4185 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _503 = (_496 * ((_449.x * cbMtdParam._m0[13u].x) - _430)) + _430;
    float _504 = (_496 * ((_449.y * cbMtdParam._m0[13u].y) - _431)) + _431;
    float _505 = (_496 * ((_449.z * cbMtdParam._m0[13u].z) - _432)) + _432;
    vec4 _524 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _563 = _561.x;
    float _564 = _561.y;
    float _565 = _561.z;
    float _572 = ((_544.x - _563) * _423) + _563;
    float _573 = ((_544.y - _564) * _423) + _564;
    float _574 = ((_544.z - _565) * _423) + _565;
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _599 = ((_586.z - _574) * _496) + _574;
    float _602 = ((((_586.x - _572) * _496) + _572) * 2.0) + (-1.0);
    float _604 = ((((_586.y - _573) * _496) + _573) * 2.0) + (-1.0);
    float _605 = dot(vec2(_602, _604), vec2(_602, _604));
    float _4196 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _610 = sqrt(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _651 = _649.x;
    float _652 = 1.0 - _651;
    float _661 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _664 = ((isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : min(_661, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _673 = (_664 - ((((((_651 - _652) * cbMtdParam._m0[24u].z) + _652) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _664))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4217 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _681 = (_674 * ((_524.x * cbMtdParam._m0[18u].x) - _503)) + _503;
    float _682 = (_674 * ((_524.y * cbMtdParam._m0[18u].y) - _504)) + _504;
    float _683 = (_674 * ((_524.z * cbMtdParam._m0[18u].z) - _505)) + _505;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _697 = _695.x;
    float _698 = 1.0 - _697;
    float _723 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_697 - _698) * cbMtdParam._m0[24u].w) + _698) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4228 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _724 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _732 = ((((cbMtdParam._m0[10u].x - _681) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _724) + _681;
    float _733 = ((((cbMtdParam._m0[10u].y - _682) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _724) + _682;
    float _734 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _683)) * _724) + _683;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _762 = _760.x;
    float _780 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _762) * _423) + _762;
    float _797 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _780) * _496) + _780;
    float _801 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _797) * cbMtdParam._m0[19u].z) + _797;
    float _803 = _801 - (_801 * _674);
    float _805 = _803 - (_803 * _724);
    float _809 = (cbMtdParam._m0[19u].w * (_624.z - _599)) + _599;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _830 = (_823.x * 2.0) + (-1.0);
    float _831 = (_823.y * 2.0) + (-1.0);
    float _832 = dot(vec2(_830, _831), vec2(_830, _831));
    float _4239 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _840 = (_674 * (_823.z - _809)) + _809;
    float _843 = ((cbMtdParam._m0[23u].x - _840) * _724) + _840;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _868 = (_862.x * 2.0) + (-1.0);
    float _869 = (_862.y * 2.0) + (-1.0);
    float _870 = dot(vec2(_868, _869), vec2(_868, _869));
    float _4250 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _878 = (((_624.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _602;
    float _879 = (((_624.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _604;
    float _891 = (((_830 - _878) + (cbMtdParam._m0[21u].x * _878)) * _674) + _878;
    float _892 = (((_831 - _879) + (cbMtdParam._m0[21u].x * _879)) * _674) + _879;
    float _893 = (_674 * (sqrt(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) - _610)) + _610;
    float _904 = (((_868 - _891) + (_891 * cbMtdParam._m0[22u].z)) * _724) + _891;
    float _905 = (((_869 - _892) + (_892 * cbMtdParam._m0[22u].z)) * _724) + _892;
    float _906 = ((sqrt(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) - _893) * _724) + _893;
    float _908 = cbMtdParam._m0[22u].x + _624.w;
    float _911 = fma(_906, _256 * NORMAL.x, fma(_905, _263 * TANGENT.x, (_249 * _241) * _904));
    float _914 = fma(_906, _256 * NORMAL.y, fma(_905, _263 * TANGENT.y, (_249 * _242) * _904));
    float _917 = fma(_906, _256 * NORMAL.z, fma(_905, _263 * TANGENT.z, (_249 * _243) * _904));
    float _921 = inversesqrt(dot(vec3(_911, _914, _917), vec3(_911, _914, _917)));
    float _922 = _921 * _911;
    float _923 = _921 * _914;
    float _924 = _921 * _917;
    float _4261 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _925 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4283 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4294 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4305 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4316 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _930 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _944 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _994 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _984);
    float _995 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _984);
    float _996 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _984);
    float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
    float _1001 = _994 * _1000;
    float _1002 = _995 * _1000;
    float _1003 = _996 * _1000;
    vec4 _1008 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1010 = _1008.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1182 = sqrt(((_994 * _994) + (_995 * _995)) + (_996 * _996));
        float _1188 = (cbMatDynParam._m0[5u].x * _1182) + cbMatDynParam._m0[5u].y;
        float _4327 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1193 = (cbMatDynParam._m0[5u].z * _1182) + cbMatDynParam._m0[5u].w;
        float _4338 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) - _1189)) + _1189) < ((_1010 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1021 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1022 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1040 = fma(_924, cbSceneParam._m0[5u].z, fma(_923, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _922));
    float _1043 = fma(_924, cbSceneParam._m0[6u].z, fma(_923, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _922));
    float _1046 = fma(_924, cbSceneParam._m0[7u].z, fma(_923, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _922));
    uint _1059 = _269 + 9u;
    uint _1060 = _1059 + uint(cbMatDynParam._m0[0u].w);
    float _1066 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * cbInstanceData._m0[_1060].x;
    float _1067 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * cbInstanceData._m0[_1060].y;
    float _1068 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * cbInstanceData._m0[_1060].z;
    float _4349 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _4360 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _4371 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _1072 = 1.0 - _930;
    float _1073 = _1069 * _1072;
    float _1074 = _1070 * _1072;
    float _1075 = _1071 * _1072;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _930;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _930;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _930;
    float _1083 = _1080 + 0.039999999105930328369140625;
    float _1085 = _1081 + 0.039999999105930328369140625;
    float _1086 = _1082 + 0.039999999105930328369140625;
    vec4 _1095 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1021, cbSceneParam._m0[86u].y * _1022));
    float _1099 = ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * TEXCOORD_5.w) * _1095.x;
    float _1100 = dot(vec3(_922, _923, _924), vec3(_1001, _1002, _1003));
    float _1103 = _1100 * 2.0;
    float _1107 = (_1103 * _922) - _1001;
    float _1108 = (_1103 * _923) - _1002;
    float _1109 = (_1103 * _924) - _1003;
    float _1113 = abs(dot(vec3(_1001, _1002, _1003), vec3(_922, _923, _924)));
    float _4382 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1115 = sqrt(_925);
    float _1128 = exp2((_1115 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1115 * 3.0));
    float _1134 = (1.0 - _1128) * ((_1115 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1135 = _1128 * _1115;
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1500;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1225 = fma(_1171, cbModelParam._m0[26u].z, fma(_1167, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163));
        float _1229 = fma(_1171, cbModelParam._m0[27u].z, fma(_1167, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163));
        float _1233 = fma(_1171, cbModelParam._m0[28u].z, fma(_1167, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163));
        float _1258 = _1163 + _922;
        float _1259 = _1167 + _923;
        float _1260 = _1171 + _924;
        float _1270 = fma(_1260, cbModelParam._m0[26u].z, fma(_1259, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1258)) - _1225;
        float _1271 = fma(_1260, cbModelParam._m0[27u].z, fma(_1259, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1258)) - _1229;
        float _1272 = fma(_1260, cbModelParam._m0[28u].z, fma(_1259, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1258)) - _1233;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1225 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1229 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[34u].z) + ((((((_1233 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1328 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1294.x + (-0.5));
        float _1330 = _1328 * (_1294.y + (-0.5));
        float _1331 = _1328 * (_1294.z + (-0.5));
        float _1338 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1301.x + (-0.5));
        float _1340 = _1338 * (_1301.y + (-0.5));
        float _1341 = _1338 * (_1301.z + (-0.5));
        float _1348 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1308.x + (-0.5));
        float _1350 = _1348 * (_1308.y + (-0.5));
        float _1351 = _1348 * (_1308.z + (-0.5));
        float _1358 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1315.x + (-0.5));
        float _1360 = _1358 * (_1315.y + (-0.5));
        float _1361 = _1358 * (_1315.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1382 = (dot(vec3(_922, _923, _924), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1392 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4430 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1394 + 1.0))) + _1399) * _1362;
        float _1409 = _1330 * 0.5;
        float _1410 = _1340 * 0.5;
        float _1411 = _1350 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_922, _923, _924), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4463 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1436 + 1.0))) + _1441) * _1363;
        float _1451 = _1331 * 0.5;
        float _1452 = _1341 * 0.5;
        float _1453 = _1351 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_922, _923, _924), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4496 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1478 + 1.0))) + _1483) * _1364;
        _1500 = _1331;
        _1502 = _1330;
        _1503 = _1329;
        _1504 = _1341;
        _1505 = _1340;
        _1506 = _1339;
        _1507 = _1351;
        _1508 = _1350;
        _1509 = _1349;
        _1510 = _1364;
        _1511 = _1363;
        _1512 = _1362;
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
    }
    else
    {
        _1500 = _1501;
        _1502 = _1501;
        _1503 = _1501;
        _1504 = _1501;
        _1505 = _1501;
        _1506 = _1501;
        _1507 = _1501;
        _1508 = _1501;
        _1509 = _1501;
        _1510 = _1501;
        _1511 = _1501;
        _1512 = _1501;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1542 = fma(_1171, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163));
        float _1546 = fma(_1171, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163));
        float _1550 = fma(_1171, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163));
        float _1573 = _1163 + _922;
        float _1574 = _1167 + _923;
        float _1575 = _1171 + _924;
        float _1585 = fma(_1575, cbModelParam._m0[30u].z, fma(_1574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1573)) - _1542;
        float _1586 = fma(_1575, cbModelParam._m0[31u].z, fma(_1574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1573)) - _1546;
        float _1587 = fma(_1575, cbModelParam._m0[32u].z, fma(_1574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1573)) - _1550;
        float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
        float _1604 = ((_1591 * _1585) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1542 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1591 * _1586) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1546 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1591 * _1587) / cbModelParam._m0[35u].z) + ((((((_1550 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        float _1641 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1608.x + (-0.5));
        float _1643 = _1641 * (_1608.y + (-0.5));
        float _1644 = _1641 * (_1608.z + (-0.5));
        float _1651 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1615.x + (-0.5));
        float _1653 = _1651 * (_1615.y + (-0.5));
        float _1654 = _1651 * (_1615.z + (-0.5));
        float _1661 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1622.x + (-0.5));
        float _1663 = _1661 * (_1622.y + (-0.5));
        float _1664 = _1661 * (_1622.z + (-0.5));
        float _1671 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1629.x + (-0.5));
        float _1673 = _1671 * (_1629.y + (-0.5));
        float _1674 = _1671 * (_1629.z + (-0.5));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = _1642 * 0.5;
        float _1679 = _1652 * 0.5;
        float _1680 = _1662 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_922, _923, _924), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4537 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4548 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4559 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_1705 + 1.0))) + _1710) * _1675;
        float _1720 = _1643 * 0.5;
        float _1721 = _1653 * 0.5;
        float _1722 = _1663 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_922, _923, _924), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4570 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4581 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4592 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_1747 + 1.0))) + _1752) * _1676;
        float _1762 = _1644 * 0.5;
        float _1763 = _1654 * 0.5;
        float _1764 = _1664 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_922, _923, _924), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4603 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4614 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4625 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_1789 + 1.0))) + _1794) * _1677;
        _1811 = _1644;
        _1812 = _1643;
        _1813 = _1642;
        _1814 = _1654;
        _1815 = _1653;
        _1816 = _1652;
        _1817 = _1664;
        _1818 = _1663;
        _1819 = _1662;
        _1820 = _1677;
        _1821 = _1676;
        _1822 = _1675;
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
    }
    else
    {
        _1811 = _1501;
        _1812 = _1501;
        _1813 = _1501;
        _1814 = _1501;
        _1815 = _1501;
        _1816 = _1501;
        _1817 = _1501;
        _1818 = _1501;
        _1819 = _1501;
        _1820 = _1501;
        _1821 = _1501;
        _1822 = _1501;
        _1823 = 0.0;
        _1824 = 0.0;
        _1825 = 0.0;
    }
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1513)) + _1513;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1514)) + _1514;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1515)) + _1515;
    float _1858 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1836, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1836, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1836, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1835));
    float _1879 = _1107 * 0.5;
    float _1880 = _1108 * 0.5;
    float _1881 = _1109 * 0.5;
    float _1882 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1885 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1888 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1922;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1895 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1500, _1504, _1507, _1510));
        float _1899 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1502, _1505, _1508, _1511));
        float _1903 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1503, _1506, _1509, _1512));
        float _1910 = dot(vec4(cbModelParam._m0[39u]), vec4(_1879, _1880, _1881, 1.0));
        _1922 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1922 = 1.0;
    }
    float _1933;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1924 = dot(vec4(cbModelParam._m0[40u]), vec4(_1879, _1880, _1881, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1924) ? 0.0 : (isnan(0.0) ? _1924 : max(0.0, _1924))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1937 = (_1933 * cbModelParam._m0[1u].x) + (_1922 * (1.0 - cbModelParam._m0[1u].x));
    float _1947 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _925);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1947 : min(cbModelParam._m0[25u].z, _1947));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1995 = fma(_1171, cbModelParam._m0[13u].z, fma(_1167, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163)) + cbModelParam._m0[13u].w;
        float _1999 = fma(_1171, cbModelParam._m0[14u].z, fma(_1167, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163)) + cbModelParam._m0[14u].w;
        float _2003 = fma(_1171, cbModelParam._m0[15u].z, fma(_1167, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163)) + cbModelParam._m0[15u].w;
        float _2006 = fma(_1109, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1107));
        float _2009 = fma(_1109, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1107));
        float _2012 = fma(_1109, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1107));
        float _2040;
        if (_2006 > 0.0)
        {
            _2040 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2040 = frontier_phi_17_15_ladder;
        }
        float _2211;
        if (_2009 > 0.0)
        {
            _2211 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2211 = frontier_phi_26_22_ladder;
        }
        float _2506;
        if (_2012 > 0.0)
        {
            _2506 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2506 = frontier_phi_38_33_ladder;
        }
        float _2508 = isnan(_2211) ? _2040 : (isnan(_2040) ? _2211 : min(_2040, _2211));
        float _2509 = isnan(_2506) ? _2508 : (isnan(_2508) ? _2506 : min(_2508, _2506));
        float _2513 = (_2509 * _2006) + _1995;
        float _2514 = (_2509 * _2009) + _1999;
        float _2515 = (_2509 * _2012) + _2003;
        float _2516 = _2509 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2516;
        float _2520 = _2516 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 > _2520) || ((_2514 < _2518) || ((_2513 < _2518) || (_2513 > _2520))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2515, cbModelParam._m0[9u].z, fma(_2514, cbModelParam._m0[9u].y, _2513 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2515, cbModelParam._m0[10u].z, fma(_2514, cbModelParam._m0[10u].y, _2513 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2515, cbModelParam._m0[11u].z, fma(_2514, cbModelParam._m0[11u].y, _2513 * cbModelParam._m0[11u].x))), _1948);
            frontier_phi_16_38_ladder = _2660.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2660.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2660.x * cbModelParam._m0[1u].y;
        }
        _2028 = frontier_phi_16_38_ladder_2;
        _2030 = frontier_phi_16_38_ladder_1;
        _2032 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1107, _1108, _1109), _1948);
        _2028 = _2016.x * cbModelParam._m0[1u].y;
        _2030 = _2016.y * cbModelParam._m0[1u].y;
        _2032 = _2016.z * cbModelParam._m0[1u].y;
    }
    float _2036 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _925);
    float _2037 = isnan(_2036) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2036 : min(cbModelParam._m0[25u].w, _2036));
    float _2126;
    float _2128;
    float _2130;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2090 = fma(_1171, cbModelParam._m0[21u].z, fma(_1167, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163)) + cbModelParam._m0[21u].w;
        float _2094 = fma(_1171, cbModelParam._m0[22u].z, fma(_1167, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163)) + cbModelParam._m0[22u].w;
        float _2098 = fma(_1171, cbModelParam._m0[23u].z, fma(_1167, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163)) + cbModelParam._m0[23u].w;
        float _2101 = fma(_1109, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1107));
        float _2104 = fma(_1109, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1107));
        float _2107 = fma(_1109, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1107));
        float _2216;
        if (_2101 > 0.0)
        {
            _2216 = abs((1.0 - _2090) / _2101);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2090 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2216 = frontier_phi_28_24_ladder;
        }
        float _2533;
        if (_2104 > 0.0)
        {
            _2533 = abs((1.0 - _2094) / _2104);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2094 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2533 = frontier_phi_40_35_ladder;
        }
        float _2871;
        if (_2107 > 0.0)
        {
            _2871 = abs((1.0 - _2098) / _2107);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2098 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2871 = frontier_phi_50_47_ladder;
        }
        float _2873 = isnan(_2533) ? _2216 : (isnan(_2216) ? _2533 : min(_2216, _2533));
        float _2874 = isnan(_2871) ? _2873 : (isnan(_2873) ? _2871 : min(_2873, _2871));
        float _2878 = (_2874 * _2101) + _2090;
        float _2879 = (_2874 * _2104) + _2094;
        float _2880 = (_2874 * _2107) + _2098;
        float _2881 = _2874 * 9.9999997473787516355514526367188e-05;
        float _2882 = (-1.0) - _2881;
        float _2884 = _2881 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2880 > _2884) || ((_2880 < _2882) || ((_2879 > _2884) || ((_2879 < _2882) || ((_2878 < _2882) || (_2878 > _2884))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3002 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2880, cbModelParam._m0[17u].z, fma(_2879, cbModelParam._m0[17u].y, _2878 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2880, cbModelParam._m0[18u].z, fma(_2879, cbModelParam._m0[18u].y, _2878 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2880, cbModelParam._m0[19u].z, fma(_2879, cbModelParam._m0[19u].y, _2878 * cbModelParam._m0[19u].x))), _2037);
            frontier_phi_25_50_ladder = _3002.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3002.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3002.x * cbModelParam._m0[1u].z;
        }
        _2126 = frontier_phi_25_50_ladder_2;
        _2128 = frontier_phi_25_50_ladder_1;
        _2130 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2110 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1107, _1108, _1109), _2037);
        _2126 = _2110.x * cbModelParam._m0[1u].z;
        _2128 = _2110.y * cbModelParam._m0[1u].z;
        _2130 = _2110.z * cbModelParam._m0[1u].z;
    }
    float _2143 = (((_1134 * _1083) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2126 - _2028)) + _2028);
    float _2145 = (((_1134 * _1085) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2147 = (((_1134 * _1086) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2150 = fma(_2147, cbSceneParam._m0[89u].z, fma(_2145, cbSceneParam._m0[89u].y, _2143 * cbSceneParam._m0[89u].x));
    float _2153 = fma(_2147, cbSceneParam._m0[90u].z, fma(_2145, cbSceneParam._m0[90u].y, _2143 * cbSceneParam._m0[90u].x));
    float _2156 = fma(_2147, cbSceneParam._m0[91u].z, fma(_2145, cbSceneParam._m0[91u].y, _2143 * cbSceneParam._m0[91u].x));
    float _2190 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2194 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2203 = _2190 / _2202;
    float _2204 = _2194 / _2202;
    float _2205 = _2198 / _2202;
    float _2352;
    float _2353;
    float _2354;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2232 = ((uint(_2205 > cbSceneParam._m0[59u].y) + uint(_2205 > cbSceneParam._m0[59u].x)) + uint(_2205 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2233 = _2232 + 43u;
        uint _2241 = _2232 + 44u;
        uint _2249 = _2232 + 45u;
        uint _2257 = _2232 + 46u;
        float _2268 = fma(_2202, cbSceneParam._m0[_2233].w, fma(_2198, cbSceneParam._m0[_2233].z, fma(_2194, cbSceneParam._m0[_2233].y, _2190 * cbSceneParam._m0[_2233].x)));
        float _2272 = fma(_2202, cbSceneParam._m0[_2241].w, fma(_2198, cbSceneParam._m0[_2241].z, fma(_2194, cbSceneParam._m0[_2241].y, _2190 * cbSceneParam._m0[_2241].x)));
        float _2280 = fma(_2202, cbSceneParam._m0[_2257].w, fma(_2198, cbSceneParam._m0[_2257].z, fma(_2194, cbSceneParam._m0[_2257].y, _2190 * cbSceneParam._m0[_2257].x)));
        float _2285 = cbSceneParam._m0[33u].z * _2280;
        float _2287 = cbSceneParam._m0[33u].w * _2280;
        float _2290 = fma(_2202, cbSceneParam._m0[_2249].w, fma(_2198, cbSceneParam._m0[_2249].z, fma(_2194, cbSceneParam._m0[_2249].y, _2190 * cbSceneParam._m0[_2249].x))) / _2280;
        float _2338 = (cbSceneParam._m0[33u].x - sqrt(((_2204 * _2204) + (_2203 * _2203)) + (_2205 * _2205))) * cbSceneParam._m0[33u].y;
        float _4751 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2345 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2285 + _2268) / _2280, (_2287 + _2272) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2287 + _2268) / _2280, (_2272 - _2285) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 - _2285) / _2280, (_2272 - _2287) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 - _2287) / _2280, (_2285 + _2272) / _2280), _2290), 0.0)).x), vec4(0.25)));
        _2352 = 1.0 - (_2345 * cbSceneParam._m0[34u].x);
        _2353 = 1.0 - (_2345 * cbSceneParam._m0[34u].y);
        _2354 = 1.0 - (_2345 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2352 = 1.0;
        _2353 = 1.0;
        _2354 = 1.0;
    }
    float _2418;
    float _2420;
    float _2422;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2406 = fma(_2202, cbSceneParam._m0[63u].w, fma(_2198, cbSceneParam._m0[63u].z, fma(_2194, cbSceneParam._m0[63u].y, _2190 * cbSceneParam._m0[63u].x)));
        float _2407 = fma(_2202, cbSceneParam._m0[60u].w, fma(_2198, cbSceneParam._m0[60u].z, fma(_2194, cbSceneParam._m0[60u].y, _2190 * cbSceneParam._m0[60u].x))) / _2406;
        float _2408 = fma(_2202, cbSceneParam._m0[61u].w, fma(_2198, cbSceneParam._m0[61u].z, fma(_2194, cbSceneParam._m0[61u].y, _2190 * cbSceneParam._m0[61u].x))) / _2406;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2407 >= cbSceneParam._m0[64u].x) && (_2408 >= cbSceneParam._m0[64u].y)) && (_2407 <= cbSceneParam._m0[64u].z)) && (_2408 <= cbSceneParam._m0[64u].w))
        {
            float _2546 = fma(_2202, cbSceneParam._m0[62u].w, fma(_2198, cbSceneParam._m0[62u].z, fma(_2194, cbSceneParam._m0[62u].y, _2190 * cbSceneParam._m0[62u].x))) / _2406;
            float _2550 = isnan(cbSceneParam._m0[41u].w) ? _2546 : (isnan(_2546) ? cbSceneParam._m0[41u].w : max(_2546, cbSceneParam._m0[41u].w));
            float _2593 = (cbSceneParam._m0[33u].x - sqrt(((_2204 * _2204) + (_2203 * _2203)) + (_2205 * _2205))) * cbSceneParam._m0[33u].y;
            float _4767 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
            float _2600 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2407, cbSceneParam._m0[33u].w + _2408), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2407, _2408 - cbSceneParam._m0[33u].z), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2407 - cbSceneParam._m0[33u].z, _2408 - cbSceneParam._m0[33u].w), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2407 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2408), _2550), 0.0)).x), vec4(0.25)));
            float _2604 = 1.0 - (_2600 * cbSceneParam._m0[34u].x);
            float _2605 = 1.0 - (_2600 * cbSceneParam._m0[34u].y);
            float _2606 = 1.0 - (_2600 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2606) ? _2354 : (isnan(_2354) ? _2606 : min(_2354, _2606));
            frontier_phi_37_36_ladder_1 = isnan(_2605) ? _2353 : (isnan(_2353) ? _2605 : min(_2353, _2605));
            frontier_phi_37_36_ladder_2 = isnan(_2604) ? _2352 : (isnan(_2352) ? _2604 : min(_2352, _2604));
        }
        else
        {
            frontier_phi_37_36_ladder = _2354;
            frontier_phi_37_36_ladder_1 = _2353;
            frontier_phi_37_36_ladder_2 = _2352;
        }
        _2418 = frontier_phi_37_36_ladder_2;
        _2420 = frontier_phi_37_36_ladder_1;
        _2422 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2418 = _2352;
        _2420 = _2353;
        _2422 = _2354;
    }
    uvec4 _2427 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2429 = _2427.x * 14u;
    uint _2430 = _2429 + 13u;
    float _2437 = _1099 + (-1.0);
    float _2442 = (cbLight._m0[_2430].x * _2437) + 1.0;
    float _2443 = (cbLight._m0[_2430].y * _2437) + 1.0;
    float _2444 = (cbLight._m0[_2430].z * _2437) + 1.0;
    float _2445 = (cbLight._m0[_2430].w * _2437) + 1.0;
    uint _2446 = _2429 + 5u;
    float _2452 = isnan(1.0) ? _2443 : (isnan(_2443) ? 1.0 : min(_2443, 1.0));
    uint _2456 = _2429 + 4u;
    float _2465 = isnan(1.0) ? _2442 : (isnan(_2442) ? 1.0 : min(_2442, 1.0));
    uint _2469 = _2429 | 1u;
    float _2480 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_922, _923, _924));
    float _2483 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_922, _923, _924));
    float _4803 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _4814 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2488 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * 0.3183098733425140380859375;
    float _2490 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * 0.3183098733425140380859375;
    float _2497 = ((cbLight._m0[_2446].x * _2452) * _2490) + (((cbLight._m0[_2456].x * _2418) * _2465) * _2488);
    float _2498 = ((_2452 * cbLight._m0[_2446].y) * _2490) + (((cbLight._m0[_2456].y * _2420) * _2465) * _2488);
    float _2499 = ((_2452 * cbLight._m0[_2446].z) * _2490) + (((cbLight._m0[_2456].z * _2422) * _2465) * _2488);
    uvec4 _2503 = floatBitsToUint(cbLight._m0[_2429 + 12u]);
    bool _2505 = _2503.x == 0u;
    float _2607;
    float _2609;
    float _2611;
    if (_2505)
    {
        _2607 = _2497;
        _2609 = _2498;
        _2611 = _2499;
    }
    else
    {
        uint _2615 = _2429 + 6u;
        float _2631 = (dot(vec3(cbLight._m0[_2429 + 2u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2632 = _2631 * _2631;
        float _4825 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2633 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2634 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        _2607 = (((cbLight._m0[_2615].x * 0.3183098733425140380859375) * _2633) * _2634) + _2497;
        _2609 = (((cbLight._m0[_2615].y * 0.3183098733425140380859375) * _2633) * _2634) + _2498;
        _2611 = (((cbLight._m0[_2615].z * 0.3183098733425140380859375) * _2633) * _2634) + _2499;
    }
    bool _2614 = _2503.y == 0u;
    float _2669;
    float _2671;
    float _2673;
    if (_2614)
    {
        _2669 = _2607;
        _2671 = _2609;
        _2673 = _2611;
    }
    else
    {
        uint _2842 = _2429 + 7u;
        float _2858 = (dot(vec3(cbLight._m0[_2429 + 3u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2859 = _2858 * _2858;
        float _4841 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2860 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2861 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2669 = (((cbLight._m0[_2842].x * 0.3183098733425140380859375) * _2860) * _2861) + _2607;
        _2671 = (((cbLight._m0[_2842].y * 0.3183098733425140380859375) * _2860) * _2861) + _2609;
        _2673 = (((cbLight._m0[_2842].z * 0.3183098733425140380859375) * _2860) * _2861) + _2611;
    }
    uint _2676 = _2429 + 8u;
    float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _925) * 0.949999988079071044921875);
    float _2690 = _2689 * _2689;
    float _2691 = cbLight._m0[_2429].x + _1001;
    float _2692 = cbLight._m0[_2429].y + _1002;
    float _2693 = cbLight._m0[_2429].z + _1003;
    float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
    float _2698 = _2697 * _2691;
    float _2699 = _2697 * _2692;
    float _2700 = _2697 * _2693;
    float _2701 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2429].xyz));
    float _4857 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
    float _4868 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2705 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
    float _2706 = dot(vec3(_922, _923, _924), vec3(_2698, _2699, _2700));
    float _4879 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
    float _2710 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2698, _2699, _2700));
    float _4890 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2714 = _2690 * _2690;
    float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
    float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0)))) * 5.0);
    float _2727 = 0.959999978542327880859375 - _1080;
    float _2729 = 0.959999978542327880859375 - _1081;
    float _2730 = 0.959999978542327880859375 - _1082;
    float _2737 = 1.0 - _2690;
    float _2748 = (0.5 / (((_2705 * ((_2704 * _2737) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2737) + _2690) * _2704))) * _2704;
    float _4901 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2750 = (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
    uint _2764 = _2429 + 9u;
    float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _925) * 0.949999988079071044921875);
    float _2776 = _2775 * _2775;
    float _2777 = cbLight._m0[_2469].x + _1001;
    float _2778 = cbLight._m0[_2469].y + _1002;
    float _2779 = cbLight._m0[_2469].z + _1003;
    float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
    float _2784 = _2783 * _2777;
    float _2785 = _2783 * _2778;
    float _2786 = _2783 * _2779;
    float _2787 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2469].xyz));
    float _4912 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2790 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
    float _2791 = dot(vec3(_922, _923, _924), vec3(_2784, _2785, _2786));
    float _4923 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2794 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
    float _2795 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2784, _2785, _2786));
    float _4934 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2799 = _2776 * _2776;
    float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
    float _2810 = exp2(log2(1.0 - (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) * 5.0);
    float _2817 = 1.0 - _2776;
    float _2827 = (0.5 / (((_2705 * ((_2790 * _2817) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2817) + _2776) * _2790))) * _2790;
    float _4945 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
    float _2829 = (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
    float _2839 = (((((_2810 * _2727) + _1083) * cbLight._m0[_2764].x) * _2829) * _2452) + ((((cbLight._m0[_2676].x * _2418) * ((_2726 * _2727) + _1083)) * _2750) * _2465);
    float _2840 = (((((_2810 * _2729) + _1085) * cbLight._m0[_2764].y) * _2829) * _2452) + ((((cbLight._m0[_2676].y * _2420) * ((_2726 * _2729) + _1085)) * _2750) * _2465);
    float _2841 = (((((_2810 * _2730) + _1086) * cbLight._m0[_2764].z) * _2829) * _2452) + ((((cbLight._m0[_2676].z * _2422) * ((_2726 * _2730) + _1086)) * _2750) * _2465);
    float _2897;
    float _2899;
    float _2901;
    if (_2505)
    {
        _2897 = _2839;
        _2899 = _2840;
        _2901 = _2841;
    }
    else
    {
        uint _2903 = _2429 + 2u;
        uint _2907 = _2429 + 10u;
        float _2921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2903].w)) * _925) * 0.949999988079071044921875);
        float _2922 = _2921 * _2921;
        float _2923 = cbLight._m0[_2903].x + _1001;
        float _2924 = cbLight._m0[_2903].y + _1002;
        float _2925 = cbLight._m0[_2903].z + _1003;
        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
        float _2930 = _2929 * _2923;
        float _2931 = _2929 * _2924;
        float _2932 = _2929 * _2925;
        float _2933 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2903].xyz));
        float _4956 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
        float _2937 = dot(vec3(_922, _923, _924), vec3(_2930, _2931, _2932));
        float _4967 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
        float _2941 = dot(vec3(cbLight._m0[_2903].xyz), vec3(_2930, _2931, _2932));
        float _4978 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2945 = _2922 * _2922;
        float _2949 = ((_2940 * _2940) * (_2945 + (-1.0))) + 1.0;
        float _2956 = exp2(log2(1.0 - (isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0)))) * 5.0);
        float _2963 = 1.0 - _2922;
        float _2973 = (0.5 / (((_2705 * ((_2936 * _2963) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2963) + _2922) * _2936))) * _2936;
        float _4989 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2975 = (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0))) * (_2945 / ((_2949 * _2949) * 3.141590118408203125));
        float _2976 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        _2897 = (((((_2956 * _2727) + _1083) * cbLight._m0[_2907].x) * _2975) * _2976) + _2839;
        _2899 = (((((_2956 * _2729) + _1085) * cbLight._m0[_2907].y) * _2975) * _2976) + _2840;
        _2901 = (((((_2956 * _2730) + _1086) * cbLight._m0[_2907].z) * _2975) * _2976) + _2841;
    }
    float _3007;
    float _3009;
    float _3011;
    if (_2614)
    {
        _3007 = _2897;
        _3009 = _2899;
        _3011 = _2901;
    }
    else
    {
        uint _3018 = _2429 + 3u;
        uint _3022 = _2429 + 11u;
        float _3036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3018].w)) * _925) * 0.949999988079071044921875);
        float _3037 = _3036 * _3036;
        float _3038 = cbLight._m0[_3018].x + _1001;
        float _3039 = cbLight._m0[_3018].y + _1002;
        float _3040 = cbLight._m0[_3018].z + _1003;
        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
        float _3045 = _3044 * _3038;
        float _3046 = _3044 * _3039;
        float _3047 = _3044 * _3040;
        float _3048 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_3018].xyz));
        float _5005 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3051 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
        float _3052 = dot(vec3(_922, _923, _924), vec3(_3045, _3046, _3047));
        float _5016 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        float _3055 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
        float _3056 = dot(vec3(cbLight._m0[_3018].xyz), vec3(_3045, _3046, _3047));
        float _5027 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        float _3060 = _3037 * _3037;
        float _3064 = ((_3055 * _3055) * (_3060 + (-1.0))) + 1.0;
        float _3071 = exp2(log2(1.0 - (isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0)))) * 5.0);
        float _3078 = 1.0 - _3037;
        float _3088 = (0.5 / (((_2705 * ((_3051 * _3078) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _3078) + _3037) * _3051))) * _3051;
        float _5038 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
        float _3090 = (isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_3060 / ((_3064 * _3064) * 3.141590118408203125));
        float _3091 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _3007 = (((((_3071 * _2727) + _1083) * cbLight._m0[_3022].x) * _3090) * _3091) + _2897;
        _3009 = (((((_3071 * _2729) + _1085) * cbLight._m0[_3022].y) * _3090) * _3091) + _2899;
        _3011 = (((((_3071 * _2730) + _1086) * cbLight._m0[_3022].z) * _3090) * _3091) + _2901;
    }
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    if (_2427.y == 0u)
    {
        uvec4 _3112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3113 = _3112.x;
        uint _3124 = uint((float(_3112.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1022) / _3113))) + floor(float(uint(cbSceneParam._m0[85u].x * _1021) / _3113)));
        float _3134 = (log2(_2205 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3135 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
        uint _3138 = uint(isnan(14.0) ? _3135 : (isnan(_3135) ? 14.0 : min(_3135, 14.0)));
        uvec4 _3143 = texelFetch(g_lightClusterGridBuffer, int(((_3138 << 2u) + (_3124 << 6u)) >> 2u));
        uint _3144 = _3143.x;
        uint _3145 = _3112.z;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        if (((((1u << ((_3145 >> 4u) & 15u)) + 4294967295u) & _3144) == 0u) || ((_3145 & 240u) == 0u))
        {
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
        }
        else
        {
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3233;
            float _3235;
            float _3377 = 0.0;
            float _3378 = 0.0;
            float _3379 = 0.0;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            uint _3383 = 0u;
            uint _3392;
            bool _3393;
            for (;;)
            {
                _3392 = texelFetch(g_lightClassification, int((((_3138 << 5u) + (_3124 << 9u)) + (_3383 << 2u)) >> 2u)).x;
                _3393 = _3392 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3393)
                {
                    frontier_phi_71_pred = _3382;
                    frontier_phi_71_pred_1 = _3381;
                    frontier_phi_71_pred_2 = _3380;
                    frontier_phi_71_pred_3 = _3379;
                    frontier_phi_71_pred_4 = _3378;
                    frontier_phi_71_pred_5 = _3377;
                }
                else
                {
                    float _3522;
                    float _3523;
                    float _3524;
                    float _3525;
                    float _3526;
                    float _3527;
                    uint _3528;
                    _3522 = _3377;
                    _3523 = _3378;
                    _3524 = _3379;
                    _3525 = _3380;
                    _3526 = _3381;
                    _3527 = _3382;
                    _3528 = _3392;
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    float _3453;
                    float _3454;
                    for (;;)
                    {
                        uint _3532 = uint(findLSB(_3528)) + (_3383 << 5u);
                        uint _3529 = (_3528 + 4294967295u) & _3528;
                        uint _3534 = _3532 * 48u;
                        vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3534)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3534 + 3u)).x));
                        uint _3554 = (_3532 * 48u) + 4u;
                        vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3554)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3554 + 3u)).x));
                        uint _3573 = (_3532 * 48u) + 8u;
                        vec3 _3584 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3573)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 2u)).x));
                        float _3588 = _3548.x - _2203;
                        float _3589 = _3548.y - _2204;
                        float _3590 = _3548.z - _2205;
                        float _3591 = dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590));
                        float _3594 = inversesqrt(_3591);
                        float _3595 = _3594 * _3588;
                        float _3596 = _3594 * _3589;
                        float _3597 = _3594 * _3590;
                        float _3598 = dot(vec3(_1040, _1043, _1046), vec3(_3595, _3596, _3597));
                        float _3603 = 1.0 - (_3591 * _3548.w);
                        float _5064 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3604 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
                        float _3605 = sqrt(_3591) * _3567.w;
                        float _3608 = 1.39999997615814208984375 / (_3605 + 1.39999997615814208984375);
                        float _3609 = _3608 * _3608;
                        float _3612 = ((1.0 - _3609) * _3598) + _3609;
                        float _3615 = _3605 * _3605;
                        float _3619 = ((isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0))) * _3604) / ((_3615 * 0.699999988079071044921875) + 1.0);
                        float _3623 = (-0.0) - _2203;
                        float _3624 = (-0.0) - _2204;
                        float _3625 = (-0.0) - _2205;
                        float _3629 = inversesqrt(dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625)));
                        float _3630 = _3629 * _3623;
                        float _3631 = _3629 * _3624;
                        float _3632 = _3629 * _3625;
                        float _3639 = exp2(log2(1.0 / ((_3615 * 3.5) + 5.0)) * 0.25);
                        float _3640 = 1.0 - _1115;
                        float _3647 = sqrt(1.0 - ((1.0 - (_3640 * _3640)) * (1.0 - (_3639 * _3639))));
                        float _3648 = _3647 * _3647;
                        float _3649 = _3648 * _3648;
                        float _3650 = _3630 + _3595;
                        float _3651 = _3631 + _3596;
                        float _3652 = _3632 + _3597;
                        float _3656 = inversesqrt(dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652)));
                        float _3660 = dot(vec3(_1040, _1043, _1046), vec3(_3630, _3631, _3632));
                        float _5080 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                        float _3663 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                        float _3664 = dot(vec3(_1040, _1043, _1046), vec3(_3656 * _3650, _3656 * _3651, _3656 * _3652));
                        float _5091 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                        float _3667 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                        float _3671 = ((_3667 * _3667) * (_3649 + (-1.0))) + 1.0;
                        float _3672 = _3608 * _3648;
                        float _3673 = _3672 * _3672;
                        float _3676 = ((1.0 - _3673) * _3598) + _3673;
                        float _5102 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                        float _3677 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                        float _3678 = 1.0 - _3648;
                        float _3688 = (0.5 / (((_3677 * ((_3663 * _3678) + _3648)) + 9.9999999392252902907785028219223e-09) + (((_3677 * _3678) + _3648) * _3663))) * _3677;
                        float _5113 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                        float _3699 = (((_3649 * 3.1415927410125732421875) * (isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0)))) / ((_3671 * _3671) * ((_3615 * 2.1991131305694580078125) + 3.141590118408203125))) * _3604;
                        _3452 = (_3619 * _3567.x) + _3525;
                        _3453 = (_3619 * _3567.y) + _3526;
                        _3454 = (_3619 * _3567.z) + _3527;
                        _3449 = (_3699 * _3584.x) + _3522;
                        _3450 = (_3699 * _3584.y) + _3523;
                        _3451 = (_3699 * _3584.z) + _3524;
                        if (_3529 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3522 = _3449;
                            _3523 = _3450;
                            _3524 = _3451;
                            _3525 = _3452;
                            _3526 = _3453;
                            _3527 = _3454;
                            _3528 = _3529;
                        }
                    }
                    frontier_phi_71_pred = _3454;
                    frontier_phi_71_pred_1 = _3453;
                    frontier_phi_71_pred_2 = _3452;
                    frontier_phi_71_pred_3 = _3451;
                    frontier_phi_71_pred_4 = _3450;
                    frontier_phi_71_pred_5 = _3449;
                }
                _3235 = frontier_phi_71_pred;
                _3233 = frontier_phi_71_pred_1;
                _3231 = frontier_phi_71_pred_2;
                _3229 = frontier_phi_71_pred_3;
                _3227 = frontier_phi_71_pred_4;
                _3225 = frontier_phi_71_pred_5;
                uint _3384 = _3383 + 1u;
                if (_3384 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3377 = _3225;
                    _3378 = _3227;
                    _3379 = _3229;
                    _3380 = _3231;
                    _3381 = _3233;
                    _3382 = _3235;
                    _3383 = _3384;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
        }
        uvec4 _3238 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3239 = _3238.z;
        uint _3241 = (_3239 >> 8u) & 15u;
        float _3345;
        float _3347;
        float _3349;
        float _3351;
        float _3353;
        float _3355;
        if (((4294967295u << _3241) & _3144) == 0u)
        {
            _3345 = _3224;
            _3347 = _3226;
            _3349 = _3228;
            _3351 = _3230;
            _3353 = _3232;
            _3355 = _3234;
        }
        else
        {
            float _3370 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
            float _3371 = _3370 * _2203;
            float _3372 = _3370 * _2204;
            float _3373 = _3370 * _2205;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3241 < ((_3239 >> 12u) & 15u))
            {
                float _3346;
                float _3348;
                float _3350;
                float _3352;
                float _3354;
                float _3356;
                float _3505 = _3224;
                float _3506 = _3226;
                float _3507 = _3228;
                float _3508 = _3230;
                float _3509 = _3232;
                float _3510 = _3234;
                uint _3511 = _3241;
                uint _3520;
                bool _3521;
                for (;;)
                {
                    _3520 = texelFetch(g_lightClassification, int((((_3138 << 5u) + (_3124 << 9u)) + (_3511 << 2u)) >> 2u)).x;
                    _3521 = _3520 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3521)
                    {
                        frontier_phi_82_pred = _3510;
                        frontier_phi_82_pred_1 = _3509;
                        frontier_phi_82_pred_2 = _3508;
                        frontier_phi_82_pred_3 = _3507;
                        frontier_phi_82_pred_4 = _3506;
                        frontier_phi_82_pred_5 = _3505;
                    }
                    else
                    {
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _4006;
                        float _4007;
                        float _4008;
                        float _4009;
                        float _4010;
                        float _4011;
                        float _3726 = _3505;
                        float _3727 = _3506;
                        float _3728 = _3507;
                        float _3729 = _3508;
                        float _3730 = _3509;
                        float _3731 = _3510;
                        uint _3732 = _3520;
                        uint _3733;
                        vec4 _3758;
                        float _3759;
                        vec4 _3774;
                        vec3 _3786;
                        vec4 _3801;
                        vec4 _3816;
                        float _3862;
                        bool _3863;
                        for (;;)
                        {
                            uint _3743 = ((_3511 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3732));
                            _3733 = (_3732 + 4294967295u) & _3732;
                            uint _3745 = _3743 * 40u;
                            _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            _3759 = _3758.w;
                            uint _3761 = (_3743 * 40u) + 4u;
                            _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            uint _3776 = (_3743 * 40u) + 8u;
                            _3786 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x));
                            uint _3788 = (_3743 * 40u) + 16u;
                            _3801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 3u)).x));
                            uint _3803 = (_3743 * 40u) + 20u;
                            _3816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 3u)).x));
                            uint _3818 = (_3743 * 40u) + 24u;
                            vec4 _3831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 3u)).x));
                            uint _3837 = (_3743 * 40u) + 28u;
                            vec4 _3850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 3u)).x));
                            _3862 = fma(_2205, _3850.z, fma(_2204, _3850.y, _3850.x * _2203)) + _3850.w;
                            _3863 = !((fma(_2205, _3831.z, fma(_2204, _3831.y, _3831.x * _2203)) + _3831.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3863)
                            {
                                float _3890 = _3758.x - _2203;
                                float _3891 = _3758.y - _2204;
                                float _3892 = _3758.z - _2205;
                                float _3893 = dot(vec3(_3890, _3891, _3892), vec3(_3890, _3891, _3892));
                                float _3896 = inversesqrt(_3893);
                                float _3897 = _3896 * _3890;
                                float _3898 = _3896 * _3891;
                                float _3899 = _3896 * _3892;
                                float _3903 = 1.0 - (_3893 / (_3759 * _3759));
                                float _5124 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3904 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
                                float _3908 = sqrt(_3893) * _3774.w;
                                float _3910 = 1.39999997615814208984375 / (_3908 + 1.39999997615814208984375);
                                float _3911 = _3910 * _3910;
                                float _3914 = ((1.0 - _3911) * dot(vec3(_3897, _3898, _3899), vec3(_1040, _1043, _1046))) + _3911;
                                float _3917 = _3908 * _3908;
                                float _3921 = (fma(_2205, _3801.z, fma(_2204, _3801.y, _3801.x * _2203)) + _3801.w) / _3862;
                                float _3922 = (fma(_2205, _3816.z, fma(_2204, _3816.y, _3816.x * _2203)) + _3816.w) / _3862;
                                float _3926 = 1.0 - dot(vec2(_3921, _3922), vec2(_3921, _3922));
                                float _5140 = isnan(0.0) ? _3926 : (isnan(_3926) ? 0.0 : max(_3926, 0.0));
                                float _3927 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
                                float _3928 = _3927 * (((isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0))) * _3904) / ((_3917 * 0.699999988079071044921875) + 1.0));
                                float _3940 = exp2(log2(1.0 / ((_3917 * 3.5) + 5.0)) * 0.25);
                                float _3941 = 1.0 - _1115;
                                float _3948 = sqrt(1.0 - ((1.0 - (_3941 * _3941)) * (1.0 - (_3940 * _3940))));
                                float _3949 = _3948 * _3948;
                                float _3950 = _3949 * _3949;
                                float _3951 = _3897 - _3371;
                                float _3952 = _3898 - _3372;
                                float _3953 = _3899 - _3373;
                                float _3957 = inversesqrt(dot(vec3(_3951, _3952, _3953), vec3(_3951, _3952, _3953)));
                                float _3961 = dot(vec3(_1040, _1043, _1046), vec3((-0.0) - _3371, (-0.0) - _3372, (-0.0) - _3373));
                                float _5151 = isnan(0.0) ? _3961 : (isnan(_3961) ? 0.0 : max(_3961, 0.0));
                                float _3964 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
                                float _3965 = dot(vec3(_1040, _1043, _1046), vec3(_3957 * _3951, _3957 * _3952, _3957 * _3953));
                                float _5162 = isnan(0.0) ? _3965 : (isnan(_3965) ? 0.0 : max(_3965, 0.0));
                                float _3968 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
                                float _3972 = ((_3968 * _3968) * (_3950 + (-1.0))) + 1.0;
                                float _3973 = _3910 * _3949;
                                float _3974 = _3973 * _3973;
                                float _3980 = ((1.0 - _3974) * dot(vec3(_1040, _1043, _1046), vec3(_3897, _3898, _3899))) + _3974;
                                float _5173 = isnan(0.0) ? _3980 : (isnan(_3980) ? 0.0 : max(_3980, 0.0));
                                float _3981 = isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0));
                                float _3982 = 1.0 - _3949;
                                float _3992 = (0.5 / (((_3981 * ((_3964 * _3982) + _3949)) + 9.9999999392252902907785028219223e-09) + (((_3981 * _3982) + _3949) * _3964))) * _3981;
                                float _5184 = isnan(0.0) ? _3992 : (isnan(_3992) ? 0.0 : max(_3992, 0.0));
                                float _4002 = (_3927 * _3904) * (((_3950 * 3.1415927410125732421875) * (isnan(1.0) ? _5184 : (isnan(_5184) ? 1.0 : min(_5184, 1.0)))) / ((_3972 * _3972) * ((_3917 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3928 * _3774.z;
                                frontier_phi_88_pred_1 = _3928 * _3774.y;
                                frontier_phi_88_pred_2 = _3928 * _3774.x;
                                frontier_phi_88_pred_3 = _4002 * _3786.z;
                                frontier_phi_88_pred_4 = _4002 * _3786.y;
                                frontier_phi_88_pred_5 = _4002 * _3786.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4011 = frontier_phi_88_pred;
                            _4010 = frontier_phi_88_pred_1;
                            _4009 = frontier_phi_88_pred_2;
                            _4008 = frontier_phi_88_pred_3;
                            _4007 = frontier_phi_88_pred_4;
                            _4006 = frontier_phi_88_pred_5;
                            _3716 = _4009 + _3729;
                            _3717 = _4010 + _3730;
                            _3718 = _4011 + _3731;
                            _3713 = _4006 + _3726;
                            _3714 = _4007 + _3727;
                            _3715 = _4008 + _3728;
                            if (_3733 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3726 = _3713;
                                _3727 = _3714;
                                _3728 = _3715;
                                _3729 = _3716;
                                _3730 = _3717;
                                _3731 = _3718;
                                _3732 = _3733;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3718;
                        frontier_phi_82_pred_1 = _3717;
                        frontier_phi_82_pred_2 = _3716;
                        frontier_phi_82_pred_3 = _3715;
                        frontier_phi_82_pred_4 = _3714;
                        frontier_phi_82_pred_5 = _3713;
                    }
                    _3356 = frontier_phi_82_pred;
                    _3354 = frontier_phi_82_pred_1;
                    _3352 = frontier_phi_82_pred_2;
                    _3350 = frontier_phi_82_pred_3;
                    _3348 = frontier_phi_82_pred_4;
                    _3346 = frontier_phi_82_pred_5;
                    uint _3512 = _3511 + 1u;
                    if (_3512 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3505 = _3346;
                        _3506 = _3348;
                        _3507 = _3350;
                        _3508 = _3352;
                        _3509 = _3354;
                        _3510 = _3356;
                        _3511 = _3512;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3352;
                frontier_phi_63_64_ladder_1 = _3356;
                frontier_phi_63_64_ladder_2 = _3354;
                frontier_phi_63_64_ladder_3 = _3350;
                frontier_phi_63_64_ladder_4 = _3348;
                frontier_phi_63_64_ladder_5 = _3346;
            }
            else
            {
                frontier_phi_63_64_ladder = _3230;
                frontier_phi_63_64_ladder_1 = _3234;
                frontier_phi_63_64_ladder_2 = _3232;
                frontier_phi_63_64_ladder_3 = _3228;
                frontier_phi_63_64_ladder_4 = _3226;
                frontier_phi_63_64_ladder_5 = _3224;
            }
            _3345 = frontier_phi_63_64_ladder_5;
            _3347 = frontier_phi_63_64_ladder_4;
            _3349 = frontier_phi_63_64_ladder_3;
            _3351 = frontier_phi_63_64_ladder;
            _3353 = frontier_phi_63_64_ladder_2;
            _3355 = frontier_phi_63_64_ladder_1;
        }
        float _3360 = isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0));
        _3157 = (_3360 * _3351) + _2669;
        _3159 = (_3360 * _3353) + _2671;
        _3161 = (_3360 * _3355) + _2673;
        _3163 = ((_3345 * _1083) * _3360) + _3007;
        _3165 = ((_3347 * _1085) * _3360) + _3009;
        _3167 = ((_3349 * _1086) * _3360) + _3011;
    }
    else
    {
        _3157 = _2669;
        _3159 = _2671;
        _3161 = _2673;
        _3163 = _3007;
        _3165 = _3009;
        _3167 = _3011;
    }
    float _5200 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _5211 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _5222 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _3184 = ((isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0))) * (_3157 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1099))) + ((_3163 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _3185 = ((isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0))) * (_3159 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1099))) + ((_3165 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _3186 = ((isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0))) * (_3161 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1099))) + ((_3167 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    uint _3187 = _269 + 6u;
    float _3195 = _1021 / cbSceneParam._m0[86u].x;
    float _3196 = _1022 / cbSceneParam._m0[86u].y;
    vec4 _3210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, (log2((isnan(cbSceneParam._m0[77u].w) ? _944 : (isnan(_944) ? cbSceneParam._m0[77u].w : min(_944, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3212 = _3210.x;
    float _3213 = _3210.y;
    float _3214 = _3210.z;
    float _3215 = _3210.w;
    float _3287;
    float _3289;
    float _3291;
    float _3293;
    if (_944 > cbSceneParam._m0[78u].w)
    {
        float _3249 = isnan(_944) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _944 : min(cbSceneParam._m0[80u].w, _944));
        float _3250 = _3249 / _944;
        float _3261 = _3250 * _994;
        float _3262 = _995 * _3250;
        float _3263 = (-0.0) - _3262;
        float _3265 = _3250 * _996;
        float _3267 = (cbSceneParam._m0[77u].w * _3263) / _3249;
        float _3268 = _3267 + cbSceneParam._m0[79u].w;
        float _3269 = cbSceneParam._m0[79u].w - _3262;
        float _3275 = sqrt(((_3261 * _3261) + (_3262 * _3262)) + (_3265 * _3265));
        float _3278 = (1.0 - (cbSceneParam._m0[77u].w / _3249)) * _3275;
        float _3283 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3285 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3462;
        if (abs((_3263 - _3267) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3462 = ((((_3268 > 0.0) ? exp2(_3283 * _3268) : (2.0 - exp2(_3285 * _3268))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3278;
        }
        else
        {
            float _3406 = 1.0 / cbSceneParam._m0[80u].x;
            float _3407 = isnan(_3269) ? _3268 : (isnan(_3268) ? _3269 : max(_3268, _3269));
            float _3408 = isnan(_3269) ? _3268 : (isnan(_3268) ? _3269 : min(_3268, _3269));
            float _3417 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : min(_3407, 0.0));
            float _3418 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : min(_3408, 0.0));
            _3462 = ((abs(_3275 / _3263) * cbSceneParam._m0[80u].y) * ((((_3417 - _3418) * 2.0) - ((exp2(_3283 * (isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0)))) - exp2(_3283 * (isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))))) * _3406)) - ((exp2(_3285 * _3417) - exp2(_3285 * _3418)) * _3406))) + (_3278 * cbSceneParam._m0[80u].z);
        }
        vec4 _3464 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, 1.0), 0.0);
        float _3473 = exp2((_3462 * (-1.44269502162933349609375)) * (1.0 - _3464.w));
        float _3474 = log2(_3473);
        float _3490 = log2(_3215);
        _3287 = (exp2(_3490 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3474 * cbSceneParam._m0[78u].x)) * _3464.x) / cbSceneParam._m0[78u].x)) + _3212;
        _3289 = (exp2(_3490 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3474 * cbSceneParam._m0[78u].y)) * _3464.y) / cbSceneParam._m0[78u].y)) + _3213;
        _3291 = (exp2(_3490 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3474 * cbSceneParam._m0[78u].z)) * _3464.z) / cbSceneParam._m0[78u].z)) + _3214;
        _3293 = _3473 * _3215;
    }
    else
    {
        _3287 = _3212;
        _3289 = _3213;
        _3291 = _3214;
        _3293 = _3215;
    }
    bool _3500;
    vec4 _3303;
    vec4 _3325;
    float _3327;
    float _3331;
    float _3332;
    float _3333;
    float _3334;
    bool _3344;
    for (;;)
    {
        _3303 = cbMatDynParam._m0[0u];
        float _3305 = roundEven(_3303.y);
        bool _3306 = _3305 == 3.0;
        float _3307 = log2(_3293);
        float _3314 = exp2(_3307 * cbSceneParam._m0[78u].x) * _3184;
        float _3315 = exp2(_3307 * cbSceneParam._m0[78u].y) * _3185;
        float _3316 = exp2(_3307 * cbSceneParam._m0[78u].z) * _3186;
        float _3323 = _1010 + (-0.5);
        _3325 = cbMtdParam._m0[1u];
        _3327 = _3325.y * _3323;
        float _3330 = (_3305 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3331 = _3330 * (_3306 ? _3314 : (_3314 + (cbSceneParam._m0[72u].w * _3287)));
        _3332 = _3330 * (_3306 ? _3315 : (_3315 + (cbSceneParam._m0[72u].w * _3289)));
        _3333 = _3330 * (_3306 ? _3316 : (_3316 + (cbSceneParam._m0[72u].w * _3291)));
        _3334 = _3323 * 0.999000012874603271484375;
        _3344 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3344)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _3334) < 0.5)
            {
                _3500 = true;
                break;
            }
        }
        uint _3441 = _1059 + uint(_3303.w);
        if ((cbInstanceData._m0[_3441].w < 1.0) && ((cbInstanceData._m0[_3441].w + _3334) < 0.5))
        {
            _3500 = true;
            break;
        }
        if ((_3327 + 1.0) < _3325.x)
        {
            _3500 = true;
            break;
        }
        _3500 = false;
        break;
    }
    float _3704;
    if (_3500)
    {
        discard_state = true;
        _3704 = 0.0;
    }
    else
    {
        _3704 = cbInstanceData._m0[_3187].w;
    }
    SV_Target.x = _3331;
    SV_Target.y = _3332;
    SV_Target.z = _3333;
    SV_Target.w = _3704;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3187].w;
    discard_exit();
}


