#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1491;
float _3893;
float _3894;
float _3895;
float _3896;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3905 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3916 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3927 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _384.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3938 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _455 = (_448 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _456 = (_448 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _457 = (_448 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _384.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[23u].w) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3949 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    float _534 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _528;
    float _537 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _529;
    float _540 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _530;
    float _547 = ((_528 - _534) * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) + _534;
    float _548 = ((_529 - _537) * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) + _537;
    float _549 = ((_530 - _540) * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) + _540;
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _301) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _302) + cbTextureTilingScale._m0[14u].w));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _631 = _629.x;
    float _632 = _629.y;
    float _633 = _629.z;
    float _640 = ((_612.x - _631) * _448) + _631;
    float _641 = ((_612.y - _632) * _448) + _632;
    float _642 = ((_612.z - _633) * _448) + _633;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _667 = ((_654.z - _642) * _521) + _642;
    float _670 = ((((_654.x - _640) * _521) + _640) * 2.0) + (-1.0);
    float _671 = ((((_654.y - _641) * _521) + _641) * 2.0) + (-1.0);
    float _672 = dot(vec2(_670, _671), vec2(_670, _671));
    float _3960 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _677 = sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _707 = (_670 + ((((_587.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_695.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _708 = (_671 + ((((_587.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_695.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _711 = fma(_677, _249, fma(_708, _256, _707 * _242));
    float _714 = fma(_677, _250, fma(_708, _257, _707 * _243));
    float _717 = fma(_677, _251, fma(_708, _258, _707 * _244));
    float _721 = inversesqrt(dot(vec3(_711, _714, _717), vec3(_711, _714, _717)));
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _750 = _748.x;
    float _751 = 1.0 - _750;
    float _760 = (cbMtdParam._m0[19u].x + dot(vec4(_721 * _711, _721 * _714, _721 * _717, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_750 - _751) * cbMtdParam._m0[24u].z) + _751) * cbMtdParam._m0[21u].z);
    float _3971 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _761 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _768 = (_761 * ((_568.x * cbMtdParam._m0[18u].x) - _547)) + _547;
    float _769 = (_761 * ((_568.y * cbMtdParam._m0[18u].y) - _548)) + _548;
    float _770 = (_761 * ((_568.z * cbMtdParam._m0[18u].z) - _549)) + _549;
    vec4 _796 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _798 = _796.x;
    float _816 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _798) * _448) + _798;
    float _833 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _816) * _521) + _816;
    float _837 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _833) * cbMtdParam._m0[19u].z) + _833;
    float _839 = _837 - (_837 * _761);
    float _844 = (((_587.z - _667) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _667;
    float _848 = ((_695.z - _844) * cbMtdParam._m0[19u].w) + _844;
    vec4 _861 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _868 = (_861.x * 2.0) + (-1.0);
    float _869 = (_861.y * 2.0) + (-1.0);
    float _870 = dot(vec2(_868, _869), vec2(_868, _869));
    float _3982 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _878 = ((_861.z - _848) * _761) + _848;
    float _888 = ((sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) - _677) * _761) + _677;
    float _891 = (((_868 - _707) * _761) + _707) + (cbMtdParam._m0[21u].x * _707);
    float _892 = (((_869 - _708) * _761) + _708) + (cbMtdParam._m0[21u].x * _708);
    float _896 = cbMtdParam._m0[22u].x + _695.w;
    float _899 = fma(_888, _249, fma(_892, _256, _891 * _242));
    float _902 = fma(_888, _250, fma(_892, _257, _891 * _243));
    float _905 = fma(_888, _251, fma(_892, _258, _891 * _244));
    float _909 = inversesqrt(dot(vec3(_899, _902, _905), vec3(_899, _902, _905)));
    float _910 = _909 * _899;
    float _911 = _909 * _902;
    float _912 = _909 * _905;
    float _3993 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _913 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4015 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4026 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4037 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4048 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _918 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _932 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _983 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _973);
    float _984 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _973);
    float _985 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _973);
    float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
    float _990 = _983 * _989;
    float _991 = _984 * _989;
    float _992 = _985 * _989;
    vec4 _997 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _999 = _997.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1171 = sqrt(((_983 * _983) + (_984 * _984)) + (_985 * _985));
        float _1177 = (cbMatDynParam._m0[5u].x * _1171) + cbMatDynParam._m0[5u].y;
        float _4059 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1182 = (cbMatDynParam._m0[5u].z * _1171) + cbMatDynParam._m0[5u].w;
        float _4070 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) - _1178)) + _1178) < ((_999 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1010 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1011 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1029 = fma(_912, cbSceneParam._m0[5u].z, fma(_911, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _910));
    float _1032 = fma(_912, cbSceneParam._m0[6u].z, fma(_911, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _910));
    float _1035 = fma(_912, cbSceneParam._m0[7u].z, fma(_911, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _910));
    uint _1048 = _282 + 9u;
    uint _1049 = _1048 + uint(cbMatDynParam._m0[0u].w);
    float _1055 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_1049].x;
    float _1056 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1049].y;
    float _1057 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_1049].z;
    float _4081 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1058 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _1061 = 1.0 - _918;
    float _1062 = _1058 * _1061;
    float _1063 = _1059 * _1061;
    float _1064 = _1060 * _1061;
    float _1069 = (_1058 + (-0.039999999105930328369140625)) * _918;
    float _1070 = (_1059 + (-0.039999999105930328369140625)) * _918;
    float _1071 = (_1060 + (-0.039999999105930328369140625)) * _918;
    float _1072 = _1069 + 0.039999999105930328369140625;
    float _1074 = _1070 + 0.039999999105930328369140625;
    float _1075 = _1071 + 0.039999999105930328369140625;
    vec4 _1084 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1010, cbSceneParam._m0[86u].y * _1011));
    float _1088 = ((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * TEXCOORD_5.w) * _1084.x;
    float _1089 = dot(vec3(_910, _911, _912), vec3(_990, _991, _992));
    float _1092 = _1089 * 2.0;
    float _1096 = (_1092 * _910) - _990;
    float _1097 = (_1092 * _911) - _991;
    float _1098 = (_1092 * _912) - _992;
    float _1102 = abs(dot(vec3(_990, _991, _992), vec3(_910, _911, _912)));
    float _4114 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1104 = sqrt(_913);
    float _1117 = exp2((_1104 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1104 * 3.0));
    float _1123 = (1.0 - _1117) * ((_1104 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1124 = _1117 * _1104;
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1490;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1215 = fma(_1160, cbModelParam._m0[26u].z, fma(_1156, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1152));
        float _1219 = fma(_1160, cbModelParam._m0[27u].z, fma(_1156, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1152));
        float _1223 = fma(_1160, cbModelParam._m0[28u].z, fma(_1156, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1152));
        float _1248 = _1152 + _910;
        float _1249 = _1156 + _911;
        float _1250 = _1160 + _912;
        float _1260 = fma(_1250, cbModelParam._m0[26u].z, fma(_1249, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1248)) - _1215;
        float _1261 = fma(_1250, cbModelParam._m0[27u].z, fma(_1249, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1248)) - _1219;
        float _1262 = fma(_1250, cbModelParam._m0[28u].z, fma(_1249, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1248)) - _1223;
        float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
        float _1279 = ((_1266 * _1260) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1215 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1266 * _1261) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1219 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1266 * _1262) / cbModelParam._m0[34u].z) + ((((((_1223 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        float _1318 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1284.x + (-0.5));
        float _1320 = _1318 * (_1284.y + (-0.5));
        float _1321 = _1318 * (_1284.z + (-0.5));
        float _1328 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1291.x + (-0.5));
        float _1330 = _1328 * (_1291.y + (-0.5));
        float _1331 = _1328 * (_1291.z + (-0.5));
        float _1338 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1298.x + (-0.5));
        float _1340 = _1338 * (_1298.y + (-0.5));
        float _1341 = _1338 * (_1298.z + (-0.5));
        float _1348 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1305.x + (-0.5));
        float _1350 = _1348 * (_1305.y + (-0.5));
        float _1351 = _1348 * (_1305.z + (-0.5));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = _1319 * 0.5;
        float _1356 = _1329 * 0.5;
        float _1357 = _1339 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1372 = (dot(vec3(_910, _911, _912), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1382 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4162 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1384 + 1.0))) + _1389) * _1352;
        float _1399 = _1320 * 0.5;
        float _1400 = _1330 * 0.5;
        float _1401 = _1340 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_910, _911, _912), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4195 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1426 + 1.0))) + _1431) * _1353;
        float _1441 = _1321 * 0.5;
        float _1442 = _1331 * 0.5;
        float _1443 = _1341 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_910, _911, _912), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4228 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1468 + 1.0))) + _1473) * _1354;
        _1490 = _1321;
        _1492 = _1320;
        _1493 = _1319;
        _1494 = _1331;
        _1495 = _1330;
        _1496 = _1329;
        _1497 = _1341;
        _1498 = _1340;
        _1499 = _1339;
        _1500 = _1354;
        _1501 = _1353;
        _1502 = _1352;
        _1503 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1504 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1505 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
    }
    else
    {
        _1490 = _1491;
        _1492 = _1491;
        _1493 = _1491;
        _1494 = _1491;
        _1495 = _1491;
        _1496 = _1491;
        _1497 = _1491;
        _1498 = _1491;
        _1499 = _1491;
        _1500 = _1491;
        _1501 = _1491;
        _1502 = _1491;
        _1503 = 0.0;
        _1504 = 0.0;
        _1505 = 0.0;
    }
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1532 = fma(_1160, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152));
        float _1536 = fma(_1160, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152));
        float _1540 = fma(_1160, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152));
        float _1563 = _1152 + _910;
        float _1564 = _1156 + _911;
        float _1565 = _1160 + _912;
        float _1575 = fma(_1565, cbModelParam._m0[30u].z, fma(_1564, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1563)) - _1532;
        float _1576 = fma(_1565, cbModelParam._m0[31u].z, fma(_1564, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1563)) - _1536;
        float _1577 = fma(_1565, cbModelParam._m0[32u].z, fma(_1564, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1563)) - _1540;
        float _1581 = inversesqrt(dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577)));
        float _1594 = ((_1581 * _1575) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1532 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1595 = ((_1581 * _1576) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1536 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1596 = ((_1581 * _1577) / cbModelParam._m0[35u].z) + ((((((_1540 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1594, _1595, _1596), 0.0);
        float _1631 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1598.x + (-0.5));
        float _1633 = _1631 * (_1598.y + (-0.5));
        float _1634 = _1631 * (_1598.z + (-0.5));
        float _1641 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1605.x + (-0.5));
        float _1643 = _1641 * (_1605.y + (-0.5));
        float _1644 = _1641 * (_1605.z + (-0.5));
        float _1651 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1612.x + (-0.5));
        float _1653 = _1651 * (_1612.y + (-0.5));
        float _1654 = _1651 * (_1612.z + (-0.5));
        float _1661 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1619.x + (-0.5));
        float _1663 = _1661 * (_1619.y + (-0.5));
        float _1664 = _1661 * (_1619.z + (-0.5));
        float _1665 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1666 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1668 = _1632 * 0.5;
        float _1669 = _1642 * 0.5;
        float _1670 = _1652 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_910, _911, _912), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1665 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4291 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1695 + 1.0))) + _1700) * _1665;
        float _1710 = _1633 * 0.5;
        float _1711 = _1643 * 0.5;
        float _1712 = _1653 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_910, _911, _912), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1666 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4324 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1737 + 1.0))) + _1742) * _1666;
        float _1752 = _1634 * 0.5;
        float _1753 = _1644 * 0.5;
        float _1754 = _1654 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_910, _911, _912), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1667 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4357 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1779 + 1.0))) + _1784) * _1667;
        _1801 = _1634;
        _1802 = _1633;
        _1803 = _1632;
        _1804 = _1644;
        _1805 = _1643;
        _1806 = _1642;
        _1807 = _1654;
        _1808 = _1653;
        _1809 = _1652;
        _1810 = _1667;
        _1811 = _1666;
        _1812 = _1665;
        _1813 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
        _1814 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
        _1815 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
    }
    else
    {
        _1801 = _1491;
        _1802 = _1491;
        _1803 = _1491;
        _1804 = _1491;
        _1805 = _1491;
        _1806 = _1491;
        _1807 = _1491;
        _1808 = _1491;
        _1809 = _1491;
        _1810 = _1491;
        _1811 = _1491;
        _1812 = _1491;
        _1813 = 0.0;
        _1814 = 0.0;
        _1815 = 0.0;
    }
    float _1825 = (cbModelParam._m0[1u].x * (_1813 - _1503)) + _1503;
    float _1826 = (cbModelParam._m0[1u].x * (_1814 - _1504)) + _1504;
    float _1827 = (cbModelParam._m0[1u].x * (_1815 - _1505)) + _1505;
    float _1848 = fma(_1827, cbSceneParam._m0[89u].z, fma(_1826, cbSceneParam._m0[89u].y, _1825 * cbSceneParam._m0[89u].x));
    float _1851 = fma(_1827, cbSceneParam._m0[90u].z, fma(_1826, cbSceneParam._m0[90u].y, _1825 * cbSceneParam._m0[90u].x));
    float _1854 = fma(_1827, cbSceneParam._m0[91u].z, fma(_1826, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1825));
    float _1869 = _1096 * 0.5;
    float _1870 = _1097 * 0.5;
    float _1871 = _1098 * 0.5;
    float _1872 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1803, _1806, _1809, _1812));
    float _1875 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1802, _1805, _1808, _1811));
    float _1878 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1801, _1804, _1807, _1810));
    float _1912;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1885 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1490, _1494, _1497, _1500));
        float _1889 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1492, _1495, _1498, _1501));
        float _1893 = dot(vec4(_1869, _1870, _1871, 1.0), vec4(_1493, _1496, _1499, _1502));
        float _1900 = dot(vec4(cbModelParam._m0[39u]), vec4(_1869, _1870, _1871, 1.0));
        _1912 = dot(vec3(isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1912 = 1.0;
    }
    float _1923;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1914 = dot(vec4(cbModelParam._m0[40u]), vec4(_1869, _1870, _1871, 1.0));
        _1923 = dot(vec3(isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1914) ? 0.0 : (isnan(0.0) ? _1914 : max(0.0, _1914))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1923 = 1.0;
    }
    float _1927 = (_1923 * cbModelParam._m0[1u].x) + (_1912 * (1.0 - cbModelParam._m0[1u].x));
    float _1937 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _913);
    float _1938 = isnan(_1937) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1937 : min(cbModelParam._m0[25u].z, _1937));
    float _2018;
    float _2020;
    float _2022;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1985 = fma(_1160, cbModelParam._m0[13u].z, fma(_1156, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1152)) + cbModelParam._m0[13u].w;
        float _1989 = fma(_1160, cbModelParam._m0[14u].z, fma(_1156, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1152)) + cbModelParam._m0[14u].w;
        float _1993 = fma(_1160, cbModelParam._m0[15u].z, fma(_1156, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1152)) + cbModelParam._m0[15u].w;
        float _1996 = fma(_1098, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1096));
        float _1999 = fma(_1098, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1096));
        float _2002 = fma(_1098, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1096));
        float _2030;
        if (_1996 > 0.0)
        {
            _2030 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2030 = frontier_phi_17_15_ladder;
        }
        float _2253;
        if (_1999 > 0.0)
        {
            _2253 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2253 = frontier_phi_26_22_ladder;
        }
        float _2510;
        if (_2002 > 0.0)
        {
            _2510 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2510 = frontier_phi_38_33_ladder;
        }
        float _2512 = isnan(_2253) ? _2030 : (isnan(_2030) ? _2253 : min(_2030, _2253));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1996) + _1985;
        float _2518 = (_2513 * _1999) + _1989;
        float _2519 = (_2513 * _2002) + _1993;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2520;
        float _2524 = _2520 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 > _2524) || ((_2518 < _2522) || ((_2517 < _2522) || (_2517 > _2524))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2519, cbModelParam._m0[9u].z, fma(_2518, cbModelParam._m0[9u].y, _2517 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2519, cbModelParam._m0[10u].z, fma(_2518, cbModelParam._m0[10u].y, _2517 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2519, cbModelParam._m0[11u].z, fma(_2518, cbModelParam._m0[11u].y, _2517 * cbModelParam._m0[11u].x))), _1938);
            frontier_phi_16_38_ladder = _2647.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2647.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2647.x * cbModelParam._m0[1u].y;
        }
        _2018 = frontier_phi_16_38_ladder_2;
        _2020 = frontier_phi_16_38_ladder_1;
        _2022 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2006 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1096, _1097, _1098), _1938);
        _2018 = _2006.x * cbModelParam._m0[1u].y;
        _2020 = _2006.y * cbModelParam._m0[1u].y;
        _2022 = _2006.z * cbModelParam._m0[1u].y;
    }
    float _2026 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _913);
    float _2027 = isnan(_2026) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2026 : min(cbModelParam._m0[25u].w, _2026));
    float _2116;
    float _2118;
    float _2120;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2080 = fma(_1160, cbModelParam._m0[21u].z, fma(_1156, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1152)) + cbModelParam._m0[21u].w;
        float _2084 = fma(_1160, cbModelParam._m0[22u].z, fma(_1156, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1152)) + cbModelParam._m0[22u].w;
        float _2088 = fma(_1160, cbModelParam._m0[23u].z, fma(_1156, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1152)) + cbModelParam._m0[23u].w;
        float _2091 = fma(_1098, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1096));
        float _2094 = fma(_1098, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1096));
        float _2097 = fma(_1098, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1096));
        float _2258;
        if (_2091 > 0.0)
        {
            _2258 = abs((1.0 - _2080) / _2091);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2080 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2258 = frontier_phi_28_24_ladder;
        }
        float _2537;
        if (_2094 > 0.0)
        {
            _2537 = abs((1.0 - _2084) / _2094);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2084 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2537 = frontier_phi_40_35_ladder;
        }
        float _2750;
        if (_2097 > 0.0)
        {
            _2750 = abs((1.0 - _2088) / _2097);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2088 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2750 = frontier_phi_49_46_ladder;
        }
        float _2752 = isnan(_2537) ? _2258 : (isnan(_2258) ? _2537 : min(_2258, _2537));
        float _2753 = isnan(_2750) ? _2752 : (isnan(_2752) ? _2750 : min(_2752, _2750));
        float _2757 = (_2753 * _2091) + _2080;
        float _2758 = (_2753 * _2094) + _2084;
        float _2759 = (_2753 * _2097) + _2088;
        float _2760 = _2753 * 9.9999997473787516355514526367188e-05;
        float _2761 = (-1.0) - _2760;
        float _2763 = _2760 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2759 > _2763) || ((_2759 < _2761) || ((_2758 > _2763) || ((_2758 < _2761) || ((_2757 < _2761) || (_2757 > _2763))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2958 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2759, cbModelParam._m0[17u].z, fma(_2758, cbModelParam._m0[17u].y, _2757 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2759, cbModelParam._m0[18u].z, fma(_2758, cbModelParam._m0[18u].y, _2757 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2759, cbModelParam._m0[19u].z, fma(_2758, cbModelParam._m0[19u].y, _2757 * cbModelParam._m0[19u].x))), _2027);
            frontier_phi_25_49_ladder = _2958.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2958.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2958.x * cbModelParam._m0[1u].z;
        }
        _2116 = frontier_phi_25_49_ladder_2;
        _2118 = frontier_phi_25_49_ladder_1;
        _2120 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2100 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1096, _1097, _1098), _2027);
        _2116 = _2100.x * cbModelParam._m0[1u].z;
        _2118 = _2100.y * cbModelParam._m0[1u].z;
        _2120 = _2100.z * cbModelParam._m0[1u].z;
    }
    float _2133 = (((_1123 * _1072) + _1124) * _1088) * ((cbModelParam._m0[1u].w * (_2116 - _2018)) + _2018);
    float _2135 = (((_1123 * _1074) + _1124) * _1088) * ((cbModelParam._m0[1u].w * (_2118 - _2020)) + _2020);
    float _2137 = (((_1123 * _1075) + _1124) * _1088) * ((cbModelParam._m0[1u].w * (_2120 - _2022)) + _2022);
    float _2140 = fma(_2137, cbSceneParam._m0[89u].z, fma(_2135, cbSceneParam._m0[89u].y, _2133 * cbSceneParam._m0[89u].x));
    float _2143 = fma(_2137, cbSceneParam._m0[90u].z, fma(_2135, cbSceneParam._m0[90u].y, _2133 * cbSceneParam._m0[90u].x));
    float _2146 = fma(_2137, cbSceneParam._m0[91u].z, fma(_2135, cbSceneParam._m0[91u].y, _2133 * cbSceneParam._m0[91u].x));
    vec4 _2154 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1010, _1011));
    float _2156 = _2154.w;
    float _2168 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2156);
    float _2169 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2156);
    float _2170 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2156);
    uvec4 _2174 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2176 = _2174.x * 14u;
    uint _2177 = _2176 + 13u;
    float _2184 = _1088 + (-1.0);
    float _2189 = (cbLight._m0[_2177].x * _2184) + 1.0;
    float _2190 = (cbLight._m0[_2177].y * _2184) + 1.0;
    float _2191 = (cbLight._m0[_2177].z * _2184) + 1.0;
    float _2192 = (cbLight._m0[_2177].w * _2184) + 1.0;
    uint _2193 = _2176 + 5u;
    float _2199 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
    uint _2203 = _2176 + 4u;
    float _2212 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
    uint _2216 = _2176 | 1u;
    float _2227 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_910, _911, _912));
    float _2230 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_910, _911, _912));
    float _4493 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _4504 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2235 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2237 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2244 = ((cbLight._m0[_2193].x * _2199) * _2237) + (((cbLight._m0[_2203].x * _2168) * _2212) * _2235);
    float _2245 = ((_2199 * cbLight._m0[_2193].y) * _2237) + (((cbLight._m0[_2203].y * _2169) * _2212) * _2235);
    float _2246 = ((_2199 * cbLight._m0[_2193].z) * _2237) + (((cbLight._m0[_2203].z * _2170) * _2212) * _2235);
    uvec4 _2250 = floatBitsToUint(cbLight._m0[_2176 + 12u]);
    bool _2252 = _2250.x == 0u;
    float _2263;
    float _2265;
    float _2267;
    if (_2252)
    {
        _2263 = _2244;
        _2265 = _2245;
        _2267 = _2246;
    }
    else
    {
        uint _2271 = _2176 + 6u;
        float _2287 = (dot(vec3(cbLight._m0[_2176 + 2u].xyz), vec3(_910, _911, _912)) * 0.5) + 0.5;
        float _2288 = _2287 * _2287;
        float _4515 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2289 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2290 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2263 = (((cbLight._m0[_2271].x * 0.3183098733425140380859375) * _2289) * _2290) + _2244;
        _2265 = (((cbLight._m0[_2271].y * 0.3183098733425140380859375) * _2289) * _2290) + _2245;
        _2267 = (((cbLight._m0[_2271].z * 0.3183098733425140380859375) * _2289) * _2290) + _2246;
    }
    bool _2270 = _2250.y == 0u;
    float _2308;
    float _2310;
    float _2312;
    if (_2270)
    {
        _2308 = _2263;
        _2310 = _2265;
        _2312 = _2267;
    }
    else
    {
        uint _2481 = _2176 + 7u;
        float _2497 = (dot(vec3(cbLight._m0[_2176 + 3u].xyz), vec3(_910, _911, _912)) * 0.5) + 0.5;
        float _2498 = _2497 * _2497;
        float _4531 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2499 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2500 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
        _2308 = (((cbLight._m0[_2481].x * 0.3183098733425140380859375) * _2499) * _2500) + _2263;
        _2310 = (((cbLight._m0[_2481].y * 0.3183098733425140380859375) * _2499) * _2500) + _2265;
        _2312 = (((cbLight._m0[_2481].z * 0.3183098733425140380859375) * _2499) * _2500) + _2267;
    }
    uint _2315 = _2176 + 8u;
    float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _913) * 0.949999988079071044921875);
    float _2329 = _2328 * _2328;
    float _2330 = cbLight._m0[_2176].x + _990;
    float _2331 = cbLight._m0[_2176].y + _991;
    float _2332 = cbLight._m0[_2176].z + _992;
    float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
    float _2337 = _2336 * _2330;
    float _2338 = _2336 * _2331;
    float _2339 = _2336 * _2332;
    float _2340 = dot(vec3(_910, _911, _912), vec3(cbLight._m0[_2176].xyz));
    float _4547 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _4558 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _2344 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2345 = dot(vec3(_910, _911, _912), vec3(_2337, _2338, _2339));
    float _4569 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2349 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2337, _2338, _2339));
    float _4580 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = _2329 * _2329;
    float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
    float _2365 = exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0);
    float _2366 = 0.959999978542327880859375 - _1069;
    float _2368 = 0.959999978542327880859375 - _1070;
    float _2369 = 0.959999978542327880859375 - _1071;
    float _2376 = 1.0 - _2329;
    float _2387 = (0.5 / (((_2344 * ((_2343 * _2376) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2344 * _2376) + _2329) * _2343))) * _2343;
    float _4591 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2389 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
    uint _2403 = _2176 + 9u;
    float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _913) * 0.949999988079071044921875);
    float _2415 = _2414 * _2414;
    float _2416 = cbLight._m0[_2216].x + _990;
    float _2417 = cbLight._m0[_2216].y + _991;
    float _2418 = cbLight._m0[_2216].z + _992;
    float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
    float _2423 = _2422 * _2416;
    float _2424 = _2422 * _2417;
    float _2425 = _2422 * _2418;
    float _2426 = dot(vec3(_910, _911, _912), vec3(cbLight._m0[_2216].xyz));
    float _4602 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2430 = dot(vec3(_910, _911, _912), vec3(_2423, _2424, _2425));
    float _4613 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2434 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2423, _2424, _2425));
    float _4624 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2438 = _2415 * _2415;
    float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
    float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0);
    float _2456 = 1.0 - _2415;
    float _2466 = (0.5 / (((_2344 * ((_2429 * _2456) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2344 * _2456) + _2415) * _2429))) * _2429;
    float _4635 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2468 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
    float _2478 = (((((_2449 * _2366) + _1072) * cbLight._m0[_2403].x) * _2468) * _2199) + ((((cbLight._m0[_2315].x * _2168) * ((_2365 * _2366) + _1072)) * _2389) * _2212);
    float _2479 = (((((_2449 * _2368) + _1074) * cbLight._m0[_2403].y) * _2468) * _2199) + ((((cbLight._m0[_2315].y * _2169) * ((_2365 * _2368) + _1074)) * _2389) * _2212);
    float _2480 = (((((_2449 * _2369) + _1075) * cbLight._m0[_2403].z) * _2468) * _2199) + ((((cbLight._m0[_2315].z * _2170) * ((_2365 * _2369) + _1075)) * _2389) * _2212);
    float _2542;
    float _2544;
    float _2546;
    if (_2252)
    {
        _2542 = _2478;
        _2544 = _2479;
        _2546 = _2480;
    }
    else
    {
        uint _2548 = _2176 + 2u;
        uint _2552 = _2176 + 10u;
        float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2548].w)) * _913) * 0.949999988079071044921875);
        float _2567 = _2566 * _2566;
        float _2568 = cbLight._m0[_2548].x + _990;
        float _2569 = cbLight._m0[_2548].y + _991;
        float _2570 = cbLight._m0[_2548].z + _992;
        float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
        float _2575 = _2574 * _2568;
        float _2576 = _2574 * _2569;
        float _2577 = _2574 * _2570;
        float _2578 = dot(vec3(_910, _911, _912), vec3(cbLight._m0[_2548].xyz));
        float _4646 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2582 = dot(vec3(_910, _911, _912), vec3(_2575, _2576, _2577));
        float _4657 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2586 = dot(vec3(cbLight._m0[_2548].xyz), vec3(_2575, _2576, _2577));
        float _4668 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2590 = _2567 * _2567;
        float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
        float _2601 = exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0);
        float _2608 = 1.0 - _2567;
        float _2618 = (0.5 / (((_2344 * ((_2581 * _2608) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2344 * _2608) + _2567) * _2581))) * _2581;
        float _4679 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2620 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
        float _2621 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
        _2542 = (((((_2601 * _2366) + _1072) * cbLight._m0[_2552].x) * _2620) * _2621) + _2478;
        _2544 = (((((_2601 * _2368) + _1074) * cbLight._m0[_2552].y) * _2620) * _2621) + _2479;
        _2546 = (((((_2601 * _2369) + _1075) * cbLight._m0[_2552].z) * _2620) * _2621) + _2480;
    }
    float _2656;
    float _2658;
    float _2660;
    if (_2270)
    {
        _2656 = _2542;
        _2658 = _2544;
        _2660 = _2546;
    }
    else
    {
        uint _2667 = _2176 + 3u;
        uint _2671 = _2176 + 11u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _913) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _990;
        float _2688 = cbLight._m0[_2667].y + _991;
        float _2689 = cbLight._m0[_2667].z + _992;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_910, _911, _912), vec3(cbLight._m0[_2667].xyz));
        float _4695 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2701 = dot(vec3(_910, _911, _912), vec3(_2694, _2695, _2696));
        float _4706 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4717 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2720 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
        float _2727 = 1.0 - _2686;
        float _2737 = (0.5 / (((_2344 * ((_2700 * _2727) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2344 * _2727) + _2686) * _2700))) * _2700;
        float _4728 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2739 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2740 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
        _2656 = (((((_2720 * _2366) + _1072) * cbLight._m0[_2671].x) * _2739) * _2740) + _2542;
        _2658 = (((((_2720 * _2368) + _1074) * cbLight._m0[_2671].y) * _2739) * _2740) + _2544;
        _2660 = (((((_2720 * _2369) + _1075) * cbLight._m0[_2671].z) * _2739) * _2740) + _2546;
    }
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_2174.y == 0u)
    {
        float _2815 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2816 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2815;
        float _2817 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2815;
        float _2818 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2815;
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.x;
        uint _2842 = uint((float(_2830.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1011) / _2831))) + floor(float(uint(cbSceneParam._m0[85u].x * _1010) / _2831)));
        float _2852 = (log2(_2818 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2853 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        uint _2856 = uint(isnan(14.0) ? _2853 : (isnan(_2853) ? 14.0 : min(_2853, 14.0)));
        uvec4 _2861 = texelFetch(g_lightClusterGridBuffer, int(((_2856 << 2u) + (_2842 << 6u)) >> 2u));
        uint _2862 = _2861.x;
        uint _2863 = _2830.z;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        if (((((1u << ((_2863 >> 4u) & 15u)) + 4294967295u) & _2862) == 0u) || ((_2863 & 240u) == 0u))
        {
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
        }
        else
        {
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            uint _3122 = 0u;
            uint _3131;
            bool _3132;
            for (;;)
            {
                _3131 = texelFetch(g_lightClassification, int((((_2856 << 5u) + (_2842 << 9u)) + (_3122 << 2u)) >> 2u)).x;
                _3132 = _3131 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3132)
                {
                    frontier_phi_66_pred = _3116;
                    frontier_phi_66_pred_1 = _3121;
                    frontier_phi_66_pred_2 = _3120;
                    frontier_phi_66_pred_3 = _3119;
                    frontier_phi_66_pred_4 = _3118;
                    frontier_phi_66_pred_5 = _3117;
                }
                else
                {
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    uint _3267;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3131;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    for (;;)
                    {
                        uint _3271 = uint(findLSB(_3267)) + (_3122 << 5u);
                        uint _3268 = (_3267 + 4294967295u) & _3267;
                        uint _3273 = _3271 * 48u;
                        vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 3u)).x));
                        uint _3293 = (_3271 * 48u) + 4u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 3u)).x));
                        uint _3312 = (_3271 * 48u) + 8u;
                        vec3 _3323 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x));
                        float _3327 = _3287.x - _2816;
                        float _3328 = _3287.y - _2817;
                        float _3329 = _3287.z - _2818;
                        float _3330 = dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329));
                        float _3333 = inversesqrt(_3330);
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3337 = dot(vec3(_1029, _1032, _1035), vec3(_3334, _3335, _3336));
                        float _3342 = 1.0 - (_3330 * _3287.w);
                        float _4754 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3343 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3344 = sqrt(_3330) * _3306.w;
                        float _3347 = 1.39999997615814208984375 / (_3344 + 1.39999997615814208984375);
                        float _3348 = _3347 * _3347;
                        float _3351 = ((1.0 - _3348) * _3337) + _3348;
                        float _3354 = _3344 * _3344;
                        float _3358 = ((isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))) * _3343) / ((_3354 * 0.699999988079071044921875) + 1.0);
                        float _3362 = (-0.0) - _2816;
                        float _3363 = (-0.0) - _2817;
                        float _3364 = (-0.0) - _2818;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3369 = _3368 * _3362;
                        float _3370 = _3368 * _3363;
                        float _3371 = _3368 * _3364;
                        float _3379 = exp2(log2(1.0 / ((_3354 * 3.5) + 5.0)) * 0.25);
                        float _3380 = 1.0 - _1104;
                        float _3387 = sqrt(1.0 - ((1.0 - (_3380 * _3380)) * (1.0 - (_3379 * _3379))));
                        float _3388 = _3387 * _3387;
                        float _3389 = _3388 * _3388;
                        float _3390 = _3369 + _3334;
                        float _3391 = _3370 + _3335;
                        float _3392 = _3371 + _3336;
                        float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                        float _3400 = dot(vec3(_1029, _1032, _1035), vec3(_3369, _3370, _3371));
                        float _4770 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3404 = dot(vec3(_1029, _1032, _1035), vec3(_3396 * _3390, _3396 * _3391, _3396 * _3392));
                        float _4781 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3407 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3411 = ((_3407 * _3407) * (_3389 + (-1.0))) + 1.0;
                        float _3412 = _3347 * _3388;
                        float _3413 = _3412 * _3412;
                        float _3416 = ((1.0 - _3413) * _3337) + _3413;
                        float _4792 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3417 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3418 = 1.0 - _3388;
                        float _3428 = (0.5 / (((_3417 * ((_3403 * _3418) + _3388)) + 9.9999999392252902907785028219223e-09) + (((_3417 * _3418) + _3388) * _3403))) * _3417;
                        float _4803 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3439 = (((_3389 * 3.1415927410125732421875) * (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) / ((_3411 * _3411) * ((_3354 * 2.1991131305694580078125) + 3.141590118408203125))) * _3343;
                        _3191 = (_3358 * _3306.x) + _3264;
                        _3192 = (_3358 * _3306.y) + _3265;
                        _3193 = (_3358 * _3306.z) + _3266;
                        _3188 = (_3439 * _3323.x) + _3261;
                        _3189 = (_3439 * _3323.y) + _3262;
                        _3190 = (_3439 * _3323.z) + _3263;
                        if (_3268 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3268;
                        }
                    }
                    frontier_phi_66_pred = _3188;
                    frontier_phi_66_pred_1 = _3193;
                    frontier_phi_66_pred_2 = _3192;
                    frontier_phi_66_pred_3 = _3191;
                    frontier_phi_66_pred_4 = _3190;
                    frontier_phi_66_pred_5 = _3189;
                }
                _2964 = frontier_phi_66_pred;
                _2974 = frontier_phi_66_pred_1;
                _2972 = frontier_phi_66_pred_2;
                _2970 = frontier_phi_66_pred_3;
                _2968 = frontier_phi_66_pred_4;
                _2966 = frontier_phi_66_pred_5;
                uint _3123 = _3122 + 1u;
                if (_3123 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3116 = _2964;
                    _3117 = _2966;
                    _3118 = _2968;
                    _3119 = _2970;
                    _3120 = _2972;
                    _3121 = _2974;
                    _3122 = _3123;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
        }
        uvec4 _2977 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2978 = _2977.z;
        uint _2980 = (_2978 >> 8u) & 15u;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        if (((4294967295u << _2980) & _2862) == 0u)
        {
            _3084 = _2963;
            _3086 = _2965;
            _3088 = _2967;
            _3090 = _2969;
            _3092 = _2971;
            _3094 = _2973;
        }
        else
        {
            float _3109 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
            float _3110 = _3109 * _2816;
            float _3111 = _3109 * _2817;
            float _3112 = _3109 * _2818;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2980 < ((_2978 >> 12u) & 15u))
            {
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3244 = _2963;
                float _3245 = _2965;
                float _3246 = _2967;
                float _3247 = _2969;
                float _3248 = _2971;
                float _3249 = _2973;
                uint _3250 = _2980;
                uint _3259;
                bool _3260;
                for (;;)
                {
                    _3259 = texelFetch(g_lightClassification, int((((_2856 << 5u) + (_2842 << 9u)) + (_3250 << 2u)) >> 2u)).x;
                    _3260 = _3259 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3260)
                    {
                        frontier_phi_77_pred = _3249;
                        frontier_phi_77_pred_1 = _3248;
                        frontier_phi_77_pred_2 = _3247;
                        frontier_phi_77_pred_3 = _3246;
                        frontier_phi_77_pred_4 = _3245;
                        frontier_phi_77_pred_5 = _3244;
                    }
                    else
                    {
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3466 = _3244;
                        float _3467 = _3245;
                        float _3468 = _3246;
                        float _3469 = _3247;
                        float _3470 = _3248;
                        float _3471 = _3249;
                        uint _3472 = _3259;
                        uint _3473;
                        vec4 _3498;
                        float _3499;
                        vec4 _3514;
                        vec3 _3526;
                        vec4 _3541;
                        vec4 _3556;
                        float _3602;
                        bool _3603;
                        for (;;)
                        {
                            uint _3483 = ((_3250 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3472));
                            _3473 = (_3472 + 4294967295u) & _3472;
                            uint _3485 = _3483 * 40u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            _3499 = _3498.w;
                            uint _3501 = (_3483 * 40u) + 4u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3483 * 40u) + 8u;
                            _3526 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x));
                            uint _3528 = (_3483 * 40u) + 16u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3483 * 40u) + 20u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3483 * 40u) + 24u;
                            vec4 _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3577 = (_3483 * 40u) + 28u;
                            vec4 _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            _3602 = fma(_2818, _3590.z, fma(_2817, _3590.y, _3590.x * _2816)) + _3590.w;
                            _3603 = !((fma(_2818, _3571.z, fma(_2817, _3571.y, _3571.x * _2816)) + _3571.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3603)
                            {
                                float _3630 = _3498.x - _2816;
                                float _3631 = _3498.y - _2817;
                                float _3632 = _3498.z - _2818;
                                float _3633 = dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632));
                                float _3636 = inversesqrt(_3633);
                                float _3637 = _3636 * _3630;
                                float _3638 = _3636 * _3631;
                                float _3639 = _3636 * _3632;
                                float _3643 = 1.0 - (_3633 / (_3499 * _3499));
                                float _4814 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3648 = sqrt(_3633) * _3514.w;
                                float _3650 = 1.39999997615814208984375 / (_3648 + 1.39999997615814208984375);
                                float _3651 = _3650 * _3650;
                                float _3654 = ((1.0 - _3651) * dot(vec3(_3637, _3638, _3639), vec3(_1029, _1032, _1035))) + _3651;
                                float _3657 = _3648 * _3648;
                                float _3661 = (fma(_2818, _3541.z, fma(_2817, _3541.y, _3541.x * _2816)) + _3541.w) / _3602;
                                float _3662 = (fma(_2818, _3556.z, fma(_2817, _3556.y, _3556.x * _2816)) + _3556.w) / _3602;
                                float _3666 = 1.0 - dot(vec2(_3661, _3662), vec2(_3661, _3662));
                                float _4830 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3668 = _3667 * (((isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0))) * _3644) / ((_3657 * 0.699999988079071044921875) + 1.0));
                                float _3680 = exp2(log2(1.0 / ((_3657 * 3.5) + 5.0)) * 0.25);
                                float _3681 = 1.0 - _1104;
                                float _3688 = sqrt(1.0 - ((1.0 - (_3681 * _3681)) * (1.0 - (_3680 * _3680))));
                                float _3689 = _3688 * _3688;
                                float _3690 = _3689 * _3689;
                                float _3691 = _3637 - _3110;
                                float _3692 = _3638 - _3111;
                                float _3693 = _3639 - _3112;
                                float _3697 = inversesqrt(dot(vec3(_3691, _3692, _3693), vec3(_3691, _3692, _3693)));
                                float _3701 = dot(vec3(_1029, _1032, _1035), vec3((-0.0) - _3110, (-0.0) - _3111, (-0.0) - _3112));
                                float _4841 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3704 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3705 = dot(vec3(_1029, _1032, _1035), vec3(_3697 * _3691, _3697 * _3692, _3697 * _3693));
                                float _4852 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3708 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3712 = ((_3708 * _3708) * (_3690 + (-1.0))) + 1.0;
                                float _3713 = _3650 * _3689;
                                float _3714 = _3713 * _3713;
                                float _3720 = ((1.0 - _3714) * dot(vec3(_1029, _1032, _1035), vec3(_3637, _3638, _3639))) + _3714;
                                float _4863 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3721 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3722 = 1.0 - _3689;
                                float _3732 = (0.5 / (((_3721 * ((_3704 * _3722) + _3689)) + 9.9999999392252902907785028219223e-09) + (((_3721 * _3722) + _3689) * _3704))) * _3721;
                                float _4874 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3742 = (_3667 * _3644) * (((_3690 * 3.1415927410125732421875) * (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) / ((_3712 * _3712) * ((_3657 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3668 * _3514.y;
                                frontier_phi_83_pred_1 = _3668 * _3514.x;
                                frontier_phi_83_pred_2 = _3742 * _3526.z;
                                frontier_phi_83_pred_3 = _3742 * _3526.y;
                                frontier_phi_83_pred_4 = _3742 * _3526.x;
                                frontier_phi_83_pred_5 = _3668 * _3514.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3750 = frontier_phi_83_pred;
                            _3749 = frontier_phi_83_pred_1;
                            _3748 = frontier_phi_83_pred_2;
                            _3747 = frontier_phi_83_pred_3;
                            _3746 = frontier_phi_83_pred_4;
                            _3751 = frontier_phi_83_pred_5;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            _3455 = _3748 + _3468;
                            if (_3473 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3473;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3458;
                        frontier_phi_77_pred_1 = _3457;
                        frontier_phi_77_pred_2 = _3456;
                        frontier_phi_77_pred_3 = _3455;
                        frontier_phi_77_pred_4 = _3454;
                        frontier_phi_77_pred_5 = _3453;
                    }
                    _3095 = frontier_phi_77_pred;
                    _3093 = frontier_phi_77_pred_1;
                    _3091 = frontier_phi_77_pred_2;
                    _3089 = frontier_phi_77_pred_3;
                    _3087 = frontier_phi_77_pred_4;
                    _3085 = frontier_phi_77_pred_5;
                    uint _3251 = _3250 + 1u;
                    if (_3251 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3244 = _3085;
                        _3245 = _3087;
                        _3246 = _3089;
                        _3247 = _3091;
                        _3248 = _3093;
                        _3249 = _3095;
                        _3250 = _3251;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3089;
                frontier_phi_58_59_ladder_1 = _3095;
                frontier_phi_58_59_ladder_2 = _3093;
                frontier_phi_58_59_ladder_3 = _3091;
                frontier_phi_58_59_ladder_4 = _3087;
                frontier_phi_58_59_ladder_5 = _3085;
            }
            else
            {
                frontier_phi_58_59_ladder = _2967;
                frontier_phi_58_59_ladder_1 = _2973;
                frontier_phi_58_59_ladder_2 = _2971;
                frontier_phi_58_59_ladder_3 = _2969;
                frontier_phi_58_59_ladder_4 = _2965;
                frontier_phi_58_59_ladder_5 = _2963;
            }
            _3084 = frontier_phi_58_59_ladder_5;
            _3086 = frontier_phi_58_59_ladder_4;
            _3088 = frontier_phi_58_59_ladder;
            _3090 = frontier_phi_58_59_ladder_3;
            _3092 = frontier_phi_58_59_ladder_2;
            _3094 = frontier_phi_58_59_ladder_1;
        }
        float _3099 = isnan(1.0) ? _1088 : (isnan(_1088) ? 1.0 : min(_1088, 1.0));
        _2875 = (_3099 * _3090) + _2308;
        _2877 = (_3099 * _3092) + _2310;
        _2879 = (_3099 * _3094) + _2312;
        _2881 = ((_3084 * _1072) * _3099) + _2656;
        _2883 = ((_3086 * _1074) * _3099) + _2658;
        _2885 = ((_3088 * _1075) * _3099) + _2660;
    }
    else
    {
        _2875 = _2308;
        _2877 = _2310;
        _2879 = _2312;
        _2881 = _2656;
        _2883 = _2658;
        _2885 = _2660;
    }
    float _4890 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _4901 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _4912 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2902 = ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2875 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1088))) + ((_2881 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1927)) * cbPerFrame._m0[3u].x);
    float _2903 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2877 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1088))) + ((_2883 + ((isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))) * _1927)) * cbPerFrame._m0[3u].x);
    float _2904 = ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2879 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1088))) + ((_2885 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1927)) * cbPerFrame._m0[3u].x);
    uint _2905 = _282 + 6u;
    float _2913 = _1010 / cbSceneParam._m0[86u].x;
    float _2914 = _1011 / cbSceneParam._m0[86u].y;
    vec4 _2928 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2913, _2914, (log2((isnan(cbSceneParam._m0[77u].w) ? _932 : (isnan(_932) ? cbSceneParam._m0[77u].w : min(_932, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2930 = _2928.x;
    float _2931 = _2928.y;
    float _2932 = _2928.z;
    float _2933 = _2928.w;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    if (_932 > cbSceneParam._m0[78u].w)
    {
        float _2988 = isnan(_932) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _932 : min(cbSceneParam._m0[80u].w, _932));
        float _2989 = _2988 / _932;
        float _3000 = _2989 * _983;
        float _3001 = _984 * _2989;
        float _3002 = (-0.0) - _3001;
        float _3004 = _2989 * _985;
        float _3006 = (cbSceneParam._m0[77u].w * _3002) / _2988;
        float _3007 = _3006 + cbSceneParam._m0[79u].w;
        float _3008 = cbSceneParam._m0[79u].w - _3001;
        float _3014 = sqrt(((_3000 * _3000) + (_3001 * _3001)) + (_3004 * _3004));
        float _3017 = (1.0 - (cbSceneParam._m0[77u].w / _2988)) * _3014;
        float _3022 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3024 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3201;
        if (abs((_3002 - _3006) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3201 = ((((_3007 > 0.0) ? exp2(_3022 * _3007) : (2.0 - exp2(_3024 * _3007))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3017;
        }
        else
        {
            float _3145 = 1.0 / cbSceneParam._m0[80u].x;
            float _3146 = isnan(_3008) ? _3007 : (isnan(_3007) ? _3008 : max(_3007, _3008));
            float _3147 = isnan(_3008) ? _3007 : (isnan(_3007) ? _3008 : min(_3007, _3008));
            float _3156 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : min(_3146, 0.0));
            float _3157 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : min(_3147, 0.0));
            _3201 = ((abs(_3014 / _3002) * cbSceneParam._m0[80u].y) * ((((_3156 - _3157) * 2.0) - ((exp2(_3022 * (isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0)))) - exp2(_3022 * (isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))))) * _3145)) - ((exp2(_3024 * _3156) - exp2(_3024 * _3157)) * _3145))) + (_3017 * cbSceneParam._m0[80u].z);
        }
        vec4 _3203 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2913, _2914, 1.0), 0.0);
        float _3212 = exp2((_3201 * (-1.44269502162933349609375)) * (1.0 - _3203.w));
        float _3213 = log2(_3212);
        float _3229 = log2(_2933);
        _3026 = (exp2(_3229 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].x)) * _3203.x) / cbSceneParam._m0[78u].x)) + _2930;
        _3028 = (exp2(_3229 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].y)) * _3203.y) / cbSceneParam._m0[78u].y)) + _2931;
        _3030 = (exp2(_3229 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3213 * cbSceneParam._m0[78u].z)) * _3203.z) / cbSceneParam._m0[78u].z)) + _2932;
        _3032 = _3212 * _2933;
    }
    else
    {
        _3026 = _2930;
        _3028 = _2931;
        _3030 = _2932;
        _3032 = _2933;
    }
    bool _3239;
    vec4 _3042;
    vec4 _3064;
    float _3066;
    float _3070;
    float _3071;
    float _3072;
    float _3073;
    bool _3083;
    for (;;)
    {
        _3042 = cbMatDynParam._m0[0u];
        float _3044 = roundEven(_3042.y);
        bool _3045 = _3044 == 3.0;
        float _3046 = log2(_3032);
        float _3053 = exp2(_3046 * cbSceneParam._m0[78u].x) * _2902;
        float _3054 = exp2(_3046 * cbSceneParam._m0[78u].y) * _2903;
        float _3055 = exp2(_3046 * cbSceneParam._m0[78u].z) * _2904;
        float _3062 = _999 + (-0.5);
        _3064 = cbMtdParam._m0[1u];
        _3066 = _3064.y * _3062;
        float _3069 = (_3044 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3070 = _3069 * (_3045 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3026)));
        _3071 = _3069 * (_3045 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3028)));
        _3072 = _3069 * (_3045 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3030)));
        _3073 = _3062 * 0.999000012874603271484375;
        _3083 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3083)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3073) < 0.5)
            {
                _3239 = true;
                break;
            }
        }
        uint _3180 = _1048 + uint(_3042.w);
        if ((cbInstanceData._m0[_3180].w < 1.0) && ((cbInstanceData._m0[_3180].w + _3073) < 0.5))
        {
            _3239 = true;
            break;
        }
        if ((_3066 + 1.0) < _3064.x)
        {
            _3239 = true;
            break;
        }
        _3239 = false;
        break;
    }
    float _3444;
    if (_3239)
    {
        discard_state = true;
        _3444 = 0.0;
    }
    else
    {
        _3444 = cbInstanceData._m0[_2905].w;
    }
    SV_Target.x = _3070;
    SV_Target.y = _3071;
    SV_Target.z = _3072;
    SV_Target.w = _3444;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2905].w;
    discard_exit();
}


