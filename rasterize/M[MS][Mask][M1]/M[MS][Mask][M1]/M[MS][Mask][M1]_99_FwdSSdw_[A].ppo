#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1653;
float _4054;
float _4055;
float _4056;
float _4057;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _259 = _258 * _250;
    float _260 = _258 * _251;
    float _261 = _258 * _252;
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = _265 * NORMAL.x;
    float _267 = _265 * NORMAL.y;
    float _268 = _265 * NORMAL.z;
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = _272 * TANGENT.x;
    float _274 = _272 * TANGENT.y;
    float _275 = _272 * TANGENT.z;
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4066 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4077 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4088 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[23u].w) + _470) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4099 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _495 = (_488 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _496 = (_488 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _497 = (_488 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[23u].w) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4110 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _571 = (_353.x * cbMtdParam._m0[9u].x) * ((_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495);
    float _572 = (_353.y * cbMtdParam._m0[9u].y) * ((_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496);
    float _573 = (_353.z * cbMtdParam._m0[9u].z) * ((_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497);
    float _577 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _571;
    float _580 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _572;
    float _583 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _573;
    float _591 = (((_571 - _577) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) + _577) * 4.55000019073486328125;
    float _593 = (((_572 - _580) * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) + _580) * 4.55000019073486328125;
    float _595 = (((_573 - _583) * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) + _583) * 4.55000019073486328125;
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _316) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _317) + cbTextureTilingScale._m0[14u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _677 = _675.x;
    float _678 = _675.y;
    float _679 = _675.z;
    float _686 = ((_658.x - _677) * _488) + _677;
    float _687 = ((_658.y - _678) * _488) + _678;
    float _688 = ((_658.z - _679) * _488) + _679;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _713 = ((_700.z - _688) * _561) + _688;
    float _716 = ((((_700.x - _686) * _561) + _686) * 2.0) + (-1.0);
    float _717 = ((((_700.y - _687) * _561) + _687) * 2.0) + (-1.0);
    float _718 = dot(vec2(_716, _717), vec2(_716, _717));
    float _4121 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _723 = sqrt(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _753 = (_716 + ((((_633.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_741.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _754 = (_717 + ((((_633.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_741.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _757 = fma(_723, _266, fma(_754, _273, _753 * _259));
    float _760 = fma(_723, _267, fma(_754, _274, _753 * _260));
    float _763 = fma(_723, _268, fma(_754, _275, _753 * _261));
    float _767 = inversesqrt(dot(vec3(_757, _760, _763), vec3(_757, _760, _763)));
    vec4 _794 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _796 = _794.x;
    float _797 = 1.0 - _796;
    float _806 = (cbMtdParam._m0[19u].x + dot(vec4(_767 * _757, _767 * _760, _767 * _763, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_796 - _797) * cbMtdParam._m0[24u].z) + _797) * cbMtdParam._m0[21u].z);
    float _4132 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _807 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _809 = (-0.0) - cbMtdParam._m0[24u].x;
    float _811 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
    float _819 = _807 - ((_807 * TEXCOORD_8.x) * _812);
    float _820 = _807 - ((_807 * TEXCOORD_8.y) * _812);
    float _821 = _807 - ((_807 * TEXCOORD_8.z) * _812);
    float _828 = (_819 * ((_614.x * cbMtdParam._m0[18u].x) - _591)) + _591;
    float _829 = (_820 * ((_614.y * cbMtdParam._m0[18u].y) - _593)) + _593;
    float _830 = (_821 * ((_614.z * cbMtdParam._m0[18u].z) - _595)) + _595;
    vec4 _842 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _844 = _842.x;
    float _845 = 1.0 - _844;
    float _871 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_844 - _845) * cbMtdParam._m0[24u].w) + _845) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4153 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _872 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _880 = ((((cbMtdParam._m0[10u].x - _828) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _872) + _828;
    float _881 = ((((cbMtdParam._m0[10u].y - _829) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _872) + _829;
    float _882 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _830)) * _872) + _830;
    vec4 _908 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _910 = _908.x;
    float _927 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _910) * _488) + _910;
    float _944 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _927) * _561) + _927;
    float _948 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _944) * cbMtdParam._m0[19u].z) + _944;
    float _950 = _948 - (_948 * _819);
    float _952 = _950 - (_950 * _872);
    float _957 = (((_633.z - _713) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _713;
    float _961 = ((_741.z - _957) * cbMtdParam._m0[19u].w) + _957;
    vec4 _975 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _982 = (_975.x * 2.0) + (-1.0);
    float _983 = (_975.y * 2.0) + (-1.0);
    float _984 = dot(vec2(_982, _983), vec2(_982, _983));
    float _4164 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _992 = ((_975.z - _961) * _819) + _961;
    float _995 = ((cbMtdParam._m0[23u].x - _992) * _872) + _992;
    vec4 _1018 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1024 = (_1018.x * 2.0) + (-1.0);
    float _1025 = (_1018.y * 2.0) + (-1.0);
    float _1026 = dot(vec2(_1024, _1025), vec2(_1024, _1025));
    float _4175 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1041 = ((sqrt(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) - _723) * _821) + _723;
    float _1044 = (((_982 - _753) * _819) + _753) + (cbMtdParam._m0[21u].x * _753);
    float _1045 = (((_983 - _754) * _820) + _754) + (cbMtdParam._m0[21u].x * _754);
    float _1056 = (((_1024 - _1044) + (_1044 * cbMtdParam._m0[22u].z)) * _872) + _1044;
    float _1057 = (((_1025 - _1045) + (_1045 * cbMtdParam._m0[22u].z)) * _872) + _1045;
    float _1058 = (_872 * (sqrt(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) - _1041)) + _1041;
    float _1060 = cbMtdParam._m0[22u].x + _741.w;
    float _1063 = fma(_1058, _266, fma(_1057, _273, _1056 * _259));
    float _1066 = fma(_1058, _267, fma(_1057, _274, _1056 * _260));
    float _1069 = fma(_1058, _268, fma(_1057, _275, _1056 * _261));
    float _1073 = inversesqrt(dot(vec3(_1063, _1066, _1069), vec3(_1063, _1066, _1069)));
    float _1074 = _1073 * _1063;
    float _1075 = _1073 * _1066;
    float _1076 = _1073 * _1069;
    float _4186 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _1077 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _4208 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4219 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4230 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4241 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _1082 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _1096 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1146 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1136);
    float _1147 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1136);
    float _1148 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1136);
    float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
    float _1153 = _1146 * _1152;
    float _1154 = _1147 * _1152;
    float _1155 = _1148 * _1152;
    vec4 _1160 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1162 = _1160.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1334 = sqrt(((_1146 * _1146) + (_1147 * _1147)) + (_1148 * _1148));
        float _1340 = (cbMatDynParam._m0[5u].x * _1334) + cbMatDynParam._m0[5u].y;
        float _4252 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1345 = (cbMatDynParam._m0[5u].z * _1334) + cbMatDynParam._m0[5u].w;
        float _4263 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) - _1341)) + _1341) < ((_1162 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1173 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1174 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1192 = fma(_1076, cbSceneParam._m0[5u].z, fma(_1075, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1074));
    float _1195 = fma(_1076, cbSceneParam._m0[6u].z, fma(_1075, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1074));
    float _1198 = fma(_1076, cbSceneParam._m0[7u].z, fma(_1075, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1074));
    uint _1211 = _297 + 9u;
    uint _1212 = _1211 + uint(cbMatDynParam._m0[0u].w);
    float _1218 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * cbInstanceData._m0[_1212].x;
    float _1219 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * cbInstanceData._m0[_1212].y;
    float _1220 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * cbInstanceData._m0[_1212].z;
    float _4274 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1221 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _1222 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _4296 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1223 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _1224 = 1.0 - _1082;
    float _1225 = _1221 * _1224;
    float _1226 = _1222 * _1224;
    float _1227 = _1223 * _1224;
    float _1232 = (_1221 + (-0.039999999105930328369140625)) * _1082;
    float _1233 = (_1222 + (-0.039999999105930328369140625)) * _1082;
    float _1234 = (_1223 + (-0.039999999105930328369140625)) * _1082;
    float _1235 = _1232 + 0.039999999105930328369140625;
    float _1237 = _1233 + 0.039999999105930328369140625;
    float _1238 = _1234 + 0.039999999105930328369140625;
    vec4 _1247 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1173, cbSceneParam._m0[86u].y * _1174));
    float _1251 = ((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * TEXCOORD_5.w) * _1247.x;
    float _1252 = dot(vec3(_1074, _1075, _1076), vec3(_1153, _1154, _1155));
    float _1255 = _1252 * 2.0;
    float _1259 = (_1255 * _1074) - _1153;
    float _1260 = (_1255 * _1075) - _1154;
    float _1261 = (_1255 * _1076) - _1155;
    float _1265 = abs(dot(vec3(_1153, _1154, _1155), vec3(_1074, _1075, _1076)));
    float _4307 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _1267 = sqrt(_1077);
    float _1280 = exp2((_1267 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1267 * 3.0));
    float _1286 = (1.0 - _1280) * ((_1267 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1287 = _1280 * _1267;
    float _1315 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1319 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1323 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1652;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1377 = fma(_1323, cbModelParam._m0[26u].z, fma(_1319, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1315));
        float _1381 = fma(_1323, cbModelParam._m0[27u].z, fma(_1319, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1315));
        float _1385 = fma(_1323, cbModelParam._m0[28u].z, fma(_1319, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1315));
        float _1410 = _1315 + _1074;
        float _1411 = _1319 + _1075;
        float _1412 = _1323 + _1076;
        float _1422 = fma(_1412, cbModelParam._m0[26u].z, fma(_1411, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1410)) - _1377;
        float _1423 = fma(_1412, cbModelParam._m0[27u].z, fma(_1411, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1410)) - _1381;
        float _1424 = fma(_1412, cbModelParam._m0[28u].z, fma(_1411, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1410)) - _1385;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1377 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1381 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[34u].z) + ((((((_1385 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1480 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1446.x + (-0.5));
        float _1482 = _1480 * (_1446.y + (-0.5));
        float _1483 = _1480 * (_1446.z + (-0.5));
        float _1490 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1453.x + (-0.5));
        float _1492 = _1490 * (_1453.y + (-0.5));
        float _1493 = _1490 * (_1453.z + (-0.5));
        float _1500 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1460.x + (-0.5));
        float _1502 = _1500 * (_1460.y + (-0.5));
        float _1503 = _1500 * (_1460.z + (-0.5));
        float _1510 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1467.x + (-0.5));
        float _1512 = _1510 * (_1467.y + (-0.5));
        float _1513 = _1510 * (_1467.z + (-0.5));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = _1481 * 0.5;
        float _1518 = _1491 * 0.5;
        float _1519 = _1501 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1534 = (dot(vec3(_1074, _1075, _1076), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1544 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4355 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1546 + 1.0))) + _1551) * _1514;
        float _1561 = _1482 * 0.5;
        float _1562 = _1492 * 0.5;
        float _1563 = _1502 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_1074, _1075, _1076), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4388 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1588 + 1.0))) + _1593) * _1515;
        float _1603 = _1483 * 0.5;
        float _1604 = _1493 * 0.5;
        float _1605 = _1503 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_1074, _1075, _1076), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4421 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1630 + 1.0))) + _1635) * _1516;
        _1652 = _1483;
        _1654 = _1482;
        _1655 = _1481;
        _1656 = _1493;
        _1657 = _1492;
        _1658 = _1491;
        _1659 = _1503;
        _1660 = _1502;
        _1661 = _1501;
        _1662 = _1516;
        _1663 = _1515;
        _1664 = _1514;
        _1665 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1666 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1667 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
    }
    else
    {
        _1652 = _1653;
        _1654 = _1653;
        _1655 = _1653;
        _1656 = _1653;
        _1657 = _1653;
        _1658 = _1653;
        _1659 = _1653;
        _1660 = _1653;
        _1661 = _1653;
        _1662 = _1653;
        _1663 = _1653;
        _1664 = _1653;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1694 = fma(_1323, cbModelParam._m0[30u].z, fma(_1319, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315));
        float _1698 = fma(_1323, cbModelParam._m0[31u].z, fma(_1319, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315));
        float _1702 = fma(_1323, cbModelParam._m0[32u].z, fma(_1319, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315));
        float _1725 = _1315 + _1074;
        float _1726 = _1319 + _1075;
        float _1727 = _1323 + _1076;
        float _1737 = fma(_1727, cbModelParam._m0[30u].z, fma(_1726, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1725)) - _1694;
        float _1738 = fma(_1727, cbModelParam._m0[31u].z, fma(_1726, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1725)) - _1698;
        float _1739 = fma(_1727, cbModelParam._m0[32u].z, fma(_1726, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1725)) - _1702;
        float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
        float _1756 = ((_1743 * _1737) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1694 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1757 = ((_1743 * _1738) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1698 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1758 = ((_1743 * _1739) / cbModelParam._m0[35u].z) + ((((((_1702 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1760 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1756, _1757, _1758), 0.0);
        vec4 _1767 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1756, _1757, _1758), 0.0);
        vec4 _1774 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1756, _1757, _1758), 0.0);
        vec4 _1781 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1756, _1757, _1758), 0.0);
        float _1793 = exp2((_1760.w + (-0.5)) * 20.0) * 2.0;
        float _1794 = _1793 * (_1760.x + (-0.5));
        float _1795 = _1793 * (_1760.y + (-0.5));
        float _1796 = _1793 * (_1760.z + (-0.5));
        float _1803 = exp2((_1767.w + (-0.5)) * 20.0) * 2.0;
        float _1804 = _1803 * (_1767.x + (-0.5));
        float _1805 = _1803 * (_1767.y + (-0.5));
        float _1806 = _1803 * (_1767.z + (-0.5));
        float _1813 = exp2((_1774.w + (-0.5)) * 20.0) * 2.0;
        float _1814 = _1813 * (_1774.x + (-0.5));
        float _1815 = _1813 * (_1774.y + (-0.5));
        float _1816 = _1813 * (_1774.z + (-0.5));
        float _1823 = exp2((_1781.w + (-0.5)) * 20.0) * 2.0;
        float _1824 = _1823 * (_1781.x + (-0.5));
        float _1825 = _1823 * (_1781.y + (-0.5));
        float _1826 = _1823 * (_1781.z + (-0.5));
        float _1827 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1828 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1829 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1830 = _1794 * 0.5;
        float _1831 = _1804 * 0.5;
        float _1832 = _1814 * 0.5;
        float _1833 = dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832));
        float _1838 = (_1833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1833);
        float _1846 = (dot(vec3(_1074, _1075, _1076), vec3(_1838 * _1830, _1838 * _1831, _1838 * _1832)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1855 = sqrt(((_1831 * _1831) + (_1830 * _1830)) + (_1832 * _1832)) / (_1827 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1857 = _1856 * 2.0;
        float _1861 = (1.0 - _1856) / (_1856 + 1.0);
        float _4484 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1871 = ((((1.0 - _1862) * (_1857 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1857 + 1.0))) + _1862) * _1827;
        float _1872 = _1795 * 0.5;
        float _1873 = _1805 * 0.5;
        float _1874 = _1815 * 0.5;
        float _1875 = dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874));
        float _1880 = (_1875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1875);
        float _1888 = (dot(vec3(_1074, _1075, _1076), vec3(_1880 * _1872, _1880 * _1873, _1880 * _1874)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1897 = sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874)) / (_1828 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1899 = _1898 * 2.0;
        float _1903 = (1.0 - _1898) / (_1898 + 1.0);
        float _4517 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1913 = ((((1.0 - _1904) * (_1899 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1899 + 1.0))) + _1904) * _1828;
        float _1914 = _1796 * 0.5;
        float _1915 = _1806 * 0.5;
        float _1916 = _1816 * 0.5;
        float _1917 = dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916));
        float _1922 = (_1917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1917);
        float _1930 = (dot(vec3(_1074, _1075, _1076), vec3(_1922 * _1914, _1922 * _1915, _1922 * _1916)) + 1.0) * 0.5;
        float _4528 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1939 = sqrt(((_1915 * _1915) + (_1914 * _1914)) + (_1916 * _1916)) / (_1829 + 9.9999997473787516355514526367188e-06);
        float _4539 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1941 = _1940 * 2.0;
        float _1945 = (1.0 - _1940) / (_1940 + 1.0);
        float _4550 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1955 = ((((1.0 - _1946) * (_1941 + 2.0)) * exp2(log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_1941 + 1.0))) + _1946) * _1829;
        _1963 = _1796;
        _1964 = _1795;
        _1965 = _1794;
        _1966 = _1806;
        _1967 = _1805;
        _1968 = _1804;
        _1969 = _1816;
        _1970 = _1815;
        _1971 = _1814;
        _1972 = _1829;
        _1973 = _1828;
        _1974 = _1827;
        _1975 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)));
        _1976 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)));
        _1977 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)));
    }
    else
    {
        _1963 = _1653;
        _1964 = _1653;
        _1965 = _1653;
        _1966 = _1653;
        _1967 = _1653;
        _1968 = _1653;
        _1969 = _1653;
        _1970 = _1653;
        _1971 = _1653;
        _1972 = _1653;
        _1973 = _1653;
        _1974 = _1653;
        _1975 = 0.0;
        _1976 = 0.0;
        _1977 = 0.0;
    }
    float _1987 = (cbModelParam._m0[1u].x * (_1975 - _1665)) + _1665;
    float _1988 = (cbModelParam._m0[1u].x * (_1976 - _1666)) + _1666;
    float _1989 = (cbModelParam._m0[1u].x * (_1977 - _1667)) + _1667;
    float _2010 = fma(_1989, cbSceneParam._m0[89u].z, fma(_1988, cbSceneParam._m0[89u].y, _1987 * cbSceneParam._m0[89u].x));
    float _2013 = fma(_1989, cbSceneParam._m0[90u].z, fma(_1988, cbSceneParam._m0[90u].y, _1987 * cbSceneParam._m0[90u].x));
    float _2016 = fma(_1989, cbSceneParam._m0[91u].z, fma(_1988, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1987));
    float _2031 = _1259 * 0.5;
    float _2032 = _1260 * 0.5;
    float _2033 = _1261 * 0.5;
    float _2034 = dot(vec4(_2031, _2032, _2033, 1.0), vec4(_1965, _1968, _1971, _1974));
    float _2037 = dot(vec4(_2031, _2032, _2033, 1.0), vec4(_1964, _1967, _1970, _1973));
    float _2040 = dot(vec4(_2031, _2032, _2033, 1.0), vec4(_1963, _1966, _1969, _1972));
    float _2074;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2047 = dot(vec4(_2031, _2032, _2033, 1.0), vec4(_1652, _1656, _1659, _1662));
        float _2051 = dot(vec4(_2031, _2032, _2033, 1.0), vec4(_1654, _1657, _1660, _1663));
        float _2055 = dot(vec4(_2031, _2032, _2033, 1.0), vec4(_1655, _1658, _1661, _1664));
        float _2062 = dot(vec4(cbModelParam._m0[39u]), vec4(_2031, _2032, _2033, 1.0));
        _2074 = dot(vec3(isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0)), isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)), isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2062) ? 0.0 : (isnan(0.0) ? _2062 : max(0.0, _2062))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2074 = 1.0;
    }
    float _2085;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2076 = dot(vec4(cbModelParam._m0[40u]), vec4(_2031, _2032, _2033, 1.0));
        _2085 = dot(vec3(isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0)), isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0)), isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2076) ? 0.0 : (isnan(0.0) ? _2076 : max(0.0, _2076))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2085 = 1.0;
    }
    float _2089 = (_2085 * cbModelParam._m0[1u].x) + (_2074 * (1.0 - cbModelParam._m0[1u].x));
    float _2099 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1077);
    float _2100 = isnan(_2099) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2099 : min(cbModelParam._m0[25u].z, _2099));
    float _2180;
    float _2182;
    float _2184;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2147 = fma(_1323, cbModelParam._m0[13u].z, fma(_1319, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1315)) + cbModelParam._m0[13u].w;
        float _2151 = fma(_1323, cbModelParam._m0[14u].z, fma(_1319, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1315)) + cbModelParam._m0[14u].w;
        float _2155 = fma(_1323, cbModelParam._m0[15u].z, fma(_1319, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1315)) + cbModelParam._m0[15u].w;
        float _2158 = fma(_1261, cbModelParam._m0[13u].z, fma(_1260, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1259));
        float _2161 = fma(_1261, cbModelParam._m0[14u].z, fma(_1260, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1259));
        float _2164 = fma(_1261, cbModelParam._m0[15u].z, fma(_1260, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1259));
        float _2192;
        if (_2158 > 0.0)
        {
            _2192 = abs((1.0 - _2147) / _2158);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2147 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2192 = frontier_phi_17_15_ladder;
        }
        float _2415;
        if (_2161 > 0.0)
        {
            _2415 = abs((1.0 - _2151) / _2161);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2151 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2415 = frontier_phi_26_22_ladder;
        }
        float _2672;
        if (_2164 > 0.0)
        {
            _2672 = abs((1.0 - _2155) / _2164);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2164 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2155 + 1.0) / _2164);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2672 = frontier_phi_38_33_ladder;
        }
        float _2674 = isnan(_2415) ? _2192 : (isnan(_2192) ? _2415 : min(_2192, _2415));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _2158) + _2147;
        float _2680 = (_2675 * _2161) + _2151;
        float _2681 = (_2675 * _2164) + _2155;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2684 = (-1.0) - _2682;
        float _2686 = _2682 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2681 > _2686) || ((_2681 < _2684) || ((_2680 > _2686) || ((_2680 < _2684) || ((_2679 < _2684) || (_2679 > _2686))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2681, cbModelParam._m0[9u].z, fma(_2680, cbModelParam._m0[9u].y, _2679 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2681, cbModelParam._m0[10u].z, fma(_2680, cbModelParam._m0[10u].y, _2679 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2681, cbModelParam._m0[11u].z, fma(_2680, cbModelParam._m0[11u].y, _2679 * cbModelParam._m0[11u].x))), _2100);
            frontier_phi_16_38_ladder = _2809.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2809.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2809.x * cbModelParam._m0[1u].y;
        }
        _2180 = frontier_phi_16_38_ladder_2;
        _2182 = frontier_phi_16_38_ladder_1;
        _2184 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2168 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1259, _1260, _1261), _2100);
        _2180 = _2168.x * cbModelParam._m0[1u].y;
        _2182 = _2168.y * cbModelParam._m0[1u].y;
        _2184 = _2168.z * cbModelParam._m0[1u].y;
    }
    float _2188 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1077);
    float _2189 = isnan(_2188) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2188 : min(cbModelParam._m0[25u].w, _2188));
    float _2278;
    float _2280;
    float _2282;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2242 = fma(_1323, cbModelParam._m0[21u].z, fma(_1319, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1315)) + cbModelParam._m0[21u].w;
        float _2246 = fma(_1323, cbModelParam._m0[22u].z, fma(_1319, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1315)) + cbModelParam._m0[22u].w;
        float _2250 = fma(_1323, cbModelParam._m0[23u].z, fma(_1319, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1315)) + cbModelParam._m0[23u].w;
        float _2253 = fma(_1261, cbModelParam._m0[21u].z, fma(_1260, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1259));
        float _2256 = fma(_1261, cbModelParam._m0[22u].z, fma(_1260, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1259));
        float _2259 = fma(_1261, cbModelParam._m0[23u].z, fma(_1260, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1259));
        float _2420;
        if (_2253 > 0.0)
        {
            _2420 = abs((1.0 - _2242) / _2253);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2253 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2242 + 1.0) / _2253);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2420 = frontier_phi_28_24_ladder;
        }
        float _2699;
        if (_2256 > 0.0)
        {
            _2699 = abs((1.0 - _2246) / _2256);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2256 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2246 + 1.0) / _2256);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2699 = frontier_phi_40_35_ladder;
        }
        float _2912;
        if (_2259 > 0.0)
        {
            _2912 = abs((1.0 - _2250) / _2259);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2259 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2250 + 1.0) / _2259);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2912 = frontier_phi_49_46_ladder;
        }
        float _2914 = isnan(_2699) ? _2420 : (isnan(_2420) ? _2699 : min(_2420, _2699));
        float _2915 = isnan(_2912) ? _2914 : (isnan(_2914) ? _2912 : min(_2914, _2912));
        float _2919 = (_2915 * _2253) + _2242;
        float _2920 = (_2915 * _2256) + _2246;
        float _2921 = (_2915 * _2259) + _2250;
        float _2922 = _2915 * 9.9999997473787516355514526367188e-05;
        float _2923 = (-1.0) - _2922;
        float _2925 = _2922 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2921 > _2925) || ((_2921 < _2923) || ((_2920 > _2925) || ((_2920 < _2923) || ((_2919 < _2923) || (_2919 > _2925))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3120 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2921, cbModelParam._m0[17u].z, fma(_2920, cbModelParam._m0[17u].y, _2919 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2921, cbModelParam._m0[18u].z, fma(_2920, cbModelParam._m0[18u].y, _2919 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2921, cbModelParam._m0[19u].z, fma(_2920, cbModelParam._m0[19u].y, _2919 * cbModelParam._m0[19u].x))), _2189);
            frontier_phi_25_49_ladder = _3120.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3120.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3120.x * cbModelParam._m0[1u].z;
        }
        _2278 = frontier_phi_25_49_ladder_2;
        _2280 = frontier_phi_25_49_ladder_1;
        _2282 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2262 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1259, _1260, _1261), _2189);
        _2278 = _2262.x * cbModelParam._m0[1u].z;
        _2280 = _2262.y * cbModelParam._m0[1u].z;
        _2282 = _2262.z * cbModelParam._m0[1u].z;
    }
    float _2295 = (((_1286 * _1235) + _1287) * _1251) * ((cbModelParam._m0[1u].w * (_2278 - _2180)) + _2180);
    float _2297 = (((_1286 * _1237) + _1287) * _1251) * ((cbModelParam._m0[1u].w * (_2280 - _2182)) + _2182);
    float _2299 = (((_1286 * _1238) + _1287) * _1251) * ((cbModelParam._m0[1u].w * (_2282 - _2184)) + _2184);
    float _2302 = fma(_2299, cbSceneParam._m0[89u].z, fma(_2297, cbSceneParam._m0[89u].y, _2295 * cbSceneParam._m0[89u].x));
    float _2305 = fma(_2299, cbSceneParam._m0[90u].z, fma(_2297, cbSceneParam._m0[90u].y, _2295 * cbSceneParam._m0[90u].x));
    float _2308 = fma(_2299, cbSceneParam._m0[91u].z, fma(_2297, cbSceneParam._m0[91u].y, _2295 * cbSceneParam._m0[91u].x));
    vec4 _2316 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1173, _1174));
    float _2318 = _2316.w;
    float _2330 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2318);
    float _2331 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2318);
    float _2332 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2318);
    uvec4 _2336 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2338 = _2336.x * 14u;
    uint _2339 = _2338 + 13u;
    float _2346 = _1251 + (-1.0);
    float _2351 = (cbLight._m0[_2339].x * _2346) + 1.0;
    float _2352 = (cbLight._m0[_2339].y * _2346) + 1.0;
    float _2353 = (cbLight._m0[_2339].z * _2346) + 1.0;
    float _2354 = (cbLight._m0[_2339].w * _2346) + 1.0;
    uint _2355 = _2338 + 5u;
    float _2361 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
    uint _2365 = _2338 + 4u;
    float _2374 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
    uint _2378 = _2338 | 1u;
    float _2389 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_1074, _1075, _1076));
    float _2392 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_1074, _1075, _1076));
    float _4686 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _4697 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2397 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * 0.3183098733425140380859375;
    float _2399 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * 0.3183098733425140380859375;
    float _2406 = ((cbLight._m0[_2355].x * _2361) * _2399) + (((cbLight._m0[_2365].x * _2330) * _2374) * _2397);
    float _2407 = ((_2361 * cbLight._m0[_2355].y) * _2399) + (((cbLight._m0[_2365].y * _2331) * _2374) * _2397);
    float _2408 = ((_2361 * cbLight._m0[_2355].z) * _2399) + (((cbLight._m0[_2365].z * _2332) * _2374) * _2397);
    uvec4 _2412 = floatBitsToUint(cbLight._m0[_2338 + 12u]);
    bool _2414 = _2412.x == 0u;
    float _2425;
    float _2427;
    float _2429;
    if (_2414)
    {
        _2425 = _2406;
        _2427 = _2407;
        _2429 = _2408;
    }
    else
    {
        uint _2433 = _2338 + 6u;
        float _2449 = (dot(vec3(cbLight._m0[_2338 + 2u].xyz), vec3(_1074, _1075, _1076)) * 0.5) + 0.5;
        float _2450 = _2449 * _2449;
        float _4708 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2451 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2452 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2425 = (((cbLight._m0[_2433].x * 0.3183098733425140380859375) * _2451) * _2452) + _2406;
        _2427 = (((cbLight._m0[_2433].y * 0.3183098733425140380859375) * _2451) * _2452) + _2407;
        _2429 = (((cbLight._m0[_2433].z * 0.3183098733425140380859375) * _2451) * _2452) + _2408;
    }
    bool _2432 = _2412.y == 0u;
    float _2470;
    float _2472;
    float _2474;
    if (_2432)
    {
        _2470 = _2425;
        _2472 = _2427;
        _2474 = _2429;
    }
    else
    {
        uint _2643 = _2338 + 7u;
        float _2659 = (dot(vec3(cbLight._m0[_2338 + 3u].xyz), vec3(_1074, _1075, _1076)) * 0.5) + 0.5;
        float _2660 = _2659 * _2659;
        float _4724 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2661 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2662 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2470 = (((cbLight._m0[_2643].x * 0.3183098733425140380859375) * _2661) * _2662) + _2425;
        _2472 = (((cbLight._m0[_2643].y * 0.3183098733425140380859375) * _2661) * _2662) + _2427;
        _2474 = (((cbLight._m0[_2643].z * 0.3183098733425140380859375) * _2661) * _2662) + _2429;
    }
    uint _2477 = _2338 + 8u;
    float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2338].w)) * _1077) * 0.949999988079071044921875);
    float _2491 = _2490 * _2490;
    float _2492 = cbLight._m0[_2338].x + _1153;
    float _2493 = cbLight._m0[_2338].y + _1154;
    float _2494 = cbLight._m0[_2338].z + _1155;
    float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
    float _2499 = _2498 * _2492;
    float _2500 = _2498 * _2493;
    float _2501 = _2498 * _2494;
    float _2502 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_2338].xyz));
    float _4740 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _4751 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
    float _2506 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2507 = dot(vec3(_1074, _1075, _1076), vec3(_2499, _2500, _2501));
    float _4762 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2511 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_2499, _2500, _2501));
    float _4773 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2515 = _2491 * _2491;
    float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
    float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
    float _2528 = 0.959999978542327880859375 - _1232;
    float _2530 = 0.959999978542327880859375 - _1233;
    float _2531 = 0.959999978542327880859375 - _1234;
    float _2538 = 1.0 - _2491;
    float _2549 = (0.5 / (((_2506 * ((_2505 * _2538) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2538) + _2491) * _2505))) * _2505;
    float _4784 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2551 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
    uint _2565 = _2338 + 9u;
    float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _1077) * 0.949999988079071044921875);
    float _2577 = _2576 * _2576;
    float _2578 = cbLight._m0[_2378].x + _1153;
    float _2579 = cbLight._m0[_2378].y + _1154;
    float _2580 = cbLight._m0[_2378].z + _1155;
    float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
    float _2585 = _2584 * _2578;
    float _2586 = _2584 * _2579;
    float _2587 = _2584 * _2580;
    float _2588 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_2378].xyz));
    float _4795 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
    float _2592 = dot(vec3(_1074, _1075, _1076), vec3(_2585, _2586, _2587));
    float _4806 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
    float _2596 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2585, _2586, _2587));
    float _4817 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2600 = _2577 * _2577;
    float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
    float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0);
    float _2618 = 1.0 - _2577;
    float _2628 = (0.5 / (((_2506 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2618) + _2577) * _2591))) * _2591;
    float _4828 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
    float _2640 = (((((_2611 * _2528) + _1235) * cbLight._m0[_2565].x) * _2630) * _2361) + ((((cbLight._m0[_2477].x * _2330) * ((_2527 * _2528) + _1235)) * _2551) * _2374);
    float _2641 = (((((_2611 * _2530) + _1237) * cbLight._m0[_2565].y) * _2630) * _2361) + ((((cbLight._m0[_2477].y * _2331) * ((_2527 * _2530) + _1237)) * _2551) * _2374);
    float _2642 = (((((_2611 * _2531) + _1238) * cbLight._m0[_2565].z) * _2630) * _2361) + ((((cbLight._m0[_2477].z * _2332) * ((_2527 * _2531) + _1238)) * _2551) * _2374);
    float _2704;
    float _2706;
    float _2708;
    if (_2414)
    {
        _2704 = _2640;
        _2706 = _2641;
        _2708 = _2642;
    }
    else
    {
        uint _2710 = _2338 + 2u;
        uint _2714 = _2338 + 10u;
        float _2728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2710].w)) * _1077) * 0.949999988079071044921875);
        float _2729 = _2728 * _2728;
        float _2730 = cbLight._m0[_2710].x + _1153;
        float _2731 = cbLight._m0[_2710].y + _1154;
        float _2732 = cbLight._m0[_2710].z + _1155;
        float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
        float _2737 = _2736 * _2730;
        float _2738 = _2736 * _2731;
        float _2739 = _2736 * _2732;
        float _2740 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_2710].xyz));
        float _4839 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2743 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2744 = dot(vec3(_1074, _1075, _1076), vec3(_2737, _2738, _2739));
        float _4850 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2748 = dot(vec3(cbLight._m0[_2710].xyz), vec3(_2737, _2738, _2739));
        float _4861 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2752 = _2729 * _2729;
        float _2756 = ((_2747 * _2747) * (_2752 + (-1.0))) + 1.0;
        float _2763 = exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0);
        float _2770 = 1.0 - _2729;
        float _2780 = (0.5 / (((_2506 * ((_2743 * _2770) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2770) + _2729) * _2743))) * _2743;
        float _4872 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2782 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2752 / ((_2756 * _2756) * 3.141590118408203125));
        float _2783 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2704 = (((((_2763 * _2528) + _1235) * cbLight._m0[_2714].x) * _2782) * _2783) + _2640;
        _2706 = (((((_2763 * _2530) + _1237) * cbLight._m0[_2714].y) * _2782) * _2783) + _2641;
        _2708 = (((((_2763 * _2531) + _1238) * cbLight._m0[_2714].z) * _2782) * _2783) + _2642;
    }
    float _2818;
    float _2820;
    float _2822;
    if (_2432)
    {
        _2818 = _2704;
        _2820 = _2706;
        _2822 = _2708;
    }
    else
    {
        uint _2829 = _2338 + 3u;
        uint _2833 = _2338 + 11u;
        float _2847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2829].w)) * _1077) * 0.949999988079071044921875);
        float _2848 = _2847 * _2847;
        float _2849 = cbLight._m0[_2829].x + _1153;
        float _2850 = cbLight._m0[_2829].y + _1154;
        float _2851 = cbLight._m0[_2829].z + _1155;
        float _2855 = inversesqrt(dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851)));
        float _2856 = _2855 * _2849;
        float _2857 = _2855 * _2850;
        float _2858 = _2855 * _2851;
        float _2859 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_2829].xyz));
        float _4888 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2862 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2863 = dot(vec3(_1074, _1075, _1076), vec3(_2856, _2857, _2858));
        float _4899 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
        float _2867 = dot(vec3(cbLight._m0[_2829].xyz), vec3(_2856, _2857, _2858));
        float _4910 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2871 = _2848 * _2848;
        float _2875 = ((_2866 * _2866) * (_2871 + (-1.0))) + 1.0;
        float _2882 = exp2(log2(1.0 - (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) * 5.0);
        float _2889 = 1.0 - _2848;
        float _2899 = (0.5 / (((_2506 * ((_2862 * _2889) + _2848)) + 9.9999999392252902907785028219223e-09) + (((_2506 * _2889) + _2848) * _2862))) * _2862;
        float _4921 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2901 = (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2871 / ((_2875 * _2875) * 3.141590118408203125));
        float _2902 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2818 = (((((_2882 * _2528) + _1235) * cbLight._m0[_2833].x) * _2901) * _2902) + _2704;
        _2820 = (((((_2882 * _2530) + _1237) * cbLight._m0[_2833].y) * _2901) * _2902) + _2706;
        _2822 = (((((_2882 * _2531) + _1238) * cbLight._m0[_2833].z) * _2901) * _2902) + _2708;
    }
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    if (_2336.y == 0u)
    {
        float _2977 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2978 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2977;
        float _2979 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2977;
        float _2980 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2977;
        uvec4 _2992 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2993 = _2992.x;
        uint _3004 = uint((float(_2992.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1174) / _2993))) + floor(float(uint(cbSceneParam._m0[85u].x * _1173) / _2993)));
        float _3014 = (log2(_2980 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3015 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        uint _3018 = uint(isnan(14.0) ? _3015 : (isnan(_3015) ? 14.0 : min(_3015, 14.0)));
        uvec4 _3023 = texelFetch(g_lightClusterGridBuffer, int(((_3018 << 2u) + (_3004 << 6u)) >> 2u));
        uint _3024 = _3023.x;
        uint _3025 = _2992.z;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        if (((((1u << ((_3025 >> 4u) & 15u)) + 4294967295u) & _3024) == 0u) || ((_3025 & 240u) == 0u))
        {
            _3125 = 0.0;
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
        }
        else
        {
            float _3126;
            float _3128;
            float _3130;
            float _3132;
            float _3134;
            float _3136;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            uint _3283 = 0u;
            uint _3292;
            bool _3293;
            for (;;)
            {
                _3292 = texelFetch(g_lightClassification, int((((_3018 << 5u) + (_3004 << 9u)) + (_3283 << 2u)) >> 2u)).x;
                _3293 = _3292 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3293)
                {
                    frontier_phi_66_pred = _3277;
                    frontier_phi_66_pred_1 = _3282;
                    frontier_phi_66_pred_2 = _3281;
                    frontier_phi_66_pred_3 = _3280;
                    frontier_phi_66_pred_4 = _3279;
                    frontier_phi_66_pred_5 = _3278;
                }
                else
                {
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    uint _3428;
                    _3422 = _3277;
                    _3423 = _3278;
                    _3424 = _3279;
                    _3425 = _3280;
                    _3426 = _3281;
                    _3427 = _3282;
                    _3428 = _3292;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    for (;;)
                    {
                        uint _3432 = uint(findLSB(_3428)) + (_3283 << 5u);
                        uint _3429 = (_3428 + 4294967295u) & _3428;
                        uint _3434 = _3432 * 48u;
                        vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3434)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3434 + 3u)).x));
                        uint _3454 = (_3432 * 48u) + 4u;
                        vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 3u)).x));
                        uint _3473 = (_3432 * 48u) + 8u;
                        vec3 _3484 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3473)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3473 + 2u)).x));
                        float _3488 = _3448.x - _2978;
                        float _3489 = _3448.y - _2979;
                        float _3490 = _3448.z - _2980;
                        float _3491 = dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490));
                        float _3494 = inversesqrt(_3491);
                        float _3495 = _3494 * _3488;
                        float _3496 = _3494 * _3489;
                        float _3497 = _3494 * _3490;
                        float _3498 = dot(vec3(_1192, _1195, _1198), vec3(_3495, _3496, _3497));
                        float _3503 = 1.0 - (_3491 * _3448.w);
                        float _4947 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3504 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3505 = sqrt(_3491) * _3467.w;
                        float _3508 = 1.39999997615814208984375 / (_3505 + 1.39999997615814208984375);
                        float _3509 = _3508 * _3508;
                        float _3512 = ((1.0 - _3509) * _3498) + _3509;
                        float _3515 = _3505 * _3505;
                        float _3519 = ((isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0))) * _3504) / ((_3515 * 0.699999988079071044921875) + 1.0);
                        float _3523 = (-0.0) - _2978;
                        float _3524 = (-0.0) - _2979;
                        float _3525 = (-0.0) - _2980;
                        float _3529 = inversesqrt(dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525)));
                        float _3530 = _3529 * _3523;
                        float _3531 = _3529 * _3524;
                        float _3532 = _3529 * _3525;
                        float _3540 = exp2(log2(1.0 / ((_3515 * 3.5) + 5.0)) * 0.25);
                        float _3541 = 1.0 - _1267;
                        float _3548 = sqrt(1.0 - ((1.0 - (_3541 * _3541)) * (1.0 - (_3540 * _3540))));
                        float _3549 = _3548 * _3548;
                        float _3550 = _3549 * _3549;
                        float _3551 = _3530 + _3495;
                        float _3552 = _3531 + _3496;
                        float _3553 = _3532 + _3497;
                        float _3557 = inversesqrt(dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553)));
                        float _3561 = dot(vec3(_1192, _1195, _1198), vec3(_3530, _3531, _3532));
                        float _4963 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3564 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3565 = dot(vec3(_1192, _1195, _1198), vec3(_3557 * _3551, _3557 * _3552, _3557 * _3553));
                        float _4974 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3568 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3572 = ((_3568 * _3568) * (_3550 + (-1.0))) + 1.0;
                        float _3573 = _3508 * _3549;
                        float _3574 = _3573 * _3573;
                        float _3577 = ((1.0 - _3574) * _3498) + _3574;
                        float _4985 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3578 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                        float _3579 = 1.0 - _3549;
                        float _3589 = (0.5 / (((_3578 * ((_3564 * _3579) + _3549)) + 9.9999999392252902907785028219223e-09) + (((_3578 * _3579) + _3549) * _3564))) * _3578;
                        float _4996 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3600 = (((_3550 * 3.1415927410125732421875) * (isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0)))) / ((_3572 * _3572) * ((_3515 * 2.1991131305694580078125) + 3.141590118408203125))) * _3504;
                        _3352 = (_3519 * _3467.x) + _3425;
                        _3353 = (_3519 * _3467.y) + _3426;
                        _3354 = (_3519 * _3467.z) + _3427;
                        _3349 = (_3600 * _3484.x) + _3422;
                        _3350 = (_3600 * _3484.y) + _3423;
                        _3351 = (_3600 * _3484.z) + _3424;
                        if (_3429 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3422 = _3349;
                            _3423 = _3350;
                            _3424 = _3351;
                            _3425 = _3352;
                            _3426 = _3353;
                            _3427 = _3354;
                            _3428 = _3429;
                        }
                    }
                    frontier_phi_66_pred = _3349;
                    frontier_phi_66_pred_1 = _3354;
                    frontier_phi_66_pred_2 = _3353;
                    frontier_phi_66_pred_3 = _3352;
                    frontier_phi_66_pred_4 = _3351;
                    frontier_phi_66_pred_5 = _3350;
                }
                _3126 = frontier_phi_66_pred;
                _3136 = frontier_phi_66_pred_1;
                _3134 = frontier_phi_66_pred_2;
                _3132 = frontier_phi_66_pred_3;
                _3130 = frontier_phi_66_pred_4;
                _3128 = frontier_phi_66_pred_5;
                uint _3284 = _3283 + 1u;
                if (_3284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3277 = _3126;
                    _3278 = _3128;
                    _3279 = _3130;
                    _3280 = _3132;
                    _3281 = _3134;
                    _3282 = _3136;
                    _3283 = _3284;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3125 = _3126;
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
        }
        uvec4 _3139 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3140 = _3139.z;
        uint _3142 = (_3140 >> 8u) & 15u;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        if (((4294967295u << _3142) & _3024) == 0u)
        {
            _3245 = _3125;
            _3247 = _3127;
            _3249 = _3129;
            _3251 = _3131;
            _3253 = _3133;
            _3255 = _3135;
        }
        else
        {
            float _3270 = inversesqrt(dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980)));
            float _3271 = _3270 * _2978;
            float _3272 = _3270 * _2979;
            float _3273 = _3270 * _2980;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3142 < ((_3140 >> 12u) & 15u))
            {
                float _3246;
                float _3248;
                float _3250;
                float _3252;
                float _3254;
                float _3256;
                float _3405 = _3125;
                float _3406 = _3127;
                float _3407 = _3129;
                float _3408 = _3131;
                float _3409 = _3133;
                float _3410 = _3135;
                uint _3411 = _3142;
                uint _3420;
                bool _3421;
                for (;;)
                {
                    _3420 = texelFetch(g_lightClassification, int((((_3018 << 5u) + (_3004 << 9u)) + (_3411 << 2u)) >> 2u)).x;
                    _3421 = _3420 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3421)
                    {
                        frontier_phi_77_pred = _3410;
                        frontier_phi_77_pred_1 = _3409;
                        frontier_phi_77_pred_2 = _3408;
                        frontier_phi_77_pred_3 = _3407;
                        frontier_phi_77_pred_4 = _3406;
                        frontier_phi_77_pred_5 = _3405;
                    }
                    else
                    {
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3912;
                        float _3627 = _3405;
                        float _3628 = _3406;
                        float _3629 = _3407;
                        float _3630 = _3408;
                        float _3631 = _3409;
                        float _3632 = _3410;
                        uint _3633 = _3420;
                        uint _3634;
                        vec4 _3659;
                        float _3660;
                        vec4 _3675;
                        vec3 _3687;
                        vec4 _3702;
                        vec4 _3717;
                        float _3763;
                        bool _3764;
                        for (;;)
                        {
                            uint _3644 = ((_3411 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3633));
                            _3634 = (_3633 + 4294967295u) & _3633;
                            uint _3646 = _3644 * 40u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            _3660 = _3659.w;
                            uint _3662 = (_3644 * 40u) + 4u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3677 = (_3644 * 40u) + 8u;
                            _3687 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x));
                            uint _3689 = (_3644 * 40u) + 16u;
                            _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3704 = (_3644 * 40u) + 20u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3719 = (_3644 * 40u) + 24u;
                            vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3738 = (_3644 * 40u) + 28u;
                            vec4 _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            _3763 = fma(_2980, _3751.z, fma(_2979, _3751.y, _3751.x * _2978)) + _3751.w;
                            _3764 = !((fma(_2980, _3732.z, fma(_2979, _3732.y, _3732.x * _2978)) + _3732.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3764)
                            {
                                float _3791 = _3659.x - _2978;
                                float _3792 = _3659.y - _2979;
                                float _3793 = _3659.z - _2980;
                                float _3794 = dot(vec3(_3791, _3792, _3793), vec3(_3791, _3792, _3793));
                                float _3797 = inversesqrt(_3794);
                                float _3798 = _3797 * _3791;
                                float _3799 = _3797 * _3792;
                                float _3800 = _3797 * _3793;
                                float _3804 = 1.0 - (_3794 / (_3660 * _3660));
                                float _5007 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3809 = sqrt(_3794) * _3675.w;
                                float _3811 = 1.39999997615814208984375 / (_3809 + 1.39999997615814208984375);
                                float _3812 = _3811 * _3811;
                                float _3815 = ((1.0 - _3812) * dot(vec3(_3798, _3799, _3800), vec3(_1192, _1195, _1198))) + _3812;
                                float _3818 = _3809 * _3809;
                                float _3822 = (fma(_2980, _3702.z, fma(_2979, _3702.y, _3702.x * _2978)) + _3702.w) / _3763;
                                float _3823 = (fma(_2980, _3717.z, fma(_2979, _3717.y, _3717.x * _2978)) + _3717.w) / _3763;
                                float _3827 = 1.0 - dot(vec2(_3822, _3823), vec2(_3822, _3823));
                                float _5023 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3828 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3829 = _3828 * (((isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0))) * _3805) / ((_3818 * 0.699999988079071044921875) + 1.0));
                                float _3841 = exp2(log2(1.0 / ((_3818 * 3.5) + 5.0)) * 0.25);
                                float _3842 = 1.0 - _1267;
                                float _3849 = sqrt(1.0 - ((1.0 - (_3842 * _3842)) * (1.0 - (_3841 * _3841))));
                                float _3850 = _3849 * _3849;
                                float _3851 = _3850 * _3850;
                                float _3852 = _3798 - _3271;
                                float _3853 = _3799 - _3272;
                                float _3854 = _3800 - _3273;
                                float _3858 = inversesqrt(dot(vec3(_3852, _3853, _3854), vec3(_3852, _3853, _3854)));
                                float _3862 = dot(vec3(_1192, _1195, _1198), vec3((-0.0) - _3271, (-0.0) - _3272, (-0.0) - _3273));
                                float _5034 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3865 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3866 = dot(vec3(_1192, _1195, _1198), vec3(_3858 * _3852, _3858 * _3853, _3858 * _3854));
                                float _5045 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3869 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3873 = ((_3869 * _3869) * (_3851 + (-1.0))) + 1.0;
                                float _3874 = _3811 * _3850;
                                float _3875 = _3874 * _3874;
                                float _3881 = ((1.0 - _3875) * dot(vec3(_1192, _1195, _1198), vec3(_3798, _3799, _3800))) + _3875;
                                float _5056 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3882 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                                float _3883 = 1.0 - _3850;
                                float _3893 = (0.5 / (((_3882 * ((_3865 * _3883) + _3850)) + 9.9999999392252902907785028219223e-09) + (((_3882 * _3883) + _3850) * _3865))) * _3882;
                                float _5067 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3903 = (_3828 * _3805) * (((_3851 * 3.1415927410125732421875) * (isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0)))) / ((_3873 * _3873) * ((_3818 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3829 * _3675.y;
                                frontier_phi_83_pred_1 = _3829 * _3675.x;
                                frontier_phi_83_pred_2 = _3903 * _3687.z;
                                frontier_phi_83_pred_3 = _3903 * _3687.y;
                                frontier_phi_83_pred_4 = _3903 * _3687.x;
                                frontier_phi_83_pred_5 = _3829 * _3675.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3911 = frontier_phi_83_pred;
                            _3910 = frontier_phi_83_pred_1;
                            _3909 = frontier_phi_83_pred_2;
                            _3908 = frontier_phi_83_pred_3;
                            _3907 = frontier_phi_83_pred_4;
                            _3912 = frontier_phi_83_pred_5;
                            _3617 = _3910 + _3630;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            if (_3634 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3634;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3619;
                        frontier_phi_77_pred_1 = _3618;
                        frontier_phi_77_pred_2 = _3617;
                        frontier_phi_77_pred_3 = _3616;
                        frontier_phi_77_pred_4 = _3615;
                        frontier_phi_77_pred_5 = _3614;
                    }
                    _3256 = frontier_phi_77_pred;
                    _3254 = frontier_phi_77_pred_1;
                    _3252 = frontier_phi_77_pred_2;
                    _3250 = frontier_phi_77_pred_3;
                    _3248 = frontier_phi_77_pred_4;
                    _3246 = frontier_phi_77_pred_5;
                    uint _3412 = _3411 + 1u;
                    if (_3412 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3405 = _3246;
                        _3406 = _3248;
                        _3407 = _3250;
                        _3408 = _3252;
                        _3409 = _3254;
                        _3410 = _3256;
                        _3411 = _3412;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3250;
                frontier_phi_58_59_ladder_1 = _3256;
                frontier_phi_58_59_ladder_2 = _3254;
                frontier_phi_58_59_ladder_3 = _3252;
                frontier_phi_58_59_ladder_4 = _3248;
                frontier_phi_58_59_ladder_5 = _3246;
            }
            else
            {
                frontier_phi_58_59_ladder = _3129;
                frontier_phi_58_59_ladder_1 = _3135;
                frontier_phi_58_59_ladder_2 = _3133;
                frontier_phi_58_59_ladder_3 = _3131;
                frontier_phi_58_59_ladder_4 = _3127;
                frontier_phi_58_59_ladder_5 = _3125;
            }
            _3245 = frontier_phi_58_59_ladder_5;
            _3247 = frontier_phi_58_59_ladder_4;
            _3249 = frontier_phi_58_59_ladder;
            _3251 = frontier_phi_58_59_ladder_3;
            _3253 = frontier_phi_58_59_ladder_2;
            _3255 = frontier_phi_58_59_ladder_1;
        }
        float _3260 = isnan(1.0) ? _1251 : (isnan(_1251) ? 1.0 : min(_1251, 1.0));
        _3037 = (_3260 * _3251) + _2470;
        _3039 = (_3260 * _3253) + _2472;
        _3041 = (_3260 * _3255) + _2474;
        _3043 = ((_3245 * _1235) * _3260) + _2818;
        _3045 = ((_3247 * _1237) * _3260) + _2820;
        _3047 = ((_3249 * _1238) * _3260) + _2822;
    }
    else
    {
        _3037 = _2470;
        _3039 = _2472;
        _3041 = _2474;
        _3043 = _2818;
        _3045 = _2820;
        _3047 = _2822;
    }
    float _5083 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _5094 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _5105 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _3064 = ((isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_3037 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1251))) + ((_3043 + ((isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))) * _2089)) * cbPerFrame._m0[3u].x);
    float _3065 = ((isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3039 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1251))) + ((_3045 + ((isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0))) * _2089)) * cbPerFrame._m0[3u].x);
    float _3066 = ((isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0))) * (_3041 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1251))) + ((_3047 + ((isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0))) * _2089)) * cbPerFrame._m0[3u].x);
    uint _3067 = _297 + 6u;
    float _3075 = _1173 / cbSceneParam._m0[86u].x;
    float _3076 = _1174 / cbSceneParam._m0[86u].y;
    vec4 _3090 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3075, _3076, (log2((isnan(cbSceneParam._m0[77u].w) ? _1096 : (isnan(_1096) ? cbSceneParam._m0[77u].w : min(_1096, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3092 = _3090.x;
    float _3093 = _3090.y;
    float _3094 = _3090.z;
    float _3095 = _3090.w;
    float _3187;
    float _3189;
    float _3191;
    float _3193;
    if (_1096 > cbSceneParam._m0[78u].w)
    {
        float _3150 = isnan(_1096) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1096 : min(cbSceneParam._m0[80u].w, _1096));
        float _3151 = _3150 / _1096;
        float _3162 = _3151 * _1146;
        float _3163 = _1147 * _3151;
        float _3164 = (-0.0) - _3163;
        float _3165 = _3151 * _1148;
        float _3167 = (cbSceneParam._m0[77u].w * _3164) / _3150;
        float _3168 = _3167 + cbSceneParam._m0[79u].w;
        float _3169 = cbSceneParam._m0[79u].w - _3163;
        float _3175 = sqrt(((_3162 * _3162) + (_3163 * _3163)) + (_3165 * _3165));
        float _3178 = (1.0 - (cbSceneParam._m0[77u].w / _3150)) * _3175;
        float _3183 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3185 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3362;
        if (abs((_3164 - _3167) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3362 = ((((_3168 > 0.0) ? exp2(_3183 * _3168) : (2.0 - exp2(_3185 * _3168))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3178;
        }
        else
        {
            float _3306 = 1.0 / cbSceneParam._m0[80u].x;
            float _3307 = isnan(_3169) ? _3168 : (isnan(_3168) ? _3169 : max(_3168, _3169));
            float _3308 = isnan(_3169) ? _3168 : (isnan(_3168) ? _3169 : min(_3168, _3169));
            float _3317 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : min(_3307, 0.0));
            float _3318 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : min(_3308, 0.0));
            _3362 = ((abs(_3175 / _3164) * cbSceneParam._m0[80u].y) * ((((_3317 - _3318) * 2.0) - ((exp2(_3183 * (isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0)))) - exp2(_3183 * (isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))))) * _3306)) - ((exp2(_3185 * _3317) - exp2(_3185 * _3318)) * _3306))) + (_3178 * cbSceneParam._m0[80u].z);
        }
        vec4 _3364 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3075, _3076, 1.0), 0.0);
        float _3373 = exp2((_3362 * (-1.44269502162933349609375)) * (1.0 - _3364.w));
        float _3374 = log2(_3373);
        float _3390 = log2(_3095);
        _3187 = (exp2(_3390 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].x)) * _3364.x) / cbSceneParam._m0[78u].x)) + _3092;
        _3189 = (exp2(_3390 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].y)) * _3364.y) / cbSceneParam._m0[78u].y)) + _3093;
        _3191 = (exp2(_3390 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3374 * cbSceneParam._m0[78u].z)) * _3364.z) / cbSceneParam._m0[78u].z)) + _3094;
        _3193 = _3373 * _3095;
    }
    else
    {
        _3187 = _3092;
        _3189 = _3093;
        _3191 = _3094;
        _3193 = _3095;
    }
    bool _3400;
    vec4 _3203;
    vec4 _3225;
    float _3227;
    float _3231;
    float _3232;
    float _3233;
    float _3234;
    bool _3244;
    for (;;)
    {
        _3203 = cbMatDynParam._m0[0u];
        float _3205 = roundEven(_3203.y);
        bool _3206 = _3205 == 3.0;
        float _3207 = log2(_3193);
        float _3214 = exp2(_3207 * cbSceneParam._m0[78u].x) * _3064;
        float _3215 = exp2(_3207 * cbSceneParam._m0[78u].y) * _3065;
        float _3216 = exp2(_3207 * cbSceneParam._m0[78u].z) * _3066;
        float _3223 = _1162 + (-0.5);
        _3225 = cbMtdParam._m0[1u];
        _3227 = _3225.y * _3223;
        float _3230 = (_3205 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3231 = _3230 * (_3206 ? _3214 : (_3214 + (cbSceneParam._m0[72u].w * _3187)));
        _3232 = _3230 * (_3206 ? _3215 : (_3215 + (cbSceneParam._m0[72u].w * _3189)));
        _3233 = _3230 * (_3206 ? _3216 : (_3216 + (cbSceneParam._m0[72u].w * _3191)));
        _3234 = _3223 * 0.999000012874603271484375;
        _3244 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3244)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3234) < 0.5)
            {
                _3400 = true;
                break;
            }
        }
        uint _3341 = _1211 + uint(_3203.w);
        if ((cbInstanceData._m0[_3341].w < 1.0) && ((cbInstanceData._m0[_3341].w + _3234) < 0.5))
        {
            _3400 = true;
            break;
        }
        if ((_3227 + 1.0) < _3225.x)
        {
            _3400 = true;
            break;
        }
        _3400 = false;
        break;
    }
    float _3605;
    if (_3400)
    {
        discard_state = true;
        _3605 = 0.0;
    }
    else
    {
        _3605 = cbInstanceData._m0[_3067].w;
    }
    SV_Target.x = _3231;
    SV_Target.y = _3232;
    SV_Target.z = _3233;
    SV_Target.w = _3605;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3067].w;
    discard_exit();
}


