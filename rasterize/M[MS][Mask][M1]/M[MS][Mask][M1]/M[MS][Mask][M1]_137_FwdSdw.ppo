#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1617;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _247 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _248 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _249 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _255 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _262 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _269 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _383.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[23u].w) + _436) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4223 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _461 = (_454 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _462 = (_454 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _463 = (_454 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _294) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _295) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _383.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[23u].w) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4234 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _294) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _295) + cbTextureTilingScale._m0[24u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _574 = _572.x;
    float _584 = dot(vec4(_574, _572.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _596 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _383.z) * 2.0) - ((((_574 - _584) * cbMtdParam._m0[23u].w) + _584) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4245 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _610 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _314.x) * ((_597 * ((_555.x * cbMtdParam._m0[14u].x) - _534)) + _534);
    float _613 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _314.y) * ((_597 * ((_555.y * cbMtdParam._m0[14u].y) - _535)) + _535);
    float _616 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _314.z) * ((_597 * ((_555.z * cbMtdParam._m0[14u].z) - _536)) + _536);
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _294) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _295) + cbTextureTilingScale._m0[14u].w));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _673 = _671.x;
    float _674 = _671.y;
    float _675 = _671.z;
    float _682 = ((_654.x - _673) * _454) + _673;
    float _683 = ((_654.y - _674) * _454) + _674;
    float _684 = ((_654.z - _675) * _454) + _675;
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _294) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _295) + cbTextureTilingScale._m0[2u].w));
    float _707 = ((_696.x - _682) * _527) + _682;
    float _708 = ((_696.y - _683) * _527) + _683;
    float _709 = ((_696.z - _684) * _527) + _684;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _294) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _295) + cbTextureTilingScale._m0[23u].w));
    float _734 = ((_721.z - _709) * _597) + _709;
    float _737 = ((((_721.x - _707) * _597) + _707) * 2.0) + (-1.0);
    float _739 = ((((_721.y - _708) * _597) + _708) * 2.0) + (-1.0);
    float _740 = dot(vec2(_737, _739), vec2(_737, _739));
    float _4256 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _745 = sqrt(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))));
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _784 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _786 = _784.x;
    float _787 = 1.0 - _786;
    float _795 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _798 = ((isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : min(_795, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _807 = (_798 - ((((((_786 - _787) * cbMtdParam._m0[24u].z) + _787) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _798))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4277 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _808 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _815 = (_808 * ((_634.x * cbMtdParam._m0[18u].x) - _610)) + _610;
    float _816 = (_808 * ((_634.y * cbMtdParam._m0[18u].y) - _613)) + _613;
    float _817 = (_808 * ((_634.z * cbMtdParam._m0[18u].z) - _616)) + _616;
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _831 = _829.x;
    float _832 = 1.0 - _831;
    float _857 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_831 - _832) * cbMtdParam._m0[24u].w) + _832) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4288 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _858 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _866 = ((((cbMtdParam._m0[10u].x - _815) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _858) + _815;
    float _867 = ((((cbMtdParam._m0[10u].y - _816) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _858) + _816;
    float _868 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _817)) * _858) + _817;
    vec4 _894 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _896 = _894.x;
    float _913 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _896) * _454) + _896;
    float _930 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _294) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _295) + cbTextureTilingScale._m0[21u].w)).x - _913) * _527) + _913;
    float _947 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _294) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _295) + cbTextureTilingScale._m0[10u].w)).x - _930) * _597) + _930;
    float _951 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _947) * cbMtdParam._m0[19u].z) + _947;
    float _953 = _951 - (_951 * _808);
    float _955 = _953 - (_953 * _858);
    float _959 = (cbMtdParam._m0[19u].w * (_759.z - _734)) + _734;
    vec4 _975 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _982 = (_975.x * 2.0) + (-1.0);
    float _983 = (_975.y * 2.0) + (-1.0);
    float _984 = dot(vec2(_982, _983), vec2(_982, _983));
    float _4299 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _992 = (_808 * (_975.z - _959)) + _959;
    float _995 = ((cbMtdParam._m0[23u].x - _992) * _858) + _992;
    vec4 _1018 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1024 = (_1018.x * 2.0) + (-1.0);
    float _1025 = (_1018.y * 2.0) + (-1.0);
    float _1026 = dot(vec2(_1024, _1025), vec2(_1024, _1025));
    float _4310 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1034 = (((_759.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _737;
    float _1035 = (((_759.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _739;
    float _1047 = (((_982 - _1034) + (cbMtdParam._m0[21u].x * _1034)) * _808) + _1034;
    float _1048 = (((_983 - _1035) + (cbMtdParam._m0[21u].x * _1035)) * _808) + _1035;
    float _1049 = (_808 * (sqrt(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) - _745)) + _745;
    float _1060 = (((_1024 - _1047) + (_1047 * cbMtdParam._m0[22u].z)) * _858) + _1047;
    float _1061 = (((_1025 - _1048) + (_1048 * cbMtdParam._m0[22u].z)) * _858) + _1048;
    float _1062 = ((sqrt(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) - _1049) * _858) + _1049;
    float _1064 = cbMtdParam._m0[22u].x + _759.w;
    float _1067 = fma(_1062, _262 * NORMAL.x, fma(_1061, _269 * TANGENT.x, (_255 * _247) * _1060));
    float _1070 = fma(_1062, _262 * NORMAL.y, fma(_1061, _269 * TANGENT.y, (_255 * _248) * _1060));
    float _1073 = fma(_1062, _262 * NORMAL.z, fma(_1061, _269 * TANGENT.z, (_255 * _249) * _1060));
    float _1077 = inversesqrt(dot(vec3(_1067, _1070, _1073), vec3(_1067, _1070, _1073)));
    float _1078 = _1077 * _1067;
    float _1079 = _1077 * _1070;
    float _1080 = _1077 * _1073;
    float _4321 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _1081 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _4332 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _4343 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4354 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4365 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4376 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _1086 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _1100 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1150 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1140);
    float _1151 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1140);
    float _1152 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1140);
    float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
    float _1157 = _1150 * _1156;
    float _1158 = _1151 * _1156;
    float _1159 = _1152 * _1156;
    float _1165 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1166 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1184 = fma(_1080, cbSceneParam._m0[5u].z, fma(_1079, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1078));
    float _1187 = fma(_1080, cbSceneParam._m0[6u].z, fma(_1079, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1078));
    float _1190 = fma(_1080, cbSceneParam._m0[7u].z, fma(_1079, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1078));
    uint _1204 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1210 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * cbInstanceData._m0[_1204].x;
    float _1211 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * cbInstanceData._m0[_1204].y;
    float _1212 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * cbInstanceData._m0[_1204].z;
    float _4387 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _4398 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _4409 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1215 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _1216 = 1.0 - _1086;
    float _1217 = _1213 * _1216;
    float _1218 = _1214 * _1216;
    float _1219 = _1215 * _1216;
    float _1224 = (_1213 + (-0.039999999105930328369140625)) * _1086;
    float _1225 = (_1214 + (-0.039999999105930328369140625)) * _1086;
    float _1226 = (_1215 + (-0.039999999105930328369140625)) * _1086;
    float _1227 = _1224 + 0.039999999105930328369140625;
    float _1229 = _1225 + 0.039999999105930328369140625;
    float _1230 = _1226 + 0.039999999105930328369140625;
    vec4 _1239 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1165, cbSceneParam._m0[86u].y * _1166));
    float _1243 = ((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * TEXCOORD_5.w) * _1239.x;
    float _1244 = dot(vec3(_1078, _1079, _1080), vec3(_1157, _1158, _1159));
    float _1247 = _1244 * 2.0;
    float _1251 = (_1247 * _1078) - _1157;
    float _1252 = (_1247 * _1079) - _1158;
    float _1253 = (_1247 * _1080) - _1159;
    float _1257 = abs(dot(vec3(_1157, _1158, _1159), vec3(_1078, _1079, _1080)));
    float _4420 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
    float _1259 = sqrt(_1081);
    float _1272 = exp2((_1259 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1259 * 3.0));
    float _1278 = (1.0 - _1272) * ((_1259 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1279 = _1272 * _1259;
    float _1307 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1311 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1315 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1616;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1341 = fma(_1315, cbModelParam._m0[26u].z, fma(_1311, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1307));
        float _1345 = fma(_1315, cbModelParam._m0[27u].z, fma(_1311, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1307));
        float _1349 = fma(_1315, cbModelParam._m0[28u].z, fma(_1311, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1307));
        float _1374 = _1307 + _1078;
        float _1375 = _1311 + _1079;
        float _1376 = _1315 + _1080;
        float _1386 = fma(_1376, cbModelParam._m0[26u].z, fma(_1375, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1374)) - _1341;
        float _1387 = fma(_1376, cbModelParam._m0[27u].z, fma(_1375, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1374)) - _1345;
        float _1388 = fma(_1376, cbModelParam._m0[28u].z, fma(_1375, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1374)) - _1349;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1405 = ((_1392 * _1386) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1341 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1387) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1345 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1392 * _1388) / cbModelParam._m0[34u].z) + ((((((_1349 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        float _1444 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1410.x + (-0.5));
        float _1446 = _1444 * (_1410.y + (-0.5));
        float _1447 = _1444 * (_1410.z + (-0.5));
        float _1454 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1417.x + (-0.5));
        float _1456 = _1454 * (_1417.y + (-0.5));
        float _1457 = _1454 * (_1417.z + (-0.5));
        float _1464 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1424.x + (-0.5));
        float _1466 = _1464 * (_1424.y + (-0.5));
        float _1467 = _1464 * (_1424.z + (-0.5));
        float _1474 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1431.x + (-0.5));
        float _1476 = _1474 * (_1431.y + (-0.5));
        float _1477 = _1474 * (_1431.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1498 = (dot(vec3(_1078, _1079, _1080), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4446 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1508 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4457 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4468 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_1510 + 1.0))) + _1515) * _1478;
        float _1525 = _1446 * 0.5;
        float _1526 = _1456 * 0.5;
        float _1527 = _1466 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_1078, _1079, _1080), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4501 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1552 + 1.0))) + _1557) * _1479;
        float _1567 = _1447 * 0.5;
        float _1568 = _1457 * 0.5;
        float _1569 = _1467 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_1078, _1079, _1080), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4512 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4523 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4534 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_1594 + 1.0))) + _1599) * _1480;
        _1616 = _1447;
        _1618 = _1446;
        _1619 = _1445;
        _1620 = _1457;
        _1621 = _1456;
        _1622 = _1455;
        _1623 = _1467;
        _1624 = _1466;
        _1625 = _1465;
        _1626 = _1480;
        _1627 = _1479;
        _1628 = _1478;
        _1629 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1630 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1631 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
    }
    else
    {
        _1616 = _1617;
        _1618 = _1617;
        _1619 = _1617;
        _1620 = _1617;
        _1621 = _1617;
        _1622 = _1617;
        _1623 = _1617;
        _1624 = _1617;
        _1625 = _1617;
        _1626 = _1617;
        _1627 = _1617;
        _1628 = _1617;
        _1629 = 0.0;
        _1630 = 0.0;
        _1631 = 0.0;
    }
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1654 = fma(_1315, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1307));
        float _1658 = fma(_1315, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1307));
        float _1662 = fma(_1315, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1307));
        float _1685 = _1307 + _1078;
        float _1686 = _1311 + _1079;
        float _1687 = _1315 + _1080;
        float _1697 = fma(_1687, cbModelParam._m0[30u].z, fma(_1686, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1685)) - _1654;
        float _1698 = fma(_1687, cbModelParam._m0[31u].z, fma(_1686, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1685)) - _1658;
        float _1699 = fma(_1687, cbModelParam._m0[32u].z, fma(_1686, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1685)) - _1662;
        float _1703 = inversesqrt(dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699)));
        float _1716 = ((_1703 * _1697) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1654 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1717 = ((_1703 * _1698) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1658 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1718 = ((_1703 * _1699) / cbModelParam._m0[35u].z) + ((((((_1662 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1720 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1716, _1717, _1718), 0.0);
        vec4 _1727 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1716, _1717, _1718), 0.0);
        vec4 _1734 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1716, _1717, _1718), 0.0);
        vec4 _1741 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1716, _1717, _1718), 0.0);
        float _1753 = exp2((_1720.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1720.x + (-0.5));
        float _1755 = _1753 * (_1720.y + (-0.5));
        float _1756 = _1753 * (_1720.z + (-0.5));
        float _1763 = exp2((_1727.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1727.x + (-0.5));
        float _1765 = _1763 * (_1727.y + (-0.5));
        float _1766 = _1763 * (_1727.z + (-0.5));
        float _1773 = exp2((_1734.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1734.x + (-0.5));
        float _1775 = _1773 * (_1734.y + (-0.5));
        float _1776 = _1773 * (_1734.z + (-0.5));
        float _1783 = exp2((_1741.w + (-0.5)) * 20.0) * 2.0;
        float _1784 = _1783 * (_1741.x + (-0.5));
        float _1785 = _1783 * (_1741.y + (-0.5));
        float _1786 = _1783 * (_1741.z + (-0.5));
        float _1787 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1788 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1789 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1790 = _1754 * 0.5;
        float _1791 = _1764 * 0.5;
        float _1792 = _1774 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_1078, _1079, _1080), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4575 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1787 + 9.9999997473787516355514526367188e-06);
        float _4586 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4597 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_1817 + 1.0))) + _1822) * _1787;
        float _1832 = _1755 * 0.5;
        float _1833 = _1765 * 0.5;
        float _1834 = _1775 * 0.5;
        float _1835 = dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834));
        float _1840 = (_1835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1835);
        float _1848 = (dot(vec3(_1078, _1079, _1080), vec3(_1840 * _1832, _1840 * _1833, _1840 * _1834)) + 1.0) * 0.5;
        float _4608 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1857 = sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834)) / (_1788 + 9.9999997473787516355514526367188e-06);
        float _4619 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _1859 = _1858 * 2.0;
        float _1863 = (1.0 - _1858) / (_1858 + 1.0);
        float _4630 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _1873 = ((((1.0 - _1864) * (_1859 + 2.0)) * exp2(log2(isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_1859 + 1.0))) + _1864) * _1788;
        float _1874 = _1756 * 0.5;
        float _1875 = _1766 * 0.5;
        float _1876 = _1776 * 0.5;
        float _1877 = dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876));
        float _1882 = (_1877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1877);
        float _1890 = (dot(vec3(_1078, _1079, _1080), vec3(_1882 * _1874, _1882 * _1875, _1882 * _1876)) + 1.0) * 0.5;
        float _4641 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1899 = sqrt(((_1875 * _1875) + (_1874 * _1874)) + (_1876 * _1876)) / (_1789 + 9.9999997473787516355514526367188e-06);
        float _4652 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1900 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _1901 = _1900 * 2.0;
        float _1905 = (1.0 - _1900) / (_1900 + 1.0);
        float _4663 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _1915 = ((((1.0 - _1906) * (_1901 + 2.0)) * exp2(log2(isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_1901 + 1.0))) + _1906) * _1789;
        _1923 = _1756;
        _1924 = _1755;
        _1925 = _1754;
        _1926 = _1766;
        _1927 = _1765;
        _1928 = _1764;
        _1929 = _1776;
        _1930 = _1775;
        _1931 = _1774;
        _1932 = _1789;
        _1933 = _1788;
        _1934 = _1787;
        _1935 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
        _1936 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)));
        _1937 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)));
    }
    else
    {
        _1923 = _1617;
        _1924 = _1617;
        _1925 = _1617;
        _1926 = _1617;
        _1927 = _1617;
        _1928 = _1617;
        _1929 = _1617;
        _1930 = _1617;
        _1931 = _1617;
        _1932 = _1617;
        _1933 = _1617;
        _1934 = _1617;
        _1935 = 0.0;
        _1936 = 0.0;
        _1937 = 0.0;
    }
    float _1947 = (cbModelParam._m0[1u].x * (_1935 - _1629)) + _1629;
    float _1948 = (cbModelParam._m0[1u].x * (_1936 - _1630)) + _1630;
    float _1949 = (cbModelParam._m0[1u].x * (_1937 - _1631)) + _1631;
    float _1970 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1948, cbSceneParam._m0[89u].y, _1947 * cbSceneParam._m0[89u].x));
    float _1973 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1948, cbSceneParam._m0[90u].y, _1947 * cbSceneParam._m0[90u].x));
    float _1976 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1948, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1947));
    float _1991 = _1251 * 0.5;
    float _1992 = _1252 * 0.5;
    float _1993 = _1253 * 0.5;
    float _1994 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1925, _1928, _1931, _1934));
    float _1997 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1924, _1927, _1930, _1933));
    float _2000 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1923, _1926, _1929, _1932));
    float _2034;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2007 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1616, _1620, _1623, _1626));
        float _2011 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1618, _1621, _1624, _1627));
        float _2015 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1619, _1622, _1625, _1628));
        float _2022 = dot(vec4(cbModelParam._m0[39u]), vec4(_1991, _1992, _1993, 1.0));
        _2034 = dot(vec3(isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0)), isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)), isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2022) ? 0.0 : (isnan(0.0) ? _2022 : max(0.0, _2022))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2034 = 1.0;
    }
    float _2045;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2036 = dot(vec4(cbModelParam._m0[40u]), vec4(_1991, _1992, _1993, 1.0));
        _2045 = dot(vec3(isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0)), isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0)), isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2036) ? 0.0 : (isnan(0.0) ? _2036 : max(0.0, _2036))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2045 = 1.0;
    }
    float _2049 = (_2045 * cbModelParam._m0[1u].x) + (_2034 * (1.0 - cbModelParam._m0[1u].x));
    float _2059 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1081);
    float _2060 = isnan(_2059) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2059 : min(cbModelParam._m0[25u].z, _2059));
    float _2140;
    float _2142;
    float _2144;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2107 = fma(_1315, cbModelParam._m0[13u].z, fma(_1311, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1307)) + cbModelParam._m0[13u].w;
        float _2111 = fma(_1315, cbModelParam._m0[14u].z, fma(_1311, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1307)) + cbModelParam._m0[14u].w;
        float _2115 = fma(_1315, cbModelParam._m0[15u].z, fma(_1311, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1307)) + cbModelParam._m0[15u].w;
        float _2118 = fma(_1253, cbModelParam._m0[13u].z, fma(_1252, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1251));
        float _2121 = fma(_1253, cbModelParam._m0[14u].z, fma(_1252, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1251));
        float _2124 = fma(_1253, cbModelParam._m0[15u].z, fma(_1252, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1251));
        float _2152;
        if (_2118 > 0.0)
        {
            _2152 = abs((1.0 - _2107) / _2118);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2107 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2152 = frontier_phi_14_12_ladder;
        }
        float _2323;
        if (_2121 > 0.0)
        {
            _2323 = abs((1.0 - _2111) / _2121);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2111 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2323 = frontier_phi_23_19_ladder;
        }
        float _2618;
        if (_2124 > 0.0)
        {
            _2618 = abs((1.0 - _2115) / _2124);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2115 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2618 = frontier_phi_35_30_ladder;
        }
        float _2620 = isnan(_2323) ? _2152 : (isnan(_2152) ? _2323 : min(_2152, _2323));
        float _2621 = isnan(_2618) ? _2620 : (isnan(_2620) ? _2618 : min(_2620, _2618));
        float _2625 = (_2621 * _2118) + _2107;
        float _2626 = (_2621 * _2121) + _2111;
        float _2627 = (_2621 * _2124) + _2115;
        float _2628 = _2621 * 9.9999997473787516355514526367188e-05;
        float _2630 = (-1.0) - _2628;
        float _2632 = _2628 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2627 > _2632) || ((_2627 < _2630) || ((_2626 > _2632) || ((_2626 < _2630) || ((_2625 < _2630) || (_2625 > _2632))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2772 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2627, cbModelParam._m0[9u].z, fma(_2626, cbModelParam._m0[9u].y, _2625 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2627, cbModelParam._m0[10u].z, fma(_2626, cbModelParam._m0[10u].y, _2625 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2627, cbModelParam._m0[11u].z, fma(_2626, cbModelParam._m0[11u].y, _2625 * cbModelParam._m0[11u].x))), _2060);
            frontier_phi_13_35_ladder = _2772.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2772.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2772.x * cbModelParam._m0[1u].y;
        }
        _2140 = frontier_phi_13_35_ladder_2;
        _2142 = frontier_phi_13_35_ladder_1;
        _2144 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2128 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1251, _1252, _1253), _2060);
        _2140 = _2128.x * cbModelParam._m0[1u].y;
        _2142 = _2128.y * cbModelParam._m0[1u].y;
        _2144 = _2128.z * cbModelParam._m0[1u].y;
    }
    float _2148 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1081);
    float _2149 = isnan(_2148) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2148 : min(cbModelParam._m0[25u].w, _2148));
    float _2238;
    float _2240;
    float _2242;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2202 = fma(_1315, cbModelParam._m0[21u].z, fma(_1311, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1307)) + cbModelParam._m0[21u].w;
        float _2206 = fma(_1315, cbModelParam._m0[22u].z, fma(_1311, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1307)) + cbModelParam._m0[22u].w;
        float _2210 = fma(_1315, cbModelParam._m0[23u].z, fma(_1311, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1307)) + cbModelParam._m0[23u].w;
        float _2213 = fma(_1253, cbModelParam._m0[21u].z, fma(_1252, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1251));
        float _2216 = fma(_1253, cbModelParam._m0[22u].z, fma(_1252, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1251));
        float _2219 = fma(_1253, cbModelParam._m0[23u].z, fma(_1252, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1251));
        float _2328;
        if (_2213 > 0.0)
        {
            _2328 = abs((1.0 - _2202) / _2213);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2213 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2202 + 1.0) / _2213);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2328 = frontier_phi_25_21_ladder;
        }
        float _2645;
        if (_2216 > 0.0)
        {
            _2645 = abs((1.0 - _2206) / _2216);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2216 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2206 + 1.0) / _2216);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2645 = frontier_phi_37_32_ladder;
        }
        float _2983;
        if (_2219 > 0.0)
        {
            _2983 = abs((1.0 - _2210) / _2219);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2219 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2210 + 1.0) / _2219);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2983 = frontier_phi_47_44_ladder;
        }
        float _2985 = isnan(_2645) ? _2328 : (isnan(_2328) ? _2645 : min(_2328, _2645));
        float _2986 = isnan(_2983) ? _2985 : (isnan(_2985) ? _2983 : min(_2985, _2983));
        float _2990 = (_2986 * _2213) + _2202;
        float _2991 = (_2986 * _2216) + _2206;
        float _2992 = (_2986 * _2219) + _2210;
        float _2993 = _2986 * 9.9999997473787516355514526367188e-05;
        float _2994 = (-1.0) - _2993;
        float _2996 = _2993 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2992 > _2996) || ((_2992 < _2994) || ((_2991 > _2996) || ((_2991 < _2994) || ((_2990 < _2994) || (_2990 > _2996))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2992, cbModelParam._m0[17u].z, fma(_2991, cbModelParam._m0[17u].y, _2990 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2992, cbModelParam._m0[18u].z, fma(_2991, cbModelParam._m0[18u].y, _2990 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2992, cbModelParam._m0[19u].z, fma(_2991, cbModelParam._m0[19u].y, _2990 * cbModelParam._m0[19u].x))), _2149);
            frontier_phi_22_47_ladder = _3114.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3114.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3114.x * cbModelParam._m0[1u].z;
        }
        _2238 = frontier_phi_22_47_ladder_2;
        _2240 = frontier_phi_22_47_ladder_1;
        _2242 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2222 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1251, _1252, _1253), _2149);
        _2238 = _2222.x * cbModelParam._m0[1u].z;
        _2240 = _2222.y * cbModelParam._m0[1u].z;
        _2242 = _2222.z * cbModelParam._m0[1u].z;
    }
    float _2255 = (((_1278 * _1227) + _1279) * _1243) * ((cbModelParam._m0[1u].w * (_2238 - _2140)) + _2140);
    float _2257 = (((_1278 * _1229) + _1279) * _1243) * ((cbModelParam._m0[1u].w * (_2240 - _2142)) + _2142);
    float _2259 = (((_1278 * _1230) + _1279) * _1243) * ((cbModelParam._m0[1u].w * (_2242 - _2144)) + _2144);
    float _2262 = fma(_2259, cbSceneParam._m0[89u].z, fma(_2257, cbSceneParam._m0[89u].y, _2255 * cbSceneParam._m0[89u].x));
    float _2265 = fma(_2259, cbSceneParam._m0[90u].z, fma(_2257, cbSceneParam._m0[90u].y, _2255 * cbSceneParam._m0[90u].x));
    float _2268 = fma(_2259, cbSceneParam._m0[91u].z, fma(_2257, cbSceneParam._m0[91u].y, _2255 * cbSceneParam._m0[91u].x));
    float _2302 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2306 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2310 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2314 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2315 = _2302 / _2314;
    float _2316 = _2306 / _2314;
    float _2317 = _2310 / _2314;
    float _2464;
    float _2465;
    float _2466;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2344 = ((uint(_2317 > cbSceneParam._m0[59u].y) + uint(_2317 > cbSceneParam._m0[59u].x)) + uint(_2317 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2345 = _2344 + 43u;
        uint _2353 = _2344 + 44u;
        uint _2361 = _2344 + 45u;
        uint _2369 = _2344 + 46u;
        float _2380 = fma(_2314, cbSceneParam._m0[_2345].w, fma(_2310, cbSceneParam._m0[_2345].z, fma(_2306, cbSceneParam._m0[_2345].y, _2302 * cbSceneParam._m0[_2345].x)));
        float _2384 = fma(_2314, cbSceneParam._m0[_2353].w, fma(_2310, cbSceneParam._m0[_2353].z, fma(_2306, cbSceneParam._m0[_2353].y, _2302 * cbSceneParam._m0[_2353].x)));
        float _2392 = fma(_2314, cbSceneParam._m0[_2369].w, fma(_2310, cbSceneParam._m0[_2369].z, fma(_2306, cbSceneParam._m0[_2369].y, _2302 * cbSceneParam._m0[_2369].x)));
        float _2397 = cbSceneParam._m0[33u].z * _2392;
        float _2399 = cbSceneParam._m0[33u].w * _2392;
        float _2402 = fma(_2314, cbSceneParam._m0[_2361].w, fma(_2310, cbSceneParam._m0[_2361].z, fma(_2306, cbSceneParam._m0[_2361].y, _2302 * cbSceneParam._m0[_2361].x))) / _2392;
        float _2450 = (cbSceneParam._m0[33u].x - sqrt(((_2316 * _2316) + (_2315 * _2315)) + (_2317 * _2317))) * cbSceneParam._m0[33u].y;
        float _4789 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2457 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2397 + _2380) / _2392, (_2399 + _2384) / _2392), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2399 + _2380) / _2392, (_2384 - _2397) / _2392), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2380 - _2397) / _2392, (_2384 - _2399) / _2392), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2380 - _2399) / _2392, (_2397 + _2384) / _2392), _2402), 0.0)).x), vec4(0.25)));
        _2464 = 1.0 - (_2457 * cbSceneParam._m0[34u].x);
        _2465 = 1.0 - (_2457 * cbSceneParam._m0[34u].y);
        _2466 = 1.0 - (_2457 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2464 = 1.0;
        _2465 = 1.0;
        _2466 = 1.0;
    }
    float _2530;
    float _2532;
    float _2534;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2518 = fma(_2314, cbSceneParam._m0[63u].w, fma(_2310, cbSceneParam._m0[63u].z, fma(_2306, cbSceneParam._m0[63u].y, _2302 * cbSceneParam._m0[63u].x)));
        float _2519 = fma(_2314, cbSceneParam._m0[60u].w, fma(_2310, cbSceneParam._m0[60u].z, fma(_2306, cbSceneParam._m0[60u].y, _2302 * cbSceneParam._m0[60u].x))) / _2518;
        float _2520 = fma(_2314, cbSceneParam._m0[61u].w, fma(_2310, cbSceneParam._m0[61u].z, fma(_2306, cbSceneParam._m0[61u].y, _2302 * cbSceneParam._m0[61u].x))) / _2518;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2519 >= cbSceneParam._m0[64u].x) && (_2520 >= cbSceneParam._m0[64u].y)) && (_2519 <= cbSceneParam._m0[64u].z)) && (_2520 <= cbSceneParam._m0[64u].w))
        {
            float _2658 = fma(_2314, cbSceneParam._m0[62u].w, fma(_2310, cbSceneParam._m0[62u].z, fma(_2306, cbSceneParam._m0[62u].y, _2302 * cbSceneParam._m0[62u].x))) / _2518;
            float _2662 = isnan(cbSceneParam._m0[41u].w) ? _2658 : (isnan(_2658) ? cbSceneParam._m0[41u].w : max(_2658, cbSceneParam._m0[41u].w));
            float _2705 = (cbSceneParam._m0[33u].x - sqrt(((_2316 * _2316) + (_2315 * _2315)) + (_2317 * _2317))) * cbSceneParam._m0[33u].y;
            float _4805 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
            float _2712 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2519, cbSceneParam._m0[33u].w + _2520), _2662), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2519, _2520 - cbSceneParam._m0[33u].z), _2662), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2519 - cbSceneParam._m0[33u].z, _2520 - cbSceneParam._m0[33u].w), _2662), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2519 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2520), _2662), 0.0)).x), vec4(0.25)));
            float _2716 = 1.0 - (_2712 * cbSceneParam._m0[34u].x);
            float _2717 = 1.0 - (_2712 * cbSceneParam._m0[34u].y);
            float _2718 = 1.0 - (_2712 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2718) ? _2466 : (isnan(_2466) ? _2718 : min(_2466, _2718));
            frontier_phi_34_33_ladder_1 = isnan(_2717) ? _2465 : (isnan(_2465) ? _2717 : min(_2465, _2717));
            frontier_phi_34_33_ladder_2 = isnan(_2716) ? _2464 : (isnan(_2464) ? _2716 : min(_2464, _2716));
        }
        else
        {
            frontier_phi_34_33_ladder = _2466;
            frontier_phi_34_33_ladder_1 = _2465;
            frontier_phi_34_33_ladder_2 = _2464;
        }
        _2530 = frontier_phi_34_33_ladder_2;
        _2532 = frontier_phi_34_33_ladder_1;
        _2534 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2530 = _2464;
        _2532 = _2465;
        _2534 = _2466;
    }
    uvec4 _2539 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2541 = _2539.x * 14u;
    uint _2542 = _2541 + 13u;
    float _2549 = _1243 + (-1.0);
    float _2554 = (cbLight._m0[_2542].x * _2549) + 1.0;
    float _2555 = (cbLight._m0[_2542].y * _2549) + 1.0;
    float _2556 = (cbLight._m0[_2542].z * _2549) + 1.0;
    float _2557 = (cbLight._m0[_2542].w * _2549) + 1.0;
    uint _2558 = _2541 + 5u;
    float _2564 = isnan(1.0) ? _2555 : (isnan(_2555) ? 1.0 : min(_2555, 1.0));
    uint _2568 = _2541 + 4u;
    float _2577 = isnan(1.0) ? _2554 : (isnan(_2554) ? 1.0 : min(_2554, 1.0));
    uint _2581 = _2541 | 1u;
    float _2592 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_1078, _1079, _1080));
    float _2595 = dot(vec3(cbLight._m0[_2581].xyz), vec3(_1078, _1079, _1080));
    float _4841 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _4852 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2600 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * 0.3183098733425140380859375;
    float _2602 = (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * 0.3183098733425140380859375;
    float _2609 = ((cbLight._m0[_2558].x * _2564) * _2602) + (((cbLight._m0[_2568].x * _2530) * _2577) * _2600);
    float _2610 = ((_2564 * cbLight._m0[_2558].y) * _2602) + (((cbLight._m0[_2568].y * _2532) * _2577) * _2600);
    float _2611 = ((_2564 * cbLight._m0[_2558].z) * _2602) + (((cbLight._m0[_2568].z * _2534) * _2577) * _2600);
    uvec4 _2615 = floatBitsToUint(cbLight._m0[_2541 + 12u]);
    bool _2617 = _2615.x == 0u;
    float _2719;
    float _2721;
    float _2723;
    if (_2617)
    {
        _2719 = _2609;
        _2721 = _2610;
        _2723 = _2611;
    }
    else
    {
        uint _2727 = _2541 + 6u;
        float _2743 = (dot(vec3(cbLight._m0[_2541 + 2u].xyz), vec3(_1078, _1079, _1080)) * 0.5) + 0.5;
        float _2744 = _2743 * _2743;
        float _4863 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2745 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2746 = isnan(1.0) ? _2556 : (isnan(_2556) ? 1.0 : min(_2556, 1.0));
        _2719 = (((cbLight._m0[_2727].x * 0.3183098733425140380859375) * _2745) * _2746) + _2609;
        _2721 = (((cbLight._m0[_2727].y * 0.3183098733425140380859375) * _2745) * _2746) + _2610;
        _2723 = (((cbLight._m0[_2727].z * 0.3183098733425140380859375) * _2745) * _2746) + _2611;
    }
    bool _2726 = _2615.y == 0u;
    float _2781;
    float _2783;
    float _2785;
    if (_2726)
    {
        _2781 = _2719;
        _2783 = _2721;
        _2785 = _2723;
    }
    else
    {
        uint _2954 = _2541 + 7u;
        float _2970 = (dot(vec3(cbLight._m0[_2541 + 3u].xyz), vec3(_1078, _1079, _1080)) * 0.5) + 0.5;
        float _2971 = _2970 * _2970;
        float _4879 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2972 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2973 = isnan(1.0) ? _2557 : (isnan(_2557) ? 1.0 : min(_2557, 1.0));
        _2781 = (((cbLight._m0[_2954].x * 0.3183098733425140380859375) * _2972) * _2973) + _2719;
        _2783 = (((cbLight._m0[_2954].y * 0.3183098733425140380859375) * _2972) * _2973) + _2721;
        _2785 = (((cbLight._m0[_2954].z * 0.3183098733425140380859375) * _2972) * _2973) + _2723;
    }
    uint _2788 = _2541 + 8u;
    float _2801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _1081) * 0.949999988079071044921875);
    float _2802 = _2801 * _2801;
    float _2803 = cbLight._m0[_2541].x + _1157;
    float _2804 = cbLight._m0[_2541].y + _1158;
    float _2805 = cbLight._m0[_2541].z + _1159;
    float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
    float _2810 = _2809 * _2803;
    float _2811 = _2809 * _2804;
    float _2812 = _2809 * _2805;
    float _2813 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_2541].xyz));
    float _4895 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2816 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
    float _4906 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _2817 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
    float _2818 = dot(vec3(_1078, _1079, _1080), vec3(_2810, _2811, _2812));
    float _4917 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
    float _2821 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
    float _2822 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2810, _2811, _2812));
    float _4928 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2826 = _2802 * _2802;
    float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
    float _2838 = exp2(log2(1.0 - (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0)))) * 5.0);
    float _2839 = 0.959999978542327880859375 - _1224;
    float _2841 = 0.959999978542327880859375 - _1225;
    float _2842 = 0.959999978542327880859375 - _1226;
    float _2849 = 1.0 - _2802;
    float _2860 = (0.5 / (((_2817 * ((_2816 * _2849) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _2849) + _2802) * _2816))) * _2816;
    float _4939 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
    float _2862 = (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
    uint _2876 = _2541 + 9u;
    float _2887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2581].w)) * _1081) * 0.949999988079071044921875);
    float _2888 = _2887 * _2887;
    float _2889 = cbLight._m0[_2581].x + _1157;
    float _2890 = cbLight._m0[_2581].y + _1158;
    float _2891 = cbLight._m0[_2581].z + _1159;
    float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
    float _2896 = _2895 * _2889;
    float _2897 = _2895 * _2890;
    float _2898 = _2895 * _2891;
    float _2899 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_2581].xyz));
    float _4950 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
    float _2902 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
    float _2903 = dot(vec3(_1078, _1079, _1080), vec3(_2896, _2897, _2898));
    float _4961 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
    float _2906 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
    float _2907 = dot(vec3(cbLight._m0[_2581].xyz), vec3(_2896, _2897, _2898));
    float _4972 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
    float _2911 = _2888 * _2888;
    float _2915 = ((_2906 * _2906) * (_2911 + (-1.0))) + 1.0;
    float _2922 = exp2(log2(1.0 - (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0)))) * 5.0);
    float _2929 = 1.0 - _2888;
    float _2939 = (0.5 / (((_2817 * ((_2902 * _2929) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _2929) + _2888) * _2902))) * _2902;
    float _4983 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
    float _2941 = (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * (_2911 / ((_2915 * _2915) * 3.141590118408203125));
    float _2951 = (((((_2922 * _2839) + _1227) * cbLight._m0[_2876].x) * _2941) * _2564) + ((((cbLight._m0[_2788].x * _2530) * ((_2838 * _2839) + _1227)) * _2862) * _2577);
    float _2952 = (((((_2922 * _2841) + _1229) * cbLight._m0[_2876].y) * _2941) * _2564) + ((((cbLight._m0[_2788].y * _2532) * ((_2838 * _2841) + _1229)) * _2862) * _2577);
    float _2953 = (((((_2922 * _2842) + _1230) * cbLight._m0[_2876].z) * _2941) * _2564) + ((((cbLight._m0[_2788].z * _2534) * ((_2838 * _2842) + _1230)) * _2862) * _2577);
    float _3009;
    float _3011;
    float _3013;
    if (_2617)
    {
        _3009 = _2951;
        _3011 = _2952;
        _3013 = _2953;
    }
    else
    {
        uint _3015 = _2541 + 2u;
        uint _3019 = _2541 + 10u;
        float _3033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3015].w)) * _1081) * 0.949999988079071044921875);
        float _3034 = _3033 * _3033;
        float _3035 = cbLight._m0[_3015].x + _1157;
        float _3036 = cbLight._m0[_3015].y + _1158;
        float _3037 = cbLight._m0[_3015].z + _1159;
        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
        float _3042 = _3041 * _3035;
        float _3043 = _3041 * _3036;
        float _3044 = _3041 * _3037;
        float _3045 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_3015].xyz));
        float _4994 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
        float _3048 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
        float _3049 = dot(vec3(_1078, _1079, _1080), vec3(_3042, _3043, _3044));
        float _5005 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        float _3052 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
        float _3053 = dot(vec3(cbLight._m0[_3015].xyz), vec3(_3042, _3043, _3044));
        float _5016 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3057 = _3034 * _3034;
        float _3061 = ((_3052 * _3052) * (_3057 + (-1.0))) + 1.0;
        float _3068 = exp2(log2(1.0 - (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0)))) * 5.0);
        float _3075 = 1.0 - _3034;
        float _3085 = (0.5 / (((_2817 * ((_3048 * _3075) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _3075) + _3034) * _3048))) * _3048;
        float _5027 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
        float _3087 = (isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_3057 / ((_3061 * _3061) * 3.141590118408203125));
        float _3088 = isnan(1.0) ? _2556 : (isnan(_2556) ? 1.0 : min(_2556, 1.0));
        _3009 = (((((_3068 * _2839) + _1227) * cbLight._m0[_3019].x) * _3087) * _3088) + _2951;
        _3011 = (((((_3068 * _2841) + _1229) * cbLight._m0[_3019].y) * _3087) * _3088) + _2952;
        _3013 = (((((_3068 * _2842) + _1230) * cbLight._m0[_3019].z) * _3087) * _3088) + _2953;
    }
    float _3119;
    float _3121;
    float _3123;
    if (_2726)
    {
        _3119 = _3009;
        _3121 = _3011;
        _3123 = _3013;
    }
    else
    {
        uint _3130 = _2541 + 3u;
        uint _3134 = _2541 + 11u;
        float _3148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3130].w)) * _1081) * 0.949999988079071044921875);
        float _3149 = _3148 * _3148;
        float _3150 = cbLight._m0[_3130].x + _1157;
        float _3151 = cbLight._m0[_3130].y + _1158;
        float _3152 = cbLight._m0[_3130].z + _1159;
        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
        float _3157 = _3156 * _3150;
        float _3158 = _3156 * _3151;
        float _3159 = _3156 * _3152;
        float _3160 = dot(vec3(_1078, _1079, _1080), vec3(cbLight._m0[_3130].xyz));
        float _5043 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
        float _3163 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
        float _3164 = dot(vec3(_1078, _1079, _1080), vec3(_3157, _3158, _3159));
        float _5054 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
        float _3167 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
        float _3168 = dot(vec3(cbLight._m0[_3130].xyz), vec3(_3157, _3158, _3159));
        float _5065 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
        float _3172 = _3149 * _3149;
        float _3176 = ((_3167 * _3167) * (_3172 + (-1.0))) + 1.0;
        float _3183 = exp2(log2(1.0 - (isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0)))) * 5.0);
        float _3190 = 1.0 - _3149;
        float _3200 = (0.5 / (((_2817 * ((_3163 * _3190) + _3149)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _3190) + _3149) * _3163))) * _3163;
        float _5076 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
        float _3202 = (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0))) * (_3172 / ((_3176 * _3176) * 3.141590118408203125));
        float _3203 = isnan(1.0) ? _2557 : (isnan(_2557) ? 1.0 : min(_2557, 1.0));
        _3119 = (((((_3183 * _2839) + _1227) * cbLight._m0[_3134].x) * _3202) * _3203) + _3009;
        _3121 = (((((_3183 * _2841) + _1229) * cbLight._m0[_3134].y) * _3202) * _3203) + _3011;
        _3123 = (((((_3183 * _2842) + _1230) * cbLight._m0[_3134].z) * _3202) * _3203) + _3013;
    }
    float _3269;
    float _3271;
    float _3273;
    float _3275;
    float _3277;
    float _3279;
    if (_2539.y == 0u)
    {
        uvec4 _3224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3225 = _3224.x;
        uint _3236 = uint((float(_3224.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1166) / _3225))) + floor(float(uint(cbSceneParam._m0[85u].x * _1165) / _3225)));
        float _3246 = (log2(_2317 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3247 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
        uint _3250 = uint(isnan(14.0) ? _3247 : (isnan(_3247) ? 14.0 : min(_3247, 14.0)));
        uvec4 _3255 = texelFetch(g_lightClusterGridBuffer, int(((_3250 << 2u) + (_3236 << 6u)) >> 2u));
        uint _3256 = _3255.x;
        uint _3257 = _3224.z;
        float _3336;
        float _3338;
        float _3340;
        float _3342;
        float _3344;
        float _3346;
        if (((((1u << ((_3257 >> 4u) & 15u)) + 4294967295u) & _3256) == 0u) || ((_3257 & 240u) == 0u))
        {
            _3336 = 0.0;
            _3338 = 0.0;
            _3340 = 0.0;
            _3342 = 0.0;
            _3344 = 0.0;
            _3346 = 0.0;
        }
        else
        {
            float _3337;
            float _3339;
            float _3341;
            float _3343;
            float _3345;
            float _3347;
            float _3481 = 0.0;
            float _3482 = 0.0;
            float _3483 = 0.0;
            float _3484 = 0.0;
            float _3485 = 0.0;
            float _3486 = 0.0;
            uint _3487 = 0u;
            uint _3496;
            bool _3497;
            for (;;)
            {
                _3496 = texelFetch(g_lightClassification, int((((_3250 << 5u) + (_3236 << 9u)) + (_3487 << 2u)) >> 2u)).x;
                _3497 = _3496 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3497)
                {
                    frontier_phi_66_pred = _3486;
                    frontier_phi_66_pred_1 = _3485;
                    frontier_phi_66_pred_2 = _3484;
                    frontier_phi_66_pred_3 = _3483;
                    frontier_phi_66_pred_4 = _3482;
                    frontier_phi_66_pred_5 = _3481;
                }
                else
                {
                    float _3605;
                    float _3606;
                    float _3607;
                    float _3608;
                    float _3609;
                    float _3610;
                    uint _3611;
                    _3605 = _3481;
                    _3606 = _3482;
                    _3607 = _3483;
                    _3608 = _3484;
                    _3609 = _3485;
                    _3610 = _3486;
                    _3611 = _3496;
                    float _3537;
                    float _3538;
                    float _3539;
                    float _3540;
                    float _3541;
                    float _3542;
                    for (;;)
                    {
                        uint _3615 = uint(findLSB(_3611)) + (_3487 << 5u);
                        uint _3612 = (_3611 + 4294967295u) & _3611;
                        uint _3617 = _3615 * 48u;
                        vec4 _3631 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3617)).x, texelFetch(g_PointLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3617 + 3u)).x));
                        uint _3637 = (_3615 * 48u) + 4u;
                        vec4 _3650 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3637)).x, texelFetch(g_PointLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3637 + 3u)).x));
                        uint _3656 = (_3615 * 48u) + 8u;
                        vec3 _3667 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3656)).x, texelFetch(g_PointLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3656 + 2u)).x));
                        float _3671 = _3631.x - _2315;
                        float _3672 = _3631.y - _2316;
                        float _3673 = _3631.z - _2317;
                        float _3674 = dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673));
                        float _3677 = inversesqrt(_3674);
                        float _3678 = _3677 * _3671;
                        float _3679 = _3677 * _3672;
                        float _3680 = _3677 * _3673;
                        float _3681 = dot(vec3(_1184, _1187, _1190), vec3(_3678, _3679, _3680));
                        float _3686 = 1.0 - (_3674 * _3631.w);
                        float _5102 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                        float _3687 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                        float _3688 = sqrt(_3674) * _3650.w;
                        float _3691 = 1.39999997615814208984375 / (_3688 + 1.39999997615814208984375);
                        float _3692 = _3691 * _3691;
                        float _3695 = ((1.0 - _3692) * _3681) + _3692;
                        float _3698 = _3688 * _3688;
                        float _3702 = ((isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0))) * _3687) / ((_3698 * 0.699999988079071044921875) + 1.0);
                        float _3706 = (-0.0) - _2315;
                        float _3707 = (-0.0) - _2316;
                        float _3708 = (-0.0) - _2317;
                        float _3712 = inversesqrt(dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708)));
                        float _3713 = _3712 * _3706;
                        float _3714 = _3712 * _3707;
                        float _3715 = _3712 * _3708;
                        float _3722 = exp2(log2(1.0 / ((_3698 * 3.5) + 5.0)) * 0.25);
                        float _3723 = 1.0 - _1259;
                        float _3730 = sqrt(1.0 - ((1.0 - (_3723 * _3723)) * (1.0 - (_3722 * _3722))));
                        float _3731 = _3730 * _3730;
                        float _3732 = _3731 * _3731;
                        float _3733 = _3713 + _3678;
                        float _3734 = _3714 + _3679;
                        float _3735 = _3715 + _3680;
                        float _3739 = inversesqrt(dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735)));
                        float _3743 = dot(vec3(_1184, _1187, _1190), vec3(_3713, _3714, _3715));
                        float _5118 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                        float _3746 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                        float _3747 = dot(vec3(_1184, _1187, _1190), vec3(_3739 * _3733, _3739 * _3734, _3739 * _3735));
                        float _5129 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                        float _3750 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                        float _3754 = ((_3750 * _3750) * (_3732 + (-1.0))) + 1.0;
                        float _3755 = _3691 * _3731;
                        float _3756 = _3755 * _3755;
                        float _3759 = ((1.0 - _3756) * _3681) + _3756;
                        float _5140 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                        float _3760 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
                        float _3761 = 1.0 - _3731;
                        float _3771 = (0.5 / (((_3760 * ((_3746 * _3761) + _3731)) + 9.9999999392252902907785028219223e-09) + (((_3760 * _3761) + _3731) * _3746))) * _3760;
                        float _5151 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                        float _3782 = (((_3732 * 3.1415927410125732421875) * (isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0)))) / ((_3754 * _3754) * ((_3698 * 2.1991131305694580078125) + 3.141590118408203125))) * _3687;
                        _3540 = (_3702 * _3650.x) + _3608;
                        _3541 = (_3702 * _3650.y) + _3609;
                        _3542 = (_3702 * _3650.z) + _3610;
                        _3537 = (_3782 * _3667.x) + _3605;
                        _3538 = (_3782 * _3667.y) + _3606;
                        _3539 = (_3782 * _3667.z) + _3607;
                        if (_3612 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3605 = _3537;
                            _3606 = _3538;
                            _3607 = _3539;
                            _3608 = _3540;
                            _3609 = _3541;
                            _3610 = _3542;
                            _3611 = _3612;
                        }
                    }
                    frontier_phi_66_pred = _3542;
                    frontier_phi_66_pred_1 = _3541;
                    frontier_phi_66_pred_2 = _3540;
                    frontier_phi_66_pred_3 = _3539;
                    frontier_phi_66_pred_4 = _3538;
                    frontier_phi_66_pred_5 = _3537;
                }
                _3347 = frontier_phi_66_pred;
                _3345 = frontier_phi_66_pred_1;
                _3343 = frontier_phi_66_pred_2;
                _3341 = frontier_phi_66_pred_3;
                _3339 = frontier_phi_66_pred_4;
                _3337 = frontier_phi_66_pred_5;
                uint _3488 = _3487 + 1u;
                if (_3488 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3481 = _3337;
                    _3482 = _3339;
                    _3483 = _3341;
                    _3484 = _3343;
                    _3485 = _3345;
                    _3486 = _3347;
                    _3487 = _3488;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3336 = _3337;
            _3338 = _3339;
            _3340 = _3341;
            _3342 = _3343;
            _3344 = _3345;
            _3346 = _3347;
        }
        uvec4 _3350 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3351 = _3350.z;
        uint _3353 = (_3351 >> 8u) & 15u;
        float _3449;
        float _3451;
        float _3453;
        float _3455;
        float _3457;
        float _3459;
        if (((4294967295u << _3353) & _3256) == 0u)
        {
            _3449 = _3336;
            _3451 = _3338;
            _3453 = _3340;
            _3455 = _3342;
            _3457 = _3344;
            _3459 = _3346;
        }
        else
        {
            float _3474 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
            float _3475 = _3474 * _2315;
            float _3476 = _3474 * _2316;
            float _3477 = _3474 * _2317;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3353 < ((_3351 >> 12u) & 15u))
            {
                float _3450;
                float _3452;
                float _3454;
                float _3456;
                float _3458;
                float _3460;
                float _3588 = _3336;
                float _3589 = _3338;
                float _3590 = _3340;
                float _3591 = _3342;
                float _3592 = _3344;
                float _3593 = _3346;
                uint _3594 = _3353;
                uint _3603;
                bool _3604;
                for (;;)
                {
                    _3603 = texelFetch(g_lightClassification, int((((_3250 << 5u) + (_3236 << 9u)) + (_3594 << 2u)) >> 2u)).x;
                    _3604 = _3603 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3604)
                    {
                        frontier_phi_72_pred = _3593;
                        frontier_phi_72_pred_1 = _3592;
                        frontier_phi_72_pred_2 = _3591;
                        frontier_phi_72_pred_3 = _3590;
                        frontier_phi_72_pred_4 = _3589;
                        frontier_phi_72_pred_5 = _3588;
                    }
                    else
                    {
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _4080;
                        float _4081;
                        float _4082;
                        float _4083;
                        float _4084;
                        float _4085;
                        float _3800 = _3588;
                        float _3801 = _3589;
                        float _3802 = _3590;
                        float _3803 = _3591;
                        float _3804 = _3592;
                        float _3805 = _3593;
                        uint _3806 = _3603;
                        uint _3807;
                        vec4 _3832;
                        float _3833;
                        vec4 _3848;
                        vec3 _3860;
                        vec4 _3875;
                        vec4 _3890;
                        float _3936;
                        bool _3937;
                        for (;;)
                        {
                            uint _3817 = ((_3594 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3806));
                            _3807 = (_3806 + 4294967295u) & _3806;
                            uint _3819 = _3817 * 40u;
                            _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            _3833 = _3832.w;
                            uint _3835 = (_3817 * 40u) + 4u;
                            _3848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 3u)).x));
                            uint _3850 = (_3817 * 40u) + 8u;
                            _3860 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 2u)).x));
                            uint _3862 = (_3817 * 40u) + 16u;
                            _3875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 3u)).x));
                            uint _3877 = (_3817 * 40u) + 20u;
                            _3890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 3u)).x));
                            uint _3892 = (_3817 * 40u) + 24u;
                            vec4 _3905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 3u)).x));
                            uint _3911 = (_3817 * 40u) + 28u;
                            vec4 _3924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 3u)).x));
                            _3936 = fma(_2317, _3924.z, fma(_2316, _3924.y, _3924.x * _2315)) + _3924.w;
                            _3937 = !((fma(_2317, _3905.z, fma(_2316, _3905.y, _3905.x * _2315)) + _3905.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3937)
                            {
                                float _3964 = _3832.x - _2315;
                                float _3965 = _3832.y - _2316;
                                float _3966 = _3832.z - _2317;
                                float _3967 = dot(vec3(_3964, _3965, _3966), vec3(_3964, _3965, _3966));
                                float _3970 = inversesqrt(_3967);
                                float _3971 = _3970 * _3964;
                                float _3972 = _3970 * _3965;
                                float _3973 = _3970 * _3966;
                                float _3977 = 1.0 - (_3967 / (_3833 * _3833));
                                float _5162 = isnan(0.0) ? _3977 : (isnan(_3977) ? 0.0 : max(_3977, 0.0));
                                float _3978 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
                                float _3982 = sqrt(_3967) * _3848.w;
                                float _3984 = 1.39999997615814208984375 / (_3982 + 1.39999997615814208984375);
                                float _3985 = _3984 * _3984;
                                float _3988 = ((1.0 - _3985) * dot(vec3(_3971, _3972, _3973), vec3(_1184, _1187, _1190))) + _3985;
                                float _3991 = _3982 * _3982;
                                float _3995 = (fma(_2317, _3875.z, fma(_2316, _3875.y, _3875.x * _2315)) + _3875.w) / _3936;
                                float _3996 = (fma(_2317, _3890.z, fma(_2316, _3890.y, _3890.x * _2315)) + _3890.w) / _3936;
                                float _4000 = 1.0 - dot(vec2(_3995, _3996), vec2(_3995, _3996));
                                float _5178 = isnan(0.0) ? _4000 : (isnan(_4000) ? 0.0 : max(_4000, 0.0));
                                float _4001 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
                                float _4002 = _4001 * (((isnan(0.0) ? _3988 : (isnan(_3988) ? 0.0 : max(_3988, 0.0))) * _3978) / ((_3991 * 0.699999988079071044921875) + 1.0));
                                float _4014 = exp2(log2(1.0 / ((_3991 * 3.5) + 5.0)) * 0.25);
                                float _4015 = 1.0 - _1259;
                                float _4022 = sqrt(1.0 - ((1.0 - (_4015 * _4015)) * (1.0 - (_4014 * _4014))));
                                float _4023 = _4022 * _4022;
                                float _4024 = _4023 * _4023;
                                float _4025 = _3971 - _3475;
                                float _4026 = _3972 - _3476;
                                float _4027 = _3973 - _3477;
                                float _4031 = inversesqrt(dot(vec3(_4025, _4026, _4027), vec3(_4025, _4026, _4027)));
                                float _4035 = dot(vec3(_1184, _1187, _1190), vec3((-0.0) - _3475, (-0.0) - _3476, (-0.0) - _3477));
                                float _5189 = isnan(0.0) ? _4035 : (isnan(_4035) ? 0.0 : max(_4035, 0.0));
                                float _4038 = isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0));
                                float _4039 = dot(vec3(_1184, _1187, _1190), vec3(_4031 * _4025, _4031 * _4026, _4031 * _4027));
                                float _5200 = isnan(0.0) ? _4039 : (isnan(_4039) ? 0.0 : max(_4039, 0.0));
                                float _4042 = isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0));
                                float _4046 = ((_4042 * _4042) * (_4024 + (-1.0))) + 1.0;
                                float _4047 = _3984 * _4023;
                                float _4048 = _4047 * _4047;
                                float _4054 = ((1.0 - _4048) * dot(vec3(_1184, _1187, _1190), vec3(_3971, _3972, _3973))) + _4048;
                                float _5211 = isnan(0.0) ? _4054 : (isnan(_4054) ? 0.0 : max(_4054, 0.0));
                                float _4055 = isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0));
                                float _4056 = 1.0 - _4023;
                                float _4066 = (0.5 / (((_4055 * ((_4038 * _4056) + _4023)) + 9.9999999392252902907785028219223e-09) + (((_4055 * _4056) + _4023) * _4038))) * _4055;
                                float _5222 = isnan(0.0) ? _4066 : (isnan(_4066) ? 0.0 : max(_4066, 0.0));
                                float _4076 = (_4001 * _3978) * (((_4024 * 3.1415927410125732421875) * (isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0)))) / ((_4046 * _4046) * ((_3991 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _4002 * _3848.y;
                                frontier_phi_78_pred_1 = _4002 * _3848.x;
                                frontier_phi_78_pred_2 = _4076 * _3860.z;
                                frontier_phi_78_pred_3 = _4076 * _3860.y;
                                frontier_phi_78_pred_4 = _4076 * _3860.x;
                                frontier_phi_78_pred_5 = _4002 * _3848.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4084 = frontier_phi_78_pred;
                            _4083 = frontier_phi_78_pred_1;
                            _4082 = frontier_phi_78_pred_2;
                            _4081 = frontier_phi_78_pred_3;
                            _4080 = frontier_phi_78_pred_4;
                            _4085 = frontier_phi_78_pred_5;
                            _3790 = _4083 + _3803;
                            _3791 = _4084 + _3804;
                            _3792 = _4085 + _3805;
                            _3787 = _4080 + _3800;
                            _3788 = _4081 + _3801;
                            _3789 = _4082 + _3802;
                            if (_3807 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3800 = _3787;
                                _3801 = _3788;
                                _3802 = _3789;
                                _3803 = _3790;
                                _3804 = _3791;
                                _3805 = _3792;
                                _3806 = _3807;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3792;
                        frontier_phi_72_pred_1 = _3791;
                        frontier_phi_72_pred_2 = _3790;
                        frontier_phi_72_pred_3 = _3789;
                        frontier_phi_72_pred_4 = _3788;
                        frontier_phi_72_pred_5 = _3787;
                    }
                    _3460 = frontier_phi_72_pred;
                    _3458 = frontier_phi_72_pred_1;
                    _3456 = frontier_phi_72_pred_2;
                    _3454 = frontier_phi_72_pred_3;
                    _3452 = frontier_phi_72_pred_4;
                    _3450 = frontier_phi_72_pred_5;
                    uint _3595 = _3594 + 1u;
                    if (_3595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3588 = _3450;
                        _3589 = _3452;
                        _3590 = _3454;
                        _3591 = _3456;
                        _3592 = _3458;
                        _3593 = _3460;
                        _3594 = _3595;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3460;
                frontier_phi_60_61_ladder_1 = _3458;
                frontier_phi_60_61_ladder_2 = _3454;
                frontier_phi_60_61_ladder_3 = _3452;
                frontier_phi_60_61_ladder_4 = _3450;
                frontier_phi_60_61_ladder_5 = _3456;
            }
            else
            {
                frontier_phi_60_61_ladder = _3346;
                frontier_phi_60_61_ladder_1 = _3344;
                frontier_phi_60_61_ladder_2 = _3340;
                frontier_phi_60_61_ladder_3 = _3338;
                frontier_phi_60_61_ladder_4 = _3336;
                frontier_phi_60_61_ladder_5 = _3342;
            }
            _3449 = frontier_phi_60_61_ladder_4;
            _3451 = frontier_phi_60_61_ladder_3;
            _3453 = frontier_phi_60_61_ladder_2;
            _3455 = frontier_phi_60_61_ladder_5;
            _3457 = frontier_phi_60_61_ladder_1;
            _3459 = frontier_phi_60_61_ladder;
        }
        float _3464 = isnan(1.0) ? _1243 : (isnan(_1243) ? 1.0 : min(_1243, 1.0));
        _3269 = (_3464 * _3455) + _2781;
        _3271 = (_3464 * _3457) + _2783;
        _3273 = (_3464 * _3459) + _2785;
        _3275 = ((_3449 * _1227) * _3464) + _3119;
        _3277 = ((_3451 * _1229) * _3464) + _3121;
        _3279 = ((_3453 * _1230) * _3464) + _3123;
    }
    else
    {
        _3269 = _2781;
        _3271 = _2783;
        _3273 = _2785;
        _3275 = _3119;
        _3277 = _3121;
        _3279 = _3123;
    }
    float _5238 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _5249 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _5260 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    uint _3299 = _275 + 6u;
    float _3307 = _1165 / cbSceneParam._m0[86u].x;
    float _3308 = _1166 / cbSceneParam._m0[86u].y;
    vec4 _3322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3307, _3308, (log2((isnan(cbSceneParam._m0[77u].w) ? _1100 : (isnan(_1100) ? cbSceneParam._m0[77u].w : min(_1100, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3324 = _3322.x;
    float _3325 = _3322.y;
    float _3326 = _3322.z;
    float _3327 = _3322.w;
    float _3399;
    float _3401;
    float _3403;
    float _3405;
    if (_1100 > cbSceneParam._m0[78u].w)
    {
        float _3361 = isnan(_1100) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1100 : min(cbSceneParam._m0[80u].w, _1100));
        float _3362 = _3361 / _1100;
        float _3373 = _3362 * _1150;
        float _3374 = _1151 * _3362;
        float _3375 = (-0.0) - _3374;
        float _3377 = _3362 * _1152;
        float _3379 = (cbSceneParam._m0[77u].w * _3375) / _3361;
        float _3380 = _3379 + cbSceneParam._m0[79u].w;
        float _3381 = cbSceneParam._m0[79u].w - _3374;
        float _3387 = sqrt(((_3373 * _3373) + (_3374 * _3374)) + (_3377 * _3377));
        float _3390 = (1.0 - (cbSceneParam._m0[77u].w / _3361)) * _3387;
        float _3395 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3397 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3550;
        if (abs((_3375 - _3379) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3550 = ((((_3380 > 0.0) ? exp2(_3395 * _3380) : (2.0 - exp2(_3397 * _3380))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3390;
        }
        else
        {
            float _3510 = 1.0 / cbSceneParam._m0[80u].x;
            float _3511 = isnan(_3381) ? _3380 : (isnan(_3380) ? _3381 : max(_3380, _3381));
            float _3512 = isnan(_3381) ? _3380 : (isnan(_3380) ? _3381 : min(_3380, _3381));
            float _3521 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : min(_3511, 0.0));
            float _3522 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : min(_3512, 0.0));
            _3550 = ((abs(_3387 / _3375) * cbSceneParam._m0[80u].y) * ((((_3521 - _3522) * 2.0) - ((exp2(_3395 * (isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0)))) - exp2(_3395 * (isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0))))) * _3510)) - ((exp2(_3397 * _3521) - exp2(_3397 * _3522)) * _3510))) + (_3390 * cbSceneParam._m0[80u].z);
        }
        vec4 _3552 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3307, _3308, 1.0), 0.0);
        float _3561 = exp2((_3550 * (-1.44269502162933349609375)) * (1.0 - _3552.w));
        float _3562 = log2(_3561);
        float _3578 = log2(_3327);
        _3399 = (exp2(_3578 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3562 * cbSceneParam._m0[78u].x)) * _3552.x) / cbSceneParam._m0[78u].x)) + _3324;
        _3401 = (exp2(_3578 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3562 * cbSceneParam._m0[78u].y)) * _3552.y) / cbSceneParam._m0[78u].y)) + _3325;
        _3403 = (exp2(_3578 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3562 * cbSceneParam._m0[78u].z)) * _3552.z) / cbSceneParam._m0[78u].z)) + _3326;
        _3405 = _3561 * _3327;
    }
    else
    {
        _3399 = _3324;
        _3401 = _3325;
        _3403 = _3326;
        _3405 = _3327;
    }
    float _3417 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3418 = _3417 == 3.0;
    float _3419 = log2(_3405);
    float _3426 = exp2(_3419 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0))) * (_3269 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1243))) + ((_3275 + ((isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0))) * _2049)) * cbPerFrame._m0[3u].x));
    float _3427 = exp2(_3419 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0))) * (_3271 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1243))) + ((_3277 + ((isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0))) * _2049)) * cbPerFrame._m0[3u].x));
    float _3428 = exp2(_3419 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5260 : (isnan(_5260) ? 1.0 : min(_5260, 1.0))) * (_3273 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1243))) + ((_3279 + ((isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0))) * _2049)) * cbPerFrame._m0[3u].x));
    float _3437 = (_3417 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3437 * (_3418 ? _3426 : (_3426 + (cbSceneParam._m0[72u].w * _3399)));
    SV_Target.y = _3437 * (_3418 ? _3427 : (_3427 + (cbSceneParam._m0[72u].w * _3401)));
    SV_Target.z = _3437 * (_3418 ? _3428 : (_3428 + (cbSceneParam._m0[72u].w * _3403)));
    SV_Target.w = cbInstanceData._m0[_3299].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3299].w;
}


