#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1435;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _342.x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[23u].w) + _395) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3783 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _420 = (_413 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _421 = (_413 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _422 = (_413 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _461 = _459.x;
    float _471 = dot(vec4(_461, _459.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _485 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _342.y) * 2.0) - ((((_461 - _471) * cbMtdParam._m0[23u].w) + _471) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3794 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _493 = (_486 * ((_439.x * cbMtdParam._m0[13u].x) - _420)) + _420;
    float _494 = (_486 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421;
    float _495 = (_486 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _274) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _275) + cbTextureTilingScale._m0[24u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _533 = _531.x;
    float _543 = dot(vec4(_533, _531.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _555 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _342.z) * 2.0) - ((((_533 - _543) * cbMtdParam._m0[23u].w) + _543) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3805 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _563 = (_556 * ((_514.x * cbMtdParam._m0[14u].x) - _493)) + _493;
    float _564 = (_556 * ((_514.y * cbMtdParam._m0[14u].y) - _494)) + _494;
    float _565 = (_556 * ((_514.z * cbMtdParam._m0[14u].z) - _495)) + _495;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _602 = _600.x;
    float _603 = _600.y;
    float _604 = _600.z;
    float _611 = ((_583.x - _602) * _413) + _602;
    float _612 = ((_583.y - _603) * _413) + _603;
    float _613 = ((_583.z - _604) * _413) + _604;
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _636 = ((_625.x - _611) * _486) + _611;
    float _637 = ((_625.y - _612) * _486) + _612;
    float _638 = ((_625.z - _613) * _486) + _613;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _274) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _275) + cbTextureTilingScale._m0[23u].w));
    float _663 = ((_650.z - _638) * _556) + _638;
    float _666 = ((((_650.x - _636) * _556) + _636) * 2.0) + (-1.0);
    float _668 = ((((_650.y - _637) * _556) + _637) * 2.0) + (-1.0);
    float _669 = dot(vec2(_666, _668), vec2(_666, _668));
    float _3816 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _674 = sqrt(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _715 = _713.x;
    float _716 = 1.0 - _715;
    float _731 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_715 - _716) * cbMtdParam._m0[24u].z) + _716) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3827 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _732 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _739 = (_732 * (cbMtdParam._m0[17u].x - _563)) + _563;
    float _740 = (_732 * (cbMtdParam._m0[17u].y - _564)) + _564;
    float _741 = (_732 * (cbMtdParam._m0[17u].z - _565)) + _565;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _769 = _767.x;
    float _787 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _769) * _413) + _769;
    float _804 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _787) * _486) + _787;
    float _822 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _274) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _275) + cbTextureTilingScale._m0[10u].w)).x - _804) * _556) + _804;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _822) * cbMtdParam._m0[19u].z) + _822;
    float _828 = _826 - (_826 * _732);
    float _832 = (cbMtdParam._m0[19u].w * (_688.z - _663)) + _663;
    vec4 _845 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _852 = (_845.x * 2.0) + (-1.0);
    float _853 = (_845.y * 2.0) + (-1.0);
    float _854 = dot(vec2(_852, _853), vec2(_852, _853));
    float _3838 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _862 = (_732 * (_845.z - _832)) + _832;
    float _865 = (((_688.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _666;
    float _866 = (((_688.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _668;
    float _878 = (((_852 - _865) + (cbMtdParam._m0[21u].x * _865)) * _732) + _865;
    float _879 = (((_853 - _866) + (cbMtdParam._m0[21u].x * _866)) * _732) + _866;
    float _880 = (_732 * (sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) - _674)) + _674;
    float _882 = cbMtdParam._m0[22u].x + _688.w;
    float _885 = fma(_880, _241 * NORMAL.x, fma(_879, _248 * TANGENT.x, (_234 * _226) * _878));
    float _888 = fma(_880, _241 * NORMAL.y, fma(_879, _248 * TANGENT.y, (_234 * _227) * _878));
    float _891 = fma(_880, _241 * NORMAL.z, fma(_879, _248 * TANGENT.z, (_234 * _228) * _878));
    float _895 = inversesqrt(dot(vec3(_885, _888, _891), vec3(_885, _888, _891)));
    float _896 = _895 * _885;
    float _897 = _895 * _888;
    float _898 = _895 * _891;
    float _3849 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _899 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _3871 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3882 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3893 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3904 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _904 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _918 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _968 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _958);
    float _969 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _958);
    float _970 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _958);
    float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
    float _975 = _968 * _974;
    float _976 = _969 * _974;
    float _977 = _970 * _974;
    float _983 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _984 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1002 = fma(_898, cbSceneParam._m0[5u].z, fma(_897, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _896));
    float _1005 = fma(_898, cbSceneParam._m0[6u].z, fma(_897, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _896));
    float _1008 = fma(_898, cbSceneParam._m0[7u].z, fma(_897, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _896));
    uint _1022 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1028 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_1022].x;
    float _1029 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_1022].y;
    float _1030 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_1022].z;
    float _3915 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _1034 = 1.0 - _904;
    float _1035 = _1031 * _1034;
    float _1036 = _1032 * _1034;
    float _1037 = _1033 * _1034;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _904;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _904;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _904;
    float _1045 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    float _1048 = _1044 + 0.039999999105930328369140625;
    vec4 _1057 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _983, cbSceneParam._m0[86u].y * _984));
    float _1061 = ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * TEXCOORD_5.w) * _1057.x;
    float _1062 = dot(vec3(_896, _897, _898), vec3(_975, _976, _977));
    float _1065 = _1062 * 2.0;
    float _1069 = (_1065 * _896) - _975;
    float _1070 = (_1065 * _897) - _976;
    float _1071 = (_1065 * _898) - _977;
    float _1075 = abs(dot(vec3(_975, _976, _977), vec3(_896, _897, _898)));
    float _3948 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1077 = sqrt(_899);
    float _1090 = exp2((_1077 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1077 * 3.0));
    float _1096 = (1.0 - _1090) * ((_1077 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1097 = _1090 * _1077;
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1434;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1159 = fma(_1133, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125));
        float _1163 = fma(_1133, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125));
        float _1167 = fma(_1133, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125));
        float _1192 = _1125 + _896;
        float _1193 = _1129 + _897;
        float _1194 = _1133 + _898;
        float _1204 = fma(_1194, cbModelParam._m0[26u].z, fma(_1193, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1192)) - _1159;
        float _1205 = fma(_1194, cbModelParam._m0[27u].z, fma(_1193, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1192)) - _1163;
        float _1206 = fma(_1194, cbModelParam._m0[28u].z, fma(_1193, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1192)) - _1167;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1159 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1163 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[34u].z) + ((((((_1167 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1262 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1228.x + (-0.5));
        float _1264 = _1262 * (_1228.y + (-0.5));
        float _1265 = _1262 * (_1228.z + (-0.5));
        float _1272 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1235.x + (-0.5));
        float _1274 = _1272 * (_1235.y + (-0.5));
        float _1275 = _1272 * (_1235.z + (-0.5));
        float _1282 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1242.x + (-0.5));
        float _1284 = _1282 * (_1242.y + (-0.5));
        float _1285 = _1282 * (_1242.z + (-0.5));
        float _1292 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1249.x + (-0.5));
        float _1294 = _1292 * (_1249.y + (-0.5));
        float _1295 = _1292 * (_1249.z + (-0.5));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = _1263 * 0.5;
        float _1300 = _1273 * 0.5;
        float _1301 = _1283 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1316 = (dot(vec3(_896, _897, _898), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1326 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3996 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1328 + 1.0))) + _1333) * _1296;
        float _1343 = _1264 * 0.5;
        float _1344 = _1274 * 0.5;
        float _1345 = _1284 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_896, _897, _898), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4029 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1370 + 1.0))) + _1375) * _1297;
        float _1385 = _1265 * 0.5;
        float _1386 = _1275 * 0.5;
        float _1387 = _1285 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_896, _897, _898), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4062 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1412 + 1.0))) + _1417) * _1298;
        _1434 = _1265;
        _1436 = _1264;
        _1437 = _1263;
        _1438 = _1275;
        _1439 = _1274;
        _1440 = _1273;
        _1441 = _1285;
        _1442 = _1284;
        _1443 = _1283;
        _1444 = _1298;
        _1445 = _1297;
        _1446 = _1296;
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
    }
    else
    {
        _1434 = _1435;
        _1436 = _1435;
        _1437 = _1435;
        _1438 = _1435;
        _1439 = _1435;
        _1440 = _1435;
        _1441 = _1435;
        _1442 = _1435;
        _1443 = _1435;
        _1444 = _1435;
        _1445 = _1435;
        _1446 = _1435;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1472 = fma(_1133, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125));
        float _1476 = fma(_1133, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125));
        float _1480 = fma(_1133, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125));
        float _1503 = _1125 + _896;
        float _1504 = _1129 + _897;
        float _1505 = _1133 + _898;
        float _1515 = fma(_1505, cbModelParam._m0[30u].z, fma(_1504, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1503)) - _1472;
        float _1516 = fma(_1505, cbModelParam._m0[31u].z, fma(_1504, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1503)) - _1476;
        float _1517 = fma(_1505, cbModelParam._m0[32u].z, fma(_1504, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1503)) - _1480;
        float _1521 = inversesqrt(dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517)));
        float _1534 = ((_1521 * _1515) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1472 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1521 * _1516) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1476 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1521 * _1517) / cbModelParam._m0[35u].z) + ((((((_1480 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        float _1571 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1538.x + (-0.5));
        float _1573 = _1571 * (_1538.y + (-0.5));
        float _1574 = _1571 * (_1538.z + (-0.5));
        float _1581 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1545.x + (-0.5));
        float _1583 = _1581 * (_1545.y + (-0.5));
        float _1584 = _1581 * (_1545.z + (-0.5));
        float _1591 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1552.x + (-0.5));
        float _1593 = _1591 * (_1552.y + (-0.5));
        float _1594 = _1591 * (_1552.z + (-0.5));
        float _1601 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1559.x + (-0.5));
        float _1603 = _1601 * (_1559.y + (-0.5));
        float _1604 = _1601 * (_1559.z + (-0.5));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = _1572 * 0.5;
        float _1609 = _1582 * 0.5;
        float _1610 = _1592 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_896, _897, _898), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4125 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1635 + 1.0))) + _1640) * _1605;
        float _1650 = _1573 * 0.5;
        float _1651 = _1583 * 0.5;
        float _1652 = _1593 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_896, _897, _898), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4158 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1677 + 1.0))) + _1682) * _1606;
        float _1692 = _1574 * 0.5;
        float _1693 = _1584 * 0.5;
        float _1694 = _1594 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_896, _897, _898), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4191 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1719 + 1.0))) + _1724) * _1607;
        _1741 = _1574;
        _1742 = _1573;
        _1743 = _1572;
        _1744 = _1584;
        _1745 = _1583;
        _1746 = _1582;
        _1747 = _1594;
        _1748 = _1593;
        _1749 = _1592;
        _1750 = _1607;
        _1751 = _1606;
        _1752 = _1605;
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
    }
    else
    {
        _1741 = _1435;
        _1742 = _1435;
        _1743 = _1435;
        _1744 = _1435;
        _1745 = _1435;
        _1746 = _1435;
        _1747 = _1435;
        _1748 = _1435;
        _1749 = _1435;
        _1750 = _1435;
        _1751 = _1435;
        _1752 = _1435;
        _1753 = 0.0;
        _1754 = 0.0;
        _1755 = 0.0;
    }
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1447)) + _1447;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1448)) + _1448;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1449)) + _1449;
    float _1788 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1765));
    float _1809 = _1069 * 0.5;
    float _1810 = _1070 * 0.5;
    float _1811 = _1071 * 0.5;
    float _1812 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1815 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1818 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1852;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1825 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1434, _1438, _1441, _1444));
        float _1829 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1436, _1439, _1442, _1445));
        float _1833 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1437, _1440, _1443, _1446));
        float _1840 = dot(vec4(cbModelParam._m0[39u]), vec4(_1809, _1810, _1811, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1863;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1854 = dot(vec4(cbModelParam._m0[40u]), vec4(_1809, _1810, _1811, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1854) ? 0.0 : (isnan(0.0) ? _1854 : max(0.0, _1854))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1867 = (_1863 * cbModelParam._m0[1u].x) + (_1852 * (1.0 - cbModelParam._m0[1u].x));
    float _1877 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _899);
    float _1878 = isnan(_1877) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1877 : min(cbModelParam._m0[25u].z, _1877));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1925 = fma(_1133, cbModelParam._m0[13u].z, fma(_1129, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1125)) + cbModelParam._m0[13u].w;
        float _1929 = fma(_1133, cbModelParam._m0[14u].z, fma(_1129, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1125)) + cbModelParam._m0[14u].w;
        float _1933 = fma(_1133, cbModelParam._m0[15u].z, fma(_1129, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1125)) + cbModelParam._m0[15u].w;
        float _1936 = fma(_1071, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069));
        float _1939 = fma(_1071, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069));
        float _1942 = fma(_1071, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069));
        float _1970;
        if (_1936 > 0.0)
        {
            _1970 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1970 = frontier_phi_14_12_ladder;
        }
        float _2194;
        if (_1939 > 0.0)
        {
            _2194 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2194 = frontier_phi_23_19_ladder;
        }
        float _2451;
        if (_1942 > 0.0)
        {
            _2451 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2451 = frontier_phi_35_30_ladder;
        }
        float _2453 = isnan(_2194) ? _1970 : (isnan(_1970) ? _2194 : min(_1970, _2194));
        float _2454 = isnan(_2451) ? _2453 : (isnan(_2453) ? _2451 : min(_2453, _2451));
        float _2458 = (_2454 * _1936) + _1925;
        float _2459 = (_2454 * _1939) + _1929;
        float _2460 = (_2454 * _1942) + _1933;
        float _2461 = _2454 * 9.9999997473787516355514526367188e-05;
        float _2463 = (-1.0) - _2461;
        float _2465 = _2461 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2460 > _2465) || ((_2460 < _2463) || ((_2459 > _2465) || ((_2459 < _2463) || ((_2458 < _2463) || (_2458 > _2465))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2460, cbModelParam._m0[9u].z, fma(_2459, cbModelParam._m0[9u].y, _2458 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2460, cbModelParam._m0[10u].z, fma(_2459, cbModelParam._m0[10u].y, _2458 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2460, cbModelParam._m0[11u].z, fma(_2459, cbModelParam._m0[11u].y, _2458 * cbModelParam._m0[11u].x))), _1878);
            frontier_phi_13_35_ladder = _2588.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2588.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2588.x * cbModelParam._m0[1u].y;
        }
        _1958 = frontier_phi_13_35_ladder_2;
        _1960 = frontier_phi_13_35_ladder_1;
        _1962 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1069, _1070, _1071), _1878);
        _1958 = _1946.x * cbModelParam._m0[1u].y;
        _1960 = _1946.y * cbModelParam._m0[1u].y;
        _1962 = _1946.z * cbModelParam._m0[1u].y;
    }
    float _1966 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _899);
    float _1967 = isnan(_1966) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1966 : min(cbModelParam._m0[25u].w, _1966));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2021 = fma(_1133, cbModelParam._m0[21u].z, fma(_1129, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1125)) + cbModelParam._m0[21u].w;
        float _2025 = fma(_1133, cbModelParam._m0[22u].z, fma(_1129, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1125)) + cbModelParam._m0[22u].w;
        float _2029 = fma(_1133, cbModelParam._m0[23u].z, fma(_1129, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1125)) + cbModelParam._m0[23u].w;
        float _2032 = fma(_1071, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069));
        float _2035 = fma(_1071, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069));
        float _2038 = fma(_1071, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069));
        float _2199;
        if (_2032 > 0.0)
        {
            _2199 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2199 = frontier_phi_25_21_ladder;
        }
        float _2478;
        if (_2035 > 0.0)
        {
            _2478 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2478 = frontier_phi_37_32_ladder;
        }
        float _2691;
        if (_2038 > 0.0)
        {
            _2691 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2691 = frontier_phi_46_43_ladder;
        }
        float _2693 = isnan(_2478) ? _2199 : (isnan(_2199) ? _2478 : min(_2199, _2478));
        float _2694 = isnan(_2691) ? _2693 : (isnan(_2693) ? _2691 : min(_2693, _2691));
        float _2698 = (_2694 * _2032) + _2021;
        float _2699 = (_2694 * _2035) + _2025;
        float _2700 = (_2694 * _2038) + _2029;
        float _2701 = _2694 * 9.9999997473787516355514526367188e-05;
        float _2702 = (-1.0) - _2701;
        float _2704 = _2701 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2700 > _2704) || ((_2700 < _2702) || ((_2699 > _2704) || ((_2699 < _2702) || ((_2698 < _2702) || (_2698 > _2704))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2899 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2700, cbModelParam._m0[17u].z, fma(_2699, cbModelParam._m0[17u].y, _2698 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2700, cbModelParam._m0[18u].z, fma(_2699, cbModelParam._m0[18u].y, _2698 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2700, cbModelParam._m0[19u].z, fma(_2699, cbModelParam._m0[19u].y, _2698 * cbModelParam._m0[19u].x))), _1967);
            frontier_phi_22_46_ladder = _2899.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2899.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2899.x * cbModelParam._m0[1u].z;
        }
        _2057 = frontier_phi_22_46_ladder_2;
        _2059 = frontier_phi_22_46_ladder_1;
        _2061 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1069, _1070, _1071), _1967);
        _2057 = _2041.x * cbModelParam._m0[1u].z;
        _2059 = _2041.y * cbModelParam._m0[1u].z;
        _2061 = _2041.z * cbModelParam._m0[1u].z;
    }
    float _2074 = (((_1096 * _1045) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2076 = (((_1096 * _1047) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2078 = (((_1096 * _1048) + _1097) * _1061) * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2081 = fma(_2078, cbSceneParam._m0[89u].z, fma(_2076, cbSceneParam._m0[89u].y, _2074 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2078, cbSceneParam._m0[90u].z, fma(_2076, cbSceneParam._m0[90u].y, _2074 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2078, cbSceneParam._m0[91u].z, fma(_2076, cbSceneParam._m0[91u].y, _2074 * cbSceneParam._m0[91u].x));
    vec4 _2095 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_983, _984));
    float _2097 = _2095.w;
    float _2109 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2097);
    float _2110 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2097);
    float _2111 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2097);
    uvec4 _2115 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2117 = _2115.x * 14u;
    uint _2118 = _2117 + 13u;
    float _2125 = _1061 + (-1.0);
    float _2130 = (cbLight._m0[_2118].x * _2125) + 1.0;
    float _2131 = (cbLight._m0[_2118].y * _2125) + 1.0;
    float _2132 = (cbLight._m0[_2118].z * _2125) + 1.0;
    float _2133 = (cbLight._m0[_2118].w * _2125) + 1.0;
    uint _2134 = _2117 + 5u;
    float _2140 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2144 = _2117 + 4u;
    float _2153 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    uint _2157 = _2117 | 1u;
    float _2168 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_896, _897, _898));
    float _2171 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_896, _897, _898));
    float _4327 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _4338 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2176 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * 0.3183098733425140380859375;
    float _2178 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.3183098733425140380859375;
    float _2185 = ((cbLight._m0[_2134].x * _2140) * _2178) + (((cbLight._m0[_2144].x * _2109) * _2153) * _2176);
    float _2186 = ((_2140 * cbLight._m0[_2134].y) * _2178) + (((cbLight._m0[_2144].y * _2110) * _2153) * _2176);
    float _2187 = ((_2140 * cbLight._m0[_2134].z) * _2178) + (((cbLight._m0[_2144].z * _2111) * _2153) * _2176);
    uvec4 _2191 = floatBitsToUint(cbLight._m0[_2117 + 12u]);
    bool _2193 = _2191.x == 0u;
    float _2204;
    float _2206;
    float _2208;
    if (_2193)
    {
        _2204 = _2185;
        _2206 = _2186;
        _2208 = _2187;
    }
    else
    {
        uint _2212 = _2117 + 6u;
        float _2228 = (dot(vec3(cbLight._m0[_2117 + 2u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4349 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2231 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2204 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _2185;
        _2206 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _2186;
        _2208 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _2187;
    }
    bool _2211 = _2191.y == 0u;
    float _2249;
    float _2251;
    float _2253;
    if (_2211)
    {
        _2249 = _2204;
        _2251 = _2206;
        _2253 = _2208;
    }
    else
    {
        uint _2422 = _2117 + 7u;
        float _2438 = (dot(vec3(cbLight._m0[_2117 + 3u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2439 = _2438 * _2438;
        float _4365 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2440 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2441 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2249 = (((cbLight._m0[_2422].x * 0.3183098733425140380859375) * _2440) * _2441) + _2204;
        _2251 = (((cbLight._m0[_2422].y * 0.3183098733425140380859375) * _2440) * _2441) + _2206;
        _2253 = (((cbLight._m0[_2422].z * 0.3183098733425140380859375) * _2440) * _2441) + _2208;
    }
    uint _2256 = _2117 + 8u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _899) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2117].x + _975;
    float _2272 = cbLight._m0[_2117].y + _976;
    float _2273 = cbLight._m0[_2117].z + _977;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2117].xyz));
    float _4381 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _4392 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2285 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2286 = dot(vec3(_896, _897, _898), vec3(_2278, _2279, _2280));
    float _4403 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2278, _2279, _2280));
    float _4414 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2270 * _2270;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2306 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
    float _2307 = 0.959999978542327880859375 - _1042;
    float _2309 = 0.959999978542327880859375 - _1043;
    float _2310 = 0.959999978542327880859375 - _1044;
    float _2317 = 1.0 - _2270;
    float _2328 = (0.5 / (((_2285 * ((_2284 * _2317) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2317) + _2270) * _2284))) * _2284;
    float _4425 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2330 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    uint _2344 = _2117 + 9u;
    float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _899) * 0.949999988079071044921875);
    float _2356 = _2355 * _2355;
    float _2357 = cbLight._m0[_2157].x + _975;
    float _2358 = cbLight._m0[_2157].y + _976;
    float _2359 = cbLight._m0[_2157].z + _977;
    float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
    float _2364 = _2363 * _2357;
    float _2365 = _2363 * _2358;
    float _2366 = _2363 * _2359;
    float _2367 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2157].xyz));
    float _4436 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2371 = dot(vec3(_896, _897, _898), vec3(_2364, _2365, _2366));
    float _4447 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2375 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2364, _2365, _2366));
    float _4458 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2379 = _2356 * _2356;
    float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
    float _2390 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
    float _2397 = 1.0 - _2356;
    float _2407 = (0.5 / (((_2285 * ((_2370 * _2397) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2397) + _2356) * _2370))) * _2370;
    float _4469 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2409 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
    float _2419 = (((((_2390 * _2307) + _1045) * cbLight._m0[_2344].x) * _2409) * _2140) + ((((cbLight._m0[_2256].x * _2109) * ((_2306 * _2307) + _1045)) * _2330) * _2153);
    float _2420 = (((((_2390 * _2309) + _1047) * cbLight._m0[_2344].y) * _2409) * _2140) + ((((cbLight._m0[_2256].y * _2110) * ((_2306 * _2309) + _1047)) * _2330) * _2153);
    float _2421 = (((((_2390 * _2310) + _1048) * cbLight._m0[_2344].z) * _2409) * _2140) + ((((cbLight._m0[_2256].z * _2111) * ((_2306 * _2310) + _1048)) * _2330) * _2153);
    float _2483;
    float _2485;
    float _2487;
    if (_2193)
    {
        _2483 = _2419;
        _2485 = _2420;
        _2487 = _2421;
    }
    else
    {
        uint _2489 = _2117 + 2u;
        uint _2493 = _2117 + 10u;
        float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _899) * 0.949999988079071044921875);
        float _2508 = _2507 * _2507;
        float _2509 = cbLight._m0[_2489].x + _975;
        float _2510 = cbLight._m0[_2489].y + _976;
        float _2511 = cbLight._m0[_2489].z + _977;
        float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
        float _2516 = _2515 * _2509;
        float _2517 = _2515 * _2510;
        float _2518 = _2515 * _2511;
        float _2519 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2489].xyz));
        float _4480 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2523 = dot(vec3(_896, _897, _898), vec3(_2516, _2517, _2518));
        float _4491 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2527 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2516, _2517, _2518));
        float _4502 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2531 = _2508 * _2508;
        float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
        float _2542 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
        float _2549 = 1.0 - _2508;
        float _2559 = (0.5 / (((_2285 * ((_2522 * _2549) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2549) + _2508) * _2522))) * _2522;
        float _4513 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2561 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
        float _2562 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2483 = (((((_2542 * _2307) + _1045) * cbLight._m0[_2493].x) * _2561) * _2562) + _2419;
        _2485 = (((((_2542 * _2309) + _1047) * cbLight._m0[_2493].y) * _2561) * _2562) + _2420;
        _2487 = (((((_2542 * _2310) + _1048) * cbLight._m0[_2493].z) * _2561) * _2562) + _2421;
    }
    float _2597;
    float _2599;
    float _2601;
    if (_2211)
    {
        _2597 = _2483;
        _2599 = _2485;
        _2601 = _2487;
    }
    else
    {
        uint _2608 = _2117 + 3u;
        uint _2612 = _2117 + 11u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _899) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _975;
        float _2629 = cbLight._m0[_2608].y + _976;
        float _2630 = cbLight._m0[_2608].z + _977;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2608].xyz));
        float _4529 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2642 = dot(vec3(_896, _897, _898), vec3(_2635, _2636, _2637));
        float _4540 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4551 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0);
        float _2668 = 1.0 - _2627;
        float _2678 = (0.5 / (((_2285 * ((_2641 * _2668) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2285 * _2668) + _2627) * _2641))) * _2641;
        float _4562 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2680 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2681 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2597 = (((((_2661 * _2307) + _1045) * cbLight._m0[_2612].x) * _2680) * _2681) + _2483;
        _2599 = (((((_2661 * _2309) + _1047) * cbLight._m0[_2612].y) * _2680) * _2681) + _2485;
        _2601 = (((((_2661 * _2310) + _1048) * cbLight._m0[_2612].z) * _2680) * _2681) + _2487;
    }
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_2115.y == 0u)
    {
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2756;
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2756;
        float _2759 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2756;
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.x;
        uint _2783 = uint((float(_2771.y) * floor(float(uint(cbSceneParam._m0[85u].y * _984) / _2772))) + floor(float(uint(cbSceneParam._m0[85u].x * _983) / _2772)));
        float _2793 = (log2(_2759 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2794 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        uint _2797 = uint(isnan(14.0) ? _2794 : (isnan(_2794) ? 14.0 : min(_2794, 14.0)));
        uvec4 _2802 = texelFetch(g_lightClusterGridBuffer, int(((_2797 << 2u) + (_2783 << 6u)) >> 2u));
        uint _2803 = _2802.x;
        uint _2804 = _2771.z;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((((1u << ((_2804 >> 4u) & 15u)) + 4294967295u) & _2803) == 0u) || ((_2804 & 240u) == 0u))
        {
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
        }
        else
        {
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            uint _3055 = 0u;
            uint _3064;
            bool _3065;
            for (;;)
            {
                _3064 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                _3065 = _3064 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3065)
                {
                    frontier_phi_61_pred = _3049;
                    frontier_phi_61_pred_1 = _3054;
                    frontier_phi_61_pred_2 = _3053;
                    frontier_phi_61_pred_3 = _3052;
                    frontier_phi_61_pred_4 = _3051;
                    frontier_phi_61_pred_5 = _3050;
                }
                else
                {
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    uint _3179;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3064;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    for (;;)
                    {
                        uint _3183 = uint(findLSB(_3179)) + (_3055 << 5u);
                        uint _3180 = (_3179 + 4294967295u) & _3179;
                        uint _3185 = _3183 * 48u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3205 = (_3183 * 48u) + 4u;
                        vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 3u)).x));
                        uint _3224 = (_3183 * 48u) + 8u;
                        vec3 _3235 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x));
                        float _3239 = _3199.x - _2757;
                        float _3240 = _3199.y - _2758;
                        float _3241 = _3199.z - _2759;
                        float _3242 = dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241));
                        float _3245 = inversesqrt(_3242);
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3249 = dot(vec3(_1002, _1005, _1008), vec3(_3246, _3247, _3248));
                        float _3254 = 1.0 - (_3242 * _3199.w);
                        float _4588 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3255 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3256 = sqrt(_3242) * _3218.w;
                        float _3259 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3249) + _3260;
                        float _3266 = _3256 * _3256;
                        float _3270 = ((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3255) / ((_3266 * 0.699999988079071044921875) + 1.0);
                        float _3274 = (-0.0) - _2757;
                        float _3275 = (-0.0) - _2758;
                        float _3276 = (-0.0) - _2759;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3291 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                        float _3292 = 1.0 - _1077;
                        float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                        float _3300 = _3299 * _3299;
                        float _3301 = _3300 * _3300;
                        float _3302 = _3281 + _3246;
                        float _3303 = _3282 + _3247;
                        float _3304 = _3283 + _3248;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3312 = dot(vec3(_1002, _1005, _1008), vec3(_3281, _3282, _3283));
                        float _4604 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3316 = dot(vec3(_1002, _1005, _1008), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                        float _4615 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                        float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                        float _3324 = _3259 * _3300;
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3249) + _3325;
                        float _4626 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3330 = 1.0 - _3300;
                        float _3340 = (0.5 / (((_3329 * ((_3315 * _3330) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3300) * _3315))) * _3329;
                        float _4637 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3351 = (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) / ((_3323 * _3323) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125))) * _3255;
                        _3108 = (_3270 * _3218.x) + _3176;
                        _3109 = (_3270 * _3218.y) + _3177;
                        _3110 = (_3270 * _3218.z) + _3178;
                        _3105 = (_3351 * _3235.x) + _3173;
                        _3106 = (_3351 * _3235.y) + _3174;
                        _3107 = (_3351 * _3235.z) + _3175;
                        if (_3180 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3180;
                        }
                    }
                    frontier_phi_61_pred = _3105;
                    frontier_phi_61_pred_1 = _3110;
                    frontier_phi_61_pred_2 = _3109;
                    frontier_phi_61_pred_3 = _3108;
                    frontier_phi_61_pred_4 = _3107;
                    frontier_phi_61_pred_5 = _3106;
                }
                _2905 = frontier_phi_61_pred;
                _2915 = frontier_phi_61_pred_1;
                _2913 = frontier_phi_61_pred_2;
                _2911 = frontier_phi_61_pred_3;
                _2909 = frontier_phi_61_pred_4;
                _2907 = frontier_phi_61_pred_5;
                uint _3056 = _3055 + 1u;
                if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3049 = _2905;
                    _3050 = _2907;
                    _3051 = _2909;
                    _3052 = _2911;
                    _3053 = _2913;
                    _3054 = _2915;
                    _3055 = _3056;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
        }
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.z;
        uint _2921 = (_2919 >> 8u) & 15u;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((4294967295u << _2921) & _2803) == 0u)
        {
            _3017 = _2904;
            _3019 = _2906;
            _3021 = _2908;
            _3023 = _2910;
            _3025 = _2912;
            _3027 = _2914;
        }
        else
        {
            float _3042 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
            float _3043 = _3042 * _2757;
            float _3044 = _3042 * _2758;
            float _3045 = _3042 * _2759;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2921 < ((_2919 >> 12u) & 15u))
            {
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3156 = _2904;
                float _3157 = _2906;
                float _3158 = _2908;
                float _3159 = _2910;
                float _3160 = _2912;
                float _3161 = _2914;
                uint _3162 = _2921;
                uint _3171;
                bool _3172;
                for (;;)
                {
                    _3171 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                    _3172 = _3171 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3172)
                    {
                        frontier_phi_67_pred = _3159;
                        frontier_phi_67_pred_1 = _3160;
                        frontier_phi_67_pred_2 = _3161;
                        frontier_phi_67_pred_3 = _3158;
                        frontier_phi_67_pred_4 = _3157;
                        frontier_phi_67_pred_5 = _3156;
                    }
                    else
                    {
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3369 = _3156;
                        float _3370 = _3157;
                        float _3371 = _3158;
                        float _3372 = _3159;
                        float _3373 = _3160;
                        float _3374 = _3161;
                        uint _3375 = _3171;
                        uint _3376;
                        vec4 _3401;
                        float _3402;
                        vec4 _3417;
                        vec3 _3429;
                        vec4 _3444;
                        vec4 _3459;
                        float _3505;
                        bool _3506;
                        for (;;)
                        {
                            uint _3386 = ((_3162 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3375));
                            _3376 = (_3375 + 4294967295u) & _3375;
                            uint _3388 = _3386 * 40u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            _3402 = _3401.w;
                            uint _3404 = (_3386 * 40u) + 4u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3386 * 40u) + 8u;
                            _3429 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x));
                            uint _3431 = (_3386 * 40u) + 16u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3386 * 40u) + 20u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3386 * 40u) + 24u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3480 = (_3386 * 40u) + 28u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3505 = fma(_2759, _3493.z, fma(_2758, _3493.y, _3493.x * _2757)) + _3493.w;
                            _3506 = !((fma(_2759, _3474.z, fma(_2758, _3474.y, _3474.x * _2757)) + _3474.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3506)
                            {
                                float _3533 = _3401.x - _2757;
                                float _3534 = _3401.y - _2758;
                                float _3535 = _3401.z - _2759;
                                float _3536 = dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535));
                                float _3539 = inversesqrt(_3536);
                                float _3540 = _3539 * _3533;
                                float _3541 = _3539 * _3534;
                                float _3542 = _3539 * _3535;
                                float _3546 = 1.0 - (_3536 / (_3402 * _3402));
                                float _4648 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3551 = sqrt(_3536) * _3417.w;
                                float _3553 = 1.39999997615814208984375 / (_3551 + 1.39999997615814208984375);
                                float _3554 = _3553 * _3553;
                                float _3557 = ((1.0 - _3554) * dot(vec3(_3540, _3541, _3542), vec3(_1002, _1005, _1008))) + _3554;
                                float _3560 = _3551 * _3551;
                                float _3564 = (fma(_2759, _3444.z, fma(_2758, _3444.y, _3444.x * _2757)) + _3444.w) / _3505;
                                float _3565 = (fma(_2759, _3459.z, fma(_2758, _3459.y, _3459.x * _2757)) + _3459.w) / _3505;
                                float _3569 = 1.0 - dot(vec2(_3564, _3565), vec2(_3564, _3565));
                                float _4664 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3571 = _3570 * (((isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0))) * _3547) / ((_3560 * 0.699999988079071044921875) + 1.0));
                                float _3583 = exp2(log2(1.0 / ((_3560 * 3.5) + 5.0)) * 0.25);
                                float _3584 = 1.0 - _1077;
                                float _3591 = sqrt(1.0 - ((1.0 - (_3584 * _3584)) * (1.0 - (_3583 * _3583))));
                                float _3592 = _3591 * _3591;
                                float _3593 = _3592 * _3592;
                                float _3594 = _3540 - _3043;
                                float _3595 = _3541 - _3044;
                                float _3596 = _3542 - _3045;
                                float _3600 = inversesqrt(dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596)));
                                float _3604 = dot(vec3(_1002, _1005, _1008), vec3((-0.0) - _3043, (-0.0) - _3044, (-0.0) - _3045));
                                float _4675 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3608 = dot(vec3(_1002, _1005, _1008), vec3(_3600 * _3594, _3600 * _3595, _3600 * _3596));
                                float _4686 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3615 = ((_3611 * _3611) * (_3593 + (-1.0))) + 1.0;
                                float _3616 = _3553 * _3592;
                                float _3617 = _3616 * _3616;
                                float _3623 = ((1.0 - _3617) * dot(vec3(_1002, _1005, _1008), vec3(_3540, _3541, _3542))) + _3617;
                                float _4697 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3625 = 1.0 - _3592;
                                float _3635 = (0.5 / (((_3624 * ((_3607 * _3625) + _3592)) + 9.9999999392252902907785028219223e-09) + (((_3624 * _3625) + _3592) * _3607))) * _3624;
                                float _4708 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3645 = (_3570 * _3547) * (((_3593 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3615 * _3615) * ((_3560 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3645 * _3429.x;
                                frontier_phi_73_pred_1 = _3645 * _3429.y;
                                frontier_phi_73_pred_2 = _3571 * _3417.z;
                                frontier_phi_73_pred_3 = _3571 * _3417.y;
                                frontier_phi_73_pred_4 = _3571 * _3417.x;
                                frontier_phi_73_pred_5 = _3645 * _3429.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3649 = frontier_phi_73_pred;
                            _3650 = frontier_phi_73_pred_1;
                            _3654 = frontier_phi_73_pred_2;
                            _3653 = frontier_phi_73_pred_3;
                            _3652 = frontier_phi_73_pred_4;
                            _3651 = frontier_phi_73_pred_5;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            if (_3376 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3376;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3359;
                        frontier_phi_67_pred_1 = _3360;
                        frontier_phi_67_pred_2 = _3361;
                        frontier_phi_67_pred_3 = _3358;
                        frontier_phi_67_pred_4 = _3357;
                        frontier_phi_67_pred_5 = _3356;
                    }
                    _3024 = frontier_phi_67_pred;
                    _3026 = frontier_phi_67_pred_1;
                    _3028 = frontier_phi_67_pred_2;
                    _3022 = frontier_phi_67_pred_3;
                    _3020 = frontier_phi_67_pred_4;
                    _3018 = frontier_phi_67_pred_5;
                    uint _3163 = _3162 + 1u;
                    if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3156 = _3018;
                        _3157 = _3020;
                        _3158 = _3022;
                        _3159 = _3024;
                        _3160 = _3026;
                        _3161 = _3028;
                        _3162 = _3163;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3026;
                frontier_phi_55_56_ladder_1 = _3028;
                frontier_phi_55_56_ladder_2 = _3024;
                frontier_phi_55_56_ladder_3 = _3022;
                frontier_phi_55_56_ladder_4 = _3020;
                frontier_phi_55_56_ladder_5 = _3018;
            }
            else
            {
                frontier_phi_55_56_ladder = _2912;
                frontier_phi_55_56_ladder_1 = _2914;
                frontier_phi_55_56_ladder_2 = _2910;
                frontier_phi_55_56_ladder_3 = _2908;
                frontier_phi_55_56_ladder_4 = _2906;
                frontier_phi_55_56_ladder_5 = _2904;
            }
            _3017 = frontier_phi_55_56_ladder_5;
            _3019 = frontier_phi_55_56_ladder_4;
            _3021 = frontier_phi_55_56_ladder_3;
            _3023 = frontier_phi_55_56_ladder_2;
            _3025 = frontier_phi_55_56_ladder;
            _3027 = frontier_phi_55_56_ladder_1;
        }
        float _3032 = isnan(1.0) ? _1061 : (isnan(_1061) ? 1.0 : min(_1061, 1.0));
        _2816 = (_3032 * _3023) + _2249;
        _2818 = (_3032 * _3025) + _2251;
        _2820 = (_3032 * _3027) + _2253;
        _2822 = ((_3017 * _1045) * _3032) + _2597;
        _2824 = ((_3019 * _1047) * _3032) + _2599;
        _2826 = ((_3021 * _1048) * _3032) + _2601;
    }
    else
    {
        _2816 = _2249;
        _2818 = _2251;
        _2820 = _2253;
        _2822 = _2597;
        _2824 = _2599;
        _2826 = _2601;
    }
    float _4724 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4735 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4746 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    uint _2846 = _254 + 6u;
    float _2854 = _983 / cbSceneParam._m0[86u].x;
    float _2855 = _984 / cbSceneParam._m0[86u].y;
    vec4 _2869 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, (log2((isnan(cbSceneParam._m0[77u].w) ? _918 : (isnan(_918) ? cbSceneParam._m0[77u].w : min(_918, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2871 = _2869.x;
    float _2872 = _2869.y;
    float _2873 = _2869.z;
    float _2874 = _2869.w;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_918 > cbSceneParam._m0[78u].w)
    {
        float _2929 = isnan(_918) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _918 : min(cbSceneParam._m0[80u].w, _918));
        float _2930 = _2929 / _918;
        float _2941 = _2930 * _968;
        float _2942 = _969 * _2930;
        float _2943 = (-0.0) - _2942;
        float _2945 = _2930 * _970;
        float _2947 = (cbSceneParam._m0[77u].w * _2943) / _2929;
        float _2948 = _2947 + cbSceneParam._m0[79u].w;
        float _2949 = cbSceneParam._m0[79u].w - _2942;
        float _2955 = sqrt(((_2941 * _2941) + (_2942 * _2942)) + (_2945 * _2945));
        float _2958 = (1.0 - (cbSceneParam._m0[77u].w / _2929)) * _2955;
        float _2963 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2965 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3118;
        if (abs((_2943 - _2947) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3118 = ((((_2948 > 0.0) ? exp2(_2963 * _2948) : (2.0 - exp2(_2965 * _2948))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2958;
        }
        else
        {
            float _3078 = 1.0 / cbSceneParam._m0[80u].x;
            float _3079 = isnan(_2949) ? _2948 : (isnan(_2948) ? _2949 : max(_2948, _2949));
            float _3080 = isnan(_2949) ? _2948 : (isnan(_2948) ? _2949 : min(_2948, _2949));
            float _3089 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : min(_3079, 0.0));
            float _3090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : min(_3080, 0.0));
            _3118 = ((abs(_2955 / _2943) * cbSceneParam._m0[80u].y) * ((((_3089 - _3090) * 2.0) - ((exp2(_2963 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0)))) - exp2(_2963 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))))) * _3078)) - ((exp2(_2965 * _3089) - exp2(_2965 * _3090)) * _3078))) + (_2958 * cbSceneParam._m0[80u].z);
        }
        vec4 _3120 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, 1.0), 0.0);
        float _3129 = exp2((_3118 * (-1.44269502162933349609375)) * (1.0 - _3120.w));
        float _3130 = log2(_3129);
        float _3146 = log2(_2874);
        _2967 = (exp2(_3146 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].x)) * _3120.x) / cbSceneParam._m0[78u].x)) + _2871;
        _2969 = (exp2(_3146 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].y)) * _3120.y) / cbSceneParam._m0[78u].y)) + _2872;
        _2971 = (exp2(_3146 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].z)) * _3120.z) / cbSceneParam._m0[78u].z)) + _2873;
        _2973 = _3129 * _2874;
    }
    else
    {
        _2967 = _2871;
        _2969 = _2872;
        _2971 = _2873;
        _2973 = _2874;
    }
    float _2985 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2986 = _2985 == 3.0;
    float _2987 = log2(_2973);
    float _2994 = exp2(_2987 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2816 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1061))) + ((_2822 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1867)) * cbPerFrame._m0[3u].x));
    float _2995 = exp2(_2987 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2818 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1061))) + ((_2824 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1867)) * cbPerFrame._m0[3u].x));
    float _2996 = exp2(_2987 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2820 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1061))) + ((_2826 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1867)) * cbPerFrame._m0[3u].x));
    float _3005 = (_2985 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3005 * (_2986 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2967)));
    SV_Target.y = _3005 * (_2986 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2969)));
    SV_Target.z = _3005 * (_2986 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2971)));
    SV_Target.w = cbInstanceData._m0[_2846].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2846].w;
}


