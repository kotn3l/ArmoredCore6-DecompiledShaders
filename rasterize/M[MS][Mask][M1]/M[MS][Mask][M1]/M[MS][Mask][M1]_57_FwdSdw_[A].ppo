#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1409;
float _4073;
float _4074;
float _4075;
float _4076;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4085 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _446 = (_439 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _447 = (_439 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _448 = (_439 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4096 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _525 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446);
    float _528 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447);
    float _531 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448);
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _563 = _561.x;
    float _564 = _561.y;
    float _565 = _561.z;
    float _572 = ((_544.x - _563) * _439) + _563;
    float _573 = ((_544.y - _564) * _439) + _564;
    float _574 = ((_544.z - _565) * _439) + _565;
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _599 = ((_586.z - _574) * _512) + _574;
    float _602 = ((((_586.x - _572) * _512) + _572) * 2.0) + (-1.0);
    float _604 = ((((_586.y - _573) * _512) + _573) * 2.0) + (-1.0);
    float _605 = dot(vec2(_602, _604), vec2(_602, _604));
    float _4107 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _610 = sqrt(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _636 = (((_624.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _602;
    float _637 = (((_624.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _604;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _651 = _649.x;
    float _652 = 1.0 - _651;
    float _681 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_651 - _652) * cbMtdParam._m0[24u].w) + _652) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4118 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _690 = ((((cbMtdParam._m0[10u].x - _525) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _682) + _525;
    float _691 = ((((cbMtdParam._m0[10u].y - _528) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _682) + _528;
    float _692 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _531)) * _682) + _531;
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _720 = _718.x;
    float _737 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _720) * _439) + _720;
    float _755 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _737) * _512) + _737;
    float _759 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _755) * cbMtdParam._m0[19u].z) + _755;
    float _761 = _759 - (_759 * _682);
    float _765 = (cbMtdParam._m0[19u].w * (_624.z - _599)) + _599;
    float _769 = ((cbMtdParam._m0[23u].x - _765) * _682) + _765;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _794 = (_788.x * 2.0) + (-1.0);
    float _795 = (_788.y * 2.0) + (-1.0);
    float _796 = dot(vec2(_794, _795), vec2(_794, _795));
    float _4129 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _812 = (_682 * (((cbMtdParam._m0[22u].z * _636) - _636) + _794)) + _636;
    float _813 = (_682 * (((cbMtdParam._m0[22u].z * _637) - _637) + _795)) + _637;
    float _814 = (_682 * (sqrt(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) - _610)) + _610;
    float _816 = cbMtdParam._m0[22u].x + _624.w;
    float _819 = fma(_814, _250 * NORMAL.x, fma(_813, _257 * TANGENT.x, (_243 * _235) * _812));
    float _822 = fma(_814, _250 * NORMAL.y, fma(_813, _257 * TANGENT.y, (_243 * _236) * _812));
    float _825 = fma(_814, _250 * NORMAL.z, fma(_813, _257 * TANGENT.z, (_243 * _237) * _812));
    float _829 = inversesqrt(dot(vec3(_819, _822, _825), vec3(_819, _822, _825)));
    float _830 = _829 * _819;
    float _831 = _829 * _822;
    float _832 = _829 * _825;
    float _4140 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _833 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4162 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4173 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4184 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4195 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _838 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _852 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _902 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _892);
    float _903 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _892);
    float _904 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _892);
    float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
    float _909 = _902 * _908;
    float _910 = _903 * _908;
    float _911 = _904 * _908;
    vec4 _916 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _918 = _916.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1090 = sqrt(((_902 * _902) + (_903 * _903)) + (_904 * _904));
        float _1096 = (cbMatDynParam._m0[5u].x * _1090) + cbMatDynParam._m0[5u].y;
        float _4206 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1101 = (cbMatDynParam._m0[5u].z * _1090) + cbMatDynParam._m0[5u].w;
        float _4217 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) - _1097)) + _1097) < ((_918 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _929 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _930 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _948 = fma(_832, cbSceneParam._m0[5u].z, fma(_831, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _830));
    float _951 = fma(_832, cbSceneParam._m0[6u].z, fma(_831, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _830));
    float _954 = fma(_832, cbSceneParam._m0[7u].z, fma(_831, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _830));
    uint _967 = _263 + 9u;
    uint _968 = _967 + uint(cbMatDynParam._m0[0u].w);
    float _974 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_968].x;
    float _975 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_968].y;
    float _976 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_968].z;
    float _4228 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _980 = 1.0 - _838;
    float _981 = _977 * _980;
    float _982 = _978 * _980;
    float _983 = _979 * _980;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _838;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _838;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _838;
    float _991 = _988 + 0.039999999105930328369140625;
    float _993 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    vec4 _1003 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _929, cbSceneParam._m0[86u].y * _930));
    float _1007 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * TEXCOORD_5.w) * _1003.x;
    float _1008 = dot(vec3(_830, _831, _832), vec3(_909, _910, _911));
    float _1011 = _1008 * 2.0;
    float _1015 = (_1011 * _830) - _909;
    float _1016 = (_1011 * _831) - _910;
    float _1017 = (_1011 * _832) - _911;
    float _1021 = abs(dot(vec3(_909, _910, _911), vec3(_830, _831, _832)));
    float _4261 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1023 = sqrt(_833);
    float _1036 = exp2((_1023 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1023 * 3.0));
    float _1042 = (1.0 - _1036) * ((_1023 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1043 = _1036 * _1023;
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1408;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1133 = fma(_1079, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071));
        float _1137 = fma(_1079, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071));
        float _1141 = fma(_1079, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071));
        float _1166 = _1071 + _830;
        float _1167 = _1075 + _831;
        float _1168 = _1079 + _832;
        float _1178 = fma(_1168, cbModelParam._m0[26u].z, fma(_1167, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166)) - _1133;
        float _1179 = fma(_1168, cbModelParam._m0[27u].z, fma(_1167, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166)) - _1137;
        float _1180 = fma(_1168, cbModelParam._m0[28u].z, fma(_1167, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166)) - _1141;
        float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
        float _1197 = ((_1184 * _1178) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1133 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1184 * _1179) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1137 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1184 * _1180) / cbModelParam._m0[34u].z) + ((((((_1141 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        float _1236 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1202.x + (-0.5));
        float _1238 = _1236 * (_1202.y + (-0.5));
        float _1239 = _1236 * (_1202.z + (-0.5));
        float _1246 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1209.x + (-0.5));
        float _1248 = _1246 * (_1209.y + (-0.5));
        float _1249 = _1246 * (_1209.z + (-0.5));
        float _1256 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1216.x + (-0.5));
        float _1258 = _1256 * (_1216.y + (-0.5));
        float _1259 = _1256 * (_1216.z + (-0.5));
        float _1266 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1223.x + (-0.5));
        float _1268 = _1266 * (_1223.y + (-0.5));
        float _1269 = _1266 * (_1223.z + (-0.5));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = _1237 * 0.5;
        float _1274 = _1247 * 0.5;
        float _1275 = _1257 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1290 = (dot(vec3(_830, _831, _832), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1300 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1302 + 1.0))) + _1307) * _1270;
        float _1317 = _1238 * 0.5;
        float _1318 = _1248 * 0.5;
        float _1319 = _1258 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_830, _831, _832), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4342 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1344 + 1.0))) + _1349) * _1271;
        float _1359 = _1239 * 0.5;
        float _1360 = _1249 * 0.5;
        float _1361 = _1259 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_830, _831, _832), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4375 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1386 + 1.0))) + _1391) * _1272;
        _1408 = _1239;
        _1410 = _1238;
        _1411 = _1237;
        _1412 = _1249;
        _1413 = _1248;
        _1414 = _1247;
        _1415 = _1259;
        _1416 = _1258;
        _1417 = _1257;
        _1418 = _1272;
        _1419 = _1271;
        _1420 = _1270;
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
    }
    else
    {
        _1408 = _1409;
        _1410 = _1409;
        _1411 = _1409;
        _1412 = _1409;
        _1413 = _1409;
        _1414 = _1409;
        _1415 = _1409;
        _1416 = _1409;
        _1417 = _1409;
        _1418 = _1409;
        _1419 = _1409;
        _1420 = _1409;
        _1421 = 0.0;
        _1422 = 0.0;
        _1423 = 0.0;
    }
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1450 = fma(_1079, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071));
        float _1454 = fma(_1079, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071));
        float _1458 = fma(_1079, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071));
        float _1481 = _1071 + _830;
        float _1482 = _1075 + _831;
        float _1483 = _1079 + _832;
        float _1493 = fma(_1483, cbModelParam._m0[30u].z, fma(_1482, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1481)) - _1450;
        float _1494 = fma(_1483, cbModelParam._m0[31u].z, fma(_1482, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1481)) - _1454;
        float _1495 = fma(_1483, cbModelParam._m0[32u].z, fma(_1482, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1481)) - _1458;
        float _1499 = inversesqrt(dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495)));
        float _1512 = ((_1499 * _1493) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1450 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1499 * _1494) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1454 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1499 * _1495) / cbModelParam._m0[35u].z) + ((((((_1458 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        float _1549 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1516.x + (-0.5));
        float _1551 = _1549 * (_1516.y + (-0.5));
        float _1552 = _1549 * (_1516.z + (-0.5));
        float _1559 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1523.x + (-0.5));
        float _1561 = _1559 * (_1523.y + (-0.5));
        float _1562 = _1559 * (_1523.z + (-0.5));
        float _1569 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1530.x + (-0.5));
        float _1571 = _1569 * (_1530.y + (-0.5));
        float _1572 = _1569 * (_1530.z + (-0.5));
        float _1579 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1537.x + (-0.5));
        float _1581 = _1579 * (_1537.y + (-0.5));
        float _1582 = _1579 * (_1537.z + (-0.5));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = _1550 * 0.5;
        float _1587 = _1560 * 0.5;
        float _1588 = _1570 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_830, _831, _832), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4438 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1613 + 1.0))) + _1618) * _1583;
        float _1628 = _1551 * 0.5;
        float _1629 = _1561 * 0.5;
        float _1630 = _1571 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_830, _831, _832), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4471 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1655 + 1.0))) + _1660) * _1584;
        float _1670 = _1552 * 0.5;
        float _1671 = _1562 * 0.5;
        float _1672 = _1572 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_830, _831, _832), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4504 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1697 + 1.0))) + _1702) * _1585;
        _1719 = _1552;
        _1720 = _1551;
        _1721 = _1550;
        _1722 = _1562;
        _1723 = _1561;
        _1724 = _1560;
        _1725 = _1572;
        _1726 = _1571;
        _1727 = _1570;
        _1728 = _1585;
        _1729 = _1584;
        _1730 = _1583;
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
    }
    else
    {
        _1719 = _1409;
        _1720 = _1409;
        _1721 = _1409;
        _1722 = _1409;
        _1723 = _1409;
        _1724 = _1409;
        _1725 = _1409;
        _1726 = _1409;
        _1727 = _1409;
        _1728 = _1409;
        _1729 = _1409;
        _1730 = _1409;
        _1731 = 0.0;
        _1732 = 0.0;
        _1733 = 0.0;
    }
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1421)) + _1421;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1422)) + _1422;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1423)) + _1423;
    float _1766 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1743));
    float _1787 = _1015 * 0.5;
    float _1788 = _1016 * 0.5;
    float _1789 = _1017 * 0.5;
    float _1790 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1793 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1796 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1830;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1803 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1408, _1412, _1415, _1418));
        float _1807 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1410, _1413, _1416, _1419));
        float _1811 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1818 = dot(vec4(cbModelParam._m0[39u]), vec4(_1787, _1788, _1789, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1841;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1832 = dot(vec4(cbModelParam._m0[40u]), vec4(_1787, _1788, _1789, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1845 = (_1841 * cbModelParam._m0[1u].x) + (_1830 * (1.0 - cbModelParam._m0[1u].x));
    float _1855 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _833);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1855 : min(cbModelParam._m0[25u].z, _1855));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1905 = fma(_1079, cbModelParam._m0[13u].z, fma(_1075, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071)) + cbModelParam._m0[13u].w;
        float _1909 = fma(_1079, cbModelParam._m0[14u].z, fma(_1075, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071)) + cbModelParam._m0[14u].w;
        float _1913 = fma(_1079, cbModelParam._m0[15u].z, fma(_1075, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071)) + cbModelParam._m0[15u].w;
        float _1916 = fma(_1017, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015));
        float _1919 = fma(_1017, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015));
        float _1922 = fma(_1017, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015));
        float _1950;
        if (_1916 > 0.0)
        {
            _1950 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1950 = frontier_phi_17_15_ladder;
        }
        float _2122;
        if (_1919 > 0.0)
        {
            _2122 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2122 = frontier_phi_26_22_ladder;
        }
        float _2417;
        if (_1922 > 0.0)
        {
            _2417 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2417 = frontier_phi_38_33_ladder;
        }
        float _2419 = isnan(_2122) ? _1950 : (isnan(_1950) ? _2122 : min(_1950, _2122));
        float _2420 = isnan(_2417) ? _2419 : (isnan(_2419) ? _2417 : min(_2419, _2417));
        float _2424 = (_2420 * _1916) + _1905;
        float _2425 = (_2420 * _1919) + _1909;
        float _2426 = (_2420 * _1922) + _1913;
        float _2427 = _2420 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2427;
        float _2431 = _2427 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 > _2431) || ((_2425 < _2429) || ((_2424 < _2429) || (_2424 > _2431))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2426, cbModelParam._m0[9u].z, fma(_2425, cbModelParam._m0[9u].y, _2424 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2426, cbModelParam._m0[10u].z, fma(_2425, cbModelParam._m0[10u].y, _2424 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2426, cbModelParam._m0[11u].z, fma(_2425, cbModelParam._m0[11u].y, _2424 * cbModelParam._m0[11u].x))), _1856);
            frontier_phi_16_38_ladder = _2571.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2571.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2571.x * cbModelParam._m0[1u].y;
        }
        _1938 = frontier_phi_16_38_ladder_2;
        _1940 = frontier_phi_16_38_ladder_1;
        _1942 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1015, _1016, _1017), _1856);
        _1938 = _1926.x * cbModelParam._m0[1u].y;
        _1940 = _1926.y * cbModelParam._m0[1u].y;
        _1942 = _1926.z * cbModelParam._m0[1u].y;
    }
    float _1946 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _833);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1946 : min(cbModelParam._m0[25u].w, _1946));
    float _2037;
    float _2039;
    float _2041;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2001 = fma(_1079, cbModelParam._m0[21u].z, fma(_1075, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071)) + cbModelParam._m0[21u].w;
        float _2005 = fma(_1079, cbModelParam._m0[22u].z, fma(_1075, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071)) + cbModelParam._m0[22u].w;
        float _2009 = fma(_1079, cbModelParam._m0[23u].z, fma(_1075, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071)) + cbModelParam._m0[23u].w;
        float _2012 = fma(_1017, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015));
        float _2015 = fma(_1017, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015));
        float _2018 = fma(_1017, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015));
        float _2127;
        if (_2012 > 0.0)
        {
            _2127 = abs((1.0 - _2001) / _2012);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2001 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2127 = frontier_phi_28_24_ladder;
        }
        float _2444;
        if (_2015 > 0.0)
        {
            _2444 = abs((1.0 - _2005) / _2015);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2005 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2444 = frontier_phi_40_35_ladder;
        }
        float _2782;
        if (_2018 > 0.0)
        {
            _2782 = abs((1.0 - _2009) / _2018);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2009 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2782 = frontier_phi_50_47_ladder;
        }
        float _2784 = isnan(_2444) ? _2127 : (isnan(_2127) ? _2444 : min(_2127, _2444));
        float _2785 = isnan(_2782) ? _2784 : (isnan(_2784) ? _2782 : min(_2784, _2782));
        float _2789 = (_2785 * _2012) + _2001;
        float _2790 = (_2785 * _2015) + _2005;
        float _2791 = (_2785 * _2018) + _2009;
        float _2792 = _2785 * 9.9999997473787516355514526367188e-05;
        float _2793 = (-1.0) - _2792;
        float _2795 = _2792 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2791 > _2795) || ((_2791 < _2793) || ((_2790 > _2795) || ((_2790 < _2793) || ((_2789 < _2793) || (_2789 > _2795))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2791, cbModelParam._m0[17u].z, fma(_2790, cbModelParam._m0[17u].y, _2789 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2791, cbModelParam._m0[18u].z, fma(_2790, cbModelParam._m0[18u].y, _2789 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2791, cbModelParam._m0[19u].z, fma(_2790, cbModelParam._m0[19u].y, _2789 * cbModelParam._m0[19u].x))), _1947);
            frontier_phi_25_50_ladder = _2913.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2913.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2913.x * cbModelParam._m0[1u].z;
        }
        _2037 = frontier_phi_25_50_ladder_2;
        _2039 = frontier_phi_25_50_ladder_1;
        _2041 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1015, _1016, _1017), _1947);
        _2037 = _2021.x * cbModelParam._m0[1u].z;
        _2039 = _2021.y * cbModelParam._m0[1u].z;
        _2041 = _2021.z * cbModelParam._m0[1u].z;
    }
    float _2054 = (((_1042 * _991) + _1043) * _1007) * ((cbModelParam._m0[1u].w * (_2037 - _1938)) + _1938);
    float _2056 = (((_1042 * _993) + _1043) * _1007) * ((cbModelParam._m0[1u].w * (_2039 - _1940)) + _1940);
    float _2058 = (((_1042 * _994) + _1043) * _1007) * ((cbModelParam._m0[1u].w * (_2041 - _1942)) + _1942);
    float _2061 = fma(_2058, cbSceneParam._m0[89u].z, fma(_2056, cbSceneParam._m0[89u].y, _2054 * cbSceneParam._m0[89u].x));
    float _2064 = fma(_2058, cbSceneParam._m0[90u].z, fma(_2056, cbSceneParam._m0[90u].y, _2054 * cbSceneParam._m0[90u].x));
    float _2067 = fma(_2058, cbSceneParam._m0[91u].z, fma(_2056, cbSceneParam._m0[91u].y, _2054 * cbSceneParam._m0[91u].x));
    float _2101 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2109 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2113 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2114 = _2101 / _2113;
    float _2115 = _2105 / _2113;
    float _2116 = _2109 / _2113;
    float _2263;
    float _2264;
    float _2265;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2143 = ((uint(_2116 > cbSceneParam._m0[59u].y) + uint(_2116 > cbSceneParam._m0[59u].x)) + uint(_2116 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2144 = _2143 + 43u;
        uint _2152 = _2143 + 44u;
        uint _2160 = _2143 + 45u;
        uint _2168 = _2143 + 46u;
        float _2179 = fma(_2113, cbSceneParam._m0[_2144].w, fma(_2109, cbSceneParam._m0[_2144].z, fma(_2105, cbSceneParam._m0[_2144].y, _2101 * cbSceneParam._m0[_2144].x)));
        float _2183 = fma(_2113, cbSceneParam._m0[_2152].w, fma(_2109, cbSceneParam._m0[_2152].z, fma(_2105, cbSceneParam._m0[_2152].y, _2101 * cbSceneParam._m0[_2152].x)));
        float _2191 = fma(_2113, cbSceneParam._m0[_2168].w, fma(_2109, cbSceneParam._m0[_2168].z, fma(_2105, cbSceneParam._m0[_2168].y, _2101 * cbSceneParam._m0[_2168].x)));
        float _2196 = cbSceneParam._m0[33u].z * _2191;
        float _2198 = cbSceneParam._m0[33u].w * _2191;
        float _2201 = fma(_2113, cbSceneParam._m0[_2160].w, fma(_2109, cbSceneParam._m0[_2160].z, fma(_2105, cbSceneParam._m0[_2160].y, _2101 * cbSceneParam._m0[_2160].x))) / _2191;
        float _2249 = (cbSceneParam._m0[33u].x - sqrt(((_2115 * _2115) + (_2114 * _2114)) + (_2116 * _2116))) * cbSceneParam._m0[33u].y;
        float _4630 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2256 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2196 + _2179) / _2191, (_2198 + _2183) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 + _2179) / _2191, (_2183 - _2196) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 - _2196) / _2191, (_2183 - _2198) / _2191), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 - _2198) / _2191, (_2196 + _2183) / _2191), _2201), 0.0)).x), vec4(0.25)));
        _2263 = 1.0 - (_2256 * cbSceneParam._m0[34u].x);
        _2264 = 1.0 - (_2256 * cbSceneParam._m0[34u].y);
        _2265 = 1.0 - (_2256 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2263 = 1.0;
        _2264 = 1.0;
        _2265 = 1.0;
    }
    float _2329;
    float _2331;
    float _2333;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2317 = fma(_2113, cbSceneParam._m0[63u].w, fma(_2109, cbSceneParam._m0[63u].z, fma(_2105, cbSceneParam._m0[63u].y, _2101 * cbSceneParam._m0[63u].x)));
        float _2318 = fma(_2113, cbSceneParam._m0[60u].w, fma(_2109, cbSceneParam._m0[60u].z, fma(_2105, cbSceneParam._m0[60u].y, _2101 * cbSceneParam._m0[60u].x))) / _2317;
        float _2319 = fma(_2113, cbSceneParam._m0[61u].w, fma(_2109, cbSceneParam._m0[61u].z, fma(_2105, cbSceneParam._m0[61u].y, _2101 * cbSceneParam._m0[61u].x))) / _2317;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2318 >= cbSceneParam._m0[64u].x) && (_2319 >= cbSceneParam._m0[64u].y)) && (_2318 <= cbSceneParam._m0[64u].z)) && (_2319 <= cbSceneParam._m0[64u].w))
        {
            float _2457 = fma(_2113, cbSceneParam._m0[62u].w, fma(_2109, cbSceneParam._m0[62u].z, fma(_2105, cbSceneParam._m0[62u].y, _2101 * cbSceneParam._m0[62u].x))) / _2317;
            float _2461 = isnan(cbSceneParam._m0[41u].w) ? _2457 : (isnan(_2457) ? cbSceneParam._m0[41u].w : max(_2457, cbSceneParam._m0[41u].w));
            float _2504 = (cbSceneParam._m0[33u].x - sqrt(((_2115 * _2115) + (_2114 * _2114)) + (_2116 * _2116))) * cbSceneParam._m0[33u].y;
            float _4646 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
            float _2511 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2318, cbSceneParam._m0[33u].w + _2319), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2318, _2319 - cbSceneParam._m0[33u].z), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2318 - cbSceneParam._m0[33u].z, _2319 - cbSceneParam._m0[33u].w), _2461), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2318 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2319), _2461), 0.0)).x), vec4(0.25)));
            float _2515 = 1.0 - (_2511 * cbSceneParam._m0[34u].x);
            float _2516 = 1.0 - (_2511 * cbSceneParam._m0[34u].y);
            float _2517 = 1.0 - (_2511 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2517) ? _2265 : (isnan(_2265) ? _2517 : min(_2265, _2517));
            frontier_phi_37_36_ladder_1 = isnan(_2516) ? _2264 : (isnan(_2264) ? _2516 : min(_2264, _2516));
            frontier_phi_37_36_ladder_2 = isnan(_2515) ? _2263 : (isnan(_2263) ? _2515 : min(_2263, _2515));
        }
        else
        {
            frontier_phi_37_36_ladder = _2265;
            frontier_phi_37_36_ladder_1 = _2264;
            frontier_phi_37_36_ladder_2 = _2263;
        }
        _2329 = frontier_phi_37_36_ladder_2;
        _2331 = frontier_phi_37_36_ladder_1;
        _2333 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2329 = _2263;
        _2331 = _2264;
        _2333 = _2265;
    }
    uvec4 _2338 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2340 = _2338.x * 14u;
    uint _2341 = _2340 + 13u;
    float _2348 = _1007 + (-1.0);
    float _2353 = (cbLight._m0[_2341].x * _2348) + 1.0;
    float _2354 = (cbLight._m0[_2341].y * _2348) + 1.0;
    float _2355 = (cbLight._m0[_2341].z * _2348) + 1.0;
    float _2356 = (cbLight._m0[_2341].w * _2348) + 1.0;
    uint _2357 = _2340 + 5u;
    float _2363 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
    uint _2367 = _2340 + 4u;
    float _2376 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
    uint _2380 = _2340 | 1u;
    float _2391 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_830, _831, _832));
    float _2394 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_830, _831, _832));
    float _4682 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _4693 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2399 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2401 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * 0.3183098733425140380859375;
    float _2408 = ((cbLight._m0[_2357].x * _2363) * _2401) + (((cbLight._m0[_2367].x * _2329) * _2376) * _2399);
    float _2409 = ((_2363 * cbLight._m0[_2357].y) * _2401) + (((cbLight._m0[_2367].y * _2331) * _2376) * _2399);
    float _2410 = ((_2363 * cbLight._m0[_2357].z) * _2401) + (((cbLight._m0[_2367].z * _2333) * _2376) * _2399);
    uvec4 _2414 = floatBitsToUint(cbLight._m0[_2340 + 12u]);
    bool _2416 = _2414.x == 0u;
    float _2518;
    float _2520;
    float _2522;
    if (_2416)
    {
        _2518 = _2408;
        _2520 = _2409;
        _2522 = _2410;
    }
    else
    {
        uint _2526 = _2340 + 6u;
        float _2542 = (dot(vec3(cbLight._m0[_2340 + 2u].xyz), vec3(_830, _831, _832)) * 0.5) + 0.5;
        float _2543 = _2542 * _2542;
        float _4704 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2544 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2545 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2518 = (((cbLight._m0[_2526].x * 0.3183098733425140380859375) * _2544) * _2545) + _2408;
        _2520 = (((cbLight._m0[_2526].y * 0.3183098733425140380859375) * _2544) * _2545) + _2409;
        _2522 = (((cbLight._m0[_2526].z * 0.3183098733425140380859375) * _2544) * _2545) + _2410;
    }
    bool _2525 = _2414.y == 0u;
    float _2580;
    float _2582;
    float _2584;
    if (_2525)
    {
        _2580 = _2518;
        _2582 = _2520;
        _2584 = _2522;
    }
    else
    {
        uint _2753 = _2340 + 7u;
        float _2769 = (dot(vec3(cbLight._m0[_2340 + 3u].xyz), vec3(_830, _831, _832)) * 0.5) + 0.5;
        float _2770 = _2769 * _2769;
        float _4720 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2771 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2772 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2580 = (((cbLight._m0[_2753].x * 0.3183098733425140380859375) * _2771) * _2772) + _2518;
        _2582 = (((cbLight._m0[_2753].y * 0.3183098733425140380859375) * _2771) * _2772) + _2520;
        _2584 = (((cbLight._m0[_2753].z * 0.3183098733425140380859375) * _2771) * _2772) + _2522;
    }
    uint _2587 = _2340 + 8u;
    float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _833) * 0.949999988079071044921875);
    float _2601 = _2600 * _2600;
    float _2602 = cbLight._m0[_2340].x + _909;
    float _2603 = cbLight._m0[_2340].y + _910;
    float _2604 = cbLight._m0[_2340].z + _911;
    float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
    float _2609 = _2608 * _2602;
    float _2610 = _2608 * _2603;
    float _2611 = _2608 * _2604;
    float _2612 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2340].xyz));
    float _4736 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _4747 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2616 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2617 = dot(vec3(_830, _831, _832), vec3(_2609, _2610, _2611));
    float _4758 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2621 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2609, _2610, _2611));
    float _4769 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2625 = _2601 * _2601;
    float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
    float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0);
    float _2638 = 0.959999978542327880859375 - _988;
    float _2640 = 0.959999978542327880859375 - _989;
    float _2641 = 0.959999978542327880859375 - _990;
    float _2648 = 1.0 - _2601;
    float _2659 = (0.5 / (((_2616 * ((_2615 * _2648) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2648) + _2601) * _2615))) * _2615;
    float _4780 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2661 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
    uint _2675 = _2340 + 9u;
    float _2686 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _833) * 0.949999988079071044921875);
    float _2687 = _2686 * _2686;
    float _2688 = cbLight._m0[_2380].x + _909;
    float _2689 = cbLight._m0[_2380].y + _910;
    float _2690 = cbLight._m0[_2380].z + _911;
    float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
    float _2695 = _2694 * _2688;
    float _2696 = _2694 * _2689;
    float _2697 = _2694 * _2690;
    float _2698 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2380].xyz));
    float _4791 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2701 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2702 = dot(vec3(_830, _831, _832), vec3(_2695, _2696, _2697));
    float _4802 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2705 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2706 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2695, _2696, _2697));
    float _4813 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2710 = _2687 * _2687;
    float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
    float _2721 = exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0);
    float _2728 = 1.0 - _2687;
    float _2738 = (0.5 / (((_2616 * ((_2701 * _2728) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2728) + _2687) * _2701))) * _2701;
    float _4824 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2740 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
    float _2750 = (((((_2721 * _2638) + _991) * cbLight._m0[_2675].x) * _2740) * _2363) + ((((cbLight._m0[_2587].x * _2329) * ((_2637 * _2638) + _991)) * _2661) * _2376);
    float _2751 = (((((_2721 * _2640) + _993) * cbLight._m0[_2675].y) * _2740) * _2363) + ((((cbLight._m0[_2587].y * _2331) * ((_2637 * _2640) + _993)) * _2661) * _2376);
    float _2752 = (((((_2721 * _2641) + _994) * cbLight._m0[_2675].z) * _2740) * _2363) + ((((cbLight._m0[_2587].z * _2333) * ((_2637 * _2641) + _994)) * _2661) * _2376);
    float _2808;
    float _2810;
    float _2812;
    if (_2416)
    {
        _2808 = _2750;
        _2810 = _2751;
        _2812 = _2752;
    }
    else
    {
        uint _2814 = _2340 + 2u;
        uint _2818 = _2340 + 10u;
        float _2832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2814].w)) * _833) * 0.949999988079071044921875);
        float _2833 = _2832 * _2832;
        float _2834 = cbLight._m0[_2814].x + _909;
        float _2835 = cbLight._m0[_2814].y + _910;
        float _2836 = cbLight._m0[_2814].z + _911;
        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
        float _2841 = _2840 * _2834;
        float _2842 = _2840 * _2835;
        float _2843 = _2840 * _2836;
        float _2844 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2814].xyz));
        float _4835 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2848 = dot(vec3(_830, _831, _832), vec3(_2841, _2842, _2843));
        float _4846 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2852 = dot(vec3(cbLight._m0[_2814].xyz), vec3(_2841, _2842, _2843));
        float _4857 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2856 = _2833 * _2833;
        float _2860 = ((_2851 * _2851) * (_2856 + (-1.0))) + 1.0;
        float _2867 = exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0);
        float _2874 = 1.0 - _2833;
        float _2884 = (0.5 / (((_2616 * ((_2847 * _2874) + _2833)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2874) + _2833) * _2847))) * _2847;
        float _4868 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2886 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2856 / ((_2860 * _2860) * 3.141590118408203125));
        float _2887 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2808 = (((((_2867 * _2638) + _991) * cbLight._m0[_2818].x) * _2886) * _2887) + _2750;
        _2810 = (((((_2867 * _2640) + _993) * cbLight._m0[_2818].y) * _2886) * _2887) + _2751;
        _2812 = (((((_2867 * _2641) + _994) * cbLight._m0[_2818].z) * _2886) * _2887) + _2752;
    }
    float _2918;
    float _2920;
    float _2922;
    if (_2525)
    {
        _2918 = _2808;
        _2920 = _2810;
        _2922 = _2812;
    }
    else
    {
        uint _2929 = _2340 + 3u;
        uint _2933 = _2340 + 11u;
        float _2947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2929].w)) * _833) * 0.949999988079071044921875);
        float _2948 = _2947 * _2947;
        float _2949 = cbLight._m0[_2929].x + _909;
        float _2950 = cbLight._m0[_2929].y + _910;
        float _2951 = cbLight._m0[_2929].z + _911;
        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
        float _2956 = _2955 * _2949;
        float _2957 = _2955 * _2950;
        float _2958 = _2955 * _2951;
        float _2959 = dot(vec3(_830, _831, _832), vec3(cbLight._m0[_2929].xyz));
        float _4884 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2962 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2963 = dot(vec3(_830, _831, _832), vec3(_2956, _2957, _2958));
        float _4895 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2966 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2967 = dot(vec3(cbLight._m0[_2929].xyz), vec3(_2956, _2957, _2958));
        float _4906 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2971 = _2948 * _2948;
        float _2975 = ((_2966 * _2966) * (_2971 + (-1.0))) + 1.0;
        float _2982 = exp2(log2(1.0 - (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * 5.0);
        float _2989 = 1.0 - _2948;
        float _2999 = (0.5 / (((_2616 * ((_2962 * _2989) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2616 * _2989) + _2948) * _2962))) * _2962;
        float _4917 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3001 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2971 / ((_2975 * _2975) * 3.141590118408203125));
        float _3002 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
        _2918 = (((((_2982 * _2638) + _991) * cbLight._m0[_2933].x) * _3001) * _3002) + _2808;
        _2920 = (((((_2982 * _2640) + _993) * cbLight._m0[_2933].y) * _3001) * _3002) + _2810;
        _2922 = (((((_2982 * _2641) + _994) * cbLight._m0[_2933].z) * _3001) * _3002) + _2812;
    }
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    float _3076;
    float _3078;
    if (_2338.y == 0u)
    {
        uvec4 _3023 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3024 = _3023.x;
        uint _3035 = uint((float(_3023.y) * floor(float(uint(cbSceneParam._m0[85u].y * _930) / _3024))) + floor(float(uint(cbSceneParam._m0[85u].x * _929) / _3024)));
        float _3045 = (log2(_2116 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3046 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
        uint _3049 = uint(isnan(14.0) ? _3046 : (isnan(_3046) ? 14.0 : min(_3046, 14.0)));
        uvec4 _3054 = texelFetch(g_lightClusterGridBuffer, int(((_3049 << 2u) + (_3035 << 6u)) >> 2u));
        uint _3055 = _3054.x;
        uint _3056 = _3023.z;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        if (((((1u << ((_3056 >> 4u) & 15u)) + 4294967295u) & _3055) == 0u) || ((_3056 & 240u) == 0u))
        {
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
            _3145 = 0.0;
        }
        else
        {
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3144;
            float _3146;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            uint _3294 = 0u;
            uint _3303;
            bool _3304;
            for (;;)
            {
                _3303 = texelFetch(g_lightClassification, int((((_3049 << 5u) + (_3035 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                _3304 = _3303 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3304)
                {
                    frontier_phi_71_pred = _3293;
                    frontier_phi_71_pred_1 = _3292;
                    frontier_phi_71_pred_2 = _3291;
                    frontier_phi_71_pred_3 = _3290;
                    frontier_phi_71_pred_4 = _3289;
                    frontier_phi_71_pred_5 = _3288;
                }
                else
                {
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    uint _3439;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3303;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    for (;;)
                    {
                        uint _3443 = uint(findLSB(_3439)) + (_3294 << 5u);
                        uint _3440 = (_3439 + 4294967295u) & _3439;
                        uint _3445 = _3443 * 48u;
                        vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 3u)).x));
                        uint _3465 = (_3443 * 48u) + 4u;
                        vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3465)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 3u)).x));
                        uint _3484 = (_3443 * 48u) + 8u;
                        vec3 _3495 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3484)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 2u)).x));
                        float _3499 = _3459.x - _2114;
                        float _3500 = _3459.y - _2115;
                        float _3501 = _3459.z - _2116;
                        float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                        float _3505 = inversesqrt(_3502);
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3509 = dot(vec3(_948, _951, _954), vec3(_3506, _3507, _3508));
                        float _3514 = 1.0 - (_3502 * _3459.w);
                        float _4943 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3515 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3516 = sqrt(_3502) * _3478.w;
                        float _3519 = 1.39999997615814208984375 / (_3516 + 1.39999997615814208984375);
                        float _3520 = _3519 * _3519;
                        float _3523 = ((1.0 - _3520) * _3509) + _3520;
                        float _3526 = _3516 * _3516;
                        float _3530 = ((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3515) / ((_3526 * 0.699999988079071044921875) + 1.0);
                        float _3534 = (-0.0) - _2114;
                        float _3535 = (-0.0) - _2115;
                        float _3536 = (-0.0) - _2116;
                        float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                        float _3541 = _3540 * _3534;
                        float _3542 = _3540 * _3535;
                        float _3543 = _3540 * _3536;
                        float _3550 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                        float _3551 = 1.0 - _1023;
                        float _3558 = sqrt(1.0 - ((1.0 - (_3551 * _3551)) * (1.0 - (_3550 * _3550))));
                        float _3559 = _3558 * _3558;
                        float _3560 = _3559 * _3559;
                        float _3561 = _3541 + _3506;
                        float _3562 = _3542 + _3507;
                        float _3563 = _3543 + _3508;
                        float _3567 = inversesqrt(dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563)));
                        float _3571 = dot(vec3(_948, _951, _954), vec3(_3541, _3542, _3543));
                        float _4959 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3574 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3575 = dot(vec3(_948, _951, _954), vec3(_3567 * _3561, _3567 * _3562, _3567 * _3563));
                        float _4970 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3578 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3582 = ((_3578 * _3578) * (_3560 + (-1.0))) + 1.0;
                        float _3583 = _3519 * _3559;
                        float _3584 = _3583 * _3583;
                        float _3587 = ((1.0 - _3584) * _3509) + _3584;
                        float _4981 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                        float _3588 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3589 = 1.0 - _3559;
                        float _3599 = (0.5 / (((_3588 * ((_3574 * _3589) + _3559)) + 9.9999999392252902907785028219223e-09) + (((_3588 * _3589) + _3559) * _3574))) * _3588;
                        float _4992 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3610 = (((_3560 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3582 * _3582) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125))) * _3515;
                        _3363 = (_3530 * _3478.x) + _3436;
                        _3364 = (_3530 * _3478.y) + _3437;
                        _3365 = (_3530 * _3478.z) + _3438;
                        _3360 = (_3610 * _3495.x) + _3433;
                        _3361 = (_3610 * _3495.y) + _3434;
                        _3362 = (_3610 * _3495.z) + _3435;
                        if (_3440 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3440;
                        }
                    }
                    frontier_phi_71_pred = _3365;
                    frontier_phi_71_pred_1 = _3364;
                    frontier_phi_71_pred_2 = _3363;
                    frontier_phi_71_pred_3 = _3362;
                    frontier_phi_71_pred_4 = _3361;
                    frontier_phi_71_pred_5 = _3360;
                }
                _3146 = frontier_phi_71_pred;
                _3144 = frontier_phi_71_pred_1;
                _3142 = frontier_phi_71_pred_2;
                _3140 = frontier_phi_71_pred_3;
                _3138 = frontier_phi_71_pred_4;
                _3136 = frontier_phi_71_pred_5;
                uint _3295 = _3294 + 1u;
                if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3288 = _3136;
                    _3289 = _3138;
                    _3290 = _3140;
                    _3291 = _3142;
                    _3292 = _3144;
                    _3293 = _3146;
                    _3294 = _3295;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
            _3145 = _3146;
        }
        uvec4 _3149 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3150 = _3149.z;
        uint _3152 = (_3150 >> 8u) & 15u;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        if (((4294967295u << _3152) & _3055) == 0u)
        {
            _3256 = _3135;
            _3258 = _3137;
            _3260 = _3139;
            _3262 = _3141;
            _3264 = _3143;
            _3266 = _3145;
        }
        else
        {
            float _3281 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
            float _3282 = _3281 * _2114;
            float _3283 = _3281 * _2115;
            float _3284 = _3281 * _2116;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3152 < ((_3150 >> 12u) & 15u))
            {
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3416 = _3135;
                float _3417 = _3137;
                float _3418 = _3139;
                float _3419 = _3141;
                float _3420 = _3143;
                float _3421 = _3145;
                uint _3422 = _3152;
                uint _3431;
                bool _3432;
                for (;;)
                {
                    _3431 = texelFetch(g_lightClassification, int((((_3049 << 5u) + (_3035 << 9u)) + (_3422 << 2u)) >> 2u)).x;
                    _3432 = _3431 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3432)
                    {
                        frontier_phi_82_pred = _3421;
                        frontier_phi_82_pred_1 = _3420;
                        frontier_phi_82_pred_2 = _3419;
                        frontier_phi_82_pred_3 = _3418;
                        frontier_phi_82_pred_4 = _3417;
                        frontier_phi_82_pred_5 = _3416;
                    }
                    else
                    {
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        float _3639 = _3418;
                        float _3640 = _3419;
                        float _3641 = _3420;
                        float _3642 = _3421;
                        uint _3643 = _3431;
                        uint _3644;
                        vec4 _3669;
                        float _3670;
                        vec4 _3685;
                        vec3 _3697;
                        vec4 _3712;
                        vec4 _3727;
                        float _3773;
                        bool _3774;
                        for (;;)
                        {
                            uint _3654 = ((_3422 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3643));
                            _3644 = (_3643 + 4294967295u) & _3643;
                            uint _3656 = _3654 * 40u;
                            _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            _3670 = _3669.w;
                            uint _3672 = (_3654 * 40u) + 4u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3654 * 40u) + 8u;
                            _3697 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x));
                            uint _3699 = (_3654 * 40u) + 16u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3714 = (_3654 * 40u) + 20u;
                            _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            uint _3729 = (_3654 * 40u) + 24u;
                            vec4 _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            uint _3748 = (_3654 * 40u) + 28u;
                            vec4 _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            _3773 = fma(_2116, _3761.z, fma(_2115, _3761.y, _3761.x * _2114)) + _3761.w;
                            _3774 = !((fma(_2116, _3742.z, fma(_2115, _3742.y, _3742.x * _2114)) + _3742.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3774)
                            {
                                float _3801 = _3669.x - _2114;
                                float _3802 = _3669.y - _2115;
                                float _3803 = _3669.z - _2116;
                                float _3804 = dot(vec3(_3801, _3802, _3803), vec3(_3801, _3802, _3803));
                                float _3807 = inversesqrt(_3804);
                                float _3808 = _3807 * _3801;
                                float _3809 = _3807 * _3802;
                                float _3810 = _3807 * _3803;
                                float _3814 = 1.0 - (_3804 / (_3670 * _3670));
                                float _5003 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3819 = sqrt(_3804) * _3685.w;
                                float _3821 = 1.39999997615814208984375 / (_3819 + 1.39999997615814208984375);
                                float _3822 = _3821 * _3821;
                                float _3825 = ((1.0 - _3822) * dot(vec3(_3808, _3809, _3810), vec3(_948, _951, _954))) + _3822;
                                float _3828 = _3819 * _3819;
                                float _3832 = (fma(_2116, _3712.z, fma(_2115, _3712.y, _3712.x * _2114)) + _3712.w) / _3773;
                                float _3833 = (fma(_2116, _3727.z, fma(_2115, _3727.y, _3727.x * _2114)) + _3727.w) / _3773;
                                float _3837 = 1.0 - dot(vec2(_3832, _3833), vec2(_3832, _3833));
                                float _5019 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3838 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3839 = _3838 * (((isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0))) * _3815) / ((_3828 * 0.699999988079071044921875) + 1.0));
                                float _3851 = exp2(log2(1.0 / ((_3828 * 3.5) + 5.0)) * 0.25);
                                float _3852 = 1.0 - _1023;
                                float _3859 = sqrt(1.0 - ((1.0 - (_3852 * _3852)) * (1.0 - (_3851 * _3851))));
                                float _3860 = _3859 * _3859;
                                float _3861 = _3860 * _3860;
                                float _3862 = _3808 - _3282;
                                float _3863 = _3809 - _3283;
                                float _3864 = _3810 - _3284;
                                float _3868 = inversesqrt(dot(vec3(_3862, _3863, _3864), vec3(_3862, _3863, _3864)));
                                float _3872 = dot(vec3(_948, _951, _954), vec3((-0.0) - _3282, (-0.0) - _3283, (-0.0) - _3284));
                                float _5030 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3875 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3876 = dot(vec3(_948, _951, _954), vec3(_3868 * _3862, _3868 * _3863, _3868 * _3864));
                                float _5041 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3879 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3883 = ((_3879 * _3879) * (_3861 + (-1.0))) + 1.0;
                                float _3884 = _3821 * _3860;
                                float _3885 = _3884 * _3884;
                                float _3891 = ((1.0 - _3885) * dot(vec3(_948, _951, _954), vec3(_3808, _3809, _3810))) + _3885;
                                float _5052 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3892 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3893 = 1.0 - _3860;
                                float _3903 = (0.5 / (((_3892 * ((_3875 * _3893) + _3860)) + 9.9999999392252902907785028219223e-09) + (((_3892 * _3893) + _3860) * _3875))) * _3892;
                                float _5063 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3913 = (_3838 * _3815) * (((_3861 * 3.1415927410125732421875) * (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0)))) / ((_3883 * _3883) * ((_3828 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3839 * _3685.z;
                                frontier_phi_88_pred_1 = _3839 * _3685.y;
                                frontier_phi_88_pred_2 = _3839 * _3685.x;
                                frontier_phi_88_pred_3 = _3913 * _3697.z;
                                frontier_phi_88_pred_4 = _3913 * _3697.y;
                                frontier_phi_88_pred_5 = _3913 * _3697.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3922 = frontier_phi_88_pred;
                            _3921 = frontier_phi_88_pred_1;
                            _3920 = frontier_phi_88_pred_2;
                            _3919 = frontier_phi_88_pred_3;
                            _3918 = frontier_phi_88_pred_4;
                            _3917 = frontier_phi_88_pred_5;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            _3626 = _3919 + _3639;
                            if (_3644 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3644;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3629;
                        frontier_phi_82_pred_1 = _3628;
                        frontier_phi_82_pred_2 = _3627;
                        frontier_phi_82_pred_3 = _3626;
                        frontier_phi_82_pred_4 = _3625;
                        frontier_phi_82_pred_5 = _3624;
                    }
                    _3267 = frontier_phi_82_pred;
                    _3265 = frontier_phi_82_pred_1;
                    _3263 = frontier_phi_82_pred_2;
                    _3261 = frontier_phi_82_pred_3;
                    _3259 = frontier_phi_82_pred_4;
                    _3257 = frontier_phi_82_pred_5;
                    uint _3423 = _3422 + 1u;
                    if (_3423 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3416 = _3257;
                        _3417 = _3259;
                        _3418 = _3261;
                        _3419 = _3263;
                        _3420 = _3265;
                        _3421 = _3267;
                        _3422 = _3423;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3263;
                frontier_phi_63_64_ladder_1 = _3267;
                frontier_phi_63_64_ladder_2 = _3265;
                frontier_phi_63_64_ladder_3 = _3261;
                frontier_phi_63_64_ladder_4 = _3259;
                frontier_phi_63_64_ladder_5 = _3257;
            }
            else
            {
                frontier_phi_63_64_ladder = _3141;
                frontier_phi_63_64_ladder_1 = _3145;
                frontier_phi_63_64_ladder_2 = _3143;
                frontier_phi_63_64_ladder_3 = _3139;
                frontier_phi_63_64_ladder_4 = _3137;
                frontier_phi_63_64_ladder_5 = _3135;
            }
            _3256 = frontier_phi_63_64_ladder_5;
            _3258 = frontier_phi_63_64_ladder_4;
            _3260 = frontier_phi_63_64_ladder_3;
            _3262 = frontier_phi_63_64_ladder;
            _3264 = frontier_phi_63_64_ladder_2;
            _3266 = frontier_phi_63_64_ladder_1;
        }
        float _3271 = isnan(1.0) ? _1007 : (isnan(_1007) ? 1.0 : min(_1007, 1.0));
        _3068 = (_3271 * _3262) + _2580;
        _3070 = (_3271 * _3264) + _2582;
        _3072 = (_3271 * _3266) + _2584;
        _3074 = ((_3256 * _991) * _3271) + _2918;
        _3076 = ((_3258 * _993) * _3271) + _2920;
        _3078 = ((_3260 * _994) * _3271) + _2922;
    }
    else
    {
        _3068 = _2580;
        _3070 = _2582;
        _3072 = _2584;
        _3074 = _2918;
        _3076 = _2920;
        _3078 = _2922;
    }
    float _5079 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _5090 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _5101 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _3095 = ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3068 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1007))) + ((_3074 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _3096 = ((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3070 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1007))) + ((_3076 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _3097 = ((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3072 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1007))) + ((_3078 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    uint _3098 = _263 + 6u;
    float _3106 = _929 / cbSceneParam._m0[86u].x;
    float _3107 = _930 / cbSceneParam._m0[86u].y;
    vec4 _3121 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3106, _3107, (log2((isnan(cbSceneParam._m0[77u].w) ? _852 : (isnan(_852) ? cbSceneParam._m0[77u].w : min(_852, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3123 = _3121.x;
    float _3124 = _3121.y;
    float _3125 = _3121.z;
    float _3126 = _3121.w;
    float _3198;
    float _3200;
    float _3202;
    float _3204;
    if (_852 > cbSceneParam._m0[78u].w)
    {
        float _3160 = isnan(_852) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _852 : min(cbSceneParam._m0[80u].w, _852));
        float _3161 = _3160 / _852;
        float _3172 = _3161 * _902;
        float _3173 = _903 * _3161;
        float _3174 = (-0.0) - _3173;
        float _3176 = _3161 * _904;
        float _3178 = (cbSceneParam._m0[77u].w * _3174) / _3160;
        float _3179 = _3178 + cbSceneParam._m0[79u].w;
        float _3180 = cbSceneParam._m0[79u].w - _3173;
        float _3186 = sqrt(((_3172 * _3172) + (_3173 * _3173)) + (_3176 * _3176));
        float _3189 = (1.0 - (cbSceneParam._m0[77u].w / _3160)) * _3186;
        float _3194 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3196 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3373;
        if (abs((_3174 - _3178) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3373 = ((((_3179 > 0.0) ? exp2(_3194 * _3179) : (2.0 - exp2(_3196 * _3179))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3189;
        }
        else
        {
            float _3317 = 1.0 / cbSceneParam._m0[80u].x;
            float _3318 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : max(_3179, _3180));
            float _3319 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : min(_3179, _3180));
            float _3328 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : min(_3318, 0.0));
            float _3329 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : min(_3319, 0.0));
            _3373 = ((abs(_3186 / _3174) * cbSceneParam._m0[80u].y) * ((((_3328 - _3329) * 2.0) - ((exp2(_3194 * (isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0)))) - exp2(_3194 * (isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))))) * _3317)) - ((exp2(_3196 * _3328) - exp2(_3196 * _3329)) * _3317))) + (_3189 * cbSceneParam._m0[80u].z);
        }
        vec4 _3375 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3106, _3107, 1.0), 0.0);
        float _3384 = exp2((_3373 * (-1.44269502162933349609375)) * (1.0 - _3375.w));
        float _3385 = log2(_3384);
        float _3401 = log2(_3126);
        _3198 = (exp2(_3401 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].x)) * _3375.x) / cbSceneParam._m0[78u].x)) + _3123;
        _3200 = (exp2(_3401 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].y)) * _3375.y) / cbSceneParam._m0[78u].y)) + _3124;
        _3202 = (exp2(_3401 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].z)) * _3375.z) / cbSceneParam._m0[78u].z)) + _3125;
        _3204 = _3384 * _3126;
    }
    else
    {
        _3198 = _3123;
        _3200 = _3124;
        _3202 = _3125;
        _3204 = _3126;
    }
    bool _3411;
    vec4 _3214;
    vec4 _3236;
    float _3238;
    float _3242;
    float _3243;
    float _3244;
    float _3245;
    bool _3255;
    for (;;)
    {
        _3214 = cbMatDynParam._m0[0u];
        float _3216 = roundEven(_3214.y);
        bool _3217 = _3216 == 3.0;
        float _3218 = log2(_3204);
        float _3225 = exp2(_3218 * cbSceneParam._m0[78u].x) * _3095;
        float _3226 = exp2(_3218 * cbSceneParam._m0[78u].y) * _3096;
        float _3227 = exp2(_3218 * cbSceneParam._m0[78u].z) * _3097;
        float _3234 = _918 + (-0.5);
        _3236 = cbMtdParam._m0[1u];
        _3238 = _3236.y * _3234;
        float _3241 = (_3216 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3242 = _3241 * (_3217 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3198)));
        _3243 = _3241 * (_3217 ? _3226 : (_3226 + (cbSceneParam._m0[72u].w * _3200)));
        _3244 = _3241 * (_3217 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3202)));
        _3245 = _3234 * 0.999000012874603271484375;
        _3255 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3255)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3245) < 0.5)
            {
                _3411 = true;
                break;
            }
        }
        uint _3352 = _967 + uint(_3214.w);
        if ((cbInstanceData._m0[_3352].w < 1.0) && ((cbInstanceData._m0[_3352].w + _3245) < 0.5))
        {
            _3411 = true;
            break;
        }
        if ((_3238 + 1.0) < _3236.x)
        {
            _3411 = true;
            break;
        }
        _3411 = false;
        break;
    }
    float _3615;
    if (_3411)
    {
        discard_state = true;
        _3615 = 0.0;
    }
    else
    {
        _3615 = cbInstanceData._m0[_3098].w;
    }
    SV_Target.x = _3242;
    SV_Target.y = _3243;
    SV_Target.z = _3244;
    SV_Target.w = _3615;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3098].w;
    discard_exit();
}


