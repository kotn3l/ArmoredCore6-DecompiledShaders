#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1455;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3782 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3793 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3804 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _444 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _446 = _444.x;
    float _458 = dot(vec4(_446, _444.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _475 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _412.x) * 2.0) - ((((_446 - _458) * cbMtdParam._m0[23u].w) + _458) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3815 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _483 = (_476 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372;
    float _484 = (_476 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373;
    float _485 = (_476 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374;
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _304) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _305) + cbTextureTilingScale._m0[3u].w));
    vec4 _522 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _524 = _522.x;
    float _534 = dot(vec4(_524, _522.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _548 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _412.y) * 2.0) - ((((_524 - _534) * cbMtdParam._m0[23u].w) + _534) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3826 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _559 = (_341.x * cbMtdParam._m0[9u].x) * ((_549 * ((_502.x * cbMtdParam._m0[13u].x) - _483)) + _483);
    float _560 = (_341.y * cbMtdParam._m0[9u].y) * ((_549 * ((_502.y * cbMtdParam._m0[13u].y) - _484)) + _484);
    float _561 = (_341.z * cbMtdParam._m0[9u].z) * ((_549 * ((_502.z * cbMtdParam._m0[13u].z) - _485)) + _485);
    float _565 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _559;
    float _568 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _560;
    float _571 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _561;
    float _579 = (((_559 - _565) * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) + _565) * 4.55000019073486328125;
    float _581 = (((_560 - _568) * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) + _568) * 4.55000019073486328125;
    float _583 = (((_561 - _571) * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) + _571) * 4.55000019073486328125;
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _637 = _635.x;
    float _638 = _635.y;
    float _639 = _635.z;
    float _646 = ((_618.x - _637) * _476) + _637;
    float _647 = ((_618.y - _638) * _476) + _638;
    float _648 = ((_618.z - _639) * _476) + _639;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _304) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _305) + cbTextureTilingScale._m0[2u].w));
    float _673 = ((_660.z - _648) * _549) + _648;
    float _676 = ((((_660.x - _646) * _549) + _646) * 2.0) + (-1.0);
    float _677 = ((((_660.y - _647) * _549) + _647) * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _3837 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _683 = sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _715 = (_676 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_595.x * 2.0) + (-1.0)))) + (((_703.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _716 = (_677 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_595.y * 2.0) + (-1.0)))) + (((_703.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _730 = _728.x;
    float _731 = 1.0 - _730;
    float _760 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_730 - _731) * cbMtdParam._m0[24u].w) + _731) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3848 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _761 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _769 = ((((cbMtdParam._m0[10u].x - _579) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _761) + _579;
    float _770 = ((((cbMtdParam._m0[10u].y - _581) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _761) + _581;
    float _771 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _583)) * _761) + _583;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _799 = _797.x;
    float _816 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _799) * _476) + _799;
    float _834 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _304) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _305) + cbTextureTilingScale._m0[21u].w)).x - _816) * _549) + _816;
    float _838 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _834) * cbMtdParam._m0[19u].z) + _834;
    float _840 = _838 - (_838 * _761);
    float _845 = (((_595.z - _673) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _673;
    float _849 = ((_703.z - _845) * cbMtdParam._m0[19u].w) + _845;
    float _853 = ((cbMtdParam._m0[23u].x - _849) * _761) + _849;
    vec4 _874 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _880 = (_874.x * 2.0) + (-1.0);
    float _881 = (_874.y * 2.0) + (-1.0);
    float _882 = dot(vec2(_880, _881), vec2(_880, _881));
    float _3859 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _898 = (_761 * (((cbMtdParam._m0[22u].z * _715) - _715) + _880)) + _715;
    float _899 = (_761 * (((cbMtdParam._m0[22u].z * _716) - _716) + _881)) + _716;
    float _900 = (_761 * (sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) - _683)) + _683;
    float _902 = cbMtdParam._m0[22u].x + _703.w;
    float _905 = fma(_900, _253 * NORMAL.x, fma(_899, _260 * TANGENT.x, (_246 * _238) * _898));
    float _908 = fma(_900, _253 * NORMAL.y, fma(_899, _260 * TANGENT.y, (_246 * _239) * _898));
    float _911 = fma(_900, _253 * NORMAL.z, fma(_899, _260 * TANGENT.z, (_246 * _240) * _898));
    float _915 = inversesqrt(dot(vec3(_905, _908, _911), vec3(_905, _908, _911)));
    float _916 = _915 * _905;
    float _917 = _915 * _908;
    float _918 = _915 * _911;
    float _3870 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _919 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _3892 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _3903 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _3914 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _3925 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _924 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _938 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _988 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _978);
    float _989 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _978);
    float _990 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _978);
    float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
    float _995 = _988 * _994;
    float _996 = _989 * _994;
    float _997 = _990 * _994;
    float _1003 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1004 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1022 = fma(_918, cbSceneParam._m0[5u].z, fma(_917, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _916));
    float _1025 = fma(_918, cbSceneParam._m0[6u].z, fma(_917, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _916));
    float _1028 = fma(_918, cbSceneParam._m0[7u].z, fma(_917, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _916));
    uint _1042 = (_285 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1048 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_1042].x;
    float _1049 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_1042].y;
    float _1050 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_1042].z;
    float _3936 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1054 = 1.0 - _924;
    float _1055 = _1051 * _1054;
    float _1056 = _1052 * _1054;
    float _1057 = _1053 * _1054;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _924;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _924;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _924;
    float _1065 = _1062 + 0.039999999105930328369140625;
    float _1067 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    vec4 _1077 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1003, cbSceneParam._m0[86u].y * _1004));
    float _1081 = ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * TEXCOORD_5.w) * _1077.x;
    float _1082 = dot(vec3(_916, _917, _918), vec3(_995, _996, _997));
    float _1085 = _1082 * 2.0;
    float _1089 = (_1085 * _916) - _995;
    float _1090 = (_1085 * _917) - _996;
    float _1091 = (_1085 * _918) - _997;
    float _1095 = abs(dot(vec3(_995, _996, _997), vec3(_916, _917, _918)));
    float _3969 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1097 = sqrt(_919);
    float _1110 = exp2((_1097 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1097 * 3.0));
    float _1116 = (1.0 - _1110) * ((_1097 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1117 = _1110 * _1097;
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1153 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1454;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1179 = fma(_1153, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1145));
        float _1183 = fma(_1153, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1145));
        float _1187 = fma(_1153, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1145));
        float _1212 = _1145 + _916;
        float _1213 = _1149 + _917;
        float _1214 = _1153 + _918;
        float _1224 = fma(_1214, cbModelParam._m0[26u].z, fma(_1213, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1212)) - _1179;
        float _1225 = fma(_1214, cbModelParam._m0[27u].z, fma(_1213, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1212)) - _1183;
        float _1226 = fma(_1214, cbModelParam._m0[28u].z, fma(_1213, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1212)) - _1187;
        float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
        float _1243 = ((_1230 * _1224) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1179 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1230 * _1225) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1183 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1230 * _1226) / cbModelParam._m0[34u].z) + ((((((_1187 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        float _1282 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1248.x + (-0.5));
        float _1284 = _1282 * (_1248.y + (-0.5));
        float _1285 = _1282 * (_1248.z + (-0.5));
        float _1292 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1255.x + (-0.5));
        float _1294 = _1292 * (_1255.y + (-0.5));
        float _1295 = _1292 * (_1255.z + (-0.5));
        float _1302 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1262.x + (-0.5));
        float _1304 = _1302 * (_1262.y + (-0.5));
        float _1305 = _1302 * (_1262.z + (-0.5));
        float _1312 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1269.x + (-0.5));
        float _1314 = _1312 * (_1269.y + (-0.5));
        float _1315 = _1312 * (_1269.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1336 = (dot(vec3(_916, _917, _918), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1346 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4017 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1348 + 1.0))) + _1353) * _1316;
        float _1363 = _1284 * 0.5;
        float _1364 = _1294 * 0.5;
        float _1365 = _1304 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_916, _917, _918), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4050 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1390 + 1.0))) + _1395) * _1317;
        float _1405 = _1285 * 0.5;
        float _1406 = _1295 * 0.5;
        float _1407 = _1305 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_916, _917, _918), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4083 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1432 + 1.0))) + _1437) * _1318;
        _1454 = _1285;
        _1456 = _1284;
        _1457 = _1283;
        _1458 = _1295;
        _1459 = _1294;
        _1460 = _1293;
        _1461 = _1305;
        _1462 = _1304;
        _1463 = _1303;
        _1464 = _1318;
        _1465 = _1317;
        _1466 = _1316;
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
    }
    else
    {
        _1454 = _1455;
        _1456 = _1455;
        _1457 = _1455;
        _1458 = _1455;
        _1459 = _1455;
        _1460 = _1455;
        _1461 = _1455;
        _1462 = _1455;
        _1463 = _1455;
        _1464 = _1455;
        _1465 = _1455;
        _1466 = _1455;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1493 = fma(_1153, cbModelParam._m0[30u].z, fma(_1149, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145));
        float _1497 = fma(_1153, cbModelParam._m0[31u].z, fma(_1149, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145));
        float _1501 = fma(_1153, cbModelParam._m0[32u].z, fma(_1149, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145));
        float _1524 = _1145 + _916;
        float _1525 = _1149 + _917;
        float _1526 = _1153 + _918;
        float _1536 = fma(_1526, cbModelParam._m0[30u].z, fma(_1525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1524)) - _1493;
        float _1537 = fma(_1526, cbModelParam._m0[31u].z, fma(_1525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1524)) - _1497;
        float _1538 = fma(_1526, cbModelParam._m0[32u].z, fma(_1525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1524)) - _1501;
        float _1542 = inversesqrt(dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538)));
        float _1555 = ((_1542 * _1536) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1493 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1542 * _1537) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1497 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1542 * _1538) / cbModelParam._m0[35u].z) + ((((((_1501 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        float _1592 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1559.x + (-0.5));
        float _1594 = _1592 * (_1559.y + (-0.5));
        float _1595 = _1592 * (_1559.z + (-0.5));
        float _1602 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1566.x + (-0.5));
        float _1604 = _1602 * (_1566.y + (-0.5));
        float _1605 = _1602 * (_1566.z + (-0.5));
        float _1612 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1573.x + (-0.5));
        float _1614 = _1612 * (_1573.y + (-0.5));
        float _1615 = _1612 * (_1573.z + (-0.5));
        float _1622 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1580.x + (-0.5));
        float _1624 = _1622 * (_1580.y + (-0.5));
        float _1625 = _1622 * (_1580.z + (-0.5));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = _1593 * 0.5;
        float _1630 = _1603 * 0.5;
        float _1631 = _1613 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_916, _917, _918), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4146 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1656 + 1.0))) + _1661) * _1626;
        float _1671 = _1594 * 0.5;
        float _1672 = _1604 * 0.5;
        float _1673 = _1614 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_916, _917, _918), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4179 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1698 + 1.0))) + _1703) * _1627;
        float _1713 = _1595 * 0.5;
        float _1714 = _1605 * 0.5;
        float _1715 = _1615 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_916, _917, _918), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4212 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1740 + 1.0))) + _1745) * _1628;
        _1762 = _1595;
        _1763 = _1594;
        _1764 = _1593;
        _1765 = _1605;
        _1766 = _1604;
        _1767 = _1603;
        _1768 = _1615;
        _1769 = _1614;
        _1770 = _1613;
        _1771 = _1628;
        _1772 = _1627;
        _1773 = _1626;
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
    }
    else
    {
        _1762 = _1455;
        _1763 = _1455;
        _1764 = _1455;
        _1765 = _1455;
        _1766 = _1455;
        _1767 = _1455;
        _1768 = _1455;
        _1769 = _1455;
        _1770 = _1455;
        _1771 = _1455;
        _1772 = _1455;
        _1773 = _1455;
        _1774 = 0.0;
        _1775 = 0.0;
        _1776 = 0.0;
    }
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1467)) + _1467;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1468)) + _1468;
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1469)) + _1469;
    float _1809 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1786));
    float _1830 = _1089 * 0.5;
    float _1831 = _1090 * 0.5;
    float _1832 = _1091 * 0.5;
    float _1833 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1836 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1839 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1873;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1846 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1454, _1458, _1461, _1464));
        float _1850 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1854 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1861 = dot(vec4(cbModelParam._m0[39u]), vec4(_1830, _1831, _1832, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1861) ? 0.0 : (isnan(0.0) ? _1861 : max(0.0, _1861))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1884;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1875 = dot(vec4(cbModelParam._m0[40u]), vec4(_1830, _1831, _1832, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1888 = (_1884 * cbModelParam._m0[1u].x) + (_1873 * (1.0 - cbModelParam._m0[1u].x));
    float _1898 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _919);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1898 : min(cbModelParam._m0[25u].z, _1898));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1948 = fma(_1153, cbModelParam._m0[13u].z, fma(_1149, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1145)) + cbModelParam._m0[13u].w;
        float _1952 = fma(_1153, cbModelParam._m0[14u].z, fma(_1149, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1145)) + cbModelParam._m0[14u].w;
        float _1956 = fma(_1153, cbModelParam._m0[15u].z, fma(_1149, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1145)) + cbModelParam._m0[15u].w;
        float _1959 = fma(_1091, cbModelParam._m0[13u].z, fma(_1090, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089));
        float _1962 = fma(_1091, cbModelParam._m0[14u].z, fma(_1090, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089));
        float _1965 = fma(_1091, cbModelParam._m0[15u].z, fma(_1090, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089));
        float _1993;
        if (_1959 > 0.0)
        {
            _1993 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1993 = frontier_phi_14_12_ladder;
        }
        float _2196;
        if (_1962 > 0.0)
        {
            _2196 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2196 = frontier_phi_23_19_ladder;
        }
        float _2450;
        if (_1965 > 0.0)
        {
            _2450 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2450 = frontier_phi_35_30_ladder;
        }
        float _2452 = isnan(_2196) ? _1993 : (isnan(_1993) ? _2196 : min(_1993, _2196));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1959) + _1948;
        float _2458 = (_2453 * _1962) + _1952;
        float _2459 = (_2453 * _1965) + _1956;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2460;
        float _2464 = _2460 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 > _2464) || ((_2458 < _2462) || ((_2457 < _2462) || (_2457 > _2464))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2459, cbModelParam._m0[9u].z, fma(_2458, cbModelParam._m0[9u].y, _2457 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2459, cbModelParam._m0[10u].z, fma(_2458, cbModelParam._m0[10u].y, _2457 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2459, cbModelParam._m0[11u].z, fma(_2458, cbModelParam._m0[11u].y, _2457 * cbModelParam._m0[11u].x))), _1899);
            frontier_phi_13_35_ladder = _2587.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2587.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2587.x * cbModelParam._m0[1u].y;
        }
        _1981 = frontier_phi_13_35_ladder_2;
        _1983 = frontier_phi_13_35_ladder_1;
        _1985 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1089, _1090, _1091), _1899);
        _1981 = _1969.x * cbModelParam._m0[1u].y;
        _1983 = _1969.y * cbModelParam._m0[1u].y;
        _1985 = _1969.z * cbModelParam._m0[1u].y;
    }
    float _1989 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _919);
    float _1990 = isnan(_1989) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1989 : min(cbModelParam._m0[25u].w, _1989));
    float _2080;
    float _2082;
    float _2084;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2044 = fma(_1153, cbModelParam._m0[21u].z, fma(_1149, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1145)) + cbModelParam._m0[21u].w;
        float _2048 = fma(_1153, cbModelParam._m0[22u].z, fma(_1149, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1145)) + cbModelParam._m0[22u].w;
        float _2052 = fma(_1153, cbModelParam._m0[23u].z, fma(_1149, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1145)) + cbModelParam._m0[23u].w;
        float _2055 = fma(_1091, cbModelParam._m0[21u].z, fma(_1090, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089));
        float _2058 = fma(_1091, cbModelParam._m0[22u].z, fma(_1090, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089));
        float _2061 = fma(_1091, cbModelParam._m0[23u].z, fma(_1090, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089));
        float _2201;
        if (_2055 > 0.0)
        {
            _2201 = abs((1.0 - _2044) / _2055);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2044 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2201 = frontier_phi_25_21_ladder;
        }
        float _2477;
        if (_2058 > 0.0)
        {
            _2477 = abs((1.0 - _2048) / _2058);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2048 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2477 = frontier_phi_37_32_ladder;
        }
        float _2690;
        if (_2061 > 0.0)
        {
            _2690 = abs((1.0 - _2052) / _2061);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2052 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2690 = frontier_phi_46_43_ladder;
        }
        float _2692 = isnan(_2477) ? _2201 : (isnan(_2201) ? _2477 : min(_2201, _2477));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _2055) + _2044;
        float _2698 = (_2693 * _2058) + _2048;
        float _2699 = (_2693 * _2061) + _2052;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2701 = (-1.0) - _2700;
        float _2703 = _2700 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2699 > _2703) || ((_2699 < _2701) || ((_2698 > _2703) || ((_2698 < _2701) || ((_2697 < _2701) || (_2697 > _2703))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2699, cbModelParam._m0[17u].z, fma(_2698, cbModelParam._m0[17u].y, _2697 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2699, cbModelParam._m0[18u].z, fma(_2698, cbModelParam._m0[18u].y, _2697 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2699, cbModelParam._m0[19u].z, fma(_2698, cbModelParam._m0[19u].y, _2697 * cbModelParam._m0[19u].x))), _1990);
            frontier_phi_22_46_ladder = _2898.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2898.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2898.x * cbModelParam._m0[1u].z;
        }
        _2080 = frontier_phi_22_46_ladder_2;
        _2082 = frontier_phi_22_46_ladder_1;
        _2084 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2064 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1089, _1090, _1091), _1990);
        _2080 = _2064.x * cbModelParam._m0[1u].z;
        _2082 = _2064.y * cbModelParam._m0[1u].z;
        _2084 = _2064.z * cbModelParam._m0[1u].z;
    }
    float _2097 = (((_1116 * _1065) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2080 - _1981)) + _1981);
    float _2099 = (((_1116 * _1067) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2082 - _1983)) + _1983);
    float _2101 = (((_1116 * _1068) + _1117) * _1081) * ((cbModelParam._m0[1u].w * (_2084 - _1985)) + _1985);
    float _2104 = fma(_2101, cbSceneParam._m0[89u].z, fma(_2099, cbSceneParam._m0[89u].y, _2097 * cbSceneParam._m0[89u].x));
    float _2107 = fma(_2101, cbSceneParam._m0[90u].z, fma(_2099, cbSceneParam._m0[90u].y, _2097 * cbSceneParam._m0[90u].x));
    float _2110 = fma(_2101, cbSceneParam._m0[91u].z, fma(_2099, cbSceneParam._m0[91u].y, _2097 * cbSceneParam._m0[91u].x));
    uvec4 _2120 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2122 = _2120.x * 14u;
    uint _2123 = _2122 + 13u;
    float _2130 = _1081 + (-1.0);
    float _2135 = (cbLight._m0[_2123].x * _2130) + 1.0;
    float _2136 = (cbLight._m0[_2123].y * _2130) + 1.0;
    float _2137 = (cbLight._m0[_2123].z * _2130) + 1.0;
    float _2138 = (cbLight._m0[_2123].w * _2130) + 1.0;
    uint _2139 = _2122 + 5u;
    float _2145 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2149 = _2122 + 4u;
    float _2155 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2159 = _2122 | 1u;
    float _2170 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_916, _917, _918));
    float _2173 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_916, _917, _918));
    float _4348 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _4359 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2178 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.3183098733425140380859375;
    float _2180 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
    float _2187 = ((cbLight._m0[_2139].x * _2145) * _2180) + ((cbLight._m0[_2149].x * _2155) * _2178);
    float _2188 = ((_2145 * cbLight._m0[_2139].y) * _2180) + ((_2155 * cbLight._m0[_2149].y) * _2178);
    float _2189 = ((_2145 * cbLight._m0[_2139].z) * _2180) + ((_2155 * cbLight._m0[_2149].z) * _2178);
    uvec4 _2193 = floatBitsToUint(cbLight._m0[_2122 + 12u]);
    bool _2195 = _2193.x == 0u;
    float _2206;
    float _2208;
    float _2210;
    if (_2195)
    {
        _2206 = _2187;
        _2208 = _2188;
        _2210 = _2189;
    }
    else
    {
        uint _2214 = _2122 + 6u;
        float _2230 = (dot(vec3(cbLight._m0[_2122 + 2u].xyz), vec3(_916, _917, _918)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4370 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2233 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2206 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _2187;
        _2208 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _2188;
        _2210 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _2189;
    }
    bool _2213 = _2193.y == 0u;
    float _2251;
    float _2253;
    float _2255;
    if (_2213)
    {
        _2251 = _2206;
        _2253 = _2208;
        _2255 = _2210;
    }
    else
    {
        uint _2421 = _2122 + 7u;
        float _2437 = (dot(vec3(cbLight._m0[_2122 + 3u].xyz), vec3(_916, _917, _918)) * 0.5) + 0.5;
        float _2438 = _2437 * _2437;
        float _4386 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2439 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2440 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2251 = (((cbLight._m0[_2421].x * 0.3183098733425140380859375) * _2439) * _2440) + _2206;
        _2253 = (((cbLight._m0[_2421].y * 0.3183098733425140380859375) * _2439) * _2440) + _2208;
        _2255 = (((cbLight._m0[_2421].z * 0.3183098733425140380859375) * _2439) * _2440) + _2210;
    }
    uint _2258 = _2122 + 8u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _919) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_2122].x + _995;
    float _2274 = cbLight._m0[_2122].y + _996;
    float _2275 = cbLight._m0[_2122].z + _997;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2122].xyz));
    float _4402 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _2287 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2288 = dot(vec3(_916, _917, _918), vec3(_2280, _2281, _2282));
    float _4424 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2292 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2280, _2281, _2282));
    float _4435 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2296 = _2272 * _2272;
    float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
    float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
    float _2309 = 0.959999978542327880859375 - _1062;
    float _2311 = 0.959999978542327880859375 - _1063;
    float _2312 = 0.959999978542327880859375 - _1064;
    float _2319 = 1.0 - _2272;
    float _2330 = (0.5 / (((_2287 * ((_2286 * _2319) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2319) + _2272) * _2286))) * _2286;
    float _4446 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
    uint _2343 = _2122 + 9u;
    float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _919) * 0.949999988079071044921875);
    float _2355 = _2354 * _2354;
    float _2356 = cbLight._m0[_2159].x + _995;
    float _2357 = cbLight._m0[_2159].y + _996;
    float _2358 = cbLight._m0[_2159].z + _997;
    float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
    float _2363 = _2362 * _2356;
    float _2364 = _2362 * _2357;
    float _2365 = _2362 * _2358;
    float _2366 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2159].xyz));
    float _4457 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2370 = dot(vec3(_916, _917, _918), vec3(_2363, _2364, _2365));
    float _4468 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2374 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2363, _2364, _2365));
    float _4479 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2378 = _2355 * _2355;
    float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
    float _2389 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
    float _2396 = 1.0 - _2355;
    float _2406 = (0.5 / (((_2287 * ((_2369 * _2396) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2396) + _2355) * _2369))) * _2369;
    float _4490 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2408 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
    float _2418 = (((((_2389 * _2309) + _1065) * cbLight._m0[_2343].x) * _2408) * _2145) + (((((_2308 * _2309) + _1065) * cbLight._m0[_2258].x) * _2332) * _2155);
    float _2419 = (((((_2389 * _2311) + _1067) * cbLight._m0[_2343].y) * _2408) * _2145) + (((((_2308 * _2311) + _1067) * cbLight._m0[_2258].y) * _2332) * _2155);
    float _2420 = (((((_2389 * _2312) + _1068) * cbLight._m0[_2343].z) * _2408) * _2145) + (((((_2308 * _2312) + _1068) * cbLight._m0[_2258].z) * _2332) * _2155);
    float _2482;
    float _2484;
    float _2486;
    if (_2195)
    {
        _2482 = _2418;
        _2484 = _2419;
        _2486 = _2420;
    }
    else
    {
        uint _2488 = _2122 + 2u;
        uint _2492 = _2122 + 10u;
        float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _919) * 0.949999988079071044921875);
        float _2507 = _2506 * _2506;
        float _2508 = cbLight._m0[_2488].x + _995;
        float _2509 = cbLight._m0[_2488].y + _996;
        float _2510 = cbLight._m0[_2488].z + _997;
        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
        float _2515 = _2514 * _2508;
        float _2516 = _2514 * _2509;
        float _2517 = _2514 * _2510;
        float _2518 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2488].xyz));
        float _4501 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2522 = dot(vec3(_916, _917, _918), vec3(_2515, _2516, _2517));
        float _4512 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2526 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2515, _2516, _2517));
        float _4523 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2530 = _2507 * _2507;
        float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
        float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0);
        float _2548 = 1.0 - _2507;
        float _2558 = (0.5 / (((_2287 * ((_2521 * _2548) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2548) + _2507) * _2521))) * _2521;
        float _4534 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2560 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
        float _2561 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2482 = (((((_2541 * _2309) + _1065) * cbLight._m0[_2492].x) * _2560) * _2561) + _2418;
        _2484 = (((((_2541 * _2311) + _1067) * cbLight._m0[_2492].y) * _2560) * _2561) + _2419;
        _2486 = (((((_2541 * _2312) + _1068) * cbLight._m0[_2492].z) * _2560) * _2561) + _2420;
    }
    float _2596;
    float _2598;
    float _2600;
    if (_2213)
    {
        _2596 = _2482;
        _2598 = _2484;
        _2600 = _2486;
    }
    else
    {
        uint _2607 = _2122 + 3u;
        uint _2611 = _2122 + 11u;
        float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2607].w)) * _919) * 0.949999988079071044921875);
        float _2626 = _2625 * _2625;
        float _2627 = cbLight._m0[_2607].x + _995;
        float _2628 = cbLight._m0[_2607].y + _996;
        float _2629 = cbLight._m0[_2607].z + _997;
        float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
        float _2634 = _2633 * _2627;
        float _2635 = _2633 * _2628;
        float _2636 = _2633 * _2629;
        float _2637 = dot(vec3(_916, _917, _918), vec3(cbLight._m0[_2607].xyz));
        float _4550 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2641 = dot(vec3(_916, _917, _918), vec3(_2634, _2635, _2636));
        float _4561 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2645 = dot(vec3(cbLight._m0[_2607].xyz), vec3(_2634, _2635, _2636));
        float _4572 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2649 = _2626 * _2626;
        float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
        float _2660 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
        float _2667 = 1.0 - _2626;
        float _2677 = (0.5 / (((_2287 * ((_2640 * _2667) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2287 * _2667) + _2626) * _2640))) * _2640;
        float _4583 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2679 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
        float _2680 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2596 = (((((_2660 * _2309) + _1065) * cbLight._m0[_2611].x) * _2679) * _2680) + _2482;
        _2598 = (((((_2660 * _2311) + _1067) * cbLight._m0[_2611].y) * _2679) * _2680) + _2484;
        _2600 = (((((_2660 * _2312) + _1068) * cbLight._m0[_2611].z) * _2679) * _2680) + _2486;
    }
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_2120.y == 0u)
    {
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2755;
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2755;
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2755;
        uvec4 _2770 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2771 = _2770.x;
        uint _2782 = uint((float(_2770.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1004) / _2771))) + floor(float(uint(cbSceneParam._m0[85u].x * _1003) / _2771)));
        float _2792 = (log2(_2758 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2793 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        uint _2796 = uint(isnan(14.0) ? _2793 : (isnan(_2793) ? 14.0 : min(_2793, 14.0)));
        uvec4 _2801 = texelFetch(g_lightClusterGridBuffer, int(((_2796 << 2u) + (_2782 << 6u)) >> 2u));
        uint _2802 = _2801.x;
        uint _2803 = _2770.z;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((((1u << ((_2803 >> 4u) & 15u)) + 4294967295u) & _2802) == 0u) || ((_2803 & 240u) == 0u))
        {
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
        }
        else
        {
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            uint _3054 = 0u;
            uint _3063;
            bool _3064;
            for (;;)
            {
                _3063 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3054 << 2u)) >> 2u)).x;
                _3064 = _3063 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3064)
                {
                    frontier_phi_61_pred = _3048;
                    frontier_phi_61_pred_1 = _3053;
                    frontier_phi_61_pred_2 = _3052;
                    frontier_phi_61_pred_3 = _3051;
                    frontier_phi_61_pred_4 = _3050;
                    frontier_phi_61_pred_5 = _3049;
                }
                else
                {
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    uint _3178;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3063;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    for (;;)
                    {
                        uint _3182 = uint(findLSB(_3178)) + (_3054 << 5u);
                        uint _3179 = (_3178 + 4294967295u) & _3178;
                        uint _3184 = _3182 * 48u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3204 = (_3182 * 48u) + 4u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3223 = (_3182 * 48u) + 8u;
                        vec3 _3234 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x));
                        float _3238 = _3198.x - _2756;
                        float _3239 = _3198.y - _2757;
                        float _3240 = _3198.z - _2758;
                        float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                        float _3244 = inversesqrt(_3241);
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3248 = dot(vec3(_1022, _1025, _1028), vec3(_3245, _3246, _3247));
                        float _3253 = 1.0 - (_3241 * _3198.w);
                        float _4609 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3255 = sqrt(_3241) * _3217.w;
                        float _3258 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3248) + _3259;
                        float _3265 = _3255 * _3255;
                        float _3269 = ((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3254) / ((_3265 * 0.699999988079071044921875) + 1.0);
                        float _3273 = (-0.0) - _2756;
                        float _3274 = (-0.0) - _2757;
                        float _3275 = (-0.0) - _2758;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3290 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                        float _3291 = 1.0 - _1097;
                        float _3298 = sqrt(1.0 - ((1.0 - (_3291 * _3291)) * (1.0 - (_3290 * _3290))));
                        float _3299 = _3298 * _3298;
                        float _3300 = _3299 * _3299;
                        float _3301 = _3280 + _3245;
                        float _3302 = _3281 + _3246;
                        float _3303 = _3282 + _3247;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3311 = dot(vec3(_1022, _1025, _1028), vec3(_3280, _3281, _3282));
                        float _4625 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3315 = dot(vec3(_1022, _1025, _1028), vec3(_3307 * _3301, _3307 * _3302, _3307 * _3303));
                        float _4636 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3322 = ((_3318 * _3318) * (_3300 + (-1.0))) + 1.0;
                        float _3323 = _3258 * _3299;
                        float _3324 = _3323 * _3323;
                        float _3327 = ((1.0 - _3324) * _3248) + _3324;
                        float _4647 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3329 = 1.0 - _3299;
                        float _3339 = (0.5 / (((_3328 * ((_3314 * _3329) + _3299)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3299) * _3314))) * _3328;
                        float _4658 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3350 = (((_3300 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3322 * _3322) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125))) * _3254;
                        _3107 = (_3269 * _3217.x) + _3175;
                        _3108 = (_3269 * _3217.y) + _3176;
                        _3109 = (_3269 * _3217.z) + _3177;
                        _3104 = (_3350 * _3234.x) + _3172;
                        _3105 = (_3350 * _3234.y) + _3173;
                        _3106 = (_3350 * _3234.z) + _3174;
                        if (_3179 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3179;
                        }
                    }
                    frontier_phi_61_pred = _3104;
                    frontier_phi_61_pred_1 = _3109;
                    frontier_phi_61_pred_2 = _3108;
                    frontier_phi_61_pred_3 = _3107;
                    frontier_phi_61_pred_4 = _3106;
                    frontier_phi_61_pred_5 = _3105;
                }
                _2904 = frontier_phi_61_pred;
                _2914 = frontier_phi_61_pred_1;
                _2912 = frontier_phi_61_pred_2;
                _2910 = frontier_phi_61_pred_3;
                _2908 = frontier_phi_61_pred_4;
                _2906 = frontier_phi_61_pred_5;
                uint _3055 = _3054 + 1u;
                if (_3055 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3048 = _2904;
                    _3049 = _2906;
                    _3050 = _2908;
                    _3051 = _2910;
                    _3052 = _2912;
                    _3053 = _2914;
                    _3054 = _3055;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
        }
        uvec4 _2917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2918 = _2917.z;
        uint _2920 = (_2918 >> 8u) & 15u;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        if (((4294967295u << _2920) & _2802) == 0u)
        {
            _3016 = _2903;
            _3018 = _2905;
            _3020 = _2907;
            _3022 = _2909;
            _3024 = _2911;
            _3026 = _2913;
        }
        else
        {
            float _3041 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
            float _3042 = _3041 * _2756;
            float _3043 = _3041 * _2757;
            float _3044 = _3041 * _2758;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2920 < ((_2918 >> 12u) & 15u))
            {
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3155 = _2903;
                float _3156 = _2905;
                float _3157 = _2907;
                float _3158 = _2909;
                float _3159 = _2911;
                float _3160 = _2913;
                uint _3161 = _2920;
                uint _3170;
                bool _3171;
                for (;;)
                {
                    _3170 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                    _3171 = _3170 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3171)
                    {
                        frontier_phi_67_pred = _3158;
                        frontier_phi_67_pred_1 = _3159;
                        frontier_phi_67_pred_2 = _3160;
                        frontier_phi_67_pred_3 = _3157;
                        frontier_phi_67_pred_4 = _3156;
                        frontier_phi_67_pred_5 = _3155;
                    }
                    else
                    {
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3368 = _3155;
                        float _3369 = _3156;
                        float _3370 = _3157;
                        float _3371 = _3158;
                        float _3372 = _3159;
                        float _3373 = _3160;
                        uint _3374 = _3170;
                        uint _3375;
                        vec4 _3400;
                        float _3401;
                        vec4 _3416;
                        vec3 _3428;
                        vec4 _3443;
                        vec4 _3458;
                        float _3504;
                        bool _3505;
                        for (;;)
                        {
                            uint _3385 = ((_3161 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3374));
                            _3375 = (_3374 + 4294967295u) & _3374;
                            uint _3387 = _3385 * 40u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3401 = _3400.w;
                            uint _3403 = (_3385 * 40u) + 4u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3385 * 40u) + 8u;
                            _3428 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x));
                            uint _3430 = (_3385 * 40u) + 16u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3385 * 40u) + 20u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3385 * 40u) + 24u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3479 = (_3385 * 40u) + 28u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3504 = fma(_2758, _3492.z, fma(_2757, _3492.y, _3492.x * _2756)) + _3492.w;
                            _3505 = !((fma(_2758, _3473.z, fma(_2757, _3473.y, _3473.x * _2756)) + _3473.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3505)
                            {
                                float _3532 = _3400.x - _2756;
                                float _3533 = _3400.y - _2757;
                                float _3534 = _3400.z - _2758;
                                float _3535 = dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534));
                                float _3538 = inversesqrt(_3535);
                                float _3539 = _3538 * _3532;
                                float _3540 = _3538 * _3533;
                                float _3541 = _3538 * _3534;
                                float _3545 = 1.0 - (_3535 / (_3401 * _3401));
                                float _4669 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3550 = sqrt(_3535) * _3416.w;
                                float _3552 = 1.39999997615814208984375 / (_3550 + 1.39999997615814208984375);
                                float _3553 = _3552 * _3552;
                                float _3556 = ((1.0 - _3553) * dot(vec3(_3539, _3540, _3541), vec3(_1022, _1025, _1028))) + _3553;
                                float _3559 = _3550 * _3550;
                                float _3563 = (fma(_2758, _3443.z, fma(_2757, _3443.y, _3443.x * _2756)) + _3443.w) / _3504;
                                float _3564 = (fma(_2758, _3458.z, fma(_2757, _3458.y, _3458.x * _2756)) + _3458.w) / _3504;
                                float _3568 = 1.0 - dot(vec2(_3563, _3564), vec2(_3563, _3564));
                                float _4685 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3570 = _3569 * (((isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0))) * _3546) / ((_3559 * 0.699999988079071044921875) + 1.0));
                                float _3582 = exp2(log2(1.0 / ((_3559 * 3.5) + 5.0)) * 0.25);
                                float _3583 = 1.0 - _1097;
                                float _3590 = sqrt(1.0 - ((1.0 - (_3583 * _3583)) * (1.0 - (_3582 * _3582))));
                                float _3591 = _3590 * _3590;
                                float _3592 = _3591 * _3591;
                                float _3593 = _3539 - _3042;
                                float _3594 = _3540 - _3043;
                                float _3595 = _3541 - _3044;
                                float _3599 = inversesqrt(dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595)));
                                float _3603 = dot(vec3(_1022, _1025, _1028), vec3((-0.0) - _3042, (-0.0) - _3043, (-0.0) - _3044));
                                float _4696 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3607 = dot(vec3(_1022, _1025, _1028), vec3(_3599 * _3593, _3599 * _3594, _3599 * _3595));
                                float _4707 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3610 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3614 = ((_3610 * _3610) * (_3592 + (-1.0))) + 1.0;
                                float _3615 = _3552 * _3591;
                                float _3616 = _3615 * _3615;
                                float _3622 = ((1.0 - _3616) * dot(vec3(_1022, _1025, _1028), vec3(_3539, _3540, _3541))) + _3616;
                                float _4718 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3624 = 1.0 - _3591;
                                float _3634 = (0.5 / (((_3623 * ((_3606 * _3624) + _3591)) + 9.9999999392252902907785028219223e-09) + (((_3623 * _3624) + _3591) * _3606))) * _3623;
                                float _4729 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3644 = (_3569 * _3546) * (((_3592 * 3.1415927410125732421875) * (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) / ((_3614 * _3614) * ((_3559 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3644 * _3428.x;
                                frontier_phi_73_pred_1 = _3644 * _3428.y;
                                frontier_phi_73_pred_2 = _3570 * _3416.z;
                                frontier_phi_73_pred_3 = _3570 * _3416.y;
                                frontier_phi_73_pred_4 = _3570 * _3416.x;
                                frontier_phi_73_pred_5 = _3644 * _3428.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3648 = frontier_phi_73_pred;
                            _3649 = frontier_phi_73_pred_1;
                            _3653 = frontier_phi_73_pred_2;
                            _3652 = frontier_phi_73_pred_3;
                            _3651 = frontier_phi_73_pred_4;
                            _3650 = frontier_phi_73_pred_5;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            if (_3375 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3375;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3358;
                        frontier_phi_67_pred_1 = _3359;
                        frontier_phi_67_pred_2 = _3360;
                        frontier_phi_67_pred_3 = _3357;
                        frontier_phi_67_pred_4 = _3356;
                        frontier_phi_67_pred_5 = _3355;
                    }
                    _3023 = frontier_phi_67_pred;
                    _3025 = frontier_phi_67_pred_1;
                    _3027 = frontier_phi_67_pred_2;
                    _3021 = frontier_phi_67_pred_3;
                    _3019 = frontier_phi_67_pred_4;
                    _3017 = frontier_phi_67_pred_5;
                    uint _3162 = _3161 + 1u;
                    if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3155 = _3017;
                        _3156 = _3019;
                        _3157 = _3021;
                        _3158 = _3023;
                        _3159 = _3025;
                        _3160 = _3027;
                        _3161 = _3162;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3025;
                frontier_phi_55_56_ladder_1 = _3027;
                frontier_phi_55_56_ladder_2 = _3023;
                frontier_phi_55_56_ladder_3 = _3021;
                frontier_phi_55_56_ladder_4 = _3019;
                frontier_phi_55_56_ladder_5 = _3017;
            }
            else
            {
                frontier_phi_55_56_ladder = _2911;
                frontier_phi_55_56_ladder_1 = _2913;
                frontier_phi_55_56_ladder_2 = _2909;
                frontier_phi_55_56_ladder_3 = _2907;
                frontier_phi_55_56_ladder_4 = _2905;
                frontier_phi_55_56_ladder_5 = _2903;
            }
            _3016 = frontier_phi_55_56_ladder_5;
            _3018 = frontier_phi_55_56_ladder_4;
            _3020 = frontier_phi_55_56_ladder_3;
            _3022 = frontier_phi_55_56_ladder_2;
            _3024 = frontier_phi_55_56_ladder;
            _3026 = frontier_phi_55_56_ladder_1;
        }
        float _3031 = isnan(1.0) ? _1081 : (isnan(_1081) ? 1.0 : min(_1081, 1.0));
        _2815 = (_3031 * _3022) + _2251;
        _2817 = (_3031 * _3024) + _2253;
        _2819 = (_3031 * _3026) + _2255;
        _2821 = ((_3016 * _1065) * _3031) + _2596;
        _2823 = ((_3018 * _1067) * _3031) + _2598;
        _2825 = ((_3020 * _1068) * _3031) + _2600;
    }
    else
    {
        _2815 = _2251;
        _2817 = _2253;
        _2819 = _2255;
        _2821 = _2596;
        _2823 = _2598;
        _2825 = _2600;
    }
    float _4745 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _4756 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _4767 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    uint _2845 = _285 + 6u;
    float _2853 = _1003 / cbSceneParam._m0[86u].x;
    float _2854 = _1004 / cbSceneParam._m0[86u].y;
    vec4 _2868 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, (log2((isnan(cbSceneParam._m0[77u].w) ? _938 : (isnan(_938) ? cbSceneParam._m0[77u].w : min(_938, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2870 = _2868.x;
    float _2871 = _2868.y;
    float _2872 = _2868.z;
    float _2873 = _2868.w;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    if (_938 > cbSceneParam._m0[78u].w)
    {
        float _2928 = isnan(_938) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _938 : min(cbSceneParam._m0[80u].w, _938));
        float _2929 = _2928 / _938;
        float _2940 = _2929 * _988;
        float _2941 = _989 * _2929;
        float _2942 = (-0.0) - _2941;
        float _2944 = _2929 * _990;
        float _2946 = (cbSceneParam._m0[77u].w * _2942) / _2928;
        float _2947 = _2946 + cbSceneParam._m0[79u].w;
        float _2948 = cbSceneParam._m0[79u].w - _2941;
        float _2954 = sqrt(((_2940 * _2940) + (_2941 * _2941)) + (_2944 * _2944));
        float _2957 = (1.0 - (cbSceneParam._m0[77u].w / _2928)) * _2954;
        float _2962 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2964 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3117;
        if (abs((_2942 - _2946) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3117 = ((((_2947 > 0.0) ? exp2(_2962 * _2947) : (2.0 - exp2(_2964 * _2947))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2957;
        }
        else
        {
            float _3077 = 1.0 / cbSceneParam._m0[80u].x;
            float _3078 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : max(_2947, _2948));
            float _3079 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : min(_2947, _2948));
            float _3088 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : min(_3078, 0.0));
            float _3089 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : min(_3079, 0.0));
            _3117 = ((abs(_2954 / _2942) * cbSceneParam._m0[80u].y) * ((((_3088 - _3089) * 2.0) - ((exp2(_2962 * (isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0)))) - exp2(_2962 * (isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))))) * _3077)) - ((exp2(_2964 * _3088) - exp2(_2964 * _3089)) * _3077))) + (_2957 * cbSceneParam._m0[80u].z);
        }
        vec4 _3119 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, 1.0), 0.0);
        float _3128 = exp2((_3117 * (-1.44269502162933349609375)) * (1.0 - _3119.w));
        float _3129 = log2(_3128);
        float _3145 = log2(_2873);
        _2966 = (exp2(_3145 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].x)) * _3119.x) / cbSceneParam._m0[78u].x)) + _2870;
        _2968 = (exp2(_3145 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].y)) * _3119.y) / cbSceneParam._m0[78u].y)) + _2871;
        _2970 = (exp2(_3145 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].z)) * _3119.z) / cbSceneParam._m0[78u].z)) + _2872;
        _2972 = _3128 * _2873;
    }
    else
    {
        _2966 = _2870;
        _2968 = _2871;
        _2970 = _2872;
        _2972 = _2873;
    }
    float _2984 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2985 = _2984 == 3.0;
    float _2986 = log2(_2972);
    float _2993 = exp2(_2986 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2815 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1081))) + ((_2821 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _2994 = exp2(_2986 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2817 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1081))) + ((_2823 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _2995 = exp2(_2986 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2819 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1081))) + ((_2825 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3004 = (_2984 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3004 * (_2985 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2966)));
    SV_Target.y = _3004 * (_2985 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2968)));
    SV_Target.z = _3004 * (_2985 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2970)));
    SV_Target.w = cbInstanceData._m0[_2845].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2845].w;
}


