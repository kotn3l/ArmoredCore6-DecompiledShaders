#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1205;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _368 = _366.x;
    float _380 = dot(vec4(_368, _366.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _397 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_368 - _380) * cbMtdParam._m0[23u].w) + _380) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3559 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _405 = (_398 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _406 = (_398 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _407 = (_398 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _439 = _437.x;
    float _440 = _437.y;
    float _441 = _437.z;
    float _450 = ((_420.z - _441) * _398) + _441;
    float _453 = ((((_420.x - _439) * _398) + _439) * 2.0) + (-1.0);
    float _455 = ((((_420.y - _440) * _398) + _440) * 2.0) + (-1.0);
    float _456 = dot(vec2(_453, _455), vec2(_453, _455));
    float _3570 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _461 = sqrt(1.0 - (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))));
    vec4 _477 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _489 = (((_477.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _453;
    float _490 = (((_477.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _455;
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _504 = _502.x;
    float _505 = 1.0 - _504;
    float _534 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_504 - _505) * cbMtdParam._m0[24u].w) + _505) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3581 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _543 = ((((cbMtdParam._m0[10u].x - _405) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _535) + _405;
    float _544 = ((((cbMtdParam._m0[10u].y - _406) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _535) + _406;
    float _545 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _407)) * _535) + _407;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _573 = _571.x;
    float _591 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _573) * _398) + _573;
    float _595 = ((_557.x - _591) * cbMtdParam._m0[19u].z) + _591;
    float _597 = _595 - (_595 * _535);
    float _601 = (cbMtdParam._m0[19u].w * (_477.z - _450)) + _450;
    float _605 = ((cbMtdParam._m0[23u].x - _601) * _535) + _601;
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _630 = (_624.x * 2.0) + (-1.0);
    float _631 = (_624.y * 2.0) + (-1.0);
    float _632 = dot(vec2(_630, _631), vec2(_630, _631));
    float _3592 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _648 = (_535 * (((cbMtdParam._m0[22u].z * _489) - _489) + _630)) + _489;
    float _649 = (_535 * (((cbMtdParam._m0[22u].z * _490) - _490) + _631)) + _490;
    float _650 = (_535 * (sqrt(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) - _461)) + _461;
    float _652 = cbMtdParam._m0[22u].x + _477.w;
    float _655 = fma(_650, _234 * NORMAL.x, fma(_649, _241 * TANGENT.x, (_227 * _219) * _648));
    float _658 = fma(_650, _234 * NORMAL.y, fma(_649, _241 * TANGENT.y, (_227 * _220) * _648));
    float _661 = fma(_650, _234 * NORMAL.z, fma(_649, _241 * TANGENT.z, (_227 * _221) * _648));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    float _666 = _665 * _655;
    float _667 = _665 * _658;
    float _668 = _665 * _661;
    float _3603 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _669 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _3625 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3636 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3647 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3658 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _674 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _738 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _728);
    float _739 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _728);
    float _740 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _728);
    float _744 = inversesqrt(dot(vec3(_738, _739, _740), vec3(_738, _739, _740)));
    float _745 = _738 * _744;
    float _746 = _739 * _744;
    float _747 = _740 * _744;
    float _753 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _754 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _772 = fma(_668, cbSceneParam._m0[5u].z, fma(_667, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _666));
    float _775 = fma(_668, cbSceneParam._m0[6u].z, fma(_667, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _666));
    float _778 = fma(_668, cbSceneParam._m0[7u].z, fma(_667, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _666));
    uint _792 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _798 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_792].x;
    float _799 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_792].y;
    float _800 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_792].z;
    float _3669 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _804 = 1.0 - _674;
    float _805 = _801 * _804;
    float _806 = _802 * _804;
    float _807 = _803 * _804;
    float _812 = (_801 + (-0.039999999105930328369140625)) * _674;
    float _813 = (_802 + (-0.039999999105930328369140625)) * _674;
    float _814 = (_803 + (-0.039999999105930328369140625)) * _674;
    float _815 = _812 + 0.039999999105930328369140625;
    float _817 = _813 + 0.039999999105930328369140625;
    float _818 = _814 + 0.039999999105930328369140625;
    vec4 _827 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _753, cbSceneParam._m0[86u].y * _754));
    float _831 = ((isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * TEXCOORD_5.w) * _827.x;
    float _832 = dot(vec3(_666, _667, _668), vec3(_745, _746, _747));
    float _835 = _832 * 2.0;
    float _839 = (_835 * _666) - _745;
    float _840 = (_835 * _667) - _746;
    float _841 = (_835 * _668) - _747;
    float _845 = abs(dot(vec3(_745, _746, _747), vec3(_666, _667, _668)));
    float _3702 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _847 = sqrt(_669);
    float _860 = exp2((_847 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_847 * 3.0));
    float _866 = (1.0 - _860) * ((_847 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _867 = _860 * _847;
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1204;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _929 = fma(_903, cbModelParam._m0[26u].z, fma(_899, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _895));
        float _933 = fma(_903, cbModelParam._m0[27u].z, fma(_899, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _895));
        float _937 = fma(_903, cbModelParam._m0[28u].z, fma(_899, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _895));
        float _962 = _895 + _666;
        float _963 = _899 + _667;
        float _964 = _903 + _668;
        float _974 = fma(_964, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _962)) - _929;
        float _975 = fma(_964, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _962)) - _933;
        float _976 = fma(_964, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _962)) - _937;
        float _980 = inversesqrt(dot(vec3(_974, _975, _976), vec3(_974, _975, _976)));
        float _993 = ((_980 * _974) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_929 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_980 * _975) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_933 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_980 * _976) / cbModelParam._m0[34u].z) + ((((((_937 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        float _1032 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_998.x + (-0.5));
        float _1034 = _1032 * (_998.y + (-0.5));
        float _1035 = _1032 * (_998.z + (-0.5));
        float _1042 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1005.x + (-0.5));
        float _1044 = _1042 * (_1005.y + (-0.5));
        float _1045 = _1042 * (_1005.z + (-0.5));
        float _1052 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1012.x + (-0.5));
        float _1054 = _1052 * (_1012.y + (-0.5));
        float _1055 = _1052 * (_1012.z + (-0.5));
        float _1062 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1019.x + (-0.5));
        float _1064 = _1062 * (_1019.y + (-0.5));
        float _1065 = _1062 * (_1019.z + (-0.5));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = _1033 * 0.5;
        float _1070 = _1043 * 0.5;
        float _1071 = _1053 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1086 = (dot(vec3(_666, _667, _668), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1096 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3750 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1098 + 1.0))) + _1103) * _1066;
        float _1113 = _1034 * 0.5;
        float _1114 = _1044 * 0.5;
        float _1115 = _1054 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_666, _667, _668), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3783 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1140 + 1.0))) + _1145) * _1067;
        float _1155 = _1035 * 0.5;
        float _1156 = _1045 * 0.5;
        float _1157 = _1055 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_666, _667, _668), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3816 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1182 + 1.0))) + _1187) * _1068;
        _1204 = _1035;
        _1206 = _1034;
        _1207 = _1033;
        _1208 = _1045;
        _1209 = _1044;
        _1210 = _1043;
        _1211 = _1055;
        _1212 = _1054;
        _1213 = _1053;
        _1214 = _1068;
        _1215 = _1067;
        _1216 = _1066;
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
    }
    else
    {
        _1204 = _1205;
        _1206 = _1205;
        _1207 = _1205;
        _1208 = _1205;
        _1209 = _1205;
        _1210 = _1205;
        _1211 = _1205;
        _1212 = _1205;
        _1213 = _1205;
        _1214 = _1205;
        _1215 = _1205;
        _1216 = _1205;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1244 = fma(_903, cbModelParam._m0[30u].z, fma(_899, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _895));
        float _1248 = fma(_903, cbModelParam._m0[31u].z, fma(_899, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _895));
        float _1252 = fma(_903, cbModelParam._m0[32u].z, fma(_899, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _895));
        float _1275 = _895 + _666;
        float _1276 = _899 + _667;
        float _1277 = _903 + _668;
        float _1287 = fma(_1277, cbModelParam._m0[30u].z, fma(_1276, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1275)) - _1244;
        float _1288 = fma(_1277, cbModelParam._m0[31u].z, fma(_1276, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1275)) - _1248;
        float _1289 = fma(_1277, cbModelParam._m0[32u].z, fma(_1276, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1275)) - _1252;
        float _1293 = inversesqrt(dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289)));
        float _1306 = ((_1293 * _1287) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1244 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1293 * _1288) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1248 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1293 * _1289) / cbModelParam._m0[35u].z) + ((((((_1252 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        float _1343 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1310.x + (-0.5));
        float _1345 = _1343 * (_1310.y + (-0.5));
        float _1346 = _1343 * (_1310.z + (-0.5));
        float _1353 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1317.x + (-0.5));
        float _1355 = _1353 * (_1317.y + (-0.5));
        float _1356 = _1353 * (_1317.z + (-0.5));
        float _1363 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1324.x + (-0.5));
        float _1365 = _1363 * (_1324.y + (-0.5));
        float _1366 = _1363 * (_1324.z + (-0.5));
        float _1373 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1331.x + (-0.5));
        float _1375 = _1373 * (_1331.y + (-0.5));
        float _1376 = _1373 * (_1331.z + (-0.5));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = _1344 * 0.5;
        float _1381 = _1354 * 0.5;
        float _1382 = _1364 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_666, _667, _668), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3879 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1407 + 1.0))) + _1412) * _1377;
        float _1422 = _1345 * 0.5;
        float _1423 = _1355 * 0.5;
        float _1424 = _1365 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_666, _667, _668), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _3912 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1449 + 1.0))) + _1454) * _1378;
        float _1464 = _1346 * 0.5;
        float _1465 = _1356 * 0.5;
        float _1466 = _1366 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_666, _667, _668), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _3945 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1491 + 1.0))) + _1496) * _1379;
        _1513 = _1346;
        _1514 = _1345;
        _1515 = _1344;
        _1516 = _1356;
        _1517 = _1355;
        _1518 = _1354;
        _1519 = _1366;
        _1520 = _1365;
        _1521 = _1364;
        _1522 = _1379;
        _1523 = _1378;
        _1524 = _1377;
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
    }
    else
    {
        _1513 = _1205;
        _1514 = _1205;
        _1515 = _1205;
        _1516 = _1205;
        _1517 = _1205;
        _1518 = _1205;
        _1519 = _1205;
        _1520 = _1205;
        _1521 = _1205;
        _1522 = _1205;
        _1523 = _1205;
        _1524 = _1205;
        _1525 = 0.0;
        _1526 = 0.0;
        _1527 = 0.0;
    }
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1217)) + _1217;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1218)) + _1218;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1219)) + _1219;
    float _1560 = fma(_1539, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1539, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1539, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1537));
    float _1581 = _839 * 0.5;
    float _1582 = _840 * 0.5;
    float _1583 = _841 * 0.5;
    float _1584 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1587 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1590 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1624;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1597 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1204, _1208, _1211, _1214));
        float _1601 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1206, _1209, _1212, _1215));
        float _1605 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1207, _1210, _1213, _1216));
        float _1612 = dot(vec4(cbModelParam._m0[39u]), vec4(_1581, _1582, _1583, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1612) ? 0.0 : (isnan(0.0) ? _1612 : max(0.0, _1612))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1635;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1626 = dot(vec4(cbModelParam._m0[40u]), vec4(_1581, _1582, _1583, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1639 = (_1635 * cbModelParam._m0[1u].x) + (_1624 * (1.0 - cbModelParam._m0[1u].x));
    float _1649 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _669);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1649 : min(cbModelParam._m0[25u].z, _1649));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1699 = fma(_903, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _895)) + cbModelParam._m0[13u].w;
        float _1703 = fma(_903, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _895)) + cbModelParam._m0[14u].w;
        float _1707 = fma(_903, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _895)) + cbModelParam._m0[15u].w;
        float _1710 = fma(_841, cbModelParam._m0[13u].z, fma(_840, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839));
        float _1713 = fma(_841, cbModelParam._m0[14u].z, fma(_840, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839));
        float _1716 = fma(_841, cbModelParam._m0[15u].z, fma(_840, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839));
        float _1744;
        if (_1710 > 0.0)
        {
            _1744 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1744 = frontier_phi_14_12_ladder;
        }
        float _1969;
        if (_1713 > 0.0)
        {
            _1969 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1969 = frontier_phi_23_19_ladder;
        }
        float _2226;
        if (_1716 > 0.0)
        {
            _2226 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2226 = frontier_phi_35_30_ladder;
        }
        float _2228 = isnan(_1969) ? _1744 : (isnan(_1744) ? _1969 : min(_1744, _1969));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1710) + _1699;
        float _2234 = (_2229 * _1713) + _1703;
        float _2235 = (_2229 * _1716) + _1707;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2238 = (-1.0) - _2236;
        float _2240 = _2236 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2235 > _2240) || ((_2235 < _2238) || ((_2234 > _2240) || ((_2234 < _2238) || ((_2233 < _2238) || (_2233 > _2240))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2235, cbModelParam._m0[9u].z, fma(_2234, cbModelParam._m0[9u].y, _2233 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2235, cbModelParam._m0[10u].z, fma(_2234, cbModelParam._m0[10u].y, _2233 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2235, cbModelParam._m0[11u].z, fma(_2234, cbModelParam._m0[11u].y, _2233 * cbModelParam._m0[11u].x))), _1650);
            frontier_phi_13_35_ladder = _2363.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2363.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2363.x * cbModelParam._m0[1u].y;
        }
        _1732 = frontier_phi_13_35_ladder_2;
        _1734 = frontier_phi_13_35_ladder_1;
        _1736 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_839, _840, _841), _1650);
        _1732 = _1720.x * cbModelParam._m0[1u].y;
        _1734 = _1720.y * cbModelParam._m0[1u].y;
        _1736 = _1720.z * cbModelParam._m0[1u].y;
    }
    float _1740 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _669);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1740 : min(cbModelParam._m0[25u].w, _1740));
    float _1832;
    float _1834;
    float _1836;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1796 = fma(_903, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _895)) + cbModelParam._m0[21u].w;
        float _1800 = fma(_903, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _895)) + cbModelParam._m0[22u].w;
        float _1804 = fma(_903, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _895)) + cbModelParam._m0[23u].w;
        float _1807 = fma(_841, cbModelParam._m0[21u].z, fma(_840, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839));
        float _1810 = fma(_841, cbModelParam._m0[22u].z, fma(_840, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839));
        float _1813 = fma(_841, cbModelParam._m0[23u].z, fma(_840, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839));
        float _1974;
        if (_1807 > 0.0)
        {
            _1974 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1974 = frontier_phi_25_21_ladder;
        }
        float _2253;
        if (_1810 > 0.0)
        {
            _2253 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2253 = frontier_phi_37_32_ladder;
        }
        float _2466;
        if (_1813 > 0.0)
        {
            _2466 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2466 = frontier_phi_46_43_ladder;
        }
        float _2468 = isnan(_2253) ? _1974 : (isnan(_1974) ? _2253 : min(_1974, _2253));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1807) + _1796;
        float _2474 = (_2469 * _1810) + _1800;
        float _2475 = (_2469 * _1813) + _1804;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2476;
        float _2479 = _2476 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2475 > _2479) || ((_2475 < _2477) || ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 < _2477) || (_2473 > _2479))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2475, cbModelParam._m0[17u].z, fma(_2474, cbModelParam._m0[17u].y, _2473 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2475, cbModelParam._m0[18u].z, fma(_2474, cbModelParam._m0[18u].y, _2473 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2475, cbModelParam._m0[19u].z, fma(_2474, cbModelParam._m0[19u].y, _2473 * cbModelParam._m0[19u].x))), _1741);
            frontier_phi_22_46_ladder = _2674.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2674.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2674.x * cbModelParam._m0[1u].z;
        }
        _1832 = frontier_phi_22_46_ladder_2;
        _1834 = frontier_phi_22_46_ladder_1;
        _1836 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_839, _840, _841), _1741);
        _1832 = _1816.x * cbModelParam._m0[1u].z;
        _1834 = _1816.y * cbModelParam._m0[1u].z;
        _1836 = _1816.z * cbModelParam._m0[1u].z;
    }
    float _1849 = (((_866 * _815) + _867) * _831) * ((cbModelParam._m0[1u].w * (_1832 - _1732)) + _1732);
    float _1851 = (((_866 * _817) + _867) * _831) * ((cbModelParam._m0[1u].w * (_1834 - _1734)) + _1734);
    float _1853 = (((_866 * _818) + _867) * _831) * ((cbModelParam._m0[1u].w * (_1836 - _1736)) + _1736);
    float _1856 = fma(_1853, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1849 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1853, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1849 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1853, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, _1849 * cbSceneParam._m0[91u].x));
    vec4 _1870 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_753, _754));
    float _1872 = _1870.w;
    float _1884 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1872);
    float _1885 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1872);
    float _1886 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1872);
    uvec4 _1890 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1892 = _1890.x * 14u;
    uint _1893 = _1892 + 13u;
    float _1900 = _831 + (-1.0);
    float _1905 = (cbLight._m0[_1893].x * _1900) + 1.0;
    float _1906 = (cbLight._m0[_1893].y * _1900) + 1.0;
    float _1907 = (cbLight._m0[_1893].z * _1900) + 1.0;
    float _1908 = (cbLight._m0[_1893].w * _1900) + 1.0;
    uint _1909 = _1892 + 5u;
    float _1915 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1919 = _1892 + 4u;
    float _1928 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    uint _1932 = _1892 | 1u;
    float _1943 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_666, _667, _668));
    float _1946 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_666, _667, _668));
    float _4081 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _4092 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1951 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1953 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * 0.3183098733425140380859375;
    float _1960 = ((cbLight._m0[_1909].x * _1915) * _1953) + (((cbLight._m0[_1919].x * _1884) * _1928) * _1951);
    float _1961 = ((_1915 * cbLight._m0[_1909].y) * _1953) + (((cbLight._m0[_1919].y * _1885) * _1928) * _1951);
    float _1962 = ((_1915 * cbLight._m0[_1909].z) * _1953) + (((cbLight._m0[_1919].z * _1886) * _1928) * _1951);
    uvec4 _1966 = floatBitsToUint(cbLight._m0[_1892 + 12u]);
    bool _1968 = _1966.x == 0u;
    float _1979;
    float _1981;
    float _1983;
    if (_1968)
    {
        _1979 = _1960;
        _1981 = _1961;
        _1983 = _1962;
    }
    else
    {
        uint _1987 = _1892 + 6u;
        float _2003 = (dot(vec3(cbLight._m0[_1892 + 2u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2004 = _2003 * _2003;
        float _4103 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2005 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2006 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _1979 = (((cbLight._m0[_1987].x * 0.3183098733425140380859375) * _2005) * _2006) + _1960;
        _1981 = (((cbLight._m0[_1987].y * 0.3183098733425140380859375) * _2005) * _2006) + _1961;
        _1983 = (((cbLight._m0[_1987].z * 0.3183098733425140380859375) * _2005) * _2006) + _1962;
    }
    bool _1986 = _1966.y == 0u;
    float _2024;
    float _2026;
    float _2028;
    if (_1986)
    {
        _2024 = _1979;
        _2026 = _1981;
        _2028 = _1983;
    }
    else
    {
        uint _2197 = _1892 + 7u;
        float _2213 = (dot(vec3(cbLight._m0[_1892 + 3u].xyz), vec3(_666, _667, _668)) * 0.5) + 0.5;
        float _2214 = _2213 * _2213;
        float _4119 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2215 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2216 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2024 = (((cbLight._m0[_2197].x * 0.3183098733425140380859375) * _2215) * _2216) + _1979;
        _2026 = (((cbLight._m0[_2197].y * 0.3183098733425140380859375) * _2215) * _2216) + _1981;
        _2028 = (((cbLight._m0[_2197].z * 0.3183098733425140380859375) * _2215) * _2216) + _1983;
    }
    uint _2031 = _1892 + 8u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _669) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1892].x + _745;
    float _2047 = cbLight._m0[_1892].y + _746;
    float _2048 = cbLight._m0[_1892].z + _747;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1892].xyz));
    float _4135 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _2060 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2061 = dot(vec3(_666, _667, _668), vec3(_2053, _2054, _2055));
    float _4157 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2053, _2054, _2055));
    float _4168 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2069 = _2045 * _2045;
    float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
    float _2081 = exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0);
    float _2082 = 0.959999978542327880859375 - _812;
    float _2084 = 0.959999978542327880859375 - _813;
    float _2085 = 0.959999978542327880859375 - _814;
    float _2092 = 1.0 - _2045;
    float _2103 = (0.5 / (((_2060 * ((_2059 * _2092) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2092) + _2045) * _2059))) * _2059;
    float _4179 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
    uint _2119 = _1892 + 9u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _669) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_1932].x + _745;
    float _2133 = cbLight._m0[_1932].y + _746;
    float _2134 = cbLight._m0[_1932].z + _747;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1932].xyz));
    float _4190 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2146 = dot(vec3(_666, _667, _668), vec3(_2139, _2140, _2141));
    float _4201 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2150 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2139, _2140, _2141));
    float _4212 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2154 = _2131 * _2131;
    float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
    float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
    float _2172 = 1.0 - _2131;
    float _2182 = (0.5 / (((_2060 * ((_2145 * _2172) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2172) + _2131) * _2145))) * _2145;
    float _4223 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
    float _2194 = (((((_2165 * _2082) + _815) * cbLight._m0[_2119].x) * _2184) * _1915) + ((((cbLight._m0[_2031].x * _1884) * ((_2081 * _2082) + _815)) * _2105) * _1928);
    float _2195 = (((((_2165 * _2084) + _817) * cbLight._m0[_2119].y) * _2184) * _1915) + ((((cbLight._m0[_2031].y * _1885) * ((_2081 * _2084) + _817)) * _2105) * _1928);
    float _2196 = (((((_2165 * _2085) + _818) * cbLight._m0[_2119].z) * _2184) * _1915) + ((((cbLight._m0[_2031].z * _1886) * ((_2081 * _2085) + _818)) * _2105) * _1928);
    float _2258;
    float _2260;
    float _2262;
    if (_1968)
    {
        _2258 = _2194;
        _2260 = _2195;
        _2262 = _2196;
    }
    else
    {
        uint _2264 = _1892 + 2u;
        uint _2268 = _1892 + 10u;
        float _2282 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2264].w)) * _669) * 0.949999988079071044921875);
        float _2283 = _2282 * _2282;
        float _2284 = cbLight._m0[_2264].x + _745;
        float _2285 = cbLight._m0[_2264].y + _746;
        float _2286 = cbLight._m0[_2264].z + _747;
        float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
        float _2291 = _2290 * _2284;
        float _2292 = _2290 * _2285;
        float _2293 = _2290 * _2286;
        float _2294 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2264].xyz));
        float _4234 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2298 = dot(vec3(_666, _667, _668), vec3(_2291, _2292, _2293));
        float _4245 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2302 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_2291, _2292, _2293));
        float _4256 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2306 = _2283 * _2283;
        float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
        float _2317 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
        float _2324 = 1.0 - _2283;
        float _2334 = (0.5 / (((_2060 * ((_2297 * _2324) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2324) + _2283) * _2297))) * _2297;
        float _4267 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2336 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
        float _2337 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2258 = (((((_2317 * _2082) + _815) * cbLight._m0[_2268].x) * _2336) * _2337) + _2194;
        _2260 = (((((_2317 * _2084) + _817) * cbLight._m0[_2268].y) * _2336) * _2337) + _2195;
        _2262 = (((((_2317 * _2085) + _818) * cbLight._m0[_2268].z) * _2336) * _2337) + _2196;
    }
    float _2372;
    float _2374;
    float _2376;
    if (_1986)
    {
        _2372 = _2258;
        _2374 = _2260;
        _2376 = _2262;
    }
    else
    {
        uint _2383 = _1892 + 3u;
        uint _2387 = _1892 + 11u;
        float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _669) * 0.949999988079071044921875);
        float _2402 = _2401 * _2401;
        float _2403 = cbLight._m0[_2383].x + _745;
        float _2404 = cbLight._m0[_2383].y + _746;
        float _2405 = cbLight._m0[_2383].z + _747;
        float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
        float _2410 = _2409 * _2403;
        float _2411 = _2409 * _2404;
        float _2412 = _2409 * _2405;
        float _2413 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_2383].xyz));
        float _4283 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2417 = dot(vec3(_666, _667, _668), vec3(_2410, _2411, _2412));
        float _4294 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2421 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2410, _2411, _2412));
        float _4305 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2425 = _2402 * _2402;
        float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
        float _2436 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
        float _2443 = 1.0 - _2402;
        float _2453 = (0.5 / (((_2060 * ((_2416 * _2443) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2443) + _2402) * _2416))) * _2416;
        float _4316 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2455 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
        float _2456 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2372 = (((((_2436 * _2082) + _815) * cbLight._m0[_2387].x) * _2455) * _2456) + _2258;
        _2374 = (((((_2436 * _2084) + _817) * cbLight._m0[_2387].y) * _2455) * _2456) + _2260;
        _2376 = (((((_2436 * _2085) + _818) * cbLight._m0[_2387].z) * _2455) * _2456) + _2262;
    }
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    if (_1890.y == 0u)
    {
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2531;
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2531;
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2531;
        uvec4 _2546 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2547 = _2546.x;
        uint _2558 = uint((float(_2546.y) * floor(float(uint(cbSceneParam._m0[85u].y * _754) / _2547))) + floor(float(uint(cbSceneParam._m0[85u].x * _753) / _2547)));
        float _2568 = (log2(_2534 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2569 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        uint _2572 = uint(isnan(14.0) ? _2569 : (isnan(_2569) ? 14.0 : min(_2569, 14.0)));
        uvec4 _2577 = texelFetch(g_lightClusterGridBuffer, int(((_2572 << 2u) + (_2558 << 6u)) >> 2u));
        uint _2578 = _2577.x;
        uint _2579 = _2546.z;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        if (((((1u << ((_2579 >> 4u) & 15u)) + 4294967295u) & _2578) == 0u) || ((_2579 & 240u) == 0u))
        {
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
        }
        else
        {
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            uint _2830 = 0u;
            uint _2839;
            bool _2840;
            for (;;)
            {
                _2839 = texelFetch(g_lightClassification, int((((_2572 << 5u) + (_2558 << 9u)) + (_2830 << 2u)) >> 2u)).x;
                _2840 = _2839 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2840)
                {
                    frontier_phi_61_pred = _2824;
                    frontier_phi_61_pred_1 = _2829;
                    frontier_phi_61_pred_2 = _2828;
                    frontier_phi_61_pred_3 = _2827;
                    frontier_phi_61_pred_4 = _2826;
                    frontier_phi_61_pred_5 = _2825;
                }
                else
                {
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    uint _2954;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2839;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    for (;;)
                    {
                        uint _2958 = uint(findLSB(_2954)) + (_2830 << 5u);
                        uint _2955 = (_2954 + 4294967295u) & _2954;
                        uint _2960 = _2958 * 48u;
                        vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2980 = (_2958 * 48u) + 4u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 3u)).x));
                        uint _2999 = (_2958 * 48u) + 8u;
                        vec3 _3010 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x));
                        float _3014 = _2974.x - _2532;
                        float _3015 = _2974.y - _2533;
                        float _3016 = _2974.z - _2534;
                        float _3017 = dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016));
                        float _3020 = inversesqrt(_3017);
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3024 = dot(vec3(_772, _775, _778), vec3(_3021, _3022, _3023));
                        float _3029 = 1.0 - (_3017 * _2974.w);
                        float _4342 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3030 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3031 = sqrt(_3017) * _2993.w;
                        float _3034 = 1.39999997615814208984375 / (_3031 + 1.39999997615814208984375);
                        float _3035 = _3034 * _3034;
                        float _3038 = ((1.0 - _3035) * _3024) + _3035;
                        float _3041 = _3031 * _3031;
                        float _3045 = ((isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))) * _3030) / ((_3041 * 0.699999988079071044921875) + 1.0);
                        float _3049 = (-0.0) - _2532;
                        float _3050 = (-0.0) - _2533;
                        float _3051 = (-0.0) - _2534;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3066 = exp2(log2(1.0 / ((_3041 * 3.5) + 5.0)) * 0.25);
                        float _3067 = 1.0 - _847;
                        float _3074 = sqrt(1.0 - ((1.0 - (_3067 * _3067)) * (1.0 - (_3066 * _3066))));
                        float _3075 = _3074 * _3074;
                        float _3076 = _3075 * _3075;
                        float _3077 = _3056 + _3021;
                        float _3078 = _3057 + _3022;
                        float _3079 = _3058 + _3023;
                        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                        float _3087 = dot(vec3(_772, _775, _778), vec3(_3056, _3057, _3058));
                        float _4358 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3090 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3091 = dot(vec3(_772, _775, _778), vec3(_3083 * _3077, _3083 * _3078, _3083 * _3079));
                        float _4369 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3094 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3098 = ((_3094 * _3094) * (_3076 + (-1.0))) + 1.0;
                        float _3099 = _3034 * _3075;
                        float _3100 = _3099 * _3099;
                        float _3103 = ((1.0 - _3100) * _3024) + _3100;
                        float _4380 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3104 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3105 = 1.0 - _3075;
                        float _3115 = (0.5 / (((_3104 * ((_3090 * _3105) + _3075)) + 9.9999999392252902907785028219223e-09) + (((_3104 * _3105) + _3075) * _3090))) * _3104;
                        float _4391 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3126 = (((_3076 * 3.1415927410125732421875) * (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) / ((_3098 * _3098) * ((_3041 * 2.1991131305694580078125) + 3.141590118408203125))) * _3030;
                        _2883 = (_3045 * _2993.x) + _2951;
                        _2884 = (_3045 * _2993.y) + _2952;
                        _2885 = (_3045 * _2993.z) + _2953;
                        _2880 = (_3126 * _3010.x) + _2948;
                        _2881 = (_3126 * _3010.y) + _2949;
                        _2882 = (_3126 * _3010.z) + _2950;
                        if (_2955 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2955;
                        }
                    }
                    frontier_phi_61_pred = _2880;
                    frontier_phi_61_pred_1 = _2885;
                    frontier_phi_61_pred_2 = _2884;
                    frontier_phi_61_pred_3 = _2883;
                    frontier_phi_61_pred_4 = _2882;
                    frontier_phi_61_pred_5 = _2881;
                }
                _2680 = frontier_phi_61_pred;
                _2690 = frontier_phi_61_pred_1;
                _2688 = frontier_phi_61_pred_2;
                _2686 = frontier_phi_61_pred_3;
                _2684 = frontier_phi_61_pred_4;
                _2682 = frontier_phi_61_pred_5;
                uint _2831 = _2830 + 1u;
                if (_2831 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2824 = _2680;
                    _2825 = _2682;
                    _2826 = _2684;
                    _2827 = _2686;
                    _2828 = _2688;
                    _2829 = _2690;
                    _2830 = _2831;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
        }
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.z;
        uint _2696 = (_2694 >> 8u) & 15u;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        if (((4294967295u << _2696) & _2578) == 0u)
        {
            _2792 = _2679;
            _2794 = _2681;
            _2796 = _2683;
            _2798 = _2685;
            _2800 = _2687;
            _2802 = _2689;
        }
        else
        {
            float _2817 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
            float _2818 = _2817 * _2532;
            float _2819 = _2817 * _2533;
            float _2820 = _2817 * _2534;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2696 < ((_2694 >> 12u) & 15u))
            {
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2931 = _2679;
                float _2932 = _2681;
                float _2933 = _2683;
                float _2934 = _2685;
                float _2935 = _2687;
                float _2936 = _2689;
                uint _2937 = _2696;
                uint _2946;
                bool _2947;
                for (;;)
                {
                    _2946 = texelFetch(g_lightClassification, int((((_2572 << 5u) + (_2558 << 9u)) + (_2937 << 2u)) >> 2u)).x;
                    _2947 = _2946 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2947)
                    {
                        frontier_phi_67_pred = _2934;
                        frontier_phi_67_pred_1 = _2935;
                        frontier_phi_67_pred_2 = _2936;
                        frontier_phi_67_pred_3 = _2933;
                        frontier_phi_67_pred_4 = _2932;
                        frontier_phi_67_pred_5 = _2931;
                    }
                    else
                    {
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3144 = _2931;
                        float _3145 = _2932;
                        float _3146 = _2933;
                        float _3147 = _2934;
                        float _3148 = _2935;
                        float _3149 = _2936;
                        uint _3150 = _2946;
                        uint _3151;
                        vec4 _3176;
                        float _3177;
                        vec4 _3192;
                        vec3 _3204;
                        vec4 _3219;
                        vec4 _3235;
                        float _3281;
                        bool _3282;
                        for (;;)
                        {
                            uint _3161 = ((_2937 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3150));
                            _3151 = (_3150 + 4294967295u) & _3150;
                            uint _3163 = _3161 * 40u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            _3177 = _3176.w;
                            uint _3179 = (_3161 * 40u) + 4u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3194 = (_3161 * 40u) + 8u;
                            _3204 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x));
                            uint _3206 = (_3161 * 40u) + 16u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3222 = (_3161 * 40u) + 20u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3237 = (_3161 * 40u) + 24u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3256 = (_3161 * 40u) + 28u;
                            vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            _3281 = fma(_2534, _3269.z, fma(_2533, _3269.y, _3269.x * _2532)) + _3269.w;
                            _3282 = !((fma(_2534, _3250.z, fma(_2533, _3250.y, _3250.x * _2532)) + _3250.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3282)
                            {
                                float _3309 = _3176.x - _2532;
                                float _3310 = _3176.y - _2533;
                                float _3311 = _3176.z - _2534;
                                float _3312 = dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311));
                                float _3315 = inversesqrt(_3312);
                                float _3316 = _3315 * _3309;
                                float _3317 = _3315 * _3310;
                                float _3318 = _3315 * _3311;
                                float _3322 = 1.0 - (_3312 / (_3177 * _3177));
                                float _4402 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3327 = sqrt(_3312) * _3192.w;
                                float _3329 = 1.39999997615814208984375 / (_3327 + 1.39999997615814208984375);
                                float _3330 = _3329 * _3329;
                                float _3333 = ((1.0 - _3330) * dot(vec3(_3316, _3317, _3318), vec3(_772, _775, _778))) + _3330;
                                float _3336 = _3327 * _3327;
                                float _3340 = (fma(_2534, _3219.z, fma(_2533, _3219.y, _3219.x * _2532)) + _3219.w) / _3281;
                                float _3341 = (fma(_2534, _3235.z, fma(_2533, _3235.y, _3235.x * _2532)) + _3235.w) / _3281;
                                float _3345 = 1.0 - dot(vec2(_3340, _3341), vec2(_3340, _3341));
                                float _4418 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3347 = _3346 * (((isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))) * _3323) / ((_3336 * 0.699999988079071044921875) + 1.0));
                                float _3359 = exp2(log2(1.0 / ((_3336 * 3.5) + 5.0)) * 0.25);
                                float _3360 = 1.0 - _847;
                                float _3367 = sqrt(1.0 - ((1.0 - (_3360 * _3360)) * (1.0 - (_3359 * _3359))));
                                float _3368 = _3367 * _3367;
                                float _3369 = _3368 * _3368;
                                float _3370 = _3316 - _2818;
                                float _3371 = _3317 - _2819;
                                float _3372 = _3318 - _2820;
                                float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                                float _3380 = dot(vec3(_772, _775, _778), vec3((-0.0) - _2818, (-0.0) - _2819, (-0.0) - _2820));
                                float _4429 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3384 = dot(vec3(_772, _775, _778), vec3(_3376 * _3370, _3376 * _3371, _3376 * _3372));
                                float _4440 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3387 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3391 = ((_3387 * _3387) * (_3369 + (-1.0))) + 1.0;
                                float _3392 = _3329 * _3368;
                                float _3393 = _3392 * _3392;
                                float _3399 = ((1.0 - _3393) * dot(vec3(_772, _775, _778), vec3(_3316, _3317, _3318))) + _3393;
                                float _4451 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3401 = 1.0 - _3368;
                                float _3411 = (0.5 / (((_3400 * ((_3383 * _3401) + _3368)) + 9.9999999392252902907785028219223e-09) + (((_3400 * _3401) + _3368) * _3383))) * _3400;
                                float _4462 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3421 = (_3346 * _3323) * (((_3369 * 3.1415927410125732421875) * (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) / ((_3391 * _3391) * ((_3336 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3421 * _3204.x;
                                frontier_phi_73_pred_1 = _3421 * _3204.y;
                                frontier_phi_73_pred_2 = _3347 * _3192.z;
                                frontier_phi_73_pred_3 = _3347 * _3192.y;
                                frontier_phi_73_pred_4 = _3347 * _3192.x;
                                frontier_phi_73_pred_5 = _3421 * _3204.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3425 = frontier_phi_73_pred;
                            _3426 = frontier_phi_73_pred_1;
                            _3430 = frontier_phi_73_pred_2;
                            _3429 = frontier_phi_73_pred_3;
                            _3428 = frontier_phi_73_pred_4;
                            _3427 = frontier_phi_73_pred_5;
                            _3134 = _3428 + _3147;
                            _3135 = _3429 + _3148;
                            _3136 = _3430 + _3149;
                            _3131 = _3425 + _3144;
                            _3132 = _3426 + _3145;
                            _3133 = _3427 + _3146;
                            if (_3151 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3151;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3134;
                        frontier_phi_67_pred_1 = _3135;
                        frontier_phi_67_pred_2 = _3136;
                        frontier_phi_67_pred_3 = _3133;
                        frontier_phi_67_pred_4 = _3132;
                        frontier_phi_67_pred_5 = _3131;
                    }
                    _2799 = frontier_phi_67_pred;
                    _2801 = frontier_phi_67_pred_1;
                    _2803 = frontier_phi_67_pred_2;
                    _2797 = frontier_phi_67_pred_3;
                    _2795 = frontier_phi_67_pred_4;
                    _2793 = frontier_phi_67_pred_5;
                    uint _2938 = _2937 + 1u;
                    if (_2938 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2931 = _2793;
                        _2932 = _2795;
                        _2933 = _2797;
                        _2934 = _2799;
                        _2935 = _2801;
                        _2936 = _2803;
                        _2937 = _2938;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2801;
                frontier_phi_55_56_ladder_1 = _2803;
                frontier_phi_55_56_ladder_2 = _2799;
                frontier_phi_55_56_ladder_3 = _2797;
                frontier_phi_55_56_ladder_4 = _2795;
                frontier_phi_55_56_ladder_5 = _2793;
            }
            else
            {
                frontier_phi_55_56_ladder = _2687;
                frontier_phi_55_56_ladder_1 = _2689;
                frontier_phi_55_56_ladder_2 = _2685;
                frontier_phi_55_56_ladder_3 = _2683;
                frontier_phi_55_56_ladder_4 = _2681;
                frontier_phi_55_56_ladder_5 = _2679;
            }
            _2792 = frontier_phi_55_56_ladder_5;
            _2794 = frontier_phi_55_56_ladder_4;
            _2796 = frontier_phi_55_56_ladder_3;
            _2798 = frontier_phi_55_56_ladder_2;
            _2800 = frontier_phi_55_56_ladder;
            _2802 = frontier_phi_55_56_ladder_1;
        }
        float _2807 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
        _2591 = (_2807 * _2798) + _2024;
        _2593 = (_2807 * _2800) + _2026;
        _2595 = (_2807 * _2802) + _2028;
        _2597 = ((_2792 * _815) * _2807) + _2372;
        _2599 = ((_2794 * _817) * _2807) + _2374;
        _2601 = ((_2796 * _818) * _2807) + _2376;
    }
    else
    {
        _2591 = _2024;
        _2593 = _2026;
        _2595 = _2028;
        _2597 = _2372;
        _2599 = _2374;
        _2601 = _2376;
    }
    float _4478 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4489 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4500 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    uint _2621 = _247 + 6u;
    float _2629 = _753 / cbSceneParam._m0[86u].x;
    float _2630 = _754 / cbSceneParam._m0[86u].y;
    vec4 _2644 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2629, _2630, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2646 = _2644.x;
    float _2647 = _2644.y;
    float _2648 = _2644.z;
    float _2649 = _2644.w;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _2704 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _2705 = _2704 / _688;
        float _2716 = _2705 * _738;
        float _2717 = _739 * _2705;
        float _2718 = (-0.0) - _2717;
        float _2720 = _2705 * _740;
        float _2722 = (cbSceneParam._m0[77u].w * _2718) / _2704;
        float _2723 = _2722 + cbSceneParam._m0[79u].w;
        float _2724 = cbSceneParam._m0[79u].w - _2717;
        float _2730 = sqrt(((_2716 * _2716) + (_2717 * _2717)) + (_2720 * _2720));
        float _2733 = (1.0 - (cbSceneParam._m0[77u].w / _2704)) * _2730;
        float _2738 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2740 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2893;
        if (abs((_2718 - _2722) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2893 = ((((_2723 > 0.0) ? exp2(_2738 * _2723) : (2.0 - exp2(_2740 * _2723))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2733;
        }
        else
        {
            float _2853 = 1.0 / cbSceneParam._m0[80u].x;
            float _2854 = isnan(_2724) ? _2723 : (isnan(_2723) ? _2724 : max(_2723, _2724));
            float _2855 = isnan(_2724) ? _2723 : (isnan(_2723) ? _2724 : min(_2723, _2724));
            float _2864 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : min(_2854, 0.0));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            _2893 = ((abs(_2730 / _2718) * cbSceneParam._m0[80u].y) * ((((_2864 - _2865) * 2.0) - ((exp2(_2738 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0)))) - exp2(_2738 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0))))) * _2853)) - ((exp2(_2740 * _2864) - exp2(_2740 * _2865)) * _2853))) + (_2733 * cbSceneParam._m0[80u].z);
        }
        vec4 _2895 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2629, _2630, 1.0), 0.0);
        float _2904 = exp2((_2893 * (-1.44269502162933349609375)) * (1.0 - _2895.w));
        float _2905 = log2(_2904);
        float _2921 = log2(_2649);
        _2742 = (exp2(_2921 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].x)) * _2895.x) / cbSceneParam._m0[78u].x)) + _2646;
        _2744 = (exp2(_2921 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].y)) * _2895.y) / cbSceneParam._m0[78u].y)) + _2647;
        _2746 = (exp2(_2921 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].z)) * _2895.z) / cbSceneParam._m0[78u].z)) + _2648;
        _2748 = _2904 * _2649;
    }
    else
    {
        _2742 = _2646;
        _2744 = _2647;
        _2746 = _2648;
        _2748 = _2649;
    }
    float _2760 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2761 = _2760 == 3.0;
    float _2762 = log2(_2748);
    float _2769 = exp2(_2762 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2591 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _831))) + ((_2597 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1639)) * cbPerFrame._m0[3u].x));
    float _2770 = exp2(_2762 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2593 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _831))) + ((_2599 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1639)) * cbPerFrame._m0[3u].x));
    float _2771 = exp2(_2762 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2595 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _831))) + ((_2601 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1639)) * cbPerFrame._m0[3u].x));
    float _2780 = (_2760 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2780 * (_2761 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2742)));
    SV_Target.y = _2780 * (_2761 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2744)));
    SV_Target.z = _2780 * (_2761 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.w = cbInstanceData._m0[_2621].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2621].w;
}


