#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1483;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _364.x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[23u].w) + _417) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3831 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _442 = (_435 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _443 = (_435 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _444 = (_435 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _483 = _481.x;
    float _493 = dot(vec4(_483, _481.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _507 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _364.y) * 2.0) - ((((_483 - _493) * cbMtdParam._m0[23u].w) + _493) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3842 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _515 = (_508 * ((_461.x * cbMtdParam._m0[13u].x) - _442)) + _442;
    float _516 = (_508 * ((_461.y * cbMtdParam._m0[13u].y) - _443)) + _443;
    float _517 = (_508 * ((_461.z * cbMtdParam._m0[13u].z) - _444)) + _444;
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _274) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _275) + cbTextureTilingScale._m0[24u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _555 = _553.x;
    float _565 = dot(vec4(_555, _553.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _577 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _364.z) * 2.0) - ((((_555 - _565) * cbMtdParam._m0[23u].w) + _565) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3853 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _591 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_578 * ((_536.x * cbMtdParam._m0[14u].x) - _515)) + _515);
    float _594 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_578 * ((_536.y * cbMtdParam._m0[14u].y) - _516)) + _516);
    float _597 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_578 * ((_536.z * cbMtdParam._m0[14u].z) - _517)) + _517);
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _634 = _632.x;
    float _635 = _632.y;
    float _636 = _632.z;
    float _643 = ((_615.x - _634) * _435) + _634;
    float _644 = ((_615.y - _635) * _435) + _635;
    float _645 = ((_615.z - _636) * _435) + _636;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _668 = ((_657.x - _643) * _508) + _643;
    float _669 = ((_657.y - _644) * _508) + _644;
    float _670 = ((_657.z - _645) * _508) + _645;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _274) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _275) + cbTextureTilingScale._m0[23u].w));
    float _695 = ((_682.z - _670) * _578) + _670;
    float _698 = ((((_682.x - _668) * _578) + _668) * 2.0) + (-1.0);
    float _700 = ((((_682.y - _669) * _578) + _669) * 2.0) + (-1.0);
    float _701 = dot(vec2(_698, _700), vec2(_698, _700));
    float _3864 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _706 = sqrt(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _732 = (((_720.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _698;
    float _733 = (((_720.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _700;
    float _736 = fma(_706, _242, fma(_733, _249, _732 * _235));
    float _739 = fma(_706, _243, fma(_733, _250, _732 * _236));
    float _742 = fma(_706, _244, fma(_733, _251, _732 * _237));
    float _746 = inversesqrt(dot(vec3(_736, _739, _742), vec3(_736, _739, _742)));
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _775 = _773.x;
    float _776 = 1.0 - _775;
    float _784 = (cbMtdParam._m0[19u].x + dot(vec4(_746 * _736, _746 * _739, _746 * _742, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_775 - _776) * cbMtdParam._m0[24u].z) + _776) * cbMtdParam._m0[21u].z);
    float _3875 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _785 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _792 = (_785 * (cbMtdParam._m0[17u].x - _591)) + _591;
    float _793 = (_785 * (cbMtdParam._m0[17u].y - _594)) + _594;
    float _794 = (_785 * (cbMtdParam._m0[17u].z - _597)) + _597;
    vec4 _820 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _822 = _820.x;
    float _839 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _822) * _435) + _822;
    float _856 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _839) * _508) + _839;
    float _874 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _274) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _275) + cbTextureTilingScale._m0[10u].w)).x - _856) * _578) + _856;
    float _878 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _874) * cbMtdParam._m0[19u].z) + _874;
    float _880 = _878 - (_878 * _785);
    float _884 = (cbMtdParam._m0[19u].w * (_720.z - _695)) + _695;
    vec4 _897 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _904 = (_897.x * 2.0) + (-1.0);
    float _905 = (_897.y * 2.0) + (-1.0);
    float _906 = dot(vec2(_904, _905), vec2(_904, _905));
    float _3886 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _914 = ((_897.z - _884) * _785) + _884;
    float _924 = ((sqrt(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) - _706) * _785) + _706;
    float _927 = (((_904 - _732) * _785) + _732) + (cbMtdParam._m0[21u].x * _732);
    float _928 = (((_905 - _733) * _785) + _733) + (cbMtdParam._m0[21u].x * _733);
    float _930 = cbMtdParam._m0[22u].x + _720.w;
    float _933 = fma(_924, _242, fma(_928, _249, _927 * _235));
    float _936 = fma(_924, _243, fma(_928, _250, _927 * _236));
    float _939 = fma(_924, _244, fma(_928, _251, _927 * _237));
    float _943 = inversesqrt(dot(vec3(_933, _936, _939), vec3(_933, _936, _939)));
    float _944 = _943 * _933;
    float _945 = _943 * _936;
    float _946 = _943 * _939;
    float _3897 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _947 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _3919 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _3930 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _3941 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _3952 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _952 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _966 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1016 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1006);
    float _1017 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1006);
    float _1018 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1006);
    float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
    float _1023 = _1016 * _1022;
    float _1024 = _1017 * _1022;
    float _1025 = _1018 * _1022;
    float _1031 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1032 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1050 = fma(_946, cbSceneParam._m0[5u].z, fma(_945, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _944));
    float _1053 = fma(_946, cbSceneParam._m0[6u].z, fma(_945, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _944));
    float _1056 = fma(_946, cbSceneParam._m0[7u].z, fma(_945, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _944));
    uint _1070 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1076 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_1070].x;
    float _1077 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_1070].y;
    float _1078 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_1070].z;
    float _3963 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1082 = 1.0 - _952;
    float _1083 = _1079 * _1082;
    float _1084 = _1080 * _1082;
    float _1085 = _1081 * _1082;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _952;
    float _1091 = (_1080 + (-0.039999999105930328369140625)) * _952;
    float _1092 = (_1081 + (-0.039999999105930328369140625)) * _952;
    float _1093 = _1090 + 0.039999999105930328369140625;
    float _1095 = _1091 + 0.039999999105930328369140625;
    float _1096 = _1092 + 0.039999999105930328369140625;
    vec4 _1105 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1031, cbSceneParam._m0[86u].y * _1032));
    float _1109 = ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * TEXCOORD_5.w) * _1105.x;
    float _1110 = dot(vec3(_944, _945, _946), vec3(_1023, _1024, _1025));
    float _1113 = _1110 * 2.0;
    float _1117 = (_1113 * _944) - _1023;
    float _1118 = (_1113 * _945) - _1024;
    float _1119 = (_1113 * _946) - _1025;
    float _1123 = abs(dot(vec3(_1023, _1024, _1025), vec3(_944, _945, _946)));
    float _3996 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1125 = sqrt(_947);
    float _1138 = exp2((_1125 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1125 * 3.0));
    float _1144 = (1.0 - _1138) * ((_1125 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1145 = _1138 * _1125;
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1482;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1207 = fma(_1181, cbModelParam._m0[26u].z, fma(_1177, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1173));
        float _1211 = fma(_1181, cbModelParam._m0[27u].z, fma(_1177, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1173));
        float _1215 = fma(_1181, cbModelParam._m0[28u].z, fma(_1177, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1173));
        float _1240 = _1173 + _944;
        float _1241 = _1177 + _945;
        float _1242 = _1181 + _946;
        float _1252 = fma(_1242, cbModelParam._m0[26u].z, fma(_1241, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1240)) - _1207;
        float _1253 = fma(_1242, cbModelParam._m0[27u].z, fma(_1241, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1240)) - _1211;
        float _1254 = fma(_1242, cbModelParam._m0[28u].z, fma(_1241, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1240)) - _1215;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1207 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1211 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[34u].z) + ((((((_1215 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1310 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1276.x + (-0.5));
        float _1312 = _1310 * (_1276.y + (-0.5));
        float _1313 = _1310 * (_1276.z + (-0.5));
        float _1320 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1283.x + (-0.5));
        float _1322 = _1320 * (_1283.y + (-0.5));
        float _1323 = _1320 * (_1283.z + (-0.5));
        float _1330 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1290.x + (-0.5));
        float _1332 = _1330 * (_1290.y + (-0.5));
        float _1333 = _1330 * (_1290.z + (-0.5));
        float _1340 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1297.x + (-0.5));
        float _1342 = _1340 * (_1297.y + (-0.5));
        float _1343 = _1340 * (_1297.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1364 = (dot(vec3(_944, _945, _946), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1374 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4044 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1376 + 1.0))) + _1381) * _1344;
        float _1391 = _1312 * 0.5;
        float _1392 = _1322 * 0.5;
        float _1393 = _1332 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_944, _945, _946), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4077 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1418 + 1.0))) + _1423) * _1345;
        float _1433 = _1313 * 0.5;
        float _1434 = _1323 * 0.5;
        float _1435 = _1333 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_944, _945, _946), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4110 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1460 + 1.0))) + _1465) * _1346;
        _1482 = _1313;
        _1484 = _1312;
        _1485 = _1311;
        _1486 = _1323;
        _1487 = _1322;
        _1488 = _1321;
        _1489 = _1333;
        _1490 = _1332;
        _1491 = _1331;
        _1492 = _1346;
        _1493 = _1345;
        _1494 = _1344;
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1483;
        _1484 = _1483;
        _1485 = _1483;
        _1486 = _1483;
        _1487 = _1483;
        _1488 = _1483;
        _1489 = _1483;
        _1490 = _1483;
        _1491 = _1483;
        _1492 = _1483;
        _1493 = _1483;
        _1494 = _1483;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1520 = fma(_1181, cbModelParam._m0[30u].z, fma(_1177, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1173));
        float _1524 = fma(_1181, cbModelParam._m0[31u].z, fma(_1177, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1173));
        float _1528 = fma(_1181, cbModelParam._m0[32u].z, fma(_1177, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1173));
        float _1551 = _1173 + _944;
        float _1552 = _1177 + _945;
        float _1553 = _1181 + _946;
        float _1563 = fma(_1553, cbModelParam._m0[30u].z, fma(_1552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1551)) - _1520;
        float _1564 = fma(_1553, cbModelParam._m0[31u].z, fma(_1552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1551)) - _1524;
        float _1565 = fma(_1553, cbModelParam._m0[32u].z, fma(_1552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1551)) - _1528;
        float _1569 = inversesqrt(dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565)));
        float _1582 = ((_1569 * _1563) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1520 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1583 = ((_1569 * _1564) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1524 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1584 = ((_1569 * _1565) / cbModelParam._m0[35u].z) + ((((((_1528 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1582, _1583, _1584), 0.0);
        float _1619 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1586.x + (-0.5));
        float _1621 = _1619 * (_1586.y + (-0.5));
        float _1622 = _1619 * (_1586.z + (-0.5));
        float _1629 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1593.x + (-0.5));
        float _1631 = _1629 * (_1593.y + (-0.5));
        float _1632 = _1629 * (_1593.z + (-0.5));
        float _1639 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1600.x + (-0.5));
        float _1641 = _1639 * (_1600.y + (-0.5));
        float _1642 = _1639 * (_1600.z + (-0.5));
        float _1649 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1650 = _1649 * (_1607.x + (-0.5));
        float _1651 = _1649 * (_1607.y + (-0.5));
        float _1652 = _1649 * (_1607.z + (-0.5));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = _1620 * 0.5;
        float _1657 = _1630 * 0.5;
        float _1658 = _1640 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_944, _945, _946), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4173 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1683 + 1.0))) + _1688) * _1653;
        float _1698 = _1621 * 0.5;
        float _1699 = _1631 * 0.5;
        float _1700 = _1641 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_944, _945, _946), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4206 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1725 + 1.0))) + _1730) * _1654;
        float _1740 = _1622 * 0.5;
        float _1741 = _1632 * 0.5;
        float _1742 = _1642 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_944, _945, _946), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4239 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1767 + 1.0))) + _1772) * _1655;
        _1789 = _1622;
        _1790 = _1621;
        _1791 = _1620;
        _1792 = _1632;
        _1793 = _1631;
        _1794 = _1630;
        _1795 = _1642;
        _1796 = _1641;
        _1797 = _1640;
        _1798 = _1655;
        _1799 = _1654;
        _1800 = _1653;
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
    }
    else
    {
        _1789 = _1483;
        _1790 = _1483;
        _1791 = _1483;
        _1792 = _1483;
        _1793 = _1483;
        _1794 = _1483;
        _1795 = _1483;
        _1796 = _1483;
        _1797 = _1483;
        _1798 = _1483;
        _1799 = _1483;
        _1800 = _1483;
        _1801 = 0.0;
        _1802 = 0.0;
        _1803 = 0.0;
    }
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1495)) + _1495;
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1496)) + _1496;
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1497)) + _1497;
    float _1836 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1813));
    float _1857 = _1117 * 0.5;
    float _1858 = _1118 * 0.5;
    float _1859 = _1119 * 0.5;
    float _1860 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1863 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1866 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1900;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1873 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1482, _1486, _1489, _1492));
        float _1877 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1484, _1487, _1490, _1493));
        float _1881 = dot(vec4(_1857, _1858, _1859, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1888 = dot(vec4(cbModelParam._m0[39u]), vec4(_1857, _1858, _1859, 1.0));
        _1900 = dot(vec3(isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1888) ? 0.0 : (isnan(0.0) ? _1888 : max(0.0, _1888))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1900 = 1.0;
    }
    float _1911;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1902 = dot(vec4(cbModelParam._m0[40u]), vec4(_1857, _1858, _1859, 1.0));
        _1911 = dot(vec3(isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1902) ? 0.0 : (isnan(0.0) ? _1902 : max(0.0, _1902))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1911 = 1.0;
    }
    float _1915 = (_1911 * cbModelParam._m0[1u].x) + (_1900 * (1.0 - cbModelParam._m0[1u].x));
    float _1925 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _947);
    float _1926 = isnan(_1925) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1925 : min(cbModelParam._m0[25u].z, _1925));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1973 = fma(_1181, cbModelParam._m0[13u].z, fma(_1177, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1173)) + cbModelParam._m0[13u].w;
        float _1977 = fma(_1181, cbModelParam._m0[14u].z, fma(_1177, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1173)) + cbModelParam._m0[14u].w;
        float _1981 = fma(_1181, cbModelParam._m0[15u].z, fma(_1177, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1173)) + cbModelParam._m0[15u].w;
        float _1984 = fma(_1119, cbModelParam._m0[13u].z, fma(_1118, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117));
        float _1987 = fma(_1119, cbModelParam._m0[14u].z, fma(_1118, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117));
        float _1990 = fma(_1119, cbModelParam._m0[15u].z, fma(_1118, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117));
        float _2018;
        if (_1984 > 0.0)
        {
            _2018 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2018 = frontier_phi_14_12_ladder;
        }
        float _2242;
        if (_1987 > 0.0)
        {
            _2242 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2242 = frontier_phi_23_19_ladder;
        }
        float _2499;
        if (_1990 > 0.0)
        {
            _2499 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2499 = frontier_phi_35_30_ladder;
        }
        float _2501 = isnan(_2242) ? _2018 : (isnan(_2018) ? _2242 : min(_2018, _2242));
        float _2502 = isnan(_2499) ? _2501 : (isnan(_2501) ? _2499 : min(_2501, _2499));
        float _2506 = (_2502 * _1984) + _1973;
        float _2507 = (_2502 * _1987) + _1977;
        float _2508 = (_2502 * _1990) + _1981;
        float _2509 = _2502 * 9.9999997473787516355514526367188e-05;
        float _2511 = (-1.0) - _2509;
        float _2513 = _2509 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2508 > _2513) || ((_2508 < _2511) || ((_2507 > _2513) || ((_2507 < _2511) || ((_2506 < _2511) || (_2506 > _2513))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2508, cbModelParam._m0[9u].z, fma(_2507, cbModelParam._m0[9u].y, _2506 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2508, cbModelParam._m0[10u].z, fma(_2507, cbModelParam._m0[10u].y, _2506 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2508, cbModelParam._m0[11u].z, fma(_2507, cbModelParam._m0[11u].y, _2506 * cbModelParam._m0[11u].x))), _1926);
            frontier_phi_13_35_ladder = _2636.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2636.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2636.x * cbModelParam._m0[1u].y;
        }
        _2006 = frontier_phi_13_35_ladder_2;
        _2008 = frontier_phi_13_35_ladder_1;
        _2010 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1117, _1118, _1119), _1926);
        _2006 = _1994.x * cbModelParam._m0[1u].y;
        _2008 = _1994.y * cbModelParam._m0[1u].y;
        _2010 = _1994.z * cbModelParam._m0[1u].y;
    }
    float _2014 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _947);
    float _2015 = isnan(_2014) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2014 : min(cbModelParam._m0[25u].w, _2014));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2069 = fma(_1181, cbModelParam._m0[21u].z, fma(_1177, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1173)) + cbModelParam._m0[21u].w;
        float _2073 = fma(_1181, cbModelParam._m0[22u].z, fma(_1177, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1173)) + cbModelParam._m0[22u].w;
        float _2077 = fma(_1181, cbModelParam._m0[23u].z, fma(_1177, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1173)) + cbModelParam._m0[23u].w;
        float _2080 = fma(_1119, cbModelParam._m0[21u].z, fma(_1118, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117));
        float _2083 = fma(_1119, cbModelParam._m0[22u].z, fma(_1118, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117));
        float _2086 = fma(_1119, cbModelParam._m0[23u].z, fma(_1118, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117));
        float _2247;
        if (_2080 > 0.0)
        {
            _2247 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2247 = frontier_phi_25_21_ladder;
        }
        float _2526;
        if (_2083 > 0.0)
        {
            _2526 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2526 = frontier_phi_37_32_ladder;
        }
        float _2739;
        if (_2086 > 0.0)
        {
            _2739 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2739 = frontier_phi_46_43_ladder;
        }
        float _2741 = isnan(_2526) ? _2247 : (isnan(_2247) ? _2526 : min(_2247, _2526));
        float _2742 = isnan(_2739) ? _2741 : (isnan(_2741) ? _2739 : min(_2741, _2739));
        float _2746 = (_2742 * _2080) + _2069;
        float _2747 = (_2742 * _2083) + _2073;
        float _2748 = (_2742 * _2086) + _2077;
        float _2749 = _2742 * 9.9999997473787516355514526367188e-05;
        float _2750 = (-1.0) - _2749;
        float _2752 = _2749 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2748 > _2752) || ((_2748 < _2750) || ((_2747 > _2752) || ((_2747 < _2750) || ((_2746 < _2750) || (_2746 > _2752))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2947 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2748, cbModelParam._m0[17u].z, fma(_2747, cbModelParam._m0[17u].y, _2746 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2748, cbModelParam._m0[18u].z, fma(_2747, cbModelParam._m0[18u].y, _2746 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2748, cbModelParam._m0[19u].z, fma(_2747, cbModelParam._m0[19u].y, _2746 * cbModelParam._m0[19u].x))), _2015);
            frontier_phi_22_46_ladder = _2947.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2947.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2947.x * cbModelParam._m0[1u].z;
        }
        _2105 = frontier_phi_22_46_ladder_2;
        _2107 = frontier_phi_22_46_ladder_1;
        _2109 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1117, _1118, _1119), _2015);
        _2105 = _2089.x * cbModelParam._m0[1u].z;
        _2107 = _2089.y * cbModelParam._m0[1u].z;
        _2109 = _2089.z * cbModelParam._m0[1u].z;
    }
    float _2122 = (((_1144 * _1093) + _1145) * _1109) * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2124 = (((_1144 * _1095) + _1145) * _1109) * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2126 = (((_1144 * _1096) + _1145) * _1109) * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2129 = fma(_2126, cbSceneParam._m0[89u].z, fma(_2124, cbSceneParam._m0[89u].y, _2122 * cbSceneParam._m0[89u].x));
    float _2132 = fma(_2126, cbSceneParam._m0[90u].z, fma(_2124, cbSceneParam._m0[90u].y, _2122 * cbSceneParam._m0[90u].x));
    float _2135 = fma(_2126, cbSceneParam._m0[91u].z, fma(_2124, cbSceneParam._m0[91u].y, _2122 * cbSceneParam._m0[91u].x));
    vec4 _2143 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1031, _1032));
    float _2145 = _2143.w;
    float _2157 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2145);
    float _2158 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2145);
    float _2159 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2145);
    uvec4 _2163 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2165 = _2163.x * 14u;
    uint _2166 = _2165 + 13u;
    float _2173 = _1109 + (-1.0);
    float _2178 = (cbLight._m0[_2166].x * _2173) + 1.0;
    float _2179 = (cbLight._m0[_2166].y * _2173) + 1.0;
    float _2180 = (cbLight._m0[_2166].z * _2173) + 1.0;
    float _2181 = (cbLight._m0[_2166].w * _2173) + 1.0;
    uint _2182 = _2165 + 5u;
    float _2188 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2192 = _2165 + 4u;
    float _2201 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2205 = _2165 | 1u;
    float _2216 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_944, _945, _946));
    float _2219 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_944, _945, _946));
    float _4375 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _4386 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2224 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.3183098733425140380859375;
    float _2226 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.3183098733425140380859375;
    float _2233 = ((cbLight._m0[_2182].x * _2188) * _2226) + (((cbLight._m0[_2192].x * _2157) * _2201) * _2224);
    float _2234 = ((_2188 * cbLight._m0[_2182].y) * _2226) + (((cbLight._m0[_2192].y * _2158) * _2201) * _2224);
    float _2235 = ((_2188 * cbLight._m0[_2182].z) * _2226) + (((cbLight._m0[_2192].z * _2159) * _2201) * _2224);
    uvec4 _2239 = floatBitsToUint(cbLight._m0[_2165 + 12u]);
    bool _2241 = _2239.x == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2241)
    {
        _2252 = _2233;
        _2254 = _2234;
        _2256 = _2235;
    }
    else
    {
        uint _2260 = _2165 + 6u;
        float _2276 = (dot(vec3(cbLight._m0[_2165 + 2u].xyz), vec3(_944, _945, _946)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4397 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2279 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2252 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2233;
        _2254 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2234;
        _2256 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2235;
    }
    bool _2259 = _2239.y == 0u;
    float _2297;
    float _2299;
    float _2301;
    if (_2259)
    {
        _2297 = _2252;
        _2299 = _2254;
        _2301 = _2256;
    }
    else
    {
        uint _2470 = _2165 + 7u;
        float _2486 = (dot(vec3(cbLight._m0[_2165 + 3u].xyz), vec3(_944, _945, _946)) * 0.5) + 0.5;
        float _2487 = _2486 * _2486;
        float _4413 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2488 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2489 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2297 = (((cbLight._m0[_2470].x * 0.3183098733425140380859375) * _2488) * _2489) + _2252;
        _2299 = (((cbLight._m0[_2470].y * 0.3183098733425140380859375) * _2488) * _2489) + _2254;
        _2301 = (((cbLight._m0[_2470].z * 0.3183098733425140380859375) * _2488) * _2489) + _2256;
    }
    uint _2304 = _2165 + 8u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _947) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2165].x + _1023;
    float _2320 = cbLight._m0[_2165].y + _1024;
    float _2321 = cbLight._m0[_2165].z + _1025;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2165].xyz));
    float _4429 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _4440 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _2333 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2334 = dot(vec3(_944, _945, _946), vec3(_2326, _2327, _2328));
    float _4451 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2326, _2327, _2328));
    float _4462 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2318 * _2318;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
    float _2355 = 0.959999978542327880859375 - _1090;
    float _2357 = 0.959999978542327880859375 - _1091;
    float _2358 = 0.959999978542327880859375 - _1092;
    float _2365 = 1.0 - _2318;
    float _2376 = (0.5 / (((_2333 * ((_2332 * _2365) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2365) + _2318) * _2332))) * _2332;
    float _4473 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2378 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    uint _2392 = _2165 + 9u;
    float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _947) * 0.949999988079071044921875);
    float _2404 = _2403 * _2403;
    float _2405 = cbLight._m0[_2205].x + _1023;
    float _2406 = cbLight._m0[_2205].y + _1024;
    float _2407 = cbLight._m0[_2205].z + _1025;
    float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
    float _2412 = _2411 * _2405;
    float _2413 = _2411 * _2406;
    float _2414 = _2411 * _2407;
    float _2415 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2205].xyz));
    float _4484 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2419 = dot(vec3(_944, _945, _946), vec3(_2412, _2413, _2414));
    float _4495 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2423 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2412, _2413, _2414));
    float _4506 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2427 = _2404 * _2404;
    float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
    float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
    float _2445 = 1.0 - _2404;
    float _2455 = (0.5 / (((_2333 * ((_2418 * _2445) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2445) + _2404) * _2418))) * _2418;
    float _4517 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
    float _2467 = (((((_2438 * _2355) + _1093) * cbLight._m0[_2392].x) * _2457) * _2188) + ((((cbLight._m0[_2304].x * _2157) * ((_2354 * _2355) + _1093)) * _2378) * _2201);
    float _2468 = (((((_2438 * _2357) + _1095) * cbLight._m0[_2392].y) * _2457) * _2188) + ((((cbLight._m0[_2304].y * _2158) * ((_2354 * _2357) + _1095)) * _2378) * _2201);
    float _2469 = (((((_2438 * _2358) + _1096) * cbLight._m0[_2392].z) * _2457) * _2188) + ((((cbLight._m0[_2304].z * _2159) * ((_2354 * _2358) + _1096)) * _2378) * _2201);
    float _2531;
    float _2533;
    float _2535;
    if (_2241)
    {
        _2531 = _2467;
        _2533 = _2468;
        _2535 = _2469;
    }
    else
    {
        uint _2537 = _2165 + 2u;
        uint _2541 = _2165 + 10u;
        float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2537].w)) * _947) * 0.949999988079071044921875);
        float _2556 = _2555 * _2555;
        float _2557 = cbLight._m0[_2537].x + _1023;
        float _2558 = cbLight._m0[_2537].y + _1024;
        float _2559 = cbLight._m0[_2537].z + _1025;
        float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
        float _2564 = _2563 * _2557;
        float _2565 = _2563 * _2558;
        float _2566 = _2563 * _2559;
        float _2567 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2537].xyz));
        float _4528 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2571 = dot(vec3(_944, _945, _946), vec3(_2564, _2565, _2566));
        float _4539 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2575 = dot(vec3(cbLight._m0[_2537].xyz), vec3(_2564, _2565, _2566));
        float _4550 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2579 = _2556 * _2556;
        float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
        float _2590 = exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0);
        float _2597 = 1.0 - _2556;
        float _2607 = (0.5 / (((_2333 * ((_2570 * _2597) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2597) + _2556) * _2570))) * _2570;
        float _4561 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2609 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
        float _2610 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2531 = (((((_2590 * _2355) + _1093) * cbLight._m0[_2541].x) * _2609) * _2610) + _2467;
        _2533 = (((((_2590 * _2357) + _1095) * cbLight._m0[_2541].y) * _2609) * _2610) + _2468;
        _2535 = (((((_2590 * _2358) + _1096) * cbLight._m0[_2541].z) * _2609) * _2610) + _2469;
    }
    float _2645;
    float _2647;
    float _2649;
    if (_2259)
    {
        _2645 = _2531;
        _2647 = _2533;
        _2649 = _2535;
    }
    else
    {
        uint _2656 = _2165 + 3u;
        uint _2660 = _2165 + 11u;
        float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2656].w)) * _947) * 0.949999988079071044921875);
        float _2675 = _2674 * _2674;
        float _2676 = cbLight._m0[_2656].x + _1023;
        float _2677 = cbLight._m0[_2656].y + _1024;
        float _2678 = cbLight._m0[_2656].z + _1025;
        float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
        float _2683 = _2682 * _2676;
        float _2684 = _2682 * _2677;
        float _2685 = _2682 * _2678;
        float _2686 = dot(vec3(_944, _945, _946), vec3(cbLight._m0[_2656].xyz));
        float _4577 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2690 = dot(vec3(_944, _945, _946), vec3(_2683, _2684, _2685));
        float _4588 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2693 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2694 = dot(vec3(cbLight._m0[_2656].xyz), vec3(_2683, _2684, _2685));
        float _4599 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2698 = _2675 * _2675;
        float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
        float _2709 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
        float _2716 = 1.0 - _2675;
        float _2726 = (0.5 / (((_2333 * ((_2689 * _2716) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2333 * _2716) + _2675) * _2689))) * _2689;
        float _4610 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2728 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
        float _2729 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2645 = (((((_2709 * _2355) + _1093) * cbLight._m0[_2660].x) * _2728) * _2729) + _2531;
        _2647 = (((((_2709 * _2357) + _1095) * cbLight._m0[_2660].y) * _2728) * _2729) + _2533;
        _2649 = (((((_2709 * _2358) + _1096) * cbLight._m0[_2660].z) * _2728) * _2729) + _2535;
    }
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_2163.y == 0u)
    {
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2804;
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2804;
        float _2807 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2804;
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.x;
        uint _2831 = uint((float(_2819.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1032) / _2820))) + floor(float(uint(cbSceneParam._m0[85u].x * _1031) / _2820)));
        float _2841 = (log2(_2807 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2842 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        uint _2845 = uint(isnan(14.0) ? _2842 : (isnan(_2842) ? 14.0 : min(_2842, 14.0)));
        uvec4 _2850 = texelFetch(g_lightClusterGridBuffer, int(((_2845 << 2u) + (_2831 << 6u)) >> 2u));
        uint _2851 = _2850.x;
        uint _2852 = _2819.z;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((((1u << ((_2852 >> 4u) & 15u)) + 4294967295u) & _2851) == 0u) || ((_2852 & 240u) == 0u))
        {
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
        }
        else
        {
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            uint _3103 = 0u;
            uint _3112;
            bool _3113;
            for (;;)
            {
                _3112 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3103 << 2u)) >> 2u)).x;
                _3113 = _3112 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3113)
                {
                    frontier_phi_61_pred = _3097;
                    frontier_phi_61_pred_1 = _3102;
                    frontier_phi_61_pred_2 = _3101;
                    frontier_phi_61_pred_3 = _3100;
                    frontier_phi_61_pred_4 = _3099;
                    frontier_phi_61_pred_5 = _3098;
                }
                else
                {
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    uint _3227;
                    _3221 = _3097;
                    _3222 = _3098;
                    _3223 = _3099;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3112;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    for (;;)
                    {
                        uint _3231 = uint(findLSB(_3227)) + (_3103 << 5u);
                        uint _3228 = (_3227 + 4294967295u) & _3227;
                        uint _3233 = _3231 * 48u;
                        vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 3u)).x));
                        uint _3253 = (_3231 * 48u) + 4u;
                        vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 3u)).x));
                        uint _3272 = (_3231 * 48u) + 8u;
                        vec3 _3283 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3272)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 2u)).x));
                        float _3287 = _3247.x - _2805;
                        float _3288 = _3247.y - _2806;
                        float _3289 = _3247.z - _2807;
                        float _3290 = dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289));
                        float _3293 = inversesqrt(_3290);
                        float _3294 = _3293 * _3287;
                        float _3295 = _3293 * _3288;
                        float _3296 = _3293 * _3289;
                        float _3297 = dot(vec3(_1050, _1053, _1056), vec3(_3294, _3295, _3296));
                        float _3302 = 1.0 - (_3290 * _3247.w);
                        float _4636 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3303 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3304 = sqrt(_3290) * _3266.w;
                        float _3307 = 1.39999997615814208984375 / (_3304 + 1.39999997615814208984375);
                        float _3308 = _3307 * _3307;
                        float _3311 = ((1.0 - _3308) * _3297) + _3308;
                        float _3314 = _3304 * _3304;
                        float _3318 = ((isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))) * _3303) / ((_3314 * 0.699999988079071044921875) + 1.0);
                        float _3322 = (-0.0) - _2805;
                        float _3323 = (-0.0) - _2806;
                        float _3324 = (-0.0) - _2807;
                        float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                        float _3329 = _3328 * _3322;
                        float _3330 = _3328 * _3323;
                        float _3331 = _3328 * _3324;
                        float _3339 = exp2(log2(1.0 / ((_3314 * 3.5) + 5.0)) * 0.25);
                        float _3340 = 1.0 - _1125;
                        float _3347 = sqrt(1.0 - ((1.0 - (_3340 * _3340)) * (1.0 - (_3339 * _3339))));
                        float _3348 = _3347 * _3347;
                        float _3349 = _3348 * _3348;
                        float _3350 = _3329 + _3294;
                        float _3351 = _3330 + _3295;
                        float _3352 = _3331 + _3296;
                        float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                        float _3360 = dot(vec3(_1050, _1053, _1056), vec3(_3329, _3330, _3331));
                        float _4652 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3363 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3364 = dot(vec3(_1050, _1053, _1056), vec3(_3356 * _3350, _3356 * _3351, _3356 * _3352));
                        float _4663 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3367 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3371 = ((_3367 * _3367) * (_3349 + (-1.0))) + 1.0;
                        float _3372 = _3307 * _3348;
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3297) + _3373;
                        float _4674 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3377 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3378 = 1.0 - _3348;
                        float _3388 = (0.5 / (((_3377 * ((_3363 * _3378) + _3348)) + 9.9999999392252902907785028219223e-09) + (((_3377 * _3378) + _3348) * _3363))) * _3377;
                        float _4685 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3399 = (((_3349 * 3.1415927410125732421875) * (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) / ((_3371 * _3371) * ((_3314 * 2.1991131305694580078125) + 3.141590118408203125))) * _3303;
                        _3156 = (_3318 * _3266.x) + _3224;
                        _3157 = (_3318 * _3266.y) + _3225;
                        _3158 = (_3318 * _3266.z) + _3226;
                        _3153 = (_3399 * _3283.x) + _3221;
                        _3154 = (_3399 * _3283.y) + _3222;
                        _3155 = (_3399 * _3283.z) + _3223;
                        if (_3228 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3221 = _3153;
                            _3222 = _3154;
                            _3223 = _3155;
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3228;
                        }
                    }
                    frontier_phi_61_pred = _3153;
                    frontier_phi_61_pred_1 = _3158;
                    frontier_phi_61_pred_2 = _3157;
                    frontier_phi_61_pred_3 = _3156;
                    frontier_phi_61_pred_4 = _3155;
                    frontier_phi_61_pred_5 = _3154;
                }
                _2953 = frontier_phi_61_pred;
                _2963 = frontier_phi_61_pred_1;
                _2961 = frontier_phi_61_pred_2;
                _2959 = frontier_phi_61_pred_3;
                _2957 = frontier_phi_61_pred_4;
                _2955 = frontier_phi_61_pred_5;
                uint _3104 = _3103 + 1u;
                if (_3104 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3097 = _2953;
                    _3098 = _2955;
                    _3099 = _2957;
                    _3100 = _2959;
                    _3101 = _2961;
                    _3102 = _2963;
                    _3103 = _3104;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
        }
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.z;
        uint _2969 = (_2967 >> 8u) & 15u;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((4294967295u << _2969) & _2851) == 0u)
        {
            _3065 = _2952;
            _3067 = _2954;
            _3069 = _2956;
            _3071 = _2958;
            _3073 = _2960;
            _3075 = _2962;
        }
        else
        {
            float _3090 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
            float _3091 = _3090 * _2805;
            float _3092 = _3090 * _2806;
            float _3093 = _3090 * _2807;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2969 < ((_2967 >> 12u) & 15u))
            {
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3204 = _2952;
                float _3205 = _2954;
                float _3206 = _2956;
                float _3207 = _2958;
                float _3208 = _2960;
                float _3209 = _2962;
                uint _3210 = _2969;
                uint _3219;
                bool _3220;
                for (;;)
                {
                    _3219 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3210 << 2u)) >> 2u)).x;
                    _3220 = _3219 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3220)
                    {
                        frontier_phi_67_pred = _3207;
                        frontier_phi_67_pred_1 = _3208;
                        frontier_phi_67_pred_2 = _3209;
                        frontier_phi_67_pred_3 = _3206;
                        frontier_phi_67_pred_4 = _3205;
                        frontier_phi_67_pred_5 = _3204;
                    }
                    else
                    {
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3417 = _3204;
                        float _3418 = _3205;
                        float _3419 = _3206;
                        float _3420 = _3207;
                        float _3421 = _3208;
                        float _3422 = _3209;
                        uint _3423 = _3219;
                        uint _3424;
                        vec4 _3449;
                        float _3450;
                        vec4 _3465;
                        vec3 _3477;
                        vec4 _3492;
                        vec4 _3507;
                        float _3553;
                        bool _3554;
                        for (;;)
                        {
                            uint _3434 = ((_3210 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3423));
                            _3424 = (_3423 + 4294967295u) & _3423;
                            uint _3436 = _3434 * 40u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3450 = _3449.w;
                            uint _3452 = (_3434 * 40u) + 4u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3434 * 40u) + 8u;
                            _3477 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x));
                            uint _3479 = (_3434 * 40u) + 16u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3434 * 40u) + 20u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3434 * 40u) + 24u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3528 = (_3434 * 40u) + 28u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3553 = fma(_2807, _3541.z, fma(_2806, _3541.y, _3541.x * _2805)) + _3541.w;
                            _3554 = !((fma(_2807, _3522.z, fma(_2806, _3522.y, _3522.x * _2805)) + _3522.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3554)
                            {
                                float _3581 = _3449.x - _2805;
                                float _3582 = _3449.y - _2806;
                                float _3583 = _3449.z - _2807;
                                float _3584 = dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583));
                                float _3587 = inversesqrt(_3584);
                                float _3588 = _3587 * _3581;
                                float _3589 = _3587 * _3582;
                                float _3590 = _3587 * _3583;
                                float _3594 = 1.0 - (_3584 / (_3450 * _3450));
                                float _4696 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3599 = sqrt(_3584) * _3465.w;
                                float _3601 = 1.39999997615814208984375 / (_3599 + 1.39999997615814208984375);
                                float _3602 = _3601 * _3601;
                                float _3605 = ((1.0 - _3602) * dot(vec3(_3588, _3589, _3590), vec3(_1050, _1053, _1056))) + _3602;
                                float _3608 = _3599 * _3599;
                                float _3612 = (fma(_2807, _3492.z, fma(_2806, _3492.y, _3492.x * _2805)) + _3492.w) / _3553;
                                float _3613 = (fma(_2807, _3507.z, fma(_2806, _3507.y, _3507.x * _2805)) + _3507.w) / _3553;
                                float _3617 = 1.0 - dot(vec2(_3612, _3613), vec2(_3612, _3613));
                                float _4712 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3619 = _3618 * (((isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0))) * _3595) / ((_3608 * 0.699999988079071044921875) + 1.0));
                                float _3631 = exp2(log2(1.0 / ((_3608 * 3.5) + 5.0)) * 0.25);
                                float _3632 = 1.0 - _1125;
                                float _3639 = sqrt(1.0 - ((1.0 - (_3632 * _3632)) * (1.0 - (_3631 * _3631))));
                                float _3640 = _3639 * _3639;
                                float _3641 = _3640 * _3640;
                                float _3642 = _3588 - _3091;
                                float _3643 = _3589 - _3092;
                                float _3644 = _3590 - _3093;
                                float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                                float _3652 = dot(vec3(_1050, _1053, _1056), vec3((-0.0) - _3091, (-0.0) - _3092, (-0.0) - _3093));
                                float _4723 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3655 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3656 = dot(vec3(_1050, _1053, _1056), vec3(_3648 * _3642, _3648 * _3643, _3648 * _3644));
                                float _4734 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3659 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3663 = ((_3659 * _3659) * (_3641 + (-1.0))) + 1.0;
                                float _3664 = _3601 * _3640;
                                float _3665 = _3664 * _3664;
                                float _3671 = ((1.0 - _3665) * dot(vec3(_1050, _1053, _1056), vec3(_3588, _3589, _3590))) + _3665;
                                float _4745 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3673 = 1.0 - _3640;
                                float _3683 = (0.5 / (((_3672 * ((_3655 * _3673) + _3640)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3640) * _3655))) * _3672;
                                float _4756 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3693 = (_3618 * _3595) * (((_3641 * 3.1415927410125732421875) * (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) / ((_3663 * _3663) * ((_3608 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3693 * _3477.x;
                                frontier_phi_73_pred_1 = _3693 * _3477.y;
                                frontier_phi_73_pred_2 = _3619 * _3465.z;
                                frontier_phi_73_pred_3 = _3619 * _3465.y;
                                frontier_phi_73_pred_4 = _3619 * _3465.x;
                                frontier_phi_73_pred_5 = _3693 * _3477.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3697 = frontier_phi_73_pred;
                            _3698 = frontier_phi_73_pred_1;
                            _3702 = frontier_phi_73_pred_2;
                            _3701 = frontier_phi_73_pred_3;
                            _3700 = frontier_phi_73_pred_4;
                            _3699 = frontier_phi_73_pred_5;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            _3404 = _3697 + _3417;
                            _3405 = _3698 + _3418;
                            _3406 = _3699 + _3419;
                            if (_3424 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3424;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3407;
                        frontier_phi_67_pred_1 = _3408;
                        frontier_phi_67_pred_2 = _3409;
                        frontier_phi_67_pred_3 = _3406;
                        frontier_phi_67_pred_4 = _3405;
                        frontier_phi_67_pred_5 = _3404;
                    }
                    _3072 = frontier_phi_67_pred;
                    _3074 = frontier_phi_67_pred_1;
                    _3076 = frontier_phi_67_pred_2;
                    _3070 = frontier_phi_67_pred_3;
                    _3068 = frontier_phi_67_pred_4;
                    _3066 = frontier_phi_67_pred_5;
                    uint _3211 = _3210 + 1u;
                    if (_3211 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3204 = _3066;
                        _3205 = _3068;
                        _3206 = _3070;
                        _3207 = _3072;
                        _3208 = _3074;
                        _3209 = _3076;
                        _3210 = _3211;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3074;
                frontier_phi_55_56_ladder_1 = _3076;
                frontier_phi_55_56_ladder_2 = _3072;
                frontier_phi_55_56_ladder_3 = _3070;
                frontier_phi_55_56_ladder_4 = _3068;
                frontier_phi_55_56_ladder_5 = _3066;
            }
            else
            {
                frontier_phi_55_56_ladder = _2960;
                frontier_phi_55_56_ladder_1 = _2962;
                frontier_phi_55_56_ladder_2 = _2958;
                frontier_phi_55_56_ladder_3 = _2956;
                frontier_phi_55_56_ladder_4 = _2954;
                frontier_phi_55_56_ladder_5 = _2952;
            }
            _3065 = frontier_phi_55_56_ladder_5;
            _3067 = frontier_phi_55_56_ladder_4;
            _3069 = frontier_phi_55_56_ladder_3;
            _3071 = frontier_phi_55_56_ladder_2;
            _3073 = frontier_phi_55_56_ladder;
            _3075 = frontier_phi_55_56_ladder_1;
        }
        float _3080 = isnan(1.0) ? _1109 : (isnan(_1109) ? 1.0 : min(_1109, 1.0));
        _2864 = (_3080 * _3071) + _2297;
        _2866 = (_3080 * _3073) + _2299;
        _2868 = (_3080 * _3075) + _2301;
        _2870 = ((_3065 * _1093) * _3080) + _2645;
        _2872 = ((_3067 * _1095) * _3080) + _2647;
        _2874 = ((_3069 * _1096) * _3080) + _2649;
    }
    else
    {
        _2864 = _2297;
        _2866 = _2299;
        _2868 = _2301;
        _2870 = _2645;
        _2872 = _2647;
        _2874 = _2649;
    }
    float _4772 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _4783 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _4794 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    uint _2894 = _254 + 6u;
    float _2902 = _1031 / cbSceneParam._m0[86u].x;
    float _2903 = _1032 / cbSceneParam._m0[86u].y;
    vec4 _2917 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2902, _2903, (log2((isnan(cbSceneParam._m0[77u].w) ? _966 : (isnan(_966) ? cbSceneParam._m0[77u].w : min(_966, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2919 = _2917.x;
    float _2920 = _2917.y;
    float _2921 = _2917.z;
    float _2922 = _2917.w;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    if (_966 > cbSceneParam._m0[78u].w)
    {
        float _2977 = isnan(_966) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _966 : min(cbSceneParam._m0[80u].w, _966));
        float _2978 = _2977 / _966;
        float _2989 = _2978 * _1016;
        float _2990 = _1017 * _2978;
        float _2991 = (-0.0) - _2990;
        float _2993 = _2978 * _1018;
        float _2995 = (cbSceneParam._m0[77u].w * _2991) / _2977;
        float _2996 = _2995 + cbSceneParam._m0[79u].w;
        float _2997 = cbSceneParam._m0[79u].w - _2990;
        float _3003 = sqrt(((_2989 * _2989) + (_2990 * _2990)) + (_2993 * _2993));
        float _3006 = (1.0 - (cbSceneParam._m0[77u].w / _2977)) * _3003;
        float _3011 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3013 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3166;
        if (abs((_2991 - _2995) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3166 = ((((_2996 > 0.0) ? exp2(_3011 * _2996) : (2.0 - exp2(_3013 * _2996))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3006;
        }
        else
        {
            float _3126 = 1.0 / cbSceneParam._m0[80u].x;
            float _3127 = isnan(_2997) ? _2996 : (isnan(_2996) ? _2997 : max(_2996, _2997));
            float _3128 = isnan(_2997) ? _2996 : (isnan(_2996) ? _2997 : min(_2996, _2997));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            _3166 = ((abs(_3003 / _2991) * cbSceneParam._m0[80u].y) * ((((_3137 - _3138) * 2.0) - ((exp2(_3011 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0)))) - exp2(_3011 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))))) * _3126)) - ((exp2(_3013 * _3137) - exp2(_3013 * _3138)) * _3126))) + (_3006 * cbSceneParam._m0[80u].z);
        }
        vec4 _3168 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2902, _2903, 1.0), 0.0);
        float _3177 = exp2((_3166 * (-1.44269502162933349609375)) * (1.0 - _3168.w));
        float _3178 = log2(_3177);
        float _3194 = log2(_2922);
        _3015 = (exp2(_3194 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].x)) * _3168.x) / cbSceneParam._m0[78u].x)) + _2919;
        _3017 = (exp2(_3194 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].y)) * _3168.y) / cbSceneParam._m0[78u].y)) + _2920;
        _3019 = (exp2(_3194 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3178 * cbSceneParam._m0[78u].z)) * _3168.z) / cbSceneParam._m0[78u].z)) + _2921;
        _3021 = _3177 * _2922;
    }
    else
    {
        _3015 = _2919;
        _3017 = _2920;
        _3019 = _2921;
        _3021 = _2922;
    }
    float _3033 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3034 = _3033 == 3.0;
    float _3035 = log2(_3021);
    float _3042 = exp2(_3035 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2864 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1109))) + ((_2870 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1915)) * cbPerFrame._m0[3u].x));
    float _3043 = exp2(_3035 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2866 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1109))) + ((_2872 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1915)) * cbPerFrame._m0[3u].x));
    float _3044 = exp2(_3035 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2868 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1109))) + ((_2874 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1915)) * cbPerFrame._m0[3u].x));
    float _3053 = (_3033 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3053 * (_3034 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3015)));
    SV_Target.y = _3053 * (_3034 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3017)));
    SV_Target.z = _3053 * (_3034 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3019)));
    SV_Target.w = cbInstanceData._m0[_2894].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2894].w;
}


