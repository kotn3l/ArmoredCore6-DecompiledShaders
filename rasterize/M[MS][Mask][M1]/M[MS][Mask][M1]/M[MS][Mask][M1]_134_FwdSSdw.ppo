#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1584;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3931 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3942 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _3953 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    uint _290 = uint(roundEven(NORMAL.w)) * 13u;
    uint _295 = _290 + 1u;
    uint _299 = _290 + 2u;
    float _308 = sqrt(((cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x)) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x));
    float _309 = _308 * TEXCOORD.z;
    float _310 = _308 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _309) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _310) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _377 = _372.x * cbMtdParam._m0[11u].x;
    float _378 = _372.y * cbMtdParam._m0[11u].y;
    float _379 = _372.z * cbMtdParam._m0[11u].z;
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _309) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _310) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _417.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3964 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _491 = (_484 * ((_398.x * cbMtdParam._m0[12u].x) - _377)) + _377;
    float _492 = (_484 * ((_398.y * cbMtdParam._m0[12u].y) - _378)) + _378;
    float _493 = (_484 * ((_398.z * cbMtdParam._m0[12u].z) - _379)) + _379;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _309) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _310) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _417.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3975 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _564 = (_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491;
    float _565 = (_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492;
    float _566 = (_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _309) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _310) + cbTextureTilingScale._m0[24u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _604 = _602.x;
    float _614 = dot(vec4(_604, _602.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _626 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _417.z) * 2.0) - ((((_604 - _614) * cbMtdParam._m0[23u].w) + _614) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3986 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _637 = (_346.x * cbMtdParam._m0[9u].x) * ((_627 * ((_585.x * cbMtdParam._m0[14u].x) - _564)) + _564);
    float _638 = (_346.y * cbMtdParam._m0[9u].y) * ((_627 * ((_585.y * cbMtdParam._m0[14u].y) - _565)) + _565);
    float _639 = (_346.z * cbMtdParam._m0[9u].z) * ((_627 * ((_585.z * cbMtdParam._m0[14u].z) - _566)) + _566);
    float _643 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _323.x) * _637;
    float _646 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _323.y) * _638;
    float _649 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _323.z) * _639;
    float _657 = (((_637 - _643) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) + _643) * 4.55000019073486328125;
    float _659 = (((_638 - _646) * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) + _646) * 4.55000019073486328125;
    float _661 = (((_639 - _649) * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) + _649) * 4.55000019073486328125;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _309) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _310) + cbTextureTilingScale._m0[14u].w));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _309) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _310) + cbTextureTilingScale._m0[20u].w));
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _309) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _310) + cbTextureTilingScale._m0[4u].w));
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _740 = _738.x;
    float _741 = _738.y;
    float _742 = _738.z;
    float _749 = ((_721.x - _740) * _484) + _740;
    float _750 = ((_721.y - _741) * _484) + _741;
    float _751 = ((_721.z - _742) * _484) + _742;
    vec4 _763 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _309) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _310) + cbTextureTilingScale._m0[2u].w));
    float _774 = ((_763.x - _749) * _557) + _749;
    float _775 = ((_763.y - _750) * _557) + _750;
    float _776 = ((_763.z - _751) * _557) + _751;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _309) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _310) + cbTextureTilingScale._m0[23u].w));
    float _801 = ((_788.z - _776) * _627) + _776;
    float _804 = ((((_788.x - _774) * _627) + _774) * 2.0) + (-1.0);
    float _805 = ((((_788.y - _775) * _627) + _775) * 2.0) + (-1.0);
    float _806 = dot(vec2(_804, _805), vec2(_804, _805));
    float _3997 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _811 = sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))));
    vec4 _825 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _850 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _309) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _310) + cbTextureTilingScale._m0[11u].w));
    float _852 = _850.x;
    float _853 = 1.0 - _852;
    float _868 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_852 - _853) * cbMtdParam._m0[24u].z) + _853) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4008 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _869 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _876 = (_869 * ((_679.x * cbMtdParam._m0[18u].x) - _657)) + _657;
    float _877 = (_869 * ((_679.y * cbMtdParam._m0[18u].y) - _659)) + _659;
    float _878 = (_869 * ((_679.z * cbMtdParam._m0[18u].z) - _661)) + _661;
    vec4 _904 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _906 = _904.x;
    float _923 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w)).x - _906) * _484) + _906;
    float _940 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _309) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _310) + cbTextureTilingScale._m0[21u].w)).x - _923) * _557) + _923;
    float _958 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w)).x - _940) * _627) + _940;
    float _962 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _958) * cbMtdParam._m0[19u].z) + _958;
    float _964 = _962 - (_962 * _869);
    float _969 = (((_698.z - _801) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _801;
    float _973 = ((_825.z - _969) * cbMtdParam._m0[19u].w) + _969;
    vec4 _986 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _309) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _310) + cbTextureTilingScale._m0[15u].w));
    float _993 = (_986.x * 2.0) + (-1.0);
    float _994 = (_986.y * 2.0) + (-1.0);
    float _995 = dot(vec2(_993, _994), vec2(_993, _994));
    float _4019 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _1003 = (_869 * (_986.z - _973)) + _973;
    float _1012 = (_804 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_698.x * 2.0) + (-1.0)))) + (((_825.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1013 = (_805 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_698.y * 2.0) + (-1.0)))) + (((_825.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1025 = (((_993 - _1012) + (cbMtdParam._m0[21u].x * _1012)) * _869) + _1012;
    float _1026 = (((_994 - _1013) + (cbMtdParam._m0[21u].x * _1013)) * _869) + _1013;
    float _1027 = (_869 * (sqrt(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) - _811)) + _811;
    float _1031 = cbMtdParam._m0[22u].x + _825.w;
    float _1034 = fma(_1027, _256 * NORMAL.x, fma(_1026, _263 * TANGENT.x, (_249 * _241) * _1025));
    float _1037 = fma(_1027, _256 * NORMAL.y, fma(_1026, _263 * TANGENT.y, (_249 * _242) * _1025));
    float _1040 = fma(_1027, _256 * NORMAL.z, fma(_1026, _263 * TANGENT.z, (_249 * _243) * _1025));
    float _1044 = inversesqrt(dot(vec3(_1034, _1037, _1040), vec3(_1034, _1037, _1040)));
    float _1045 = _1044 * _1034;
    float _1046 = _1044 * _1037;
    float _1047 = _1044 * _1040;
    float _4030 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1048 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4052 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4063 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4074 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4085 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _1053 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _1067 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1117 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1107);
    float _1118 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1107);
    float _1119 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1107);
    float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
    float _1124 = _1117 * _1123;
    float _1125 = _1118 * _1123;
    float _1126 = _1119 * _1123;
    float _1132 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1133 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1151 = fma(_1047, cbSceneParam._m0[5u].z, fma(_1046, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1045));
    float _1154 = fma(_1047, cbSceneParam._m0[6u].z, fma(_1046, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1045));
    float _1157 = fma(_1047, cbSceneParam._m0[7u].z, fma(_1046, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1045));
    uint _1171 = (_290 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1177 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1171].x;
    float _1178 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_1171].y;
    float _1179 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_1171].z;
    float _4096 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1181 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1182 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1183 = 1.0 - _1053;
    float _1184 = _1180 * _1183;
    float _1185 = _1181 * _1183;
    float _1186 = _1182 * _1183;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1053;
    float _1192 = (_1181 + (-0.039999999105930328369140625)) * _1053;
    float _1193 = (_1182 + (-0.039999999105930328369140625)) * _1053;
    float _1194 = _1191 + 0.039999999105930328369140625;
    float _1196 = _1192 + 0.039999999105930328369140625;
    float _1197 = _1193 + 0.039999999105930328369140625;
    vec4 _1206 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1132, cbSceneParam._m0[86u].y * _1133));
    float _1210 = ((isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * TEXCOORD_5.w) * _1206.x;
    float _1211 = dot(vec3(_1045, _1046, _1047), vec3(_1124, _1125, _1126));
    float _1214 = _1211 * 2.0;
    float _1218 = (_1214 * _1045) - _1124;
    float _1219 = (_1214 * _1046) - _1125;
    float _1220 = (_1214 * _1047) - _1126;
    float _1224 = abs(dot(vec3(_1124, _1125, _1126), vec3(_1045, _1046, _1047)));
    float _4129 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _1226 = sqrt(_1048);
    float _1239 = exp2((_1226 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1226 * 3.0));
    float _1245 = (1.0 - _1239) * ((_1226 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1246 = _1239 * _1226;
    float _1274 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1278 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1282 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1583;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1308 = fma(_1282, cbModelParam._m0[26u].z, fma(_1278, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1274));
        float _1312 = fma(_1282, cbModelParam._m0[27u].z, fma(_1278, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1274));
        float _1316 = fma(_1282, cbModelParam._m0[28u].z, fma(_1278, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1274));
        float _1341 = _1274 + _1045;
        float _1342 = _1278 + _1046;
        float _1343 = _1282 + _1047;
        float _1353 = fma(_1343, cbModelParam._m0[26u].z, fma(_1342, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1341)) - _1308;
        float _1354 = fma(_1343, cbModelParam._m0[27u].z, fma(_1342, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1341)) - _1312;
        float _1355 = fma(_1343, cbModelParam._m0[28u].z, fma(_1342, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1341)) - _1316;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1308 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1312 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[34u].z) + ((((((_1316 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1411 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1377.x + (-0.5));
        float _1413 = _1411 * (_1377.y + (-0.5));
        float _1414 = _1411 * (_1377.z + (-0.5));
        float _1421 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1384.x + (-0.5));
        float _1423 = _1421 * (_1384.y + (-0.5));
        float _1424 = _1421 * (_1384.z + (-0.5));
        float _1431 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1391.x + (-0.5));
        float _1433 = _1431 * (_1391.y + (-0.5));
        float _1434 = _1431 * (_1391.z + (-0.5));
        float _1441 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1398.x + (-0.5));
        float _1443 = _1441 * (_1398.y + (-0.5));
        float _1444 = _1441 * (_1398.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1465 = (dot(vec3(_1045, _1046, _1047), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1475 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4177 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1477 + 1.0))) + _1482) * _1445;
        float _1492 = _1413 * 0.5;
        float _1493 = _1423 * 0.5;
        float _1494 = _1433 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_1045, _1046, _1047), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4210 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1519 + 1.0))) + _1524) * _1446;
        float _1534 = _1414 * 0.5;
        float _1535 = _1424 * 0.5;
        float _1536 = _1434 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_1045, _1046, _1047), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4243 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1561 + 1.0))) + _1566) * _1447;
        _1583 = _1414;
        _1585 = _1413;
        _1586 = _1412;
        _1587 = _1424;
        _1588 = _1423;
        _1589 = _1422;
        _1590 = _1434;
        _1591 = _1433;
        _1592 = _1432;
        _1593 = _1447;
        _1594 = _1446;
        _1595 = _1445;
        _1596 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1597 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1598 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
    }
    else
    {
        _1583 = _1584;
        _1585 = _1584;
        _1586 = _1584;
        _1587 = _1584;
        _1588 = _1584;
        _1589 = _1584;
        _1590 = _1584;
        _1591 = _1584;
        _1592 = _1584;
        _1593 = _1584;
        _1594 = _1584;
        _1595 = _1584;
        _1596 = 0.0;
        _1597 = 0.0;
        _1598 = 0.0;
    }
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1621 = fma(_1282, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1274));
        float _1625 = fma(_1282, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1274));
        float _1629 = fma(_1282, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1274));
        float _1652 = _1274 + _1045;
        float _1653 = _1278 + _1046;
        float _1654 = _1282 + _1047;
        float _1664 = fma(_1654, cbModelParam._m0[30u].z, fma(_1653, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1652)) - _1621;
        float _1665 = fma(_1654, cbModelParam._m0[31u].z, fma(_1653, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1652)) - _1625;
        float _1666 = fma(_1654, cbModelParam._m0[32u].z, fma(_1653, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1652)) - _1629;
        float _1670 = inversesqrt(dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666)));
        float _1683 = ((_1670 * _1664) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1621 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1684 = ((_1670 * _1665) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1625 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1685 = ((_1670 * _1666) / cbModelParam._m0[35u].z) + ((((((_1629 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1683, _1684, _1685), 0.0);
        float _1720 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1721 = _1720 * (_1687.x + (-0.5));
        float _1722 = _1720 * (_1687.y + (-0.5));
        float _1723 = _1720 * (_1687.z + (-0.5));
        float _1730 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1731 = _1730 * (_1694.x + (-0.5));
        float _1732 = _1730 * (_1694.y + (-0.5));
        float _1733 = _1730 * (_1694.z + (-0.5));
        float _1740 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1741 = _1740 * (_1701.x + (-0.5));
        float _1742 = _1740 * (_1701.y + (-0.5));
        float _1743 = _1740 * (_1701.z + (-0.5));
        float _1750 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1751 = _1750 * (_1708.x + (-0.5));
        float _1752 = _1750 * (_1708.y + (-0.5));
        float _1753 = _1750 * (_1708.z + (-0.5));
        float _1754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1755 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1756 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1757 = _1721 * 0.5;
        float _1758 = _1731 * 0.5;
        float _1759 = _1741 * 0.5;
        float _1760 = dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759));
        float _1765 = (_1760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1760);
        float _1773 = (dot(vec3(_1045, _1046, _1047), vec3(_1765 * _1757, _1765 * _1758, _1765 * _1759)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1782 = sqrt(((_1758 * _1758) + (_1757 * _1757)) + (_1759 * _1759)) / (_1754 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1784 = _1783 * 2.0;
        float _1788 = (1.0 - _1783) / (_1783 + 1.0);
        float _4306 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1798 = ((((1.0 - _1789) * (_1784 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1784 + 1.0))) + _1789) * _1754;
        float _1799 = _1722 * 0.5;
        float _1800 = _1732 * 0.5;
        float _1801 = _1742 * 0.5;
        float _1802 = dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801));
        float _1807 = (_1802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1802);
        float _1815 = (dot(vec3(_1045, _1046, _1047), vec3(_1807 * _1799, _1807 * _1800, _1807 * _1801)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1824 = sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801)) / (_1755 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1826 = _1825 * 2.0;
        float _1830 = (1.0 - _1825) / (_1825 + 1.0);
        float _4339 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1831 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1840 = ((((1.0 - _1831) * (_1826 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1826 + 1.0))) + _1831) * _1755;
        float _1841 = _1723 * 0.5;
        float _1842 = _1733 * 0.5;
        float _1843 = _1743 * 0.5;
        float _1844 = dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843));
        float _1849 = (_1844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1844);
        float _1857 = (dot(vec3(_1045, _1046, _1047), vec3(_1849 * _1841, _1849 * _1842, _1849 * _1843)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1866 = sqrt(((_1842 * _1842) + (_1841 * _1841)) + (_1843 * _1843)) / (_1756 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1868 = _1867 * 2.0;
        float _1872 = (1.0 - _1867) / (_1867 + 1.0);
        float _4372 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1873 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1882 = ((((1.0 - _1873) * (_1868 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1868 + 1.0))) + _1873) * _1756;
        _1890 = _1723;
        _1891 = _1722;
        _1892 = _1721;
        _1893 = _1733;
        _1894 = _1732;
        _1895 = _1731;
        _1896 = _1743;
        _1897 = _1742;
        _1898 = _1741;
        _1899 = _1756;
        _1900 = _1755;
        _1901 = _1754;
        _1902 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)));
        _1903 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)));
        _1904 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)));
    }
    else
    {
        _1890 = _1584;
        _1891 = _1584;
        _1892 = _1584;
        _1893 = _1584;
        _1894 = _1584;
        _1895 = _1584;
        _1896 = _1584;
        _1897 = _1584;
        _1898 = _1584;
        _1899 = _1584;
        _1900 = _1584;
        _1901 = _1584;
        _1902 = 0.0;
        _1903 = 0.0;
        _1904 = 0.0;
    }
    float _1914 = (cbModelParam._m0[1u].x * (_1902 - _1596)) + _1596;
    float _1915 = (cbModelParam._m0[1u].x * (_1903 - _1597)) + _1597;
    float _1916 = (cbModelParam._m0[1u].x * (_1904 - _1598)) + _1598;
    float _1937 = fma(_1916, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1914 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1916, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1914 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1916, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1914));
    float _1958 = _1218 * 0.5;
    float _1959 = _1219 * 0.5;
    float _1960 = _1220 * 0.5;
    float _1961 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1892, _1895, _1898, _1901));
    float _1964 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1891, _1894, _1897, _1900));
    float _1967 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1890, _1893, _1896, _1899));
    float _2001;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1974 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1583, _1587, _1590, _1593));
        float _1978 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1585, _1588, _1591, _1594));
        float _1982 = dot(vec4(_1958, _1959, _1960, 1.0), vec4(_1586, _1589, _1592, _1595));
        float _1989 = dot(vec4(cbModelParam._m0[39u]), vec4(_1958, _1959, _1960, 1.0));
        _2001 = dot(vec3(isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)), isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)), isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1989) ? 0.0 : (isnan(0.0) ? _1989 : max(0.0, _1989))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2001 = 1.0;
    }
    float _2012;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2003 = dot(vec4(cbModelParam._m0[40u]), vec4(_1958, _1959, _1960, 1.0));
        _2012 = dot(vec3(isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2003) ? 0.0 : (isnan(0.0) ? _2003 : max(0.0, _2003))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2012 = 1.0;
    }
    float _2016 = (_2012 * cbModelParam._m0[1u].x) + (_2001 * (1.0 - cbModelParam._m0[1u].x));
    float _2026 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1048);
    float _2027 = isnan(_2026) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2026 : min(cbModelParam._m0[25u].z, _2026));
    float _2107;
    float _2109;
    float _2111;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2074 = fma(_1282, cbModelParam._m0[13u].z, fma(_1278, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1274)) + cbModelParam._m0[13u].w;
        float _2078 = fma(_1282, cbModelParam._m0[14u].z, fma(_1278, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1274)) + cbModelParam._m0[14u].w;
        float _2082 = fma(_1282, cbModelParam._m0[15u].z, fma(_1278, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1274)) + cbModelParam._m0[15u].w;
        float _2085 = fma(_1220, cbModelParam._m0[13u].z, fma(_1219, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1218));
        float _2088 = fma(_1220, cbModelParam._m0[14u].z, fma(_1219, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1218));
        float _2091 = fma(_1220, cbModelParam._m0[15u].z, fma(_1219, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1218));
        float _2119;
        if (_2085 > 0.0)
        {
            _2119 = abs((1.0 - _2074) / _2085);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2074 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2119 = frontier_phi_14_12_ladder;
        }
        float _2342;
        if (_2088 > 0.0)
        {
            _2342 = abs((1.0 - _2078) / _2088);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2078 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2342 = frontier_phi_23_19_ladder;
        }
        float _2599;
        if (_2091 > 0.0)
        {
            _2599 = abs((1.0 - _2082) / _2091);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2082 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2599 = frontier_phi_35_30_ladder;
        }
        float _2601 = isnan(_2342) ? _2119 : (isnan(_2119) ? _2342 : min(_2119, _2342));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _2085) + _2074;
        float _2607 = (_2602 * _2088) + _2078;
        float _2608 = (_2602 * _2091) + _2082;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2609;
        float _2613 = _2609 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 > _2613) || ((_2607 < _2611) || ((_2606 < _2611) || (_2606 > _2613))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2608, cbModelParam._m0[9u].z, fma(_2607, cbModelParam._m0[9u].y, _2606 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2608, cbModelParam._m0[10u].z, fma(_2607, cbModelParam._m0[10u].y, _2606 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2608, cbModelParam._m0[11u].z, fma(_2607, cbModelParam._m0[11u].y, _2606 * cbModelParam._m0[11u].x))), _2027);
            frontier_phi_13_35_ladder = _2736.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2736.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2736.x * cbModelParam._m0[1u].y;
        }
        _2107 = frontier_phi_13_35_ladder_2;
        _2109 = frontier_phi_13_35_ladder_1;
        _2111 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1218, _1219, _1220), _2027);
        _2107 = _2095.x * cbModelParam._m0[1u].y;
        _2109 = _2095.y * cbModelParam._m0[1u].y;
        _2111 = _2095.z * cbModelParam._m0[1u].y;
    }
    float _2115 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1048);
    float _2116 = isnan(_2115) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2115 : min(cbModelParam._m0[25u].w, _2115));
    float _2205;
    float _2207;
    float _2209;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2169 = fma(_1282, cbModelParam._m0[21u].z, fma(_1278, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1274)) + cbModelParam._m0[21u].w;
        float _2173 = fma(_1282, cbModelParam._m0[22u].z, fma(_1278, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1274)) + cbModelParam._m0[22u].w;
        float _2177 = fma(_1282, cbModelParam._m0[23u].z, fma(_1278, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1274)) + cbModelParam._m0[23u].w;
        float _2180 = fma(_1220, cbModelParam._m0[21u].z, fma(_1219, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1218));
        float _2183 = fma(_1220, cbModelParam._m0[22u].z, fma(_1219, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1218));
        float _2186 = fma(_1220, cbModelParam._m0[23u].z, fma(_1219, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1218));
        float _2347;
        if (_2180 > 0.0)
        {
            _2347 = abs((1.0 - _2169) / _2180);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2169 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2347 = frontier_phi_25_21_ladder;
        }
        float _2626;
        if (_2183 > 0.0)
        {
            _2626 = abs((1.0 - _2173) / _2183);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2183 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2173 + 1.0) / _2183);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2626 = frontier_phi_37_32_ladder;
        }
        float _2839;
        if (_2186 > 0.0)
        {
            _2839 = abs((1.0 - _2177) / _2186);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2186 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2177 + 1.0) / _2186);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2839 = frontier_phi_46_43_ladder;
        }
        float _2841 = isnan(_2626) ? _2347 : (isnan(_2347) ? _2626 : min(_2347, _2626));
        float _2842 = isnan(_2839) ? _2841 : (isnan(_2841) ? _2839 : min(_2841, _2839));
        float _2846 = (_2842 * _2180) + _2169;
        float _2847 = (_2842 * _2183) + _2173;
        float _2848 = (_2842 * _2186) + _2177;
        float _2849 = _2842 * 9.9999997473787516355514526367188e-05;
        float _2850 = (-1.0) - _2849;
        float _2852 = _2849 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2848 > _2852) || ((_2848 < _2850) || ((_2847 > _2852) || ((_2847 < _2850) || ((_2846 < _2850) || (_2846 > _2852))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3047 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2848, cbModelParam._m0[17u].z, fma(_2847, cbModelParam._m0[17u].y, _2846 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2848, cbModelParam._m0[18u].z, fma(_2847, cbModelParam._m0[18u].y, _2846 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2848, cbModelParam._m0[19u].z, fma(_2847, cbModelParam._m0[19u].y, _2846 * cbModelParam._m0[19u].x))), _2116);
            frontier_phi_22_46_ladder = _3047.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3047.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3047.x * cbModelParam._m0[1u].z;
        }
        _2205 = frontier_phi_22_46_ladder_2;
        _2207 = frontier_phi_22_46_ladder_1;
        _2209 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2189 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1218, _1219, _1220), _2116);
        _2205 = _2189.x * cbModelParam._m0[1u].z;
        _2207 = _2189.y * cbModelParam._m0[1u].z;
        _2209 = _2189.z * cbModelParam._m0[1u].z;
    }
    float _2222 = (((_1245 * _1194) + _1246) * _1210) * ((cbModelParam._m0[1u].w * (_2205 - _2107)) + _2107);
    float _2224 = (((_1245 * _1196) + _1246) * _1210) * ((cbModelParam._m0[1u].w * (_2207 - _2109)) + _2109);
    float _2226 = (((_1245 * _1197) + _1246) * _1210) * ((cbModelParam._m0[1u].w * (_2209 - _2111)) + _2111);
    float _2229 = fma(_2226, cbSceneParam._m0[89u].z, fma(_2224, cbSceneParam._m0[89u].y, _2222 * cbSceneParam._m0[89u].x));
    float _2232 = fma(_2226, cbSceneParam._m0[90u].z, fma(_2224, cbSceneParam._m0[90u].y, _2222 * cbSceneParam._m0[90u].x));
    float _2235 = fma(_2226, cbSceneParam._m0[91u].z, fma(_2224, cbSceneParam._m0[91u].y, _2222 * cbSceneParam._m0[91u].x));
    vec4 _2243 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1132, _1133));
    float _2245 = _2243.w;
    float _2257 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2245);
    float _2258 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2245);
    float _2259 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2245);
    uvec4 _2263 = floatBitsToUint(cbInstanceData._m0[_290 + 5u]);
    uint _2265 = _2263.x * 14u;
    uint _2266 = _2265 + 13u;
    float _2273 = _1210 + (-1.0);
    float _2278 = (cbLight._m0[_2266].x * _2273) + 1.0;
    float _2279 = (cbLight._m0[_2266].y * _2273) + 1.0;
    float _2280 = (cbLight._m0[_2266].z * _2273) + 1.0;
    float _2281 = (cbLight._m0[_2266].w * _2273) + 1.0;
    uint _2282 = _2265 + 5u;
    float _2288 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
    uint _2292 = _2265 + 4u;
    float _2301 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
    uint _2305 = _2265 | 1u;
    float _2316 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_1045, _1046, _1047));
    float _2319 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_1045, _1046, _1047));
    float _4508 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _4519 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2324 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * 0.3183098733425140380859375;
    float _2326 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * 0.3183098733425140380859375;
    float _2333 = ((cbLight._m0[_2282].x * _2288) * _2326) + (((cbLight._m0[_2292].x * _2257) * _2301) * _2324);
    float _2334 = ((_2288 * cbLight._m0[_2282].y) * _2326) + (((cbLight._m0[_2292].y * _2258) * _2301) * _2324);
    float _2335 = ((_2288 * cbLight._m0[_2282].z) * _2326) + (((cbLight._m0[_2292].z * _2259) * _2301) * _2324);
    uvec4 _2339 = floatBitsToUint(cbLight._m0[_2265 + 12u]);
    bool _2341 = _2339.x == 0u;
    float _2352;
    float _2354;
    float _2356;
    if (_2341)
    {
        _2352 = _2333;
        _2354 = _2334;
        _2356 = _2335;
    }
    else
    {
        uint _2360 = _2265 + 6u;
        float _2376 = (dot(vec3(cbLight._m0[_2265 + 2u].xyz), vec3(_1045, _1046, _1047)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4530 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2379 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2352 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2333;
        _2354 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2334;
        _2356 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2335;
    }
    bool _2359 = _2339.y == 0u;
    float _2397;
    float _2399;
    float _2401;
    if (_2359)
    {
        _2397 = _2352;
        _2399 = _2354;
        _2401 = _2356;
    }
    else
    {
        uint _2570 = _2265 + 7u;
        float _2586 = (dot(vec3(cbLight._m0[_2265 + 3u].xyz), vec3(_1045, _1046, _1047)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4546 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2589 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2397 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2352;
        _2399 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2354;
        _2401 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2356;
    }
    uint _2404 = _2265 + 8u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _1048) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2265].x + _1124;
    float _2420 = cbLight._m0[_2265].y + _1125;
    float _2421 = cbLight._m0[_2265].z + _1126;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2265].xyz));
    float _4562 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _4573 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _2433 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2434 = dot(vec3(_1045, _1046, _1047), vec3(_2426, _2427, _2428));
    float _4584 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2426, _2427, _2428));
    float _4595 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2418 * _2418;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2454 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
    float _2455 = 0.959999978542327880859375 - _1191;
    float _2457 = 0.959999978542327880859375 - _1192;
    float _2458 = 0.959999978542327880859375 - _1193;
    float _2465 = 1.0 - _2418;
    float _2476 = (0.5 / (((_2433 * ((_2432 * _2465) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2465) + _2418) * _2432))) * _2432;
    float _4606 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    uint _2492 = _2265 + 9u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _1048) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2305].x + _1124;
    float _2506 = cbLight._m0[_2305].y + _1125;
    float _2507 = cbLight._m0[_2305].z + _1126;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2305].xyz));
    float _4617 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2519 = dot(vec3(_1045, _1046, _1047), vec3(_2512, _2513, _2514));
    float _4628 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2523 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2512, _2513, _2514));
    float _4639 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = _2504 * _2504;
    float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
    float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0);
    float _2545 = 1.0 - _2504;
    float _2555 = (0.5 / (((_2433 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2545) + _2504) * _2518))) * _2518;
    float _4650 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
    float _2567 = (((((_2538 * _2455) + _1194) * cbLight._m0[_2492].x) * _2557) * _2288) + ((((cbLight._m0[_2404].x * _2257) * ((_2454 * _2455) + _1194)) * _2478) * _2301);
    float _2568 = (((((_2538 * _2457) + _1196) * cbLight._m0[_2492].y) * _2557) * _2288) + ((((cbLight._m0[_2404].y * _2258) * ((_2454 * _2457) + _1196)) * _2478) * _2301);
    float _2569 = (((((_2538 * _2458) + _1197) * cbLight._m0[_2492].z) * _2557) * _2288) + ((((cbLight._m0[_2404].z * _2259) * ((_2454 * _2458) + _1197)) * _2478) * _2301);
    float _2631;
    float _2633;
    float _2635;
    if (_2341)
    {
        _2631 = _2567;
        _2633 = _2568;
        _2635 = _2569;
    }
    else
    {
        uint _2637 = _2265 + 2u;
        uint _2641 = _2265 + 10u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _1048) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _1124;
        float _2658 = cbLight._m0[_2637].y + _1125;
        float _2659 = cbLight._m0[_2637].z + _1126;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2637].xyz));
        float _4661 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2671 = dot(vec3(_1045, _1046, _1047), vec3(_2664, _2665, _2666));
        float _4672 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4683 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2433 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2697) + _2656) * _2670))) * _2670;
        float _4694 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2631 = (((((_2690 * _2455) + _1194) * cbLight._m0[_2641].x) * _2709) * _2710) + _2567;
        _2633 = (((((_2690 * _2457) + _1196) * cbLight._m0[_2641].y) * _2709) * _2710) + _2568;
        _2635 = (((((_2690 * _2458) + _1197) * cbLight._m0[_2641].z) * _2709) * _2710) + _2569;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2359)
    {
        _2745 = _2631;
        _2747 = _2633;
        _2749 = _2635;
    }
    else
    {
        uint _2756 = _2265 + 3u;
        uint _2760 = _2265 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _1048) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _1124;
        float _2777 = cbLight._m0[_2756].y + _1125;
        float _2778 = cbLight._m0[_2756].z + _1126;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2756].xyz));
        float _4710 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2790 = dot(vec3(_1045, _1046, _1047), vec3(_2783, _2784, _2785));
        float _4721 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4732 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2433 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2816) + _2775) * _2789))) * _2789;
        float _4743 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2745 = (((((_2809 * _2455) + _1194) * cbLight._m0[_2760].x) * _2828) * _2829) + _2631;
        _2747 = (((((_2809 * _2457) + _1196) * cbLight._m0[_2760].y) * _2828) * _2829) + _2633;
        _2749 = (((((_2809 * _2458) + _1197) * cbLight._m0[_2760].z) * _2828) * _2829) + _2635;
    }
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_2263.y == 0u)
    {
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2904;
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2904;
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2904;
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.x;
        uint _2931 = uint((float(_2919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1133) / _2920))) + floor(float(uint(cbSceneParam._m0[85u].x * _1132) / _2920)));
        float _2941 = (log2(_2907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2942 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        uint _2945 = uint(isnan(14.0) ? _2942 : (isnan(_2942) ? 14.0 : min(_2942, 14.0)));
        uvec4 _2950 = texelFetch(g_lightClusterGridBuffer, int(((_2945 << 2u) + (_2931 << 6u)) >> 2u));
        uint _2951 = _2950.x;
        uint _2952 = _2919.z;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((((1u << ((_2952 >> 4u) & 15u)) + 4294967295u) & _2951) == 0u) || ((_2952 & 240u) == 0u))
        {
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
        }
        else
        {
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            uint _3203 = 0u;
            uint _3212;
            bool _3213;
            for (;;)
            {
                _3212 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3203 << 2u)) >> 2u)).x;
                _3213 = _3212 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3213)
                {
                    frontier_phi_61_pred = _3197;
                    frontier_phi_61_pred_1 = _3202;
                    frontier_phi_61_pred_2 = _3201;
                    frontier_phi_61_pred_3 = _3200;
                    frontier_phi_61_pred_4 = _3199;
                    frontier_phi_61_pred_5 = _3198;
                }
                else
                {
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    uint _3327;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3212;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    for (;;)
                    {
                        uint _3331 = uint(findLSB(_3327)) + (_3203 << 5u);
                        uint _3328 = (_3327 + 4294967295u) & _3327;
                        uint _3333 = _3331 * 48u;
                        vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 3u)).x));
                        uint _3353 = (_3331 * 48u) + 4u;
                        vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 3u)).x));
                        uint _3372 = (_3331 * 48u) + 8u;
                        vec3 _3383 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x));
                        float _3387 = _3347.x - _2905;
                        float _3388 = _3347.y - _2906;
                        float _3389 = _3347.z - _2907;
                        float _3390 = dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389));
                        float _3393 = inversesqrt(_3390);
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3397 = dot(vec3(_1151, _1154, _1157), vec3(_3394, _3395, _3396));
                        float _3402 = 1.0 - (_3390 * _3347.w);
                        float _4769 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3403 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3404 = sqrt(_3390) * _3366.w;
                        float _3407 = 1.39999997615814208984375 / (_3404 + 1.39999997615814208984375);
                        float _3408 = _3407 * _3407;
                        float _3411 = ((1.0 - _3408) * _3397) + _3408;
                        float _3414 = _3404 * _3404;
                        float _3418 = ((isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))) * _3403) / ((_3414 * 0.699999988079071044921875) + 1.0);
                        float _3422 = (-0.0) - _2905;
                        float _3423 = (-0.0) - _2906;
                        float _3424 = (-0.0) - _2907;
                        float _3428 = inversesqrt(dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424)));
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3439 = exp2(log2(1.0 / ((_3414 * 3.5) + 5.0)) * 0.25);
                        float _3440 = 1.0 - _1226;
                        float _3447 = sqrt(1.0 - ((1.0 - (_3440 * _3440)) * (1.0 - (_3439 * _3439))));
                        float _3448 = _3447 * _3447;
                        float _3449 = _3448 * _3448;
                        float _3450 = _3429 + _3394;
                        float _3451 = _3430 + _3395;
                        float _3452 = _3431 + _3396;
                        float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                        float _3460 = dot(vec3(_1151, _1154, _1157), vec3(_3429, _3430, _3431));
                        float _4785 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3463 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3464 = dot(vec3(_1151, _1154, _1157), vec3(_3456 * _3450, _3456 * _3451, _3456 * _3452));
                        float _4796 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3467 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3471 = ((_3467 * _3467) * (_3449 + (-1.0))) + 1.0;
                        float _3472 = _3407 * _3448;
                        float _3473 = _3472 * _3472;
                        float _3476 = ((1.0 - _3473) * _3397) + _3473;
                        float _4807 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3477 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3478 = 1.0 - _3448;
                        float _3488 = (0.5 / (((_3477 * ((_3463 * _3478) + _3448)) + 9.9999999392252902907785028219223e-09) + (((_3477 * _3478) + _3448) * _3463))) * _3477;
                        float _4818 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3499 = (((_3449 * 3.1415927410125732421875) * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) / ((_3471 * _3471) * ((_3414 * 2.1991131305694580078125) + 3.141590118408203125))) * _3403;
                        _3256 = (_3418 * _3366.x) + _3324;
                        _3257 = (_3418 * _3366.y) + _3325;
                        _3258 = (_3418 * _3366.z) + _3326;
                        _3253 = (_3499 * _3383.x) + _3321;
                        _3254 = (_3499 * _3383.y) + _3322;
                        _3255 = (_3499 * _3383.z) + _3323;
                        if (_3328 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3328;
                        }
                    }
                    frontier_phi_61_pred = _3253;
                    frontier_phi_61_pred_1 = _3258;
                    frontier_phi_61_pred_2 = _3257;
                    frontier_phi_61_pred_3 = _3256;
                    frontier_phi_61_pred_4 = _3255;
                    frontier_phi_61_pred_5 = _3254;
                }
                _3053 = frontier_phi_61_pred;
                _3063 = frontier_phi_61_pred_1;
                _3061 = frontier_phi_61_pred_2;
                _3059 = frontier_phi_61_pred_3;
                _3057 = frontier_phi_61_pred_4;
                _3055 = frontier_phi_61_pred_5;
                uint _3204 = _3203 + 1u;
                if (_3204 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3197 = _3053;
                    _3198 = _3055;
                    _3199 = _3057;
                    _3200 = _3059;
                    _3201 = _3061;
                    _3202 = _3063;
                    _3203 = _3204;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
        }
        uvec4 _3066 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3067 = _3066.z;
        uint _3069 = (_3067 >> 8u) & 15u;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        if (((4294967295u << _3069) & _2951) == 0u)
        {
            _3165 = _3052;
            _3167 = _3054;
            _3169 = _3056;
            _3171 = _3058;
            _3173 = _3060;
            _3175 = _3062;
        }
        else
        {
            float _3190 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
            float _3191 = _3190 * _2905;
            float _3192 = _3190 * _2906;
            float _3193 = _3190 * _2907;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3069 < ((_3067 >> 12u) & 15u))
            {
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3304 = _3052;
                float _3305 = _3054;
                float _3306 = _3056;
                float _3307 = _3058;
                float _3308 = _3060;
                float _3309 = _3062;
                uint _3310 = _3069;
                uint _3319;
                bool _3320;
                for (;;)
                {
                    _3319 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3310 << 2u)) >> 2u)).x;
                    _3320 = _3319 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3320)
                    {
                        frontier_phi_67_pred = _3307;
                        frontier_phi_67_pred_1 = _3308;
                        frontier_phi_67_pred_2 = _3309;
                        frontier_phi_67_pred_3 = _3306;
                        frontier_phi_67_pred_4 = _3305;
                        frontier_phi_67_pred_5 = _3304;
                    }
                    else
                    {
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3517 = _3304;
                        float _3518 = _3305;
                        float _3519 = _3306;
                        float _3520 = _3307;
                        float _3521 = _3308;
                        float _3522 = _3309;
                        uint _3523 = _3319;
                        uint _3524;
                        vec4 _3549;
                        float _3550;
                        vec4 _3565;
                        vec3 _3577;
                        vec4 _3592;
                        vec4 _3607;
                        float _3653;
                        bool _3654;
                        for (;;)
                        {
                            uint _3534 = ((_3310 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3523));
                            _3524 = (_3523 + 4294967295u) & _3523;
                            uint _3536 = _3534 * 40u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            _3550 = _3549.w;
                            uint _3552 = (_3534 * 40u) + 4u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3534 * 40u) + 8u;
                            _3577 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x));
                            uint _3579 = (_3534 * 40u) + 16u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3594 = (_3534 * 40u) + 20u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            uint _3609 = (_3534 * 40u) + 24u;
                            vec4 _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            uint _3628 = (_3534 * 40u) + 28u;
                            vec4 _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            _3653 = fma(_2907, _3641.z, fma(_2906, _3641.y, _3641.x * _2905)) + _3641.w;
                            _3654 = !((fma(_2907, _3622.z, fma(_2906, _3622.y, _3622.x * _2905)) + _3622.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3654)
                            {
                                float _3681 = _3549.x - _2905;
                                float _3682 = _3549.y - _2906;
                                float _3683 = _3549.z - _2907;
                                float _3684 = dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683));
                                float _3687 = inversesqrt(_3684);
                                float _3688 = _3687 * _3681;
                                float _3689 = _3687 * _3682;
                                float _3690 = _3687 * _3683;
                                float _3694 = 1.0 - (_3684 / (_3550 * _3550));
                                float _4829 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3695 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3699 = sqrt(_3684) * _3565.w;
                                float _3701 = 1.39999997615814208984375 / (_3699 + 1.39999997615814208984375);
                                float _3702 = _3701 * _3701;
                                float _3705 = ((1.0 - _3702) * dot(vec3(_3688, _3689, _3690), vec3(_1151, _1154, _1157))) + _3702;
                                float _3708 = _3699 * _3699;
                                float _3712 = (fma(_2907, _3592.z, fma(_2906, _3592.y, _3592.x * _2905)) + _3592.w) / _3653;
                                float _3713 = (fma(_2907, _3607.z, fma(_2906, _3607.y, _3607.x * _2905)) + _3607.w) / _3653;
                                float _3717 = 1.0 - dot(vec2(_3712, _3713), vec2(_3712, _3713));
                                float _4845 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3718 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3719 = _3718 * (((isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0))) * _3695) / ((_3708 * 0.699999988079071044921875) + 1.0));
                                float _3731 = exp2(log2(1.0 / ((_3708 * 3.5) + 5.0)) * 0.25);
                                float _3732 = 1.0 - _1226;
                                float _3739 = sqrt(1.0 - ((1.0 - (_3732 * _3732)) * (1.0 - (_3731 * _3731))));
                                float _3740 = _3739 * _3739;
                                float _3741 = _3740 * _3740;
                                float _3742 = _3688 - _3191;
                                float _3743 = _3689 - _3192;
                                float _3744 = _3690 - _3193;
                                float _3748 = inversesqrt(dot(vec3(_3742, _3743, _3744), vec3(_3742, _3743, _3744)));
                                float _3752 = dot(vec3(_1151, _1154, _1157), vec3((-0.0) - _3191, (-0.0) - _3192, (-0.0) - _3193));
                                float _4856 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3755 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3756 = dot(vec3(_1151, _1154, _1157), vec3(_3748 * _3742, _3748 * _3743, _3748 * _3744));
                                float _4867 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3759 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3763 = ((_3759 * _3759) * (_3741 + (-1.0))) + 1.0;
                                float _3764 = _3701 * _3740;
                                float _3765 = _3764 * _3764;
                                float _3771 = ((1.0 - _3765) * dot(vec3(_1151, _1154, _1157), vec3(_3688, _3689, _3690))) + _3765;
                                float _4878 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3772 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3773 = 1.0 - _3740;
                                float _3783 = (0.5 / (((_3772 * ((_3755 * _3773) + _3740)) + 9.9999999392252902907785028219223e-09) + (((_3772 * _3773) + _3740) * _3755))) * _3772;
                                float _4889 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3793 = (_3718 * _3695) * (((_3741 * 3.1415927410125732421875) * (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) / ((_3763 * _3763) * ((_3708 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3793 * _3577.x;
                                frontier_phi_73_pred_1 = _3793 * _3577.y;
                                frontier_phi_73_pred_2 = _3719 * _3565.z;
                                frontier_phi_73_pred_3 = _3719 * _3565.y;
                                frontier_phi_73_pred_4 = _3719 * _3565.x;
                                frontier_phi_73_pred_5 = _3793 * _3577.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3797 = frontier_phi_73_pred;
                            _3798 = frontier_phi_73_pred_1;
                            _3802 = frontier_phi_73_pred_2;
                            _3801 = frontier_phi_73_pred_3;
                            _3800 = frontier_phi_73_pred_4;
                            _3799 = frontier_phi_73_pred_5;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            _3509 = _3802 + _3522;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            _3506 = _3799 + _3519;
                            if (_3524 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3524;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3507;
                        frontier_phi_67_pred_1 = _3508;
                        frontier_phi_67_pred_2 = _3509;
                        frontier_phi_67_pred_3 = _3506;
                        frontier_phi_67_pred_4 = _3505;
                        frontier_phi_67_pred_5 = _3504;
                    }
                    _3172 = frontier_phi_67_pred;
                    _3174 = frontier_phi_67_pred_1;
                    _3176 = frontier_phi_67_pred_2;
                    _3170 = frontier_phi_67_pred_3;
                    _3168 = frontier_phi_67_pred_4;
                    _3166 = frontier_phi_67_pred_5;
                    uint _3311 = _3310 + 1u;
                    if (_3311 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3304 = _3166;
                        _3305 = _3168;
                        _3306 = _3170;
                        _3307 = _3172;
                        _3308 = _3174;
                        _3309 = _3176;
                        _3310 = _3311;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3174;
                frontier_phi_55_56_ladder_1 = _3176;
                frontier_phi_55_56_ladder_2 = _3172;
                frontier_phi_55_56_ladder_3 = _3170;
                frontier_phi_55_56_ladder_4 = _3168;
                frontier_phi_55_56_ladder_5 = _3166;
            }
            else
            {
                frontier_phi_55_56_ladder = _3060;
                frontier_phi_55_56_ladder_1 = _3062;
                frontier_phi_55_56_ladder_2 = _3058;
                frontier_phi_55_56_ladder_3 = _3056;
                frontier_phi_55_56_ladder_4 = _3054;
                frontier_phi_55_56_ladder_5 = _3052;
            }
            _3165 = frontier_phi_55_56_ladder_5;
            _3167 = frontier_phi_55_56_ladder_4;
            _3169 = frontier_phi_55_56_ladder_3;
            _3171 = frontier_phi_55_56_ladder_2;
            _3173 = frontier_phi_55_56_ladder;
            _3175 = frontier_phi_55_56_ladder_1;
        }
        float _3180 = isnan(1.0) ? _1210 : (isnan(_1210) ? 1.0 : min(_1210, 1.0));
        _2964 = (_3180 * _3171) + _2397;
        _2966 = (_3180 * _3173) + _2399;
        _2968 = (_3180 * _3175) + _2401;
        _2970 = ((_3165 * _1194) * _3180) + _2745;
        _2972 = ((_3167 * _1196) * _3180) + _2747;
        _2974 = ((_3169 * _1197) * _3180) + _2749;
    }
    else
    {
        _2964 = _2397;
        _2966 = _2399;
        _2968 = _2401;
        _2970 = _2745;
        _2972 = _2747;
        _2974 = _2749;
    }
    float _4905 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _4916 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _4927 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    uint _2994 = _290 + 6u;
    float _3002 = _1132 / cbSceneParam._m0[86u].x;
    float _3003 = _1133 / cbSceneParam._m0[86u].y;
    vec4 _3017 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, (log2((isnan(cbSceneParam._m0[77u].w) ? _1067 : (isnan(_1067) ? cbSceneParam._m0[77u].w : min(_1067, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3019 = _3017.x;
    float _3020 = _3017.y;
    float _3021 = _3017.z;
    float _3022 = _3017.w;
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    if (_1067 > cbSceneParam._m0[78u].w)
    {
        float _3077 = isnan(_1067) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1067 : min(cbSceneParam._m0[80u].w, _1067));
        float _3078 = _3077 / _1067;
        float _3089 = _3078 * _1117;
        float _3090 = _1118 * _3078;
        float _3091 = (-0.0) - _3090;
        float _3093 = _3078 * _1119;
        float _3095 = (cbSceneParam._m0[77u].w * _3091) / _3077;
        float _3096 = _3095 + cbSceneParam._m0[79u].w;
        float _3097 = cbSceneParam._m0[79u].w - _3090;
        float _3103 = sqrt(((_3089 * _3089) + (_3090 * _3090)) + (_3093 * _3093));
        float _3106 = (1.0 - (cbSceneParam._m0[77u].w / _3077)) * _3103;
        float _3111 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3113 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3266;
        if (abs((_3091 - _3095) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3266 = ((((_3096 > 0.0) ? exp2(_3111 * _3096) : (2.0 - exp2(_3113 * _3096))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3106;
        }
        else
        {
            float _3226 = 1.0 / cbSceneParam._m0[80u].x;
            float _3227 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : max(_3096, _3097));
            float _3228 = isnan(_3097) ? _3096 : (isnan(_3096) ? _3097 : min(_3096, _3097));
            float _3237 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : min(_3227, 0.0));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            _3266 = ((abs(_3103 / _3091) * cbSceneParam._m0[80u].y) * ((((_3237 - _3238) * 2.0) - ((exp2(_3111 * (isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0)))) - exp2(_3111 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))))) * _3226)) - ((exp2(_3113 * _3237) - exp2(_3113 * _3238)) * _3226))) + (_3106 * cbSceneParam._m0[80u].z);
        }
        vec4 _3268 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, 1.0), 0.0);
        float _3277 = exp2((_3266 * (-1.44269502162933349609375)) * (1.0 - _3268.w));
        float _3278 = log2(_3277);
        float _3294 = log2(_3022);
        _3115 = (exp2(_3294 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].x)) * _3268.x) / cbSceneParam._m0[78u].x)) + _3019;
        _3117 = (exp2(_3294 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].y)) * _3268.y) / cbSceneParam._m0[78u].y)) + _3020;
        _3119 = (exp2(_3294 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3278 * cbSceneParam._m0[78u].z)) * _3268.z) / cbSceneParam._m0[78u].z)) + _3021;
        _3121 = _3277 * _3022;
    }
    else
    {
        _3115 = _3019;
        _3117 = _3020;
        _3119 = _3021;
        _3121 = _3022;
    }
    float _3133 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3134 = _3133 == 3.0;
    float _3135 = log2(_3121);
    float _3142 = exp2(_3135 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2964 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1210))) + ((_2970 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2016)) * cbPerFrame._m0[3u].x));
    float _3143 = exp2(_3135 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2966 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1210))) + ((_2972 + ((isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0))) * _2016)) * cbPerFrame._m0[3u].x));
    float _3144 = exp2(_3135 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2968 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1210))) + ((_2974 + ((isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0))) * _2016)) * cbPerFrame._m0[3u].x));
    float _3153 = (_3133 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3153 * (_3134 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3115)));
    SV_Target.y = _3153 * (_3134 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.z = _3153 * (_3134 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3119)));
    SV_Target.w = cbInstanceData._m0[_2994].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2994].w;
}


