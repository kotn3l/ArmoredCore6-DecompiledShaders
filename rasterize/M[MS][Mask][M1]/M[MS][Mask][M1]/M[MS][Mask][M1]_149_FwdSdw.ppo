#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1755;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _265 = _264 * _256;
    float _266 = _264 * _257;
    float _267 = _264 * _258;
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = _271 * NORMAL.x;
    float _273 = _271 * NORMAL.y;
    float _274 = _271 * NORMAL.z;
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = _278 * TANGENT.x;
    float _280 = _278 * TANGENT.y;
    float _281 = _278 * TANGENT.z;
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4360 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4371 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4382 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _390 = _385.x * cbMtdParam._m0[11u].x;
    float _391 = _385.y * cbMtdParam._m0[11u].y;
    float _392 = _385.z * cbMtdParam._m0[11u].z;
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _479 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _496 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _430.x) * 2.0) - ((((_467 - _479) * cbMtdParam._m0[23u].w) + _479) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4393 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _504 = (_497 * ((_411.x * cbMtdParam._m0[12u].x) - _390)) + _390;
    float _505 = (_497 * ((_411.y * cbMtdParam._m0[12u].y) - _391)) + _391;
    float _506 = (_497 * ((_411.z * cbMtdParam._m0[12u].z) - _392)) + _392;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _545 = _543.x;
    float _555 = dot(vec4(_545, _543.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _569 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _430.y) * 2.0) - ((((_545 - _555) * cbMtdParam._m0[23u].w) + _555) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4404 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _577 = (_570 * ((_523.x * cbMtdParam._m0[13u].x) - _504)) + _504;
    float _578 = (_570 * ((_523.y * cbMtdParam._m0[13u].y) - _505)) + _505;
    float _579 = (_570 * ((_523.z * cbMtdParam._m0[13u].z) - _506)) + _506;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _617 = _615.x;
    float _627 = dot(vec4(_617, _615.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _639 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _430.z) * 2.0) - ((((_617 - _627) * cbMtdParam._m0[23u].w) + _627) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4415 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _650 = (_359.x * cbMtdParam._m0[9u].x) * ((_640 * ((_598.x * cbMtdParam._m0[14u].x) - _577)) + _577);
    float _651 = (_359.y * cbMtdParam._m0[9u].y) * ((_640 * ((_598.y * cbMtdParam._m0[14u].y) - _578)) + _578);
    float _652 = (_359.z * cbMtdParam._m0[9u].z) * ((_640 * ((_598.z * cbMtdParam._m0[14u].z) - _579)) + _579);
    float _656 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _650;
    float _659 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _651;
    float _662 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _652;
    float _670 = (((_650 - _656) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) + _656) * 4.55000019073486328125;
    float _672 = (((_651 - _659) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) + _659) * 4.55000019073486328125;
    float _674 = (((_652 - _662) * (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) + _662) * 4.55000019073486328125;
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _322) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _323) + cbTextureTilingScale._m0[14u].w));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _755 = _753.x;
    float _756 = _753.y;
    float _757 = _753.z;
    float _764 = ((_736.x - _755) * _497) + _755;
    float _765 = ((_736.y - _756) * _497) + _756;
    float _766 = ((_736.z - _757) * _497) + _757;
    vec4 _778 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _789 = ((_778.x - _764) * _570) + _764;
    float _790 = ((_778.y - _765) * _570) + _765;
    float _791 = ((_778.z - _766) * _570) + _766;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _816 = ((_803.z - _791) * _640) + _791;
    float _819 = ((((_803.x - _789) * _640) + _789) * 2.0) + (-1.0);
    float _820 = ((((_803.y - _790) * _640) + _790) * 2.0) + (-1.0);
    float _821 = dot(vec2(_819, _820), vec2(_819, _820));
    float _4426 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _826 = sqrt(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))));
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _856 = (_819 + ((((_711.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_844.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _857 = (_820 + ((((_711.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_844.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _860 = fma(_826, _272, fma(_857, _279, _856 * _265));
    float _863 = fma(_826, _273, fma(_857, _280, _856 * _266));
    float _866 = fma(_826, _274, fma(_857, _281, _856 * _267));
    float _870 = inversesqrt(dot(vec3(_860, _863, _866), vec3(_860, _863, _866)));
    vec4 _897 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _899 = _897.x;
    float _900 = 1.0 - _899;
    float _908 = (cbMtdParam._m0[19u].x + dot(vec4(_870 * _860, _870 * _863, _870 * _866, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_899 - _900) * cbMtdParam._m0[24u].z) + _900) * cbMtdParam._m0[21u].z);
    float _4437 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _909 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _911 = (-0.0) - cbMtdParam._m0[24u].x;
    float _913 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _913 : (isnan(_913) ? 1.0 : min(_913, 1.0));
    float _921 = _909 - ((_909 * TEXCOORD_8.x) * _914);
    float _922 = _909 - ((_909 * TEXCOORD_8.y) * _914);
    float _923 = _909 - ((_909 * TEXCOORD_8.z) * _914);
    float _930 = (_921 * ((_692.x * cbMtdParam._m0[18u].x) - _670)) + _670;
    float _931 = (_922 * ((_692.y * cbMtdParam._m0[18u].y) - _672)) + _672;
    float _932 = (_923 * ((_692.z * cbMtdParam._m0[18u].z) - _674)) + _674;
    float _947 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _948 = _947 * TEXCOORD.z;
    float _949 = _947 * TEXCOORD.w;
    vec4 _961 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _948) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _949) + cbTextureTilingScale._m0[19u].w));
    float _963 = _961.x;
    float _964 = 1.0 - _963;
    float _990 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_963 - _964) * cbMtdParam._m0[24u].w) + _964) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4458 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _991 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _999 = ((((cbMtdParam._m0[10u].x - _930) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _991) + _930;
    float _1000 = ((((cbMtdParam._m0[10u].y - _931) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _991) + _931;
    float _1001 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _932)) * _991) + _932;
    vec4 _1027 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1029 = _1027.x;
    float _1046 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _1029) * _497) + _1029;
    float _1063 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _1046) * _570) + _1046;
    float _1080 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _1063) * _640) + _1063;
    float _1086 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1080) * cbMtdParam._m0[19u].z) + _1080;
    float _1088 = _1086 - (_1086 * _921);
    float _1090 = _1088 - (_1088 * _991);
    float _1097 = (((_711.z - _816) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _816;
    float _1101 = ((_844.z - _1097) * cbMtdParam._m0[19u].w) + _1097;
    vec4 _1117 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1124 = (_1117.x * 2.0) + (-1.0);
    float _1125 = (_1117.y * 2.0) + (-1.0);
    float _1126 = dot(vec2(_1124, _1125), vec2(_1124, _1125));
    float _4469 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1134 = ((_1117.z - _1101) * _921) + _1101;
    float _1137 = ((cbMtdParam._m0[23u].x - _1134) * _991) + _1134;
    vec4 _1160 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _948) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _949) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1166 = (_1160.x * 2.0) + (-1.0);
    float _1167 = (_1160.y * 2.0) + (-1.0);
    float _1168 = dot(vec2(_1166, _1167), vec2(_1166, _1167));
    float _4480 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1183 = ((sqrt(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) - _826) * _923) + _826;
    float _1186 = (((_1124 - _856) * _921) + _856) + (cbMtdParam._m0[21u].x * _856);
    float _1187 = (((_1125 - _857) * _922) + _857) + (cbMtdParam._m0[21u].x * _857);
    float _1198 = (((_1166 - _1186) + (_1186 * cbMtdParam._m0[22u].z)) * _991) + _1186;
    float _1199 = (((_1167 - _1187) + (_1187 * cbMtdParam._m0[22u].z)) * _991) + _1187;
    float _1200 = (_991 * (sqrt(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) - _1183)) + _1183;
    float _1202 = cbMtdParam._m0[22u].x + _844.w;
    float _1205 = fma(_1200, _272, fma(_1199, _279, _1198 * _265));
    float _1208 = fma(_1200, _273, fma(_1199, _280, _1198 * _266));
    float _1211 = fma(_1200, _274, fma(_1199, _281, _1198 * _267));
    float _1215 = inversesqrt(dot(vec3(_1205, _1208, _1211), vec3(_1205, _1208, _1211)));
    float _1216 = _1215 * _1205;
    float _1217 = _1215 * _1208;
    float _1218 = _1215 * _1211;
    float _4491 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1219 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _4502 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _4513 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4524 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4535 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4546 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1224 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _1238 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1278 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1288 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1278);
    float _1289 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1278);
    float _1290 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1278);
    float _1294 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
    float _1295 = _1288 * _1294;
    float _1296 = _1289 * _1294;
    float _1297 = _1290 * _1294;
    float _1303 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1304 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1322 = fma(_1218, cbSceneParam._m0[5u].z, fma(_1217, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1216));
    float _1325 = fma(_1218, cbSceneParam._m0[6u].z, fma(_1217, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1216));
    float _1328 = fma(_1218, cbSceneParam._m0[7u].z, fma(_1217, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1216));
    uint _1342 = (_303 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1348 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * cbInstanceData._m0[_1342].x;
    float _1349 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * cbInstanceData._m0[_1342].y;
    float _1350 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * cbInstanceData._m0[_1342].z;
    float _4557 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
    float _1351 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _4568 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
    float _1352 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _4579 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
    float _1353 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _1354 = 1.0 - _1224;
    float _1355 = _1351 * _1354;
    float _1356 = _1352 * _1354;
    float _1357 = _1353 * _1354;
    float _1362 = (_1351 + (-0.039999999105930328369140625)) * _1224;
    float _1363 = (_1352 + (-0.039999999105930328369140625)) * _1224;
    float _1364 = (_1353 + (-0.039999999105930328369140625)) * _1224;
    float _1365 = _1362 + 0.039999999105930328369140625;
    float _1367 = _1363 + 0.039999999105930328369140625;
    float _1368 = _1364 + 0.039999999105930328369140625;
    vec4 _1377 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1303, cbSceneParam._m0[86u].y * _1304));
    float _1381 = ((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * TEXCOORD_5.w) * _1377.x;
    float _1382 = dot(vec3(_1216, _1217, _1218), vec3(_1295, _1296, _1297));
    float _1385 = _1382 * 2.0;
    float _1389 = (_1385 * _1216) - _1295;
    float _1390 = (_1385 * _1217) - _1296;
    float _1391 = (_1385 * _1218) - _1297;
    float _1395 = abs(dot(vec3(_1295, _1296, _1297), vec3(_1216, _1217, _1218)));
    float _4590 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
    float _1397 = sqrt(_1219);
    float _1410 = exp2((_1397 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1397 * 3.0));
    float _1416 = (1.0 - _1410) * ((_1397 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1417 = _1410 * _1397;
    float _1445 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1449 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1453 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1754;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1479 = fma(_1453, cbModelParam._m0[26u].z, fma(_1449, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1445));
        float _1483 = fma(_1453, cbModelParam._m0[27u].z, fma(_1449, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1445));
        float _1487 = fma(_1453, cbModelParam._m0[28u].z, fma(_1449, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1445));
        float _1512 = _1445 + _1216;
        float _1513 = _1449 + _1217;
        float _1514 = _1453 + _1218;
        float _1524 = fma(_1514, cbModelParam._m0[26u].z, fma(_1513, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1512)) - _1479;
        float _1525 = fma(_1514, cbModelParam._m0[27u].z, fma(_1513, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1512)) - _1483;
        float _1526 = fma(_1514, cbModelParam._m0[28u].z, fma(_1513, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1512)) - _1487;
        float _1530 = inversesqrt(dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526)));
        float _1543 = ((_1530 * _1524) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1479 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1530 * _1525) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1483 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1530 * _1526) / cbModelParam._m0[34u].z) + ((((((_1487 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        float _1582 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1548.x + (-0.5));
        float _1584 = _1582 * (_1548.y + (-0.5));
        float _1585 = _1582 * (_1548.z + (-0.5));
        float _1592 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1555.x + (-0.5));
        float _1594 = _1592 * (_1555.y + (-0.5));
        float _1595 = _1592 * (_1555.z + (-0.5));
        float _1602 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1562.x + (-0.5));
        float _1604 = _1602 * (_1562.y + (-0.5));
        float _1605 = _1602 * (_1562.z + (-0.5));
        float _1612 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1569.x + (-0.5));
        float _1614 = _1612 * (_1569.y + (-0.5));
        float _1615 = _1612 * (_1569.z + (-0.5));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = _1583 * 0.5;
        float _1620 = _1593 * 0.5;
        float _1621 = _1603 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1636 = (dot(vec3(_1216, _1217, _1218), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4616 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1646 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4627 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4638 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_1648 + 1.0))) + _1653) * _1616;
        float _1663 = _1584 * 0.5;
        float _1664 = _1594 * 0.5;
        float _1665 = _1604 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_1216, _1217, _1218), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4649 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4660 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4671 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_1690 + 1.0))) + _1695) * _1617;
        float _1705 = _1585 * 0.5;
        float _1706 = _1595 * 0.5;
        float _1707 = _1605 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_1216, _1217, _1218), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4682 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4693 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4704 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_1732 + 1.0))) + _1737) * _1618;
        _1754 = _1585;
        _1756 = _1584;
        _1757 = _1583;
        _1758 = _1595;
        _1759 = _1594;
        _1760 = _1593;
        _1761 = _1605;
        _1762 = _1604;
        _1763 = _1603;
        _1764 = _1618;
        _1765 = _1617;
        _1766 = _1616;
        _1767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1768 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
        _1769 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
    }
    else
    {
        _1754 = _1755;
        _1756 = _1755;
        _1757 = _1755;
        _1758 = _1755;
        _1759 = _1755;
        _1760 = _1755;
        _1761 = _1755;
        _1762 = _1755;
        _1763 = _1755;
        _1764 = _1755;
        _1765 = _1755;
        _1766 = _1755;
        _1767 = 0.0;
        _1768 = 0.0;
        _1769 = 0.0;
    }
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    float _2070;
    float _2071;
    float _2072;
    float _2073;
    float _2074;
    float _2075;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1792 = fma(_1453, cbModelParam._m0[30u].z, fma(_1449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445));
        float _1796 = fma(_1453, cbModelParam._m0[31u].z, fma(_1449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445));
        float _1800 = fma(_1453, cbModelParam._m0[32u].z, fma(_1449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445));
        float _1823 = _1445 + _1216;
        float _1824 = _1449 + _1217;
        float _1825 = _1453 + _1218;
        float _1835 = fma(_1825, cbModelParam._m0[30u].z, fma(_1824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1823)) - _1792;
        float _1836 = fma(_1825, cbModelParam._m0[31u].z, fma(_1824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1823)) - _1796;
        float _1837 = fma(_1825, cbModelParam._m0[32u].z, fma(_1824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1823)) - _1800;
        float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
        float _1854 = ((_1841 * _1835) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1792 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1855 = ((_1841 * _1836) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1796 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1856 = ((_1841 * _1837) / cbModelParam._m0[35u].z) + ((((((_1800 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1858 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1854, _1855, _1856), 0.0);
        vec4 _1865 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1854, _1855, _1856), 0.0);
        vec4 _1872 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1854, _1855, _1856), 0.0);
        vec4 _1879 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1854, _1855, _1856), 0.0);
        float _1891 = exp2((_1858.w + (-0.5)) * 20.0) * 2.0;
        float _1892 = _1891 * (_1858.x + (-0.5));
        float _1893 = _1891 * (_1858.y + (-0.5));
        float _1894 = _1891 * (_1858.z + (-0.5));
        float _1901 = exp2((_1865.w + (-0.5)) * 20.0) * 2.0;
        float _1902 = _1901 * (_1865.x + (-0.5));
        float _1903 = _1901 * (_1865.y + (-0.5));
        float _1904 = _1901 * (_1865.z + (-0.5));
        float _1911 = exp2((_1872.w + (-0.5)) * 20.0) * 2.0;
        float _1912 = _1911 * (_1872.x + (-0.5));
        float _1913 = _1911 * (_1872.y + (-0.5));
        float _1914 = _1911 * (_1872.z + (-0.5));
        float _1921 = exp2((_1879.w + (-0.5)) * 20.0) * 2.0;
        float _1922 = _1921 * (_1879.x + (-0.5));
        float _1923 = _1921 * (_1879.y + (-0.5));
        float _1924 = _1921 * (_1879.z + (-0.5));
        float _1925 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1926 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1927 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1928 = _1892 * 0.5;
        float _1929 = _1902 * 0.5;
        float _1930 = _1912 * 0.5;
        float _1931 = dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930));
        float _1936 = (_1931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1931);
        float _1944 = (dot(vec3(_1216, _1217, _1218), vec3(_1936 * _1928, _1936 * _1929, _1936 * _1930)) + 1.0) * 0.5;
        float _4745 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1953 = sqrt(((_1929 * _1929) + (_1928 * _1928)) + (_1930 * _1930)) / (_1925 + 9.9999997473787516355514526367188e-06);
        float _4756 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
        float _1955 = _1954 * 2.0;
        float _1959 = (1.0 - _1954) / (_1954 + 1.0);
        float _4767 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _1969 = ((((1.0 - _1960) * (_1955 + 2.0)) * exp2(log2(isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_1955 + 1.0))) + _1960) * _1925;
        float _1970 = _1893 * 0.5;
        float _1971 = _1903 * 0.5;
        float _1972 = _1913 * 0.5;
        float _1973 = dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972));
        float _1978 = (_1973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1973);
        float _1986 = (dot(vec3(_1216, _1217, _1218), vec3(_1978 * _1970, _1978 * _1971, _1978 * _1972)) + 1.0) * 0.5;
        float _4778 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1995 = sqrt(((_1971 * _1971) + (_1970 * _1970)) + (_1972 * _1972)) / (_1926 + 9.9999997473787516355514526367188e-06);
        float _4789 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1996 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _1997 = _1996 * 2.0;
        float _2001 = (1.0 - _1996) / (_1996 + 1.0);
        float _4800 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2011 = ((((1.0 - _2002) * (_1997 + 2.0)) * exp2(log2(isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_1997 + 1.0))) + _2002) * _1926;
        float _2012 = _1894 * 0.5;
        float _2013 = _1904 * 0.5;
        float _2014 = _1914 * 0.5;
        float _2015 = dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014));
        float _2020 = (_2015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2015);
        float _2028 = (dot(vec3(_1216, _1217, _1218), vec3(_2020 * _2012, _2020 * _2013, _2020 * _2014)) + 1.0) * 0.5;
        float _4811 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2037 = sqrt(((_2013 * _2013) + (_2012 * _2012)) + (_2014 * _2014)) / (_1927 + 9.9999997473787516355514526367188e-06);
        float _4822 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2039 = _2038 * 2.0;
        float _2043 = (1.0 - _2038) / (_2038 + 1.0);
        float _4833 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2053 = ((((1.0 - _2044) * (_2039 + 2.0)) * exp2(log2(isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2039 + 1.0))) + _2044) * _1927;
        _2061 = _1894;
        _2062 = _1893;
        _2063 = _1892;
        _2064 = _1904;
        _2065 = _1903;
        _2066 = _1902;
        _2067 = _1914;
        _2068 = _1913;
        _2069 = _1912;
        _2070 = _1927;
        _2071 = _1926;
        _2072 = _1925;
        _2073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0)));
        _2074 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)));
        _2075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0)));
    }
    else
    {
        _2061 = _1755;
        _2062 = _1755;
        _2063 = _1755;
        _2064 = _1755;
        _2065 = _1755;
        _2066 = _1755;
        _2067 = _1755;
        _2068 = _1755;
        _2069 = _1755;
        _2070 = _1755;
        _2071 = _1755;
        _2072 = _1755;
        _2073 = 0.0;
        _2074 = 0.0;
        _2075 = 0.0;
    }
    float _2085 = (cbModelParam._m0[1u].x * (_2073 - _1767)) + _1767;
    float _2086 = (cbModelParam._m0[1u].x * (_2074 - _1768)) + _1768;
    float _2087 = (cbModelParam._m0[1u].x * (_2075 - _1769)) + _1769;
    float _2108 = fma(_2087, cbSceneParam._m0[89u].z, fma(_2086, cbSceneParam._m0[89u].y, _2085 * cbSceneParam._m0[89u].x));
    float _2111 = fma(_2087, cbSceneParam._m0[90u].z, fma(_2086, cbSceneParam._m0[90u].y, _2085 * cbSceneParam._m0[90u].x));
    float _2114 = fma(_2087, cbSceneParam._m0[91u].z, fma(_2086, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2085));
    float _2129 = _1389 * 0.5;
    float _2130 = _1390 * 0.5;
    float _2131 = _1391 * 0.5;
    float _2132 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_2063, _2066, _2069, _2072));
    float _2135 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_2062, _2065, _2068, _2071));
    float _2138 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_2061, _2064, _2067, _2070));
    float _2172;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2145 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_1754, _1758, _1761, _1764));
        float _2149 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_1756, _1759, _1762, _1765));
        float _2153 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_1757, _1760, _1763, _1766));
        float _2160 = dot(vec4(cbModelParam._m0[39u]), vec4(_2129, _2130, _2131, 1.0));
        _2172 = dot(vec3(isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0)), isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0)), isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2160) ? 0.0 : (isnan(0.0) ? _2160 : max(0.0, _2160))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2172 = 1.0;
    }
    float _2183;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2174 = dot(vec4(cbModelParam._m0[40u]), vec4(_2129, _2130, _2131, 1.0));
        _2183 = dot(vec3(isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0)), isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0)), isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2174) ? 0.0 : (isnan(0.0) ? _2174 : max(0.0, _2174))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2183 = 1.0;
    }
    float _2187 = (_2183 * cbModelParam._m0[1u].x) + (_2172 * (1.0 - cbModelParam._m0[1u].x));
    float _2197 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1219);
    float _2198 = isnan(_2197) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2197 : min(cbModelParam._m0[25u].z, _2197));
    float _2278;
    float _2280;
    float _2282;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2245 = fma(_1453, cbModelParam._m0[13u].z, fma(_1449, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1445)) + cbModelParam._m0[13u].w;
        float _2249 = fma(_1453, cbModelParam._m0[14u].z, fma(_1449, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1445)) + cbModelParam._m0[14u].w;
        float _2253 = fma(_1453, cbModelParam._m0[15u].z, fma(_1449, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1445)) + cbModelParam._m0[15u].w;
        float _2256 = fma(_1391, cbModelParam._m0[13u].z, fma(_1390, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1389));
        float _2259 = fma(_1391, cbModelParam._m0[14u].z, fma(_1390, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1389));
        float _2262 = fma(_1391, cbModelParam._m0[15u].z, fma(_1390, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1389));
        float _2290;
        if (_2256 > 0.0)
        {
            _2290 = abs((1.0 - _2245) / _2256);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2256 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2245 + 1.0) / _2256);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2290 = frontier_phi_14_12_ladder;
        }
        float _2461;
        if (_2259 > 0.0)
        {
            _2461 = abs((1.0 - _2249) / _2259);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2259 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2249 + 1.0) / _2259);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2461 = frontier_phi_23_19_ladder;
        }
        float _2756;
        if (_2262 > 0.0)
        {
            _2756 = abs((1.0 - _2253) / _2262);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2262 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2253 + 1.0) / _2262);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2756 = frontier_phi_35_30_ladder;
        }
        float _2758 = isnan(_2461) ? _2290 : (isnan(_2290) ? _2461 : min(_2290, _2461));
        float _2759 = isnan(_2756) ? _2758 : (isnan(_2758) ? _2756 : min(_2758, _2756));
        float _2763 = (_2759 * _2256) + _2245;
        float _2764 = (_2759 * _2259) + _2249;
        float _2765 = (_2759 * _2262) + _2253;
        float _2766 = _2759 * 9.9999997473787516355514526367188e-05;
        float _2768 = (-1.0) - _2766;
        float _2770 = _2766 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2765 > _2770) || ((_2765 < _2768) || ((_2764 > _2770) || ((_2764 < _2768) || ((_2763 < _2768) || (_2763 > _2770))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2765, cbModelParam._m0[9u].z, fma(_2764, cbModelParam._m0[9u].y, _2763 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2765, cbModelParam._m0[10u].z, fma(_2764, cbModelParam._m0[10u].y, _2763 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2765, cbModelParam._m0[11u].z, fma(_2764, cbModelParam._m0[11u].y, _2763 * cbModelParam._m0[11u].x))), _2198);
            frontier_phi_13_35_ladder = _2910.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2910.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2910.x * cbModelParam._m0[1u].y;
        }
        _2278 = frontier_phi_13_35_ladder_2;
        _2280 = frontier_phi_13_35_ladder_1;
        _2282 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1389, _1390, _1391), _2198);
        _2278 = _2266.x * cbModelParam._m0[1u].y;
        _2280 = _2266.y * cbModelParam._m0[1u].y;
        _2282 = _2266.z * cbModelParam._m0[1u].y;
    }
    float _2286 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1219);
    float _2287 = isnan(_2286) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2286 : min(cbModelParam._m0[25u].w, _2286));
    float _2376;
    float _2378;
    float _2380;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2340 = fma(_1453, cbModelParam._m0[21u].z, fma(_1449, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1445)) + cbModelParam._m0[21u].w;
        float _2344 = fma(_1453, cbModelParam._m0[22u].z, fma(_1449, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1445)) + cbModelParam._m0[22u].w;
        float _2348 = fma(_1453, cbModelParam._m0[23u].z, fma(_1449, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1445)) + cbModelParam._m0[23u].w;
        float _2351 = fma(_1391, cbModelParam._m0[21u].z, fma(_1390, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1389));
        float _2354 = fma(_1391, cbModelParam._m0[22u].z, fma(_1390, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1389));
        float _2357 = fma(_1391, cbModelParam._m0[23u].z, fma(_1390, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1389));
        float _2466;
        if (_2351 > 0.0)
        {
            _2466 = abs((1.0 - _2340) / _2351);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2351 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2340 + 1.0) / _2351);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2466 = frontier_phi_25_21_ladder;
        }
        float _2783;
        if (_2354 > 0.0)
        {
            _2783 = abs((1.0 - _2344) / _2354);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2354 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2344 + 1.0) / _2354);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2783 = frontier_phi_37_32_ladder;
        }
        float _3121;
        if (_2357 > 0.0)
        {
            _3121 = abs((1.0 - _2348) / _2357);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2357 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2348 + 1.0) / _2357);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _3121 = frontier_phi_47_44_ladder;
        }
        float _3123 = isnan(_2783) ? _2466 : (isnan(_2466) ? _2783 : min(_2466, _2783));
        float _3124 = isnan(_3121) ? _3123 : (isnan(_3123) ? _3121 : min(_3123, _3121));
        float _3128 = (_3124 * _2351) + _2340;
        float _3129 = (_3124 * _2354) + _2344;
        float _3130 = (_3124 * _2357) + _2348;
        float _3131 = _3124 * 9.9999997473787516355514526367188e-05;
        float _3132 = (-1.0) - _3131;
        float _3134 = _3131 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_3130 > _3134) || ((_3130 < _3132) || ((_3129 > _3134) || ((_3129 < _3132) || ((_3128 < _3132) || (_3128 > _3134))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3252 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3130, cbModelParam._m0[17u].z, fma(_3129, cbModelParam._m0[17u].y, _3128 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3130, cbModelParam._m0[18u].z, fma(_3129, cbModelParam._m0[18u].y, _3128 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3130, cbModelParam._m0[19u].z, fma(_3129, cbModelParam._m0[19u].y, _3128 * cbModelParam._m0[19u].x))), _2287);
            frontier_phi_22_47_ladder = _3252.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3252.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3252.x * cbModelParam._m0[1u].z;
        }
        _2376 = frontier_phi_22_47_ladder_2;
        _2378 = frontier_phi_22_47_ladder_1;
        _2380 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1389, _1390, _1391), _2287);
        _2376 = _2360.x * cbModelParam._m0[1u].z;
        _2378 = _2360.y * cbModelParam._m0[1u].z;
        _2380 = _2360.z * cbModelParam._m0[1u].z;
    }
    float _2393 = (((_1416 * _1365) + _1417) * _1381) * ((cbModelParam._m0[1u].w * (_2376 - _2278)) + _2278);
    float _2395 = (((_1416 * _1367) + _1417) * _1381) * ((cbModelParam._m0[1u].w * (_2378 - _2280)) + _2280);
    float _2397 = (((_1416 * _1368) + _1417) * _1381) * ((cbModelParam._m0[1u].w * (_2380 - _2282)) + _2282);
    float _2400 = fma(_2397, cbSceneParam._m0[89u].z, fma(_2395, cbSceneParam._m0[89u].y, _2393 * cbSceneParam._m0[89u].x));
    float _2403 = fma(_2397, cbSceneParam._m0[90u].z, fma(_2395, cbSceneParam._m0[90u].y, _2393 * cbSceneParam._m0[90u].x));
    float _2406 = fma(_2397, cbSceneParam._m0[91u].z, fma(_2395, cbSceneParam._m0[91u].y, _2393 * cbSceneParam._m0[91u].x));
    float _2440 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2444 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2448 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2452 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2453 = _2440 / _2452;
    float _2454 = _2444 / _2452;
    float _2455 = _2448 / _2452;
    float _2602;
    float _2603;
    float _2604;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2482 = ((uint(_2455 > cbSceneParam._m0[59u].y) + uint(_2455 > cbSceneParam._m0[59u].x)) + uint(_2455 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2483 = _2482 + 43u;
        uint _2491 = _2482 + 44u;
        uint _2499 = _2482 + 45u;
        uint _2507 = _2482 + 46u;
        float _2518 = fma(_2452, cbSceneParam._m0[_2483].w, fma(_2448, cbSceneParam._m0[_2483].z, fma(_2444, cbSceneParam._m0[_2483].y, _2440 * cbSceneParam._m0[_2483].x)));
        float _2522 = fma(_2452, cbSceneParam._m0[_2491].w, fma(_2448, cbSceneParam._m0[_2491].z, fma(_2444, cbSceneParam._m0[_2491].y, _2440 * cbSceneParam._m0[_2491].x)));
        float _2530 = fma(_2452, cbSceneParam._m0[_2507].w, fma(_2448, cbSceneParam._m0[_2507].z, fma(_2444, cbSceneParam._m0[_2507].y, _2440 * cbSceneParam._m0[_2507].x)));
        float _2535 = cbSceneParam._m0[33u].z * _2530;
        float _2537 = cbSceneParam._m0[33u].w * _2530;
        float _2540 = fma(_2452, cbSceneParam._m0[_2499].w, fma(_2448, cbSceneParam._m0[_2499].z, fma(_2444, cbSceneParam._m0[_2499].y, _2440 * cbSceneParam._m0[_2499].x))) / _2530;
        float _2588 = (cbSceneParam._m0[33u].x - sqrt(((_2454 * _2454) + (_2453 * _2453)) + (_2455 * _2455))) * cbSceneParam._m0[33u].y;
        float _4959 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2595 = (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2535 + _2518) / _2530, (_2537 + _2522) / _2530), _2540), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2537 + _2518) / _2530, (_2522 - _2535) / _2530), _2540), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2518 - _2535) / _2530, (_2522 - _2537) / _2530), _2540), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2518 - _2537) / _2530, (_2535 + _2522) / _2530), _2540), 0.0)).x), vec4(0.25)));
        _2602 = 1.0 - (_2595 * cbSceneParam._m0[34u].x);
        _2603 = 1.0 - (_2595 * cbSceneParam._m0[34u].y);
        _2604 = 1.0 - (_2595 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2602 = 1.0;
        _2603 = 1.0;
        _2604 = 1.0;
    }
    float _2668;
    float _2670;
    float _2672;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2656 = fma(_2452, cbSceneParam._m0[63u].w, fma(_2448, cbSceneParam._m0[63u].z, fma(_2444, cbSceneParam._m0[63u].y, _2440 * cbSceneParam._m0[63u].x)));
        float _2657 = fma(_2452, cbSceneParam._m0[60u].w, fma(_2448, cbSceneParam._m0[60u].z, fma(_2444, cbSceneParam._m0[60u].y, _2440 * cbSceneParam._m0[60u].x))) / _2656;
        float _2658 = fma(_2452, cbSceneParam._m0[61u].w, fma(_2448, cbSceneParam._m0[61u].z, fma(_2444, cbSceneParam._m0[61u].y, _2440 * cbSceneParam._m0[61u].x))) / _2656;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2657 >= cbSceneParam._m0[64u].x) && (_2658 >= cbSceneParam._m0[64u].y)) && (_2657 <= cbSceneParam._m0[64u].z)) && (_2658 <= cbSceneParam._m0[64u].w))
        {
            float _2796 = fma(_2452, cbSceneParam._m0[62u].w, fma(_2448, cbSceneParam._m0[62u].z, fma(_2444, cbSceneParam._m0[62u].y, _2440 * cbSceneParam._m0[62u].x))) / _2656;
            float _2800 = isnan(cbSceneParam._m0[41u].w) ? _2796 : (isnan(_2796) ? cbSceneParam._m0[41u].w : max(_2796, cbSceneParam._m0[41u].w));
            float _2843 = (cbSceneParam._m0[33u].x - sqrt(((_2454 * _2454) + (_2453 * _2453)) + (_2455 * _2455))) * cbSceneParam._m0[33u].y;
            float _4975 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
            float _2850 = (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2657, cbSceneParam._m0[33u].w + _2658), _2800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2657, _2658 - cbSceneParam._m0[33u].z), _2800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2657 - cbSceneParam._m0[33u].z, _2658 - cbSceneParam._m0[33u].w), _2800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2657 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2658), _2800), 0.0)).x), vec4(0.25)));
            float _2854 = 1.0 - (_2850 * cbSceneParam._m0[34u].x);
            float _2855 = 1.0 - (_2850 * cbSceneParam._m0[34u].y);
            float _2856 = 1.0 - (_2850 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2856) ? _2604 : (isnan(_2604) ? _2856 : min(_2604, _2856));
            frontier_phi_34_33_ladder_1 = isnan(_2855) ? _2603 : (isnan(_2603) ? _2855 : min(_2603, _2855));
            frontier_phi_34_33_ladder_2 = isnan(_2854) ? _2602 : (isnan(_2602) ? _2854 : min(_2602, _2854));
        }
        else
        {
            frontier_phi_34_33_ladder = _2604;
            frontier_phi_34_33_ladder_1 = _2603;
            frontier_phi_34_33_ladder_2 = _2602;
        }
        _2668 = frontier_phi_34_33_ladder_2;
        _2670 = frontier_phi_34_33_ladder_1;
        _2672 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2668 = _2602;
        _2670 = _2603;
        _2672 = _2604;
    }
    uvec4 _2677 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2679 = _2677.x * 14u;
    uint _2680 = _2679 + 13u;
    float _2687 = _1381 + (-1.0);
    float _2692 = (cbLight._m0[_2680].x * _2687) + 1.0;
    float _2693 = (cbLight._m0[_2680].y * _2687) + 1.0;
    float _2694 = (cbLight._m0[_2680].z * _2687) + 1.0;
    float _2695 = (cbLight._m0[_2680].w * _2687) + 1.0;
    uint _2696 = _2679 + 5u;
    float _2702 = isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0));
    uint _2706 = _2679 + 4u;
    float _2715 = isnan(1.0) ? _2692 : (isnan(_2692) ? 1.0 : min(_2692, 1.0));
    uint _2719 = _2679 | 1u;
    float _2730 = dot(vec3(cbLight._m0[_2679].xyz), vec3(_1216, _1217, _1218));
    float _2733 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_1216, _1217, _1218));
    float _5011 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _5022 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2738 = (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * 0.3183098733425140380859375;
    float _2740 = (isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * 0.3183098733425140380859375;
    float _2747 = ((cbLight._m0[_2696].x * _2702) * _2740) + (((cbLight._m0[_2706].x * _2668) * _2715) * _2738);
    float _2748 = ((_2702 * cbLight._m0[_2696].y) * _2740) + (((cbLight._m0[_2706].y * _2670) * _2715) * _2738);
    float _2749 = ((_2702 * cbLight._m0[_2696].z) * _2740) + (((cbLight._m0[_2706].z * _2672) * _2715) * _2738);
    uvec4 _2753 = floatBitsToUint(cbLight._m0[_2679 + 12u]);
    bool _2755 = _2753.x == 0u;
    float _2857;
    float _2859;
    float _2861;
    if (_2755)
    {
        _2857 = _2747;
        _2859 = _2748;
        _2861 = _2749;
    }
    else
    {
        uint _2865 = _2679 + 6u;
        float _2881 = (dot(vec3(cbLight._m0[_2679 + 2u].xyz), vec3(_1216, _1217, _1218)) * 0.5) + 0.5;
        float _2882 = _2881 * _2881;
        float _5033 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2883 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
        float _2884 = isnan(1.0) ? _2694 : (isnan(_2694) ? 1.0 : min(_2694, 1.0));
        _2857 = (((cbLight._m0[_2865].x * 0.3183098733425140380859375) * _2883) * _2884) + _2747;
        _2859 = (((cbLight._m0[_2865].y * 0.3183098733425140380859375) * _2883) * _2884) + _2748;
        _2861 = (((cbLight._m0[_2865].z * 0.3183098733425140380859375) * _2883) * _2884) + _2749;
    }
    bool _2864 = _2753.y == 0u;
    float _2919;
    float _2921;
    float _2923;
    if (_2864)
    {
        _2919 = _2857;
        _2921 = _2859;
        _2923 = _2861;
    }
    else
    {
        uint _3092 = _2679 + 7u;
        float _3108 = (dot(vec3(cbLight._m0[_2679 + 3u].xyz), vec3(_1216, _1217, _1218)) * 0.5) + 0.5;
        float _3109 = _3108 * _3108;
        float _5049 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
        float _3110 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
        float _3111 = isnan(1.0) ? _2695 : (isnan(_2695) ? 1.0 : min(_2695, 1.0));
        _2919 = (((cbLight._m0[_3092].x * 0.3183098733425140380859375) * _3110) * _3111) + _2857;
        _2921 = (((cbLight._m0[_3092].y * 0.3183098733425140380859375) * _3110) * _3111) + _2859;
        _2923 = (((cbLight._m0[_3092].z * 0.3183098733425140380859375) * _3110) * _3111) + _2861;
    }
    uint _2926 = _2679 + 8u;
    float _2939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2679].w)) * _1219) * 0.949999988079071044921875);
    float _2940 = _2939 * _2939;
    float _2941 = cbLight._m0[_2679].x + _1295;
    float _2942 = cbLight._m0[_2679].y + _1296;
    float _2943 = cbLight._m0[_2679].z + _1297;
    float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
    float _2948 = _2947 * _2941;
    float _2949 = _2947 * _2942;
    float _2950 = _2947 * _2943;
    float _2951 = dot(vec3(_1216, _1217, _1218), vec3(cbLight._m0[_2679].xyz));
    float _5065 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
    float _2954 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
    float _5076 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
    float _2955 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
    float _2956 = dot(vec3(_1216, _1217, _1218), vec3(_2948, _2949, _2950));
    float _5087 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
    float _2959 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
    float _2960 = dot(vec3(cbLight._m0[_2679].xyz), vec3(_2948, _2949, _2950));
    float _5098 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
    float _2964 = _2940 * _2940;
    float _2968 = ((_2959 * _2959) * (_2964 + (-1.0))) + 1.0;
    float _2976 = exp2(log2(1.0 - (isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0)))) * 5.0);
    float _2977 = 0.959999978542327880859375 - _1362;
    float _2979 = 0.959999978542327880859375 - _1363;
    float _2980 = 0.959999978542327880859375 - _1364;
    float _2987 = 1.0 - _2940;
    float _2998 = (0.5 / (((_2955 * ((_2954 * _2987) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2955 * _2987) + _2940) * _2954))) * _2954;
    float _5109 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
    float _3000 = (isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_2964 / ((_2968 * _2968) * 3.141590118408203125));
    uint _3014 = _2679 + 9u;
    float _3025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2719].w)) * _1219) * 0.949999988079071044921875);
    float _3026 = _3025 * _3025;
    float _3027 = cbLight._m0[_2719].x + _1295;
    float _3028 = cbLight._m0[_2719].y + _1296;
    float _3029 = cbLight._m0[_2719].z + _1297;
    float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
    float _3034 = _3033 * _3027;
    float _3035 = _3033 * _3028;
    float _3036 = _3033 * _3029;
    float _3037 = dot(vec3(_1216, _1217, _1218), vec3(cbLight._m0[_2719].xyz));
    float _5120 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
    float _3040 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
    float _3041 = dot(vec3(_1216, _1217, _1218), vec3(_3034, _3035, _3036));
    float _5131 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
    float _3044 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
    float _3045 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_3034, _3035, _3036));
    float _5142 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
    float _3049 = _3026 * _3026;
    float _3053 = ((_3044 * _3044) * (_3049 + (-1.0))) + 1.0;
    float _3060 = exp2(log2(1.0 - (isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0)))) * 5.0);
    float _3067 = 1.0 - _3026;
    float _3077 = (0.5 / (((_2955 * ((_3040 * _3067) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_2955 * _3067) + _3026) * _3040))) * _3040;
    float _5153 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
    float _3079 = (isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0))) * (_3049 / ((_3053 * _3053) * 3.141590118408203125));
    float _3089 = (((((_3060 * _2977) + _1365) * cbLight._m0[_3014].x) * _3079) * _2702) + ((((cbLight._m0[_2926].x * _2668) * ((_2976 * _2977) + _1365)) * _3000) * _2715);
    float _3090 = (((((_3060 * _2979) + _1367) * cbLight._m0[_3014].y) * _3079) * _2702) + ((((cbLight._m0[_2926].y * _2670) * ((_2976 * _2979) + _1367)) * _3000) * _2715);
    float _3091 = (((((_3060 * _2980) + _1368) * cbLight._m0[_3014].z) * _3079) * _2702) + ((((cbLight._m0[_2926].z * _2672) * ((_2976 * _2980) + _1368)) * _3000) * _2715);
    float _3147;
    float _3149;
    float _3151;
    if (_2755)
    {
        _3147 = _3089;
        _3149 = _3090;
        _3151 = _3091;
    }
    else
    {
        uint _3153 = _2679 + 2u;
        uint _3157 = _2679 + 10u;
        float _3171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3153].w)) * _1219) * 0.949999988079071044921875);
        float _3172 = _3171 * _3171;
        float _3173 = cbLight._m0[_3153].x + _1295;
        float _3174 = cbLight._m0[_3153].y + _1296;
        float _3175 = cbLight._m0[_3153].z + _1297;
        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
        float _3180 = _3179 * _3173;
        float _3181 = _3179 * _3174;
        float _3182 = _3179 * _3175;
        float _3183 = dot(vec3(_1216, _1217, _1218), vec3(cbLight._m0[_3153].xyz));
        float _5164 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
        float _3186 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
        float _3187 = dot(vec3(_1216, _1217, _1218), vec3(_3180, _3181, _3182));
        float _5175 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
        float _3190 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
        float _3191 = dot(vec3(cbLight._m0[_3153].xyz), vec3(_3180, _3181, _3182));
        float _5186 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
        float _3195 = _3172 * _3172;
        float _3199 = ((_3190 * _3190) * (_3195 + (-1.0))) + 1.0;
        float _3206 = exp2(log2(1.0 - (isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0)))) * 5.0);
        float _3213 = 1.0 - _3172;
        float _3223 = (0.5 / (((_2955 * ((_3186 * _3213) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_2955 * _3213) + _3172) * _3186))) * _3186;
        float _5197 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
        float _3225 = (isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0))) * (_3195 / ((_3199 * _3199) * 3.141590118408203125));
        float _3226 = isnan(1.0) ? _2694 : (isnan(_2694) ? 1.0 : min(_2694, 1.0));
        _3147 = (((((_3206 * _2977) + _1365) * cbLight._m0[_3157].x) * _3225) * _3226) + _3089;
        _3149 = (((((_3206 * _2979) + _1367) * cbLight._m0[_3157].y) * _3225) * _3226) + _3090;
        _3151 = (((((_3206 * _2980) + _1368) * cbLight._m0[_3157].z) * _3225) * _3226) + _3091;
    }
    float _3257;
    float _3259;
    float _3261;
    if (_2864)
    {
        _3257 = _3147;
        _3259 = _3149;
        _3261 = _3151;
    }
    else
    {
        uint _3268 = _2679 + 3u;
        uint _3272 = _2679 + 11u;
        float _3286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3268].w)) * _1219) * 0.949999988079071044921875);
        float _3287 = _3286 * _3286;
        float _3288 = cbLight._m0[_3268].x + _1295;
        float _3289 = cbLight._m0[_3268].y + _1296;
        float _3290 = cbLight._m0[_3268].z + _1297;
        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
        float _3295 = _3294 * _3288;
        float _3296 = _3294 * _3289;
        float _3297 = _3294 * _3290;
        float _3298 = dot(vec3(_1216, _1217, _1218), vec3(cbLight._m0[_3268].xyz));
        float _5213 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
        float _3301 = isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0));
        float _3302 = dot(vec3(_1216, _1217, _1218), vec3(_3295, _3296, _3297));
        float _5224 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
        float _3305 = isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0));
        float _3306 = dot(vec3(cbLight._m0[_3268].xyz), vec3(_3295, _3296, _3297));
        float _5235 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
        float _3310 = _3287 * _3287;
        float _3314 = ((_3305 * _3305) * (_3310 + (-1.0))) + 1.0;
        float _3321 = exp2(log2(1.0 - (isnan(1.0) ? _5235 : (isnan(_5235) ? 1.0 : min(_5235, 1.0)))) * 5.0);
        float _3328 = 1.0 - _3287;
        float _3338 = (0.5 / (((_2955 * ((_3301 * _3328) + _3287)) + 9.9999999392252902907785028219223e-09) + (((_2955 * _3328) + _3287) * _3301))) * _3301;
        float _5246 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
        float _3340 = (isnan(1.0) ? _5246 : (isnan(_5246) ? 1.0 : min(_5246, 1.0))) * (_3310 / ((_3314 * _3314) * 3.141590118408203125));
        float _3341 = isnan(1.0) ? _2695 : (isnan(_2695) ? 1.0 : min(_2695, 1.0));
        _3257 = (((((_3321 * _2977) + _1365) * cbLight._m0[_3272].x) * _3340) * _3341) + _3147;
        _3259 = (((((_3321 * _2979) + _1367) * cbLight._m0[_3272].y) * _3340) * _3341) + _3149;
        _3261 = (((((_3321 * _2980) + _1368) * cbLight._m0[_3272].z) * _3340) * _3341) + _3151;
    }
    float _3407;
    float _3409;
    float _3411;
    float _3413;
    float _3415;
    float _3417;
    if (_2677.y == 0u)
    {
        uvec4 _3362 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3363 = _3362.x;
        uint _3374 = uint((float(_3362.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1304) / _3363))) + floor(float(uint(cbSceneParam._m0[85u].x * _1303) / _3363)));
        float _3384 = (log2(_2455 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3385 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
        uint _3388 = uint(isnan(14.0) ? _3385 : (isnan(_3385) ? 14.0 : min(_3385, 14.0)));
        uvec4 _3393 = texelFetch(g_lightClusterGridBuffer, int(((_3388 << 2u) + (_3374 << 6u)) >> 2u));
        uint _3394 = _3393.x;
        uint _3395 = _3362.z;
        float _3474;
        float _3476;
        float _3478;
        float _3480;
        float _3482;
        float _3484;
        if (((((1u << ((_3395 >> 4u) & 15u)) + 4294967295u) & _3394) == 0u) || ((_3395 & 240u) == 0u))
        {
            _3474 = 0.0;
            _3476 = 0.0;
            _3478 = 0.0;
            _3480 = 0.0;
            _3482 = 0.0;
            _3484 = 0.0;
        }
        else
        {
            float _3475;
            float _3477;
            float _3479;
            float _3481;
            float _3483;
            float _3485;
            float _3618 = 0.0;
            float _3619 = 0.0;
            float _3620 = 0.0;
            float _3621 = 0.0;
            float _3622 = 0.0;
            float _3623 = 0.0;
            uint _3624 = 0u;
            uint _3633;
            bool _3634;
            for (;;)
            {
                _3633 = texelFetch(g_lightClassification, int((((_3388 << 5u) + (_3374 << 9u)) + (_3624 << 2u)) >> 2u)).x;
                _3634 = _3633 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3634)
                {
                    frontier_phi_66_pred = _3623;
                    frontier_phi_66_pred_1 = _3622;
                    frontier_phi_66_pred_2 = _3621;
                    frontier_phi_66_pred_3 = _3620;
                    frontier_phi_66_pred_4 = _3619;
                    frontier_phi_66_pred_5 = _3618;
                }
                else
                {
                    float _3742;
                    float _3743;
                    float _3744;
                    float _3745;
                    float _3746;
                    float _3747;
                    uint _3748;
                    _3742 = _3618;
                    _3743 = _3619;
                    _3744 = _3620;
                    _3745 = _3621;
                    _3746 = _3622;
                    _3747 = _3623;
                    _3748 = _3633;
                    float _3674;
                    float _3675;
                    float _3676;
                    float _3677;
                    float _3678;
                    float _3679;
                    for (;;)
                    {
                        uint _3752 = uint(findLSB(_3748)) + (_3624 << 5u);
                        uint _3749 = (_3748 + 4294967295u) & _3748;
                        uint _3754 = _3752 * 48u;
                        vec4 _3768 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3754)).x, texelFetch(g_PointLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3754 + 3u)).x));
                        uint _3774 = (_3752 * 48u) + 4u;
                        vec4 _3787 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3774)).x, texelFetch(g_PointLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3774 + 3u)).x));
                        uint _3793 = (_3752 * 48u) + 8u;
                        vec3 _3804 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3793)).x, texelFetch(g_PointLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3793 + 2u)).x));
                        float _3808 = _3768.x - _2453;
                        float _3809 = _3768.y - _2454;
                        float _3810 = _3768.z - _2455;
                        float _3811 = dot(vec3(_3808, _3809, _3810), vec3(_3808, _3809, _3810));
                        float _3814 = inversesqrt(_3811);
                        float _3815 = _3814 * _3808;
                        float _3816 = _3814 * _3809;
                        float _3817 = _3814 * _3810;
                        float _3818 = dot(vec3(_1322, _1325, _1328), vec3(_3815, _3816, _3817));
                        float _3823 = 1.0 - (_3811 * _3768.w);
                        float _5272 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                        float _3824 = isnan(1.0) ? _5272 : (isnan(_5272) ? 1.0 : min(_5272, 1.0));
                        float _3825 = sqrt(_3811) * _3787.w;
                        float _3828 = 1.39999997615814208984375 / (_3825 + 1.39999997615814208984375);
                        float _3829 = _3828 * _3828;
                        float _3832 = ((1.0 - _3829) * _3818) + _3829;
                        float _3835 = _3825 * _3825;
                        float _3839 = ((isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0))) * _3824) / ((_3835 * 0.699999988079071044921875) + 1.0);
                        float _3843 = (-0.0) - _2453;
                        float _3844 = (-0.0) - _2454;
                        float _3845 = (-0.0) - _2455;
                        float _3849 = inversesqrt(dot(vec3(_3843, _3844, _3845), vec3(_3843, _3844, _3845)));
                        float _3850 = _3849 * _3843;
                        float _3851 = _3849 * _3844;
                        float _3852 = _3849 * _3845;
                        float _3859 = exp2(log2(1.0 / ((_3835 * 3.5) + 5.0)) * 0.25);
                        float _3860 = 1.0 - _1397;
                        float _3867 = sqrt(1.0 - ((1.0 - (_3860 * _3860)) * (1.0 - (_3859 * _3859))));
                        float _3868 = _3867 * _3867;
                        float _3869 = _3868 * _3868;
                        float _3870 = _3850 + _3815;
                        float _3871 = _3851 + _3816;
                        float _3872 = _3852 + _3817;
                        float _3876 = inversesqrt(dot(vec3(_3870, _3871, _3872), vec3(_3870, _3871, _3872)));
                        float _3880 = dot(vec3(_1322, _1325, _1328), vec3(_3850, _3851, _3852));
                        float _5288 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                        float _3883 = isnan(1.0) ? _5288 : (isnan(_5288) ? 1.0 : min(_5288, 1.0));
                        float _3884 = dot(vec3(_1322, _1325, _1328), vec3(_3876 * _3870, _3876 * _3871, _3876 * _3872));
                        float _5299 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                        float _3887 = isnan(1.0) ? _5299 : (isnan(_5299) ? 1.0 : min(_5299, 1.0));
                        float _3891 = ((_3887 * _3887) * (_3869 + (-1.0))) + 1.0;
                        float _3892 = _3828 * _3868;
                        float _3893 = _3892 * _3892;
                        float _3896 = ((1.0 - _3893) * _3818) + _3893;
                        float _5310 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                        float _3897 = isnan(1.0) ? _5310 : (isnan(_5310) ? 1.0 : min(_5310, 1.0));
                        float _3898 = 1.0 - _3868;
                        float _3908 = (0.5 / (((_3897 * ((_3883 * _3898) + _3868)) + 9.9999999392252902907785028219223e-09) + (((_3897 * _3898) + _3868) * _3883))) * _3897;
                        float _5321 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                        float _3919 = (((_3869 * 3.1415927410125732421875) * (isnan(1.0) ? _5321 : (isnan(_5321) ? 1.0 : min(_5321, 1.0)))) / ((_3891 * _3891) * ((_3835 * 2.1991131305694580078125) + 3.141590118408203125))) * _3824;
                        _3677 = (_3839 * _3787.x) + _3745;
                        _3678 = (_3839 * _3787.y) + _3746;
                        _3679 = (_3839 * _3787.z) + _3747;
                        _3674 = (_3919 * _3804.x) + _3742;
                        _3675 = (_3919 * _3804.y) + _3743;
                        _3676 = (_3919 * _3804.z) + _3744;
                        if (_3749 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3742 = _3674;
                            _3743 = _3675;
                            _3744 = _3676;
                            _3745 = _3677;
                            _3746 = _3678;
                            _3747 = _3679;
                            _3748 = _3749;
                        }
                    }
                    frontier_phi_66_pred = _3679;
                    frontier_phi_66_pred_1 = _3678;
                    frontier_phi_66_pred_2 = _3677;
                    frontier_phi_66_pred_3 = _3676;
                    frontier_phi_66_pred_4 = _3675;
                    frontier_phi_66_pred_5 = _3674;
                }
                _3485 = frontier_phi_66_pred;
                _3483 = frontier_phi_66_pred_1;
                _3481 = frontier_phi_66_pred_2;
                _3479 = frontier_phi_66_pred_3;
                _3477 = frontier_phi_66_pred_4;
                _3475 = frontier_phi_66_pred_5;
                uint _3625 = _3624 + 1u;
                if (_3625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3618 = _3475;
                    _3619 = _3477;
                    _3620 = _3479;
                    _3621 = _3481;
                    _3622 = _3483;
                    _3623 = _3485;
                    _3624 = _3625;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3474 = _3475;
            _3476 = _3477;
            _3478 = _3479;
            _3480 = _3481;
            _3482 = _3483;
            _3484 = _3485;
        }
        uvec4 _3488 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3489 = _3488.z;
        uint _3491 = (_3489 >> 8u) & 15u;
        float _3586;
        float _3588;
        float _3590;
        float _3592;
        float _3594;
        float _3596;
        if (((4294967295u << _3491) & _3394) == 0u)
        {
            _3586 = _3474;
            _3588 = _3476;
            _3590 = _3478;
            _3592 = _3480;
            _3594 = _3482;
            _3596 = _3484;
        }
        else
        {
            float _3611 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
            float _3612 = _3611 * _2453;
            float _3613 = _3611 * _2454;
            float _3614 = _3611 * _2455;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3491 < ((_3489 >> 12u) & 15u))
            {
                float _3587;
                float _3589;
                float _3591;
                float _3593;
                float _3595;
                float _3597;
                float _3725 = _3474;
                float _3726 = _3476;
                float _3727 = _3478;
                float _3728 = _3480;
                float _3729 = _3482;
                float _3730 = _3484;
                uint _3731 = _3491;
                uint _3740;
                bool _3741;
                for (;;)
                {
                    _3740 = texelFetch(g_lightClassification, int((((_3388 << 5u) + (_3374 << 9u)) + (_3731 << 2u)) >> 2u)).x;
                    _3741 = _3740 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3741)
                    {
                        frontier_phi_72_pred = _3730;
                        frontier_phi_72_pred_1 = _3729;
                        frontier_phi_72_pred_2 = _3728;
                        frontier_phi_72_pred_3 = _3727;
                        frontier_phi_72_pred_4 = _3726;
                        frontier_phi_72_pred_5 = _3725;
                    }
                    else
                    {
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3927;
                        float _3928;
                        float _3929;
                        float _4217;
                        float _4218;
                        float _4219;
                        float _4220;
                        float _4221;
                        float _4222;
                        float _3937 = _3725;
                        float _3938 = _3726;
                        float _3939 = _3727;
                        float _3940 = _3728;
                        float _3941 = _3729;
                        float _3942 = _3730;
                        uint _3943 = _3740;
                        uint _3944;
                        vec4 _3969;
                        float _3970;
                        vec4 _3985;
                        vec3 _3997;
                        vec4 _4012;
                        vec4 _4027;
                        float _4073;
                        bool _4074;
                        for (;;)
                        {
                            uint _3954 = ((_3731 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3943));
                            _3944 = (_3943 + 4294967295u) & _3943;
                            uint _3956 = _3954 * 40u;
                            _3969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3956 + 3u)).x));
                            _3970 = _3969.w;
                            uint _3972 = (_3954 * 40u) + 4u;
                            _3985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3972 + 3u)).x));
                            uint _3987 = (_3954 * 40u) + 8u;
                            _3997 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3987 + 2u)).x));
                            uint _3999 = (_3954 * 40u) + 16u;
                            _4012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3999 + 3u)).x));
                            uint _4014 = (_3954 * 40u) + 20u;
                            _4027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4014 + 3u)).x));
                            uint _4029 = (_3954 * 40u) + 24u;
                            vec4 _4042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4029 + 3u)).x));
                            uint _4048 = (_3954 * 40u) + 28u;
                            vec4 _4061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4048 + 3u)).x));
                            _4073 = fma(_2455, _4061.z, fma(_2454, _4061.y, _4061.x * _2453)) + _4061.w;
                            _4074 = !((fma(_2455, _4042.z, fma(_2454, _4042.y, _4042.x * _2453)) + _4042.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_4074)
                            {
                                float _4101 = _3969.x - _2453;
                                float _4102 = _3969.y - _2454;
                                float _4103 = _3969.z - _2455;
                                float _4104 = dot(vec3(_4101, _4102, _4103), vec3(_4101, _4102, _4103));
                                float _4107 = inversesqrt(_4104);
                                float _4108 = _4107 * _4101;
                                float _4109 = _4107 * _4102;
                                float _4110 = _4107 * _4103;
                                float _4114 = 1.0 - (_4104 / (_3970 * _3970));
                                float _5332 = isnan(0.0) ? _4114 : (isnan(_4114) ? 0.0 : max(_4114, 0.0));
                                float _4115 = isnan(1.0) ? _5332 : (isnan(_5332) ? 1.0 : min(_5332, 1.0));
                                float _4119 = sqrt(_4104) * _3985.w;
                                float _4121 = 1.39999997615814208984375 / (_4119 + 1.39999997615814208984375);
                                float _4122 = _4121 * _4121;
                                float _4125 = ((1.0 - _4122) * dot(vec3(_4108, _4109, _4110), vec3(_1322, _1325, _1328))) + _4122;
                                float _4128 = _4119 * _4119;
                                float _4132 = (fma(_2455, _4012.z, fma(_2454, _4012.y, _4012.x * _2453)) + _4012.w) / _4073;
                                float _4133 = (fma(_2455, _4027.z, fma(_2454, _4027.y, _4027.x * _2453)) + _4027.w) / _4073;
                                float _4137 = 1.0 - dot(vec2(_4132, _4133), vec2(_4132, _4133));
                                float _5348 = isnan(0.0) ? _4137 : (isnan(_4137) ? 0.0 : max(_4137, 0.0));
                                float _4138 = isnan(1.0) ? _5348 : (isnan(_5348) ? 1.0 : min(_5348, 1.0));
                                float _4139 = _4138 * (((isnan(0.0) ? _4125 : (isnan(_4125) ? 0.0 : max(_4125, 0.0))) * _4115) / ((_4128 * 0.699999988079071044921875) + 1.0));
                                float _4151 = exp2(log2(1.0 / ((_4128 * 3.5) + 5.0)) * 0.25);
                                float _4152 = 1.0 - _1397;
                                float _4159 = sqrt(1.0 - ((1.0 - (_4152 * _4152)) * (1.0 - (_4151 * _4151))));
                                float _4160 = _4159 * _4159;
                                float _4161 = _4160 * _4160;
                                float _4162 = _4108 - _3612;
                                float _4163 = _4109 - _3613;
                                float _4164 = _4110 - _3614;
                                float _4168 = inversesqrt(dot(vec3(_4162, _4163, _4164), vec3(_4162, _4163, _4164)));
                                float _4172 = dot(vec3(_1322, _1325, _1328), vec3((-0.0) - _3612, (-0.0) - _3613, (-0.0) - _3614));
                                float _5359 = isnan(0.0) ? _4172 : (isnan(_4172) ? 0.0 : max(_4172, 0.0));
                                float _4175 = isnan(1.0) ? _5359 : (isnan(_5359) ? 1.0 : min(_5359, 1.0));
                                float _4176 = dot(vec3(_1322, _1325, _1328), vec3(_4168 * _4162, _4168 * _4163, _4168 * _4164));
                                float _5370 = isnan(0.0) ? _4176 : (isnan(_4176) ? 0.0 : max(_4176, 0.0));
                                float _4179 = isnan(1.0) ? _5370 : (isnan(_5370) ? 1.0 : min(_5370, 1.0));
                                float _4183 = ((_4179 * _4179) * (_4161 + (-1.0))) + 1.0;
                                float _4184 = _4121 * _4160;
                                float _4185 = _4184 * _4184;
                                float _4191 = ((1.0 - _4185) * dot(vec3(_1322, _1325, _1328), vec3(_4108, _4109, _4110))) + _4185;
                                float _5381 = isnan(0.0) ? _4191 : (isnan(_4191) ? 0.0 : max(_4191, 0.0));
                                float _4192 = isnan(1.0) ? _5381 : (isnan(_5381) ? 1.0 : min(_5381, 1.0));
                                float _4193 = 1.0 - _4160;
                                float _4203 = (0.5 / (((_4192 * ((_4175 * _4193) + _4160)) + 9.9999999392252902907785028219223e-09) + (((_4192 * _4193) + _4160) * _4175))) * _4192;
                                float _5392 = isnan(0.0) ? _4203 : (isnan(_4203) ? 0.0 : max(_4203, 0.0));
                                float _4213 = (_4138 * _4115) * (((_4161 * 3.1415927410125732421875) * (isnan(1.0) ? _5392 : (isnan(_5392) ? 1.0 : min(_5392, 1.0)))) / ((_4183 * _4183) * ((_4128 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _4139 * _3985.y;
                                frontier_phi_78_pred_1 = _4139 * _3985.x;
                                frontier_phi_78_pred_2 = _4213 * _3997.z;
                                frontier_phi_78_pred_3 = _4213 * _3997.y;
                                frontier_phi_78_pred_4 = _4213 * _3997.x;
                                frontier_phi_78_pred_5 = _4139 * _3985.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4221 = frontier_phi_78_pred;
                            _4220 = frontier_phi_78_pred_1;
                            _4219 = frontier_phi_78_pred_2;
                            _4218 = frontier_phi_78_pred_3;
                            _4217 = frontier_phi_78_pred_4;
                            _4222 = frontier_phi_78_pred_5;
                            _3927 = _4220 + _3940;
                            _3928 = _4221 + _3941;
                            _3929 = _4222 + _3942;
                            _3924 = _4217 + _3937;
                            _3925 = _4218 + _3938;
                            _3926 = _4219 + _3939;
                            if (_3944 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3937 = _3924;
                                _3938 = _3925;
                                _3939 = _3926;
                                _3940 = _3927;
                                _3941 = _3928;
                                _3942 = _3929;
                                _3943 = _3944;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3929;
                        frontier_phi_72_pred_1 = _3928;
                        frontier_phi_72_pred_2 = _3927;
                        frontier_phi_72_pred_3 = _3926;
                        frontier_phi_72_pred_4 = _3925;
                        frontier_phi_72_pred_5 = _3924;
                    }
                    _3597 = frontier_phi_72_pred;
                    _3595 = frontier_phi_72_pred_1;
                    _3593 = frontier_phi_72_pred_2;
                    _3591 = frontier_phi_72_pred_3;
                    _3589 = frontier_phi_72_pred_4;
                    _3587 = frontier_phi_72_pred_5;
                    uint _3732 = _3731 + 1u;
                    if (_3732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3725 = _3587;
                        _3726 = _3589;
                        _3727 = _3591;
                        _3728 = _3593;
                        _3729 = _3595;
                        _3730 = _3597;
                        _3731 = _3732;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3597;
                frontier_phi_60_61_ladder_1 = _3595;
                frontier_phi_60_61_ladder_2 = _3591;
                frontier_phi_60_61_ladder_3 = _3589;
                frontier_phi_60_61_ladder_4 = _3587;
                frontier_phi_60_61_ladder_5 = _3593;
            }
            else
            {
                frontier_phi_60_61_ladder = _3484;
                frontier_phi_60_61_ladder_1 = _3482;
                frontier_phi_60_61_ladder_2 = _3478;
                frontier_phi_60_61_ladder_3 = _3476;
                frontier_phi_60_61_ladder_4 = _3474;
                frontier_phi_60_61_ladder_5 = _3480;
            }
            _3586 = frontier_phi_60_61_ladder_4;
            _3588 = frontier_phi_60_61_ladder_3;
            _3590 = frontier_phi_60_61_ladder_2;
            _3592 = frontier_phi_60_61_ladder_5;
            _3594 = frontier_phi_60_61_ladder_1;
            _3596 = frontier_phi_60_61_ladder;
        }
        float _3601 = isnan(1.0) ? _1381 : (isnan(_1381) ? 1.0 : min(_1381, 1.0));
        _3407 = (_3601 * _3592) + _2919;
        _3409 = (_3601 * _3594) + _2921;
        _3411 = (_3601 * _3596) + _2923;
        _3413 = ((_3586 * _1365) * _3601) + _3257;
        _3415 = ((_3588 * _1367) * _3601) + _3259;
        _3417 = ((_3590 * _1368) * _3601) + _3261;
    }
    else
    {
        _3407 = _2919;
        _3409 = _2921;
        _3411 = _2923;
        _3413 = _3257;
        _3415 = _3259;
        _3417 = _3261;
    }
    float _5408 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
    float _5419 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
    float _5430 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
    uint _3437 = _303 + 6u;
    float _3445 = _1303 / cbSceneParam._m0[86u].x;
    float _3446 = _1304 / cbSceneParam._m0[86u].y;
    vec4 _3460 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3445, _3446, (log2((isnan(cbSceneParam._m0[77u].w) ? _1238 : (isnan(_1238) ? cbSceneParam._m0[77u].w : min(_1238, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3462 = _3460.x;
    float _3463 = _3460.y;
    float _3464 = _3460.z;
    float _3465 = _3460.w;
    float _3536;
    float _3538;
    float _3540;
    float _3542;
    if (_1238 > cbSceneParam._m0[78u].w)
    {
        float _3499 = isnan(_1238) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1238 : min(cbSceneParam._m0[80u].w, _1238));
        float _3500 = _3499 / _1238;
        float _3511 = _3500 * _1288;
        float _3512 = _1289 * _3500;
        float _3513 = (-0.0) - _3512;
        float _3514 = _3500 * _1290;
        float _3516 = (cbSceneParam._m0[77u].w * _3513) / _3499;
        float _3517 = _3516 + cbSceneParam._m0[79u].w;
        float _3518 = cbSceneParam._m0[79u].w - _3512;
        float _3524 = sqrt(((_3511 * _3511) + (_3512 * _3512)) + (_3514 * _3514));
        float _3527 = (1.0 - (cbSceneParam._m0[77u].w / _3499)) * _3524;
        float _3532 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3534 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3687;
        if (abs((_3513 - _3516) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3687 = ((((_3517 > 0.0) ? exp2(_3532 * _3517) : (2.0 - exp2(_3534 * _3517))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3527;
        }
        else
        {
            float _3647 = 1.0 / cbSceneParam._m0[80u].x;
            float _3648 = isnan(_3518) ? _3517 : (isnan(_3517) ? _3518 : max(_3517, _3518));
            float _3649 = isnan(_3518) ? _3517 : (isnan(_3517) ? _3518 : min(_3517, _3518));
            float _3658 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : min(_3648, 0.0));
            float _3659 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : min(_3649, 0.0));
            _3687 = ((abs(_3524 / _3513) * cbSceneParam._m0[80u].y) * ((((_3658 - _3659) * 2.0) - ((exp2(_3532 * (isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0)))) - exp2(_3532 * (isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0))))) * _3647)) - ((exp2(_3534 * _3658) - exp2(_3534 * _3659)) * _3647))) + (_3527 * cbSceneParam._m0[80u].z);
        }
        vec4 _3689 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3445, _3446, 1.0), 0.0);
        float _3698 = exp2((_3687 * (-1.44269502162933349609375)) * (1.0 - _3689.w));
        float _3699 = log2(_3698);
        float _3715 = log2(_3465);
        _3536 = (exp2(_3715 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3699 * cbSceneParam._m0[78u].x)) * _3689.x) / cbSceneParam._m0[78u].x)) + _3462;
        _3538 = (exp2(_3715 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3699 * cbSceneParam._m0[78u].y)) * _3689.y) / cbSceneParam._m0[78u].y)) + _3463;
        _3540 = (exp2(_3715 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3699 * cbSceneParam._m0[78u].z)) * _3689.z) / cbSceneParam._m0[78u].z)) + _3464;
        _3542 = _3698 * _3465;
    }
    else
    {
        _3536 = _3462;
        _3538 = _3463;
        _3540 = _3464;
        _3542 = _3465;
    }
    float _3554 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3555 = _3554 == 3.0;
    float _3556 = log2(_3542);
    float _3563 = exp2(_3556 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5408 : (isnan(_5408) ? 1.0 : min(_5408, 1.0))) * (_3407 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1381))) + ((_3413 + ((isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0))) * _2187)) * cbPerFrame._m0[3u].x));
    float _3564 = exp2(_3556 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5419 : (isnan(_5419) ? 1.0 : min(_5419, 1.0))) * (_3409 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1381))) + ((_3415 + ((isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0))) * _2187)) * cbPerFrame._m0[3u].x));
    float _3565 = exp2(_3556 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5430 : (isnan(_5430) ? 1.0 : min(_5430, 1.0))) * (_3411 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1381))) + ((_3417 + ((isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0))) * _2187)) * cbPerFrame._m0[3u].x));
    float _3574 = (_3554 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3574 * (_3555 ? _3563 : (_3563 + (cbSceneParam._m0[72u].w * _3536)));
    SV_Target.y = _3574 * (_3555 ? _3564 : (_3564 + (cbSceneParam._m0[72u].w * _3538)));
    SV_Target.z = _3574 * (_3555 ? _3565 : (_3565 + (cbSceneParam._m0[72u].w * _3540)));
    SV_Target.w = cbInstanceData._m0[_3437].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3437].w;
}


