#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1739;
float _4116;
float _4117;
float _4118;
float _4119;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _261 = _260 * _252;
    float _262 = _260 * _253;
    float _263 = _260 * _254;
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = _267 * NORMAL.x;
    float _269 = _267 * NORMAL.y;
    float _270 = _267 * NORMAL.z;
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = _274 * TANGENT.x;
    float _276 = _274 * TANGENT.y;
    float _277 = _274 * TANGENT.z;
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4128 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4139 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4150 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _438 = _436.x;
    float _450 = dot(vec4(_438, _436.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _467 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _401.x) * 2.0) - ((((_438 - _450) * cbMtdParam._m0[23u].w) + _450) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4161 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _475 = (_468 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _476 = (_468 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _477 = (_468 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _516 = _514.x;
    float _526 = dot(vec4(_516, _514.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _540 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _401.y) * 2.0) - ((((_516 - _526) * cbMtdParam._m0[23u].w) + _526) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4172 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _548 = (_541 * ((_494.x * cbMtdParam._m0[13u].x) - _475)) + _475;
    float _549 = (_541 * ((_494.y * cbMtdParam._m0[13u].y) - _476)) + _476;
    float _550 = (_541 * ((_494.z * cbMtdParam._m0[13u].z) - _477)) + _477;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _318) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _319) + cbTextureTilingScale._m0[24u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _588 = _586.x;
    float _598 = dot(vec4(_588, _586.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _610 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _401.z) * 2.0) - ((((_588 - _598) * cbMtdParam._m0[23u].w) + _598) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4183 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _618 = (_611 * ((_569.x * cbMtdParam._m0[14u].x) - _548)) + _548;
    float _619 = (_611 * ((_569.y * cbMtdParam._m0[14u].y) - _549)) + _549;
    float _620 = (_611 * ((_569.z * cbMtdParam._m0[14u].z) - _550)) + _550;
    float _624 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _618;
    float _627 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _619;
    float _630 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _620;
    float _637 = ((_618 - _624) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) + _624;
    float _638 = ((_619 - _627) * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) + _627;
    float _639 = ((_620 - _630) * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) + _630;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _700 = _698.x;
    float _701 = _698.y;
    float _702 = _698.z;
    float _709 = ((_681.x - _700) * _468) + _700;
    float _710 = ((_681.y - _701) * _468) + _701;
    float _711 = ((_681.z - _702) * _468) + _702;
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _734 = ((_723.x - _709) * _541) + _709;
    float _735 = ((_723.y - _710) * _541) + _710;
    float _736 = ((_723.z - _711) * _541) + _711;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _318) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _319) + cbTextureTilingScale._m0[23u].w));
    float _761 = ((_748.z - _736) * _611) + _736;
    float _764 = ((((_748.x - _734) * _611) + _734) * 2.0) + (-1.0);
    float _765 = ((((_748.y - _735) * _611) + _735) * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _4194 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _771 = sqrt(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))));
    vec4 _789 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _801 = (_764 + ((((_656.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_789.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _802 = (_765 + ((((_656.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_789.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _805 = fma(_771, _268, fma(_802, _275, _801 * _261));
    float _808 = fma(_771, _269, fma(_802, _276, _801 * _262));
    float _811 = fma(_771, _270, fma(_802, _277, _801 * _263));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    vec4 _842 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _844 = _842.x;
    float _845 = 1.0 - _844;
    float _853 = (cbMtdParam._m0[19u].x + dot(vec4(_815 * _805, _815 * _808, _815 * _811, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_844 - _845) * cbMtdParam._m0[24u].z) + _845) * cbMtdParam._m0[21u].z);
    float _4205 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _854 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _856 = (-0.0) - cbMtdParam._m0[24u].x;
    float _858 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _858 : (isnan(_858) ? 1.0 : min(_858, 1.0));
    float _866 = _854 - ((_854 * TEXCOORD_8.x) * _859);
    float _867 = _854 - ((_854 * TEXCOORD_8.y) * _859);
    float _868 = _854 - ((_854 * TEXCOORD_8.z) * _859);
    float _875 = (_866 * (cbMtdParam._m0[17u].x - _637)) + _637;
    float _876 = (_867 * (cbMtdParam._m0[17u].y - _638)) + _638;
    float _877 = (_868 * (cbMtdParam._m0[17u].z - _639)) + _639;
    float _892 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _893 = _892 * TEXCOORD.z;
    float _894 = _892 * TEXCOORD.w;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _893) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _894) + cbTextureTilingScale._m0[19u].w));
    float _908 = _906.x;
    float _909 = 1.0 - _908;
    float _935 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_908 - _909) * cbMtdParam._m0[24u].w) + _909) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4226 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _936 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _944 = ((((cbMtdParam._m0[10u].x - _875) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _936) + _875;
    float _945 = ((((cbMtdParam._m0[10u].y - _876) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _936) + _876;
    float _946 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _877)) * _936) + _877;
    vec4 _972 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _974 = _972.x;
    float _992 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _974) * _468) + _974;
    float _1009 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _992) * _541) + _992;
    float _1026 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _318) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _319) + cbTextureTilingScale._m0[10u].w)).x - _1009) * _611) + _1009;
    float _1032 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1026) * cbMtdParam._m0[19u].z) + _1026;
    float _1034 = _1032 - (_1032 * _866);
    float _1036 = _1034 - (_1034 * _936);
    float _1041 = (((_656.z - _761) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _761;
    float _1045 = ((_789.z - _1041) * cbMtdParam._m0[19u].w) + _1041;
    vec4 _1061 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _1068 = (_1061.x * 2.0) + (-1.0);
    float _1069 = (_1061.y * 2.0) + (-1.0);
    float _1070 = dot(vec2(_1068, _1069), vec2(_1068, _1069));
    float _4237 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1078 = ((_1061.z - _1045) * _866) + _1045;
    float _1081 = ((cbMtdParam._m0[23u].x - _1078) * _936) + _1078;
    vec4 _1104 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _893) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _894) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1110 = (_1104.x * 2.0) + (-1.0);
    float _1111 = (_1104.y * 2.0) + (-1.0);
    float _1112 = dot(vec2(_1110, _1111), vec2(_1110, _1111));
    float _4248 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1127 = ((sqrt(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) - _771) * _868) + _771;
    float _1130 = (((_1068 - _801) * _866) + _801) + (cbMtdParam._m0[21u].x * _801);
    float _1131 = (((_1069 - _802) * _867) + _802) + (cbMtdParam._m0[21u].x * _802);
    float _1142 = (((_1110 - _1130) + (_1130 * cbMtdParam._m0[22u].z)) * _936) + _1130;
    float _1143 = (((_1111 - _1131) + (_1131 * cbMtdParam._m0[22u].z)) * _936) + _1131;
    float _1144 = (_936 * (sqrt(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) - _1127)) + _1127;
    float _1146 = cbMtdParam._m0[22u].x + _789.w;
    float _1149 = fma(_1144, _268, fma(_1143, _275, _1142 * _261));
    float _1152 = fma(_1144, _269, fma(_1143, _276, _1142 * _262));
    float _1155 = fma(_1144, _270, fma(_1143, _277, _1142 * _263));
    float _1159 = inversesqrt(dot(vec3(_1149, _1152, _1155), vec3(_1149, _1152, _1155)));
    float _1160 = _1159 * _1149;
    float _1161 = _1159 * _1152;
    float _1162 = _1159 * _1155;
    float _4259 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1163 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _4281 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4292 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4303 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4314 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1168 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _1182 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1232 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1222);
    float _1233 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1222);
    float _1234 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1222);
    float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
    float _1239 = _1232 * _1238;
    float _1240 = _1233 * _1238;
    float _1241 = _1234 * _1238;
    vec4 _1246 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1248 = _1246.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1420 = sqrt(((_1232 * _1232) + (_1233 * _1233)) + (_1234 * _1234));
        float _1426 = (cbMatDynParam._m0[5u].x * _1420) + cbMatDynParam._m0[5u].y;
        float _4325 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1431 = (cbMatDynParam._m0[5u].z * _1420) + cbMatDynParam._m0[5u].w;
        float _4336 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) - _1427)) + _1427) < ((_1248 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1259 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1260 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1278 = fma(_1162, cbSceneParam._m0[5u].z, fma(_1161, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1160));
    float _1281 = fma(_1162, cbSceneParam._m0[6u].z, fma(_1161, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1160));
    float _1284 = fma(_1162, cbSceneParam._m0[7u].z, fma(_1161, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1160));
    uint _1297 = _299 + 9u;
    uint _1298 = _1297 + uint(cbMatDynParam._m0[0u].w);
    float _1304 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * cbInstanceData._m0[_1298].x;
    float _1305 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * cbInstanceData._m0[_1298].y;
    float _1306 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * cbInstanceData._m0[_1298].z;
    float _4347 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
    float _1307 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _4358 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
    float _1308 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _4369 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
    float _1309 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _1310 = 1.0 - _1168;
    float _1311 = _1307 * _1310;
    float _1312 = _1308 * _1310;
    float _1313 = _1309 * _1310;
    float _1318 = (_1307 + (-0.039999999105930328369140625)) * _1168;
    float _1319 = (_1308 + (-0.039999999105930328369140625)) * _1168;
    float _1320 = (_1309 + (-0.039999999105930328369140625)) * _1168;
    float _1321 = _1318 + 0.039999999105930328369140625;
    float _1323 = _1319 + 0.039999999105930328369140625;
    float _1324 = _1320 + 0.039999999105930328369140625;
    vec4 _1333 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1259, cbSceneParam._m0[86u].y * _1260));
    float _1337 = ((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * TEXCOORD_5.w) * _1333.x;
    float _1338 = dot(vec3(_1160, _1161, _1162), vec3(_1239, _1240, _1241));
    float _1341 = _1338 * 2.0;
    float _1345 = (_1341 * _1160) - _1239;
    float _1346 = (_1341 * _1161) - _1240;
    float _1347 = (_1341 * _1162) - _1241;
    float _1351 = abs(dot(vec3(_1239, _1240, _1241), vec3(_1160, _1161, _1162)));
    float _4380 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
    float _1353 = sqrt(_1163);
    float _1366 = exp2((_1353 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1353 * 3.0));
    float _1372 = (1.0 - _1366) * ((_1353 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1373 = _1366 * _1353;
    float _1401 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1405 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1409 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1738;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1463 = fma(_1409, cbModelParam._m0[26u].z, fma(_1405, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1401));
        float _1467 = fma(_1409, cbModelParam._m0[27u].z, fma(_1405, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1401));
        float _1471 = fma(_1409, cbModelParam._m0[28u].z, fma(_1405, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1401));
        float _1496 = _1401 + _1160;
        float _1497 = _1405 + _1161;
        float _1498 = _1409 + _1162;
        float _1508 = fma(_1498, cbModelParam._m0[26u].z, fma(_1497, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1496)) - _1463;
        float _1509 = fma(_1498, cbModelParam._m0[27u].z, fma(_1497, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1496)) - _1467;
        float _1510 = fma(_1498, cbModelParam._m0[28u].z, fma(_1497, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1496)) - _1471;
        float _1514 = inversesqrt(dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510)));
        float _1527 = ((_1514 * _1508) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1463 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1514 * _1509) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1467 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1514 * _1510) / cbModelParam._m0[34u].z) + ((((((_1471 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        float _1566 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1532.x + (-0.5));
        float _1568 = _1566 * (_1532.y + (-0.5));
        float _1569 = _1566 * (_1532.z + (-0.5));
        float _1576 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1539.x + (-0.5));
        float _1578 = _1576 * (_1539.y + (-0.5));
        float _1579 = _1576 * (_1539.z + (-0.5));
        float _1586 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1546.x + (-0.5));
        float _1588 = _1586 * (_1546.y + (-0.5));
        float _1589 = _1586 * (_1546.z + (-0.5));
        float _1596 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1553.x + (-0.5));
        float _1598 = _1596 * (_1553.y + (-0.5));
        float _1599 = _1596 * (_1553.z + (-0.5));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = _1567 * 0.5;
        float _1604 = _1577 * 0.5;
        float _1605 = _1587 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1620 = (dot(vec3(_1160, _1161, _1162), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1630 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4428 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1632 + 1.0))) + _1637) * _1600;
        float _1647 = _1568 * 0.5;
        float _1648 = _1578 * 0.5;
        float _1649 = _1588 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_1160, _1161, _1162), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4461 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1674 + 1.0))) + _1679) * _1601;
        float _1689 = _1569 * 0.5;
        float _1690 = _1579 * 0.5;
        float _1691 = _1589 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_1160, _1161, _1162), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4494 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1716 + 1.0))) + _1721) * _1602;
        _1738 = _1569;
        _1740 = _1568;
        _1741 = _1567;
        _1742 = _1579;
        _1743 = _1578;
        _1744 = _1577;
        _1745 = _1589;
        _1746 = _1588;
        _1747 = _1587;
        _1748 = _1602;
        _1749 = _1601;
        _1750 = _1600;
        _1751 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1752 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1753 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
    }
    else
    {
        _1738 = _1739;
        _1740 = _1739;
        _1741 = _1739;
        _1742 = _1739;
        _1743 = _1739;
        _1744 = _1739;
        _1745 = _1739;
        _1746 = _1739;
        _1747 = _1739;
        _1748 = _1739;
        _1749 = _1739;
        _1750 = _1739;
        _1751 = 0.0;
        _1752 = 0.0;
        _1753 = 0.0;
    }
    float _2048;
    float _2049;
    float _2050;
    float _2051;
    float _2052;
    float _2053;
    float _2054;
    float _2055;
    float _2056;
    float _2057;
    float _2058;
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1779 = fma(_1409, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401));
        float _1783 = fma(_1409, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401));
        float _1787 = fma(_1409, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401));
        float _1810 = _1401 + _1160;
        float _1811 = _1405 + _1161;
        float _1812 = _1409 + _1162;
        float _1822 = fma(_1812, cbModelParam._m0[30u].z, fma(_1811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1810)) - _1779;
        float _1823 = fma(_1812, cbModelParam._m0[31u].z, fma(_1811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1810)) - _1783;
        float _1824 = fma(_1812, cbModelParam._m0[32u].z, fma(_1811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1810)) - _1787;
        float _1828 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
        float _1841 = ((_1828 * _1822) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1779 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1842 = ((_1828 * _1823) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1783 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1843 = ((_1828 * _1824) / cbModelParam._m0[35u].z) + ((((((_1787 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1845 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1841, _1842, _1843), 0.0);
        vec4 _1852 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1841, _1842, _1843), 0.0);
        vec4 _1859 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1841, _1842, _1843), 0.0);
        vec4 _1866 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1841, _1842, _1843), 0.0);
        float _1878 = exp2((_1845.w + (-0.5)) * 20.0) * 2.0;
        float _1879 = _1878 * (_1845.x + (-0.5));
        float _1880 = _1878 * (_1845.y + (-0.5));
        float _1881 = _1878 * (_1845.z + (-0.5));
        float _1888 = exp2((_1852.w + (-0.5)) * 20.0) * 2.0;
        float _1889 = _1888 * (_1852.x + (-0.5));
        float _1890 = _1888 * (_1852.y + (-0.5));
        float _1891 = _1888 * (_1852.z + (-0.5));
        float _1898 = exp2((_1859.w + (-0.5)) * 20.0) * 2.0;
        float _1899 = _1898 * (_1859.x + (-0.5));
        float _1900 = _1898 * (_1859.y + (-0.5));
        float _1901 = _1898 * (_1859.z + (-0.5));
        float _1908 = exp2((_1866.w + (-0.5)) * 20.0) * 2.0;
        float _1909 = _1908 * (_1866.x + (-0.5));
        float _1910 = _1908 * (_1866.y + (-0.5));
        float _1911 = _1908 * (_1866.z + (-0.5));
        float _1912 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1913 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1914 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1915 = _1879 * 0.5;
        float _1916 = _1889 * 0.5;
        float _1917 = _1899 * 0.5;
        float _1918 = dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917));
        float _1923 = (_1918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1918);
        float _1931 = (dot(vec3(_1160, _1161, _1162), vec3(_1923 * _1915, _1923 * _1916, _1923 * _1917)) + 1.0) * 0.5;
        float _4535 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1940 = sqrt(((_1916 * _1916) + (_1915 * _1915)) + (_1917 * _1917)) / (_1912 + 9.9999997473787516355514526367188e-06);
        float _4546 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1941 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1942 = _1941 * 2.0;
        float _1946 = (1.0 - _1941) / (_1941 + 1.0);
        float _4557 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _1956 = ((((1.0 - _1947) * (_1942 + 2.0)) * exp2(log2(isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_1942 + 1.0))) + _1947) * _1912;
        float _1957 = _1880 * 0.5;
        float _1958 = _1890 * 0.5;
        float _1959 = _1900 * 0.5;
        float _1960 = dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959));
        float _1965 = (_1960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1960);
        float _1973 = (dot(vec3(_1160, _1161, _1162), vec3(_1965 * _1957, _1965 * _1958, _1965 * _1959)) + 1.0) * 0.5;
        float _4568 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1982 = sqrt(((_1958 * _1958) + (_1957 * _1957)) + (_1959 * _1959)) / (_1913 + 9.9999997473787516355514526367188e-06);
        float _4579 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1984 = _1983 * 2.0;
        float _1988 = (1.0 - _1983) / (_1983 + 1.0);
        float _4590 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1989 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _1998 = ((((1.0 - _1989) * (_1984 + 2.0)) * exp2(log2(isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_1984 + 1.0))) + _1989) * _1913;
        float _1999 = _1881 * 0.5;
        float _2000 = _1891 * 0.5;
        float _2001 = _1901 * 0.5;
        float _2002 = dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001));
        float _2007 = (_2002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2002);
        float _2015 = (dot(vec3(_1160, _1161, _1162), vec3(_2007 * _1999, _2007 * _2000, _2007 * _2001)) + 1.0) * 0.5;
        float _4601 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2024 = sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001)) / (_1914 + 9.9999997473787516355514526367188e-06);
        float _4612 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2025 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2026 = _2025 * 2.0;
        float _2030 = (1.0 - _2025) / (_2025 + 1.0);
        float _4623 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2031 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2040 = ((((1.0 - _2031) * (_2026 + 2.0)) * exp2(log2(isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2026 + 1.0))) + _2031) * _1914;
        _2048 = _1881;
        _2049 = _1880;
        _2050 = _1879;
        _2051 = _1891;
        _2052 = _1890;
        _2053 = _1889;
        _2054 = _1901;
        _2055 = _1900;
        _2056 = _1899;
        _2057 = _1914;
        _2058 = _1913;
        _2059 = _1912;
        _2060 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)));
        _2061 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)));
        _2062 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)));
    }
    else
    {
        _2048 = _1739;
        _2049 = _1739;
        _2050 = _1739;
        _2051 = _1739;
        _2052 = _1739;
        _2053 = _1739;
        _2054 = _1739;
        _2055 = _1739;
        _2056 = _1739;
        _2057 = _1739;
        _2058 = _1739;
        _2059 = _1739;
        _2060 = 0.0;
        _2061 = 0.0;
        _2062 = 0.0;
    }
    float _2072 = (cbModelParam._m0[1u].x * (_2060 - _1751)) + _1751;
    float _2073 = (cbModelParam._m0[1u].x * (_2061 - _1752)) + _1752;
    float _2074 = (cbModelParam._m0[1u].x * (_2062 - _1753)) + _1753;
    float _2095 = fma(_2074, cbSceneParam._m0[89u].z, fma(_2073, cbSceneParam._m0[89u].y, _2072 * cbSceneParam._m0[89u].x));
    float _2098 = fma(_2074, cbSceneParam._m0[90u].z, fma(_2073, cbSceneParam._m0[90u].y, _2072 * cbSceneParam._m0[90u].x));
    float _2101 = fma(_2074, cbSceneParam._m0[91u].z, fma(_2073, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2072));
    float _2116 = _1345 * 0.5;
    float _2117 = _1346 * 0.5;
    float _2118 = _1347 * 0.5;
    float _2119 = dot(vec4(_2116, _2117, _2118, 1.0), vec4(_2050, _2053, _2056, _2059));
    float _2122 = dot(vec4(_2116, _2117, _2118, 1.0), vec4(_2049, _2052, _2055, _2058));
    float _2125 = dot(vec4(_2116, _2117, _2118, 1.0), vec4(_2048, _2051, _2054, _2057));
    float _2159;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2132 = dot(vec4(_2116, _2117, _2118, 1.0), vec4(_1738, _1742, _1745, _1748));
        float _2136 = dot(vec4(_2116, _2117, _2118, 1.0), vec4(_1740, _1743, _1746, _1749));
        float _2140 = dot(vec4(_2116, _2117, _2118, 1.0), vec4(_1741, _1744, _1747, _1750));
        float _2147 = dot(vec4(cbModelParam._m0[39u]), vec4(_2116, _2117, _2118, 1.0));
        _2159 = dot(vec3(isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0)), isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0)), isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2147) ? 0.0 : (isnan(0.0) ? _2147 : max(0.0, _2147))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2159 = 1.0;
    }
    float _2170;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2161 = dot(vec4(cbModelParam._m0[40u]), vec4(_2116, _2117, _2118, 1.0));
        _2170 = dot(vec3(isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0)), isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0)), isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2161) ? 0.0 : (isnan(0.0) ? _2161 : max(0.0, _2161))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2170 = 1.0;
    }
    float _2174 = (_2170 * cbModelParam._m0[1u].x) + (_2159 * (1.0 - cbModelParam._m0[1u].x));
    float _2184 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1163);
    float _2185 = isnan(_2184) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2184 : min(cbModelParam._m0[25u].z, _2184));
    float _2265;
    float _2267;
    float _2269;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2232 = fma(_1409, cbModelParam._m0[13u].z, fma(_1405, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1401)) + cbModelParam._m0[13u].w;
        float _2236 = fma(_1409, cbModelParam._m0[14u].z, fma(_1405, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1401)) + cbModelParam._m0[14u].w;
        float _2240 = fma(_1409, cbModelParam._m0[15u].z, fma(_1405, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1401)) + cbModelParam._m0[15u].w;
        float _2243 = fma(_1347, cbModelParam._m0[13u].z, fma(_1346, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1345));
        float _2246 = fma(_1347, cbModelParam._m0[14u].z, fma(_1346, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1345));
        float _2249 = fma(_1347, cbModelParam._m0[15u].z, fma(_1346, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1345));
        float _2277;
        if (_2243 > 0.0)
        {
            _2277 = abs((1.0 - _2232) / _2243);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2243 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2232 + 1.0) / _2243);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2277 = frontier_phi_17_15_ladder;
        }
        float _2480;
        if (_2246 > 0.0)
        {
            _2480 = abs((1.0 - _2236) / _2246);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2246 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2236 + 1.0) / _2246);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2480 = frontier_phi_26_22_ladder;
        }
        float _2734;
        if (_2249 > 0.0)
        {
            _2734 = abs((1.0 - _2240) / _2249);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2249 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2240 + 1.0) / _2249);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2734 = frontier_phi_38_33_ladder;
        }
        float _2736 = isnan(_2480) ? _2277 : (isnan(_2277) ? _2480 : min(_2277, _2480));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _2243) + _2232;
        float _2742 = (_2737 * _2246) + _2236;
        float _2743 = (_2737 * _2249) + _2240;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2746 = (-1.0) - _2744;
        float _2748 = _2744 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2743 > _2748) || ((_2743 < _2746) || ((_2742 > _2748) || ((_2742 < _2746) || ((_2741 < _2746) || (_2741 > _2748))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2871 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2743, cbModelParam._m0[9u].z, fma(_2742, cbModelParam._m0[9u].y, _2741 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2743, cbModelParam._m0[10u].z, fma(_2742, cbModelParam._m0[10u].y, _2741 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2743, cbModelParam._m0[11u].z, fma(_2742, cbModelParam._m0[11u].y, _2741 * cbModelParam._m0[11u].x))), _2185);
            frontier_phi_16_38_ladder = _2871.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2871.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2871.x * cbModelParam._m0[1u].y;
        }
        _2265 = frontier_phi_16_38_ladder_2;
        _2267 = frontier_phi_16_38_ladder_1;
        _2269 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2253 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1345, _1346, _1347), _2185);
        _2265 = _2253.x * cbModelParam._m0[1u].y;
        _2267 = _2253.y * cbModelParam._m0[1u].y;
        _2269 = _2253.z * cbModelParam._m0[1u].y;
    }
    float _2273 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1163);
    float _2274 = isnan(_2273) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2273 : min(cbModelParam._m0[25u].w, _2273));
    float _2364;
    float _2366;
    float _2368;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2328 = fma(_1409, cbModelParam._m0[21u].z, fma(_1405, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1401)) + cbModelParam._m0[21u].w;
        float _2332 = fma(_1409, cbModelParam._m0[22u].z, fma(_1405, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1401)) + cbModelParam._m0[22u].w;
        float _2336 = fma(_1409, cbModelParam._m0[23u].z, fma(_1405, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1401)) + cbModelParam._m0[23u].w;
        float _2339 = fma(_1347, cbModelParam._m0[21u].z, fma(_1346, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1345));
        float _2342 = fma(_1347, cbModelParam._m0[22u].z, fma(_1346, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1345));
        float _2345 = fma(_1347, cbModelParam._m0[23u].z, fma(_1346, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1345));
        float _2485;
        if (_2339 > 0.0)
        {
            _2485 = abs((1.0 - _2328) / _2339);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2339 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2328 + 1.0) / _2339);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2485 = frontier_phi_28_24_ladder;
        }
        float _2761;
        if (_2342 > 0.0)
        {
            _2761 = abs((1.0 - _2332) / _2342);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2342 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2332 + 1.0) / _2342);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2761 = frontier_phi_40_35_ladder;
        }
        float _2974;
        if (_2345 > 0.0)
        {
            _2974 = abs((1.0 - _2336) / _2345);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2345 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2336 + 1.0) / _2345);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2974 = frontier_phi_49_46_ladder;
        }
        float _2976 = isnan(_2761) ? _2485 : (isnan(_2485) ? _2761 : min(_2485, _2761));
        float _2977 = isnan(_2974) ? _2976 : (isnan(_2976) ? _2974 : min(_2976, _2974));
        float _2981 = (_2977 * _2339) + _2328;
        float _2982 = (_2977 * _2342) + _2332;
        float _2983 = (_2977 * _2345) + _2336;
        float _2984 = _2977 * 9.9999997473787516355514526367188e-05;
        float _2985 = (-1.0) - _2984;
        float _2987 = _2984 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2983 > _2987) || ((_2983 < _2985) || ((_2982 > _2987) || ((_2982 < _2985) || ((_2981 < _2985) || (_2981 > _2987))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3182 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2983, cbModelParam._m0[17u].z, fma(_2982, cbModelParam._m0[17u].y, _2981 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2983, cbModelParam._m0[18u].z, fma(_2982, cbModelParam._m0[18u].y, _2981 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2983, cbModelParam._m0[19u].z, fma(_2982, cbModelParam._m0[19u].y, _2981 * cbModelParam._m0[19u].x))), _2274);
            frontier_phi_25_49_ladder = _3182.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3182.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3182.x * cbModelParam._m0[1u].z;
        }
        _2364 = frontier_phi_25_49_ladder_2;
        _2366 = frontier_phi_25_49_ladder_1;
        _2368 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2348 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1345, _1346, _1347), _2274);
        _2364 = _2348.x * cbModelParam._m0[1u].z;
        _2366 = _2348.y * cbModelParam._m0[1u].z;
        _2368 = _2348.z * cbModelParam._m0[1u].z;
    }
    float _2381 = (((_1372 * _1321) + _1373) * _1337) * ((cbModelParam._m0[1u].w * (_2364 - _2265)) + _2265);
    float _2383 = (((_1372 * _1323) + _1373) * _1337) * ((cbModelParam._m0[1u].w * (_2366 - _2267)) + _2267);
    float _2385 = (((_1372 * _1324) + _1373) * _1337) * ((cbModelParam._m0[1u].w * (_2368 - _2269)) + _2269);
    float _2388 = fma(_2385, cbSceneParam._m0[89u].z, fma(_2383, cbSceneParam._m0[89u].y, _2381 * cbSceneParam._m0[89u].x));
    float _2391 = fma(_2385, cbSceneParam._m0[90u].z, fma(_2383, cbSceneParam._m0[90u].y, _2381 * cbSceneParam._m0[90u].x));
    float _2394 = fma(_2385, cbSceneParam._m0[91u].z, fma(_2383, cbSceneParam._m0[91u].y, _2381 * cbSceneParam._m0[91u].x));
    uvec4 _2404 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2406 = _2404.x * 14u;
    uint _2407 = _2406 + 13u;
    float _2414 = _1337 + (-1.0);
    float _2419 = (cbLight._m0[_2407].x * _2414) + 1.0;
    float _2420 = (cbLight._m0[_2407].y * _2414) + 1.0;
    float _2421 = (cbLight._m0[_2407].z * _2414) + 1.0;
    float _2422 = (cbLight._m0[_2407].w * _2414) + 1.0;
    uint _2423 = _2406 + 5u;
    float _2429 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
    uint _2433 = _2406 + 4u;
    float _2439 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
    uint _2443 = _2406 | 1u;
    float _2454 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_1160, _1161, _1162));
    float _2457 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_1160, _1161, _1162));
    float _4759 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _4770 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2462 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * 0.3183098733425140380859375;
    float _2464 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * 0.3183098733425140380859375;
    float _2471 = ((cbLight._m0[_2423].x * _2429) * _2464) + ((cbLight._m0[_2433].x * _2439) * _2462);
    float _2472 = ((_2429 * cbLight._m0[_2423].y) * _2464) + ((_2439 * cbLight._m0[_2433].y) * _2462);
    float _2473 = ((_2429 * cbLight._m0[_2423].z) * _2464) + ((_2439 * cbLight._m0[_2433].z) * _2462);
    uvec4 _2477 = floatBitsToUint(cbLight._m0[_2406 + 12u]);
    bool _2479 = _2477.x == 0u;
    float _2490;
    float _2492;
    float _2494;
    if (_2479)
    {
        _2490 = _2471;
        _2492 = _2472;
        _2494 = _2473;
    }
    else
    {
        uint _2498 = _2406 + 6u;
        float _2514 = (dot(vec3(cbLight._m0[_2406 + 2u].xyz), vec3(_1160, _1161, _1162)) * 0.5) + 0.5;
        float _2515 = _2514 * _2514;
        float _4781 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2516 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2517 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2490 = (((cbLight._m0[_2498].x * 0.3183098733425140380859375) * _2516) * _2517) + _2471;
        _2492 = (((cbLight._m0[_2498].y * 0.3183098733425140380859375) * _2516) * _2517) + _2472;
        _2494 = (((cbLight._m0[_2498].z * 0.3183098733425140380859375) * _2516) * _2517) + _2473;
    }
    bool _2497 = _2477.y == 0u;
    float _2535;
    float _2537;
    float _2539;
    if (_2497)
    {
        _2535 = _2490;
        _2537 = _2492;
        _2539 = _2494;
    }
    else
    {
        uint _2705 = _2406 + 7u;
        float _2721 = (dot(vec3(cbLight._m0[_2406 + 3u].xyz), vec3(_1160, _1161, _1162)) * 0.5) + 0.5;
        float _2722 = _2721 * _2721;
        float _4797 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2723 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2724 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
        _2535 = (((cbLight._m0[_2705].x * 0.3183098733425140380859375) * _2723) * _2724) + _2490;
        _2537 = (((cbLight._m0[_2705].y * 0.3183098733425140380859375) * _2723) * _2724) + _2492;
        _2539 = (((cbLight._m0[_2705].z * 0.3183098733425140380859375) * _2723) * _2724) + _2494;
    }
    uint _2542 = _2406 + 8u;
    float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _1163) * 0.949999988079071044921875);
    float _2556 = _2555 * _2555;
    float _2557 = cbLight._m0[_2406].x + _1239;
    float _2558 = cbLight._m0[_2406].y + _1240;
    float _2559 = cbLight._m0[_2406].z + _1241;
    float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
    float _2564 = _2563 * _2557;
    float _2565 = _2563 * _2558;
    float _2566 = _2563 * _2559;
    float _2567 = dot(vec3(_1160, _1161, _1162), vec3(cbLight._m0[_2406].xyz));
    float _4813 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
    float _4824 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
    float _2571 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    float _2572 = dot(vec3(_1160, _1161, _1162), vec3(_2564, _2565, _2566));
    float _4835 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2575 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
    float _2576 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2564, _2565, _2566));
    float _4846 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2580 = _2556 * _2556;
    float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
    float _2592 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
    float _2593 = 0.959999978542327880859375 - _1318;
    float _2595 = 0.959999978542327880859375 - _1319;
    float _2596 = 0.959999978542327880859375 - _1320;
    float _2603 = 1.0 - _2556;
    float _2614 = (0.5 / (((_2571 * ((_2570 * _2603) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2571 * _2603) + _2556) * _2570))) * _2570;
    float _4857 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2616 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
    uint _2627 = _2406 + 9u;
    float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _1163) * 0.949999988079071044921875);
    float _2639 = _2638 * _2638;
    float _2640 = cbLight._m0[_2443].x + _1239;
    float _2641 = cbLight._m0[_2443].y + _1240;
    float _2642 = cbLight._m0[_2443].z + _1241;
    float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
    float _2647 = _2646 * _2640;
    float _2648 = _2646 * _2641;
    float _2649 = _2646 * _2642;
    float _2650 = dot(vec3(_1160, _1161, _1162), vec3(cbLight._m0[_2443].xyz));
    float _4868 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
    float _2654 = dot(vec3(_1160, _1161, _1162), vec3(_2647, _2648, _2649));
    float _4879 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
    float _2658 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2647, _2648, _2649));
    float _4890 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2662 = _2639 * _2639;
    float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
    float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0)))) * 5.0);
    float _2680 = 1.0 - _2639;
    float _2690 = (0.5 / (((_2571 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2571 * _2680) + _2639) * _2653))) * _2653;
    float _4901 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2692 = (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
    float _2702 = (((((_2673 * _2593) + _1321) * cbLight._m0[_2627].x) * _2692) * _2429) + (((((_2592 * _2593) + _1321) * cbLight._m0[_2542].x) * _2616) * _2439);
    float _2703 = (((((_2673 * _2595) + _1323) * cbLight._m0[_2627].y) * _2692) * _2429) + (((((_2592 * _2595) + _1323) * cbLight._m0[_2542].y) * _2616) * _2439);
    float _2704 = (((((_2673 * _2596) + _1324) * cbLight._m0[_2627].z) * _2692) * _2429) + (((((_2592 * _2596) + _1324) * cbLight._m0[_2542].z) * _2616) * _2439);
    float _2766;
    float _2768;
    float _2770;
    if (_2479)
    {
        _2766 = _2702;
        _2768 = _2703;
        _2770 = _2704;
    }
    else
    {
        uint _2772 = _2406 + 2u;
        uint _2776 = _2406 + 10u;
        float _2790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2772].w)) * _1163) * 0.949999988079071044921875);
        float _2791 = _2790 * _2790;
        float _2792 = cbLight._m0[_2772].x + _1239;
        float _2793 = cbLight._m0[_2772].y + _1240;
        float _2794 = cbLight._m0[_2772].z + _1241;
        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
        float _2799 = _2798 * _2792;
        float _2800 = _2798 * _2793;
        float _2801 = _2798 * _2794;
        float _2802 = dot(vec3(_1160, _1161, _1162), vec3(cbLight._m0[_2772].xyz));
        float _4912 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2805 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
        float _2806 = dot(vec3(_1160, _1161, _1162), vec3(_2799, _2800, _2801));
        float _4923 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
        float _2810 = dot(vec3(cbLight._m0[_2772].xyz), vec3(_2799, _2800, _2801));
        float _4934 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2814 = _2791 * _2791;
        float _2818 = ((_2809 * _2809) * (_2814 + (-1.0))) + 1.0;
        float _2825 = exp2(log2(1.0 - (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) * 5.0);
        float _2832 = 1.0 - _2791;
        float _2842 = (0.5 / (((_2571 * ((_2805 * _2832) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2571 * _2832) + _2791) * _2805))) * _2805;
        float _4945 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2844 = (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2814 / ((_2818 * _2818) * 3.141590118408203125));
        float _2845 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2766 = (((((_2825 * _2593) + _1321) * cbLight._m0[_2776].x) * _2844) * _2845) + _2702;
        _2768 = (((((_2825 * _2595) + _1323) * cbLight._m0[_2776].y) * _2844) * _2845) + _2703;
        _2770 = (((((_2825 * _2596) + _1324) * cbLight._m0[_2776].z) * _2844) * _2845) + _2704;
    }
    float _2880;
    float _2882;
    float _2884;
    if (_2497)
    {
        _2880 = _2766;
        _2882 = _2768;
        _2884 = _2770;
    }
    else
    {
        uint _2891 = _2406 + 3u;
        uint _2895 = _2406 + 11u;
        float _2909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2891].w)) * _1163) * 0.949999988079071044921875);
        float _2910 = _2909 * _2909;
        float _2911 = cbLight._m0[_2891].x + _1239;
        float _2912 = cbLight._m0[_2891].y + _1240;
        float _2913 = cbLight._m0[_2891].z + _1241;
        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
        float _2918 = _2917 * _2911;
        float _2919 = _2917 * _2912;
        float _2920 = _2917 * _2913;
        float _2921 = dot(vec3(_1160, _1161, _1162), vec3(cbLight._m0[_2891].xyz));
        float _4961 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
        float _2925 = dot(vec3(_1160, _1161, _1162), vec3(_2918, _2919, _2920));
        float _4972 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _2929 = dot(vec3(cbLight._m0[_2891].xyz), vec3(_2918, _2919, _2920));
        float _4983 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2933 = _2910 * _2910;
        float _2937 = ((_2928 * _2928) * (_2933 + (-1.0))) + 1.0;
        float _2944 = exp2(log2(1.0 - (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0)))) * 5.0);
        float _2951 = 1.0 - _2910;
        float _2961 = (0.5 / (((_2571 * ((_2924 * _2951) + _2910)) + 9.9999999392252902907785028219223e-09) + (((_2571 * _2951) + _2910) * _2924))) * _2924;
        float _4994 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
        float _2963 = (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_2933 / ((_2937 * _2937) * 3.141590118408203125));
        float _2964 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
        _2880 = (((((_2944 * _2593) + _1321) * cbLight._m0[_2895].x) * _2963) * _2964) + _2766;
        _2882 = (((((_2944 * _2595) + _1323) * cbLight._m0[_2895].y) * _2963) * _2964) + _2768;
        _2884 = (((((_2944 * _2596) + _1324) * cbLight._m0[_2895].z) * _2963) * _2964) + _2770;
    }
    float _3099;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    if (_2404.y == 0u)
    {
        float _3039 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3040 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3039;
        float _3041 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3039;
        float _3042 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3039;
        uvec4 _3054 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3055 = _3054.x;
        uint _3066 = uint((float(_3054.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1260) / _3055))) + floor(float(uint(cbSceneParam._m0[85u].x * _1259) / _3055)));
        float _3076 = (log2(_3042 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3077 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        uint _3080 = uint(isnan(14.0) ? _3077 : (isnan(_3077) ? 14.0 : min(_3077, 14.0)));
        uvec4 _3085 = texelFetch(g_lightClusterGridBuffer, int(((_3080 << 2u) + (_3066 << 6u)) >> 2u));
        uint _3086 = _3085.x;
        uint _3087 = _3054.z;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        if (((((1u << ((_3087 >> 4u) & 15u)) + 4294967295u) & _3086) == 0u) || ((_3087 & 240u) == 0u))
        {
            _3187 = 0.0;
            _3189 = 0.0;
            _3191 = 0.0;
            _3193 = 0.0;
            _3195 = 0.0;
            _3197 = 0.0;
        }
        else
        {
            float _3188;
            float _3190;
            float _3192;
            float _3194;
            float _3196;
            float _3198;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            uint _3345 = 0u;
            uint _3354;
            bool _3355;
            for (;;)
            {
                _3354 = texelFetch(g_lightClassification, int((((_3080 << 5u) + (_3066 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                _3355 = _3354 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3355)
                {
                    frontier_phi_66_pred = _3339;
                    frontier_phi_66_pred_1 = _3344;
                    frontier_phi_66_pred_2 = _3343;
                    frontier_phi_66_pred_3 = _3342;
                    frontier_phi_66_pred_4 = _3341;
                    frontier_phi_66_pred_5 = _3340;
                }
                else
                {
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    uint _3490;
                    _3484 = _3339;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3343;
                    _3489 = _3344;
                    _3490 = _3354;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    for (;;)
                    {
                        uint _3494 = uint(findLSB(_3490)) + (_3345 << 5u);
                        uint _3491 = (_3490 + 4294967295u) & _3490;
                        uint _3496 = _3494 * 48u;
                        vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3496)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3496 + 3u)).x));
                        uint _3516 = (_3494 * 48u) + 4u;
                        vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3516)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3516 + 3u)).x));
                        uint _3535 = (_3494 * 48u) + 8u;
                        vec3 _3546 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3535)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 2u)).x));
                        float _3550 = _3510.x - _3040;
                        float _3551 = _3510.y - _3041;
                        float _3552 = _3510.z - _3042;
                        float _3553 = dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552));
                        float _3556 = inversesqrt(_3553);
                        float _3557 = _3556 * _3550;
                        float _3558 = _3556 * _3551;
                        float _3559 = _3556 * _3552;
                        float _3560 = dot(vec3(_1278, _1281, _1284), vec3(_3557, _3558, _3559));
                        float _3565 = 1.0 - (_3553 * _3510.w);
                        float _5020 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3566 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                        float _3567 = sqrt(_3553) * _3529.w;
                        float _3570 = 1.39999997615814208984375 / (_3567 + 1.39999997615814208984375);
                        float _3571 = _3570 * _3570;
                        float _3574 = ((1.0 - _3571) * _3560) + _3571;
                        float _3577 = _3567 * _3567;
                        float _3581 = ((isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0))) * _3566) / ((_3577 * 0.699999988079071044921875) + 1.0);
                        float _3585 = (-0.0) - _3040;
                        float _3586 = (-0.0) - _3041;
                        float _3587 = (-0.0) - _3042;
                        float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                        float _3592 = _3591 * _3585;
                        float _3593 = _3591 * _3586;
                        float _3594 = _3591 * _3587;
                        float _3602 = exp2(log2(1.0 / ((_3577 * 3.5) + 5.0)) * 0.25);
                        float _3603 = 1.0 - _1353;
                        float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                        float _3611 = _3610 * _3610;
                        float _3612 = _3611 * _3611;
                        float _3613 = _3592 + _3557;
                        float _3614 = _3593 + _3558;
                        float _3615 = _3594 + _3559;
                        float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                        float _3623 = dot(vec3(_1278, _1281, _1284), vec3(_3592, _3593, _3594));
                        float _5036 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3626 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                        float _3627 = dot(vec3(_1278, _1281, _1284), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                        float _5047 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3630 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                        float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                        float _3635 = _3570 * _3611;
                        float _3636 = _3635 * _3635;
                        float _3639 = ((1.0 - _3636) * _3560) + _3636;
                        float _5058 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3640 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                        float _3641 = 1.0 - _3611;
                        float _3651 = (0.5 / (((_3640 * ((_3626 * _3641) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3640 * _3641) + _3611) * _3626))) * _3640;
                        float _5069 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3662 = (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0)))) / ((_3634 * _3634) * ((_3577 * 2.1991131305694580078125) + 3.141590118408203125))) * _3566;
                        _3414 = (_3581 * _3529.x) + _3487;
                        _3415 = (_3581 * _3529.y) + _3488;
                        _3416 = (_3581 * _3529.z) + _3489;
                        _3411 = (_3662 * _3546.x) + _3484;
                        _3412 = (_3662 * _3546.y) + _3485;
                        _3413 = (_3662 * _3546.z) + _3486;
                        if (_3491 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3484 = _3411;
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3415;
                            _3489 = _3416;
                            _3490 = _3491;
                        }
                    }
                    frontier_phi_66_pred = _3411;
                    frontier_phi_66_pred_1 = _3416;
                    frontier_phi_66_pred_2 = _3415;
                    frontier_phi_66_pred_3 = _3414;
                    frontier_phi_66_pred_4 = _3413;
                    frontier_phi_66_pred_5 = _3412;
                }
                _3188 = frontier_phi_66_pred;
                _3198 = frontier_phi_66_pred_1;
                _3196 = frontier_phi_66_pred_2;
                _3194 = frontier_phi_66_pred_3;
                _3192 = frontier_phi_66_pred_4;
                _3190 = frontier_phi_66_pred_5;
                uint _3346 = _3345 + 1u;
                if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3339 = _3188;
                    _3340 = _3190;
                    _3341 = _3192;
                    _3342 = _3194;
                    _3343 = _3196;
                    _3344 = _3198;
                    _3345 = _3346;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3187 = _3188;
            _3189 = _3190;
            _3191 = _3192;
            _3193 = _3194;
            _3195 = _3196;
            _3197 = _3198;
        }
        uvec4 _3201 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3202 = _3201.z;
        uint _3204 = (_3202 >> 8u) & 15u;
        float _3307;
        float _3309;
        float _3311;
        float _3313;
        float _3315;
        float _3317;
        if (((4294967295u << _3204) & _3086) == 0u)
        {
            _3307 = _3187;
            _3309 = _3189;
            _3311 = _3191;
            _3313 = _3193;
            _3315 = _3195;
            _3317 = _3197;
        }
        else
        {
            float _3332 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
            float _3333 = _3332 * _3040;
            float _3334 = _3332 * _3041;
            float _3335 = _3332 * _3042;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3204 < ((_3202 >> 12u) & 15u))
            {
                float _3308;
                float _3310;
                float _3312;
                float _3314;
                float _3316;
                float _3318;
                float _3467 = _3187;
                float _3468 = _3189;
                float _3469 = _3191;
                float _3470 = _3193;
                float _3471 = _3195;
                float _3472 = _3197;
                uint _3473 = _3204;
                uint _3482;
                bool _3483;
                for (;;)
                {
                    _3482 = texelFetch(g_lightClassification, int((((_3080 << 5u) + (_3066 << 9u)) + (_3473 << 2u)) >> 2u)).x;
                    _3483 = _3482 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3483)
                    {
                        frontier_phi_77_pred = _3472;
                        frontier_phi_77_pred_1 = _3471;
                        frontier_phi_77_pred_2 = _3470;
                        frontier_phi_77_pred_3 = _3469;
                        frontier_phi_77_pred_4 = _3468;
                        frontier_phi_77_pred_5 = _3467;
                    }
                    else
                    {
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3969;
                        float _3970;
                        float _3971;
                        float _3972;
                        float _3973;
                        float _3974;
                        float _3689 = _3467;
                        float _3690 = _3468;
                        float _3691 = _3469;
                        float _3692 = _3470;
                        float _3693 = _3471;
                        float _3694 = _3472;
                        uint _3695 = _3482;
                        uint _3696;
                        vec4 _3721;
                        float _3722;
                        vec4 _3737;
                        vec3 _3749;
                        vec4 _3764;
                        vec4 _3779;
                        float _3825;
                        bool _3826;
                        for (;;)
                        {
                            uint _3706 = ((_3473 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3695));
                            _3696 = (_3695 + 4294967295u) & _3695;
                            uint _3708 = _3706 * 40u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            _3722 = _3721.w;
                            uint _3724 = (_3706 * 40u) + 4u;
                            _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            uint _3739 = (_3706 * 40u) + 8u;
                            _3749 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x));
                            uint _3751 = (_3706 * 40u) + 16u;
                            _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3766 = (_3706 * 40u) + 20u;
                            _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3781 = (_3706 * 40u) + 24u;
                            vec4 _3794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 3u)).x));
                            uint _3800 = (_3706 * 40u) + 28u;
                            vec4 _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            _3825 = fma(_3042, _3813.z, fma(_3041, _3813.y, _3813.x * _3040)) + _3813.w;
                            _3826 = !((fma(_3042, _3794.z, fma(_3041, _3794.y, _3794.x * _3040)) + _3794.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3826)
                            {
                                float _3853 = _3721.x - _3040;
                                float _3854 = _3721.y - _3041;
                                float _3855 = _3721.z - _3042;
                                float _3856 = dot(vec3(_3853, _3854, _3855), vec3(_3853, _3854, _3855));
                                float _3859 = inversesqrt(_3856);
                                float _3860 = _3859 * _3853;
                                float _3861 = _3859 * _3854;
                                float _3862 = _3859 * _3855;
                                float _3866 = 1.0 - (_3856 / (_3722 * _3722));
                                float _5080 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                                float _3871 = sqrt(_3856) * _3737.w;
                                float _3873 = 1.39999997615814208984375 / (_3871 + 1.39999997615814208984375);
                                float _3874 = _3873 * _3873;
                                float _3877 = ((1.0 - _3874) * dot(vec3(_3860, _3861, _3862), vec3(_1278, _1281, _1284))) + _3874;
                                float _3880 = _3871 * _3871;
                                float _3884 = (fma(_3042, _3764.z, fma(_3041, _3764.y, _3764.x * _3040)) + _3764.w) / _3825;
                                float _3885 = (fma(_3042, _3779.z, fma(_3041, _3779.y, _3779.x * _3040)) + _3779.w) / _3825;
                                float _3889 = 1.0 - dot(vec2(_3884, _3885), vec2(_3884, _3885));
                                float _5096 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3890 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                                float _3891 = _3890 * (((isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0))) * _3867) / ((_3880 * 0.699999988079071044921875) + 1.0));
                                float _3903 = exp2(log2(1.0 / ((_3880 * 3.5) + 5.0)) * 0.25);
                                float _3904 = 1.0 - _1353;
                                float _3911 = sqrt(1.0 - ((1.0 - (_3904 * _3904)) * (1.0 - (_3903 * _3903))));
                                float _3912 = _3911 * _3911;
                                float _3913 = _3912 * _3912;
                                float _3914 = _3860 - _3333;
                                float _3915 = _3861 - _3334;
                                float _3916 = _3862 - _3335;
                                float _3920 = inversesqrt(dot(vec3(_3914, _3915, _3916), vec3(_3914, _3915, _3916)));
                                float _3924 = dot(vec3(_1278, _1281, _1284), vec3((-0.0) - _3333, (-0.0) - _3334, (-0.0) - _3335));
                                float _5107 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3927 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                                float _3928 = dot(vec3(_1278, _1281, _1284), vec3(_3920 * _3914, _3920 * _3915, _3920 * _3916));
                                float _5118 = isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0));
                                float _3931 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                                float _3935 = ((_3931 * _3931) * (_3913 + (-1.0))) + 1.0;
                                float _3936 = _3873 * _3912;
                                float _3937 = _3936 * _3936;
                                float _3943 = ((1.0 - _3937) * dot(vec3(_1278, _1281, _1284), vec3(_3860, _3861, _3862))) + _3937;
                                float _5129 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3944 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                                float _3945 = 1.0 - _3912;
                                float _3955 = (0.5 / (((_3944 * ((_3927 * _3945) + _3912)) + 9.9999999392252902907785028219223e-09) + (((_3944 * _3945) + _3912) * _3927))) * _3944;
                                float _5140 = isnan(0.0) ? _3955 : (isnan(_3955) ? 0.0 : max(_3955, 0.0));
                                float _3965 = (_3890 * _3867) * (((_3913 * 3.1415927410125732421875) * (isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0)))) / ((_3935 * _3935) * ((_3880 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3891 * _3737.y;
                                frontier_phi_83_pred_1 = _3891 * _3737.x;
                                frontier_phi_83_pred_2 = _3965 * _3749.z;
                                frontier_phi_83_pred_3 = _3965 * _3749.y;
                                frontier_phi_83_pred_4 = _3965 * _3749.x;
                                frontier_phi_83_pred_5 = _3891 * _3737.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3973 = frontier_phi_83_pred;
                            _3972 = frontier_phi_83_pred_1;
                            _3971 = frontier_phi_83_pred_2;
                            _3970 = frontier_phi_83_pred_3;
                            _3969 = frontier_phi_83_pred_4;
                            _3974 = frontier_phi_83_pred_5;
                            _3679 = _3972 + _3692;
                            _3680 = _3973 + _3693;
                            _3681 = _3974 + _3694;
                            _3676 = _3969 + _3689;
                            _3677 = _3970 + _3690;
                            _3678 = _3971 + _3691;
                            if (_3696 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3681;
                                _3695 = _3696;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3681;
                        frontier_phi_77_pred_1 = _3680;
                        frontier_phi_77_pred_2 = _3679;
                        frontier_phi_77_pred_3 = _3678;
                        frontier_phi_77_pred_4 = _3677;
                        frontier_phi_77_pred_5 = _3676;
                    }
                    _3318 = frontier_phi_77_pred;
                    _3316 = frontier_phi_77_pred_1;
                    _3314 = frontier_phi_77_pred_2;
                    _3312 = frontier_phi_77_pred_3;
                    _3310 = frontier_phi_77_pred_4;
                    _3308 = frontier_phi_77_pred_5;
                    uint _3474 = _3473 + 1u;
                    if (_3474 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3467 = _3308;
                        _3468 = _3310;
                        _3469 = _3312;
                        _3470 = _3314;
                        _3471 = _3316;
                        _3472 = _3318;
                        _3473 = _3474;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3312;
                frontier_phi_58_59_ladder_1 = _3318;
                frontier_phi_58_59_ladder_2 = _3316;
                frontier_phi_58_59_ladder_3 = _3314;
                frontier_phi_58_59_ladder_4 = _3310;
                frontier_phi_58_59_ladder_5 = _3308;
            }
            else
            {
                frontier_phi_58_59_ladder = _3191;
                frontier_phi_58_59_ladder_1 = _3197;
                frontier_phi_58_59_ladder_2 = _3195;
                frontier_phi_58_59_ladder_3 = _3193;
                frontier_phi_58_59_ladder_4 = _3189;
                frontier_phi_58_59_ladder_5 = _3187;
            }
            _3307 = frontier_phi_58_59_ladder_5;
            _3309 = frontier_phi_58_59_ladder_4;
            _3311 = frontier_phi_58_59_ladder;
            _3313 = frontier_phi_58_59_ladder_3;
            _3315 = frontier_phi_58_59_ladder_2;
            _3317 = frontier_phi_58_59_ladder_1;
        }
        float _3322 = isnan(1.0) ? _1337 : (isnan(_1337) ? 1.0 : min(_1337, 1.0));
        _3099 = (_3322 * _3313) + _2535;
        _3101 = (_3322 * _3315) + _2537;
        _3103 = (_3322 * _3317) + _2539;
        _3105 = ((_3307 * _1321) * _3322) + _2880;
        _3107 = ((_3309 * _1323) * _3322) + _2882;
        _3109 = ((_3311 * _1324) * _3322) + _2884;
    }
    else
    {
        _3099 = _2535;
        _3101 = _2537;
        _3103 = _2539;
        _3105 = _2880;
        _3107 = _2882;
        _3109 = _2884;
    }
    float _5156 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
    float _5167 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
    float _5178 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _3126 = ((isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0))) * (_3099 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1337))) + ((_3105 + ((isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0))) * _2174)) * cbPerFrame._m0[3u].x);
    float _3127 = ((isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0))) * (_3101 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1337))) + ((_3107 + ((isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0))) * _2174)) * cbPerFrame._m0[3u].x);
    float _3128 = ((isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0))) * (_3103 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1337))) + ((_3109 + ((isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0))) * _2174)) * cbPerFrame._m0[3u].x);
    uint _3129 = _299 + 6u;
    float _3137 = _1259 / cbSceneParam._m0[86u].x;
    float _3138 = _1260 / cbSceneParam._m0[86u].y;
    vec4 _3152 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3137, _3138, (log2((isnan(cbSceneParam._m0[77u].w) ? _1182 : (isnan(_1182) ? cbSceneParam._m0[77u].w : min(_1182, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3154 = _3152.x;
    float _3155 = _3152.y;
    float _3156 = _3152.z;
    float _3157 = _3152.w;
    float _3249;
    float _3251;
    float _3253;
    float _3255;
    if (_1182 > cbSceneParam._m0[78u].w)
    {
        float _3212 = isnan(_1182) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1182 : min(cbSceneParam._m0[80u].w, _1182));
        float _3213 = _3212 / _1182;
        float _3224 = _3213 * _1232;
        float _3225 = _1233 * _3213;
        float _3226 = (-0.0) - _3225;
        float _3227 = _3213 * _1234;
        float _3229 = (cbSceneParam._m0[77u].w * _3226) / _3212;
        float _3230 = _3229 + cbSceneParam._m0[79u].w;
        float _3231 = cbSceneParam._m0[79u].w - _3225;
        float _3237 = sqrt(((_3224 * _3224) + (_3225 * _3225)) + (_3227 * _3227));
        float _3240 = (1.0 - (cbSceneParam._m0[77u].w / _3212)) * _3237;
        float _3245 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3247 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3424;
        if (abs((_3226 - _3229) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3424 = ((((_3230 > 0.0) ? exp2(_3245 * _3230) : (2.0 - exp2(_3247 * _3230))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3240;
        }
        else
        {
            float _3368 = 1.0 / cbSceneParam._m0[80u].x;
            float _3369 = isnan(_3231) ? _3230 : (isnan(_3230) ? _3231 : max(_3230, _3231));
            float _3370 = isnan(_3231) ? _3230 : (isnan(_3230) ? _3231 : min(_3230, _3231));
            float _3379 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : min(_3369, 0.0));
            float _3380 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : min(_3370, 0.0));
            _3424 = ((abs(_3237 / _3226) * cbSceneParam._m0[80u].y) * ((((_3379 - _3380) * 2.0) - ((exp2(_3245 * (isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0)))) - exp2(_3245 * (isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))))) * _3368)) - ((exp2(_3247 * _3379) - exp2(_3247 * _3380)) * _3368))) + (_3240 * cbSceneParam._m0[80u].z);
        }
        vec4 _3426 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3137, _3138, 1.0), 0.0);
        float _3435 = exp2((_3424 * (-1.44269502162933349609375)) * (1.0 - _3426.w));
        float _3436 = log2(_3435);
        float _3452 = log2(_3157);
        _3249 = (exp2(_3452 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].x)) * _3426.x) / cbSceneParam._m0[78u].x)) + _3154;
        _3251 = (exp2(_3452 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].y)) * _3426.y) / cbSceneParam._m0[78u].y)) + _3155;
        _3253 = (exp2(_3452 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3436 * cbSceneParam._m0[78u].z)) * _3426.z) / cbSceneParam._m0[78u].z)) + _3156;
        _3255 = _3435 * _3157;
    }
    else
    {
        _3249 = _3154;
        _3251 = _3155;
        _3253 = _3156;
        _3255 = _3157;
    }
    bool _3462;
    vec4 _3265;
    vec4 _3287;
    float _3289;
    float _3293;
    float _3294;
    float _3295;
    float _3296;
    bool _3306;
    for (;;)
    {
        _3265 = cbMatDynParam._m0[0u];
        float _3267 = roundEven(_3265.y);
        bool _3268 = _3267 == 3.0;
        float _3269 = log2(_3255);
        float _3276 = exp2(_3269 * cbSceneParam._m0[78u].x) * _3126;
        float _3277 = exp2(_3269 * cbSceneParam._m0[78u].y) * _3127;
        float _3278 = exp2(_3269 * cbSceneParam._m0[78u].z) * _3128;
        float _3285 = _1248 + (-0.5);
        _3287 = cbMtdParam._m0[1u];
        _3289 = _3287.y * _3285;
        float _3292 = (_3267 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3293 = _3292 * (_3268 ? _3276 : (_3276 + (cbSceneParam._m0[72u].w * _3249)));
        _3294 = _3292 * (_3268 ? _3277 : (_3277 + (cbSceneParam._m0[72u].w * _3251)));
        _3295 = _3292 * (_3268 ? _3278 : (_3278 + (cbSceneParam._m0[72u].w * _3253)));
        _3296 = _3285 * 0.999000012874603271484375;
        _3306 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3306)
        {
            if ((cbInstanceData._m0[_299 + 7u].x + _3296) < 0.5)
            {
                _3462 = true;
                break;
            }
        }
        uint _3403 = _1297 + uint(_3265.w);
        if ((cbInstanceData._m0[_3403].w < 1.0) && ((cbInstanceData._m0[_3403].w + _3296) < 0.5))
        {
            _3462 = true;
            break;
        }
        if ((_3289 + 1.0) < _3287.x)
        {
            _3462 = true;
            break;
        }
        _3462 = false;
        break;
    }
    float _3667;
    if (_3462)
    {
        discard_state = true;
        _3667 = 0.0;
    }
    else
    {
        _3667 = cbInstanceData._m0[_3129].w;
    }
    SV_Target.x = _3293;
    SV_Target.y = _3294;
    SV_Target.z = _3295;
    SV_Target.w = _3667;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3129].w;
    discard_exit();
}


