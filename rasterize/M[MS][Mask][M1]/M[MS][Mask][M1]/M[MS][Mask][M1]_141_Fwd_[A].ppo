#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1515;
float _3892;
float _3893;
float _3894;
float _3895;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _344.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3904 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _422 = (_415 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _423 = (_415 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _424 = (_415 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _344.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3915 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _535 = _533.x;
    float _545 = dot(vec4(_535, _533.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _557 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _344.z) * 2.0) - ((((_535 - _545) * cbMtdParam._m0[23u].w) + _545) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3926 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _565 = (_558 * ((_516.x * cbMtdParam._m0[14u].x) - _495)) + _495;
    float _566 = (_558 * ((_516.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _567 = (_558 * ((_516.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _624 = _622.x;
    float _625 = _622.y;
    float _626 = _622.z;
    float _633 = ((_605.x - _624) * _415) + _624;
    float _634 = ((_605.y - _625) * _415) + _625;
    float _635 = ((_605.z - _626) * _415) + _626;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _658 = ((_647.x - _633) * _488) + _633;
    float _659 = ((_647.y - _634) * _488) + _634;
    float _660 = ((_647.z - _635) * _488) + _635;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _685 = ((_672.z - _660) * _558) + _660;
    float _688 = ((((_672.x - _658) * _558) + _658) * 2.0) + (-1.0);
    float _690 = ((((_672.y - _659) * _558) + _659) * 2.0) + (-1.0);
    float _691 = dot(vec2(_688, _690), vec2(_688, _690));
    float _3937 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _696 = sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _722 = (((_710.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _688;
    float _723 = (((_710.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _690;
    float _726 = fma(_696, _244, fma(_723, _251, _722 * _237));
    float _729 = fma(_696, _245, fma(_723, _252, _722 * _238));
    float _732 = fma(_696, _246, fma(_723, _253, _722 * _239));
    float _736 = inversesqrt(dot(vec3(_726, _729, _732), vec3(_726, _729, _732)));
    vec4 _763 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _765 = _763.x;
    float _766 = 1.0 - _765;
    float _774 = (cbMtdParam._m0[19u].x + dot(vec4(_736 * _726, _736 * _729, _736 * _732, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_765 - _766) * cbMtdParam._m0[24u].z) + _766) * cbMtdParam._m0[21u].z);
    float _3948 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _775 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _782 = (_775 * ((_585.x * cbMtdParam._m0[18u].x) - _565)) + _565;
    float _783 = (_775 * ((_585.y * cbMtdParam._m0[18u].y) - _566)) + _566;
    float _784 = (_775 * ((_585.z * cbMtdParam._m0[18u].z) - _567)) + _567;
    vec4 _810 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _812 = _810.x;
    float _830 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _812) * _415) + _812;
    float _847 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _830) * _488) + _830;
    float _865 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _276) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _277) + cbTextureTilingScale._m0[10u].w)).x - _847) * _558) + _847;
    float _869 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _865) * cbMtdParam._m0[19u].z) + _865;
    float _871 = _869 - (_869 * _775);
    float _875 = (cbMtdParam._m0[19u].w * (_710.z - _685)) + _685;
    vec4 _888 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _895 = (_888.x * 2.0) + (-1.0);
    float _896 = (_888.y * 2.0) + (-1.0);
    float _897 = dot(vec2(_895, _896), vec2(_895, _896));
    float _3959 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _905 = ((_888.z - _875) * _775) + _875;
    float _915 = ((sqrt(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) - _696) * _775) + _696;
    float _918 = (((_895 - _722) * _775) + _722) + (cbMtdParam._m0[21u].x * _722);
    float _919 = (((_896 - _723) * _775) + _723) + (cbMtdParam._m0[21u].x * _723);
    float _921 = cbMtdParam._m0[22u].x + _710.w;
    float _924 = fma(_915, _244, fma(_919, _251, _918 * _237));
    float _927 = fma(_915, _245, fma(_919, _252, _918 * _238));
    float _930 = fma(_915, _246, fma(_919, _253, _918 * _239));
    float _934 = inversesqrt(dot(vec3(_924, _927, _930), vec3(_924, _927, _930)));
    float _935 = _934 * _924;
    float _936 = _934 * _927;
    float _937 = _934 * _930;
    float _3970 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _938 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _3992 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4003 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4014 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4025 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _943 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _957 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1007 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _997);
    float _1008 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _997);
    float _1009 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _997);
    float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
    float _1014 = _1007 * _1013;
    float _1015 = _1008 * _1013;
    float _1016 = _1009 * _1013;
    vec4 _1021 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1023 = _1021.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1195 = sqrt(((_1007 * _1007) + (_1008 * _1008)) + (_1009 * _1009));
        float _1201 = (cbMatDynParam._m0[5u].x * _1195) + cbMatDynParam._m0[5u].y;
        float _4036 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1206 = (cbMatDynParam._m0[5u].z * _1195) + cbMatDynParam._m0[5u].w;
        float _4047 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) - _1202)) + _1202) < ((_1023 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1034 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1035 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1053 = fma(_937, cbSceneParam._m0[5u].z, fma(_936, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _935));
    float _1056 = fma(_937, cbSceneParam._m0[6u].z, fma(_936, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _935));
    float _1059 = fma(_937, cbSceneParam._m0[7u].z, fma(_936, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _935));
    uint _1072 = _256 + 9u;
    uint _1073 = _1072 + uint(cbMatDynParam._m0[0u].w);
    float _1079 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_1073].x;
    float _1080 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * cbInstanceData._m0[_1073].y;
    float _1081 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_1073].z;
    float _4058 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1085 = 1.0 - _943;
    float _1086 = _1082 * _1085;
    float _1087 = _1083 * _1085;
    float _1088 = _1084 * _1085;
    float _1093 = (_1082 + (-0.039999999105930328369140625)) * _943;
    float _1094 = (_1083 + (-0.039999999105930328369140625)) * _943;
    float _1095 = (_1084 + (-0.039999999105930328369140625)) * _943;
    float _1096 = _1093 + 0.039999999105930328369140625;
    float _1098 = _1094 + 0.039999999105930328369140625;
    float _1099 = _1095 + 0.039999999105930328369140625;
    vec4 _1108 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1034, cbSceneParam._m0[86u].y * _1035));
    float _1112 = ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * TEXCOORD_5.w) * _1108.x;
    float _1113 = dot(vec3(_935, _936, _937), vec3(_1014, _1015, _1016));
    float _1116 = _1113 * 2.0;
    float _1120 = (_1116 * _935) - _1014;
    float _1121 = (_1116 * _936) - _1015;
    float _1122 = (_1116 * _937) - _1016;
    float _1126 = abs(dot(vec3(_1014, _1015, _1016), vec3(_935, _936, _937)));
    float _4091 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1128 = sqrt(_938);
    float _1141 = exp2((_1128 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1128 * 3.0));
    float _1147 = (1.0 - _1141) * ((_1128 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1148 = _1141 * _1128;
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1514;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1239 = fma(_1184, cbModelParam._m0[26u].z, fma(_1180, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1176));
        float _1243 = fma(_1184, cbModelParam._m0[27u].z, fma(_1180, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1176));
        float _1247 = fma(_1184, cbModelParam._m0[28u].z, fma(_1180, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1176));
        float _1272 = _1176 + _935;
        float _1273 = _1180 + _936;
        float _1274 = _1184 + _937;
        float _1284 = fma(_1274, cbModelParam._m0[26u].z, fma(_1273, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1272)) - _1239;
        float _1285 = fma(_1274, cbModelParam._m0[27u].z, fma(_1273, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1272)) - _1243;
        float _1286 = fma(_1274, cbModelParam._m0[28u].z, fma(_1273, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1272)) - _1247;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1303 = ((_1290 * _1284) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1239 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1290 * _1285) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1243 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1290 * _1286) / cbModelParam._m0[34u].z) + ((((((_1247 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        float _1342 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1308.x + (-0.5));
        float _1344 = _1342 * (_1308.y + (-0.5));
        float _1345 = _1342 * (_1308.z + (-0.5));
        float _1352 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1315.x + (-0.5));
        float _1354 = _1352 * (_1315.y + (-0.5));
        float _1355 = _1352 * (_1315.z + (-0.5));
        float _1362 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1322.x + (-0.5));
        float _1364 = _1362 * (_1322.y + (-0.5));
        float _1365 = _1362 * (_1322.z + (-0.5));
        float _1372 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1329.x + (-0.5));
        float _1374 = _1372 * (_1329.y + (-0.5));
        float _1375 = _1372 * (_1329.z + (-0.5));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = _1343 * 0.5;
        float _1380 = _1353 * 0.5;
        float _1381 = _1363 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1396 = (dot(vec3(_935, _936, _937), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1406 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4139 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1408 + 1.0))) + _1413) * _1376;
        float _1423 = _1344 * 0.5;
        float _1424 = _1354 * 0.5;
        float _1425 = _1364 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_935, _936, _937), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4172 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1450 + 1.0))) + _1455) * _1377;
        float _1465 = _1345 * 0.5;
        float _1466 = _1355 * 0.5;
        float _1467 = _1365 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_935, _936, _937), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4205 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1492 + 1.0))) + _1497) * _1378;
        _1514 = _1345;
        _1516 = _1344;
        _1517 = _1343;
        _1518 = _1355;
        _1519 = _1354;
        _1520 = _1353;
        _1521 = _1365;
        _1522 = _1364;
        _1523 = _1363;
        _1524 = _1378;
        _1525 = _1377;
        _1526 = _1376;
        _1527 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1528 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1529 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
    }
    else
    {
        _1514 = _1515;
        _1516 = _1515;
        _1517 = _1515;
        _1518 = _1515;
        _1519 = _1515;
        _1520 = _1515;
        _1521 = _1515;
        _1522 = _1515;
        _1523 = _1515;
        _1524 = _1515;
        _1525 = _1515;
        _1526 = _1515;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1555 = fma(_1184, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1176));
        float _1559 = fma(_1184, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1176));
        float _1563 = fma(_1184, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1176));
        float _1586 = _1176 + _935;
        float _1587 = _1180 + _936;
        float _1588 = _1184 + _937;
        float _1598 = fma(_1588, cbModelParam._m0[30u].z, fma(_1587, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1586)) - _1555;
        float _1599 = fma(_1588, cbModelParam._m0[31u].z, fma(_1587, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1586)) - _1559;
        float _1600 = fma(_1588, cbModelParam._m0[32u].z, fma(_1587, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1586)) - _1563;
        float _1604 = inversesqrt(dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600)));
        float _1617 = ((_1604 * _1598) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1555 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1618 = ((_1604 * _1599) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1559 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1619 = ((_1604 * _1600) / cbModelParam._m0[35u].z) + ((((((_1563 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        float _1654 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1621.x + (-0.5));
        float _1656 = _1654 * (_1621.y + (-0.5));
        float _1657 = _1654 * (_1621.z + (-0.5));
        float _1664 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1628.x + (-0.5));
        float _1666 = _1664 * (_1628.y + (-0.5));
        float _1667 = _1664 * (_1628.z + (-0.5));
        float _1674 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1635.x + (-0.5));
        float _1676 = _1674 * (_1635.y + (-0.5));
        float _1677 = _1674 * (_1635.z + (-0.5));
        float _1684 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1642.x + (-0.5));
        float _1686 = _1684 * (_1642.y + (-0.5));
        float _1687 = _1684 * (_1642.z + (-0.5));
        float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1689 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = _1655 * 0.5;
        float _1692 = _1665 * 0.5;
        float _1693 = _1675 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_935, _936, _937), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1688 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4268 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1718 + 1.0))) + _1723) * _1688;
        float _1733 = _1656 * 0.5;
        float _1734 = _1666 * 0.5;
        float _1735 = _1676 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_935, _936, _937), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1689 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4301 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1760 + 1.0))) + _1765) * _1689;
        float _1775 = _1657 * 0.5;
        float _1776 = _1667 * 0.5;
        float _1777 = _1677 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_935, _936, _937), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4334 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1802 + 1.0))) + _1807) * _1690;
        _1824 = _1657;
        _1825 = _1656;
        _1826 = _1655;
        _1827 = _1667;
        _1828 = _1666;
        _1829 = _1665;
        _1830 = _1677;
        _1831 = _1676;
        _1832 = _1675;
        _1833 = _1690;
        _1834 = _1689;
        _1835 = _1688;
        _1836 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1837 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
    }
    else
    {
        _1824 = _1515;
        _1825 = _1515;
        _1826 = _1515;
        _1827 = _1515;
        _1828 = _1515;
        _1829 = _1515;
        _1830 = _1515;
        _1831 = _1515;
        _1832 = _1515;
        _1833 = _1515;
        _1834 = _1515;
        _1835 = _1515;
        _1836 = 0.0;
        _1837 = 0.0;
        _1838 = 0.0;
    }
    float _1848 = (cbModelParam._m0[1u].x * (_1836 - _1527)) + _1527;
    float _1849 = (cbModelParam._m0[1u].x * (_1837 - _1528)) + _1528;
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1529)) + _1529;
    float _1871 = fma(_1850, cbSceneParam._m0[89u].z, fma(_1849, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1850, cbSceneParam._m0[90u].z, fma(_1849, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1850, cbSceneParam._m0[91u].z, fma(_1849, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1848));
    float _1892 = _1120 * 0.5;
    float _1893 = _1121 * 0.5;
    float _1894 = _1122 * 0.5;
    float _1895 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1898 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1825, _1828, _1831, _1834));
    float _1901 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1824, _1827, _1830, _1833));
    float _1935;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1908 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1514, _1518, _1521, _1524));
        float _1912 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1516, _1519, _1522, _1525));
        float _1916 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1517, _1520, _1523, _1526));
        float _1923 = dot(vec4(cbModelParam._m0[39u]), vec4(_1892, _1893, _1894, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1923) ? 0.0 : (isnan(0.0) ? _1923 : max(0.0, _1923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1946;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1937 = dot(vec4(cbModelParam._m0[40u]), vec4(_1892, _1893, _1894, 1.0));
        _1946 = dot(vec3(isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1946 = 1.0;
    }
    float _1950 = (_1946 * cbModelParam._m0[1u].x) + (_1935 * (1.0 - cbModelParam._m0[1u].x));
    float _1960 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _938);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1960 : min(cbModelParam._m0[25u].z, _1960));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2008 = fma(_1184, cbModelParam._m0[13u].z, fma(_1180, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1176)) + cbModelParam._m0[13u].w;
        float _2012 = fma(_1184, cbModelParam._m0[14u].z, fma(_1180, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1176)) + cbModelParam._m0[14u].w;
        float _2016 = fma(_1184, cbModelParam._m0[15u].z, fma(_1180, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1176)) + cbModelParam._m0[15u].w;
        float _2019 = fma(_1122, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120));
        float _2022 = fma(_1122, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120));
        float _2025 = fma(_1122, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120));
        float _2053;
        if (_2019 > 0.0)
        {
            _2053 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2053 = frontier_phi_17_15_ladder;
        }
        float _2255;
        if (_2022 > 0.0)
        {
            _2255 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2255 = frontier_phi_26_22_ladder;
        }
        float _2509;
        if (_2025 > 0.0)
        {
            _2509 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2509 = frontier_phi_38_33_ladder;
        }
        float _2511 = isnan(_2255) ? _2053 : (isnan(_2053) ? _2255 : min(_2053, _2255));
        float _2512 = isnan(_2509) ? _2511 : (isnan(_2511) ? _2509 : min(_2511, _2509));
        float _2516 = (_2512 * _2019) + _2008;
        float _2517 = (_2512 * _2022) + _2012;
        float _2518 = (_2512 * _2025) + _2016;
        float _2519 = _2512 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2519;
        float _2523 = _2519 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 > _2523) || ((_2517 < _2521) || ((_2516 < _2521) || (_2516 > _2523))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2518, cbModelParam._m0[9u].z, fma(_2517, cbModelParam._m0[9u].y, _2516 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2518, cbModelParam._m0[10u].z, fma(_2517, cbModelParam._m0[10u].y, _2516 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2518, cbModelParam._m0[11u].z, fma(_2517, cbModelParam._m0[11u].y, _2516 * cbModelParam._m0[11u].x))), _1961);
            frontier_phi_16_38_ladder = _2646.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2646.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2646.x * cbModelParam._m0[1u].y;
        }
        _2041 = frontier_phi_16_38_ladder_2;
        _2043 = frontier_phi_16_38_ladder_1;
        _2045 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2029 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1120, _1121, _1122), _1961);
        _2041 = _2029.x * cbModelParam._m0[1u].y;
        _2043 = _2029.y * cbModelParam._m0[1u].y;
        _2045 = _2029.z * cbModelParam._m0[1u].y;
    }
    float _2049 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _938);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2049 : min(cbModelParam._m0[25u].w, _2049));
    float _2139;
    float _2141;
    float _2143;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2103 = fma(_1184, cbModelParam._m0[21u].z, fma(_1180, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1176)) + cbModelParam._m0[21u].w;
        float _2107 = fma(_1184, cbModelParam._m0[22u].z, fma(_1180, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1176)) + cbModelParam._m0[22u].w;
        float _2111 = fma(_1184, cbModelParam._m0[23u].z, fma(_1180, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1176)) + cbModelParam._m0[23u].w;
        float _2114 = fma(_1122, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120));
        float _2117 = fma(_1122, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120));
        float _2120 = fma(_1122, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120));
        float _2260;
        if (_2114 > 0.0)
        {
            _2260 = abs((1.0 - _2103) / _2114);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2103 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2260 = frontier_phi_28_24_ladder;
        }
        float _2536;
        if (_2117 > 0.0)
        {
            _2536 = abs((1.0 - _2107) / _2117);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2107 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2536 = frontier_phi_40_35_ladder;
        }
        float _2749;
        if (_2120 > 0.0)
        {
            _2749 = abs((1.0 - _2111) / _2120);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2111 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2749 = frontier_phi_49_46_ladder;
        }
        float _2751 = isnan(_2536) ? _2260 : (isnan(_2260) ? _2536 : min(_2260, _2536));
        float _2752 = isnan(_2749) ? _2751 : (isnan(_2751) ? _2749 : min(_2751, _2749));
        float _2756 = (_2752 * _2114) + _2103;
        float _2757 = (_2752 * _2117) + _2107;
        float _2758 = (_2752 * _2120) + _2111;
        float _2759 = _2752 * 9.9999997473787516355514526367188e-05;
        float _2760 = (-1.0) - _2759;
        float _2762 = _2759 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2758 > _2762) || ((_2758 < _2760) || ((_2757 > _2762) || ((_2757 < _2760) || ((_2756 < _2760) || (_2756 > _2762))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2758, cbModelParam._m0[17u].z, fma(_2757, cbModelParam._m0[17u].y, _2756 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2758, cbModelParam._m0[18u].z, fma(_2757, cbModelParam._m0[18u].y, _2756 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2758, cbModelParam._m0[19u].z, fma(_2757, cbModelParam._m0[19u].y, _2756 * cbModelParam._m0[19u].x))), _2050);
            frontier_phi_25_49_ladder = _2957.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2957.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2957.x * cbModelParam._m0[1u].z;
        }
        _2139 = frontier_phi_25_49_ladder_2;
        _2141 = frontier_phi_25_49_ladder_1;
        _2143 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2123 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1120, _1121, _1122), _2050);
        _2139 = _2123.x * cbModelParam._m0[1u].z;
        _2141 = _2123.y * cbModelParam._m0[1u].z;
        _2143 = _2123.z * cbModelParam._m0[1u].z;
    }
    float _2156 = (((_1147 * _1096) + _1148) * _1112) * ((cbModelParam._m0[1u].w * (_2139 - _2041)) + _2041);
    float _2158 = (((_1147 * _1098) + _1148) * _1112) * ((cbModelParam._m0[1u].w * (_2141 - _2043)) + _2043);
    float _2160 = (((_1147 * _1099) + _1148) * _1112) * ((cbModelParam._m0[1u].w * (_2143 - _2045)) + _2045);
    float _2163 = fma(_2160, cbSceneParam._m0[89u].z, fma(_2158, cbSceneParam._m0[89u].y, _2156 * cbSceneParam._m0[89u].x));
    float _2166 = fma(_2160, cbSceneParam._m0[90u].z, fma(_2158, cbSceneParam._m0[90u].y, _2156 * cbSceneParam._m0[90u].x));
    float _2169 = fma(_2160, cbSceneParam._m0[91u].z, fma(_2158, cbSceneParam._m0[91u].y, _2156 * cbSceneParam._m0[91u].x));
    uvec4 _2179 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2181 = _2179.x * 14u;
    uint _2182 = _2181 + 13u;
    float _2189 = _1112 + (-1.0);
    float _2194 = (cbLight._m0[_2182].x * _2189) + 1.0;
    float _2195 = (cbLight._m0[_2182].y * _2189) + 1.0;
    float _2196 = (cbLight._m0[_2182].z * _2189) + 1.0;
    float _2197 = (cbLight._m0[_2182].w * _2189) + 1.0;
    uint _2198 = _2181 + 5u;
    float _2204 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
    uint _2208 = _2181 + 4u;
    float _2214 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2218 = _2181 | 1u;
    float _2229 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_935, _936, _937));
    float _2232 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_935, _936, _937));
    float _4470 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _4481 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2237 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * 0.3183098733425140380859375;
    float _2239 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * 0.3183098733425140380859375;
    float _2246 = ((cbLight._m0[_2198].x * _2204) * _2239) + ((cbLight._m0[_2208].x * _2214) * _2237);
    float _2247 = ((_2204 * cbLight._m0[_2198].y) * _2239) + ((_2214 * cbLight._m0[_2208].y) * _2237);
    float _2248 = ((_2204 * cbLight._m0[_2198].z) * _2239) + ((_2214 * cbLight._m0[_2208].z) * _2237);
    uvec4 _2252 = floatBitsToUint(cbLight._m0[_2181 + 12u]);
    bool _2254 = _2252.x == 0u;
    float _2265;
    float _2267;
    float _2269;
    if (_2254)
    {
        _2265 = _2246;
        _2267 = _2247;
        _2269 = _2248;
    }
    else
    {
        uint _2273 = _2181 + 6u;
        float _2289 = (dot(vec3(cbLight._m0[_2181 + 2u].xyz), vec3(_935, _936, _937)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4492 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2292 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2265 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2246;
        _2267 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2247;
        _2269 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2248;
    }
    bool _2272 = _2252.y == 0u;
    float _2310;
    float _2312;
    float _2314;
    if (_2272)
    {
        _2310 = _2265;
        _2312 = _2267;
        _2314 = _2269;
    }
    else
    {
        uint _2480 = _2181 + 7u;
        float _2496 = (dot(vec3(cbLight._m0[_2181 + 3u].xyz), vec3(_935, _936, _937)) * 0.5) + 0.5;
        float _2497 = _2496 * _2496;
        float _4508 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2498 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2499 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2310 = (((cbLight._m0[_2480].x * 0.3183098733425140380859375) * _2498) * _2499) + _2265;
        _2312 = (((cbLight._m0[_2480].y * 0.3183098733425140380859375) * _2498) * _2499) + _2267;
        _2314 = (((cbLight._m0[_2480].z * 0.3183098733425140380859375) * _2498) * _2499) + _2269;
    }
    uint _2317 = _2181 + 8u;
    float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _938) * 0.949999988079071044921875);
    float _2331 = _2330 * _2330;
    float _2332 = cbLight._m0[_2181].x + _1014;
    float _2333 = cbLight._m0[_2181].y + _1015;
    float _2334 = cbLight._m0[_2181].z + _1016;
    float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
    float _2339 = _2338 * _2332;
    float _2340 = _2338 * _2333;
    float _2341 = _2338 * _2334;
    float _2342 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2181].xyz));
    float _4524 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _4535 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _2346 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _2347 = dot(vec3(_935, _936, _937), vec3(_2339, _2340, _2341));
    float _4546 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2351 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2339, _2340, _2341));
    float _4557 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2355 = _2331 * _2331;
    float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
    float _2367 = exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0);
    float _2368 = 0.959999978542327880859375 - _1093;
    float _2370 = 0.959999978542327880859375 - _1094;
    float _2371 = 0.959999978542327880859375 - _1095;
    float _2378 = 1.0 - _2331;
    float _2389 = (0.5 / (((_2346 * ((_2345 * _2378) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2346 * _2378) + _2331) * _2345))) * _2345;
    float _4568 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2391 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
    uint _2402 = _2181 + 9u;
    float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _938) * 0.949999988079071044921875);
    float _2414 = _2413 * _2413;
    float _2415 = cbLight._m0[_2218].x + _1014;
    float _2416 = cbLight._m0[_2218].y + _1015;
    float _2417 = cbLight._m0[_2218].z + _1016;
    float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
    float _2422 = _2421 * _2415;
    float _2423 = _2421 * _2416;
    float _2424 = _2421 * _2417;
    float _2425 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2218].xyz));
    float _4579 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2429 = dot(vec3(_935, _936, _937), vec3(_2422, _2423, _2424));
    float _4590 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2422, _2423, _2424));
    float _4601 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2414 * _2414;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2448 = exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0);
    float _2455 = 1.0 - _2414;
    float _2465 = (0.5 / (((_2346 * ((_2428 * _2455) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2346 * _2455) + _2414) * _2428))) * _2428;
    float _4612 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2467 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    float _2477 = (((((_2448 * _2368) + _1096) * cbLight._m0[_2402].x) * _2467) * _2204) + (((((_2367 * _2368) + _1096) * cbLight._m0[_2317].x) * _2391) * _2214);
    float _2478 = (((((_2448 * _2370) + _1098) * cbLight._m0[_2402].y) * _2467) * _2204) + (((((_2367 * _2370) + _1098) * cbLight._m0[_2317].y) * _2391) * _2214);
    float _2479 = (((((_2448 * _2371) + _1099) * cbLight._m0[_2402].z) * _2467) * _2204) + (((((_2367 * _2371) + _1099) * cbLight._m0[_2317].z) * _2391) * _2214);
    float _2541;
    float _2543;
    float _2545;
    if (_2254)
    {
        _2541 = _2477;
        _2543 = _2478;
        _2545 = _2479;
    }
    else
    {
        uint _2547 = _2181 + 2u;
        uint _2551 = _2181 + 10u;
        float _2565 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2547].w)) * _938) * 0.949999988079071044921875);
        float _2566 = _2565 * _2565;
        float _2567 = cbLight._m0[_2547].x + _1014;
        float _2568 = cbLight._m0[_2547].y + _1015;
        float _2569 = cbLight._m0[_2547].z + _1016;
        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
        float _2574 = _2573 * _2567;
        float _2575 = _2573 * _2568;
        float _2576 = _2573 * _2569;
        float _2577 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2547].xyz));
        float _4623 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2581 = dot(vec3(_935, _936, _937), vec3(_2574, _2575, _2576));
        float _4634 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2585 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_2574, _2575, _2576));
        float _4645 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2589 = _2566 * _2566;
        float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
        float _2600 = exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0);
        float _2607 = 1.0 - _2566;
        float _2617 = (0.5 / (((_2346 * ((_2580 * _2607) + _2566)) + 9.9999999392252902907785028219223e-09) + (((_2346 * _2607) + _2566) * _2580))) * _2580;
        float _4656 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2541 = (((((_2600 * _2368) + _1096) * cbLight._m0[_2551].x) * _2619) * _2620) + _2477;
        _2543 = (((((_2600 * _2370) + _1098) * cbLight._m0[_2551].y) * _2619) * _2620) + _2478;
        _2545 = (((((_2600 * _2371) + _1099) * cbLight._m0[_2551].z) * _2619) * _2620) + _2479;
    }
    float _2655;
    float _2657;
    float _2659;
    if (_2272)
    {
        _2655 = _2541;
        _2657 = _2543;
        _2659 = _2545;
    }
    else
    {
        uint _2666 = _2181 + 3u;
        uint _2670 = _2181 + 11u;
        float _2684 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2666].w)) * _938) * 0.949999988079071044921875);
        float _2685 = _2684 * _2684;
        float _2686 = cbLight._m0[_2666].x + _1014;
        float _2687 = cbLight._m0[_2666].y + _1015;
        float _2688 = cbLight._m0[_2666].z + _1016;
        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
        float _2693 = _2692 * _2686;
        float _2694 = _2692 * _2687;
        float _2695 = _2692 * _2688;
        float _2696 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2666].xyz));
        float _4672 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2700 = dot(vec3(_935, _936, _937), vec3(_2693, _2694, _2695));
        float _4683 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2704 = dot(vec3(cbLight._m0[_2666].xyz), vec3(_2693, _2694, _2695));
        float _4694 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2708 = _2685 * _2685;
        float _2712 = ((_2703 * _2703) * (_2708 + (-1.0))) + 1.0;
        float _2719 = exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0);
        float _2726 = 1.0 - _2685;
        float _2736 = (0.5 / (((_2346 * ((_2699 * _2726) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2346 * _2726) + _2685) * _2699))) * _2699;
        float _4705 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2738 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2708 / ((_2712 * _2712) * 3.141590118408203125));
        float _2739 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2655 = (((((_2719 * _2368) + _1096) * cbLight._m0[_2670].x) * _2738) * _2739) + _2541;
        _2657 = (((((_2719 * _2370) + _1098) * cbLight._m0[_2670].y) * _2738) * _2739) + _2543;
        _2659 = (((((_2719 * _2371) + _1099) * cbLight._m0[_2670].z) * _2738) * _2739) + _2545;
    }
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    if (_2179.y == 0u)
    {
        float _2814 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2815 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2814;
        float _2816 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2814;
        float _2817 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2814;
        uvec4 _2829 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2830 = _2829.x;
        uint _2841 = uint((float(_2829.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1035) / _2830))) + floor(float(uint(cbSceneParam._m0[85u].x * _1034) / _2830)));
        float _2851 = (log2(_2817 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2852 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        uint _2855 = uint(isnan(14.0) ? _2852 : (isnan(_2852) ? 14.0 : min(_2852, 14.0)));
        uvec4 _2860 = texelFetch(g_lightClusterGridBuffer, int(((_2855 << 2u) + (_2841 << 6u)) >> 2u));
        uint _2861 = _2860.x;
        uint _2862 = _2829.z;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((((1u << ((_2862 >> 4u) & 15u)) + 4294967295u) & _2861) == 0u) || ((_2862 & 240u) == 0u))
        {
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
        }
        else
        {
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            uint _3121 = 0u;
            uint _3130;
            bool _3131;
            for (;;)
            {
                _3130 = texelFetch(g_lightClassification, int((((_2855 << 5u) + (_2841 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                _3131 = _3130 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3131)
                {
                    frontier_phi_66_pred = _3115;
                    frontier_phi_66_pred_1 = _3120;
                    frontier_phi_66_pred_2 = _3119;
                    frontier_phi_66_pred_3 = _3118;
                    frontier_phi_66_pred_4 = _3117;
                    frontier_phi_66_pred_5 = _3116;
                }
                else
                {
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    uint _3266;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3130;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    for (;;)
                    {
                        uint _3270 = uint(findLSB(_3266)) + (_3121 << 5u);
                        uint _3267 = (_3266 + 4294967295u) & _3266;
                        uint _3272 = _3270 * 48u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3272)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 3u)).x));
                        uint _3292 = (_3270 * 48u) + 4u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3311 = (_3270 * 48u) + 8u;
                        vec3 _3322 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x));
                        float _3326 = _3286.x - _2815;
                        float _3327 = _3286.y - _2816;
                        float _3328 = _3286.z - _2817;
                        float _3329 = dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328));
                        float _3332 = inversesqrt(_3329);
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3336 = dot(vec3(_1053, _1056, _1059), vec3(_3333, _3334, _3335));
                        float _3341 = 1.0 - (_3329 * _3286.w);
                        float _4731 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3343 = sqrt(_3329) * _3305.w;
                        float _3346 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3336) + _3347;
                        float _3353 = _3343 * _3343;
                        float _3357 = ((isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0))) * _3342) / ((_3353 * 0.699999988079071044921875) + 1.0);
                        float _3361 = (-0.0) - _2815;
                        float _3362 = (-0.0) - _2816;
                        float _3363 = (-0.0) - _2817;
                        float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                        float _3368 = _3367 * _3361;
                        float _3369 = _3367 * _3362;
                        float _3370 = _3367 * _3363;
                        float _3378 = exp2(log2(1.0 / ((_3353 * 3.5) + 5.0)) * 0.25);
                        float _3379 = 1.0 - _1128;
                        float _3386 = sqrt(1.0 - ((1.0 - (_3379 * _3379)) * (1.0 - (_3378 * _3378))));
                        float _3387 = _3386 * _3386;
                        float _3388 = _3387 * _3387;
                        float _3389 = _3368 + _3333;
                        float _3390 = _3369 + _3334;
                        float _3391 = _3370 + _3335;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3399 = dot(vec3(_1053, _1056, _1059), vec3(_3368, _3369, _3370));
                        float _4747 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3403 = dot(vec3(_1053, _1056, _1059), vec3(_3395 * _3389, _3395 * _3390, _3395 * _3391));
                        float _4758 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3410 = ((_3406 * _3406) * (_3388 + (-1.0))) + 1.0;
                        float _3411 = _3346 * _3387;
                        float _3412 = _3411 * _3411;
                        float _3415 = ((1.0 - _3412) * _3336) + _3412;
                        float _4769 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3416 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3417 = 1.0 - _3387;
                        float _3427 = (0.5 / (((_3416 * ((_3402 * _3417) + _3387)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3387) * _3402))) * _3416;
                        float _4780 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3438 = (((_3388 * 3.1415927410125732421875) * (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) / ((_3410 * _3410) * ((_3353 * 2.1991131305694580078125) + 3.141590118408203125))) * _3342;
                        _3190 = (_3357 * _3305.x) + _3263;
                        _3191 = (_3357 * _3305.y) + _3264;
                        _3192 = (_3357 * _3305.z) + _3265;
                        _3187 = (_3438 * _3322.x) + _3260;
                        _3188 = (_3438 * _3322.y) + _3261;
                        _3189 = (_3438 * _3322.z) + _3262;
                        if (_3267 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3267;
                        }
                    }
                    frontier_phi_66_pred = _3187;
                    frontier_phi_66_pred_1 = _3192;
                    frontier_phi_66_pred_2 = _3191;
                    frontier_phi_66_pred_3 = _3190;
                    frontier_phi_66_pred_4 = _3189;
                    frontier_phi_66_pred_5 = _3188;
                }
                _2963 = frontier_phi_66_pred;
                _2973 = frontier_phi_66_pred_1;
                _2971 = frontier_phi_66_pred_2;
                _2969 = frontier_phi_66_pred_3;
                _2967 = frontier_phi_66_pred_4;
                _2965 = frontier_phi_66_pred_5;
                uint _3122 = _3121 + 1u;
                if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3115 = _2963;
                    _3116 = _2965;
                    _3117 = _2967;
                    _3118 = _2969;
                    _3119 = _2971;
                    _3120 = _2973;
                    _3121 = _3122;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
        }
        uvec4 _2976 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2977 = _2976.z;
        uint _2979 = (_2977 >> 8u) & 15u;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        if (((4294967295u << _2979) & _2861) == 0u)
        {
            _3083 = _2962;
            _3085 = _2964;
            _3087 = _2966;
            _3089 = _2968;
            _3091 = _2970;
            _3093 = _2972;
        }
        else
        {
            float _3108 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
            float _3109 = _3108 * _2815;
            float _3110 = _3108 * _2816;
            float _3111 = _3108 * _2817;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2979 < ((_2977 >> 12u) & 15u))
            {
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3243 = _2962;
                float _3244 = _2964;
                float _3245 = _2966;
                float _3246 = _2968;
                float _3247 = _2970;
                float _3248 = _2972;
                uint _3249 = _2979;
                uint _3258;
                bool _3259;
                for (;;)
                {
                    _3258 = texelFetch(g_lightClassification, int((((_2855 << 5u) + (_2841 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                    _3259 = _3258 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3259)
                    {
                        frontier_phi_77_pred = _3248;
                        frontier_phi_77_pred_1 = _3247;
                        frontier_phi_77_pred_2 = _3246;
                        frontier_phi_77_pred_3 = _3245;
                        frontier_phi_77_pred_4 = _3244;
                        frontier_phi_77_pred_5 = _3243;
                    }
                    else
                    {
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3465 = _3243;
                        float _3466 = _3244;
                        float _3467 = _3245;
                        float _3468 = _3246;
                        float _3469 = _3247;
                        float _3470 = _3248;
                        uint _3471 = _3258;
                        uint _3472;
                        vec4 _3497;
                        float _3498;
                        vec4 _3513;
                        vec3 _3525;
                        vec4 _3540;
                        vec4 _3555;
                        float _3601;
                        bool _3602;
                        for (;;)
                        {
                            uint _3482 = ((_3249 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3471));
                            _3472 = (_3471 + 4294967295u) & _3471;
                            uint _3484 = _3482 * 40u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3498 = _3497.w;
                            uint _3500 = (_3482 * 40u) + 4u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3482 * 40u) + 8u;
                            _3525 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x));
                            uint _3527 = (_3482 * 40u) + 16u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3482 * 40u) + 20u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3482 * 40u) + 24u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3576 = (_3482 * 40u) + 28u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            _3601 = fma(_2817, _3589.z, fma(_2816, _3589.y, _3589.x * _2815)) + _3589.w;
                            _3602 = !((fma(_2817, _3570.z, fma(_2816, _3570.y, _3570.x * _2815)) + _3570.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3602)
                            {
                                float _3629 = _3497.x - _2815;
                                float _3630 = _3497.y - _2816;
                                float _3631 = _3497.z - _2817;
                                float _3632 = dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631));
                                float _3635 = inversesqrt(_3632);
                                float _3636 = _3635 * _3629;
                                float _3637 = _3635 * _3630;
                                float _3638 = _3635 * _3631;
                                float _3642 = 1.0 - (_3632 / (_3498 * _3498));
                                float _4791 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3647 = sqrt(_3632) * _3513.w;
                                float _3649 = 1.39999997615814208984375 / (_3647 + 1.39999997615814208984375);
                                float _3650 = _3649 * _3649;
                                float _3653 = ((1.0 - _3650) * dot(vec3(_3636, _3637, _3638), vec3(_1053, _1056, _1059))) + _3650;
                                float _3656 = _3647 * _3647;
                                float _3660 = (fma(_2817, _3540.z, fma(_2816, _3540.y, _3540.x * _2815)) + _3540.w) / _3601;
                                float _3661 = (fma(_2817, _3555.z, fma(_2816, _3555.y, _3555.x * _2815)) + _3555.w) / _3601;
                                float _3665 = 1.0 - dot(vec2(_3660, _3661), vec2(_3660, _3661));
                                float _4807 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3667 = _3666 * (((isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0))) * _3643) / ((_3656 * 0.699999988079071044921875) + 1.0));
                                float _3679 = exp2(log2(1.0 / ((_3656 * 3.5) + 5.0)) * 0.25);
                                float _3680 = 1.0 - _1128;
                                float _3687 = sqrt(1.0 - ((1.0 - (_3680 * _3680)) * (1.0 - (_3679 * _3679))));
                                float _3688 = _3687 * _3687;
                                float _3689 = _3688 * _3688;
                                float _3690 = _3636 - _3109;
                                float _3691 = _3637 - _3110;
                                float _3692 = _3638 - _3111;
                                float _3696 = inversesqrt(dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692)));
                                float _3700 = dot(vec3(_1053, _1056, _1059), vec3((-0.0) - _3109, (-0.0) - _3110, (-0.0) - _3111));
                                float _4818 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3704 = dot(vec3(_1053, _1056, _1059), vec3(_3696 * _3690, _3696 * _3691, _3696 * _3692));
                                float _4829 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3711 = ((_3707 * _3707) * (_3689 + (-1.0))) + 1.0;
                                float _3712 = _3649 * _3688;
                                float _3713 = _3712 * _3712;
                                float _3719 = ((1.0 - _3713) * dot(vec3(_1053, _1056, _1059), vec3(_3636, _3637, _3638))) + _3713;
                                float _4840 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3721 = 1.0 - _3688;
                                float _3731 = (0.5 / (((_3720 * ((_3703 * _3721) + _3688)) + 9.9999999392252902907785028219223e-09) + (((_3720 * _3721) + _3688) * _3703))) * _3720;
                                float _4851 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3741 = (_3666 * _3643) * (((_3689 * 3.1415927410125732421875) * (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) / ((_3711 * _3711) * ((_3656 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3667 * _3513.y;
                                frontier_phi_83_pred_1 = _3667 * _3513.x;
                                frontier_phi_83_pred_2 = _3741 * _3525.z;
                                frontier_phi_83_pred_3 = _3741 * _3525.y;
                                frontier_phi_83_pred_4 = _3741 * _3525.x;
                                frontier_phi_83_pred_5 = _3667 * _3513.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3749 = frontier_phi_83_pred;
                            _3748 = frontier_phi_83_pred_1;
                            _3747 = frontier_phi_83_pred_2;
                            _3746 = frontier_phi_83_pred_3;
                            _3745 = frontier_phi_83_pred_4;
                            _3750 = frontier_phi_83_pred_5;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            if (_3472 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3472;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3457;
                        frontier_phi_77_pred_1 = _3456;
                        frontier_phi_77_pred_2 = _3455;
                        frontier_phi_77_pred_3 = _3454;
                        frontier_phi_77_pred_4 = _3453;
                        frontier_phi_77_pred_5 = _3452;
                    }
                    _3094 = frontier_phi_77_pred;
                    _3092 = frontier_phi_77_pred_1;
                    _3090 = frontier_phi_77_pred_2;
                    _3088 = frontier_phi_77_pred_3;
                    _3086 = frontier_phi_77_pred_4;
                    _3084 = frontier_phi_77_pred_5;
                    uint _3250 = _3249 + 1u;
                    if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3243 = _3084;
                        _3244 = _3086;
                        _3245 = _3088;
                        _3246 = _3090;
                        _3247 = _3092;
                        _3248 = _3094;
                        _3249 = _3250;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3088;
                frontier_phi_58_59_ladder_1 = _3094;
                frontier_phi_58_59_ladder_2 = _3092;
                frontier_phi_58_59_ladder_3 = _3090;
                frontier_phi_58_59_ladder_4 = _3086;
                frontier_phi_58_59_ladder_5 = _3084;
            }
            else
            {
                frontier_phi_58_59_ladder = _2966;
                frontier_phi_58_59_ladder_1 = _2972;
                frontier_phi_58_59_ladder_2 = _2970;
                frontier_phi_58_59_ladder_3 = _2968;
                frontier_phi_58_59_ladder_4 = _2964;
                frontier_phi_58_59_ladder_5 = _2962;
            }
            _3083 = frontier_phi_58_59_ladder_5;
            _3085 = frontier_phi_58_59_ladder_4;
            _3087 = frontier_phi_58_59_ladder;
            _3089 = frontier_phi_58_59_ladder_3;
            _3091 = frontier_phi_58_59_ladder_2;
            _3093 = frontier_phi_58_59_ladder_1;
        }
        float _3098 = isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0));
        _2874 = (_3098 * _3089) + _2310;
        _2876 = (_3098 * _3091) + _2312;
        _2878 = (_3098 * _3093) + _2314;
        _2880 = ((_3083 * _1096) * _3098) + _2655;
        _2882 = ((_3085 * _1098) * _3098) + _2657;
        _2884 = ((_3087 * _1099) * _3098) + _2659;
    }
    else
    {
        _2874 = _2310;
        _2876 = _2312;
        _2878 = _2314;
        _2880 = _2655;
        _2882 = _2657;
        _2884 = _2659;
    }
    float _4867 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _4878 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _4889 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _2901 = ((isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2874 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1112))) + ((_2880 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1950)) * cbPerFrame._m0[3u].x);
    float _2902 = ((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2876 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1112))) + ((_2882 + ((isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))) * _1950)) * cbPerFrame._m0[3u].x);
    float _2903 = ((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2878 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1112))) + ((_2884 + ((isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0))) * _1950)) * cbPerFrame._m0[3u].x);
    uint _2904 = _256 + 6u;
    float _2912 = _1034 / cbSceneParam._m0[86u].x;
    float _2913 = _1035 / cbSceneParam._m0[86u].y;
    vec4 _2927 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2912, _2913, (log2((isnan(cbSceneParam._m0[77u].w) ? _957 : (isnan(_957) ? cbSceneParam._m0[77u].w : min(_957, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2929 = _2927.x;
    float _2930 = _2927.y;
    float _2931 = _2927.z;
    float _2932 = _2927.w;
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    if (_957 > cbSceneParam._m0[78u].w)
    {
        float _2987 = isnan(_957) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _957 : min(cbSceneParam._m0[80u].w, _957));
        float _2988 = _2987 / _957;
        float _2999 = _2988 * _1007;
        float _3000 = _1008 * _2988;
        float _3001 = (-0.0) - _3000;
        float _3003 = _2988 * _1009;
        float _3005 = (cbSceneParam._m0[77u].w * _3001) / _2987;
        float _3006 = _3005 + cbSceneParam._m0[79u].w;
        float _3007 = cbSceneParam._m0[79u].w - _3000;
        float _3013 = sqrt(((_2999 * _2999) + (_3000 * _3000)) + (_3003 * _3003));
        float _3016 = (1.0 - (cbSceneParam._m0[77u].w / _2987)) * _3013;
        float _3021 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3023 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3200;
        if (abs((_3001 - _3005) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3200 = ((((_3006 > 0.0) ? exp2(_3021 * _3006) : (2.0 - exp2(_3023 * _3006))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3016;
        }
        else
        {
            float _3144 = 1.0 / cbSceneParam._m0[80u].x;
            float _3145 = isnan(_3007) ? _3006 : (isnan(_3006) ? _3007 : max(_3006, _3007));
            float _3146 = isnan(_3007) ? _3006 : (isnan(_3006) ? _3007 : min(_3006, _3007));
            float _3155 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : min(_3145, 0.0));
            float _3156 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : min(_3146, 0.0));
            _3200 = ((abs(_3013 / _3001) * cbSceneParam._m0[80u].y) * ((((_3155 - _3156) * 2.0) - ((exp2(_3021 * (isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0)))) - exp2(_3021 * (isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))))) * _3144)) - ((exp2(_3023 * _3155) - exp2(_3023 * _3156)) * _3144))) + (_3016 * cbSceneParam._m0[80u].z);
        }
        vec4 _3202 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2912, _2913, 1.0), 0.0);
        float _3211 = exp2((_3200 * (-1.44269502162933349609375)) * (1.0 - _3202.w));
        float _3212 = log2(_3211);
        float _3228 = log2(_2932);
        _3025 = (exp2(_3228 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3212 * cbSceneParam._m0[78u].x)) * _3202.x) / cbSceneParam._m0[78u].x)) + _2929;
        _3027 = (exp2(_3228 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3212 * cbSceneParam._m0[78u].y)) * _3202.y) / cbSceneParam._m0[78u].y)) + _2930;
        _3029 = (exp2(_3228 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3212 * cbSceneParam._m0[78u].z)) * _3202.z) / cbSceneParam._m0[78u].z)) + _2931;
        _3031 = _3211 * _2932;
    }
    else
    {
        _3025 = _2929;
        _3027 = _2930;
        _3029 = _2931;
        _3031 = _2932;
    }
    bool _3238;
    vec4 _3041;
    vec4 _3063;
    float _3065;
    float _3069;
    float _3070;
    float _3071;
    float _3072;
    bool _3082;
    for (;;)
    {
        _3041 = cbMatDynParam._m0[0u];
        float _3043 = roundEven(_3041.y);
        bool _3044 = _3043 == 3.0;
        float _3045 = log2(_3031);
        float _3052 = exp2(_3045 * cbSceneParam._m0[78u].x) * _2901;
        float _3053 = exp2(_3045 * cbSceneParam._m0[78u].y) * _2902;
        float _3054 = exp2(_3045 * cbSceneParam._m0[78u].z) * _2903;
        float _3061 = _1023 + (-0.5);
        _3063 = cbMtdParam._m0[1u];
        _3065 = _3063.y * _3061;
        float _3068 = (_3043 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3069 = _3068 * (_3044 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3025)));
        _3070 = _3068 * (_3044 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3027)));
        _3071 = _3068 * (_3044 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3029)));
        _3072 = _3061 * 0.999000012874603271484375;
        _3082 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3082)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _3072) < 0.5)
            {
                _3238 = true;
                break;
            }
        }
        uint _3179 = _1072 + uint(_3041.w);
        if ((cbInstanceData._m0[_3179].w < 1.0) && ((cbInstanceData._m0[_3179].w + _3072) < 0.5))
        {
            _3238 = true;
            break;
        }
        if ((_3065 + 1.0) < _3063.x)
        {
            _3238 = true;
            break;
        }
        _3238 = false;
        break;
    }
    float _3443;
    if (_3238)
    {
        discard_state = true;
        _3443 = 0.0;
    }
    else
    {
        _3443 = cbInstanceData._m0[_2904].w;
    }
    SV_Target.x = _3069;
    SV_Target.y = _3070;
    SV_Target.z = _3071;
    SV_Target.w = _3443;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2904].w;
    discard_exit();
}


