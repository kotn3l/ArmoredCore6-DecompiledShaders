#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1429;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3753 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3764 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3775 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[23u].w) + _426) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3786 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _451 = (_444 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _452 = (_444 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _453 = (_444 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _492 = _490.x;
    float _502 = dot(vec4(_492, _490.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _516 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_492 - _502) * cbMtdParam._m0[23u].w) + _502) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3797 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _524 = (_517 * ((_470.x * cbMtdParam._m0[13u].x) - _451)) + _451;
    float _525 = (_517 * ((_470.y * cbMtdParam._m0[13u].y) - _452)) + _452;
    float _526 = (_517 * ((_470.z * cbMtdParam._m0[13u].z) - _453)) + _453;
    float _530 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _524;
    float _533 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _525;
    float _536 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _526;
    float _543 = ((_524 - _530) * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) + _530;
    float _544 = ((_525 - _533) * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) + _533;
    float _545 = ((_526 - _536) * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) + _536;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _297) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _298) + cbTextureTilingScale._m0[14u].w));
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _625 = _623.x;
    float _626 = _623.y;
    float _627 = _623.z;
    float _634 = ((_606.x - _625) * _444) + _625;
    float _635 = ((_606.y - _626) * _444) + _626;
    float _636 = ((_606.z - _627) * _444) + _627;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _661 = ((_648.z - _636) * _517) + _636;
    float _664 = ((((_648.x - _634) * _517) + _634) * 2.0) + (-1.0);
    float _665 = ((((_648.y - _635) * _517) + _635) * 2.0) + (-1.0);
    float _666 = dot(vec2(_664, _665), vec2(_664, _665));
    float _3808 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _671 = sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _712 = _710.x;
    float _713 = 1.0 - _712;
    float _729 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_712 - _713) * cbMtdParam._m0[24u].z) + _713) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3819 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _730 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _737 = (_730 * ((_564.x * cbMtdParam._m0[18u].x) - _543)) + _543;
    float _738 = (_730 * ((_564.y * cbMtdParam._m0[18u].y) - _544)) + _544;
    float _739 = (_730 * ((_564.z * cbMtdParam._m0[18u].z) - _545)) + _545;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _767 = _765.x;
    float _785 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _767) * _444) + _767;
    float _802 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w)).x - _785) * _517) + _785;
    float _806 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _802) * cbMtdParam._m0[19u].z) + _802;
    float _808 = _806 - (_806 * _730);
    float _813 = (((_583.z - _661) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _661;
    float _817 = ((_685.z - _813) * cbMtdParam._m0[19u].w) + _813;
    vec4 _830 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _837 = (_830.x * 2.0) + (-1.0);
    float _838 = (_830.y * 2.0) + (-1.0);
    float _839 = dot(vec2(_837, _838), vec2(_837, _838));
    float _3830 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _847 = (_730 * (_830.z - _817)) + _817;
    float _856 = (_664 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_583.x * 2.0) + (-1.0)))) + (((_685.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _857 = (_665 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_583.y * 2.0) + (-1.0)))) + (((_685.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _869 = (((_837 - _856) + (cbMtdParam._m0[21u].x * _856)) * _730) + _856;
    float _870 = (((_838 - _857) + (cbMtdParam._m0[21u].x * _857)) * _730) + _857;
    float _871 = (_730 * (sqrt(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) - _671)) + _671;
    float _875 = cbMtdParam._m0[22u].x + _685.w;
    float _878 = fma(_871, _244 * NORMAL.x, fma(_870, _251 * TANGENT.x, (_237 * _229) * _869));
    float _881 = fma(_871, _244 * NORMAL.y, fma(_870, _251 * TANGENT.y, (_237 * _230) * _869));
    float _884 = fma(_871, _244 * NORMAL.z, fma(_870, _251 * TANGENT.z, (_237 * _231) * _869));
    float _888 = inversesqrt(dot(vec3(_878, _881, _884), vec3(_878, _881, _884)));
    float _889 = _888 * _878;
    float _890 = _888 * _881;
    float _891 = _888 * _884;
    float _3841 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _892 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _3863 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3874 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3885 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3896 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _897 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _911 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _962 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _952);
    float _963 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _952);
    float _964 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _952);
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    float _977 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _978 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _996 = fma(_891, cbSceneParam._m0[5u].z, fma(_890, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _889));
    float _999 = fma(_891, cbSceneParam._m0[6u].z, fma(_890, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _889));
    float _1002 = fma(_891, cbSceneParam._m0[7u].z, fma(_890, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _889));
    uint _1016 = (_278 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1022 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_1016].x;
    float _1023 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_1016].y;
    float _1024 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_1016].z;
    float _3907 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1028 = 1.0 - _897;
    float _1029 = _1025 * _1028;
    float _1030 = _1026 * _1028;
    float _1031 = _1027 * _1028;
    float _1036 = (_1025 + (-0.039999999105930328369140625)) * _897;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _897;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _897;
    float _1039 = _1036 + 0.039999999105930328369140625;
    float _1041 = _1037 + 0.039999999105930328369140625;
    float _1042 = _1038 + 0.039999999105930328369140625;
    vec4 _1051 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _977, cbSceneParam._m0[86u].y * _978));
    float _1055 = ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * TEXCOORD_5.w) * _1051.x;
    float _1056 = dot(vec3(_889, _890, _891), vec3(_969, _970, _971));
    float _1059 = _1056 * 2.0;
    float _1063 = (_1059 * _889) - _969;
    float _1064 = (_1059 * _890) - _970;
    float _1065 = (_1059 * _891) - _971;
    float _1069 = abs(dot(vec3(_969, _970, _971), vec3(_889, _890, _891)));
    float _3940 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1071 = sqrt(_892);
    float _1084 = exp2((_1071 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1071 * 3.0));
    float _1090 = (1.0 - _1084) * ((_1071 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1091 = _1084 * _1071;
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1428;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1153 = fma(_1127, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119));
        float _1157 = fma(_1127, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119));
        float _1161 = fma(_1127, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119));
        float _1186 = _1119 + _889;
        float _1187 = _1123 + _890;
        float _1188 = _1127 + _891;
        float _1198 = fma(_1188, cbModelParam._m0[26u].z, fma(_1187, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186)) - _1153;
        float _1199 = fma(_1188, cbModelParam._m0[27u].z, fma(_1187, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186)) - _1157;
        float _1200 = fma(_1188, cbModelParam._m0[28u].z, fma(_1187, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186)) - _1161;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1153 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1157 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[34u].z) + ((((((_1161 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1256 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1222.x + (-0.5));
        float _1258 = _1256 * (_1222.y + (-0.5));
        float _1259 = _1256 * (_1222.z + (-0.5));
        float _1266 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1229.x + (-0.5));
        float _1268 = _1266 * (_1229.y + (-0.5));
        float _1269 = _1266 * (_1229.z + (-0.5));
        float _1276 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1236.x + (-0.5));
        float _1278 = _1276 * (_1236.y + (-0.5));
        float _1279 = _1276 * (_1236.z + (-0.5));
        float _1286 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1243.x + (-0.5));
        float _1288 = _1286 * (_1243.y + (-0.5));
        float _1289 = _1286 * (_1243.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1310 = (dot(vec3(_889, _890, _891), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1320 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3988 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1322 + 1.0))) + _1327) * _1290;
        float _1337 = _1258 * 0.5;
        float _1338 = _1268 * 0.5;
        float _1339 = _1278 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_889, _890, _891), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4021 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1364 + 1.0))) + _1369) * _1291;
        float _1379 = _1259 * 0.5;
        float _1380 = _1269 * 0.5;
        float _1381 = _1279 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_889, _890, _891), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4054 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1406 + 1.0))) + _1411) * _1292;
        _1428 = _1259;
        _1430 = _1258;
        _1431 = _1257;
        _1432 = _1269;
        _1433 = _1268;
        _1434 = _1267;
        _1435 = _1279;
        _1436 = _1278;
        _1437 = _1277;
        _1438 = _1292;
        _1439 = _1291;
        _1440 = _1290;
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1429;
        _1430 = _1429;
        _1431 = _1429;
        _1432 = _1429;
        _1433 = _1429;
        _1434 = _1429;
        _1435 = _1429;
        _1436 = _1429;
        _1437 = _1429;
        _1438 = _1429;
        _1439 = _1429;
        _1440 = _1429;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1467 = fma(_1127, cbModelParam._m0[30u].z, fma(_1123, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119));
        float _1471 = fma(_1127, cbModelParam._m0[31u].z, fma(_1123, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119));
        float _1475 = fma(_1127, cbModelParam._m0[32u].z, fma(_1123, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119));
        float _1498 = _1119 + _889;
        float _1499 = _1123 + _890;
        float _1500 = _1127 + _891;
        float _1510 = fma(_1500, cbModelParam._m0[30u].z, fma(_1499, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1498)) - _1467;
        float _1511 = fma(_1500, cbModelParam._m0[31u].z, fma(_1499, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1498)) - _1471;
        float _1512 = fma(_1500, cbModelParam._m0[32u].z, fma(_1499, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1498)) - _1475;
        float _1516 = inversesqrt(dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512)));
        float _1529 = ((_1516 * _1510) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1467 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1516 * _1511) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1471 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1516 * _1512) / cbModelParam._m0[35u].z) + ((((((_1475 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        float _1566 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1533.x + (-0.5));
        float _1568 = _1566 * (_1533.y + (-0.5));
        float _1569 = _1566 * (_1533.z + (-0.5));
        float _1576 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1540.x + (-0.5));
        float _1578 = _1576 * (_1540.y + (-0.5));
        float _1579 = _1576 * (_1540.z + (-0.5));
        float _1586 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1547.x + (-0.5));
        float _1588 = _1586 * (_1547.y + (-0.5));
        float _1589 = _1586 * (_1547.z + (-0.5));
        float _1596 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1554.x + (-0.5));
        float _1598 = _1596 * (_1554.y + (-0.5));
        float _1599 = _1596 * (_1554.z + (-0.5));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = _1567 * 0.5;
        float _1604 = _1577 * 0.5;
        float _1605 = _1587 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_889, _890, _891), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4117 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1630 + 1.0))) + _1635) * _1600;
        float _1645 = _1568 * 0.5;
        float _1646 = _1578 * 0.5;
        float _1647 = _1588 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_889, _890, _891), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4150 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1672 + 1.0))) + _1677) * _1601;
        float _1687 = _1569 * 0.5;
        float _1688 = _1579 * 0.5;
        float _1689 = _1589 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_889, _890, _891), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4183 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1714 + 1.0))) + _1719) * _1602;
        _1736 = _1569;
        _1737 = _1568;
        _1738 = _1567;
        _1739 = _1579;
        _1740 = _1578;
        _1741 = _1577;
        _1742 = _1589;
        _1743 = _1588;
        _1744 = _1587;
        _1745 = _1602;
        _1746 = _1601;
        _1747 = _1600;
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
    }
    else
    {
        _1736 = _1429;
        _1737 = _1429;
        _1738 = _1429;
        _1739 = _1429;
        _1740 = _1429;
        _1741 = _1429;
        _1742 = _1429;
        _1743 = _1429;
        _1744 = _1429;
        _1745 = _1429;
        _1746 = _1429;
        _1747 = _1429;
        _1748 = 0.0;
        _1749 = 0.0;
        _1750 = 0.0;
    }
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1441)) + _1441;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1442)) + _1442;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1443)) + _1443;
    float _1783 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1761, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1761, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1761, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1760));
    float _1804 = _1063 * 0.5;
    float _1805 = _1064 * 0.5;
    float _1806 = _1065 * 0.5;
    float _1807 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1810 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1813 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1847;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1820 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1428, _1432, _1435, _1438));
        float _1824 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1828 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1835 = dot(vec4(cbModelParam._m0[39u]), vec4(_1804, _1805, _1806, 1.0));
        _1847 = dot(vec3(isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1847 = 1.0;
    }
    float _1858;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1849 = dot(vec4(cbModelParam._m0[40u]), vec4(_1804, _1805, _1806, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1862 = (_1858 * cbModelParam._m0[1u].x) + (_1847 * (1.0 - cbModelParam._m0[1u].x));
    float _1872 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _892);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1872 : min(cbModelParam._m0[25u].z, _1872));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1920 = fma(_1127, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1119)) + cbModelParam._m0[13u].w;
        float _1924 = fma(_1127, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1119)) + cbModelParam._m0[14u].w;
        float _1928 = fma(_1127, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1119)) + cbModelParam._m0[15u].w;
        float _1931 = fma(_1065, cbModelParam._m0[13u].z, fma(_1064, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063));
        float _1934 = fma(_1065, cbModelParam._m0[14u].z, fma(_1064, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063));
        float _1937 = fma(_1065, cbModelParam._m0[15u].z, fma(_1064, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063));
        float _1965;
        if (_1931 > 0.0)
        {
            _1965 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1965 = frontier_phi_14_12_ladder;
        }
        float _2167;
        if (_1934 > 0.0)
        {
            _2167 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2167 = frontier_phi_23_19_ladder;
        }
        float _2421;
        if (_1937 > 0.0)
        {
            _2421 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2421 = frontier_phi_35_30_ladder;
        }
        float _2423 = isnan(_2167) ? _1965 : (isnan(_1965) ? _2167 : min(_1965, _2167));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1931) + _1920;
        float _2429 = (_2424 * _1934) + _1924;
        float _2430 = (_2424 * _1937) + _1928;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2431;
        float _2435 = _2431 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 > _2435) || ((_2429 < _2433) || ((_2428 < _2433) || (_2428 > _2435))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2430, cbModelParam._m0[9u].z, fma(_2429, cbModelParam._m0[9u].y, _2428 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2430, cbModelParam._m0[10u].z, fma(_2429, cbModelParam._m0[10u].y, _2428 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2430, cbModelParam._m0[11u].z, fma(_2429, cbModelParam._m0[11u].y, _2428 * cbModelParam._m0[11u].x))), _1873);
            frontier_phi_13_35_ladder = _2558.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2558.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2558.x * cbModelParam._m0[1u].y;
        }
        _1953 = frontier_phi_13_35_ladder_2;
        _1955 = frontier_phi_13_35_ladder_1;
        _1957 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1063, _1064, _1065), _1873);
        _1953 = _1941.x * cbModelParam._m0[1u].y;
        _1955 = _1941.y * cbModelParam._m0[1u].y;
        _1957 = _1941.z * cbModelParam._m0[1u].y;
    }
    float _1961 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _892);
    float _1962 = isnan(_1961) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1961 : min(cbModelParam._m0[25u].w, _1961));
    float _2051;
    float _2053;
    float _2055;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2015 = fma(_1127, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1119)) + cbModelParam._m0[21u].w;
        float _2019 = fma(_1127, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1119)) + cbModelParam._m0[22u].w;
        float _2023 = fma(_1127, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1119)) + cbModelParam._m0[23u].w;
        float _2026 = fma(_1065, cbModelParam._m0[21u].z, fma(_1064, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063));
        float _2029 = fma(_1065, cbModelParam._m0[22u].z, fma(_1064, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063));
        float _2032 = fma(_1065, cbModelParam._m0[23u].z, fma(_1064, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063));
        float _2172;
        if (_2026 > 0.0)
        {
            _2172 = abs((1.0 - _2015) / _2026);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2015 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2172 = frontier_phi_25_21_ladder;
        }
        float _2448;
        if (_2029 > 0.0)
        {
            _2448 = abs((1.0 - _2019) / _2029);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2019 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2448 = frontier_phi_37_32_ladder;
        }
        float _2661;
        if (_2032 > 0.0)
        {
            _2661 = abs((1.0 - _2023) / _2032);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2023 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2661 = frontier_phi_46_43_ladder;
        }
        float _2663 = isnan(_2448) ? _2172 : (isnan(_2172) ? _2448 : min(_2172, _2448));
        float _2664 = isnan(_2661) ? _2663 : (isnan(_2663) ? _2661 : min(_2663, _2661));
        float _2668 = (_2664 * _2026) + _2015;
        float _2669 = (_2664 * _2029) + _2019;
        float _2670 = (_2664 * _2032) + _2023;
        float _2671 = _2664 * 9.9999997473787516355514526367188e-05;
        float _2672 = (-1.0) - _2671;
        float _2674 = _2671 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2670 > _2674) || ((_2670 < _2672) || ((_2669 > _2674) || ((_2669 < _2672) || ((_2668 < _2672) || (_2668 > _2674))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2670, cbModelParam._m0[17u].z, fma(_2669, cbModelParam._m0[17u].y, _2668 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2670, cbModelParam._m0[18u].z, fma(_2669, cbModelParam._m0[18u].y, _2668 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2670, cbModelParam._m0[19u].z, fma(_2669, cbModelParam._m0[19u].y, _2668 * cbModelParam._m0[19u].x))), _1962);
            frontier_phi_22_46_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _2051 = frontier_phi_22_46_ladder_2;
        _2053 = frontier_phi_22_46_ladder_1;
        _2055 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2035 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1063, _1064, _1065), _1962);
        _2051 = _2035.x * cbModelParam._m0[1u].z;
        _2053 = _2035.y * cbModelParam._m0[1u].z;
        _2055 = _2035.z * cbModelParam._m0[1u].z;
    }
    float _2068 = (((_1090 * _1039) + _1091) * _1055) * ((cbModelParam._m0[1u].w * (_2051 - _1953)) + _1953);
    float _2070 = (((_1090 * _1041) + _1091) * _1055) * ((cbModelParam._m0[1u].w * (_2053 - _1955)) + _1955);
    float _2072 = (((_1090 * _1042) + _1091) * _1055) * ((cbModelParam._m0[1u].w * (_2055 - _1957)) + _1957);
    float _2075 = fma(_2072, cbSceneParam._m0[89u].z, fma(_2070, cbSceneParam._m0[89u].y, _2068 * cbSceneParam._m0[89u].x));
    float _2078 = fma(_2072, cbSceneParam._m0[90u].z, fma(_2070, cbSceneParam._m0[90u].y, _2068 * cbSceneParam._m0[90u].x));
    float _2081 = fma(_2072, cbSceneParam._m0[91u].z, fma(_2070, cbSceneParam._m0[91u].y, _2068 * cbSceneParam._m0[91u].x));
    uvec4 _2091 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2093 = _2091.x * 14u;
    uint _2094 = _2093 + 13u;
    float _2101 = _1055 + (-1.0);
    float _2106 = (cbLight._m0[_2094].x * _2101) + 1.0;
    float _2107 = (cbLight._m0[_2094].y * _2101) + 1.0;
    float _2108 = (cbLight._m0[_2094].z * _2101) + 1.0;
    float _2109 = (cbLight._m0[_2094].w * _2101) + 1.0;
    uint _2110 = _2093 + 5u;
    float _2116 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2120 = _2093 + 4u;
    float _2126 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
    uint _2130 = _2093 | 1u;
    float _2141 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_889, _890, _891));
    float _2144 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_889, _890, _891));
    float _4319 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _4330 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2149 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2151 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2158 = ((cbLight._m0[_2110].x * _2116) * _2151) + ((cbLight._m0[_2120].x * _2126) * _2149);
    float _2159 = ((_2116 * cbLight._m0[_2110].y) * _2151) + ((_2126 * cbLight._m0[_2120].y) * _2149);
    float _2160 = ((_2116 * cbLight._m0[_2110].z) * _2151) + ((_2126 * cbLight._m0[_2120].z) * _2149);
    uvec4 _2164 = floatBitsToUint(cbLight._m0[_2093 + 12u]);
    bool _2166 = _2164.x == 0u;
    float _2177;
    float _2179;
    float _2181;
    if (_2166)
    {
        _2177 = _2158;
        _2179 = _2159;
        _2181 = _2160;
    }
    else
    {
        uint _2185 = _2093 + 6u;
        float _2201 = (dot(vec3(cbLight._m0[_2093 + 2u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2202 = _2201 * _2201;
        float _4341 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2203 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2204 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2177 = (((cbLight._m0[_2185].x * 0.3183098733425140380859375) * _2203) * _2204) + _2158;
        _2179 = (((cbLight._m0[_2185].y * 0.3183098733425140380859375) * _2203) * _2204) + _2159;
        _2181 = (((cbLight._m0[_2185].z * 0.3183098733425140380859375) * _2203) * _2204) + _2160;
    }
    bool _2184 = _2164.y == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2184)
    {
        _2222 = _2177;
        _2224 = _2179;
        _2226 = _2181;
    }
    else
    {
        uint _2392 = _2093 + 7u;
        float _2408 = (dot(vec3(cbLight._m0[_2093 + 3u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4357 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2411 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2222 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2177;
        _2224 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2179;
        _2226 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2181;
    }
    uint _2229 = _2093 + 8u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _892) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_2093].x + _969;
    float _2245 = cbLight._m0[_2093].y + _970;
    float _2246 = cbLight._m0[_2093].z + _971;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2093].xyz));
    float _4373 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _2258 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2259 = dot(vec3(_889, _890, _891), vec3(_2251, _2252, _2253));
    float _4395 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2251, _2252, _2253));
    float _4406 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2243 * _2243;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2279 = exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0);
    float _2280 = 0.959999978542327880859375 - _1036;
    float _2282 = 0.959999978542327880859375 - _1037;
    float _2283 = 0.959999978542327880859375 - _1038;
    float _2290 = 1.0 - _2243;
    float _2301 = (0.5 / (((_2258 * ((_2257 * _2290) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2290) + _2243) * _2257))) * _2257;
    float _4417 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2303 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    uint _2314 = _2093 + 9u;
    float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _892) * 0.949999988079071044921875);
    float _2326 = _2325 * _2325;
    float _2327 = cbLight._m0[_2130].x + _969;
    float _2328 = cbLight._m0[_2130].y + _970;
    float _2329 = cbLight._m0[_2130].z + _971;
    float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
    float _2334 = _2333 * _2327;
    float _2335 = _2333 * _2328;
    float _2336 = _2333 * _2329;
    float _2337 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2130].xyz));
    float _4428 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2341 = dot(vec3(_889, _890, _891), vec3(_2334, _2335, _2336));
    float _4439 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2345 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2334, _2335, _2336));
    float _4450 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2349 = _2326 * _2326;
    float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
    float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
    float _2367 = 1.0 - _2326;
    float _2377 = (0.5 / (((_2258 * ((_2340 * _2367) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2367) + _2326) * _2340))) * _2340;
    float _4461 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
    float _2389 = (((((_2360 * _2280) + _1039) * cbLight._m0[_2314].x) * _2379) * _2116) + (((((_2279 * _2280) + _1039) * cbLight._m0[_2229].x) * _2303) * _2126);
    float _2390 = (((((_2360 * _2282) + _1041) * cbLight._m0[_2314].y) * _2379) * _2116) + (((((_2279 * _2282) + _1041) * cbLight._m0[_2229].y) * _2303) * _2126);
    float _2391 = (((((_2360 * _2283) + _1042) * cbLight._m0[_2314].z) * _2379) * _2116) + (((((_2279 * _2283) + _1042) * cbLight._m0[_2229].z) * _2303) * _2126);
    float _2453;
    float _2455;
    float _2457;
    if (_2166)
    {
        _2453 = _2389;
        _2455 = _2390;
        _2457 = _2391;
    }
    else
    {
        uint _2459 = _2093 + 2u;
        uint _2463 = _2093 + 10u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _892) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _969;
        float _2480 = cbLight._m0[_2459].y + _970;
        float _2481 = cbLight._m0[_2459].z + _971;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2459].xyz));
        float _4472 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2493 = dot(vec3(_889, _890, _891), vec3(_2486, _2487, _2488));
        float _4483 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4494 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
        float _2519 = 1.0 - _2478;
        float _2529 = (0.5 / (((_2258 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2519) + _2478) * _2492))) * _2492;
        float _4505 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2453 = (((((_2512 * _2280) + _1039) * cbLight._m0[_2463].x) * _2531) * _2532) + _2389;
        _2455 = (((((_2512 * _2282) + _1041) * cbLight._m0[_2463].y) * _2531) * _2532) + _2390;
        _2457 = (((((_2512 * _2283) + _1042) * cbLight._m0[_2463].z) * _2531) * _2532) + _2391;
    }
    float _2567;
    float _2569;
    float _2571;
    if (_2184)
    {
        _2567 = _2453;
        _2569 = _2455;
        _2571 = _2457;
    }
    else
    {
        uint _2578 = _2093 + 3u;
        uint _2582 = _2093 + 11u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _892) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _969;
        float _2599 = cbLight._m0[_2578].y + _970;
        float _2600 = cbLight._m0[_2578].z + _971;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2578].xyz));
        float _4521 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2612 = dot(vec3(_889, _890, _891), vec3(_2605, _2606, _2607));
        float _4532 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4543 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2638 = 1.0 - _2597;
        float _2648 = (0.5 / (((_2258 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2258 * _2638) + _2597) * _2611))) * _2611;
        float _4554 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2567 = (((((_2631 * _2280) + _1039) * cbLight._m0[_2582].x) * _2650) * _2651) + _2453;
        _2569 = (((((_2631 * _2282) + _1041) * cbLight._m0[_2582].y) * _2650) * _2651) + _2455;
        _2571 = (((((_2631 * _2283) + _1042) * cbLight._m0[_2582].z) * _2650) * _2651) + _2457;
    }
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_2091.y == 0u)
    {
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2726;
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2726;
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2726;
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.x;
        uint _2753 = uint((float(_2741.y) * floor(float(uint(cbSceneParam._m0[85u].y * _978) / _2742))) + floor(float(uint(cbSceneParam._m0[85u].x * _977) / _2742)));
        float _2763 = (log2(_2729 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2764 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        uint _2767 = uint(isnan(14.0) ? _2764 : (isnan(_2764) ? 14.0 : min(_2764, 14.0)));
        uvec4 _2772 = texelFetch(g_lightClusterGridBuffer, int(((_2767 << 2u) + (_2753 << 6u)) >> 2u));
        uint _2773 = _2772.x;
        uint _2774 = _2741.z;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((((1u << ((_2774 >> 4u) & 15u)) + 4294967295u) & _2773) == 0u) || ((_2774 & 240u) == 0u))
        {
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
        }
        else
        {
            float _2875;
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            uint _3025 = 0u;
            uint _3034;
            bool _3035;
            for (;;)
            {
                _3034 = texelFetch(g_lightClassification, int((((_2767 << 5u) + (_2753 << 9u)) + (_3025 << 2u)) >> 2u)).x;
                _3035 = _3034 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3035)
                {
                    frontier_phi_61_pred = _3019;
                    frontier_phi_61_pred_1 = _3024;
                    frontier_phi_61_pred_2 = _3023;
                    frontier_phi_61_pred_3 = _3022;
                    frontier_phi_61_pred_4 = _3021;
                    frontier_phi_61_pred_5 = _3020;
                }
                else
                {
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    uint _3149;
                    _3143 = _3019;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3034;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    for (;;)
                    {
                        uint _3153 = uint(findLSB(_3149)) + (_3025 << 5u);
                        uint _3150 = (_3149 + 4294967295u) & _3149;
                        uint _3155 = _3153 * 48u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 3u)).x));
                        uint _3175 = (_3153 * 48u) + 4u;
                        vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3194 = (_3153 * 48u) + 8u;
                        vec3 _3205 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x));
                        float _3209 = _3169.x - _2727;
                        float _3210 = _3169.y - _2728;
                        float _3211 = _3169.z - _2729;
                        float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                        float _3215 = inversesqrt(_3212);
                        float _3216 = _3215 * _3209;
                        float _3217 = _3215 * _3210;
                        float _3218 = _3215 * _3211;
                        float _3219 = dot(vec3(_996, _999, _1002), vec3(_3216, _3217, _3218));
                        float _3224 = 1.0 - (_3212 * _3169.w);
                        float _4580 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3226 = sqrt(_3212) * _3188.w;
                        float _3229 = 1.39999997615814208984375 / (_3226 + 1.39999997615814208984375);
                        float _3230 = _3229 * _3229;
                        float _3233 = ((1.0 - _3230) * _3219) + _3230;
                        float _3236 = _3226 * _3226;
                        float _3240 = ((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3225) / ((_3236 * 0.699999988079071044921875) + 1.0);
                        float _3244 = (-0.0) - _2727;
                        float _3245 = (-0.0) - _2728;
                        float _3246 = (-0.0) - _2729;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3251 = _3250 * _3244;
                        float _3252 = _3250 * _3245;
                        float _3253 = _3250 * _3246;
                        float _3261 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                        float _3262 = 1.0 - _1071;
                        float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                        float _3270 = _3269 * _3269;
                        float _3271 = _3270 * _3270;
                        float _3272 = _3251 + _3216;
                        float _3273 = _3252 + _3217;
                        float _3274 = _3253 + _3218;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3282 = dot(vec3(_996, _999, _1002), vec3(_3251, _3252, _3253));
                        float _4596 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3286 = dot(vec3(_996, _999, _1002), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                        float _4607 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                        float _3294 = _3229 * _3270;
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3219) + _3295;
                        float _4618 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3299 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3300 = 1.0 - _3270;
                        float _3310 = (0.5 / (((_3299 * ((_3285 * _3300) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3270) * _3285))) * _3299;
                        float _4629 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3321 = (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) / ((_3293 * _3293) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125))) * _3225;
                        _3078 = (_3240 * _3188.x) + _3146;
                        _3079 = (_3240 * _3188.y) + _3147;
                        _3080 = (_3240 * _3188.z) + _3148;
                        _3075 = (_3321 * _3205.x) + _3143;
                        _3076 = (_3321 * _3205.y) + _3144;
                        _3077 = (_3321 * _3205.z) + _3145;
                        if (_3150 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3143 = _3075;
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3150;
                        }
                    }
                    frontier_phi_61_pred = _3075;
                    frontier_phi_61_pred_1 = _3080;
                    frontier_phi_61_pred_2 = _3079;
                    frontier_phi_61_pred_3 = _3078;
                    frontier_phi_61_pred_4 = _3077;
                    frontier_phi_61_pred_5 = _3076;
                }
                _2875 = frontier_phi_61_pred;
                _2885 = frontier_phi_61_pred_1;
                _2883 = frontier_phi_61_pred_2;
                _2881 = frontier_phi_61_pred_3;
                _2879 = frontier_phi_61_pred_4;
                _2877 = frontier_phi_61_pred_5;
                uint _3026 = _3025 + 1u;
                if (_3026 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3019 = _2875;
                    _3020 = _2877;
                    _3021 = _2879;
                    _3022 = _2881;
                    _3023 = _2883;
                    _3024 = _2885;
                    _3025 = _3026;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
        }
        uvec4 _2888 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2889 = _2888.z;
        uint _2891 = (_2889 >> 8u) & 15u;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        if (((4294967295u << _2891) & _2773) == 0u)
        {
            _2987 = _2874;
            _2989 = _2876;
            _2991 = _2878;
            _2993 = _2880;
            _2995 = _2882;
            _2997 = _2884;
        }
        else
        {
            float _3012 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
            float _3013 = _3012 * _2727;
            float _3014 = _3012 * _2728;
            float _3015 = _3012 * _2729;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2891 < ((_2889 >> 12u) & 15u))
            {
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3126 = _2874;
                float _3127 = _2876;
                float _3128 = _2878;
                float _3129 = _2880;
                float _3130 = _2882;
                float _3131 = _2884;
                uint _3132 = _2891;
                uint _3141;
                bool _3142;
                for (;;)
                {
                    _3141 = texelFetch(g_lightClassification, int((((_2767 << 5u) + (_2753 << 9u)) + (_3132 << 2u)) >> 2u)).x;
                    _3142 = _3141 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3142)
                    {
                        frontier_phi_67_pred = _3129;
                        frontier_phi_67_pred_1 = _3130;
                        frontier_phi_67_pred_2 = _3131;
                        frontier_phi_67_pred_3 = _3128;
                        frontier_phi_67_pred_4 = _3127;
                        frontier_phi_67_pred_5 = _3126;
                    }
                    else
                    {
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3339 = _3126;
                        float _3340 = _3127;
                        float _3341 = _3128;
                        float _3342 = _3129;
                        float _3343 = _3130;
                        float _3344 = _3131;
                        uint _3345 = _3141;
                        uint _3346;
                        vec4 _3371;
                        float _3372;
                        vec4 _3387;
                        vec3 _3399;
                        vec4 _3414;
                        vec4 _3429;
                        float _3475;
                        bool _3476;
                        for (;;)
                        {
                            uint _3356 = ((_3132 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3345));
                            _3346 = (_3345 + 4294967295u) & _3345;
                            uint _3358 = _3356 * 40u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3372 = _3371.w;
                            uint _3374 = (_3356 * 40u) + 4u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3356 * 40u) + 8u;
                            _3399 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x));
                            uint _3401 = (_3356 * 40u) + 16u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3356 * 40u) + 20u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3356 * 40u) + 24u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3450 = (_3356 * 40u) + 28u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            _3475 = fma(_2729, _3463.z, fma(_2728, _3463.y, _3463.x * _2727)) + _3463.w;
                            _3476 = !((fma(_2729, _3444.z, fma(_2728, _3444.y, _3444.x * _2727)) + _3444.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3476)
                            {
                                float _3503 = _3371.x - _2727;
                                float _3504 = _3371.y - _2728;
                                float _3505 = _3371.z - _2729;
                                float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                                float _3509 = inversesqrt(_3506);
                                float _3510 = _3509 * _3503;
                                float _3511 = _3509 * _3504;
                                float _3512 = _3509 * _3505;
                                float _3516 = 1.0 - (_3506 / (_3372 * _3372));
                                float _4640 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3521 = sqrt(_3506) * _3387.w;
                                float _3523 = 1.39999997615814208984375 / (_3521 + 1.39999997615814208984375);
                                float _3524 = _3523 * _3523;
                                float _3527 = ((1.0 - _3524) * dot(vec3(_3510, _3511, _3512), vec3(_996, _999, _1002))) + _3524;
                                float _3530 = _3521 * _3521;
                                float _3534 = (fma(_2729, _3414.z, fma(_2728, _3414.y, _3414.x * _2727)) + _3414.w) / _3475;
                                float _3535 = (fma(_2729, _3429.z, fma(_2728, _3429.y, _3429.x * _2727)) + _3429.w) / _3475;
                                float _3539 = 1.0 - dot(vec2(_3534, _3535), vec2(_3534, _3535));
                                float _4656 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3541 = _3540 * (((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3517) / ((_3530 * 0.699999988079071044921875) + 1.0));
                                float _3553 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                                float _3554 = 1.0 - _1071;
                                float _3561 = sqrt(1.0 - ((1.0 - (_3554 * _3554)) * (1.0 - (_3553 * _3553))));
                                float _3562 = _3561 * _3561;
                                float _3563 = _3562 * _3562;
                                float _3564 = _3510 - _3013;
                                float _3565 = _3511 - _3014;
                                float _3566 = _3512 - _3015;
                                float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                                float _3574 = dot(vec3(_996, _999, _1002), vec3((-0.0) - _3013, (-0.0) - _3014, (-0.0) - _3015));
                                float _4667 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3578 = dot(vec3(_996, _999, _1002), vec3(_3570 * _3564, _3570 * _3565, _3570 * _3566));
                                float _4678 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3585 = ((_3581 * _3581) * (_3563 + (-1.0))) + 1.0;
                                float _3586 = _3523 * _3562;
                                float _3587 = _3586 * _3586;
                                float _3593 = ((1.0 - _3587) * dot(vec3(_996, _999, _1002), vec3(_3510, _3511, _3512))) + _3587;
                                float _4689 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3594 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3595 = 1.0 - _3562;
                                float _3605 = (0.5 / (((_3594 * ((_3577 * _3595) + _3562)) + 9.9999999392252902907785028219223e-09) + (((_3594 * _3595) + _3562) * _3577))) * _3594;
                                float _4700 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3615 = (_3540 * _3517) * (((_3563 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3585 * _3585) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3615 * _3399.x;
                                frontier_phi_73_pred_1 = _3615 * _3399.y;
                                frontier_phi_73_pred_2 = _3541 * _3387.z;
                                frontier_phi_73_pred_3 = _3541 * _3387.y;
                                frontier_phi_73_pred_4 = _3541 * _3387.x;
                                frontier_phi_73_pred_5 = _3615 * _3399.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3619 = frontier_phi_73_pred;
                            _3620 = frontier_phi_73_pred_1;
                            _3624 = frontier_phi_73_pred_2;
                            _3623 = frontier_phi_73_pred_3;
                            _3622 = frontier_phi_73_pred_4;
                            _3621 = frontier_phi_73_pred_5;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            _3326 = _3619 + _3339;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            if (_3346 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3346;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3329;
                        frontier_phi_67_pred_1 = _3330;
                        frontier_phi_67_pred_2 = _3331;
                        frontier_phi_67_pred_3 = _3328;
                        frontier_phi_67_pred_4 = _3327;
                        frontier_phi_67_pred_5 = _3326;
                    }
                    _2994 = frontier_phi_67_pred;
                    _2996 = frontier_phi_67_pred_1;
                    _2998 = frontier_phi_67_pred_2;
                    _2992 = frontier_phi_67_pred_3;
                    _2990 = frontier_phi_67_pred_4;
                    _2988 = frontier_phi_67_pred_5;
                    uint _3133 = _3132 + 1u;
                    if (_3133 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3126 = _2988;
                        _3127 = _2990;
                        _3128 = _2992;
                        _3129 = _2994;
                        _3130 = _2996;
                        _3131 = _2998;
                        _3132 = _3133;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2996;
                frontier_phi_55_56_ladder_1 = _2998;
                frontier_phi_55_56_ladder_2 = _2994;
                frontier_phi_55_56_ladder_3 = _2992;
                frontier_phi_55_56_ladder_4 = _2990;
                frontier_phi_55_56_ladder_5 = _2988;
            }
            else
            {
                frontier_phi_55_56_ladder = _2882;
                frontier_phi_55_56_ladder_1 = _2884;
                frontier_phi_55_56_ladder_2 = _2880;
                frontier_phi_55_56_ladder_3 = _2878;
                frontier_phi_55_56_ladder_4 = _2876;
                frontier_phi_55_56_ladder_5 = _2874;
            }
            _2987 = frontier_phi_55_56_ladder_5;
            _2989 = frontier_phi_55_56_ladder_4;
            _2991 = frontier_phi_55_56_ladder_3;
            _2993 = frontier_phi_55_56_ladder_2;
            _2995 = frontier_phi_55_56_ladder;
            _2997 = frontier_phi_55_56_ladder_1;
        }
        float _3002 = isnan(1.0) ? _1055 : (isnan(_1055) ? 1.0 : min(_1055, 1.0));
        _2786 = (_3002 * _2993) + _2222;
        _2788 = (_3002 * _2995) + _2224;
        _2790 = (_3002 * _2997) + _2226;
        _2792 = ((_2987 * _1039) * _3002) + _2567;
        _2794 = ((_2989 * _1041) * _3002) + _2569;
        _2796 = ((_2991 * _1042) * _3002) + _2571;
    }
    else
    {
        _2786 = _2222;
        _2788 = _2224;
        _2790 = _2226;
        _2792 = _2567;
        _2794 = _2569;
        _2796 = _2571;
    }
    float _4716 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4727 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4738 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    uint _2816 = _278 + 6u;
    float _2824 = _977 / cbSceneParam._m0[86u].x;
    float _2825 = _978 / cbSceneParam._m0[86u].y;
    vec4 _2839 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, (log2((isnan(cbSceneParam._m0[77u].w) ? _911 : (isnan(_911) ? cbSceneParam._m0[77u].w : min(_911, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2841 = _2839.x;
    float _2842 = _2839.y;
    float _2843 = _2839.z;
    float _2844 = _2839.w;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    if (_911 > cbSceneParam._m0[78u].w)
    {
        float _2899 = isnan(_911) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _911 : min(cbSceneParam._m0[80u].w, _911));
        float _2900 = _2899 / _911;
        float _2911 = _2900 * _962;
        float _2912 = _963 * _2900;
        float _2913 = (-0.0) - _2912;
        float _2915 = _2900 * _964;
        float _2917 = (cbSceneParam._m0[77u].w * _2913) / _2899;
        float _2918 = _2917 + cbSceneParam._m0[79u].w;
        float _2919 = cbSceneParam._m0[79u].w - _2912;
        float _2925 = sqrt(((_2911 * _2911) + (_2912 * _2912)) + (_2915 * _2915));
        float _2928 = (1.0 - (cbSceneParam._m0[77u].w / _2899)) * _2925;
        float _2933 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2935 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3088;
        if (abs((_2913 - _2917) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3088 = ((((_2918 > 0.0) ? exp2(_2933 * _2918) : (2.0 - exp2(_2935 * _2918))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2928;
        }
        else
        {
            float _3048 = 1.0 / cbSceneParam._m0[80u].x;
            float _3049 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : max(_2918, _2919));
            float _3050 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : min(_2918, _2919));
            float _3059 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : min(_3049, 0.0));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            _3088 = ((abs(_2925 / _2913) * cbSceneParam._m0[80u].y) * ((((_3059 - _3060) * 2.0) - ((exp2(_2933 * (isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0)))) - exp2(_2933 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))))) * _3048)) - ((exp2(_2935 * _3059) - exp2(_2935 * _3060)) * _3048))) + (_2928 * cbSceneParam._m0[80u].z);
        }
        vec4 _3090 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2824, _2825, 1.0), 0.0);
        float _3099 = exp2((_3088 * (-1.44269502162933349609375)) * (1.0 - _3090.w));
        float _3100 = log2(_3099);
        float _3116 = log2(_2844);
        _2937 = (exp2(_3116 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].x)) * _3090.x) / cbSceneParam._m0[78u].x)) + _2841;
        _2939 = (exp2(_3116 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].y)) * _3090.y) / cbSceneParam._m0[78u].y)) + _2842;
        _2941 = (exp2(_3116 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].z)) * _3090.z) / cbSceneParam._m0[78u].z)) + _2843;
        _2943 = _3099 * _2844;
    }
    else
    {
        _2937 = _2841;
        _2939 = _2842;
        _2941 = _2843;
        _2943 = _2844;
    }
    float _2955 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2956 = _2955 == 3.0;
    float _2957 = log2(_2943);
    float _2964 = exp2(_2957 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2786 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1055))) + ((_2792 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1862)) * cbPerFrame._m0[3u].x));
    float _2965 = exp2(_2957 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2788 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1055))) + ((_2794 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1862)) * cbPerFrame._m0[3u].x));
    float _2966 = exp2(_2957 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2790 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1055))) + ((_2796 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1862)) * cbPerFrame._m0[3u].x));
    float _2975 = (_2955 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2975 * (_2956 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2937)));
    SV_Target.y = _2975 * (_2956 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2939)));
    SV_Target.z = _2975 * (_2956 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2941)));
    SV_Target.w = cbInstanceData._m0[_2816].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2816].w;
}


