#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1580;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3904 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3915 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3926 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3937 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _491 = (_484 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _492 = (_484 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _493 = (_484 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3948 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _567 = (_349.x * cbMtdParam._m0[9u].x) * ((_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491);
    float _568 = (_349.y * cbMtdParam._m0[9u].y) * ((_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492);
    float _569 = (_349.z * cbMtdParam._m0[9u].z) * ((_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493);
    float _573 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _567;
    float _576 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _568;
    float _579 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _569;
    float _587 = (((_567 - _573) * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) + _573) * 4.55000019073486328125;
    float _589 = (((_568 - _576) * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) + _576) * 4.55000019073486328125;
    float _591 = (((_569 - _579) * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) + _579) * 4.55000019073486328125;
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _671 = _669.x;
    float _672 = _669.y;
    float _673 = _669.z;
    float _680 = ((_652.x - _671) * _484) + _671;
    float _681 = ((_652.y - _672) * _484) + _672;
    float _682 = ((_652.z - _673) * _484) + _673;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _707 = ((_694.z - _682) * _557) + _682;
    float _710 = ((((_694.x - _680) * _557) + _680) * 2.0) + (-1.0);
    float _711 = ((((_694.y - _681) * _557) + _681) * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3959 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _717 = sqrt(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _756 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _758 = _756.x;
    float _759 = 1.0 - _758;
    float _768 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _771 = ((isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : min(_768, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _780 = (_771 - ((((((_758 - _759) * cbMtdParam._m0[24u].z) + _759) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _771))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3980 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _781 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _788 = (_781 * ((_610.x * cbMtdParam._m0[18u].x) - _587)) + _587;
    float _789 = (_781 * ((_610.y * cbMtdParam._m0[18u].y) - _589)) + _589;
    float _790 = (_781 * ((_610.z * cbMtdParam._m0[18u].z) - _591)) + _591;
    vec4 _802 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _804 = _802.x;
    float _805 = 1.0 - _804;
    float _830 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_804 - _805) * cbMtdParam._m0[24u].w) + _805) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3991 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _831 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _839 = ((((cbMtdParam._m0[10u].x - _788) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _831) + _788;
    float _840 = ((((cbMtdParam._m0[10u].y - _789) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _831) + _789;
    float _841 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _790)) * _831) + _790;
    vec4 _867 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _869 = _867.x;
    float _886 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _869) * _484) + _869;
    float _903 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _886) * _557) + _886;
    float _907 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _903) * cbMtdParam._m0[19u].z) + _903;
    float _909 = _907 - (_907 * _781);
    float _911 = _909 - (_909 * _831);
    float _916 = (((_629.z - _707) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _707;
    float _920 = ((_731.z - _916) * cbMtdParam._m0[19u].w) + _916;
    vec4 _934 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _941 = (_934.x * 2.0) + (-1.0);
    float _942 = (_934.y * 2.0) + (-1.0);
    float _943 = dot(vec2(_941, _942), vec2(_941, _942));
    float _4002 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _951 = (_781 * (_934.z - _920)) + _920;
    float _954 = ((cbMtdParam._m0[23u].x - _951) * _831) + _951;
    vec4 _975 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _981 = (_975.x * 2.0) + (-1.0);
    float _982 = (_975.y * 2.0) + (-1.0);
    float _983 = dot(vec2(_981, _982), vec2(_981, _982));
    float _4013 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _997 = (_710 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_629.x * 2.0) + (-1.0)))) + (((_731.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _998 = (_711 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_629.y * 2.0) + (-1.0)))) + (((_731.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1010 = (((_941 - _997) + (cbMtdParam._m0[21u].x * _997)) * _781) + _997;
    float _1011 = (((_942 - _998) + (cbMtdParam._m0[21u].x * _998)) * _781) + _998;
    float _1012 = (_781 * (sqrt(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) - _717)) + _717;
    float _1023 = (((_981 - _1010) + (_1010 * cbMtdParam._m0[22u].z)) * _831) + _1010;
    float _1024 = (((_982 - _1011) + (_1011 * cbMtdParam._m0[22u].z)) * _831) + _1011;
    float _1025 = ((sqrt(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) - _1012) * _831) + _1012;
    float _1027 = cbMtdParam._m0[22u].x + _731.w;
    float _1030 = fma(_1025, _261 * NORMAL.x, fma(_1024, _268 * TANGENT.x, (_254 * _246) * _1023));
    float _1033 = fma(_1025, _261 * NORMAL.y, fma(_1024, _268 * TANGENT.y, (_254 * _247) * _1023));
    float _1036 = fma(_1025, _261 * NORMAL.z, fma(_1024, _268 * TANGENT.z, (_254 * _248) * _1023));
    float _1040 = inversesqrt(dot(vec3(_1030, _1033, _1036), vec3(_1030, _1033, _1036)));
    float _1041 = _1040 * _1030;
    float _1042 = _1040 * _1033;
    float _1043 = _1040 * _1036;
    float _4024 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _1044 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _4046 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4057 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4068 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4079 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _1049 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1063 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1113 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1103);
    float _1114 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1103);
    float _1115 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1103);
    float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
    float _1120 = _1113 * _1119;
    float _1121 = _1114 * _1119;
    float _1122 = _1115 * _1119;
    float _1128 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1129 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1147 = fma(_1043, cbSceneParam._m0[5u].z, fma(_1042, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1041));
    float _1150 = fma(_1043, cbSceneParam._m0[6u].z, fma(_1042, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1041));
    float _1153 = fma(_1043, cbSceneParam._m0[7u].z, fma(_1042, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1041));
    uint _1167 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1173 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_1167].x;
    float _1174 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_1167].y;
    float _1175 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * cbInstanceData._m0[_1167].z;
    float _4090 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1176 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _1179 = 1.0 - _1049;
    float _1180 = _1176 * _1179;
    float _1181 = _1177 * _1179;
    float _1182 = _1178 * _1179;
    float _1187 = (_1176 + (-0.039999999105930328369140625)) * _1049;
    float _1188 = (_1177 + (-0.039999999105930328369140625)) * _1049;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1049;
    float _1190 = _1187 + 0.039999999105930328369140625;
    float _1192 = _1188 + 0.039999999105930328369140625;
    float _1193 = _1189 + 0.039999999105930328369140625;
    vec4 _1202 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1128, cbSceneParam._m0[86u].y * _1129));
    float _1206 = ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * TEXCOORD_5.w) * _1202.x;
    float _1207 = dot(vec3(_1041, _1042, _1043), vec3(_1120, _1121, _1122));
    float _1210 = _1207 * 2.0;
    float _1214 = (_1210 * _1041) - _1120;
    float _1215 = (_1210 * _1042) - _1121;
    float _1216 = (_1210 * _1043) - _1122;
    float _1220 = abs(dot(vec3(_1120, _1121, _1122), vec3(_1041, _1042, _1043)));
    float _4123 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1222 = sqrt(_1044);
    float _1235 = exp2((_1222 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1222 * 3.0));
    float _1241 = (1.0 - _1235) * ((_1222 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1242 = _1235 * _1222;
    float _1270 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1274 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1278 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1579;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1304 = fma(_1278, cbModelParam._m0[26u].z, fma(_1274, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1270));
        float _1308 = fma(_1278, cbModelParam._m0[27u].z, fma(_1274, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1270));
        float _1312 = fma(_1278, cbModelParam._m0[28u].z, fma(_1274, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1270));
        float _1337 = _1270 + _1041;
        float _1338 = _1274 + _1042;
        float _1339 = _1278 + _1043;
        float _1349 = fma(_1339, cbModelParam._m0[26u].z, fma(_1338, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1337)) - _1304;
        float _1350 = fma(_1339, cbModelParam._m0[27u].z, fma(_1338, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1337)) - _1308;
        float _1351 = fma(_1339, cbModelParam._m0[28u].z, fma(_1338, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1337)) - _1312;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1304 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1308 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[34u].z) + ((((((_1312 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1407 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1373.x + (-0.5));
        float _1409 = _1407 * (_1373.y + (-0.5));
        float _1410 = _1407 * (_1373.z + (-0.5));
        float _1417 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1380.x + (-0.5));
        float _1419 = _1417 * (_1380.y + (-0.5));
        float _1420 = _1417 * (_1380.z + (-0.5));
        float _1427 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1387.x + (-0.5));
        float _1429 = _1427 * (_1387.y + (-0.5));
        float _1430 = _1427 * (_1387.z + (-0.5));
        float _1437 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1394.x + (-0.5));
        float _1439 = _1437 * (_1394.y + (-0.5));
        float _1440 = _1437 * (_1394.z + (-0.5));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = _1408 * 0.5;
        float _1445 = _1418 * 0.5;
        float _1446 = _1428 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1461 = (dot(vec3(_1041, _1042, _1043), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1471 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4171 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1473 + 1.0))) + _1478) * _1441;
        float _1488 = _1409 * 0.5;
        float _1489 = _1419 * 0.5;
        float _1490 = _1429 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_1041, _1042, _1043), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4204 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1515 + 1.0))) + _1520) * _1442;
        float _1530 = _1410 * 0.5;
        float _1531 = _1420 * 0.5;
        float _1532 = _1430 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_1041, _1042, _1043), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4237 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1557 + 1.0))) + _1562) * _1443;
        _1579 = _1410;
        _1581 = _1409;
        _1582 = _1408;
        _1583 = _1420;
        _1584 = _1419;
        _1585 = _1418;
        _1586 = _1430;
        _1587 = _1429;
        _1588 = _1428;
        _1589 = _1443;
        _1590 = _1442;
        _1591 = _1441;
        _1592 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1593 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1594 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1580;
        _1581 = _1580;
        _1582 = _1580;
        _1583 = _1580;
        _1584 = _1580;
        _1585 = _1580;
        _1586 = _1580;
        _1587 = _1580;
        _1588 = _1580;
        _1589 = _1580;
        _1590 = _1580;
        _1591 = _1580;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
    }
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1618 = fma(_1278, cbModelParam._m0[30u].z, fma(_1274, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1270));
        float _1622 = fma(_1278, cbModelParam._m0[31u].z, fma(_1274, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1270));
        float _1626 = fma(_1278, cbModelParam._m0[32u].z, fma(_1274, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1270));
        float _1649 = _1270 + _1041;
        float _1650 = _1274 + _1042;
        float _1651 = _1278 + _1043;
        float _1661 = fma(_1651, cbModelParam._m0[30u].z, fma(_1650, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1649)) - _1618;
        float _1662 = fma(_1651, cbModelParam._m0[31u].z, fma(_1650, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1649)) - _1622;
        float _1663 = fma(_1651, cbModelParam._m0[32u].z, fma(_1650, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1649)) - _1626;
        float _1667 = inversesqrt(dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663)));
        float _1680 = ((_1667 * _1661) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1618 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1681 = ((_1667 * _1662) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1622 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1682 = ((_1667 * _1663) / cbModelParam._m0[35u].z) + ((((((_1626 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1680, _1681, _1682), 0.0);
        vec4 _1691 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1680, _1681, _1682), 0.0);
        vec4 _1698 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1680, _1681, _1682), 0.0);
        vec4 _1705 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1680, _1681, _1682), 0.0);
        float _1717 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1684.x + (-0.5));
        float _1719 = _1717 * (_1684.y + (-0.5));
        float _1720 = _1717 * (_1684.z + (-0.5));
        float _1727 = exp2((_1691.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1691.x + (-0.5));
        float _1729 = _1727 * (_1691.y + (-0.5));
        float _1730 = _1727 * (_1691.z + (-0.5));
        float _1737 = exp2((_1698.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1698.x + (-0.5));
        float _1739 = _1737 * (_1698.y + (-0.5));
        float _1740 = _1737 * (_1698.z + (-0.5));
        float _1747 = exp2((_1705.w + (-0.5)) * 20.0) * 2.0;
        float _1748 = _1747 * (_1705.x + (-0.5));
        float _1749 = _1747 * (_1705.y + (-0.5));
        float _1750 = _1747 * (_1705.z + (-0.5));
        float _1751 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1752 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1753 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1754 = _1718 * 0.5;
        float _1755 = _1728 * 0.5;
        float _1756 = _1738 * 0.5;
        float _1757 = dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756));
        float _1762 = (_1757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1757);
        float _1770 = (dot(vec3(_1041, _1042, _1043), vec3(_1762 * _1754, _1762 * _1755, _1762 * _1756)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1779 = sqrt(((_1755 * _1755) + (_1754 * _1754)) + (_1756 * _1756)) / (_1751 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1781 = _1780 * 2.0;
        float _1785 = (1.0 - _1780) / (_1780 + 1.0);
        float _4300 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1795 = ((((1.0 - _1786) * (_1781 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1781 + 1.0))) + _1786) * _1751;
        float _1796 = _1719 * 0.5;
        float _1797 = _1729 * 0.5;
        float _1798 = _1739 * 0.5;
        float _1799 = dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798));
        float _1804 = (_1799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1799);
        float _1812 = (dot(vec3(_1041, _1042, _1043), vec3(_1804 * _1796, _1804 * _1797, _1804 * _1798)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1821 = sqrt(((_1797 * _1797) + (_1796 * _1796)) + (_1798 * _1798)) / (_1752 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1823 = _1822 * 2.0;
        float _1827 = (1.0 - _1822) / (_1822 + 1.0);
        float _4333 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1837 = ((((1.0 - _1828) * (_1823 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1823 + 1.0))) + _1828) * _1752;
        float _1838 = _1720 * 0.5;
        float _1839 = _1730 * 0.5;
        float _1840 = _1740 * 0.5;
        float _1841 = dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840));
        float _1846 = (_1841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1841);
        float _1854 = (dot(vec3(_1041, _1042, _1043), vec3(_1846 * _1838, _1846 * _1839, _1846 * _1840)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1863 = sqrt(((_1839 * _1839) + (_1838 * _1838)) + (_1840 * _1840)) / (_1753 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1865 = _1864 * 2.0;
        float _1869 = (1.0 - _1864) / (_1864 + 1.0);
        float _4366 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1879 = ((((1.0 - _1870) * (_1865 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1865 + 1.0))) + _1870) * _1753;
        _1887 = _1720;
        _1888 = _1719;
        _1889 = _1718;
        _1890 = _1730;
        _1891 = _1729;
        _1892 = _1728;
        _1893 = _1740;
        _1894 = _1739;
        _1895 = _1738;
        _1896 = _1753;
        _1897 = _1752;
        _1898 = _1751;
        _1899 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)));
        _1900 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)));
        _1901 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)));
    }
    else
    {
        _1887 = _1580;
        _1888 = _1580;
        _1889 = _1580;
        _1890 = _1580;
        _1891 = _1580;
        _1892 = _1580;
        _1893 = _1580;
        _1894 = _1580;
        _1895 = _1580;
        _1896 = _1580;
        _1897 = _1580;
        _1898 = _1580;
        _1899 = 0.0;
        _1900 = 0.0;
        _1901 = 0.0;
    }
    float _1911 = (cbModelParam._m0[1u].x * (_1899 - _1592)) + _1592;
    float _1912 = (cbModelParam._m0[1u].x * (_1900 - _1593)) + _1593;
    float _1913 = (cbModelParam._m0[1u].x * (_1901 - _1594)) + _1594;
    float _1934 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1911 * cbSceneParam._m0[89u].x));
    float _1937 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1911 * cbSceneParam._m0[90u].x));
    float _1940 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1911));
    float _1955 = _1214 * 0.5;
    float _1956 = _1215 * 0.5;
    float _1957 = _1216 * 0.5;
    float _1958 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1889, _1892, _1895, _1898));
    float _1961 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1888, _1891, _1894, _1897));
    float _1964 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1887, _1890, _1893, _1896));
    float _1998;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1971 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1579, _1583, _1586, _1589));
        float _1975 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1581, _1584, _1587, _1590));
        float _1979 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1582, _1585, _1588, _1591));
        float _1986 = dot(vec4(cbModelParam._m0[39u]), vec4(_1955, _1956, _1957, 1.0));
        _1998 = dot(vec3(isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)), isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)), isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1986) ? 0.0 : (isnan(0.0) ? _1986 : max(0.0, _1986))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1998 = 1.0;
    }
    float _2009;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2000 = dot(vec4(cbModelParam._m0[40u]), vec4(_1955, _1956, _1957, 1.0));
        _2009 = dot(vec3(isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)), isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2000) ? 0.0 : (isnan(0.0) ? _2000 : max(0.0, _2000))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2009 = 1.0;
    }
    float _2013 = (_2009 * cbModelParam._m0[1u].x) + (_1998 * (1.0 - cbModelParam._m0[1u].x));
    float _2023 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1044);
    float _2024 = isnan(_2023) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2023 : min(cbModelParam._m0[25u].z, _2023));
    float _2104;
    float _2106;
    float _2108;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2071 = fma(_1278, cbModelParam._m0[13u].z, fma(_1274, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1270)) + cbModelParam._m0[13u].w;
        float _2075 = fma(_1278, cbModelParam._m0[14u].z, fma(_1274, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1270)) + cbModelParam._m0[14u].w;
        float _2079 = fma(_1278, cbModelParam._m0[15u].z, fma(_1274, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1270)) + cbModelParam._m0[15u].w;
        float _2082 = fma(_1216, cbModelParam._m0[13u].z, fma(_1215, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1214));
        float _2085 = fma(_1216, cbModelParam._m0[14u].z, fma(_1215, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1214));
        float _2088 = fma(_1216, cbModelParam._m0[15u].z, fma(_1215, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1214));
        float _2116;
        if (_2082 > 0.0)
        {
            _2116 = abs((1.0 - _2071) / _2082);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2071 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2116 = frontier_phi_14_12_ladder;
        }
        float _2318;
        if (_2085 > 0.0)
        {
            _2318 = abs((1.0 - _2075) / _2085);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2075 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2318 = frontier_phi_23_19_ladder;
        }
        float _2572;
        if (_2088 > 0.0)
        {
            _2572 = abs((1.0 - _2079) / _2088);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2079 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2572 = frontier_phi_35_30_ladder;
        }
        float _2574 = isnan(_2318) ? _2116 : (isnan(_2116) ? _2318 : min(_2116, _2318));
        float _2575 = isnan(_2572) ? _2574 : (isnan(_2574) ? _2572 : min(_2574, _2572));
        float _2579 = (_2575 * _2082) + _2071;
        float _2580 = (_2575 * _2085) + _2075;
        float _2581 = (_2575 * _2088) + _2079;
        float _2582 = _2575 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2582;
        float _2586 = _2582 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 > _2586) || ((_2580 < _2584) || ((_2579 < _2584) || (_2579 > _2586))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2581, cbModelParam._m0[9u].z, fma(_2580, cbModelParam._m0[9u].y, _2579 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2581, cbModelParam._m0[10u].z, fma(_2580, cbModelParam._m0[10u].y, _2579 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2581, cbModelParam._m0[11u].z, fma(_2580, cbModelParam._m0[11u].y, _2579 * cbModelParam._m0[11u].x))), _2024);
            frontier_phi_13_35_ladder = _2709.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2709.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2709.x * cbModelParam._m0[1u].y;
        }
        _2104 = frontier_phi_13_35_ladder_2;
        _2106 = frontier_phi_13_35_ladder_1;
        _2108 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1214, _1215, _1216), _2024);
        _2104 = _2092.x * cbModelParam._m0[1u].y;
        _2106 = _2092.y * cbModelParam._m0[1u].y;
        _2108 = _2092.z * cbModelParam._m0[1u].y;
    }
    float _2112 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1044);
    float _2113 = isnan(_2112) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2112 : min(cbModelParam._m0[25u].w, _2112));
    float _2202;
    float _2204;
    float _2206;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2166 = fma(_1278, cbModelParam._m0[21u].z, fma(_1274, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1270)) + cbModelParam._m0[21u].w;
        float _2170 = fma(_1278, cbModelParam._m0[22u].z, fma(_1274, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1270)) + cbModelParam._m0[22u].w;
        float _2174 = fma(_1278, cbModelParam._m0[23u].z, fma(_1274, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1270)) + cbModelParam._m0[23u].w;
        float _2177 = fma(_1216, cbModelParam._m0[21u].z, fma(_1215, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1214));
        float _2180 = fma(_1216, cbModelParam._m0[22u].z, fma(_1215, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1214));
        float _2183 = fma(_1216, cbModelParam._m0[23u].z, fma(_1215, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1214));
        float _2323;
        if (_2177 > 0.0)
        {
            _2323 = abs((1.0 - _2166) / _2177);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2177 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2166 + 1.0) / _2177);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2323 = frontier_phi_25_21_ladder;
        }
        float _2599;
        if (_2180 > 0.0)
        {
            _2599 = abs((1.0 - _2170) / _2180);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2170 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2599 = frontier_phi_37_32_ladder;
        }
        float _2812;
        if (_2183 > 0.0)
        {
            _2812 = abs((1.0 - _2174) / _2183);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2183 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2174 + 1.0) / _2183);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2812 = frontier_phi_46_43_ladder;
        }
        float _2814 = isnan(_2599) ? _2323 : (isnan(_2323) ? _2599 : min(_2323, _2599));
        float _2815 = isnan(_2812) ? _2814 : (isnan(_2814) ? _2812 : min(_2814, _2812));
        float _2819 = (_2815 * _2177) + _2166;
        float _2820 = (_2815 * _2180) + _2170;
        float _2821 = (_2815 * _2183) + _2174;
        float _2822 = _2815 * 9.9999997473787516355514526367188e-05;
        float _2823 = (-1.0) - _2822;
        float _2825 = _2822 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2821 > _2825) || ((_2821 < _2823) || ((_2820 > _2825) || ((_2820 < _2823) || ((_2819 < _2823) || (_2819 > _2825))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3020 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2821, cbModelParam._m0[17u].z, fma(_2820, cbModelParam._m0[17u].y, _2819 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2821, cbModelParam._m0[18u].z, fma(_2820, cbModelParam._m0[18u].y, _2819 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2821, cbModelParam._m0[19u].z, fma(_2820, cbModelParam._m0[19u].y, _2819 * cbModelParam._m0[19u].x))), _2113);
            frontier_phi_22_46_ladder = _3020.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3020.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3020.x * cbModelParam._m0[1u].z;
        }
        _2202 = frontier_phi_22_46_ladder_2;
        _2204 = frontier_phi_22_46_ladder_1;
        _2206 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2186 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1214, _1215, _1216), _2113);
        _2202 = _2186.x * cbModelParam._m0[1u].z;
        _2204 = _2186.y * cbModelParam._m0[1u].z;
        _2206 = _2186.z * cbModelParam._m0[1u].z;
    }
    float _2219 = (((_1241 * _1190) + _1242) * _1206) * ((cbModelParam._m0[1u].w * (_2202 - _2104)) + _2104);
    float _2221 = (((_1241 * _1192) + _1242) * _1206) * ((cbModelParam._m0[1u].w * (_2204 - _2106)) + _2106);
    float _2223 = (((_1241 * _1193) + _1242) * _1206) * ((cbModelParam._m0[1u].w * (_2206 - _2108)) + _2108);
    float _2226 = fma(_2223, cbSceneParam._m0[89u].z, fma(_2221, cbSceneParam._m0[89u].y, _2219 * cbSceneParam._m0[89u].x));
    float _2229 = fma(_2223, cbSceneParam._m0[90u].z, fma(_2221, cbSceneParam._m0[90u].y, _2219 * cbSceneParam._m0[90u].x));
    float _2232 = fma(_2223, cbSceneParam._m0[91u].z, fma(_2221, cbSceneParam._m0[91u].y, _2219 * cbSceneParam._m0[91u].x));
    uvec4 _2242 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2244 = _2242.x * 14u;
    uint _2245 = _2244 + 13u;
    float _2252 = _1206 + (-1.0);
    float _2257 = (cbLight._m0[_2245].x * _2252) + 1.0;
    float _2258 = (cbLight._m0[_2245].y * _2252) + 1.0;
    float _2259 = (cbLight._m0[_2245].z * _2252) + 1.0;
    float _2260 = (cbLight._m0[_2245].w * _2252) + 1.0;
    uint _2261 = _2244 + 5u;
    float _2267 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2271 = _2244 + 4u;
    float _2277 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2281 = _2244 | 1u;
    float _2292 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_1041, _1042, _1043));
    float _2295 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_1041, _1042, _1043));
    float _4502 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _4513 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2300 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2302 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2309 = ((cbLight._m0[_2261].x * _2267) * _2302) + ((cbLight._m0[_2271].x * _2277) * _2300);
    float _2310 = ((_2267 * cbLight._m0[_2261].y) * _2302) + ((_2277 * cbLight._m0[_2271].y) * _2300);
    float _2311 = ((_2267 * cbLight._m0[_2261].z) * _2302) + ((_2277 * cbLight._m0[_2271].z) * _2300);
    uvec4 _2315 = floatBitsToUint(cbLight._m0[_2244 + 12u]);
    bool _2317 = _2315.x == 0u;
    float _2328;
    float _2330;
    float _2332;
    if (_2317)
    {
        _2328 = _2309;
        _2330 = _2310;
        _2332 = _2311;
    }
    else
    {
        uint _2336 = _2244 + 6u;
        float _2352 = (dot(vec3(cbLight._m0[_2244 + 2u].xyz), vec3(_1041, _1042, _1043)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4524 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2355 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2328 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2309;
        _2330 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2310;
        _2332 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2311;
    }
    bool _2335 = _2315.y == 0u;
    float _2373;
    float _2375;
    float _2377;
    if (_2335)
    {
        _2373 = _2328;
        _2375 = _2330;
        _2377 = _2332;
    }
    else
    {
        uint _2543 = _2244 + 7u;
        float _2559 = (dot(vec3(cbLight._m0[_2244 + 3u].xyz), vec3(_1041, _1042, _1043)) * 0.5) + 0.5;
        float _2560 = _2559 * _2559;
        float _4540 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2561 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2562 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2373 = (((cbLight._m0[_2543].x * 0.3183098733425140380859375) * _2561) * _2562) + _2328;
        _2375 = (((cbLight._m0[_2543].y * 0.3183098733425140380859375) * _2561) * _2562) + _2330;
        _2377 = (((cbLight._m0[_2543].z * 0.3183098733425140380859375) * _2561) * _2562) + _2332;
    }
    uint _2380 = _2244 + 8u;
    float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _1044) * 0.949999988079071044921875);
    float _2394 = _2393 * _2393;
    float _2395 = cbLight._m0[_2244].x + _1120;
    float _2396 = cbLight._m0[_2244].y + _1121;
    float _2397 = cbLight._m0[_2244].z + _1122;
    float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
    float _2402 = _2401 * _2395;
    float _2403 = _2401 * _2396;
    float _2404 = _2401 * _2397;
    float _2405 = dot(vec3(_1041, _1042, _1043), vec3(cbLight._m0[_2244].xyz));
    float _4556 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _4567 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _2409 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2410 = dot(vec3(_1041, _1042, _1043), vec3(_2402, _2403, _2404));
    float _4578 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2414 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2402, _2403, _2404));
    float _4589 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2418 = _2394 * _2394;
    float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
    float _2430 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
    float _2431 = 0.959999978542327880859375 - _1187;
    float _2433 = 0.959999978542327880859375 - _1188;
    float _2434 = 0.959999978542327880859375 - _1189;
    float _2441 = 1.0 - _2394;
    float _2452 = (0.5 / (((_2409 * ((_2408 * _2441) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2409 * _2441) + _2394) * _2408))) * _2408;
    float _4600 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2454 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
    uint _2465 = _2244 + 9u;
    float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _1044) * 0.949999988079071044921875);
    float _2477 = _2476 * _2476;
    float _2478 = cbLight._m0[_2281].x + _1120;
    float _2479 = cbLight._m0[_2281].y + _1121;
    float _2480 = cbLight._m0[_2281].z + _1122;
    float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
    float _2485 = _2484 * _2478;
    float _2486 = _2484 * _2479;
    float _2487 = _2484 * _2480;
    float _2488 = dot(vec3(_1041, _1042, _1043), vec3(cbLight._m0[_2281].xyz));
    float _4611 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2492 = dot(vec3(_1041, _1042, _1043), vec3(_2485, _2486, _2487));
    float _4622 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2496 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2485, _2486, _2487));
    float _4633 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2500 = _2477 * _2477;
    float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
    float _2511 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
    float _2518 = 1.0 - _2477;
    float _2528 = (0.5 / (((_2409 * ((_2491 * _2518) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2409 * _2518) + _2477) * _2491))) * _2491;
    float _4644 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2530 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
    float _2540 = (((((_2511 * _2431) + _1190) * cbLight._m0[_2465].x) * _2530) * _2267) + (((((_2430 * _2431) + _1190) * cbLight._m0[_2380].x) * _2454) * _2277);
    float _2541 = (((((_2511 * _2433) + _1192) * cbLight._m0[_2465].y) * _2530) * _2267) + (((((_2430 * _2433) + _1192) * cbLight._m0[_2380].y) * _2454) * _2277);
    float _2542 = (((((_2511 * _2434) + _1193) * cbLight._m0[_2465].z) * _2530) * _2267) + (((((_2430 * _2434) + _1193) * cbLight._m0[_2380].z) * _2454) * _2277);
    float _2604;
    float _2606;
    float _2608;
    if (_2317)
    {
        _2604 = _2540;
        _2606 = _2541;
        _2608 = _2542;
    }
    else
    {
        uint _2610 = _2244 + 2u;
        uint _2614 = _2244 + 10u;
        float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2610].w)) * _1044) * 0.949999988079071044921875);
        float _2629 = _2628 * _2628;
        float _2630 = cbLight._m0[_2610].x + _1120;
        float _2631 = cbLight._m0[_2610].y + _1121;
        float _2632 = cbLight._m0[_2610].z + _1122;
        float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
        float _2637 = _2636 * _2630;
        float _2638 = _2636 * _2631;
        float _2639 = _2636 * _2632;
        float _2640 = dot(vec3(_1041, _1042, _1043), vec3(cbLight._m0[_2610].xyz));
        float _4655 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2644 = dot(vec3(_1041, _1042, _1043), vec3(_2637, _2638, _2639));
        float _4666 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2648 = dot(vec3(cbLight._m0[_2610].xyz), vec3(_2637, _2638, _2639));
        float _4677 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2652 = _2629 * _2629;
        float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
        float _2663 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2670 = 1.0 - _2629;
        float _2680 = (0.5 / (((_2409 * ((_2643 * _2670) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2409 * _2670) + _2629) * _2643))) * _2643;
        float _4688 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2604 = (((((_2663 * _2431) + _1190) * cbLight._m0[_2614].x) * _2682) * _2683) + _2540;
        _2606 = (((((_2663 * _2433) + _1192) * cbLight._m0[_2614].y) * _2682) * _2683) + _2541;
        _2608 = (((((_2663 * _2434) + _1193) * cbLight._m0[_2614].z) * _2682) * _2683) + _2542;
    }
    float _2718;
    float _2720;
    float _2722;
    if (_2335)
    {
        _2718 = _2604;
        _2720 = _2606;
        _2722 = _2608;
    }
    else
    {
        uint _2729 = _2244 + 3u;
        uint _2733 = _2244 + 11u;
        float _2747 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2729].w)) * _1044) * 0.949999988079071044921875);
        float _2748 = _2747 * _2747;
        float _2749 = cbLight._m0[_2729].x + _1120;
        float _2750 = cbLight._m0[_2729].y + _1121;
        float _2751 = cbLight._m0[_2729].z + _1122;
        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
        float _2756 = _2755 * _2749;
        float _2757 = _2755 * _2750;
        float _2758 = _2755 * _2751;
        float _2759 = dot(vec3(_1041, _1042, _1043), vec3(cbLight._m0[_2729].xyz));
        float _4704 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2763 = dot(vec3(_1041, _1042, _1043), vec3(_2756, _2757, _2758));
        float _4715 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2767 = dot(vec3(cbLight._m0[_2729].xyz), vec3(_2756, _2757, _2758));
        float _4726 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2771 = _2748 * _2748;
        float _2775 = ((_2766 * _2766) * (_2771 + (-1.0))) + 1.0;
        float _2782 = exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0);
        float _2789 = 1.0 - _2748;
        float _2799 = (0.5 / (((_2409 * ((_2762 * _2789) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2409 * _2789) + _2748) * _2762))) * _2762;
        float _4737 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2801 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2771 / ((_2775 * _2775) * 3.141590118408203125));
        float _2802 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2718 = (((((_2782 * _2431) + _1190) * cbLight._m0[_2733].x) * _2801) * _2802) + _2604;
        _2720 = (((((_2782 * _2433) + _1192) * cbLight._m0[_2733].y) * _2801) * _2802) + _2606;
        _2722 = (((((_2782 * _2434) + _1193) * cbLight._m0[_2733].z) * _2801) * _2802) + _2608;
    }
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_2242.y == 0u)
    {
        float _2877 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2878 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2877;
        float _2879 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2877;
        float _2880 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2877;
        uvec4 _2892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2893 = _2892.x;
        uint _2904 = uint((float(_2892.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1129) / _2893))) + floor(float(uint(cbSceneParam._m0[85u].x * _1128) / _2893)));
        float _2914 = (log2(_2880 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2915 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        uint _2918 = uint(isnan(14.0) ? _2915 : (isnan(_2915) ? 14.0 : min(_2915, 14.0)));
        uvec4 _2923 = texelFetch(g_lightClusterGridBuffer, int(((_2918 << 2u) + (_2904 << 6u)) >> 2u));
        uint _2924 = _2923.x;
        uint _2925 = _2892.z;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        if (((((1u << ((_2925 >> 4u) & 15u)) + 4294967295u) & _2924) == 0u) || ((_2925 & 240u) == 0u))
        {
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
        }
        else
        {
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            uint _3176 = 0u;
            uint _3185;
            bool _3186;
            for (;;)
            {
                _3185 = texelFetch(g_lightClassification, int((((_2918 << 5u) + (_2904 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                _3186 = _3185 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3186)
                {
                    frontier_phi_61_pred = _3170;
                    frontier_phi_61_pred_1 = _3175;
                    frontier_phi_61_pred_2 = _3174;
                    frontier_phi_61_pred_3 = _3173;
                    frontier_phi_61_pred_4 = _3172;
                    frontier_phi_61_pred_5 = _3171;
                }
                else
                {
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    uint _3300;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3185;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    for (;;)
                    {
                        uint _3304 = uint(findLSB(_3300)) + (_3176 << 5u);
                        uint _3301 = (_3300 + 4294967295u) & _3300;
                        uint _3306 = _3304 * 48u;
                        vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3326 = (_3304 * 48u) + 4u;
                        vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 3u)).x));
                        uint _3345 = (_3304 * 48u) + 8u;
                        vec3 _3356 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3345)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 2u)).x));
                        float _3360 = _3320.x - _2878;
                        float _3361 = _3320.y - _2879;
                        float _3362 = _3320.z - _2880;
                        float _3363 = dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362));
                        float _3366 = inversesqrt(_3363);
                        float _3367 = _3366 * _3360;
                        float _3368 = _3366 * _3361;
                        float _3369 = _3366 * _3362;
                        float _3370 = dot(vec3(_1147, _1150, _1153), vec3(_3367, _3368, _3369));
                        float _3375 = 1.0 - (_3363 * _3320.w);
                        float _4763 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3376 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3377 = sqrt(_3363) * _3339.w;
                        float _3380 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                        float _3381 = _3380 * _3380;
                        float _3384 = ((1.0 - _3381) * _3370) + _3381;
                        float _3387 = _3377 * _3377;
                        float _3391 = ((isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))) * _3376) / ((_3387 * 0.699999988079071044921875) + 1.0);
                        float _3395 = (-0.0) - _2878;
                        float _3396 = (-0.0) - _2879;
                        float _3397 = (-0.0) - _2880;
                        float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3412 = exp2(log2(1.0 / ((_3387 * 3.5) + 5.0)) * 0.25);
                        float _3413 = 1.0 - _1222;
                        float _3420 = sqrt(1.0 - ((1.0 - (_3413 * _3413)) * (1.0 - (_3412 * _3412))));
                        float _3421 = _3420 * _3420;
                        float _3422 = _3421 * _3421;
                        float _3423 = _3402 + _3367;
                        float _3424 = _3403 + _3368;
                        float _3425 = _3404 + _3369;
                        float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                        float _3433 = dot(vec3(_1147, _1150, _1153), vec3(_3402, _3403, _3404));
                        float _4779 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3436 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3437 = dot(vec3(_1147, _1150, _1153), vec3(_3429 * _3423, _3429 * _3424, _3429 * _3425));
                        float _4790 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3444 = ((_3440 * _3440) * (_3422 + (-1.0))) + 1.0;
                        float _3445 = _3380 * _3421;
                        float _3446 = _3445 * _3445;
                        float _3449 = ((1.0 - _3446) * _3370) + _3446;
                        float _4801 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3450 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3451 = 1.0 - _3421;
                        float _3461 = (0.5 / (((_3450 * ((_3436 * _3451) + _3421)) + 9.9999999392252902907785028219223e-09) + (((_3450 * _3451) + _3421) * _3436))) * _3450;
                        float _4812 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3472 = (((_3422 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3444 * _3444) * ((_3387 * 2.1991131305694580078125) + 3.141590118408203125))) * _3376;
                        _3229 = (_3391 * _3339.x) + _3297;
                        _3230 = (_3391 * _3339.y) + _3298;
                        _3231 = (_3391 * _3339.z) + _3299;
                        _3226 = (_3472 * _3356.x) + _3294;
                        _3227 = (_3472 * _3356.y) + _3295;
                        _3228 = (_3472 * _3356.z) + _3296;
                        if (_3301 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3301;
                        }
                    }
                    frontier_phi_61_pred = _3226;
                    frontier_phi_61_pred_1 = _3231;
                    frontier_phi_61_pred_2 = _3230;
                    frontier_phi_61_pred_3 = _3229;
                    frontier_phi_61_pred_4 = _3228;
                    frontier_phi_61_pred_5 = _3227;
                }
                _3026 = frontier_phi_61_pred;
                _3036 = frontier_phi_61_pred_1;
                _3034 = frontier_phi_61_pred_2;
                _3032 = frontier_phi_61_pred_3;
                _3030 = frontier_phi_61_pred_4;
                _3028 = frontier_phi_61_pred_5;
                uint _3177 = _3176 + 1u;
                if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3170 = _3026;
                    _3171 = _3028;
                    _3172 = _3030;
                    _3173 = _3032;
                    _3174 = _3034;
                    _3175 = _3036;
                    _3176 = _3177;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
        }
        uvec4 _3039 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3040 = _3039.z;
        uint _3042 = (_3040 >> 8u) & 15u;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((4294967295u << _3042) & _2924) == 0u)
        {
            _3138 = _3025;
            _3140 = _3027;
            _3142 = _3029;
            _3144 = _3031;
            _3146 = _3033;
            _3148 = _3035;
        }
        else
        {
            float _3163 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
            float _3164 = _3163 * _2878;
            float _3165 = _3163 * _2879;
            float _3166 = _3163 * _2880;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3042 < ((_3040 >> 12u) & 15u))
            {
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3277 = _3025;
                float _3278 = _3027;
                float _3279 = _3029;
                float _3280 = _3031;
                float _3281 = _3033;
                float _3282 = _3035;
                uint _3283 = _3042;
                uint _3292;
                bool _3293;
                for (;;)
                {
                    _3292 = texelFetch(g_lightClassification, int((((_2918 << 5u) + (_2904 << 9u)) + (_3283 << 2u)) >> 2u)).x;
                    _3293 = _3292 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3293)
                    {
                        frontier_phi_67_pred = _3280;
                        frontier_phi_67_pred_1 = _3281;
                        frontier_phi_67_pred_2 = _3282;
                        frontier_phi_67_pred_3 = _3279;
                        frontier_phi_67_pred_4 = _3278;
                        frontier_phi_67_pred_5 = _3277;
                    }
                    else
                    {
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3490 = _3277;
                        float _3491 = _3278;
                        float _3492 = _3279;
                        float _3493 = _3280;
                        float _3494 = _3281;
                        float _3495 = _3282;
                        uint _3496 = _3292;
                        uint _3497;
                        vec4 _3522;
                        float _3523;
                        vec4 _3538;
                        vec3 _3550;
                        vec4 _3565;
                        vec4 _3580;
                        float _3626;
                        bool _3627;
                        for (;;)
                        {
                            uint _3507 = ((_3283 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3496));
                            _3497 = (_3496 + 4294967295u) & _3496;
                            uint _3509 = _3507 * 40u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3523 = _3522.w;
                            uint _3525 = (_3507 * 40u) + 4u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3507 * 40u) + 8u;
                            _3550 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x));
                            uint _3552 = (_3507 * 40u) + 16u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3507 * 40u) + 20u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3507 * 40u) + 24u;
                            vec4 _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3601 = (_3507 * 40u) + 28u;
                            vec4 _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            _3626 = fma(_2880, _3614.z, fma(_2879, _3614.y, _3614.x * _2878)) + _3614.w;
                            _3627 = !((fma(_2880, _3595.z, fma(_2879, _3595.y, _3595.x * _2878)) + _3595.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3627)
                            {
                                float _3654 = _3522.x - _2878;
                                float _3655 = _3522.y - _2879;
                                float _3656 = _3522.z - _2880;
                                float _3657 = dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656));
                                float _3660 = inversesqrt(_3657);
                                float _3661 = _3660 * _3654;
                                float _3662 = _3660 * _3655;
                                float _3663 = _3660 * _3656;
                                float _3667 = 1.0 - (_3657 / (_3523 * _3523));
                                float _4823 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3672 = sqrt(_3657) * _3538.w;
                                float _3674 = 1.39999997615814208984375 / (_3672 + 1.39999997615814208984375);
                                float _3675 = _3674 * _3674;
                                float _3678 = ((1.0 - _3675) * dot(vec3(_3661, _3662, _3663), vec3(_1147, _1150, _1153))) + _3675;
                                float _3681 = _3672 * _3672;
                                float _3685 = (fma(_2880, _3565.z, fma(_2879, _3565.y, _3565.x * _2878)) + _3565.w) / _3626;
                                float _3686 = (fma(_2880, _3580.z, fma(_2879, _3580.y, _3580.x * _2878)) + _3580.w) / _3626;
                                float _3690 = 1.0 - dot(vec2(_3685, _3686), vec2(_3685, _3686));
                                float _4839 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3692 = _3691 * (((isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0))) * _3668) / ((_3681 * 0.699999988079071044921875) + 1.0));
                                float _3704 = exp2(log2(1.0 / ((_3681 * 3.5) + 5.0)) * 0.25);
                                float _3705 = 1.0 - _1222;
                                float _3712 = sqrt(1.0 - ((1.0 - (_3705 * _3705)) * (1.0 - (_3704 * _3704))));
                                float _3713 = _3712 * _3712;
                                float _3714 = _3713 * _3713;
                                float _3715 = _3661 - _3164;
                                float _3716 = _3662 - _3165;
                                float _3717 = _3663 - _3166;
                                float _3721 = inversesqrt(dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717)));
                                float _3725 = dot(vec3(_1147, _1150, _1153), vec3((-0.0) - _3164, (-0.0) - _3165, (-0.0) - _3166));
                                float _4850 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3728 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3729 = dot(vec3(_1147, _1150, _1153), vec3(_3721 * _3715, _3721 * _3716, _3721 * _3717));
                                float _4861 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3732 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3736 = ((_3732 * _3732) * (_3714 + (-1.0))) + 1.0;
                                float _3737 = _3674 * _3713;
                                float _3738 = _3737 * _3737;
                                float _3744 = ((1.0 - _3738) * dot(vec3(_1147, _1150, _1153), vec3(_3661, _3662, _3663))) + _3738;
                                float _4872 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3745 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3746 = 1.0 - _3713;
                                float _3756 = (0.5 / (((_3745 * ((_3728 * _3746) + _3713)) + 9.9999999392252902907785028219223e-09) + (((_3745 * _3746) + _3713) * _3728))) * _3745;
                                float _4883 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3766 = (_3691 * _3668) * (((_3714 * 3.1415927410125732421875) * (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) / ((_3736 * _3736) * ((_3681 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3766 * _3550.x;
                                frontier_phi_73_pred_1 = _3766 * _3550.y;
                                frontier_phi_73_pred_2 = _3692 * _3538.z;
                                frontier_phi_73_pred_3 = _3692 * _3538.y;
                                frontier_phi_73_pred_4 = _3692 * _3538.x;
                                frontier_phi_73_pred_5 = _3766 * _3550.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3770 = frontier_phi_73_pred;
                            _3771 = frontier_phi_73_pred_1;
                            _3775 = frontier_phi_73_pred_2;
                            _3774 = frontier_phi_73_pred_3;
                            _3773 = frontier_phi_73_pred_4;
                            _3772 = frontier_phi_73_pred_5;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            if (_3497 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3497;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3480;
                        frontier_phi_67_pred_1 = _3481;
                        frontier_phi_67_pred_2 = _3482;
                        frontier_phi_67_pred_3 = _3479;
                        frontier_phi_67_pred_4 = _3478;
                        frontier_phi_67_pred_5 = _3477;
                    }
                    _3145 = frontier_phi_67_pred;
                    _3147 = frontier_phi_67_pred_1;
                    _3149 = frontier_phi_67_pred_2;
                    _3143 = frontier_phi_67_pred_3;
                    _3141 = frontier_phi_67_pred_4;
                    _3139 = frontier_phi_67_pred_5;
                    uint _3284 = _3283 + 1u;
                    if (_3284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3277 = _3139;
                        _3278 = _3141;
                        _3279 = _3143;
                        _3280 = _3145;
                        _3281 = _3147;
                        _3282 = _3149;
                        _3283 = _3284;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3147;
                frontier_phi_55_56_ladder_1 = _3149;
                frontier_phi_55_56_ladder_2 = _3145;
                frontier_phi_55_56_ladder_3 = _3143;
                frontier_phi_55_56_ladder_4 = _3141;
                frontier_phi_55_56_ladder_5 = _3139;
            }
            else
            {
                frontier_phi_55_56_ladder = _3033;
                frontier_phi_55_56_ladder_1 = _3035;
                frontier_phi_55_56_ladder_2 = _3031;
                frontier_phi_55_56_ladder_3 = _3029;
                frontier_phi_55_56_ladder_4 = _3027;
                frontier_phi_55_56_ladder_5 = _3025;
            }
            _3138 = frontier_phi_55_56_ladder_5;
            _3140 = frontier_phi_55_56_ladder_4;
            _3142 = frontier_phi_55_56_ladder_3;
            _3144 = frontier_phi_55_56_ladder_2;
            _3146 = frontier_phi_55_56_ladder;
            _3148 = frontier_phi_55_56_ladder_1;
        }
        float _3153 = isnan(1.0) ? _1206 : (isnan(_1206) ? 1.0 : min(_1206, 1.0));
        _2937 = (_3153 * _3144) + _2373;
        _2939 = (_3153 * _3146) + _2375;
        _2941 = (_3153 * _3148) + _2377;
        _2943 = ((_3138 * _1190) * _3153) + _2718;
        _2945 = ((_3140 * _1192) * _3153) + _2720;
        _2947 = ((_3142 * _1193) * _3153) + _2722;
    }
    else
    {
        _2937 = _2373;
        _2939 = _2375;
        _2941 = _2377;
        _2943 = _2718;
        _2945 = _2720;
        _2947 = _2722;
    }
    float _4899 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _4910 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _4921 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    uint _2967 = _293 + 6u;
    float _2975 = _1128 / cbSceneParam._m0[86u].x;
    float _2976 = _1129 / cbSceneParam._m0[86u].y;
    vec4 _2990 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2975, _2976, (log2((isnan(cbSceneParam._m0[77u].w) ? _1063 : (isnan(_1063) ? cbSceneParam._m0[77u].w : min(_1063, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2992 = _2990.x;
    float _2993 = _2990.y;
    float _2994 = _2990.z;
    float _2995 = _2990.w;
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    if (_1063 > cbSceneParam._m0[78u].w)
    {
        float _3050 = isnan(_1063) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1063 : min(cbSceneParam._m0[80u].w, _1063));
        float _3051 = _3050 / _1063;
        float _3062 = _3051 * _1113;
        float _3063 = _1114 * _3051;
        float _3064 = (-0.0) - _3063;
        float _3066 = _3051 * _1115;
        float _3068 = (cbSceneParam._m0[77u].w * _3064) / _3050;
        float _3069 = _3068 + cbSceneParam._m0[79u].w;
        float _3070 = cbSceneParam._m0[79u].w - _3063;
        float _3076 = sqrt(((_3062 * _3062) + (_3063 * _3063)) + (_3066 * _3066));
        float _3079 = (1.0 - (cbSceneParam._m0[77u].w / _3050)) * _3076;
        float _3084 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3086 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3239;
        if (abs((_3064 - _3068) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3239 = ((((_3069 > 0.0) ? exp2(_3084 * _3069) : (2.0 - exp2(_3086 * _3069))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3079;
        }
        else
        {
            float _3199 = 1.0 / cbSceneParam._m0[80u].x;
            float _3200 = isnan(_3070) ? _3069 : (isnan(_3069) ? _3070 : max(_3069, _3070));
            float _3201 = isnan(_3070) ? _3069 : (isnan(_3069) ? _3070 : min(_3069, _3070));
            float _3210 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : min(_3200, 0.0));
            float _3211 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : min(_3201, 0.0));
            _3239 = ((abs(_3076 / _3064) * cbSceneParam._m0[80u].y) * ((((_3210 - _3211) * 2.0) - ((exp2(_3084 * (isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0)))) - exp2(_3084 * (isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))))) * _3199)) - ((exp2(_3086 * _3210) - exp2(_3086 * _3211)) * _3199))) + (_3079 * cbSceneParam._m0[80u].z);
        }
        vec4 _3241 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2975, _2976, 1.0), 0.0);
        float _3250 = exp2((_3239 * (-1.44269502162933349609375)) * (1.0 - _3241.w));
        float _3251 = log2(_3250);
        float _3267 = log2(_2995);
        _3088 = (exp2(_3267 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].x)) * _3241.x) / cbSceneParam._m0[78u].x)) + _2992;
        _3090 = (exp2(_3267 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].y)) * _3241.y) / cbSceneParam._m0[78u].y)) + _2993;
        _3092 = (exp2(_3267 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].z)) * _3241.z) / cbSceneParam._m0[78u].z)) + _2994;
        _3094 = _3250 * _2995;
    }
    else
    {
        _3088 = _2992;
        _3090 = _2993;
        _3092 = _2994;
        _3094 = _2995;
    }
    float _3106 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3107 = _3106 == 3.0;
    float _3108 = log2(_3094);
    float _3115 = exp2(_3108 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2937 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1206))) + ((_2943 + ((isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0))) * _2013)) * cbPerFrame._m0[3u].x));
    float _3116 = exp2(_3108 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2939 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1206))) + ((_2945 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2013)) * cbPerFrame._m0[3u].x));
    float _3117 = exp2(_3108 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2941 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1206))) + ((_2947 + ((isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0))) * _2013)) * cbPerFrame._m0[3u].x));
    float _3126 = (_3106 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3126 * (_3107 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3088)));
    SV_Target.y = _3126 * (_3107 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3090)));
    SV_Target.z = _3126 * (_3107 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3092)));
    SV_Target.w = cbInstanceData._m0[_2967].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2967].w;
}


