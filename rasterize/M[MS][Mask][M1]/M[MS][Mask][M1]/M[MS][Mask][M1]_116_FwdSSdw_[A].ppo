#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1602;
float _4004;
float _4005;
float _4006;
float _4007;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _313.x * cbMtdParam._m0[11u].x;
    float _320 = _313.y * cbMtdParam._m0[11u].y;
    float _321 = _313.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _359.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4016 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _437 = (_430 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _438 = (_430 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _439 = (_430 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _359.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[23u].w) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4027 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _510 = (_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437;
    float _511 = (_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438;
    float _512 = (_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _550 = _548.x;
    float _560 = dot(vec4(_550, _548.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _572 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _359.z) * 2.0) - ((((_550 - _560) * cbMtdParam._m0[23u].w) + _560) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4038 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _580 = (_573 * ((_531.x * cbMtdParam._m0[14u].x) - _510)) + _510;
    float _581 = (_573 * ((_531.y * cbMtdParam._m0[14u].y) - _511)) + _511;
    float _582 = (_573 * ((_531.z * cbMtdParam._m0[14u].z) - _512)) + _512;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    float _628 = ((_600.x - _619) * _430) + _619;
    float _629 = ((_600.y - _620) * _430) + _620;
    float _630 = ((_600.z - _621) * _430) + _621;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _653 = ((_642.x - _628) * _503) + _628;
    float _654 = ((_642.y - _629) * _503) + _629;
    float _655 = ((_642.z - _630) * _503) + _630;
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _680 = ((_667.z - _655) * _573) + _655;
    float _683 = ((((_667.x - _653) * _573) + _653) * 2.0) + (-1.0);
    float _685 = ((((_667.y - _654) * _573) + _654) * 2.0) + (-1.0);
    float _686 = dot(vec2(_683, _685), vec2(_683, _685));
    float _4049 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _691 = sqrt(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _732 = _730.x;
    float _733 = 1.0 - _732;
    float _741 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _744 = ((isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : min(_741, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _753 = (_744 - ((((((_732 - _733) * cbMtdParam._m0[24u].z) + _733) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _744))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4070 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _761 = (_754 * (cbMtdParam._m0[17u].x - _580)) + _580;
    float _762 = (_754 * (cbMtdParam._m0[17u].y - _581)) + _581;
    float _763 = (_754 * (cbMtdParam._m0[17u].z - _582)) + _582;
    vec4 _775 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _777 = _775.x;
    float _778 = 1.0 - _777;
    float _803 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_777 - _778) * cbMtdParam._m0[24u].w) + _778) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4081 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _804 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _812 = ((((cbMtdParam._m0[10u].x - _761) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _804) + _761;
    float _813 = ((((cbMtdParam._m0[10u].y - _762) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _804) + _762;
    float _814 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _763)) * _804) + _763;
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _842 = _840.x;
    float _860 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _842) * _430) + _842;
    float _877 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _860) * _503) + _860;
    float _894 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _877) * _573) + _877;
    float _898 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _894) * cbMtdParam._m0[19u].z) + _894;
    float _900 = _898 - (_898 * _754);
    float _902 = _900 - (_900 * _804);
    float _906 = (cbMtdParam._m0[19u].w * (_705.z - _680)) + _680;
    vec4 _920 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _927 = (_920.x * 2.0) + (-1.0);
    float _928 = (_920.y * 2.0) + (-1.0);
    float _929 = dot(vec2(_927, _928), vec2(_927, _928));
    float _4092 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _937 = (_754 * (_920.z - _906)) + _906;
    float _940 = ((cbMtdParam._m0[23u].x - _937) * _804) + _937;
    vec4 _963 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _969 = (_963.x * 2.0) + (-1.0);
    float _970 = (_963.y * 2.0) + (-1.0);
    float _971 = dot(vec2(_969, _970), vec2(_969, _970));
    float _4103 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _979 = (((_705.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _683;
    float _980 = (((_705.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _685;
    float _992 = (((_927 - _979) + (cbMtdParam._m0[21u].x * _979)) * _754) + _979;
    float _993 = (((_928 - _980) + (cbMtdParam._m0[21u].x * _980)) * _754) + _980;
    float _994 = (_754 * (sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) - _691)) + _691;
    float _1005 = (((_969 - _992) + (_992 * cbMtdParam._m0[22u].z)) * _804) + _992;
    float _1006 = (((_970 - _993) + (_993 * cbMtdParam._m0[22u].z)) * _804) + _993;
    float _1007 = ((sqrt(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) - _994) * _804) + _994;
    float _1009 = cbMtdParam._m0[22u].x + _705.w;
    float _1012 = fma(_1007, _260 * NORMAL.x, fma(_1006, _267 * TANGENT.x, (_253 * _245) * _1005));
    float _1015 = fma(_1007, _260 * NORMAL.y, fma(_1006, _267 * TANGENT.y, (_253 * _246) * _1005));
    float _1018 = fma(_1007, _260 * NORMAL.z, fma(_1006, _267 * TANGENT.z, (_253 * _247) * _1005));
    float _1022 = inversesqrt(dot(vec3(_1012, _1015, _1018), vec3(_1012, _1015, _1018)));
    float _1023 = _1022 * _1012;
    float _1024 = _1022 * _1015;
    float _1025 = _1022 * _1018;
    float _4114 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _1026 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _4136 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4147 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4158 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4169 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _1031 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _1045 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1095 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1085);
    float _1096 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1085);
    float _1097 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1085);
    float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
    float _1102 = _1095 * _1101;
    float _1103 = _1096 * _1101;
    float _1104 = _1097 * _1101;
    vec4 _1109 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1111 = _1109.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1283 = sqrt(((_1095 * _1095) + (_1096 * _1096)) + (_1097 * _1097));
        float _1289 = (cbMatDynParam._m0[5u].x * _1283) + cbMatDynParam._m0[5u].y;
        float _4180 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1294 = (cbMatDynParam._m0[5u].z * _1283) + cbMatDynParam._m0[5u].w;
        float _4191 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) - _1290)) + _1290) < ((_1111 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1122 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1123 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1141 = fma(_1025, cbSceneParam._m0[5u].z, fma(_1024, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1023));
    float _1144 = fma(_1025, cbSceneParam._m0[6u].z, fma(_1024, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1023));
    float _1147 = fma(_1025, cbSceneParam._m0[7u].z, fma(_1024, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1023));
    uint _1160 = _273 + 9u;
    uint _1161 = _1160 + uint(cbMatDynParam._m0[0u].w);
    float _1167 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * cbInstanceData._m0[_1161].x;
    float _1168 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_1161].y;
    float _1169 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * cbInstanceData._m0[_1161].z;
    float _4202 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1170 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1171 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1172 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _1173 = 1.0 - _1031;
    float _1174 = _1170 * _1173;
    float _1175 = _1171 * _1173;
    float _1176 = _1172 * _1173;
    float _1181 = (_1170 + (-0.039999999105930328369140625)) * _1031;
    float _1182 = (_1171 + (-0.039999999105930328369140625)) * _1031;
    float _1183 = (_1172 + (-0.039999999105930328369140625)) * _1031;
    float _1184 = _1181 + 0.039999999105930328369140625;
    float _1186 = _1182 + 0.039999999105930328369140625;
    float _1187 = _1183 + 0.039999999105930328369140625;
    vec4 _1196 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1122, cbSceneParam._m0[86u].y * _1123));
    float _1200 = ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * TEXCOORD_5.w) * _1196.x;
    float _1201 = dot(vec3(_1023, _1024, _1025), vec3(_1102, _1103, _1104));
    float _1204 = _1201 * 2.0;
    float _1208 = (_1204 * _1023) - _1102;
    float _1209 = (_1204 * _1024) - _1103;
    float _1210 = (_1204 * _1025) - _1104;
    float _1214 = abs(dot(vec3(_1102, _1103, _1104), vec3(_1023, _1024, _1025)));
    float _4235 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _1216 = sqrt(_1026);
    float _1229 = exp2((_1216 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1216 * 3.0));
    float _1235 = (1.0 - _1229) * ((_1216 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1236 = _1229 * _1216;
    float _1264 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1268 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1272 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1601;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1326 = fma(_1272, cbModelParam._m0[26u].z, fma(_1268, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1264));
        float _1330 = fma(_1272, cbModelParam._m0[27u].z, fma(_1268, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1264));
        float _1334 = fma(_1272, cbModelParam._m0[28u].z, fma(_1268, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1264));
        float _1359 = _1264 + _1023;
        float _1360 = _1268 + _1024;
        float _1361 = _1272 + _1025;
        float _1371 = fma(_1361, cbModelParam._m0[26u].z, fma(_1360, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1359)) - _1326;
        float _1372 = fma(_1361, cbModelParam._m0[27u].z, fma(_1360, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1359)) - _1330;
        float _1373 = fma(_1361, cbModelParam._m0[28u].z, fma(_1360, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1359)) - _1334;
        float _1377 = inversesqrt(dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373)));
        float _1390 = ((_1377 * _1371) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1326 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1377 * _1372) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1330 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1377 * _1373) / cbModelParam._m0[34u].z) + ((((((_1334 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        float _1429 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1395.x + (-0.5));
        float _1431 = _1429 * (_1395.y + (-0.5));
        float _1432 = _1429 * (_1395.z + (-0.5));
        float _1439 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1402.x + (-0.5));
        float _1441 = _1439 * (_1402.y + (-0.5));
        float _1442 = _1439 * (_1402.z + (-0.5));
        float _1449 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1409.x + (-0.5));
        float _1451 = _1449 * (_1409.y + (-0.5));
        float _1452 = _1449 * (_1409.z + (-0.5));
        float _1459 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1416.x + (-0.5));
        float _1461 = _1459 * (_1416.y + (-0.5));
        float _1462 = _1459 * (_1416.z + (-0.5));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = _1430 * 0.5;
        float _1467 = _1440 * 0.5;
        float _1468 = _1450 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1483 = (dot(vec3(_1023, _1024, _1025), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1493 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4283 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1495 + 1.0))) + _1500) * _1463;
        float _1510 = _1431 * 0.5;
        float _1511 = _1441 * 0.5;
        float _1512 = _1451 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_1023, _1024, _1025), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4316 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1537 + 1.0))) + _1542) * _1464;
        float _1552 = _1432 * 0.5;
        float _1553 = _1442 * 0.5;
        float _1554 = _1452 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_1023, _1024, _1025), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4349 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1579 + 1.0))) + _1584) * _1465;
        _1601 = _1432;
        _1603 = _1431;
        _1604 = _1430;
        _1605 = _1442;
        _1606 = _1441;
        _1607 = _1440;
        _1608 = _1452;
        _1609 = _1451;
        _1610 = _1450;
        _1611 = _1465;
        _1612 = _1464;
        _1613 = _1463;
        _1614 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1615 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1616 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
    }
    else
    {
        _1601 = _1602;
        _1603 = _1602;
        _1604 = _1602;
        _1605 = _1602;
        _1606 = _1602;
        _1607 = _1602;
        _1608 = _1602;
        _1609 = _1602;
        _1610 = _1602;
        _1611 = _1602;
        _1612 = _1602;
        _1613 = _1602;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1642 = fma(_1272, cbModelParam._m0[30u].z, fma(_1268, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1264));
        float _1646 = fma(_1272, cbModelParam._m0[31u].z, fma(_1268, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1264));
        float _1650 = fma(_1272, cbModelParam._m0[32u].z, fma(_1268, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1264));
        float _1673 = _1264 + _1023;
        float _1674 = _1268 + _1024;
        float _1675 = _1272 + _1025;
        float _1685 = fma(_1675, cbModelParam._m0[30u].z, fma(_1674, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1673)) - _1642;
        float _1686 = fma(_1675, cbModelParam._m0[31u].z, fma(_1674, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1673)) - _1646;
        float _1687 = fma(_1675, cbModelParam._m0[32u].z, fma(_1674, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1673)) - _1650;
        float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
        float _1704 = ((_1691 * _1685) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1642 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1705 = ((_1691 * _1686) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1646 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1706 = ((_1691 * _1687) / cbModelParam._m0[35u].z) + ((((((_1650 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1729 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        float _1741 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1708.x + (-0.5));
        float _1743 = _1741 * (_1708.y + (-0.5));
        float _1744 = _1741 * (_1708.z + (-0.5));
        float _1751 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1752 = _1751 * (_1715.x + (-0.5));
        float _1753 = _1751 * (_1715.y + (-0.5));
        float _1754 = _1751 * (_1715.z + (-0.5));
        float _1761 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1762 = _1761 * (_1722.x + (-0.5));
        float _1763 = _1761 * (_1722.y + (-0.5));
        float _1764 = _1761 * (_1722.z + (-0.5));
        float _1771 = exp2((_1729.w + (-0.5)) * 20.0) * 2.0;
        float _1772 = _1771 * (_1729.x + (-0.5));
        float _1773 = _1771 * (_1729.y + (-0.5));
        float _1774 = _1771 * (_1729.z + (-0.5));
        float _1775 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1776 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1778 = _1742 * 0.5;
        float _1779 = _1752 * 0.5;
        float _1780 = _1762 * 0.5;
        float _1781 = dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780));
        float _1786 = (_1781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1781);
        float _1794 = (dot(vec3(_1023, _1024, _1025), vec3(_1786 * _1778, _1786 * _1779, _1786 * _1780)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1803 = sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780)) / (_1775 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1805 = _1804 * 2.0;
        float _1809 = (1.0 - _1804) / (_1804 + 1.0);
        float _4412 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1819 = ((((1.0 - _1810) * (_1805 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1805 + 1.0))) + _1810) * _1775;
        float _1820 = _1743 * 0.5;
        float _1821 = _1753 * 0.5;
        float _1822 = _1763 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_1023, _1024, _1025), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1776 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4445 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1847 + 1.0))) + _1852) * _1776;
        float _1862 = _1744 * 0.5;
        float _1863 = _1754 * 0.5;
        float _1864 = _1764 * 0.5;
        float _1865 = dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864));
        float _1870 = (_1865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1865);
        float _1878 = (dot(vec3(_1023, _1024, _1025), vec3(_1870 * _1862, _1870 * _1863, _1870 * _1864)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1887 = sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864)) / (_1777 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1889 = _1888 * 2.0;
        float _1893 = (1.0 - _1888) / (_1888 + 1.0);
        float _4478 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1903 = ((((1.0 - _1894) * (_1889 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1889 + 1.0))) + _1894) * _1777;
        _1911 = _1744;
        _1912 = _1743;
        _1913 = _1742;
        _1914 = _1754;
        _1915 = _1753;
        _1916 = _1752;
        _1917 = _1764;
        _1918 = _1763;
        _1919 = _1762;
        _1920 = _1777;
        _1921 = _1776;
        _1922 = _1775;
        _1923 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)));
        _1924 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
        _1925 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)));
    }
    else
    {
        _1911 = _1602;
        _1912 = _1602;
        _1913 = _1602;
        _1914 = _1602;
        _1915 = _1602;
        _1916 = _1602;
        _1917 = _1602;
        _1918 = _1602;
        _1919 = _1602;
        _1920 = _1602;
        _1921 = _1602;
        _1922 = _1602;
        _1923 = 0.0;
        _1924 = 0.0;
        _1925 = 0.0;
    }
    float _1935 = (cbModelParam._m0[1u].x * (_1923 - _1614)) + _1614;
    float _1936 = (cbModelParam._m0[1u].x * (_1924 - _1615)) + _1615;
    float _1937 = (cbModelParam._m0[1u].x * (_1925 - _1616)) + _1616;
    float _1958 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1961 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1964 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1935));
    float _1979 = _1208 * 0.5;
    float _1980 = _1209 * 0.5;
    float _1981 = _1210 * 0.5;
    float _1982 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1913, _1916, _1919, _1922));
    float _1985 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1912, _1915, _1918, _1921));
    float _1988 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1911, _1914, _1917, _1920));
    float _2022;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1995 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1601, _1605, _1608, _1611));
        float _1999 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1603, _1606, _1609, _1612));
        float _2003 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1604, _1607, _1610, _1613));
        float _2010 = dot(vec4(cbModelParam._m0[39u]), vec4(_1979, _1980, _1981, 1.0));
        _2022 = dot(vec3(isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)), isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2010) ? 0.0 : (isnan(0.0) ? _2010 : max(0.0, _2010))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2022 = 1.0;
    }
    float _2033;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2024 = dot(vec4(cbModelParam._m0[40u]), vec4(_1979, _1980, _1981, 1.0));
        _2033 = dot(vec3(isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)), isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2024) ? 0.0 : (isnan(0.0) ? _2024 : max(0.0, _2024))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2033 = 1.0;
    }
    float _2037 = (_2033 * cbModelParam._m0[1u].x) + (_2022 * (1.0 - cbModelParam._m0[1u].x));
    float _2047 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1026);
    float _2048 = isnan(_2047) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2047 : min(cbModelParam._m0[25u].z, _2047));
    float _2128;
    float _2130;
    float _2132;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2095 = fma(_1272, cbModelParam._m0[13u].z, fma(_1268, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1264)) + cbModelParam._m0[13u].w;
        float _2099 = fma(_1272, cbModelParam._m0[14u].z, fma(_1268, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1264)) + cbModelParam._m0[14u].w;
        float _2103 = fma(_1272, cbModelParam._m0[15u].z, fma(_1268, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1264)) + cbModelParam._m0[15u].w;
        float _2106 = fma(_1210, cbModelParam._m0[13u].z, fma(_1209, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1208));
        float _2109 = fma(_1210, cbModelParam._m0[14u].z, fma(_1209, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1208));
        float _2112 = fma(_1210, cbModelParam._m0[15u].z, fma(_1209, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1208));
        float _2140;
        if (_2106 > 0.0)
        {
            _2140 = abs((1.0 - _2095) / _2106);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2095 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2140 = frontier_phi_17_15_ladder;
        }
        float _2364;
        if (_2109 > 0.0)
        {
            _2364 = abs((1.0 - _2099) / _2109);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2099 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2364 = frontier_phi_26_22_ladder;
        }
        float _2621;
        if (_2112 > 0.0)
        {
            _2621 = abs((1.0 - _2103) / _2112);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2103 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2621 = frontier_phi_38_33_ladder;
        }
        float _2623 = isnan(_2364) ? _2140 : (isnan(_2140) ? _2364 : min(_2140, _2364));
        float _2624 = isnan(_2621) ? _2623 : (isnan(_2623) ? _2621 : min(_2623, _2621));
        float _2628 = (_2624 * _2106) + _2095;
        float _2629 = (_2624 * _2109) + _2099;
        float _2630 = (_2624 * _2112) + _2103;
        float _2631 = _2624 * 9.9999997473787516355514526367188e-05;
        float _2633 = (-1.0) - _2631;
        float _2635 = _2631 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2630 > _2635) || ((_2630 < _2633) || ((_2629 > _2635) || ((_2629 < _2633) || ((_2628 < _2633) || (_2628 > _2635))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2630, cbModelParam._m0[9u].z, fma(_2629, cbModelParam._m0[9u].y, _2628 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2630, cbModelParam._m0[10u].z, fma(_2629, cbModelParam._m0[10u].y, _2628 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2630, cbModelParam._m0[11u].z, fma(_2629, cbModelParam._m0[11u].y, _2628 * cbModelParam._m0[11u].x))), _2048);
            frontier_phi_16_38_ladder = _2758.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2758.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2758.x * cbModelParam._m0[1u].y;
        }
        _2128 = frontier_phi_16_38_ladder_2;
        _2130 = frontier_phi_16_38_ladder_1;
        _2132 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2116 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1208, _1209, _1210), _2048);
        _2128 = _2116.x * cbModelParam._m0[1u].y;
        _2130 = _2116.y * cbModelParam._m0[1u].y;
        _2132 = _2116.z * cbModelParam._m0[1u].y;
    }
    float _2136 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1026);
    float _2137 = isnan(_2136) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2136 : min(cbModelParam._m0[25u].w, _2136));
    float _2227;
    float _2229;
    float _2231;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2191 = fma(_1272, cbModelParam._m0[21u].z, fma(_1268, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1264)) + cbModelParam._m0[21u].w;
        float _2195 = fma(_1272, cbModelParam._m0[22u].z, fma(_1268, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1264)) + cbModelParam._m0[22u].w;
        float _2199 = fma(_1272, cbModelParam._m0[23u].z, fma(_1268, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1264)) + cbModelParam._m0[23u].w;
        float _2202 = fma(_1210, cbModelParam._m0[21u].z, fma(_1209, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1208));
        float _2205 = fma(_1210, cbModelParam._m0[22u].z, fma(_1209, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1208));
        float _2208 = fma(_1210, cbModelParam._m0[23u].z, fma(_1209, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1208));
        float _2369;
        if (_2202 > 0.0)
        {
            _2369 = abs((1.0 - _2191) / _2202);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2202 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2191 + 1.0) / _2202);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2369 = frontier_phi_28_24_ladder;
        }
        float _2648;
        if (_2205 > 0.0)
        {
            _2648 = abs((1.0 - _2195) / _2205);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2205 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2195 + 1.0) / _2205);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2648 = frontier_phi_40_35_ladder;
        }
        float _2861;
        if (_2208 > 0.0)
        {
            _2861 = abs((1.0 - _2199) / _2208);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2208 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2199 + 1.0) / _2208);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2861 = frontier_phi_49_46_ladder;
        }
        float _2863 = isnan(_2648) ? _2369 : (isnan(_2369) ? _2648 : min(_2369, _2648));
        float _2864 = isnan(_2861) ? _2863 : (isnan(_2863) ? _2861 : min(_2863, _2861));
        float _2868 = (_2864 * _2202) + _2191;
        float _2869 = (_2864 * _2205) + _2195;
        float _2870 = (_2864 * _2208) + _2199;
        float _2871 = _2864 * 9.9999997473787516355514526367188e-05;
        float _2872 = (-1.0) - _2871;
        float _2874 = _2871 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2870 > _2874) || ((_2870 < _2872) || ((_2869 > _2874) || ((_2869 < _2872) || ((_2868 < _2872) || (_2868 > _2874))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3069 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2870, cbModelParam._m0[17u].z, fma(_2869, cbModelParam._m0[17u].y, _2868 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2870, cbModelParam._m0[18u].z, fma(_2869, cbModelParam._m0[18u].y, _2868 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2870, cbModelParam._m0[19u].z, fma(_2869, cbModelParam._m0[19u].y, _2868 * cbModelParam._m0[19u].x))), _2137);
            frontier_phi_25_49_ladder = _3069.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3069.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3069.x * cbModelParam._m0[1u].z;
        }
        _2227 = frontier_phi_25_49_ladder_2;
        _2229 = frontier_phi_25_49_ladder_1;
        _2231 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2211 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1208, _1209, _1210), _2137);
        _2227 = _2211.x * cbModelParam._m0[1u].z;
        _2229 = _2211.y * cbModelParam._m0[1u].z;
        _2231 = _2211.z * cbModelParam._m0[1u].z;
    }
    float _2244 = (((_1235 * _1184) + _1236) * _1200) * ((cbModelParam._m0[1u].w * (_2227 - _2128)) + _2128);
    float _2246 = (((_1235 * _1186) + _1236) * _1200) * ((cbModelParam._m0[1u].w * (_2229 - _2130)) + _2130);
    float _2248 = (((_1235 * _1187) + _1236) * _1200) * ((cbModelParam._m0[1u].w * (_2231 - _2132)) + _2132);
    float _2251 = fma(_2248, cbSceneParam._m0[89u].z, fma(_2246, cbSceneParam._m0[89u].y, _2244 * cbSceneParam._m0[89u].x));
    float _2254 = fma(_2248, cbSceneParam._m0[90u].z, fma(_2246, cbSceneParam._m0[90u].y, _2244 * cbSceneParam._m0[90u].x));
    float _2257 = fma(_2248, cbSceneParam._m0[91u].z, fma(_2246, cbSceneParam._m0[91u].y, _2244 * cbSceneParam._m0[91u].x));
    vec4 _2265 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1122, _1123));
    float _2267 = _2265.w;
    float _2279 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2267);
    float _2280 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2267);
    float _2281 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2267);
    uvec4 _2285 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2287 = _2285.x * 14u;
    uint _2288 = _2287 + 13u;
    float _2295 = _1200 + (-1.0);
    float _2300 = (cbLight._m0[_2288].x * _2295) + 1.0;
    float _2301 = (cbLight._m0[_2288].y * _2295) + 1.0;
    float _2302 = (cbLight._m0[_2288].z * _2295) + 1.0;
    float _2303 = (cbLight._m0[_2288].w * _2295) + 1.0;
    uint _2304 = _2287 + 5u;
    float _2310 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2314 = _2287 + 4u;
    float _2323 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2327 = _2287 | 1u;
    float _2338 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_1023, _1024, _1025));
    float _2341 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_1023, _1024, _1025));
    float _4614 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _4625 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2346 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * 0.3183098733425140380859375;
    float _2348 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * 0.3183098733425140380859375;
    float _2355 = ((cbLight._m0[_2304].x * _2310) * _2348) + (((cbLight._m0[_2314].x * _2279) * _2323) * _2346);
    float _2356 = ((_2310 * cbLight._m0[_2304].y) * _2348) + (((cbLight._m0[_2314].y * _2280) * _2323) * _2346);
    float _2357 = ((_2310 * cbLight._m0[_2304].z) * _2348) + (((cbLight._m0[_2314].z * _2281) * _2323) * _2346);
    uvec4 _2361 = floatBitsToUint(cbLight._m0[_2287 + 12u]);
    bool _2363 = _2361.x == 0u;
    float _2374;
    float _2376;
    float _2378;
    if (_2363)
    {
        _2374 = _2355;
        _2376 = _2356;
        _2378 = _2357;
    }
    else
    {
        uint _2382 = _2287 + 6u;
        float _2398 = (dot(vec3(cbLight._m0[_2287 + 2u].xyz), vec3(_1023, _1024, _1025)) * 0.5) + 0.5;
        float _2399 = _2398 * _2398;
        float _4636 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2400 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2401 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2374 = (((cbLight._m0[_2382].x * 0.3183098733425140380859375) * _2400) * _2401) + _2355;
        _2376 = (((cbLight._m0[_2382].y * 0.3183098733425140380859375) * _2400) * _2401) + _2356;
        _2378 = (((cbLight._m0[_2382].z * 0.3183098733425140380859375) * _2400) * _2401) + _2357;
    }
    bool _2381 = _2361.y == 0u;
    float _2419;
    float _2421;
    float _2423;
    if (_2381)
    {
        _2419 = _2374;
        _2421 = _2376;
        _2423 = _2378;
    }
    else
    {
        uint _2592 = _2287 + 7u;
        float _2608 = (dot(vec3(cbLight._m0[_2287 + 3u].xyz), vec3(_1023, _1024, _1025)) * 0.5) + 0.5;
        float _2609 = _2608 * _2608;
        float _4652 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2610 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2611 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2419 = (((cbLight._m0[_2592].x * 0.3183098733425140380859375) * _2610) * _2611) + _2374;
        _2421 = (((cbLight._m0[_2592].y * 0.3183098733425140380859375) * _2610) * _2611) + _2376;
        _2423 = (((cbLight._m0[_2592].z * 0.3183098733425140380859375) * _2610) * _2611) + _2378;
    }
    uint _2426 = _2287 + 8u;
    float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _1026) * 0.949999988079071044921875);
    float _2440 = _2439 * _2439;
    float _2441 = cbLight._m0[_2287].x + _1102;
    float _2442 = cbLight._m0[_2287].y + _1103;
    float _2443 = cbLight._m0[_2287].z + _1104;
    float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
    float _2448 = _2447 * _2441;
    float _2449 = _2447 * _2442;
    float _2450 = _2447 * _2443;
    float _2451 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2287].xyz));
    float _4668 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _4679 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _2455 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2456 = dot(vec3(_1023, _1024, _1025), vec3(_2448, _2449, _2450));
    float _4690 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2460 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2448, _2449, _2450));
    float _4701 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2464 = _2440 * _2440;
    float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
    float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
    float _2477 = 0.959999978542327880859375 - _1181;
    float _2479 = 0.959999978542327880859375 - _1182;
    float _2480 = 0.959999978542327880859375 - _1183;
    float _2487 = 1.0 - _2440;
    float _2498 = (0.5 / (((_2455 * ((_2454 * _2487) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2455 * _2487) + _2440) * _2454))) * _2454;
    float _4712 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2500 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
    uint _2514 = _2287 + 9u;
    float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _1026) * 0.949999988079071044921875);
    float _2526 = _2525 * _2525;
    float _2527 = cbLight._m0[_2327].x + _1102;
    float _2528 = cbLight._m0[_2327].y + _1103;
    float _2529 = cbLight._m0[_2327].z + _1104;
    float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
    float _2534 = _2533 * _2527;
    float _2535 = _2533 * _2528;
    float _2536 = _2533 * _2529;
    float _2537 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2327].xyz));
    float _4723 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2540 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2541 = dot(vec3(_1023, _1024, _1025), vec3(_2534, _2535, _2536));
    float _4734 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2545 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2534, _2535, _2536));
    float _4745 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2549 = _2526 * _2526;
    float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
    float _2560 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
    float _2567 = 1.0 - _2526;
    float _2577 = (0.5 / (((_2455 * ((_2540 * _2567) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2455 * _2567) + _2526) * _2540))) * _2540;
    float _4756 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2579 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
    float _2589 = (((((_2560 * _2477) + _1184) * cbLight._m0[_2514].x) * _2579) * _2310) + ((((cbLight._m0[_2426].x * _2279) * ((_2476 * _2477) + _1184)) * _2500) * _2323);
    float _2590 = (((((_2560 * _2479) + _1186) * cbLight._m0[_2514].y) * _2579) * _2310) + ((((cbLight._m0[_2426].y * _2280) * ((_2476 * _2479) + _1186)) * _2500) * _2323);
    float _2591 = (((((_2560 * _2480) + _1187) * cbLight._m0[_2514].z) * _2579) * _2310) + ((((cbLight._m0[_2426].z * _2281) * ((_2476 * _2480) + _1187)) * _2500) * _2323);
    float _2653;
    float _2655;
    float _2657;
    if (_2363)
    {
        _2653 = _2589;
        _2655 = _2590;
        _2657 = _2591;
    }
    else
    {
        uint _2659 = _2287 + 2u;
        uint _2663 = _2287 + 10u;
        float _2677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2659].w)) * _1026) * 0.949999988079071044921875);
        float _2678 = _2677 * _2677;
        float _2679 = cbLight._m0[_2659].x + _1102;
        float _2680 = cbLight._m0[_2659].y + _1103;
        float _2681 = cbLight._m0[_2659].z + _1104;
        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
        float _2686 = _2685 * _2679;
        float _2687 = _2685 * _2680;
        float _2688 = _2685 * _2681;
        float _2689 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2659].xyz));
        float _4767 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2693 = dot(vec3(_1023, _1024, _1025), vec3(_2686, _2687, _2688));
        float _4778 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2697 = dot(vec3(cbLight._m0[_2659].xyz), vec3(_2686, _2687, _2688));
        float _4789 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2701 = _2678 * _2678;
        float _2705 = ((_2696 * _2696) * (_2701 + (-1.0))) + 1.0;
        float _2712 = exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0);
        float _2719 = 1.0 - _2678;
        float _2729 = (0.5 / (((_2455 * ((_2692 * _2719) + _2678)) + 9.9999999392252902907785028219223e-09) + (((_2455 * _2719) + _2678) * _2692))) * _2692;
        float _4800 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2731 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2701 / ((_2705 * _2705) * 3.141590118408203125));
        float _2732 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2653 = (((((_2712 * _2477) + _1184) * cbLight._m0[_2663].x) * _2731) * _2732) + _2589;
        _2655 = (((((_2712 * _2479) + _1186) * cbLight._m0[_2663].y) * _2731) * _2732) + _2590;
        _2657 = (((((_2712 * _2480) + _1187) * cbLight._m0[_2663].z) * _2731) * _2732) + _2591;
    }
    float _2767;
    float _2769;
    float _2771;
    if (_2381)
    {
        _2767 = _2653;
        _2769 = _2655;
        _2771 = _2657;
    }
    else
    {
        uint _2778 = _2287 + 3u;
        uint _2782 = _2287 + 11u;
        float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2778].w)) * _1026) * 0.949999988079071044921875);
        float _2797 = _2796 * _2796;
        float _2798 = cbLight._m0[_2778].x + _1102;
        float _2799 = cbLight._m0[_2778].y + _1103;
        float _2800 = cbLight._m0[_2778].z + _1104;
        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
        float _2805 = _2804 * _2798;
        float _2806 = _2804 * _2799;
        float _2807 = _2804 * _2800;
        float _2808 = dot(vec3(_1023, _1024, _1025), vec3(cbLight._m0[_2778].xyz));
        float _4816 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2812 = dot(vec3(_1023, _1024, _1025), vec3(_2805, _2806, _2807));
        float _4827 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2816 = dot(vec3(cbLight._m0[_2778].xyz), vec3(_2805, _2806, _2807));
        float _4838 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2820 = _2797 * _2797;
        float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
        float _2831 = exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0);
        float _2838 = 1.0 - _2797;
        float _2848 = (0.5 / (((_2455 * ((_2811 * _2838) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2455 * _2838) + _2797) * _2811))) * _2811;
        float _4849 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2850 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
        float _2851 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2767 = (((((_2831 * _2477) + _1184) * cbLight._m0[_2782].x) * _2850) * _2851) + _2653;
        _2769 = (((((_2831 * _2479) + _1186) * cbLight._m0[_2782].y) * _2850) * _2851) + _2655;
        _2771 = (((((_2831 * _2480) + _1187) * cbLight._m0[_2782].z) * _2850) * _2851) + _2657;
    }
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    if (_2285.y == 0u)
    {
        float _2926 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2927 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2926;
        float _2928 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2926;
        float _2929 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2926;
        uvec4 _2941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2942 = _2941.x;
        uint _2953 = uint((float(_2941.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1123) / _2942))) + floor(float(uint(cbSceneParam._m0[85u].x * _1122) / _2942)));
        float _2963 = (log2(_2929 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2964 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        uint _2967 = uint(isnan(14.0) ? _2964 : (isnan(_2964) ? 14.0 : min(_2964, 14.0)));
        uvec4 _2972 = texelFetch(g_lightClusterGridBuffer, int(((_2967 << 2u) + (_2953 << 6u)) >> 2u));
        uint _2973 = _2972.x;
        uint _2974 = _2941.z;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        if (((((1u << ((_2974 >> 4u) & 15u)) + 4294967295u) & _2973) == 0u) || ((_2974 & 240u) == 0u))
        {
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
        }
        else
        {
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            uint _3233 = 0u;
            uint _3242;
            bool _3243;
            for (;;)
            {
                _3242 = texelFetch(g_lightClassification, int((((_2967 << 5u) + (_2953 << 9u)) + (_3233 << 2u)) >> 2u)).x;
                _3243 = _3242 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3243)
                {
                    frontier_phi_66_pred = _3227;
                    frontier_phi_66_pred_1 = _3232;
                    frontier_phi_66_pred_2 = _3231;
                    frontier_phi_66_pred_3 = _3230;
                    frontier_phi_66_pred_4 = _3229;
                    frontier_phi_66_pred_5 = _3228;
                }
                else
                {
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    uint _3378;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3242;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    for (;;)
                    {
                        uint _3382 = uint(findLSB(_3378)) + (_3233 << 5u);
                        uint _3379 = (_3378 + 4294967295u) & _3378;
                        uint _3384 = _3382 * 48u;
                        vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 3u)).x));
                        uint _3404 = (_3382 * 48u) + 4u;
                        vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3404)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 3u)).x));
                        uint _3423 = (_3382 * 48u) + 8u;
                        vec3 _3434 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3423)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 2u)).x));
                        float _3438 = _3398.x - _2927;
                        float _3439 = _3398.y - _2928;
                        float _3440 = _3398.z - _2929;
                        float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                        float _3444 = inversesqrt(_3441);
                        float _3445 = _3444 * _3438;
                        float _3446 = _3444 * _3439;
                        float _3447 = _3444 * _3440;
                        float _3448 = dot(vec3(_1141, _1144, _1147), vec3(_3445, _3446, _3447));
                        float _3453 = 1.0 - (_3441 * _3398.w);
                        float _4875 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3454 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3455 = sqrt(_3441) * _3417.w;
                        float _3458 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                        float _3459 = _3458 * _3458;
                        float _3462 = ((1.0 - _3459) * _3448) + _3459;
                        float _3465 = _3455 * _3455;
                        float _3469 = ((isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0))) * _3454) / ((_3465 * 0.699999988079071044921875) + 1.0);
                        float _3473 = (-0.0) - _2927;
                        float _3474 = (-0.0) - _2928;
                        float _3475 = (-0.0) - _2929;
                        float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                        float _3480 = _3479 * _3473;
                        float _3481 = _3479 * _3474;
                        float _3482 = _3479 * _3475;
                        float _3490 = exp2(log2(1.0 / ((_3465 * 3.5) + 5.0)) * 0.25);
                        float _3491 = 1.0 - _1216;
                        float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                        float _3499 = _3498 * _3498;
                        float _3500 = _3499 * _3499;
                        float _3501 = _3480 + _3445;
                        float _3502 = _3481 + _3446;
                        float _3503 = _3482 + _3447;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3511 = dot(vec3(_1141, _1144, _1147), vec3(_3480, _3481, _3482));
                        float _4891 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3514 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3515 = dot(vec3(_1141, _1144, _1147), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                        float _4902 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                        float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                        float _3523 = _3458 * _3499;
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3448) + _3524;
                        float _4913 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3528 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3529 = 1.0 - _3499;
                        float _3539 = (0.5 / (((_3528 * ((_3514 * _3529) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3499) * _3514))) * _3528;
                        float _4924 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3550 = (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) / ((_3522 * _3522) * ((_3465 * 2.1991131305694580078125) + 3.141590118408203125))) * _3454;
                        _3302 = (_3469 * _3417.x) + _3375;
                        _3303 = (_3469 * _3417.y) + _3376;
                        _3304 = (_3469 * _3417.z) + _3377;
                        _3299 = (_3550 * _3434.x) + _3372;
                        _3300 = (_3550 * _3434.y) + _3373;
                        _3301 = (_3550 * _3434.z) + _3374;
                        if (_3379 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3379;
                        }
                    }
                    frontier_phi_66_pred = _3299;
                    frontier_phi_66_pred_1 = _3304;
                    frontier_phi_66_pred_2 = _3303;
                    frontier_phi_66_pred_3 = _3302;
                    frontier_phi_66_pred_4 = _3301;
                    frontier_phi_66_pred_5 = _3300;
                }
                _3075 = frontier_phi_66_pred;
                _3085 = frontier_phi_66_pred_1;
                _3083 = frontier_phi_66_pred_2;
                _3081 = frontier_phi_66_pred_3;
                _3079 = frontier_phi_66_pred_4;
                _3077 = frontier_phi_66_pred_5;
                uint _3234 = _3233 + 1u;
                if (_3234 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3227 = _3075;
                    _3228 = _3077;
                    _3229 = _3079;
                    _3230 = _3081;
                    _3231 = _3083;
                    _3232 = _3085;
                    _3233 = _3234;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
        }
        uvec4 _3088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3089 = _3088.z;
        uint _3091 = (_3089 >> 8u) & 15u;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        if (((4294967295u << _3091) & _2973) == 0u)
        {
            _3195 = _3074;
            _3197 = _3076;
            _3199 = _3078;
            _3201 = _3080;
            _3203 = _3082;
            _3205 = _3084;
        }
        else
        {
            float _3220 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
            float _3221 = _3220 * _2927;
            float _3222 = _3220 * _2928;
            float _3223 = _3220 * _2929;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3091 < ((_3089 >> 12u) & 15u))
            {
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3355 = _3074;
                float _3356 = _3076;
                float _3357 = _3078;
                float _3358 = _3080;
                float _3359 = _3082;
                float _3360 = _3084;
                uint _3361 = _3091;
                uint _3370;
                bool _3371;
                for (;;)
                {
                    _3370 = texelFetch(g_lightClassification, int((((_2967 << 5u) + (_2953 << 9u)) + (_3361 << 2u)) >> 2u)).x;
                    _3371 = _3370 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3371)
                    {
                        frontier_phi_77_pred = _3360;
                        frontier_phi_77_pred_1 = _3359;
                        frontier_phi_77_pred_2 = _3358;
                        frontier_phi_77_pred_3 = _3357;
                        frontier_phi_77_pred_4 = _3356;
                        frontier_phi_77_pred_5 = _3355;
                    }
                    else
                    {
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3577 = _3355;
                        float _3578 = _3356;
                        float _3579 = _3357;
                        float _3580 = _3358;
                        float _3581 = _3359;
                        float _3582 = _3360;
                        uint _3583 = _3370;
                        uint _3584;
                        vec4 _3609;
                        float _3610;
                        vec4 _3625;
                        vec3 _3637;
                        vec4 _3652;
                        vec4 _3667;
                        float _3713;
                        bool _3714;
                        for (;;)
                        {
                            uint _3594 = ((_3361 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3583));
                            _3584 = (_3583 + 4294967295u) & _3583;
                            uint _3596 = _3594 * 40u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3610 = _3609.w;
                            uint _3612 = (_3594 * 40u) + 4u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3594 * 40u) + 8u;
                            _3637 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x));
                            uint _3639 = (_3594 * 40u) + 16u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3594 * 40u) + 20u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3594 * 40u) + 24u;
                            vec4 _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3688 = (_3594 * 40u) + 28u;
                            vec4 _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            _3713 = fma(_2929, _3701.z, fma(_2928, _3701.y, _3701.x * _2927)) + _3701.w;
                            _3714 = !((fma(_2929, _3682.z, fma(_2928, _3682.y, _3682.x * _2927)) + _3682.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3714)
                            {
                                float _3741 = _3609.x - _2927;
                                float _3742 = _3609.y - _2928;
                                float _3743 = _3609.z - _2929;
                                float _3744 = dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743));
                                float _3747 = inversesqrt(_3744);
                                float _3748 = _3747 * _3741;
                                float _3749 = _3747 * _3742;
                                float _3750 = _3747 * _3743;
                                float _3754 = 1.0 - (_3744 / (_3610 * _3610));
                                float _4935 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3759 = sqrt(_3744) * _3625.w;
                                float _3761 = 1.39999997615814208984375 / (_3759 + 1.39999997615814208984375);
                                float _3762 = _3761 * _3761;
                                float _3765 = ((1.0 - _3762) * dot(vec3(_3748, _3749, _3750), vec3(_1141, _1144, _1147))) + _3762;
                                float _3768 = _3759 * _3759;
                                float _3772 = (fma(_2929, _3652.z, fma(_2928, _3652.y, _3652.x * _2927)) + _3652.w) / _3713;
                                float _3773 = (fma(_2929, _3667.z, fma(_2928, _3667.y, _3667.x * _2927)) + _3667.w) / _3713;
                                float _3777 = 1.0 - dot(vec2(_3772, _3773), vec2(_3772, _3773));
                                float _4951 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3778 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3779 = _3778 * (((isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0))) * _3755) / ((_3768 * 0.699999988079071044921875) + 1.0));
                                float _3791 = exp2(log2(1.0 / ((_3768 * 3.5) + 5.0)) * 0.25);
                                float _3792 = 1.0 - _1216;
                                float _3799 = sqrt(1.0 - ((1.0 - (_3792 * _3792)) * (1.0 - (_3791 * _3791))));
                                float _3800 = _3799 * _3799;
                                float _3801 = _3800 * _3800;
                                float _3802 = _3748 - _3221;
                                float _3803 = _3749 - _3222;
                                float _3804 = _3750 - _3223;
                                float _3808 = inversesqrt(dot(vec3(_3802, _3803, _3804), vec3(_3802, _3803, _3804)));
                                float _3812 = dot(vec3(_1141, _1144, _1147), vec3((-0.0) - _3221, (-0.0) - _3222, (-0.0) - _3223));
                                float _4962 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3815 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                                float _3816 = dot(vec3(_1141, _1144, _1147), vec3(_3808 * _3802, _3808 * _3803, _3808 * _3804));
                                float _4973 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3823 = ((_3819 * _3819) * (_3801 + (-1.0))) + 1.0;
                                float _3824 = _3761 * _3800;
                                float _3825 = _3824 * _3824;
                                float _3831 = ((1.0 - _3825) * dot(vec3(_1141, _1144, _1147), vec3(_3748, _3749, _3750))) + _3825;
                                float _4984 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3833 = 1.0 - _3800;
                                float _3843 = (0.5 / (((_3832 * ((_3815 * _3833) + _3800)) + 9.9999999392252902907785028219223e-09) + (((_3832 * _3833) + _3800) * _3815))) * _3832;
                                float _4995 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3853 = (_3778 * _3755) * (((_3801 * 3.1415927410125732421875) * (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) / ((_3823 * _3823) * ((_3768 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3779 * _3625.y;
                                frontier_phi_83_pred_1 = _3779 * _3625.x;
                                frontier_phi_83_pred_2 = _3853 * _3637.z;
                                frontier_phi_83_pred_3 = _3853 * _3637.y;
                                frontier_phi_83_pred_4 = _3853 * _3637.x;
                                frontier_phi_83_pred_5 = _3779 * _3625.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3861 = frontier_phi_83_pred;
                            _3860 = frontier_phi_83_pred_1;
                            _3859 = frontier_phi_83_pred_2;
                            _3858 = frontier_phi_83_pred_3;
                            _3857 = frontier_phi_83_pred_4;
                            _3862 = frontier_phi_83_pred_5;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            if (_3584 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3584;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3569;
                        frontier_phi_77_pred_1 = _3568;
                        frontier_phi_77_pred_2 = _3567;
                        frontier_phi_77_pred_3 = _3566;
                        frontier_phi_77_pred_4 = _3565;
                        frontier_phi_77_pred_5 = _3564;
                    }
                    _3206 = frontier_phi_77_pred;
                    _3204 = frontier_phi_77_pred_1;
                    _3202 = frontier_phi_77_pred_2;
                    _3200 = frontier_phi_77_pred_3;
                    _3198 = frontier_phi_77_pred_4;
                    _3196 = frontier_phi_77_pred_5;
                    uint _3362 = _3361 + 1u;
                    if (_3362 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3355 = _3196;
                        _3356 = _3198;
                        _3357 = _3200;
                        _3358 = _3202;
                        _3359 = _3204;
                        _3360 = _3206;
                        _3361 = _3362;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3200;
                frontier_phi_58_59_ladder_1 = _3206;
                frontier_phi_58_59_ladder_2 = _3204;
                frontier_phi_58_59_ladder_3 = _3202;
                frontier_phi_58_59_ladder_4 = _3198;
                frontier_phi_58_59_ladder_5 = _3196;
            }
            else
            {
                frontier_phi_58_59_ladder = _3078;
                frontier_phi_58_59_ladder_1 = _3084;
                frontier_phi_58_59_ladder_2 = _3082;
                frontier_phi_58_59_ladder_3 = _3080;
                frontier_phi_58_59_ladder_4 = _3076;
                frontier_phi_58_59_ladder_5 = _3074;
            }
            _3195 = frontier_phi_58_59_ladder_5;
            _3197 = frontier_phi_58_59_ladder_4;
            _3199 = frontier_phi_58_59_ladder;
            _3201 = frontier_phi_58_59_ladder_3;
            _3203 = frontier_phi_58_59_ladder_2;
            _3205 = frontier_phi_58_59_ladder_1;
        }
        float _3210 = isnan(1.0) ? _1200 : (isnan(_1200) ? 1.0 : min(_1200, 1.0));
        _2986 = (_3210 * _3201) + _2419;
        _2988 = (_3210 * _3203) + _2421;
        _2990 = (_3210 * _3205) + _2423;
        _2992 = ((_3195 * _1184) * _3210) + _2767;
        _2994 = ((_3197 * _1186) * _3210) + _2769;
        _2996 = ((_3199 * _1187) * _3210) + _2771;
    }
    else
    {
        _2986 = _2419;
        _2988 = _2421;
        _2990 = _2423;
        _2992 = _2767;
        _2994 = _2769;
        _2996 = _2771;
    }
    float _5011 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _5022 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _5033 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _3013 = ((isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_2986 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1200))) + ((_2992 + ((isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0))) * _2037)) * cbPerFrame._m0[3u].x);
    float _3014 = ((isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_2988 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1200))) + ((_2994 + ((isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0))) * _2037)) * cbPerFrame._m0[3u].x);
    float _3015 = ((isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0))) * (_2990 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1200))) + ((_2996 + ((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _2037)) * cbPerFrame._m0[3u].x);
    uint _3016 = _273 + 6u;
    float _3024 = _1122 / cbSceneParam._m0[86u].x;
    float _3025 = _1123 / cbSceneParam._m0[86u].y;
    vec4 _3039 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3024, _3025, (log2((isnan(cbSceneParam._m0[77u].w) ? _1045 : (isnan(_1045) ? cbSceneParam._m0[77u].w : min(_1045, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3041 = _3039.x;
    float _3042 = _3039.y;
    float _3043 = _3039.z;
    float _3044 = _3039.w;
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    if (_1045 > cbSceneParam._m0[78u].w)
    {
        float _3099 = isnan(_1045) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1045 : min(cbSceneParam._m0[80u].w, _1045));
        float _3100 = _3099 / _1045;
        float _3111 = _3100 * _1095;
        float _3112 = _1096 * _3100;
        float _3113 = (-0.0) - _3112;
        float _3115 = _3100 * _1097;
        float _3117 = (cbSceneParam._m0[77u].w * _3113) / _3099;
        float _3118 = _3117 + cbSceneParam._m0[79u].w;
        float _3119 = cbSceneParam._m0[79u].w - _3112;
        float _3125 = sqrt(((_3111 * _3111) + (_3112 * _3112)) + (_3115 * _3115));
        float _3128 = (1.0 - (cbSceneParam._m0[77u].w / _3099)) * _3125;
        float _3133 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3135 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3312;
        if (abs((_3113 - _3117) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3312 = ((((_3118 > 0.0) ? exp2(_3133 * _3118) : (2.0 - exp2(_3135 * _3118))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3128;
        }
        else
        {
            float _3256 = 1.0 / cbSceneParam._m0[80u].x;
            float _3257 = isnan(_3119) ? _3118 : (isnan(_3118) ? _3119 : max(_3118, _3119));
            float _3258 = isnan(_3119) ? _3118 : (isnan(_3118) ? _3119 : min(_3118, _3119));
            float _3267 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : min(_3257, 0.0));
            float _3268 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : min(_3258, 0.0));
            _3312 = ((abs(_3125 / _3113) * cbSceneParam._m0[80u].y) * ((((_3267 - _3268) * 2.0) - ((exp2(_3133 * (isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0)))) - exp2(_3133 * (isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))))) * _3256)) - ((exp2(_3135 * _3267) - exp2(_3135 * _3268)) * _3256))) + (_3128 * cbSceneParam._m0[80u].z);
        }
        vec4 _3314 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3024, _3025, 1.0), 0.0);
        float _3323 = exp2((_3312 * (-1.44269502162933349609375)) * (1.0 - _3314.w));
        float _3324 = log2(_3323);
        float _3340 = log2(_3044);
        _3137 = (exp2(_3340 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].x)) * _3314.x) / cbSceneParam._m0[78u].x)) + _3041;
        _3139 = (exp2(_3340 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].y)) * _3314.y) / cbSceneParam._m0[78u].y)) + _3042;
        _3141 = (exp2(_3340 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3324 * cbSceneParam._m0[78u].z)) * _3314.z) / cbSceneParam._m0[78u].z)) + _3043;
        _3143 = _3323 * _3044;
    }
    else
    {
        _3137 = _3041;
        _3139 = _3042;
        _3141 = _3043;
        _3143 = _3044;
    }
    bool _3350;
    vec4 _3153;
    vec4 _3175;
    float _3177;
    float _3181;
    float _3182;
    float _3183;
    float _3184;
    bool _3194;
    for (;;)
    {
        _3153 = cbMatDynParam._m0[0u];
        float _3155 = roundEven(_3153.y);
        bool _3156 = _3155 == 3.0;
        float _3157 = log2(_3143);
        float _3164 = exp2(_3157 * cbSceneParam._m0[78u].x) * _3013;
        float _3165 = exp2(_3157 * cbSceneParam._m0[78u].y) * _3014;
        float _3166 = exp2(_3157 * cbSceneParam._m0[78u].z) * _3015;
        float _3173 = _1111 + (-0.5);
        _3175 = cbMtdParam._m0[1u];
        _3177 = _3175.y * _3173;
        float _3180 = (_3155 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3181 = _3180 * (_3156 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3137)));
        _3182 = _3180 * (_3156 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3139)));
        _3183 = _3180 * (_3156 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3141)));
        _3184 = _3173 * 0.999000012874603271484375;
        _3194 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3194)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3184) < 0.5)
            {
                _3350 = true;
                break;
            }
        }
        uint _3291 = _1160 + uint(_3153.w);
        if ((cbInstanceData._m0[_3291].w < 1.0) && ((cbInstanceData._m0[_3291].w + _3184) < 0.5))
        {
            _3350 = true;
            break;
        }
        if ((_3177 + 1.0) < _3175.x)
        {
            _3350 = true;
            break;
        }
        _3350 = false;
        break;
    }
    float _3555;
    if (_3350)
    {
        discard_state = true;
        _3555 = 0.0;
    }
    else
    {
        _3555 = cbInstanceData._m0[_3016].w;
    }
    SV_Target.x = _3181;
    SV_Target.y = _3182;
    SV_Target.z = _3183;
    SV_Target.w = _3555;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3016].w;
    discard_exit();
}


