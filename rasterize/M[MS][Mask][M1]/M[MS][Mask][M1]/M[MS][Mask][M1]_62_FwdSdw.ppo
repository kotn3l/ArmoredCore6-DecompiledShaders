#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1348;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _360.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3957 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _435 = (_428 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _436 = (_428 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _437 = (_428 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _360.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[23u].w) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3968 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _514 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435);
    float _517 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436);
    float _520 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437);
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _566 = ((_538.x - _557) * _428) + _557;
    float _567 = ((_538.y - _558) * _428) + _558;
    float _568 = ((_538.z - _559) * _428) + _559;
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _593 = ((_580.z - _568) * _501) + _568;
    float _596 = ((((_580.x - _566) * _501) + _566) * 2.0) + (-1.0);
    float _598 = ((((_580.y - _567) * _501) + _567) * 2.0) + (-1.0);
    float _599 = dot(vec2(_596, _598), vec2(_596, _598));
    float _3979 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _645 = _643.x;
    float _646 = 1.0 - _645;
    float _662 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_645 - _646) * cbMtdParam._m0[24u].z) + _646) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3990 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _670 = (_663 * (cbMtdParam._m0[17u].x - _514)) + _514;
    float _671 = (_663 * (cbMtdParam._m0[17u].y - _517)) + _517;
    float _672 = (_663 * (cbMtdParam._m0[17u].z - _520)) + _520;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _700 = _698.x;
    float _717 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _700) * _428) + _700;
    float _734 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _717) * _501) + _717;
    float _738 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _734) * cbMtdParam._m0[19u].z) + _734;
    float _740 = _738 - (_738 * _663);
    float _744 = (cbMtdParam._m0[19u].w * (_618.z - _593)) + _593;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _764 = (_757.x * 2.0) + (-1.0);
    float _765 = (_757.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _4001 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _774 = (_663 * (_757.z - _744)) + _744;
    float _777 = (((_618.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _596;
    float _778 = (((_618.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _790 = (((_764 - _777) + (cbMtdParam._m0[21u].x * _777)) * _663) + _777;
    float _791 = (((_765 - _778) + (cbMtdParam._m0[21u].x * _778)) * _663) + _778;
    float _792 = (_663 * (sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) - _604)) + _604;
    float _794 = cbMtdParam._m0[22u].x + _618.w;
    float _797 = fma(_792, _237 * NORMAL.x, fma(_791, _244 * TANGENT.x, (_230 * _222) * _790));
    float _800 = fma(_792, _237 * NORMAL.y, fma(_791, _244 * TANGENT.y, (_230 * _223) * _790));
    float _803 = fma(_792, _237 * NORMAL.z, fma(_791, _244 * TANGENT.z, (_230 * _224) * _790));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    float _4012 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _811 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4034 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4045 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4056 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4067 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _816 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _830 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _881 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _871);
    float _882 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _871);
    float _883 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _871);
    float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
    float _888 = _881 * _887;
    float _889 = _882 * _887;
    float _890 = _883 * _887;
    float _896 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _897 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _915 = fma(_810, cbSceneParam._m0[5u].z, fma(_809, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _808));
    float _918 = fma(_810, cbSceneParam._m0[6u].z, fma(_809, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _808));
    float _921 = fma(_810, cbSceneParam._m0[7u].z, fma(_809, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _808));
    uint _935 = (_250 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _941 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_935].x;
    float _942 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_935].y;
    float _943 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_935].z;
    float _4078 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _947 = 1.0 - _816;
    float _948 = _944 * _947;
    float _949 = _945 * _947;
    float _950 = _946 * _947;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _816;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _816;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _816;
    float _958 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    vec4 _970 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _896, cbSceneParam._m0[86u].y * _897));
    float _974 = ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * TEXCOORD_5.w) * _970.x;
    float _975 = dot(vec3(_808, _809, _810), vec3(_888, _889, _890));
    float _978 = _975 * 2.0;
    float _982 = (_978 * _808) - _888;
    float _983 = (_978 * _809) - _889;
    float _984 = (_978 * _810) - _890;
    float _988 = abs(dot(vec3(_888, _889, _890), vec3(_808, _809, _810)));
    float _4111 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _990 = sqrt(_811);
    float _1003 = exp2((_990 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_990 * 3.0));
    float _1009 = (1.0 - _1003) * ((_990 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1010 = _1003 * _990;
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1347;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1072 = fma(_1046, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038));
        float _1076 = fma(_1046, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038));
        float _1080 = fma(_1046, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038));
        float _1105 = _1038 + _808;
        float _1106 = _1042 + _809;
        float _1107 = _1046 + _810;
        float _1117 = fma(_1107, cbModelParam._m0[26u].z, fma(_1106, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1105)) - _1072;
        float _1118 = fma(_1107, cbModelParam._m0[27u].z, fma(_1106, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1105)) - _1076;
        float _1119 = fma(_1107, cbModelParam._m0[28u].z, fma(_1106, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1105)) - _1080;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1072 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1076 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[34u].z) + ((((((_1080 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1175 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1141.x + (-0.5));
        float _1177 = _1175 * (_1141.y + (-0.5));
        float _1178 = _1175 * (_1141.z + (-0.5));
        float _1185 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1148.x + (-0.5));
        float _1187 = _1185 * (_1148.y + (-0.5));
        float _1188 = _1185 * (_1148.z + (-0.5));
        float _1195 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1155.x + (-0.5));
        float _1197 = _1195 * (_1155.y + (-0.5));
        float _1198 = _1195 * (_1155.z + (-0.5));
        float _1205 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1162.x + (-0.5));
        float _1207 = _1205 * (_1162.y + (-0.5));
        float _1208 = _1205 * (_1162.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1229 = (dot(vec3(_808, _809, _810), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1239 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _4159 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1241 + 1.0))) + _1246) * _1209;
        float _1256 = _1177 * 0.5;
        float _1257 = _1187 * 0.5;
        float _1258 = _1197 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_808, _809, _810), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4192 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1283 + 1.0))) + _1288) * _1210;
        float _1298 = _1178 * 0.5;
        float _1299 = _1188 * 0.5;
        float _1300 = _1198 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_808, _809, _810), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4225 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1325 + 1.0))) + _1330) * _1211;
        _1347 = _1178;
        _1349 = _1177;
        _1350 = _1176;
        _1351 = _1188;
        _1352 = _1187;
        _1353 = _1186;
        _1354 = _1198;
        _1355 = _1197;
        _1356 = _1196;
        _1357 = _1211;
        _1358 = _1210;
        _1359 = _1209;
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1348;
        _1349 = _1348;
        _1350 = _1348;
        _1351 = _1348;
        _1352 = _1348;
        _1353 = _1348;
        _1354 = _1348;
        _1355 = _1348;
        _1356 = _1348;
        _1357 = _1348;
        _1358 = _1348;
        _1359 = _1348;
        _1360 = 0.0;
        _1361 = 0.0;
        _1362 = 0.0;
    }
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1386 = fma(_1046, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1038));
        float _1390 = fma(_1046, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1038));
        float _1394 = fma(_1046, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1038));
        float _1417 = _1038 + _808;
        float _1418 = _1042 + _809;
        float _1419 = _1046 + _810;
        float _1429 = fma(_1419, cbModelParam._m0[30u].z, fma(_1418, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1417)) - _1386;
        float _1430 = fma(_1419, cbModelParam._m0[31u].z, fma(_1418, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1417)) - _1390;
        float _1431 = fma(_1419, cbModelParam._m0[32u].z, fma(_1418, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1417)) - _1394;
        float _1435 = inversesqrt(dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431)));
        float _1448 = ((_1435 * _1429) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1386 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1435 * _1430) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1390 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1435 * _1431) / cbModelParam._m0[35u].z) + ((((((_1394 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        float _1485 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1452.x + (-0.5));
        float _1487 = _1485 * (_1452.y + (-0.5));
        float _1488 = _1485 * (_1452.z + (-0.5));
        float _1495 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1459.x + (-0.5));
        float _1497 = _1495 * (_1459.y + (-0.5));
        float _1498 = _1495 * (_1459.z + (-0.5));
        float _1505 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1466.x + (-0.5));
        float _1507 = _1505 * (_1466.y + (-0.5));
        float _1508 = _1505 * (_1466.z + (-0.5));
        float _1515 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1473.x + (-0.5));
        float _1517 = _1515 * (_1473.y + (-0.5));
        float _1518 = _1515 * (_1473.z + (-0.5));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = _1486 * 0.5;
        float _1523 = _1496 * 0.5;
        float _1524 = _1506 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_808, _809, _810), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4288 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1549 + 1.0))) + _1554) * _1519;
        float _1564 = _1487 * 0.5;
        float _1565 = _1497 * 0.5;
        float _1566 = _1507 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_808, _809, _810), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4321 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1591 + 1.0))) + _1596) * _1520;
        float _1606 = _1488 * 0.5;
        float _1607 = _1498 * 0.5;
        float _1608 = _1508 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_808, _809, _810), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4354 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1633 + 1.0))) + _1638) * _1521;
        _1655 = _1488;
        _1656 = _1487;
        _1657 = _1486;
        _1658 = _1498;
        _1659 = _1497;
        _1660 = _1496;
        _1661 = _1508;
        _1662 = _1507;
        _1663 = _1506;
        _1664 = _1521;
        _1665 = _1520;
        _1666 = _1519;
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
    }
    else
    {
        _1655 = _1348;
        _1656 = _1348;
        _1657 = _1348;
        _1658 = _1348;
        _1659 = _1348;
        _1660 = _1348;
        _1661 = _1348;
        _1662 = _1348;
        _1663 = _1348;
        _1664 = _1348;
        _1665 = _1348;
        _1666 = _1348;
        _1667 = 0.0;
        _1668 = 0.0;
        _1669 = 0.0;
    }
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1360)) + _1360;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1361)) + _1361;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1362)) + _1362;
    float _1702 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1680, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1680, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1680, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1679));
    float _1723 = _982 * 0.5;
    float _1724 = _983 * 0.5;
    float _1725 = _984 * 0.5;
    float _1726 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1729 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1732 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1766;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1739 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1347, _1351, _1354, _1357));
        float _1743 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1747 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1754 = dot(vec4(cbModelParam._m0[39u]), vec4(_1723, _1724, _1725, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1777;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1768 = dot(vec4(cbModelParam._m0[40u]), vec4(_1723, _1724, _1725, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1781 = (_1777 * cbModelParam._m0[1u].x) + (_1766 * (1.0 - cbModelParam._m0[1u].x));
    float _1791 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1791 : min(cbModelParam._m0[25u].z, _1791));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1840 = fma(_1046, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038)) + cbModelParam._m0[13u].w;
        float _1844 = fma(_1046, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038)) + cbModelParam._m0[14u].w;
        float _1848 = fma(_1046, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038)) + cbModelParam._m0[15u].w;
        float _1851 = fma(_984, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982));
        float _1854 = fma(_984, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982));
        float _1857 = fma(_984, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982));
        float _1885;
        if (_1851 > 0.0)
        {
            _1885 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1885 = frontier_phi_14_12_ladder;
        }
        float _2057;
        if (_1854 > 0.0)
        {
            _2057 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2057 = frontier_phi_23_19_ladder;
        }
        float _2352;
        if (_1857 > 0.0)
        {
            _2352 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2352 = frontier_phi_35_30_ladder;
        }
        float _2354 = isnan(_2057) ? _1885 : (isnan(_1885) ? _2057 : min(_1885, _2057));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1851) + _1840;
        float _2360 = (_2355 * _1854) + _1844;
        float _2361 = (_2355 * _1857) + _1848;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2362;
        float _2366 = _2362 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 > _2366) || ((_2360 < _2364) || ((_2359 < _2364) || (_2359 > _2366))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2361, cbModelParam._m0[9u].z, fma(_2360, cbModelParam._m0[9u].y, _2359 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2361, cbModelParam._m0[10u].z, fma(_2360, cbModelParam._m0[10u].y, _2359 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2361, cbModelParam._m0[11u].z, fma(_2360, cbModelParam._m0[11u].y, _2359 * cbModelParam._m0[11u].x))), _1792);
            frontier_phi_13_35_ladder = _2506.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2506.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2506.x * cbModelParam._m0[1u].y;
        }
        _1873 = frontier_phi_13_35_ladder_2;
        _1875 = frontier_phi_13_35_ladder_1;
        _1877 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_982, _983, _984), _1792);
        _1873 = _1861.x * cbModelParam._m0[1u].y;
        _1875 = _1861.y * cbModelParam._m0[1u].y;
        _1877 = _1861.z * cbModelParam._m0[1u].y;
    }
    float _1881 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1881 : min(cbModelParam._m0[25u].w, _1881));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1936 = fma(_1046, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038)) + cbModelParam._m0[21u].w;
        float _1940 = fma(_1046, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038)) + cbModelParam._m0[22u].w;
        float _1944 = fma(_1046, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038)) + cbModelParam._m0[23u].w;
        float _1947 = fma(_984, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982));
        float _1950 = fma(_984, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982));
        float _1953 = fma(_984, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982));
        float _2062;
        if (_1947 > 0.0)
        {
            _2062 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2062 = frontier_phi_25_21_ladder;
        }
        float _2379;
        if (_1950 > 0.0)
        {
            _2379 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2379 = frontier_phi_37_32_ladder;
        }
        float _2717;
        if (_1953 > 0.0)
        {
            _2717 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2717 = frontier_phi_47_44_ladder;
        }
        float _2719 = isnan(_2379) ? _2062 : (isnan(_2062) ? _2379 : min(_2062, _2379));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _1947) + _1936;
        float _2725 = (_2720 * _1950) + _1940;
        float _2726 = (_2720 * _1953) + _1944;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _1882);
            frontier_phi_22_47_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _1972 = frontier_phi_22_47_ladder_2;
        _1974 = frontier_phi_22_47_ladder_1;
        _1976 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_982, _983, _984), _1882);
        _1972 = _1956.x * cbModelParam._m0[1u].z;
        _1974 = _1956.y * cbModelParam._m0[1u].z;
        _1976 = _1956.z * cbModelParam._m0[1u].z;
    }
    float _1989 = (((_1009 * _958) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_1972 - _1873)) + _1873);
    float _1991 = (((_1009 * _960) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_1974 - _1875)) + _1875);
    float _1993 = (((_1009 * _961) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_1976 - _1877)) + _1877);
    float _1996 = fma(_1993, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1989 * cbSceneParam._m0[89u].x));
    float _1999 = fma(_1993, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1989 * cbSceneParam._m0[90u].x));
    float _2002 = fma(_1993, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, _1989 * cbSceneParam._m0[91u].x));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2049 = _2036 / _2048;
    float _2050 = _2040 / _2048;
    float _2051 = _2044 / _2048;
    float _2198;
    float _2199;
    float _2200;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2078 = ((uint(_2051 > cbSceneParam._m0[59u].y) + uint(_2051 > cbSceneParam._m0[59u].x)) + uint(_2051 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2079 = _2078 + 43u;
        uint _2087 = _2078 + 44u;
        uint _2095 = _2078 + 45u;
        uint _2103 = _2078 + 46u;
        float _2114 = fma(_2048, cbSceneParam._m0[_2079].w, fma(_2044, cbSceneParam._m0[_2079].z, fma(_2040, cbSceneParam._m0[_2079].y, _2036 * cbSceneParam._m0[_2079].x)));
        float _2118 = fma(_2048, cbSceneParam._m0[_2087].w, fma(_2044, cbSceneParam._m0[_2087].z, fma(_2040, cbSceneParam._m0[_2087].y, _2036 * cbSceneParam._m0[_2087].x)));
        float _2126 = fma(_2048, cbSceneParam._m0[_2103].w, fma(_2044, cbSceneParam._m0[_2103].z, fma(_2040, cbSceneParam._m0[_2103].y, _2036 * cbSceneParam._m0[_2103].x)));
        float _2131 = cbSceneParam._m0[33u].z * _2126;
        float _2133 = cbSceneParam._m0[33u].w * _2126;
        float _2136 = fma(_2048, cbSceneParam._m0[_2095].w, fma(_2044, cbSceneParam._m0[_2095].z, fma(_2040, cbSceneParam._m0[_2095].y, _2036 * cbSceneParam._m0[_2095].x))) / _2126;
        float _2184 = (cbSceneParam._m0[33u].x - sqrt(((_2050 * _2050) + (_2049 * _2049)) + (_2051 * _2051))) * cbSceneParam._m0[33u].y;
        float _4480 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2191 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 + _2114) / _2126, (_2133 + _2118) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2133 + _2114) / _2126, (_2118 - _2131) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 - _2131) / _2126, (_2118 - _2133) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 - _2133) / _2126, (_2131 + _2118) / _2126), _2136), 0.0)).x), vec4(0.25)));
        _2198 = 1.0 - (_2191 * cbSceneParam._m0[34u].x);
        _2199 = 1.0 - (_2191 * cbSceneParam._m0[34u].y);
        _2200 = 1.0 - (_2191 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2198 = 1.0;
        _2199 = 1.0;
        _2200 = 1.0;
    }
    float _2264;
    float _2266;
    float _2268;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2252 = fma(_2048, cbSceneParam._m0[63u].w, fma(_2044, cbSceneParam._m0[63u].z, fma(_2040, cbSceneParam._m0[63u].y, _2036 * cbSceneParam._m0[63u].x)));
        float _2253 = fma(_2048, cbSceneParam._m0[60u].w, fma(_2044, cbSceneParam._m0[60u].z, fma(_2040, cbSceneParam._m0[60u].y, _2036 * cbSceneParam._m0[60u].x))) / _2252;
        float _2254 = fma(_2048, cbSceneParam._m0[61u].w, fma(_2044, cbSceneParam._m0[61u].z, fma(_2040, cbSceneParam._m0[61u].y, _2036 * cbSceneParam._m0[61u].x))) / _2252;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2253 >= cbSceneParam._m0[64u].x) && (_2254 >= cbSceneParam._m0[64u].y)) && (_2253 <= cbSceneParam._m0[64u].z)) && (_2254 <= cbSceneParam._m0[64u].w))
        {
            float _2392 = fma(_2048, cbSceneParam._m0[62u].w, fma(_2044, cbSceneParam._m0[62u].z, fma(_2040, cbSceneParam._m0[62u].y, _2036 * cbSceneParam._m0[62u].x))) / _2252;
            float _2396 = isnan(cbSceneParam._m0[41u].w) ? _2392 : (isnan(_2392) ? cbSceneParam._m0[41u].w : max(_2392, cbSceneParam._m0[41u].w));
            float _2439 = (cbSceneParam._m0[33u].x - sqrt(((_2050 * _2050) + (_2049 * _2049)) + (_2051 * _2051))) * cbSceneParam._m0[33u].y;
            float _4496 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
            float _2446 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2253, cbSceneParam._m0[33u].w + _2254), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2253, _2254 - cbSceneParam._m0[33u].z), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].z, _2254 - cbSceneParam._m0[33u].w), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2254), _2396), 0.0)).x), vec4(0.25)));
            float _2450 = 1.0 - (_2446 * cbSceneParam._m0[34u].x);
            float _2451 = 1.0 - (_2446 * cbSceneParam._m0[34u].y);
            float _2452 = 1.0 - (_2446 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2452) ? _2200 : (isnan(_2200) ? _2452 : min(_2200, _2452));
            frontier_phi_34_33_ladder_1 = isnan(_2451) ? _2199 : (isnan(_2199) ? _2451 : min(_2199, _2451));
            frontier_phi_34_33_ladder_2 = isnan(_2450) ? _2198 : (isnan(_2198) ? _2450 : min(_2198, _2450));
        }
        else
        {
            frontier_phi_34_33_ladder = _2200;
            frontier_phi_34_33_ladder_1 = _2199;
            frontier_phi_34_33_ladder_2 = _2198;
        }
        _2264 = frontier_phi_34_33_ladder_2;
        _2266 = frontier_phi_34_33_ladder_1;
        _2268 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2264 = _2198;
        _2266 = _2199;
        _2268 = _2200;
    }
    uvec4 _2273 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2275 = _2273.x * 14u;
    uint _2276 = _2275 + 13u;
    float _2283 = _974 + (-1.0);
    float _2288 = (cbLight._m0[_2276].x * _2283) + 1.0;
    float _2289 = (cbLight._m0[_2276].y * _2283) + 1.0;
    float _2290 = (cbLight._m0[_2276].z * _2283) + 1.0;
    float _2291 = (cbLight._m0[_2276].w * _2283) + 1.0;
    uint _2292 = _2275 + 5u;
    float _2298 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2302 = _2275 + 4u;
    float _2311 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
    uint _2315 = _2275 | 1u;
    float _2326 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_808, _809, _810));
    float _2329 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_808, _809, _810));
    float _4532 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _4543 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2334 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2336 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * 0.3183098733425140380859375;
    float _2343 = ((cbLight._m0[_2292].x * _2298) * _2336) + (((cbLight._m0[_2302].x * _2264) * _2311) * _2334);
    float _2344 = ((_2298 * cbLight._m0[_2292].y) * _2336) + (((cbLight._m0[_2302].y * _2266) * _2311) * _2334);
    float _2345 = ((_2298 * cbLight._m0[_2292].z) * _2336) + (((cbLight._m0[_2302].z * _2268) * _2311) * _2334);
    uvec4 _2349 = floatBitsToUint(cbLight._m0[_2275 + 12u]);
    bool _2351 = _2349.x == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2351)
    {
        _2453 = _2343;
        _2455 = _2344;
        _2457 = _2345;
    }
    else
    {
        uint _2461 = _2275 + 6u;
        float _2477 = (dot(vec3(cbLight._m0[_2275 + 2u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2478 = _2477 * _2477;
        float _4554 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2479 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2480 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2453 = (((cbLight._m0[_2461].x * 0.3183098733425140380859375) * _2479) * _2480) + _2343;
        _2455 = (((cbLight._m0[_2461].y * 0.3183098733425140380859375) * _2479) * _2480) + _2344;
        _2457 = (((cbLight._m0[_2461].z * 0.3183098733425140380859375) * _2479) * _2480) + _2345;
    }
    bool _2460 = _2349.y == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2460)
    {
        _2515 = _2453;
        _2517 = _2455;
        _2519 = _2457;
    }
    else
    {
        uint _2688 = _2275 + 7u;
        float _2704 = (dot(vec3(cbLight._m0[_2275 + 3u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2705 = _2704 * _2704;
        float _4570 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2706 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2707 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2515 = (((cbLight._m0[_2688].x * 0.3183098733425140380859375) * _2706) * _2707) + _2453;
        _2517 = (((cbLight._m0[_2688].y * 0.3183098733425140380859375) * _2706) * _2707) + _2455;
        _2519 = (((cbLight._m0[_2688].z * 0.3183098733425140380859375) * _2706) * _2707) + _2457;
    }
    uint _2522 = _2275 + 8u;
    float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _811) * 0.949999988079071044921875);
    float _2536 = _2535 * _2535;
    float _2537 = cbLight._m0[_2275].x + _888;
    float _2538 = cbLight._m0[_2275].y + _889;
    float _2539 = cbLight._m0[_2275].z + _890;
    float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
    float _2544 = _2543 * _2537;
    float _2545 = _2543 * _2538;
    float _2546 = _2543 * _2539;
    float _2547 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2275].xyz));
    float _4586 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _4597 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2551 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2552 = dot(vec3(_808, _809, _810), vec3(_2544, _2545, _2546));
    float _4608 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2556 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2544, _2545, _2546));
    float _4619 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2560 = _2536 * _2536;
    float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
    float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
    float _2573 = 0.959999978542327880859375 - _955;
    float _2575 = 0.959999978542327880859375 - _956;
    float _2576 = 0.959999978542327880859375 - _957;
    float _2583 = 1.0 - _2536;
    float _2594 = (0.5 / (((_2551 * ((_2550 * _2583) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2583) + _2536) * _2550))) * _2550;
    float _4630 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
    uint _2610 = _2275 + 9u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _811) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2315].x + _888;
    float _2624 = cbLight._m0[_2315].y + _889;
    float _2625 = cbLight._m0[_2315].z + _890;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2315].xyz));
    float _4641 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2637 = dot(vec3(_808, _809, _810), vec3(_2630, _2631, _2632));
    float _4652 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2630, _2631, _2632));
    float _4663 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2622 * _2622;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
    float _2663 = 1.0 - _2622;
    float _2673 = (0.5 / (((_2551 * ((_2636 * _2663) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2663) + _2622) * _2636))) * _2636;
    float _4674 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2675 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    float _2685 = (((((_2656 * _2573) + _958) * cbLight._m0[_2610].x) * _2675) * _2298) + ((((cbLight._m0[_2522].x * _2264) * ((_2572 * _2573) + _958)) * _2596) * _2311);
    float _2686 = (((((_2656 * _2575) + _960) * cbLight._m0[_2610].y) * _2675) * _2298) + ((((cbLight._m0[_2522].y * _2266) * ((_2572 * _2575) + _960)) * _2596) * _2311);
    float _2687 = (((((_2656 * _2576) + _961) * cbLight._m0[_2610].z) * _2675) * _2298) + ((((cbLight._m0[_2522].z * _2268) * ((_2572 * _2576) + _961)) * _2596) * _2311);
    float _2743;
    float _2745;
    float _2747;
    if (_2351)
    {
        _2743 = _2685;
        _2745 = _2686;
        _2747 = _2687;
    }
    else
    {
        uint _2749 = _2275 + 2u;
        uint _2753 = _2275 + 10u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _811) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _888;
        float _2770 = cbLight._m0[_2749].y + _889;
        float _2771 = cbLight._m0[_2749].z + _890;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2749].xyz));
        float _4685 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2783 = dot(vec3(_808, _809, _810), vec3(_2776, _2777, _2778));
        float _4696 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4707 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0);
        float _2809 = 1.0 - _2768;
        float _2819 = (0.5 / (((_2551 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2809) + _2768) * _2782))) * _2782;
        float _4718 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2821 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2822 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2743 = (((((_2802 * _2573) + _958) * cbLight._m0[_2753].x) * _2821) * _2822) + _2685;
        _2745 = (((((_2802 * _2575) + _960) * cbLight._m0[_2753].y) * _2821) * _2822) + _2686;
        _2747 = (((((_2802 * _2576) + _961) * cbLight._m0[_2753].z) * _2821) * _2822) + _2687;
    }
    float _2853;
    float _2855;
    float _2857;
    if (_2460)
    {
        _2853 = _2743;
        _2855 = _2745;
        _2857 = _2747;
    }
    else
    {
        uint _2864 = _2275 + 3u;
        uint _2868 = _2275 + 11u;
        float _2882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2864].w)) * _811) * 0.949999988079071044921875);
        float _2883 = _2882 * _2882;
        float _2884 = cbLight._m0[_2864].x + _888;
        float _2885 = cbLight._m0[_2864].y + _889;
        float _2886 = cbLight._m0[_2864].z + _890;
        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
        float _2891 = _2890 * _2884;
        float _2892 = _2890 * _2885;
        float _2893 = _2890 * _2886;
        float _2894 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2864].xyz));
        float _4734 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2898 = dot(vec3(_808, _809, _810), vec3(_2891, _2892, _2893));
        float _4745 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2902 = dot(vec3(cbLight._m0[_2864].xyz), vec3(_2891, _2892, _2893));
        float _4756 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2906 = _2883 * _2883;
        float _2910 = ((_2901 * _2901) * (_2906 + (-1.0))) + 1.0;
        float _2917 = exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0);
        float _2924 = 1.0 - _2883;
        float _2934 = (0.5 / (((_2551 * ((_2897 * _2924) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2924) + _2883) * _2897))) * _2897;
        float _4767 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2936 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2906 / ((_2910 * _2910) * 3.141590118408203125));
        float _2937 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2853 = (((((_2917 * _2573) + _958) * cbLight._m0[_2868].x) * _2936) * _2937) + _2743;
        _2855 = (((((_2917 * _2575) + _960) * cbLight._m0[_2868].y) * _2936) * _2937) + _2745;
        _2857 = (((((_2917 * _2576) + _961) * cbLight._m0[_2868].z) * _2936) * _2937) + _2747;
    }
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_2273.y == 0u)
    {
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.x;
        uint _2970 = uint((float(_2958.y) * floor(float(uint(cbSceneParam._m0[85u].y * _897) / _2959))) + floor(float(uint(cbSceneParam._m0[85u].x * _896) / _2959)));
        float _2980 = (log2(_2051 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2981 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        uint _2984 = uint(isnan(14.0) ? _2981 : (isnan(_2981) ? 14.0 : min(_2981, 14.0)));
        uvec4 _2989 = texelFetch(g_lightClusterGridBuffer, int(((_2984 << 2u) + (_2970 << 6u)) >> 2u));
        uint _2990 = _2989.x;
        uint _2991 = _2958.z;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((((1u << ((_2991 >> 4u) & 15u)) + 4294967295u) & _2990) == 0u) || ((_2991 & 240u) == 0u))
        {
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
        }
        else
        {
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            uint _3221 = 0u;
            uint _3230;
            bool _3231;
            for (;;)
            {
                _3230 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3221 << 2u)) >> 2u)).x;
                _3231 = _3230 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3231)
                {
                    frontier_phi_66_pred = _3220;
                    frontier_phi_66_pred_1 = _3219;
                    frontier_phi_66_pred_2 = _3218;
                    frontier_phi_66_pred_3 = _3217;
                    frontier_phi_66_pred_4 = _3216;
                    frontier_phi_66_pred_5 = _3215;
                }
                else
                {
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    uint _3345;
                    _3339 = _3215;
                    _3340 = _3216;
                    _3341 = _3217;
                    _3342 = _3218;
                    _3343 = _3219;
                    _3344 = _3220;
                    _3345 = _3230;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    for (;;)
                    {
                        uint _3349 = uint(findLSB(_3345)) + (_3221 << 5u);
                        uint _3346 = (_3345 + 4294967295u) & _3345;
                        uint _3351 = _3349 * 48u;
                        vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 3u)).x));
                        uint _3371 = (_3349 * 48u) + 4u;
                        vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 3u)).x));
                        uint _3390 = (_3349 * 48u) + 8u;
                        vec3 _3401 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x));
                        float _3405 = _3365.x - _2049;
                        float _3406 = _3365.y - _2050;
                        float _3407 = _3365.z - _2051;
                        float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                        float _3411 = inversesqrt(_3408);
                        float _3412 = _3411 * _3405;
                        float _3413 = _3411 * _3406;
                        float _3414 = _3411 * _3407;
                        float _3415 = dot(vec3(_915, _918, _921), vec3(_3412, _3413, _3414));
                        float _3420 = 1.0 - (_3408 * _3365.w);
                        float _4793 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3421 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3422 = sqrt(_3408) * _3384.w;
                        float _3425 = 1.39999997615814208984375 / (_3422 + 1.39999997615814208984375);
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3415) + _3426;
                        float _3432 = _3422 * _3422;
                        float _3436 = ((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3421) / ((_3432 * 0.699999988079071044921875) + 1.0);
                        float _3440 = (-0.0) - _2049;
                        float _3441 = (-0.0) - _2050;
                        float _3442 = (-0.0) - _2051;
                        float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                        float _3447 = _3446 * _3440;
                        float _3448 = _3446 * _3441;
                        float _3449 = _3446 * _3442;
                        float _3456 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                        float _3457 = 1.0 - _990;
                        float _3464 = sqrt(1.0 - ((1.0 - (_3457 * _3457)) * (1.0 - (_3456 * _3456))));
                        float _3465 = _3464 * _3464;
                        float _3466 = _3465 * _3465;
                        float _3467 = _3447 + _3412;
                        float _3468 = _3448 + _3413;
                        float _3469 = _3449 + _3414;
                        float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                        float _3477 = dot(vec3(_915, _918, _921), vec3(_3447, _3448, _3449));
                        float _4809 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3481 = dot(vec3(_915, _918, _921), vec3(_3473 * _3467, _3473 * _3468, _3473 * _3469));
                        float _4820 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3484 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3488 = ((_3484 * _3484) * (_3466 + (-1.0))) + 1.0;
                        float _3489 = _3425 * _3465;
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3415) + _3490;
                        float _4831 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3495 = 1.0 - _3465;
                        float _3505 = (0.5 / (((_3494 * ((_3480 * _3495) + _3465)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3465) * _3480))) * _3494;
                        float _4842 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3516 = (((_3466 * 3.1415927410125732421875) * (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) / ((_3488 * _3488) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125))) * _3421;
                        _3274 = (_3436 * _3384.x) + _3342;
                        _3275 = (_3436 * _3384.y) + _3343;
                        _3276 = (_3436 * _3384.z) + _3344;
                        _3271 = (_3516 * _3401.x) + _3339;
                        _3272 = (_3516 * _3401.y) + _3340;
                        _3273 = (_3516 * _3401.z) + _3341;
                        if (_3346 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3339 = _3271;
                            _3340 = _3272;
                            _3341 = _3273;
                            _3342 = _3274;
                            _3343 = _3275;
                            _3344 = _3276;
                            _3345 = _3346;
                        }
                    }
                    frontier_phi_66_pred = _3276;
                    frontier_phi_66_pred_1 = _3275;
                    frontier_phi_66_pred_2 = _3274;
                    frontier_phi_66_pred_3 = _3273;
                    frontier_phi_66_pred_4 = _3272;
                    frontier_phi_66_pred_5 = _3271;
                }
                _3081 = frontier_phi_66_pred;
                _3079 = frontier_phi_66_pred_1;
                _3077 = frontier_phi_66_pred_2;
                _3075 = frontier_phi_66_pred_3;
                _3073 = frontier_phi_66_pred_4;
                _3071 = frontier_phi_66_pred_5;
                uint _3222 = _3221 + 1u;
                if (_3222 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3215 = _3071;
                    _3216 = _3073;
                    _3217 = _3075;
                    _3218 = _3077;
                    _3219 = _3079;
                    _3220 = _3081;
                    _3221 = _3222;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
        }
        uvec4 _3084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3085 = _3084.z;
        uint _3087 = (_3085 >> 8u) & 15u;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        if (((4294967295u << _3087) & _2990) == 0u)
        {
            _3183 = _3070;
            _3185 = _3072;
            _3187 = _3074;
            _3189 = _3076;
            _3191 = _3078;
            _3193 = _3080;
        }
        else
        {
            float _3208 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
            float _3209 = _3208 * _2049;
            float _3210 = _3208 * _2050;
            float _3211 = _3208 * _2051;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3087 < ((_3085 >> 12u) & 15u))
            {
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3322 = _3070;
                float _3323 = _3072;
                float _3324 = _3074;
                float _3325 = _3076;
                float _3326 = _3078;
                float _3327 = _3080;
                uint _3328 = _3087;
                uint _3337;
                bool _3338;
                for (;;)
                {
                    _3337 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3328 << 2u)) >> 2u)).x;
                    _3338 = _3337 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3338)
                    {
                        frontier_phi_72_pred = _3327;
                        frontier_phi_72_pred_1 = _3326;
                        frontier_phi_72_pred_2 = _3325;
                        frontier_phi_72_pred_3 = _3324;
                        frontier_phi_72_pred_4 = _3323;
                        frontier_phi_72_pred_5 = _3322;
                    }
                    else
                    {
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3534 = _3322;
                        float _3535 = _3323;
                        float _3536 = _3324;
                        float _3537 = _3325;
                        float _3538 = _3326;
                        float _3539 = _3327;
                        uint _3540 = _3337;
                        uint _3541;
                        vec4 _3566;
                        float _3567;
                        vec4 _3582;
                        vec3 _3594;
                        vec4 _3609;
                        vec4 _3624;
                        float _3670;
                        bool _3671;
                        for (;;)
                        {
                            uint _3551 = ((_3328 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3540));
                            _3541 = (_3540 + 4294967295u) & _3540;
                            uint _3553 = _3551 * 40u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            _3567 = _3566.w;
                            uint _3569 = (_3551 * 40u) + 4u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3551 * 40u) + 8u;
                            _3594 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x));
                            uint _3596 = (_3551 * 40u) + 16u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3551 * 40u) + 20u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3551 * 40u) + 24u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3645 = (_3551 * 40u) + 28u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            _3670 = fma(_2051, _3658.z, fma(_2050, _3658.y, _3658.x * _2049)) + _3658.w;
                            _3671 = !((fma(_2051, _3639.z, fma(_2050, _3639.y, _3639.x * _2049)) + _3639.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3671)
                            {
                                float _3698 = _3566.x - _2049;
                                float _3699 = _3566.y - _2050;
                                float _3700 = _3566.z - _2051;
                                float _3701 = dot(vec3(_3698, _3699, _3700), vec3(_3698, _3699, _3700));
                                float _3704 = inversesqrt(_3701);
                                float _3705 = _3704 * _3698;
                                float _3706 = _3704 * _3699;
                                float _3707 = _3704 * _3700;
                                float _3711 = 1.0 - (_3701 / (_3567 * _3567));
                                float _4853 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3716 = sqrt(_3701) * _3582.w;
                                float _3718 = 1.39999997615814208984375 / (_3716 + 1.39999997615814208984375);
                                float _3719 = _3718 * _3718;
                                float _3722 = ((1.0 - _3719) * dot(vec3(_3705, _3706, _3707), vec3(_915, _918, _921))) + _3719;
                                float _3725 = _3716 * _3716;
                                float _3729 = (fma(_2051, _3609.z, fma(_2050, _3609.y, _3609.x * _2049)) + _3609.w) / _3670;
                                float _3730 = (fma(_2051, _3624.z, fma(_2050, _3624.y, _3624.x * _2049)) + _3624.w) / _3670;
                                float _3734 = 1.0 - dot(vec2(_3729, _3730), vec2(_3729, _3730));
                                float _4869 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3736 = _3735 * (((isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0))) * _3712) / ((_3725 * 0.699999988079071044921875) + 1.0));
                                float _3748 = exp2(log2(1.0 / ((_3725 * 3.5) + 5.0)) * 0.25);
                                float _3749 = 1.0 - _990;
                                float _3756 = sqrt(1.0 - ((1.0 - (_3749 * _3749)) * (1.0 - (_3748 * _3748))));
                                float _3757 = _3756 * _3756;
                                float _3758 = _3757 * _3757;
                                float _3759 = _3705 - _3209;
                                float _3760 = _3706 - _3210;
                                float _3761 = _3707 - _3211;
                                float _3765 = inversesqrt(dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761)));
                                float _3769 = dot(vec3(_915, _918, _921), vec3((-0.0) - _3209, (-0.0) - _3210, (-0.0) - _3211));
                                float _4880 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3773 = dot(vec3(_915, _918, _921), vec3(_3765 * _3759, _3765 * _3760, _3765 * _3761));
                                float _4891 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3776 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3780 = ((_3776 * _3776) * (_3758 + (-1.0))) + 1.0;
                                float _3781 = _3718 * _3757;
                                float _3782 = _3781 * _3781;
                                float _3788 = ((1.0 - _3782) * dot(vec3(_915, _918, _921), vec3(_3705, _3706, _3707))) + _3782;
                                float _4902 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3790 = 1.0 - _3757;
                                float _3800 = (0.5 / (((_3789 * ((_3772 * _3790) + _3757)) + 9.9999999392252902907785028219223e-09) + (((_3789 * _3790) + _3757) * _3772))) * _3789;
                                float _4913 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3810 = (_3735 * _3712) * (((_3758 * 3.1415927410125732421875) * (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) / ((_3780 * _3780) * ((_3725 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3736 * _3582.y;
                                frontier_phi_78_pred_1 = _3736 * _3582.x;
                                frontier_phi_78_pred_2 = _3810 * _3594.z;
                                frontier_phi_78_pred_3 = _3810 * _3594.y;
                                frontier_phi_78_pred_4 = _3810 * _3594.x;
                                frontier_phi_78_pred_5 = _3736 * _3582.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3818 = frontier_phi_78_pred;
                            _3817 = frontier_phi_78_pred_1;
                            _3816 = frontier_phi_78_pred_2;
                            _3815 = frontier_phi_78_pred_3;
                            _3814 = frontier_phi_78_pred_4;
                            _3819 = frontier_phi_78_pred_5;
                            _3524 = _3817 + _3537;
                            _3525 = _3818 + _3538;
                            _3526 = _3819 + _3539;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            if (_3541 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3541;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3526;
                        frontier_phi_72_pred_1 = _3525;
                        frontier_phi_72_pred_2 = _3524;
                        frontier_phi_72_pred_3 = _3523;
                        frontier_phi_72_pred_4 = _3522;
                        frontier_phi_72_pred_5 = _3521;
                    }
                    _3194 = frontier_phi_72_pred;
                    _3192 = frontier_phi_72_pred_1;
                    _3190 = frontier_phi_72_pred_2;
                    _3188 = frontier_phi_72_pred_3;
                    _3186 = frontier_phi_72_pred_4;
                    _3184 = frontier_phi_72_pred_5;
                    uint _3329 = _3328 + 1u;
                    if (_3329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3322 = _3184;
                        _3323 = _3186;
                        _3324 = _3188;
                        _3325 = _3190;
                        _3326 = _3192;
                        _3327 = _3194;
                        _3328 = _3329;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3194;
                frontier_phi_60_61_ladder_1 = _3192;
                frontier_phi_60_61_ladder_2 = _3188;
                frontier_phi_60_61_ladder_3 = _3186;
                frontier_phi_60_61_ladder_4 = _3184;
                frontier_phi_60_61_ladder_5 = _3190;
            }
            else
            {
                frontier_phi_60_61_ladder = _3080;
                frontier_phi_60_61_ladder_1 = _3078;
                frontier_phi_60_61_ladder_2 = _3074;
                frontier_phi_60_61_ladder_3 = _3072;
                frontier_phi_60_61_ladder_4 = _3070;
                frontier_phi_60_61_ladder_5 = _3076;
            }
            _3183 = frontier_phi_60_61_ladder_4;
            _3185 = frontier_phi_60_61_ladder_3;
            _3187 = frontier_phi_60_61_ladder_2;
            _3189 = frontier_phi_60_61_ladder_5;
            _3191 = frontier_phi_60_61_ladder_1;
            _3193 = frontier_phi_60_61_ladder;
        }
        float _3198 = isnan(1.0) ? _974 : (isnan(_974) ? 1.0 : min(_974, 1.0));
        _3003 = (_3198 * _3189) + _2515;
        _3005 = (_3198 * _3191) + _2517;
        _3007 = (_3198 * _3193) + _2519;
        _3009 = ((_3183 * _958) * _3198) + _2853;
        _3011 = ((_3185 * _960) * _3198) + _2855;
        _3013 = ((_3187 * _961) * _3198) + _2857;
    }
    else
    {
        _3003 = _2515;
        _3005 = _2517;
        _3007 = _2519;
        _3009 = _2853;
        _3011 = _2855;
        _3013 = _2857;
    }
    float _4929 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4940 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4951 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    uint _3033 = _250 + 6u;
    float _3041 = _896 / cbSceneParam._m0[86u].x;
    float _3042 = _897 / cbSceneParam._m0[86u].y;
    vec4 _3056 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, (log2((isnan(cbSceneParam._m0[77u].w) ? _830 : (isnan(_830) ? cbSceneParam._m0[77u].w : min(_830, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3058 = _3056.x;
    float _3059 = _3056.y;
    float _3060 = _3056.z;
    float _3061 = _3056.w;
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    if (_830 > cbSceneParam._m0[78u].w)
    {
        float _3095 = isnan(_830) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _830 : min(cbSceneParam._m0[80u].w, _830));
        float _3096 = _3095 / _830;
        float _3107 = _3096 * _881;
        float _3108 = _882 * _3096;
        float _3109 = (-0.0) - _3108;
        float _3111 = _3096 * _883;
        float _3113 = (cbSceneParam._m0[77u].w * _3109) / _3095;
        float _3114 = _3113 + cbSceneParam._m0[79u].w;
        float _3115 = cbSceneParam._m0[79u].w - _3108;
        float _3121 = sqrt(((_3107 * _3107) + (_3108 * _3108)) + (_3111 * _3111));
        float _3124 = (1.0 - (cbSceneParam._m0[77u].w / _3095)) * _3121;
        float _3129 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3131 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3284;
        if (abs((_3109 - _3113) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3284 = ((((_3114 > 0.0) ? exp2(_3129 * _3114) : (2.0 - exp2(_3131 * _3114))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3124;
        }
        else
        {
            float _3244 = 1.0 / cbSceneParam._m0[80u].x;
            float _3245 = isnan(_3115) ? _3114 : (isnan(_3114) ? _3115 : max(_3114, _3115));
            float _3246 = isnan(_3115) ? _3114 : (isnan(_3114) ? _3115 : min(_3114, _3115));
            float _3255 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : min(_3245, 0.0));
            float _3256 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : min(_3246, 0.0));
            _3284 = ((abs(_3121 / _3109) * cbSceneParam._m0[80u].y) * ((((_3255 - _3256) * 2.0) - ((exp2(_3129 * (isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0)))) - exp2(_3129 * (isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))))) * _3244)) - ((exp2(_3131 * _3255) - exp2(_3131 * _3256)) * _3244))) + (_3124 * cbSceneParam._m0[80u].z);
        }
        vec4 _3286 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, 1.0), 0.0);
        float _3295 = exp2((_3284 * (-1.44269502162933349609375)) * (1.0 - _3286.w));
        float _3296 = log2(_3295);
        float _3312 = log2(_3061);
        _3133 = (exp2(_3312 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].x)) * _3286.x) / cbSceneParam._m0[78u].x)) + _3058;
        _3135 = (exp2(_3312 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].y)) * _3286.y) / cbSceneParam._m0[78u].y)) + _3059;
        _3137 = (exp2(_3312 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].z)) * _3286.z) / cbSceneParam._m0[78u].z)) + _3060;
        _3139 = _3295 * _3061;
    }
    else
    {
        _3133 = _3058;
        _3135 = _3059;
        _3137 = _3060;
        _3139 = _3061;
    }
    float _3151 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3152 = _3151 == 3.0;
    float _3153 = log2(_3139);
    float _3160 = exp2(_3153 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_3003 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _974))) + ((_3009 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1781)) * cbPerFrame._m0[3u].x));
    float _3161 = exp2(_3153 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_3005 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _974))) + ((_3011 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1781)) * cbPerFrame._m0[3u].x));
    float _3162 = exp2(_3153 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_3007 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _974))) + ((_3013 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1781)) * cbPerFrame._m0[3u].x));
    float _3171 = (_3151 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3171 * (_3152 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3133)));
    SV_Target.y = _3171 * (_3152 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3135)));
    SV_Target.z = _3171 * (_3152 ? _3162 : (_3162 + (cbSceneParam._m0[72u].w * _3137)));
    SV_Target.w = cbInstanceData._m0[_3033].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3033].w;
}


