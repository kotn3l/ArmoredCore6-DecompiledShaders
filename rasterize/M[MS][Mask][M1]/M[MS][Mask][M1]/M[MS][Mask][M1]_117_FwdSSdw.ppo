#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1591;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _379.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3939 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _457 = (_450 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _458 = (_450 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _459 = (_450 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _379.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[23u].w) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3950 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _570 = _568.x;
    float _580 = dot(vec4(_570, _568.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _592 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _379.z) * 2.0) - ((((_570 - _580) * cbMtdParam._m0[23u].w) + _580) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3961 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _606 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _310.x) * ((_593 * ((_551.x * cbMtdParam._m0[14u].x) - _530)) + _530);
    float _609 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _310.y) * ((_593 * ((_551.y * cbMtdParam._m0[14u].y) - _531)) + _531);
    float _612 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _310.z) * ((_593 * ((_551.z * cbMtdParam._m0[14u].z) - _532)) + _532);
    vec4 _630 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _651 = _647.z;
    float _658 = ((_630.x - _649) * _450) + _649;
    float _659 = ((_630.y - _650) * _450) + _650;
    float _660 = ((_630.z - _651) * _450) + _651;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _683 = ((_672.x - _658) * _523) + _658;
    float _684 = ((_672.y - _659) * _523) + _659;
    float _685 = ((_672.z - _660) * _523) + _660;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _710 = ((_697.z - _685) * _593) + _685;
    float _713 = ((((_697.x - _683) * _593) + _683) * 2.0) + (-1.0);
    float _715 = ((((_697.y - _684) * _593) + _684) * 2.0) + (-1.0);
    float _716 = dot(vec2(_713, _715), vec2(_713, _715));
    float _3972 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _721 = sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))));
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _760 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _762 = _760.x;
    float _763 = 1.0 - _762;
    float _771 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _774 = ((isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : min(_771, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _783 = (_774 - ((((((_762 - _763) * cbMtdParam._m0[24u].z) + _763) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _774))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3993 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _784 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _791 = (_784 * (cbMtdParam._m0[17u].x - _606)) + _606;
    float _792 = (_784 * (cbMtdParam._m0[17u].y - _609)) + _609;
    float _793 = (_784 * (cbMtdParam._m0[17u].z - _612)) + _612;
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _807 = _805.x;
    float _808 = 1.0 - _807;
    float _833 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_807 - _808) * cbMtdParam._m0[24u].w) + _808) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4004 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _834 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _842 = ((((cbMtdParam._m0[10u].x - _791) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _834) + _791;
    float _843 = ((((cbMtdParam._m0[10u].y - _792) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _834) + _792;
    float _844 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _793)) * _834) + _793;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _872 = _870.x;
    float _889 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _872) * _450) + _872;
    float _906 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _889) * _523) + _889;
    float _923 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _906) * _593) + _906;
    float _927 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _923) * cbMtdParam._m0[19u].z) + _923;
    float _929 = _927 - (_927 * _784);
    float _931 = _929 - (_929 * _834);
    float _935 = (cbMtdParam._m0[19u].w * (_735.z - _710)) + _710;
    vec4 _949 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _956 = (_949.x * 2.0) + (-1.0);
    float _957 = (_949.y * 2.0) + (-1.0);
    float _958 = dot(vec2(_956, _957), vec2(_956, _957));
    float _4015 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _966 = (_784 * (_949.z - _935)) + _935;
    float _969 = ((cbMtdParam._m0[23u].x - _966) * _834) + _966;
    vec4 _992 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _998 = (_992.x * 2.0) + (-1.0);
    float _999 = (_992.y * 2.0) + (-1.0);
    float _1000 = dot(vec2(_998, _999), vec2(_998, _999));
    float _4026 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1008 = (((_735.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _713;
    float _1009 = (((_735.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _715;
    float _1021 = (((_956 - _1008) + (cbMtdParam._m0[21u].x * _1008)) * _784) + _1008;
    float _1022 = (((_957 - _1009) + (cbMtdParam._m0[21u].x * _1009)) * _784) + _1009;
    float _1023 = (_784 * (sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) - _721)) + _721;
    float _1034 = (((_998 - _1021) + (_1021 * cbMtdParam._m0[22u].z)) * _834) + _1021;
    float _1035 = (((_999 - _1022) + (_1022 * cbMtdParam._m0[22u].z)) * _834) + _1022;
    float _1036 = ((sqrt(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) - _1023) * _834) + _1023;
    float _1038 = cbMtdParam._m0[22u].x + _735.w;
    float _1041 = fma(_1036, _258 * NORMAL.x, fma(_1035, _265 * TANGENT.x, (_251 * _243) * _1034));
    float _1044 = fma(_1036, _258 * NORMAL.y, fma(_1035, _265 * TANGENT.y, (_251 * _244) * _1034));
    float _1047 = fma(_1036, _258 * NORMAL.z, fma(_1035, _265 * TANGENT.z, (_251 * _245) * _1034));
    float _1051 = inversesqrt(dot(vec3(_1041, _1044, _1047), vec3(_1041, _1044, _1047)));
    float _1052 = _1051 * _1041;
    float _1053 = _1051 * _1044;
    float _1054 = _1051 * _1047;
    float _4037 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _1055 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _4059 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4070 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4081 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4092 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _1060 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1074 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1124 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1114);
    float _1125 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1114);
    float _1126 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1114);
    float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
    float _1131 = _1124 * _1130;
    float _1132 = _1125 * _1130;
    float _1133 = _1126 * _1130;
    float _1139 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1140 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1158 = fma(_1054, cbSceneParam._m0[5u].z, fma(_1053, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1052));
    float _1161 = fma(_1054, cbSceneParam._m0[6u].z, fma(_1053, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1052));
    float _1164 = fma(_1054, cbSceneParam._m0[7u].z, fma(_1053, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1052));
    uint _1178 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1184 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_1178].x;
    float _1185 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_1178].y;
    float _1186 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_1178].z;
    float _4103 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1187 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1188 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1190 = 1.0 - _1060;
    float _1191 = _1187 * _1190;
    float _1192 = _1188 * _1190;
    float _1193 = _1189 * _1190;
    float _1198 = (_1187 + (-0.039999999105930328369140625)) * _1060;
    float _1199 = (_1188 + (-0.039999999105930328369140625)) * _1060;
    float _1200 = (_1189 + (-0.039999999105930328369140625)) * _1060;
    float _1201 = _1198 + 0.039999999105930328369140625;
    float _1203 = _1199 + 0.039999999105930328369140625;
    float _1204 = _1200 + 0.039999999105930328369140625;
    vec4 _1213 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1139, cbSceneParam._m0[86u].y * _1140));
    float _1217 = ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * TEXCOORD_5.w) * _1213.x;
    float _1218 = dot(vec3(_1052, _1053, _1054), vec3(_1131, _1132, _1133));
    float _1221 = _1218 * 2.0;
    float _1225 = (_1221 * _1052) - _1131;
    float _1226 = (_1221 * _1053) - _1132;
    float _1227 = (_1221 * _1054) - _1133;
    float _1231 = abs(dot(vec3(_1131, _1132, _1133), vec3(_1052, _1053, _1054)));
    float _4136 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _1233 = sqrt(_1055);
    float _1246 = exp2((_1233 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1233 * 3.0));
    float _1252 = (1.0 - _1246) * ((_1233 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1253 = _1246 * _1233;
    float _1281 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1285 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1590;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1315 = fma(_1289, cbModelParam._m0[26u].z, fma(_1285, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1281));
        float _1319 = fma(_1289, cbModelParam._m0[27u].z, fma(_1285, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1281));
        float _1323 = fma(_1289, cbModelParam._m0[28u].z, fma(_1285, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1281));
        float _1348 = _1281 + _1052;
        float _1349 = _1285 + _1053;
        float _1350 = _1289 + _1054;
        float _1360 = fma(_1350, cbModelParam._m0[26u].z, fma(_1349, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1348)) - _1315;
        float _1361 = fma(_1350, cbModelParam._m0[27u].z, fma(_1349, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1348)) - _1319;
        float _1362 = fma(_1350, cbModelParam._m0[28u].z, fma(_1349, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1348)) - _1323;
        float _1366 = inversesqrt(dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362)));
        float _1379 = ((_1366 * _1360) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1315 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1366 * _1361) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1319 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1366 * _1362) / cbModelParam._m0[34u].z) + ((((((_1323 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        float _1418 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1384.x + (-0.5));
        float _1420 = _1418 * (_1384.y + (-0.5));
        float _1421 = _1418 * (_1384.z + (-0.5));
        float _1428 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1391.x + (-0.5));
        float _1430 = _1428 * (_1391.y + (-0.5));
        float _1431 = _1428 * (_1391.z + (-0.5));
        float _1438 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1398.x + (-0.5));
        float _1440 = _1438 * (_1398.y + (-0.5));
        float _1441 = _1438 * (_1398.z + (-0.5));
        float _1448 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1405.x + (-0.5));
        float _1450 = _1448 * (_1405.y + (-0.5));
        float _1451 = _1448 * (_1405.z + (-0.5));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = _1419 * 0.5;
        float _1456 = _1429 * 0.5;
        float _1457 = _1439 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1472 = (dot(vec3(_1052, _1053, _1054), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1482 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4184 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1484 + 1.0))) + _1489) * _1452;
        float _1499 = _1420 * 0.5;
        float _1500 = _1430 * 0.5;
        float _1501 = _1440 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_1052, _1053, _1054), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4217 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1526 + 1.0))) + _1531) * _1453;
        float _1541 = _1421 * 0.5;
        float _1542 = _1431 * 0.5;
        float _1543 = _1441 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_1052, _1053, _1054), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4250 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1568 + 1.0))) + _1573) * _1454;
        _1590 = _1421;
        _1592 = _1420;
        _1593 = _1419;
        _1594 = _1431;
        _1595 = _1430;
        _1596 = _1429;
        _1597 = _1441;
        _1598 = _1440;
        _1599 = _1439;
        _1600 = _1454;
        _1601 = _1453;
        _1602 = _1452;
        _1603 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1604 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1605 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
    }
    else
    {
        _1590 = _1591;
        _1592 = _1591;
        _1593 = _1591;
        _1594 = _1591;
        _1595 = _1591;
        _1596 = _1591;
        _1597 = _1591;
        _1598 = _1591;
        _1599 = _1591;
        _1600 = _1591;
        _1601 = _1591;
        _1602 = _1591;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1628 = fma(_1289, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1281));
        float _1632 = fma(_1289, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1281));
        float _1636 = fma(_1289, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1281));
        float _1659 = _1281 + _1052;
        float _1660 = _1285 + _1053;
        float _1661 = _1289 + _1054;
        float _1671 = fma(_1661, cbModelParam._m0[30u].z, fma(_1660, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1659)) - _1628;
        float _1672 = fma(_1661, cbModelParam._m0[31u].z, fma(_1660, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1659)) - _1632;
        float _1673 = fma(_1661, cbModelParam._m0[32u].z, fma(_1660, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1659)) - _1636;
        float _1677 = inversesqrt(dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673)));
        float _1690 = ((_1677 * _1671) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1628 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1691 = ((_1677 * _1672) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1632 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1692 = ((_1677 * _1673) / cbModelParam._m0[35u].z) + ((((((_1636 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1690, _1691, _1692), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1690, _1691, _1692), 0.0);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1690, _1691, _1692), 0.0);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1690, _1691, _1692), 0.0);
        float _1727 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1694.x + (-0.5));
        float _1729 = _1727 * (_1694.y + (-0.5));
        float _1730 = _1727 * (_1694.z + (-0.5));
        float _1737 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1701.x + (-0.5));
        float _1739 = _1737 * (_1701.y + (-0.5));
        float _1740 = _1737 * (_1701.z + (-0.5));
        float _1747 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1748 = _1747 * (_1708.x + (-0.5));
        float _1749 = _1747 * (_1708.y + (-0.5));
        float _1750 = _1747 * (_1708.z + (-0.5));
        float _1757 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1758 = _1757 * (_1715.x + (-0.5));
        float _1759 = _1757 * (_1715.y + (-0.5));
        float _1760 = _1757 * (_1715.z + (-0.5));
        float _1761 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1762 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1763 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1764 = _1728 * 0.5;
        float _1765 = _1738 * 0.5;
        float _1766 = _1748 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_1052, _1053, _1054), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1761 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4313 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1791 + 1.0))) + _1796) * _1761;
        float _1806 = _1729 * 0.5;
        float _1807 = _1739 * 0.5;
        float _1808 = _1749 * 0.5;
        float _1809 = dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808));
        float _1814 = (_1809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1809);
        float _1822 = (dot(vec3(_1052, _1053, _1054), vec3(_1814 * _1806, _1814 * _1807, _1814 * _1808)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1831 = sqrt(((_1807 * _1807) + (_1806 * _1806)) + (_1808 * _1808)) / (_1762 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1833 = _1832 * 2.0;
        float _1837 = (1.0 - _1832) / (_1832 + 1.0);
        float _4346 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1847 = ((((1.0 - _1838) * (_1833 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1833 + 1.0))) + _1838) * _1762;
        float _1848 = _1730 * 0.5;
        float _1849 = _1740 * 0.5;
        float _1850 = _1750 * 0.5;
        float _1851 = dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850));
        float _1856 = (_1851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1851);
        float _1864 = (dot(vec3(_1052, _1053, _1054), vec3(_1856 * _1848, _1856 * _1849, _1856 * _1850)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1873 = sqrt(((_1849 * _1849) + (_1848 * _1848)) + (_1850 * _1850)) / (_1763 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1875 = _1874 * 2.0;
        float _1879 = (1.0 - _1874) / (_1874 + 1.0);
        float _4379 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1889 = ((((1.0 - _1880) * (_1875 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1875 + 1.0))) + _1880) * _1763;
        _1897 = _1730;
        _1898 = _1729;
        _1899 = _1728;
        _1900 = _1740;
        _1901 = _1739;
        _1902 = _1738;
        _1903 = _1750;
        _1904 = _1749;
        _1905 = _1748;
        _1906 = _1763;
        _1907 = _1762;
        _1908 = _1761;
        _1909 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
        _1910 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)));
        _1911 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)));
    }
    else
    {
        _1897 = _1591;
        _1898 = _1591;
        _1899 = _1591;
        _1900 = _1591;
        _1901 = _1591;
        _1902 = _1591;
        _1903 = _1591;
        _1904 = _1591;
        _1905 = _1591;
        _1906 = _1591;
        _1907 = _1591;
        _1908 = _1591;
        _1909 = 0.0;
        _1910 = 0.0;
        _1911 = 0.0;
    }
    float _1921 = (cbModelParam._m0[1u].x * (_1909 - _1603)) + _1603;
    float _1922 = (cbModelParam._m0[1u].x * (_1910 - _1604)) + _1604;
    float _1923 = (cbModelParam._m0[1u].x * (_1911 - _1605)) + _1605;
    float _1944 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1921 * cbSceneParam._m0[89u].x));
    float _1947 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1921 * cbSceneParam._m0[90u].x));
    float _1950 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1921));
    float _1965 = _1225 * 0.5;
    float _1966 = _1226 * 0.5;
    float _1967 = _1227 * 0.5;
    float _1968 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1899, _1902, _1905, _1908));
    float _1971 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1898, _1901, _1904, _1907));
    float _1974 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1897, _1900, _1903, _1906));
    float _2008;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1981 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1590, _1594, _1597, _1600));
        float _1985 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1592, _1595, _1598, _1601));
        float _1989 = dot(vec4(_1965, _1966, _1967, 1.0), vec4(_1593, _1596, _1599, _1602));
        float _1996 = dot(vec4(cbModelParam._m0[39u]), vec4(_1965, _1966, _1967, 1.0));
        _2008 = dot(vec3(isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0)), isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1996) ? 0.0 : (isnan(0.0) ? _1996 : max(0.0, _1996))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2008 = 1.0;
    }
    float _2019;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2010 = dot(vec4(cbModelParam._m0[40u]), vec4(_1965, _1966, _1967, 1.0));
        _2019 = dot(vec3(isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0)), isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)), isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2010) ? 0.0 : (isnan(0.0) ? _2010 : max(0.0, _2010))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2019 = 1.0;
    }
    float _2023 = (_2019 * cbModelParam._m0[1u].x) + (_2008 * (1.0 - cbModelParam._m0[1u].x));
    float _2033 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1055);
    float _2034 = isnan(_2033) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2033 : min(cbModelParam._m0[25u].z, _2033));
    float _2114;
    float _2116;
    float _2118;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2081 = fma(_1289, cbModelParam._m0[13u].z, fma(_1285, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1281)) + cbModelParam._m0[13u].w;
        float _2085 = fma(_1289, cbModelParam._m0[14u].z, fma(_1285, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1281)) + cbModelParam._m0[14u].w;
        float _2089 = fma(_1289, cbModelParam._m0[15u].z, fma(_1285, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1281)) + cbModelParam._m0[15u].w;
        float _2092 = fma(_1227, cbModelParam._m0[13u].z, fma(_1226, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1225));
        float _2095 = fma(_1227, cbModelParam._m0[14u].z, fma(_1226, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1225));
        float _2098 = fma(_1227, cbModelParam._m0[15u].z, fma(_1226, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1225));
        float _2126;
        if (_2092 > 0.0)
        {
            _2126 = abs((1.0 - _2081) / _2092);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2081 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2126 = frontier_phi_14_12_ladder;
        }
        float _2350;
        if (_2095 > 0.0)
        {
            _2350 = abs((1.0 - _2085) / _2095);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2085 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2350 = frontier_phi_23_19_ladder;
        }
        float _2607;
        if (_2098 > 0.0)
        {
            _2607 = abs((1.0 - _2089) / _2098);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2089 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2607 = frontier_phi_35_30_ladder;
        }
        float _2609 = isnan(_2350) ? _2126 : (isnan(_2126) ? _2350 : min(_2126, _2350));
        float _2610 = isnan(_2607) ? _2609 : (isnan(_2609) ? _2607 : min(_2609, _2607));
        float _2614 = (_2610 * _2092) + _2081;
        float _2615 = (_2610 * _2095) + _2085;
        float _2616 = (_2610 * _2098) + _2089;
        float _2617 = _2610 * 9.9999997473787516355514526367188e-05;
        float _2619 = (-1.0) - _2617;
        float _2621 = _2617 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2616 > _2621) || ((_2616 < _2619) || ((_2615 > _2621) || ((_2615 < _2619) || ((_2614 < _2619) || (_2614 > _2621))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2744 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2616, cbModelParam._m0[9u].z, fma(_2615, cbModelParam._m0[9u].y, _2614 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2616, cbModelParam._m0[10u].z, fma(_2615, cbModelParam._m0[10u].y, _2614 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2616, cbModelParam._m0[11u].z, fma(_2615, cbModelParam._m0[11u].y, _2614 * cbModelParam._m0[11u].x))), _2034);
            frontier_phi_13_35_ladder = _2744.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2744.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2744.x * cbModelParam._m0[1u].y;
        }
        _2114 = frontier_phi_13_35_ladder_2;
        _2116 = frontier_phi_13_35_ladder_1;
        _2118 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2102 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1225, _1226, _1227), _2034);
        _2114 = _2102.x * cbModelParam._m0[1u].y;
        _2116 = _2102.y * cbModelParam._m0[1u].y;
        _2118 = _2102.z * cbModelParam._m0[1u].y;
    }
    float _2122 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1055);
    float _2123 = isnan(_2122) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2122 : min(cbModelParam._m0[25u].w, _2122));
    float _2213;
    float _2215;
    float _2217;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2177 = fma(_1289, cbModelParam._m0[21u].z, fma(_1285, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1281)) + cbModelParam._m0[21u].w;
        float _2181 = fma(_1289, cbModelParam._m0[22u].z, fma(_1285, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1281)) + cbModelParam._m0[22u].w;
        float _2185 = fma(_1289, cbModelParam._m0[23u].z, fma(_1285, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1281)) + cbModelParam._m0[23u].w;
        float _2188 = fma(_1227, cbModelParam._m0[21u].z, fma(_1226, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1225));
        float _2191 = fma(_1227, cbModelParam._m0[22u].z, fma(_1226, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1225));
        float _2194 = fma(_1227, cbModelParam._m0[23u].z, fma(_1226, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1225));
        float _2355;
        if (_2188 > 0.0)
        {
            _2355 = abs((1.0 - _2177) / _2188);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2188 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2177 + 1.0) / _2188);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2355 = frontier_phi_25_21_ladder;
        }
        float _2634;
        if (_2191 > 0.0)
        {
            _2634 = abs((1.0 - _2181) / _2191);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2191 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2181 + 1.0) / _2191);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2634 = frontier_phi_37_32_ladder;
        }
        float _2847;
        if (_2194 > 0.0)
        {
            _2847 = abs((1.0 - _2185) / _2194);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2194 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2185 + 1.0) / _2194);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2847 = frontier_phi_46_43_ladder;
        }
        float _2849 = isnan(_2634) ? _2355 : (isnan(_2355) ? _2634 : min(_2355, _2634));
        float _2850 = isnan(_2847) ? _2849 : (isnan(_2849) ? _2847 : min(_2849, _2847));
        float _2854 = (_2850 * _2188) + _2177;
        float _2855 = (_2850 * _2191) + _2181;
        float _2856 = (_2850 * _2194) + _2185;
        float _2857 = _2850 * 9.9999997473787516355514526367188e-05;
        float _2858 = (-1.0) - _2857;
        float _2860 = _2857 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2856 > _2860) || ((_2856 < _2858) || ((_2855 > _2860) || ((_2855 < _2858) || ((_2854 < _2858) || (_2854 > _2860))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3055 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2856, cbModelParam._m0[17u].z, fma(_2855, cbModelParam._m0[17u].y, _2854 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2856, cbModelParam._m0[18u].z, fma(_2855, cbModelParam._m0[18u].y, _2854 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2856, cbModelParam._m0[19u].z, fma(_2855, cbModelParam._m0[19u].y, _2854 * cbModelParam._m0[19u].x))), _2123);
            frontier_phi_22_46_ladder = _3055.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3055.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3055.x * cbModelParam._m0[1u].z;
        }
        _2213 = frontier_phi_22_46_ladder_2;
        _2215 = frontier_phi_22_46_ladder_1;
        _2217 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2197 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1225, _1226, _1227), _2123);
        _2213 = _2197.x * cbModelParam._m0[1u].z;
        _2215 = _2197.y * cbModelParam._m0[1u].z;
        _2217 = _2197.z * cbModelParam._m0[1u].z;
    }
    float _2230 = (((_1252 * _1201) + _1253) * _1217) * ((cbModelParam._m0[1u].w * (_2213 - _2114)) + _2114);
    float _2232 = (((_1252 * _1203) + _1253) * _1217) * ((cbModelParam._m0[1u].w * (_2215 - _2116)) + _2116);
    float _2234 = (((_1252 * _1204) + _1253) * _1217) * ((cbModelParam._m0[1u].w * (_2217 - _2118)) + _2118);
    float _2237 = fma(_2234, cbSceneParam._m0[89u].z, fma(_2232, cbSceneParam._m0[89u].y, _2230 * cbSceneParam._m0[89u].x));
    float _2240 = fma(_2234, cbSceneParam._m0[90u].z, fma(_2232, cbSceneParam._m0[90u].y, _2230 * cbSceneParam._m0[90u].x));
    float _2243 = fma(_2234, cbSceneParam._m0[91u].z, fma(_2232, cbSceneParam._m0[91u].y, _2230 * cbSceneParam._m0[91u].x));
    vec4 _2251 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1139, _1140));
    float _2253 = _2251.w;
    float _2265 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2253);
    float _2266 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2253);
    float _2267 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2253);
    uvec4 _2271 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2273 = _2271.x * 14u;
    uint _2274 = _2273 + 13u;
    float _2281 = _1217 + (-1.0);
    float _2286 = (cbLight._m0[_2274].x * _2281) + 1.0;
    float _2287 = (cbLight._m0[_2274].y * _2281) + 1.0;
    float _2288 = (cbLight._m0[_2274].z * _2281) + 1.0;
    float _2289 = (cbLight._m0[_2274].w * _2281) + 1.0;
    uint _2290 = _2273 + 5u;
    float _2296 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
    uint _2300 = _2273 + 4u;
    float _2309 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
    uint _2313 = _2273 | 1u;
    float _2324 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_1052, _1053, _1054));
    float _2327 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_1052, _1053, _1054));
    float _4515 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _4526 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2332 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2334 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * 0.3183098733425140380859375;
    float _2341 = ((cbLight._m0[_2290].x * _2296) * _2334) + (((cbLight._m0[_2300].x * _2265) * _2309) * _2332);
    float _2342 = ((_2296 * cbLight._m0[_2290].y) * _2334) + (((cbLight._m0[_2300].y * _2266) * _2309) * _2332);
    float _2343 = ((_2296 * cbLight._m0[_2290].z) * _2334) + (((cbLight._m0[_2300].z * _2267) * _2309) * _2332);
    uvec4 _2347 = floatBitsToUint(cbLight._m0[_2273 + 12u]);
    bool _2349 = _2347.x == 0u;
    float _2360;
    float _2362;
    float _2364;
    if (_2349)
    {
        _2360 = _2341;
        _2362 = _2342;
        _2364 = _2343;
    }
    else
    {
        uint _2368 = _2273 + 6u;
        float _2384 = (dot(vec3(cbLight._m0[_2273 + 2u].xyz), vec3(_1052, _1053, _1054)) * 0.5) + 0.5;
        float _2385 = _2384 * _2384;
        float _4537 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2386 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2387 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2360 = (((cbLight._m0[_2368].x * 0.3183098733425140380859375) * _2386) * _2387) + _2341;
        _2362 = (((cbLight._m0[_2368].y * 0.3183098733425140380859375) * _2386) * _2387) + _2342;
        _2364 = (((cbLight._m0[_2368].z * 0.3183098733425140380859375) * _2386) * _2387) + _2343;
    }
    bool _2367 = _2347.y == 0u;
    float _2405;
    float _2407;
    float _2409;
    if (_2367)
    {
        _2405 = _2360;
        _2407 = _2362;
        _2409 = _2364;
    }
    else
    {
        uint _2578 = _2273 + 7u;
        float _2594 = (dot(vec3(cbLight._m0[_2273 + 3u].xyz), vec3(_1052, _1053, _1054)) * 0.5) + 0.5;
        float _2595 = _2594 * _2594;
        float _4553 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2596 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2597 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
        _2405 = (((cbLight._m0[_2578].x * 0.3183098733425140380859375) * _2596) * _2597) + _2360;
        _2407 = (((cbLight._m0[_2578].y * 0.3183098733425140380859375) * _2596) * _2597) + _2362;
        _2409 = (((cbLight._m0[_2578].z * 0.3183098733425140380859375) * _2596) * _2597) + _2364;
    }
    uint _2412 = _2273 + 8u;
    float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _1055) * 0.949999988079071044921875);
    float _2426 = _2425 * _2425;
    float _2427 = cbLight._m0[_2273].x + _1131;
    float _2428 = cbLight._m0[_2273].y + _1132;
    float _2429 = cbLight._m0[_2273].z + _1133;
    float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
    float _2434 = _2433 * _2427;
    float _2435 = _2433 * _2428;
    float _2436 = _2433 * _2429;
    float _2437 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2273].xyz));
    float _4569 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _4580 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _2441 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2442 = dot(vec3(_1052, _1053, _1054), vec3(_2434, _2435, _2436));
    float _4591 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2434, _2435, _2436));
    float _4602 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2426 * _2426;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
    float _2463 = 0.959999978542327880859375 - _1198;
    float _2465 = 0.959999978542327880859375 - _1199;
    float _2466 = 0.959999978542327880859375 - _1200;
    float _2473 = 1.0 - _2426;
    float _2484 = (0.5 / (((_2441 * ((_2440 * _2473) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2473) + _2426) * _2440))) * _2440;
    float _4613 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2486 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    uint _2500 = _2273 + 9u;
    float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _1055) * 0.949999988079071044921875);
    float _2512 = _2511 * _2511;
    float _2513 = cbLight._m0[_2313].x + _1131;
    float _2514 = cbLight._m0[_2313].y + _1132;
    float _2515 = cbLight._m0[_2313].z + _1133;
    float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
    float _2520 = _2519 * _2513;
    float _2521 = _2519 * _2514;
    float _2522 = _2519 * _2515;
    float _2523 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2313].xyz));
    float _4624 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2527 = dot(vec3(_1052, _1053, _1054), vec3(_2520, _2521, _2522));
    float _4635 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2530 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2531 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2520, _2521, _2522));
    float _4646 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2535 = _2512 * _2512;
    float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
    float _2546 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
    float _2553 = 1.0 - _2512;
    float _2563 = (0.5 / (((_2441 * ((_2526 * _2553) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2553) + _2512) * _2526))) * _2526;
    float _4657 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2565 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
    float _2575 = (((((_2546 * _2463) + _1201) * cbLight._m0[_2500].x) * _2565) * _2296) + ((((cbLight._m0[_2412].x * _2265) * ((_2462 * _2463) + _1201)) * _2486) * _2309);
    float _2576 = (((((_2546 * _2465) + _1203) * cbLight._m0[_2500].y) * _2565) * _2296) + ((((cbLight._m0[_2412].y * _2266) * ((_2462 * _2465) + _1203)) * _2486) * _2309);
    float _2577 = (((((_2546 * _2466) + _1204) * cbLight._m0[_2500].z) * _2565) * _2296) + ((((cbLight._m0[_2412].z * _2267) * ((_2462 * _2466) + _1204)) * _2486) * _2309);
    float _2639;
    float _2641;
    float _2643;
    if (_2349)
    {
        _2639 = _2575;
        _2641 = _2576;
        _2643 = _2577;
    }
    else
    {
        uint _2645 = _2273 + 2u;
        uint _2649 = _2273 + 10u;
        float _2663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2645].w)) * _1055) * 0.949999988079071044921875);
        float _2664 = _2663 * _2663;
        float _2665 = cbLight._m0[_2645].x + _1131;
        float _2666 = cbLight._m0[_2645].y + _1132;
        float _2667 = cbLight._m0[_2645].z + _1133;
        float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
        float _2672 = _2671 * _2665;
        float _2673 = _2671 * _2666;
        float _2674 = _2671 * _2667;
        float _2675 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2645].xyz));
        float _4668 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2679 = dot(vec3(_1052, _1053, _1054), vec3(_2672, _2673, _2674));
        float _4679 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2683 = dot(vec3(cbLight._m0[_2645].xyz), vec3(_2672, _2673, _2674));
        float _4690 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2687 = _2664 * _2664;
        float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
        float _2698 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
        float _2705 = 1.0 - _2664;
        float _2715 = (0.5 / (((_2441 * ((_2678 * _2705) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2705) + _2664) * _2678))) * _2678;
        float _4701 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2717 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
        float _2718 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2639 = (((((_2698 * _2463) + _1201) * cbLight._m0[_2649].x) * _2717) * _2718) + _2575;
        _2641 = (((((_2698 * _2465) + _1203) * cbLight._m0[_2649].y) * _2717) * _2718) + _2576;
        _2643 = (((((_2698 * _2466) + _1204) * cbLight._m0[_2649].z) * _2717) * _2718) + _2577;
    }
    float _2753;
    float _2755;
    float _2757;
    if (_2367)
    {
        _2753 = _2639;
        _2755 = _2641;
        _2757 = _2643;
    }
    else
    {
        uint _2764 = _2273 + 3u;
        uint _2768 = _2273 + 11u;
        float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2764].w)) * _1055) * 0.949999988079071044921875);
        float _2783 = _2782 * _2782;
        float _2784 = cbLight._m0[_2764].x + _1131;
        float _2785 = cbLight._m0[_2764].y + _1132;
        float _2786 = cbLight._m0[_2764].z + _1133;
        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
        float _2791 = _2790 * _2784;
        float _2792 = _2790 * _2785;
        float _2793 = _2790 * _2786;
        float _2794 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2764].xyz));
        float _4717 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2798 = dot(vec3(_1052, _1053, _1054), vec3(_2791, _2792, _2793));
        float _4728 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2801 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2802 = dot(vec3(cbLight._m0[_2764].xyz), vec3(_2791, _2792, _2793));
        float _4739 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2806 = _2783 * _2783;
        float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
        float _2817 = exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0);
        float _2824 = 1.0 - _2783;
        float _2834 = (0.5 / (((_2441 * ((_2797 * _2824) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2824) + _2783) * _2797))) * _2797;
        float _4750 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2836 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
        float _2837 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
        _2753 = (((((_2817 * _2463) + _1201) * cbLight._m0[_2768].x) * _2836) * _2837) + _2639;
        _2755 = (((((_2817 * _2465) + _1203) * cbLight._m0[_2768].y) * _2836) * _2837) + _2641;
        _2757 = (((((_2817 * _2466) + _1204) * cbLight._m0[_2768].z) * _2836) * _2837) + _2643;
    }
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    if (_2271.y == 0u)
    {
        float _2912 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2913 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2912;
        float _2914 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2912;
        float _2915 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2912;
        uvec4 _2927 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2928 = _2927.x;
        uint _2939 = uint((float(_2927.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1140) / _2928))) + floor(float(uint(cbSceneParam._m0[85u].x * _1139) / _2928)));
        float _2949 = (log2(_2915 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2950 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        uint _2953 = uint(isnan(14.0) ? _2950 : (isnan(_2950) ? 14.0 : min(_2950, 14.0)));
        uvec4 _2958 = texelFetch(g_lightClusterGridBuffer, int(((_2953 << 2u) + (_2939 << 6u)) >> 2u));
        uint _2959 = _2958.x;
        uint _2960 = _2927.z;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        if (((((1u << ((_2960 >> 4u) & 15u)) + 4294967295u) & _2959) == 0u) || ((_2960 & 240u) == 0u))
        {
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
        }
        else
        {
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            uint _3211 = 0u;
            uint _3220;
            bool _3221;
            for (;;)
            {
                _3220 = texelFetch(g_lightClassification, int((((_2953 << 5u) + (_2939 << 9u)) + (_3211 << 2u)) >> 2u)).x;
                _3221 = _3220 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3221)
                {
                    frontier_phi_61_pred = _3205;
                    frontier_phi_61_pred_1 = _3210;
                    frontier_phi_61_pred_2 = _3209;
                    frontier_phi_61_pred_3 = _3208;
                    frontier_phi_61_pred_4 = _3207;
                    frontier_phi_61_pred_5 = _3206;
                }
                else
                {
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    uint _3335;
                    _3329 = _3205;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3220;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    for (;;)
                    {
                        uint _3339 = uint(findLSB(_3335)) + (_3211 << 5u);
                        uint _3336 = (_3335 + 4294967295u) & _3335;
                        uint _3341 = _3339 * 48u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3361 = (_3339 * 48u) + 4u;
                        vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3380 = (_3339 * 48u) + 8u;
                        vec3 _3391 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x));
                        float _3395 = _3355.x - _2913;
                        float _3396 = _3355.y - _2914;
                        float _3397 = _3355.z - _2915;
                        float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                        float _3401 = inversesqrt(_3398);
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3405 = dot(vec3(_1158, _1161, _1164), vec3(_3402, _3403, _3404));
                        float _3410 = 1.0 - (_3398 * _3355.w);
                        float _4776 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3411 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3412 = sqrt(_3398) * _3374.w;
                        float _3415 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3405) + _3416;
                        float _3422 = _3412 * _3412;
                        float _3426 = ((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3411) / ((_3422 * 0.699999988079071044921875) + 1.0);
                        float _3430 = (-0.0) - _2913;
                        float _3431 = (-0.0) - _2914;
                        float _3432 = (-0.0) - _2915;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3447 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                        float _3448 = 1.0 - _1233;
                        float _3455 = sqrt(1.0 - ((1.0 - (_3448 * _3448)) * (1.0 - (_3447 * _3447))));
                        float _3456 = _3455 * _3455;
                        float _3457 = _3456 * _3456;
                        float _3458 = _3437 + _3402;
                        float _3459 = _3438 + _3403;
                        float _3460 = _3439 + _3404;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3468 = dot(vec3(_1158, _1161, _1164), vec3(_3437, _3438, _3439));
                        float _4792 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3471 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3472 = dot(vec3(_1158, _1161, _1164), vec3(_3464 * _3458, _3464 * _3459, _3464 * _3460));
                        float _4803 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3475 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3479 = ((_3475 * _3475) * (_3457 + (-1.0))) + 1.0;
                        float _3480 = _3415 * _3456;
                        float _3481 = _3480 * _3480;
                        float _3484 = ((1.0 - _3481) * _3405) + _3481;
                        float _4814 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3486 = 1.0 - _3456;
                        float _3496 = (0.5 / (((_3485 * ((_3471 * _3486) + _3456)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3456) * _3471))) * _3485;
                        float _4825 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3507 = (((_3457 * 3.1415927410125732421875) * (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) / ((_3479 * _3479) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125))) * _3411;
                        _3264 = (_3426 * _3374.x) + _3332;
                        _3265 = (_3426 * _3374.y) + _3333;
                        _3266 = (_3426 * _3374.z) + _3334;
                        _3261 = (_3507 * _3391.x) + _3329;
                        _3262 = (_3507 * _3391.y) + _3330;
                        _3263 = (_3507 * _3391.z) + _3331;
                        if (_3336 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3329 = _3261;
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3336;
                        }
                    }
                    frontier_phi_61_pred = _3261;
                    frontier_phi_61_pred_1 = _3266;
                    frontier_phi_61_pred_2 = _3265;
                    frontier_phi_61_pred_3 = _3264;
                    frontier_phi_61_pred_4 = _3263;
                    frontier_phi_61_pred_5 = _3262;
                }
                _3061 = frontier_phi_61_pred;
                _3071 = frontier_phi_61_pred_1;
                _3069 = frontier_phi_61_pred_2;
                _3067 = frontier_phi_61_pred_3;
                _3065 = frontier_phi_61_pred_4;
                _3063 = frontier_phi_61_pred_5;
                uint _3212 = _3211 + 1u;
                if (_3212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3205 = _3061;
                    _3206 = _3063;
                    _3207 = _3065;
                    _3208 = _3067;
                    _3209 = _3069;
                    _3210 = _3071;
                    _3211 = _3212;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
        }
        uvec4 _3074 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3075 = _3074.z;
        uint _3077 = (_3075 >> 8u) & 15u;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        if (((4294967295u << _3077) & _2959) == 0u)
        {
            _3173 = _3060;
            _3175 = _3062;
            _3177 = _3064;
            _3179 = _3066;
            _3181 = _3068;
            _3183 = _3070;
        }
        else
        {
            float _3198 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
            float _3199 = _3198 * _2913;
            float _3200 = _3198 * _2914;
            float _3201 = _3198 * _2915;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3077 < ((_3075 >> 12u) & 15u))
            {
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3312 = _3060;
                float _3313 = _3062;
                float _3314 = _3064;
                float _3315 = _3066;
                float _3316 = _3068;
                float _3317 = _3070;
                uint _3318 = _3077;
                uint _3327;
                bool _3328;
                for (;;)
                {
                    _3327 = texelFetch(g_lightClassification, int((((_2953 << 5u) + (_2939 << 9u)) + (_3318 << 2u)) >> 2u)).x;
                    _3328 = _3327 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3328)
                    {
                        frontier_phi_67_pred = _3315;
                        frontier_phi_67_pred_1 = _3316;
                        frontier_phi_67_pred_2 = _3317;
                        frontier_phi_67_pred_3 = _3314;
                        frontier_phi_67_pred_4 = _3313;
                        frontier_phi_67_pred_5 = _3312;
                    }
                    else
                    {
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3525 = _3312;
                        float _3526 = _3313;
                        float _3527 = _3314;
                        float _3528 = _3315;
                        float _3529 = _3316;
                        float _3530 = _3317;
                        uint _3531 = _3327;
                        uint _3532;
                        vec4 _3557;
                        float _3558;
                        vec4 _3573;
                        vec3 _3585;
                        vec4 _3600;
                        vec4 _3615;
                        float _3661;
                        bool _3662;
                        for (;;)
                        {
                            uint _3542 = ((_3318 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3531));
                            _3532 = (_3531 + 4294967295u) & _3531;
                            uint _3544 = _3542 * 40u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3558 = _3557.w;
                            uint _3560 = (_3542 * 40u) + 4u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3575 = (_3542 * 40u) + 8u;
                            _3585 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x));
                            uint _3587 = (_3542 * 40u) + 16u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3542 * 40u) + 20u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3542 * 40u) + 24u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3636 = (_3542 * 40u) + 28u;
                            vec4 _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            _3661 = fma(_2915, _3649.z, fma(_2914, _3649.y, _3649.x * _2913)) + _3649.w;
                            _3662 = !((fma(_2915, _3630.z, fma(_2914, _3630.y, _3630.x * _2913)) + _3630.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3662)
                            {
                                float _3689 = _3557.x - _2913;
                                float _3690 = _3557.y - _2914;
                                float _3691 = _3557.z - _2915;
                                float _3692 = dot(vec3(_3689, _3690, _3691), vec3(_3689, _3690, _3691));
                                float _3695 = inversesqrt(_3692);
                                float _3696 = _3695 * _3689;
                                float _3697 = _3695 * _3690;
                                float _3698 = _3695 * _3691;
                                float _3702 = 1.0 - (_3692 / (_3558 * _3558));
                                float _4836 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3707 = sqrt(_3692) * _3573.w;
                                float _3709 = 1.39999997615814208984375 / (_3707 + 1.39999997615814208984375);
                                float _3710 = _3709 * _3709;
                                float _3713 = ((1.0 - _3710) * dot(vec3(_3696, _3697, _3698), vec3(_1158, _1161, _1164))) + _3710;
                                float _3716 = _3707 * _3707;
                                float _3720 = (fma(_2915, _3600.z, fma(_2914, _3600.y, _3600.x * _2913)) + _3600.w) / _3661;
                                float _3721 = (fma(_2915, _3615.z, fma(_2914, _3615.y, _3615.x * _2913)) + _3615.w) / _3661;
                                float _3725 = 1.0 - dot(vec2(_3720, _3721), vec2(_3720, _3721));
                                float _4852 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3727 = _3726 * (((isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0))) * _3703) / ((_3716 * 0.699999988079071044921875) + 1.0));
                                float _3739 = exp2(log2(1.0 / ((_3716 * 3.5) + 5.0)) * 0.25);
                                float _3740 = 1.0 - _1233;
                                float _3747 = sqrt(1.0 - ((1.0 - (_3740 * _3740)) * (1.0 - (_3739 * _3739))));
                                float _3748 = _3747 * _3747;
                                float _3749 = _3748 * _3748;
                                float _3750 = _3696 - _3199;
                                float _3751 = _3697 - _3200;
                                float _3752 = _3698 - _3201;
                                float _3756 = inversesqrt(dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752)));
                                float _3760 = dot(vec3(_1158, _1161, _1164), vec3((-0.0) - _3199, (-0.0) - _3200, (-0.0) - _3201));
                                float _4863 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3763 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3764 = dot(vec3(_1158, _1161, _1164), vec3(_3756 * _3750, _3756 * _3751, _3756 * _3752));
                                float _4874 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3767 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3771 = ((_3767 * _3767) * (_3749 + (-1.0))) + 1.0;
                                float _3772 = _3709 * _3748;
                                float _3773 = _3772 * _3772;
                                float _3779 = ((1.0 - _3773) * dot(vec3(_1158, _1161, _1164), vec3(_3696, _3697, _3698))) + _3773;
                                float _4885 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3781 = 1.0 - _3748;
                                float _3791 = (0.5 / (((_3780 * ((_3763 * _3781) + _3748)) + 9.9999999392252902907785028219223e-09) + (((_3780 * _3781) + _3748) * _3763))) * _3780;
                                float _4896 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3801 = (_3726 * _3703) * (((_3749 * 3.1415927410125732421875) * (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) / ((_3771 * _3771) * ((_3716 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3801 * _3585.x;
                                frontier_phi_73_pred_1 = _3801 * _3585.y;
                                frontier_phi_73_pred_2 = _3727 * _3573.z;
                                frontier_phi_73_pred_3 = _3727 * _3573.y;
                                frontier_phi_73_pred_4 = _3727 * _3573.x;
                                frontier_phi_73_pred_5 = _3801 * _3585.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3805 = frontier_phi_73_pred;
                            _3806 = frontier_phi_73_pred_1;
                            _3810 = frontier_phi_73_pred_2;
                            _3809 = frontier_phi_73_pred_3;
                            _3808 = frontier_phi_73_pred_4;
                            _3807 = frontier_phi_73_pred_5;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            if (_3532 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3532;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3515;
                        frontier_phi_67_pred_1 = _3516;
                        frontier_phi_67_pred_2 = _3517;
                        frontier_phi_67_pred_3 = _3514;
                        frontier_phi_67_pred_4 = _3513;
                        frontier_phi_67_pred_5 = _3512;
                    }
                    _3180 = frontier_phi_67_pred;
                    _3182 = frontier_phi_67_pred_1;
                    _3184 = frontier_phi_67_pred_2;
                    _3178 = frontier_phi_67_pred_3;
                    _3176 = frontier_phi_67_pred_4;
                    _3174 = frontier_phi_67_pred_5;
                    uint _3319 = _3318 + 1u;
                    if (_3319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3312 = _3174;
                        _3313 = _3176;
                        _3314 = _3178;
                        _3315 = _3180;
                        _3316 = _3182;
                        _3317 = _3184;
                        _3318 = _3319;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3182;
                frontier_phi_55_56_ladder_1 = _3184;
                frontier_phi_55_56_ladder_2 = _3180;
                frontier_phi_55_56_ladder_3 = _3178;
                frontier_phi_55_56_ladder_4 = _3176;
                frontier_phi_55_56_ladder_5 = _3174;
            }
            else
            {
                frontier_phi_55_56_ladder = _3068;
                frontier_phi_55_56_ladder_1 = _3070;
                frontier_phi_55_56_ladder_2 = _3066;
                frontier_phi_55_56_ladder_3 = _3064;
                frontier_phi_55_56_ladder_4 = _3062;
                frontier_phi_55_56_ladder_5 = _3060;
            }
            _3173 = frontier_phi_55_56_ladder_5;
            _3175 = frontier_phi_55_56_ladder_4;
            _3177 = frontier_phi_55_56_ladder_3;
            _3179 = frontier_phi_55_56_ladder_2;
            _3181 = frontier_phi_55_56_ladder;
            _3183 = frontier_phi_55_56_ladder_1;
        }
        float _3188 = isnan(1.0) ? _1217 : (isnan(_1217) ? 1.0 : min(_1217, 1.0));
        _2972 = (_3188 * _3179) + _2405;
        _2974 = (_3188 * _3181) + _2407;
        _2976 = (_3188 * _3183) + _2409;
        _2978 = ((_3173 * _1201) * _3188) + _2753;
        _2980 = ((_3175 * _1203) * _3188) + _2755;
        _2982 = ((_3177 * _1204) * _3188) + _2757;
    }
    else
    {
        _2972 = _2405;
        _2974 = _2407;
        _2976 = _2409;
        _2978 = _2753;
        _2980 = _2755;
        _2982 = _2757;
    }
    float _4912 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _4923 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _4934 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    uint _3002 = _271 + 6u;
    float _3010 = _1139 / cbSceneParam._m0[86u].x;
    float _3011 = _1140 / cbSceneParam._m0[86u].y;
    vec4 _3025 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3010, _3011, (log2((isnan(cbSceneParam._m0[77u].w) ? _1074 : (isnan(_1074) ? cbSceneParam._m0[77u].w : min(_1074, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3027 = _3025.x;
    float _3028 = _3025.y;
    float _3029 = _3025.z;
    float _3030 = _3025.w;
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    if (_1074 > cbSceneParam._m0[78u].w)
    {
        float _3085 = isnan(_1074) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1074 : min(cbSceneParam._m0[80u].w, _1074));
        float _3086 = _3085 / _1074;
        float _3097 = _3086 * _1124;
        float _3098 = _1125 * _3086;
        float _3099 = (-0.0) - _3098;
        float _3101 = _3086 * _1126;
        float _3103 = (cbSceneParam._m0[77u].w * _3099) / _3085;
        float _3104 = _3103 + cbSceneParam._m0[79u].w;
        float _3105 = cbSceneParam._m0[79u].w - _3098;
        float _3111 = sqrt(((_3097 * _3097) + (_3098 * _3098)) + (_3101 * _3101));
        float _3114 = (1.0 - (cbSceneParam._m0[77u].w / _3085)) * _3111;
        float _3119 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3121 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3274;
        if (abs((_3099 - _3103) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3274 = ((((_3104 > 0.0) ? exp2(_3119 * _3104) : (2.0 - exp2(_3121 * _3104))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3114;
        }
        else
        {
            float _3234 = 1.0 / cbSceneParam._m0[80u].x;
            float _3235 = isnan(_3105) ? _3104 : (isnan(_3104) ? _3105 : max(_3104, _3105));
            float _3236 = isnan(_3105) ? _3104 : (isnan(_3104) ? _3105 : min(_3104, _3105));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            float _3246 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : min(_3236, 0.0));
            _3274 = ((abs(_3111 / _3099) * cbSceneParam._m0[80u].y) * ((((_3245 - _3246) * 2.0) - ((exp2(_3119 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0)))) - exp2(_3119 * (isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))))) * _3234)) - ((exp2(_3121 * _3245) - exp2(_3121 * _3246)) * _3234))) + (_3114 * cbSceneParam._m0[80u].z);
        }
        vec4 _3276 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3010, _3011, 1.0), 0.0);
        float _3285 = exp2((_3274 * (-1.44269502162933349609375)) * (1.0 - _3276.w));
        float _3286 = log2(_3285);
        float _3302 = log2(_3030);
        _3123 = (exp2(_3302 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].x)) * _3276.x) / cbSceneParam._m0[78u].x)) + _3027;
        _3125 = (exp2(_3302 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].y)) * _3276.y) / cbSceneParam._m0[78u].y)) + _3028;
        _3127 = (exp2(_3302 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].z)) * _3276.z) / cbSceneParam._m0[78u].z)) + _3029;
        _3129 = _3285 * _3030;
    }
    else
    {
        _3123 = _3027;
        _3125 = _3028;
        _3127 = _3029;
        _3129 = _3030;
    }
    float _3141 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3142 = _3141 == 3.0;
    float _3143 = log2(_3129);
    float _3150 = exp2(_3143 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2972 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1217))) + ((_2978 + ((isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0))) * _2023)) * cbPerFrame._m0[3u].x));
    float _3151 = exp2(_3143 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2974 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1217))) + ((_2980 + ((isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0))) * _2023)) * cbPerFrame._m0[3u].x));
    float _3152 = exp2(_3143 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2976 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1217))) + ((_2982 + ((isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0))) * _2023)) * cbPerFrame._m0[3u].x));
    float _3161 = (_3141 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3161 * (_3142 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3123)));
    SV_Target.y = _3161 * (_3142 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3125)));
    SV_Target.z = _3161 * (_3142 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3127)));
    SV_Target.w = cbInstanceData._m0[_3002].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3002].w;
}


