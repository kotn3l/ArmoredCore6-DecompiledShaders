#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1545;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3893 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3904 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3915 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _346 = _341.x * cbMtdParam._m0[11u].x;
    float _347 = _341.y * cbMtdParam._m0[11u].y;
    float _348 = _341.z * cbMtdParam._m0[11u].z;
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _435 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _452 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _386.x) * 2.0) - ((((_423 - _435) * cbMtdParam._m0[23u].w) + _435) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3926 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _460 = (_453 * ((_367.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _461 = (_453 * ((_367.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _462 = (_453 * ((_367.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _501 = _499.x;
    float _511 = dot(vec4(_501, _499.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _525 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _386.y) * 2.0) - ((((_501 - _511) * cbMtdParam._m0[23u].w) + _511) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3937 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _533 = (_526 * ((_479.x * cbMtdParam._m0[13u].x) - _460)) + _460;
    float _534 = (_526 * ((_479.y * cbMtdParam._m0[13u].y) - _461)) + _461;
    float _535 = (_526 * ((_479.z * cbMtdParam._m0[13u].z) - _462)) + _462;
    vec4 _554 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _303) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _304) + cbTextureTilingScale._m0[24u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _573 = _571.x;
    float _583 = dot(vec4(_573, _571.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _595 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _386.z) * 2.0) - ((((_573 - _583) * cbMtdParam._m0[23u].w) + _583) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3948 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _603 = (_596 * ((_554.x * cbMtdParam._m0[14u].x) - _533)) + _533;
    float _604 = (_596 * ((_554.y * cbMtdParam._m0[14u].y) - _534)) + _534;
    float _605 = (_596 * ((_554.z * cbMtdParam._m0[14u].z) - _535)) + _535;
    float _609 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _603;
    float _612 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _604;
    float _615 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _605;
    float _622 = ((_603 - _609) * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) + _609;
    float _623 = ((_604 - _612) * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) + _612;
    float _624 = ((_605 - _615) * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) + _615;
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _685 = _683.x;
    float _686 = _683.y;
    float _687 = _683.z;
    float _694 = ((_666.x - _685) * _453) + _685;
    float _695 = ((_666.y - _686) * _453) + _686;
    float _696 = ((_666.z - _687) * _453) + _687;
    vec4 _708 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _719 = ((_708.x - _694) * _526) + _694;
    float _720 = ((_708.y - _695) * _526) + _695;
    float _721 = ((_708.z - _696) * _526) + _696;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _303) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _304) + cbTextureTilingScale._m0[23u].w));
    float _746 = ((_733.z - _721) * _596) + _721;
    float _749 = ((((_733.x - _719) * _596) + _719) * 2.0) + (-1.0);
    float _750 = ((((_733.y - _720) * _596) + _720) * 2.0) + (-1.0);
    float _751 = dot(vec2(_749, _750), vec2(_749, _750));
    float _3959 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _756 = sqrt(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))));
    vec4 _774 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _786 = (_749 + ((((_641.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_774.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _787 = (_750 + ((((_641.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_774.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _790 = fma(_756, _251, fma(_787, _258, _786 * _244));
    float _793 = fma(_756, _252, fma(_787, _259, _786 * _245));
    float _796 = fma(_756, _253, fma(_787, _260, _786 * _246));
    float _800 = inversesqrt(dot(vec3(_790, _793, _796), vec3(_790, _793, _796)));
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _829 = _827.x;
    float _830 = 1.0 - _829;
    float _838 = (cbMtdParam._m0[19u].x + dot(vec4(_800 * _790, _800 * _793, _800 * _796, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_829 - _830) * cbMtdParam._m0[24u].z) + _830) * cbMtdParam._m0[21u].z);
    float _3970 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _839 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _846 = (_839 * (cbMtdParam._m0[17u].x - _622)) + _622;
    float _847 = (_839 * (cbMtdParam._m0[17u].y - _623)) + _623;
    float _848 = (_839 * (cbMtdParam._m0[17u].z - _624)) + _624;
    vec4 _874 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _876 = _874.x;
    float _894 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _876) * _453) + _876;
    float _911 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _894) * _526) + _894;
    float _929 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _303) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _304) + cbTextureTilingScale._m0[10u].w)).x - _911) * _596) + _911;
    float _933 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _929) * cbMtdParam._m0[19u].z) + _929;
    float _935 = _933 - (_933 * _839);
    float _940 = (((_641.z - _746) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _746;
    float _944 = ((_774.z - _940) * cbMtdParam._m0[19u].w) + _940;
    vec4 _957 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _964 = (_957.x * 2.0) + (-1.0);
    float _965 = (_957.y * 2.0) + (-1.0);
    float _966 = dot(vec2(_964, _965), vec2(_964, _965));
    float _3981 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _974 = ((_957.z - _944) * _839) + _944;
    float _984 = ((sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) - _756) * _839) + _756;
    float _987 = (((_964 - _786) * _839) + _786) + (cbMtdParam._m0[21u].x * _786);
    float _988 = (((_965 - _787) * _839) + _787) + (cbMtdParam._m0[21u].x * _787);
    float _992 = cbMtdParam._m0[22u].x + _774.w;
    float _995 = fma(_984, _251, fma(_988, _258, _987 * _244));
    float _998 = fma(_984, _252, fma(_988, _259, _987 * _245));
    float _1001 = fma(_984, _253, fma(_988, _260, _987 * _246));
    float _1005 = inversesqrt(dot(vec3(_995, _998, _1001), vec3(_995, _998, _1001)));
    float _1006 = _1005 * _995;
    float _1007 = _1005 * _998;
    float _1008 = _1005 * _1001;
    float _3992 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _1009 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _4014 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4025 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4036 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4047 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _1014 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1028 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1078 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1068);
    float _1079 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1068);
    float _1080 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1068);
    float _1084 = inversesqrt(dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080)));
    float _1085 = _1078 * _1084;
    float _1086 = _1079 * _1084;
    float _1087 = _1080 * _1084;
    float _1093 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1094 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1112 = fma(_1008, cbSceneParam._m0[5u].z, fma(_1007, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1006));
    float _1115 = fma(_1008, cbSceneParam._m0[6u].z, fma(_1007, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1006));
    float _1118 = fma(_1008, cbSceneParam._m0[7u].z, fma(_1007, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1006));
    uint _1132 = (_284 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1138 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_1132].x;
    float _1139 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_1132].y;
    float _1140 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_1132].z;
    float _4058 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1141 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1142 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1143 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1144 = 1.0 - _1014;
    float _1145 = _1141 * _1144;
    float _1146 = _1142 * _1144;
    float _1147 = _1143 * _1144;
    float _1152 = (_1141 + (-0.039999999105930328369140625)) * _1014;
    float _1153 = (_1142 + (-0.039999999105930328369140625)) * _1014;
    float _1154 = (_1143 + (-0.039999999105930328369140625)) * _1014;
    float _1155 = _1152 + 0.039999999105930328369140625;
    float _1157 = _1153 + 0.039999999105930328369140625;
    float _1158 = _1154 + 0.039999999105930328369140625;
    vec4 _1167 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1093, cbSceneParam._m0[86u].y * _1094));
    float _1171 = ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * TEXCOORD_5.w) * _1167.x;
    float _1172 = dot(vec3(_1006, _1007, _1008), vec3(_1085, _1086, _1087));
    float _1175 = _1172 * 2.0;
    float _1179 = (_1175 * _1006) - _1085;
    float _1180 = (_1175 * _1007) - _1086;
    float _1181 = (_1175 * _1008) - _1087;
    float _1185 = abs(dot(vec3(_1085, _1086, _1087), vec3(_1006, _1007, _1008)));
    float _4091 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1187 = sqrt(_1009);
    float _1200 = exp2((_1187 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1187 * 3.0));
    float _1206 = (1.0 - _1200) * ((_1187 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1207 = _1200 * _1187;
    float _1235 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1239 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1243 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1544;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1269 = fma(_1243, cbModelParam._m0[26u].z, fma(_1239, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1235));
        float _1273 = fma(_1243, cbModelParam._m0[27u].z, fma(_1239, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1235));
        float _1277 = fma(_1243, cbModelParam._m0[28u].z, fma(_1239, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1235));
        float _1302 = _1235 + _1006;
        float _1303 = _1239 + _1007;
        float _1304 = _1243 + _1008;
        float _1314 = fma(_1304, cbModelParam._m0[26u].z, fma(_1303, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1302)) - _1269;
        float _1315 = fma(_1304, cbModelParam._m0[27u].z, fma(_1303, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1302)) - _1273;
        float _1316 = fma(_1304, cbModelParam._m0[28u].z, fma(_1303, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1302)) - _1277;
        float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
        float _1333 = ((_1320 * _1314) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1269 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1320 * _1315) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1273 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1320 * _1316) / cbModelParam._m0[34u].z) + ((((((_1277 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        float _1372 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1338.x + (-0.5));
        float _1374 = _1372 * (_1338.y + (-0.5));
        float _1375 = _1372 * (_1338.z + (-0.5));
        float _1382 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1345.x + (-0.5));
        float _1384 = _1382 * (_1345.y + (-0.5));
        float _1385 = _1382 * (_1345.z + (-0.5));
        float _1392 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1352.x + (-0.5));
        float _1394 = _1392 * (_1352.y + (-0.5));
        float _1395 = _1392 * (_1352.z + (-0.5));
        float _1402 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1359.x + (-0.5));
        float _1404 = _1402 * (_1359.y + (-0.5));
        float _1405 = _1402 * (_1359.z + (-0.5));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = _1373 * 0.5;
        float _1410 = _1383 * 0.5;
        float _1411 = _1393 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1426 = (dot(vec3(_1006, _1007, _1008), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1436 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4139 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1438 + 1.0))) + _1443) * _1406;
        float _1453 = _1374 * 0.5;
        float _1454 = _1384 * 0.5;
        float _1455 = _1394 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_1006, _1007, _1008), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4172 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1480 + 1.0))) + _1485) * _1407;
        float _1495 = _1375 * 0.5;
        float _1496 = _1385 * 0.5;
        float _1497 = _1395 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_1006, _1007, _1008), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4205 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1522 + 1.0))) + _1527) * _1408;
        _1544 = _1375;
        _1546 = _1374;
        _1547 = _1373;
        _1548 = _1385;
        _1549 = _1384;
        _1550 = _1383;
        _1551 = _1395;
        _1552 = _1394;
        _1553 = _1393;
        _1554 = _1408;
        _1555 = _1407;
        _1556 = _1406;
        _1557 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1558 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1559 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
    }
    else
    {
        _1544 = _1545;
        _1546 = _1545;
        _1547 = _1545;
        _1548 = _1545;
        _1549 = _1545;
        _1550 = _1545;
        _1551 = _1545;
        _1552 = _1545;
        _1553 = _1545;
        _1554 = _1545;
        _1555 = _1545;
        _1556 = _1545;
        _1557 = 0.0;
        _1558 = 0.0;
        _1559 = 0.0;
    }
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1582 = fma(_1243, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1235));
        float _1586 = fma(_1243, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1235));
        float _1590 = fma(_1243, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1235));
        float _1613 = _1235 + _1006;
        float _1614 = _1239 + _1007;
        float _1615 = _1243 + _1008;
        float _1625 = fma(_1615, cbModelParam._m0[30u].z, fma(_1614, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1613)) - _1582;
        float _1626 = fma(_1615, cbModelParam._m0[31u].z, fma(_1614, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1613)) - _1586;
        float _1627 = fma(_1615, cbModelParam._m0[32u].z, fma(_1614, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1613)) - _1590;
        float _1631 = inversesqrt(dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627)));
        float _1644 = ((_1631 * _1625) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1582 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1645 = ((_1631 * _1626) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1586 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1646 = ((_1631 * _1627) / cbModelParam._m0[35u].z) + ((((((_1590 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        vec4 _1669 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1644, _1645, _1646), 0.0);
        float _1681 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1648.x + (-0.5));
        float _1683 = _1681 * (_1648.y + (-0.5));
        float _1684 = _1681 * (_1648.z + (-0.5));
        float _1691 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1655.x + (-0.5));
        float _1693 = _1691 * (_1655.y + (-0.5));
        float _1694 = _1691 * (_1655.z + (-0.5));
        float _1701 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1662.x + (-0.5));
        float _1703 = _1701 * (_1662.y + (-0.5));
        float _1704 = _1701 * (_1662.z + (-0.5));
        float _1711 = exp2((_1669.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1669.x + (-0.5));
        float _1713 = _1711 * (_1669.y + (-0.5));
        float _1714 = _1711 * (_1669.z + (-0.5));
        float _1715 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1716 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1717 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1718 = _1682 * 0.5;
        float _1719 = _1692 * 0.5;
        float _1720 = _1702 * 0.5;
        float _1721 = dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720));
        float _1726 = (_1721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1721);
        float _1734 = (dot(vec3(_1006, _1007, _1008), vec3(_1726 * _1718, _1726 * _1719, _1726 * _1720)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1743 = sqrt(((_1719 * _1719) + (_1718 * _1718)) + (_1720 * _1720)) / (_1715 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1745 = _1744 * 2.0;
        float _1749 = (1.0 - _1744) / (_1744 + 1.0);
        float _4268 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1750 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1759 = ((((1.0 - _1750) * (_1745 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1745 + 1.0))) + _1750) * _1715;
        float _1760 = _1683 * 0.5;
        float _1761 = _1693 * 0.5;
        float _1762 = _1703 * 0.5;
        float _1763 = dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762));
        float _1768 = (_1763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1763);
        float _1776 = (dot(vec3(_1006, _1007, _1008), vec3(_1768 * _1760, _1768 * _1761, _1768 * _1762)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1785 = sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762)) / (_1716 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1787 = _1786 * 2.0;
        float _1791 = (1.0 - _1786) / (_1786 + 1.0);
        float _4301 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1801 = ((((1.0 - _1792) * (_1787 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1787 + 1.0))) + _1792) * _1716;
        float _1802 = _1684 * 0.5;
        float _1803 = _1694 * 0.5;
        float _1804 = _1704 * 0.5;
        float _1805 = dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804));
        float _1810 = (_1805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1805);
        float _1818 = (dot(vec3(_1006, _1007, _1008), vec3(_1810 * _1802, _1810 * _1803, _1810 * _1804)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1827 = sqrt(((_1803 * _1803) + (_1802 * _1802)) + (_1804 * _1804)) / (_1717 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1829 = _1828 * 2.0;
        float _1833 = (1.0 - _1828) / (_1828 + 1.0);
        float _4334 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1843 = ((((1.0 - _1834) * (_1829 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1829 + 1.0))) + _1834) * _1717;
        _1851 = _1684;
        _1852 = _1683;
        _1853 = _1682;
        _1854 = _1694;
        _1855 = _1693;
        _1856 = _1692;
        _1857 = _1704;
        _1858 = _1703;
        _1859 = _1702;
        _1860 = _1717;
        _1861 = _1716;
        _1862 = _1715;
        _1863 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)));
        _1864 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)));
        _1865 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)));
    }
    else
    {
        _1851 = _1545;
        _1852 = _1545;
        _1853 = _1545;
        _1854 = _1545;
        _1855 = _1545;
        _1856 = _1545;
        _1857 = _1545;
        _1858 = _1545;
        _1859 = _1545;
        _1860 = _1545;
        _1861 = _1545;
        _1862 = _1545;
        _1863 = 0.0;
        _1864 = 0.0;
        _1865 = 0.0;
    }
    float _1875 = (cbModelParam._m0[1u].x * (_1863 - _1557)) + _1557;
    float _1876 = (cbModelParam._m0[1u].x * (_1864 - _1558)) + _1558;
    float _1877 = (cbModelParam._m0[1u].x * (_1865 - _1559)) + _1559;
    float _1898 = fma(_1877, cbSceneParam._m0[89u].z, fma(_1876, cbSceneParam._m0[89u].y, _1875 * cbSceneParam._m0[89u].x));
    float _1901 = fma(_1877, cbSceneParam._m0[90u].z, fma(_1876, cbSceneParam._m0[90u].y, _1875 * cbSceneParam._m0[90u].x));
    float _1904 = fma(_1877, cbSceneParam._m0[91u].z, fma(_1876, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1875));
    float _1919 = _1179 * 0.5;
    float _1920 = _1180 * 0.5;
    float _1921 = _1181 * 0.5;
    float _1922 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1853, _1856, _1859, _1862));
    float _1925 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1852, _1855, _1858, _1861));
    float _1928 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1851, _1854, _1857, _1860));
    float _1962;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1935 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1544, _1548, _1551, _1554));
        float _1939 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1546, _1549, _1552, _1555));
        float _1943 = dot(vec4(_1919, _1920, _1921, 1.0), vec4(_1547, _1550, _1553, _1556));
        float _1950 = dot(vec4(cbModelParam._m0[39u]), vec4(_1919, _1920, _1921, 1.0));
        _1962 = dot(vec3(isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0)), isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1950) ? 0.0 : (isnan(0.0) ? _1950 : max(0.0, _1950))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1962 = 1.0;
    }
    float _1973;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1964 = dot(vec4(cbModelParam._m0[40u]), vec4(_1919, _1920, _1921, 1.0));
        _1973 = dot(vec3(isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1964) ? 0.0 : (isnan(0.0) ? _1964 : max(0.0, _1964))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1973 = 1.0;
    }
    float _1977 = (_1973 * cbModelParam._m0[1u].x) + (_1962 * (1.0 - cbModelParam._m0[1u].x));
    float _1987 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1009);
    float _1988 = isnan(_1987) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1987 : min(cbModelParam._m0[25u].z, _1987));
    float _2068;
    float _2070;
    float _2072;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2035 = fma(_1243, cbModelParam._m0[13u].z, fma(_1239, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1235)) + cbModelParam._m0[13u].w;
        float _2039 = fma(_1243, cbModelParam._m0[14u].z, fma(_1239, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1235)) + cbModelParam._m0[14u].w;
        float _2043 = fma(_1243, cbModelParam._m0[15u].z, fma(_1239, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1235)) + cbModelParam._m0[15u].w;
        float _2046 = fma(_1181, cbModelParam._m0[13u].z, fma(_1180, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1179));
        float _2049 = fma(_1181, cbModelParam._m0[14u].z, fma(_1180, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1179));
        float _2052 = fma(_1181, cbModelParam._m0[15u].z, fma(_1180, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1179));
        float _2080;
        if (_2046 > 0.0)
        {
            _2080 = abs((1.0 - _2035) / _2046);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2035 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2080 = frontier_phi_14_12_ladder;
        }
        float _2304;
        if (_2049 > 0.0)
        {
            _2304 = abs((1.0 - _2039) / _2049);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2039 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2304 = frontier_phi_23_19_ladder;
        }
        float _2561;
        if (_2052 > 0.0)
        {
            _2561 = abs((1.0 - _2043) / _2052);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2043 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2561 = frontier_phi_35_30_ladder;
        }
        float _2563 = isnan(_2304) ? _2080 : (isnan(_2080) ? _2304 : min(_2080, _2304));
        float _2564 = isnan(_2561) ? _2563 : (isnan(_2563) ? _2561 : min(_2563, _2561));
        float _2568 = (_2564 * _2046) + _2035;
        float _2569 = (_2564 * _2049) + _2039;
        float _2570 = (_2564 * _2052) + _2043;
        float _2571 = _2564 * 9.9999997473787516355514526367188e-05;
        float _2573 = (-1.0) - _2571;
        float _2575 = _2571 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2570 > _2575) || ((_2570 < _2573) || ((_2569 > _2575) || ((_2569 < _2573) || ((_2568 < _2573) || (_2568 > _2575))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2570, cbModelParam._m0[9u].z, fma(_2569, cbModelParam._m0[9u].y, _2568 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2570, cbModelParam._m0[10u].z, fma(_2569, cbModelParam._m0[10u].y, _2568 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2570, cbModelParam._m0[11u].z, fma(_2569, cbModelParam._m0[11u].y, _2568 * cbModelParam._m0[11u].x))), _1988);
            frontier_phi_13_35_ladder = _2698.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2698.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2698.x * cbModelParam._m0[1u].y;
        }
        _2068 = frontier_phi_13_35_ladder_2;
        _2070 = frontier_phi_13_35_ladder_1;
        _2072 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1179, _1180, _1181), _1988);
        _2068 = _2056.x * cbModelParam._m0[1u].y;
        _2070 = _2056.y * cbModelParam._m0[1u].y;
        _2072 = _2056.z * cbModelParam._m0[1u].y;
    }
    float _2076 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1009);
    float _2077 = isnan(_2076) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2076 : min(cbModelParam._m0[25u].w, _2076));
    float _2167;
    float _2169;
    float _2171;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2131 = fma(_1243, cbModelParam._m0[21u].z, fma(_1239, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1235)) + cbModelParam._m0[21u].w;
        float _2135 = fma(_1243, cbModelParam._m0[22u].z, fma(_1239, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1235)) + cbModelParam._m0[22u].w;
        float _2139 = fma(_1243, cbModelParam._m0[23u].z, fma(_1239, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1235)) + cbModelParam._m0[23u].w;
        float _2142 = fma(_1181, cbModelParam._m0[21u].z, fma(_1180, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1179));
        float _2145 = fma(_1181, cbModelParam._m0[22u].z, fma(_1180, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1179));
        float _2148 = fma(_1181, cbModelParam._m0[23u].z, fma(_1180, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1179));
        float _2309;
        if (_2142 > 0.0)
        {
            _2309 = abs((1.0 - _2131) / _2142);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2131 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2309 = frontier_phi_25_21_ladder;
        }
        float _2588;
        if (_2145 > 0.0)
        {
            _2588 = abs((1.0 - _2135) / _2145);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2145 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2135 + 1.0) / _2145);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2588 = frontier_phi_37_32_ladder;
        }
        float _2801;
        if (_2148 > 0.0)
        {
            _2801 = abs((1.0 - _2139) / _2148);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2148 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2139 + 1.0) / _2148);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2801 = frontier_phi_46_43_ladder;
        }
        float _2803 = isnan(_2588) ? _2309 : (isnan(_2309) ? _2588 : min(_2309, _2588));
        float _2804 = isnan(_2801) ? _2803 : (isnan(_2803) ? _2801 : min(_2803, _2801));
        float _2808 = (_2804 * _2142) + _2131;
        float _2809 = (_2804 * _2145) + _2135;
        float _2810 = (_2804 * _2148) + _2139;
        float _2811 = _2804 * 9.9999997473787516355514526367188e-05;
        float _2812 = (-1.0) - _2811;
        float _2814 = _2811 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2810 > _2814) || ((_2810 < _2812) || ((_2809 > _2814) || ((_2809 < _2812) || ((_2808 < _2812) || (_2808 > _2814))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2810, cbModelParam._m0[17u].z, fma(_2809, cbModelParam._m0[17u].y, _2808 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2810, cbModelParam._m0[18u].z, fma(_2809, cbModelParam._m0[18u].y, _2808 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2810, cbModelParam._m0[19u].z, fma(_2809, cbModelParam._m0[19u].y, _2808 * cbModelParam._m0[19u].x))), _2077);
            frontier_phi_22_46_ladder = _3009.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3009.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3009.x * cbModelParam._m0[1u].z;
        }
        _2167 = frontier_phi_22_46_ladder_2;
        _2169 = frontier_phi_22_46_ladder_1;
        _2171 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2151 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1179, _1180, _1181), _2077);
        _2167 = _2151.x * cbModelParam._m0[1u].z;
        _2169 = _2151.y * cbModelParam._m0[1u].z;
        _2171 = _2151.z * cbModelParam._m0[1u].z;
    }
    float _2184 = (((_1206 * _1155) + _1207) * _1171) * ((cbModelParam._m0[1u].w * (_2167 - _2068)) + _2068);
    float _2186 = (((_1206 * _1157) + _1207) * _1171) * ((cbModelParam._m0[1u].w * (_2169 - _2070)) + _2070);
    float _2188 = (((_1206 * _1158) + _1207) * _1171) * ((cbModelParam._m0[1u].w * (_2171 - _2072)) + _2072);
    float _2191 = fma(_2188, cbSceneParam._m0[89u].z, fma(_2186, cbSceneParam._m0[89u].y, _2184 * cbSceneParam._m0[89u].x));
    float _2194 = fma(_2188, cbSceneParam._m0[90u].z, fma(_2186, cbSceneParam._m0[90u].y, _2184 * cbSceneParam._m0[90u].x));
    float _2197 = fma(_2188, cbSceneParam._m0[91u].z, fma(_2186, cbSceneParam._m0[91u].y, _2184 * cbSceneParam._m0[91u].x));
    vec4 _2205 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1093, _1094));
    float _2207 = _2205.w;
    float _2219 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2207);
    float _2220 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2207);
    float _2221 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2207);
    uvec4 _2225 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2227 = _2225.x * 14u;
    uint _2228 = _2227 + 13u;
    float _2235 = _1171 + (-1.0);
    float _2240 = (cbLight._m0[_2228].x * _2235) + 1.0;
    float _2241 = (cbLight._m0[_2228].y * _2235) + 1.0;
    float _2242 = (cbLight._m0[_2228].z * _2235) + 1.0;
    float _2243 = (cbLight._m0[_2228].w * _2235) + 1.0;
    uint _2244 = _2227 + 5u;
    float _2250 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
    uint _2254 = _2227 + 4u;
    float _2263 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
    uint _2267 = _2227 | 1u;
    float _2278 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_1006, _1007, _1008));
    float _2281 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_1006, _1007, _1008));
    float _4470 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _4481 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2286 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * 0.3183098733425140380859375;
    float _2288 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * 0.3183098733425140380859375;
    float _2295 = ((cbLight._m0[_2244].x * _2250) * _2288) + (((cbLight._m0[_2254].x * _2219) * _2263) * _2286);
    float _2296 = ((_2250 * cbLight._m0[_2244].y) * _2288) + (((cbLight._m0[_2254].y * _2220) * _2263) * _2286);
    float _2297 = ((_2250 * cbLight._m0[_2244].z) * _2288) + (((cbLight._m0[_2254].z * _2221) * _2263) * _2286);
    uvec4 _2301 = floatBitsToUint(cbLight._m0[_2227 + 12u]);
    bool _2303 = _2301.x == 0u;
    float _2314;
    float _2316;
    float _2318;
    if (_2303)
    {
        _2314 = _2295;
        _2316 = _2296;
        _2318 = _2297;
    }
    else
    {
        uint _2322 = _2227 + 6u;
        float _2338 = (dot(vec3(cbLight._m0[_2227 + 2u].xyz), vec3(_1006, _1007, _1008)) * 0.5) + 0.5;
        float _2339 = _2338 * _2338;
        float _4492 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2340 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2341 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2314 = (((cbLight._m0[_2322].x * 0.3183098733425140380859375) * _2340) * _2341) + _2295;
        _2316 = (((cbLight._m0[_2322].y * 0.3183098733425140380859375) * _2340) * _2341) + _2296;
        _2318 = (((cbLight._m0[_2322].z * 0.3183098733425140380859375) * _2340) * _2341) + _2297;
    }
    bool _2321 = _2301.y == 0u;
    float _2359;
    float _2361;
    float _2363;
    if (_2321)
    {
        _2359 = _2314;
        _2361 = _2316;
        _2363 = _2318;
    }
    else
    {
        uint _2532 = _2227 + 7u;
        float _2548 = (dot(vec3(cbLight._m0[_2227 + 3u].xyz), vec3(_1006, _1007, _1008)) * 0.5) + 0.5;
        float _2549 = _2548 * _2548;
        float _4508 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2550 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2551 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2359 = (((cbLight._m0[_2532].x * 0.3183098733425140380859375) * _2550) * _2551) + _2314;
        _2361 = (((cbLight._m0[_2532].y * 0.3183098733425140380859375) * _2550) * _2551) + _2316;
        _2363 = (((cbLight._m0[_2532].z * 0.3183098733425140380859375) * _2550) * _2551) + _2318;
    }
    uint _2366 = _2227 + 8u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _1009) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2227].x + _1085;
    float _2382 = cbLight._m0[_2227].y + _1086;
    float _2383 = cbLight._m0[_2227].z + _1087;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_1006, _1007, _1008), vec3(cbLight._m0[_2227].xyz));
    float _4524 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _4535 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _2395 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _2396 = dot(vec3(_1006, _1007, _1008), vec3(_2388, _2389, _2390));
    float _4546 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2388, _2389, _2390));
    float _4557 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2380 * _2380;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0);
    float _2417 = 0.959999978542327880859375 - _1152;
    float _2419 = 0.959999978542327880859375 - _1153;
    float _2420 = 0.959999978542327880859375 - _1154;
    float _2427 = 1.0 - _2380;
    float _2438 = (0.5 / (((_2395 * ((_2394 * _2427) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2427) + _2380) * _2394))) * _2394;
    float _4568 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    uint _2454 = _2227 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _1009) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2267].x + _1085;
    float _2468 = cbLight._m0[_2267].y + _1086;
    float _2469 = cbLight._m0[_2267].z + _1087;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_1006, _1007, _1008), vec3(cbLight._m0[_2267].xyz));
    float _4579 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2481 = dot(vec3(_1006, _1007, _1008), vec3(_2474, _2475, _2476));
    float _4590 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2474, _2475, _2476));
    float _4601 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0);
    float _2507 = 1.0 - _2466;
    float _2517 = (0.5 / (((_2395 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2507) + _2466) * _2480))) * _2480;
    float _4612 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2529 = (((((_2500 * _2417) + _1155) * cbLight._m0[_2454].x) * _2519) * _2250) + ((((cbLight._m0[_2366].x * _2219) * ((_2416 * _2417) + _1155)) * _2440) * _2263);
    float _2530 = (((((_2500 * _2419) + _1157) * cbLight._m0[_2454].y) * _2519) * _2250) + ((((cbLight._m0[_2366].y * _2220) * ((_2416 * _2419) + _1157)) * _2440) * _2263);
    float _2531 = (((((_2500 * _2420) + _1158) * cbLight._m0[_2454].z) * _2519) * _2250) + ((((cbLight._m0[_2366].z * _2221) * ((_2416 * _2420) + _1158)) * _2440) * _2263);
    float _2593;
    float _2595;
    float _2597;
    if (_2303)
    {
        _2593 = _2529;
        _2595 = _2530;
        _2597 = _2531;
    }
    else
    {
        uint _2599 = _2227 + 2u;
        uint _2603 = _2227 + 10u;
        float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _1009) * 0.949999988079071044921875);
        float _2618 = _2617 * _2617;
        float _2619 = cbLight._m0[_2599].x + _1085;
        float _2620 = cbLight._m0[_2599].y + _1086;
        float _2621 = cbLight._m0[_2599].z + _1087;
        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
        float _2626 = _2625 * _2619;
        float _2627 = _2625 * _2620;
        float _2628 = _2625 * _2621;
        float _2629 = dot(vec3(_1006, _1007, _1008), vec3(cbLight._m0[_2599].xyz));
        float _4623 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2633 = dot(vec3(_1006, _1007, _1008), vec3(_2626, _2627, _2628));
        float _4634 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2637 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2626, _2627, _2628));
        float _4645 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2641 = _2618 * _2618;
        float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
        float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0);
        float _2659 = 1.0 - _2618;
        float _2669 = (0.5 / (((_2395 * ((_2632 * _2659) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2659) + _2618) * _2632))) * _2632;
        float _4656 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2671 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
        float _2672 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2593 = (((((_2652 * _2417) + _1155) * cbLight._m0[_2603].x) * _2671) * _2672) + _2529;
        _2595 = (((((_2652 * _2419) + _1157) * cbLight._m0[_2603].y) * _2671) * _2672) + _2530;
        _2597 = (((((_2652 * _2420) + _1158) * cbLight._m0[_2603].z) * _2671) * _2672) + _2531;
    }
    float _2707;
    float _2709;
    float _2711;
    if (_2321)
    {
        _2707 = _2593;
        _2709 = _2595;
        _2711 = _2597;
    }
    else
    {
        uint _2718 = _2227 + 3u;
        uint _2722 = _2227 + 11u;
        float _2736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2718].w)) * _1009) * 0.949999988079071044921875);
        float _2737 = _2736 * _2736;
        float _2738 = cbLight._m0[_2718].x + _1085;
        float _2739 = cbLight._m0[_2718].y + _1086;
        float _2740 = cbLight._m0[_2718].z + _1087;
        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
        float _2745 = _2744 * _2738;
        float _2746 = _2744 * _2739;
        float _2747 = _2744 * _2740;
        float _2748 = dot(vec3(_1006, _1007, _1008), vec3(cbLight._m0[_2718].xyz));
        float _4672 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2752 = dot(vec3(_1006, _1007, _1008), vec3(_2745, _2746, _2747));
        float _4683 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2756 = dot(vec3(cbLight._m0[_2718].xyz), vec3(_2745, _2746, _2747));
        float _4694 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2760 = _2737 * _2737;
        float _2764 = ((_2755 * _2755) * (_2760 + (-1.0))) + 1.0;
        float _2771 = exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0);
        float _2778 = 1.0 - _2737;
        float _2788 = (0.5 / (((_2395 * ((_2751 * _2778) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2778) + _2737) * _2751))) * _2751;
        float _4705 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2790 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2760 / ((_2764 * _2764) * 3.141590118408203125));
        float _2791 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2707 = (((((_2771 * _2417) + _1155) * cbLight._m0[_2722].x) * _2790) * _2791) + _2593;
        _2709 = (((((_2771 * _2419) + _1157) * cbLight._m0[_2722].y) * _2790) * _2791) + _2595;
        _2711 = (((((_2771 * _2420) + _1158) * cbLight._m0[_2722].z) * _2790) * _2791) + _2597;
    }
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    if (_2225.y == 0u)
    {
        float _2866 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2867 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2866;
        float _2868 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2866;
        float _2869 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2866;
        uvec4 _2881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2882 = _2881.x;
        uint _2893 = uint((float(_2881.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1094) / _2882))) + floor(float(uint(cbSceneParam._m0[85u].x * _1093) / _2882)));
        float _2903 = (log2(_2869 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2904 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        uint _2907 = uint(isnan(14.0) ? _2904 : (isnan(_2904) ? 14.0 : min(_2904, 14.0)));
        uvec4 _2912 = texelFetch(g_lightClusterGridBuffer, int(((_2907 << 2u) + (_2893 << 6u)) >> 2u));
        uint _2913 = _2912.x;
        uint _2914 = _2881.z;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        if (((((1u << ((_2914 >> 4u) & 15u)) + 4294967295u) & _2913) == 0u) || ((_2914 & 240u) == 0u))
        {
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
        }
        else
        {
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3023;
            float _3025;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            uint _3165 = 0u;
            uint _3174;
            bool _3175;
            for (;;)
            {
                _3174 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3165 << 2u)) >> 2u)).x;
                _3175 = _3174 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3175)
                {
                    frontier_phi_61_pred = _3159;
                    frontier_phi_61_pred_1 = _3164;
                    frontier_phi_61_pred_2 = _3163;
                    frontier_phi_61_pred_3 = _3162;
                    frontier_phi_61_pred_4 = _3161;
                    frontier_phi_61_pred_5 = _3160;
                }
                else
                {
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    uint _3289;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3162;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3174;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    for (;;)
                    {
                        uint _3293 = uint(findLSB(_3289)) + (_3165 << 5u);
                        uint _3290 = (_3289 + 4294967295u) & _3289;
                        uint _3295 = _3293 * 48u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3315 = (_3293 * 48u) + 4u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3334 = (_3293 * 48u) + 8u;
                        vec3 _3345 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x));
                        float _3349 = _3309.x - _2867;
                        float _3350 = _3309.y - _2868;
                        float _3351 = _3309.z - _2869;
                        float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                        float _3355 = inversesqrt(_3352);
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3359 = dot(vec3(_1112, _1115, _1118), vec3(_3356, _3357, _3358));
                        float _3364 = 1.0 - (_3352 * _3309.w);
                        float _4731 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3366 = sqrt(_3352) * _3328.w;
                        float _3369 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                        float _3370 = _3369 * _3369;
                        float _3373 = ((1.0 - _3370) * _3359) + _3370;
                        float _3376 = _3366 * _3366;
                        float _3380 = ((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3365) / ((_3376 * 0.699999988079071044921875) + 1.0);
                        float _3384 = (-0.0) - _2867;
                        float _3385 = (-0.0) - _2868;
                        float _3386 = (-0.0) - _2869;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3401 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                        float _3402 = 1.0 - _1187;
                        float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                        float _3410 = _3409 * _3409;
                        float _3411 = _3410 * _3410;
                        float _3412 = _3391 + _3356;
                        float _3413 = _3392 + _3357;
                        float _3414 = _3393 + _3358;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3422 = dot(vec3(_1112, _1115, _1118), vec3(_3391, _3392, _3393));
                        float _4747 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3426 = dot(vec3(_1112, _1115, _1118), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                        float _4758 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3429 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                        float _3434 = _3369 * _3410;
                        float _3435 = _3434 * _3434;
                        float _3438 = ((1.0 - _3435) * _3359) + _3435;
                        float _4769 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3440 = 1.0 - _3410;
                        float _3450 = (0.5 / (((_3439 * ((_3425 * _3440) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3410) * _3425))) * _3439;
                        float _4780 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3461 = (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) / ((_3433 * _3433) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125))) * _3365;
                        _3218 = (_3380 * _3328.x) + _3286;
                        _3219 = (_3380 * _3328.y) + _3287;
                        _3220 = (_3380 * _3328.z) + _3288;
                        _3215 = (_3461 * _3345.x) + _3283;
                        _3216 = (_3461 * _3345.y) + _3284;
                        _3217 = (_3461 * _3345.z) + _3285;
                        if (_3290 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3218;
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3290;
                        }
                    }
                    frontier_phi_61_pred = _3215;
                    frontier_phi_61_pred_1 = _3220;
                    frontier_phi_61_pred_2 = _3219;
                    frontier_phi_61_pred_3 = _3218;
                    frontier_phi_61_pred_4 = _3217;
                    frontier_phi_61_pred_5 = _3216;
                }
                _3015 = frontier_phi_61_pred;
                _3025 = frontier_phi_61_pred_1;
                _3023 = frontier_phi_61_pred_2;
                _3021 = frontier_phi_61_pred_3;
                _3019 = frontier_phi_61_pred_4;
                _3017 = frontier_phi_61_pred_5;
                uint _3166 = _3165 + 1u;
                if (_3166 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3159 = _3015;
                    _3160 = _3017;
                    _3161 = _3019;
                    _3162 = _3021;
                    _3163 = _3023;
                    _3164 = _3025;
                    _3165 = _3166;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
        }
        uvec4 _3028 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3029 = _3028.z;
        uint _3031 = (_3029 >> 8u) & 15u;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        if (((4294967295u << _3031) & _2913) == 0u)
        {
            _3127 = _3014;
            _3129 = _3016;
            _3131 = _3018;
            _3133 = _3020;
            _3135 = _3022;
            _3137 = _3024;
        }
        else
        {
            float _3152 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
            float _3153 = _3152 * _2867;
            float _3154 = _3152 * _2868;
            float _3155 = _3152 * _2869;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3031 < ((_3029 >> 12u) & 15u))
            {
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3266 = _3014;
                float _3267 = _3016;
                float _3268 = _3018;
                float _3269 = _3020;
                float _3270 = _3022;
                float _3271 = _3024;
                uint _3272 = _3031;
                uint _3281;
                bool _3282;
                for (;;)
                {
                    _3281 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                    _3282 = _3281 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3282)
                    {
                        frontier_phi_67_pred = _3269;
                        frontier_phi_67_pred_1 = _3270;
                        frontier_phi_67_pred_2 = _3271;
                        frontier_phi_67_pred_3 = _3268;
                        frontier_phi_67_pred_4 = _3267;
                        frontier_phi_67_pred_5 = _3266;
                    }
                    else
                    {
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3479 = _3266;
                        float _3480 = _3267;
                        float _3481 = _3268;
                        float _3482 = _3269;
                        float _3483 = _3270;
                        float _3484 = _3271;
                        uint _3485 = _3281;
                        uint _3486;
                        vec4 _3511;
                        float _3512;
                        vec4 _3527;
                        vec3 _3539;
                        vec4 _3554;
                        vec4 _3569;
                        float _3615;
                        bool _3616;
                        for (;;)
                        {
                            uint _3496 = ((_3272 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3485));
                            _3486 = (_3485 + 4294967295u) & _3485;
                            uint _3498 = _3496 * 40u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3512 = _3511.w;
                            uint _3514 = (_3496 * 40u) + 4u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3496 * 40u) + 8u;
                            _3539 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x));
                            uint _3541 = (_3496 * 40u) + 16u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3496 * 40u) + 20u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3496 * 40u) + 24u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3590 = (_3496 * 40u) + 28u;
                            vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3615 = fma(_2869, _3603.z, fma(_2868, _3603.y, _3603.x * _2867)) + _3603.w;
                            _3616 = !((fma(_2869, _3584.z, fma(_2868, _3584.y, _3584.x * _2867)) + _3584.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3616)
                            {
                                float _3643 = _3511.x - _2867;
                                float _3644 = _3511.y - _2868;
                                float _3645 = _3511.z - _2869;
                                float _3646 = dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645));
                                float _3649 = inversesqrt(_3646);
                                float _3650 = _3649 * _3643;
                                float _3651 = _3649 * _3644;
                                float _3652 = _3649 * _3645;
                                float _3656 = 1.0 - (_3646 / (_3512 * _3512));
                                float _4791 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3661 = sqrt(_3646) * _3527.w;
                                float _3663 = 1.39999997615814208984375 / (_3661 + 1.39999997615814208984375);
                                float _3664 = _3663 * _3663;
                                float _3667 = ((1.0 - _3664) * dot(vec3(_3650, _3651, _3652), vec3(_1112, _1115, _1118))) + _3664;
                                float _3670 = _3661 * _3661;
                                float _3674 = (fma(_2869, _3554.z, fma(_2868, _3554.y, _3554.x * _2867)) + _3554.w) / _3615;
                                float _3675 = (fma(_2869, _3569.z, fma(_2868, _3569.y, _3569.x * _2867)) + _3569.w) / _3615;
                                float _3679 = 1.0 - dot(vec2(_3674, _3675), vec2(_3674, _3675));
                                float _4807 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3681 = _3680 * (((isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0))) * _3657) / ((_3670 * 0.699999988079071044921875) + 1.0));
                                float _3693 = exp2(log2(1.0 / ((_3670 * 3.5) + 5.0)) * 0.25);
                                float _3694 = 1.0 - _1187;
                                float _3701 = sqrt(1.0 - ((1.0 - (_3694 * _3694)) * (1.0 - (_3693 * _3693))));
                                float _3702 = _3701 * _3701;
                                float _3703 = _3702 * _3702;
                                float _3704 = _3650 - _3153;
                                float _3705 = _3651 - _3154;
                                float _3706 = _3652 - _3155;
                                float _3710 = inversesqrt(dot(vec3(_3704, _3705, _3706), vec3(_3704, _3705, _3706)));
                                float _3714 = dot(vec3(_1112, _1115, _1118), vec3((-0.0) - _3153, (-0.0) - _3154, (-0.0) - _3155));
                                float _4818 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3718 = dot(vec3(_1112, _1115, _1118), vec3(_3710 * _3704, _3710 * _3705, _3710 * _3706));
                                float _4829 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3721 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3725 = ((_3721 * _3721) * (_3703 + (-1.0))) + 1.0;
                                float _3726 = _3663 * _3702;
                                float _3727 = _3726 * _3726;
                                float _3733 = ((1.0 - _3727) * dot(vec3(_1112, _1115, _1118), vec3(_3650, _3651, _3652))) + _3727;
                                float _4840 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3735 = 1.0 - _3702;
                                float _3745 = (0.5 / (((_3734 * ((_3717 * _3735) + _3702)) + 9.9999999392252902907785028219223e-09) + (((_3734 * _3735) + _3702) * _3717))) * _3734;
                                float _4851 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3755 = (_3680 * _3657) * (((_3703 * 3.1415927410125732421875) * (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) / ((_3725 * _3725) * ((_3670 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3755 * _3539.x;
                                frontier_phi_73_pred_1 = _3755 * _3539.y;
                                frontier_phi_73_pred_2 = _3681 * _3527.z;
                                frontier_phi_73_pred_3 = _3681 * _3527.y;
                                frontier_phi_73_pred_4 = _3681 * _3527.x;
                                frontier_phi_73_pred_5 = _3755 * _3539.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3759 = frontier_phi_73_pred;
                            _3760 = frontier_phi_73_pred_1;
                            _3764 = frontier_phi_73_pred_2;
                            _3763 = frontier_phi_73_pred_3;
                            _3762 = frontier_phi_73_pred_4;
                            _3761 = frontier_phi_73_pred_5;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            if (_3486 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3486;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3469;
                        frontier_phi_67_pred_1 = _3470;
                        frontier_phi_67_pred_2 = _3471;
                        frontier_phi_67_pred_3 = _3468;
                        frontier_phi_67_pred_4 = _3467;
                        frontier_phi_67_pred_5 = _3466;
                    }
                    _3134 = frontier_phi_67_pred;
                    _3136 = frontier_phi_67_pred_1;
                    _3138 = frontier_phi_67_pred_2;
                    _3132 = frontier_phi_67_pred_3;
                    _3130 = frontier_phi_67_pred_4;
                    _3128 = frontier_phi_67_pred_5;
                    uint _3273 = _3272 + 1u;
                    if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3266 = _3128;
                        _3267 = _3130;
                        _3268 = _3132;
                        _3269 = _3134;
                        _3270 = _3136;
                        _3271 = _3138;
                        _3272 = _3273;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3136;
                frontier_phi_55_56_ladder_1 = _3138;
                frontier_phi_55_56_ladder_2 = _3134;
                frontier_phi_55_56_ladder_3 = _3132;
                frontier_phi_55_56_ladder_4 = _3130;
                frontier_phi_55_56_ladder_5 = _3128;
            }
            else
            {
                frontier_phi_55_56_ladder = _3022;
                frontier_phi_55_56_ladder_1 = _3024;
                frontier_phi_55_56_ladder_2 = _3020;
                frontier_phi_55_56_ladder_3 = _3018;
                frontier_phi_55_56_ladder_4 = _3016;
                frontier_phi_55_56_ladder_5 = _3014;
            }
            _3127 = frontier_phi_55_56_ladder_5;
            _3129 = frontier_phi_55_56_ladder_4;
            _3131 = frontier_phi_55_56_ladder_3;
            _3133 = frontier_phi_55_56_ladder_2;
            _3135 = frontier_phi_55_56_ladder;
            _3137 = frontier_phi_55_56_ladder_1;
        }
        float _3142 = isnan(1.0) ? _1171 : (isnan(_1171) ? 1.0 : min(_1171, 1.0));
        _2926 = (_3142 * _3133) + _2359;
        _2928 = (_3142 * _3135) + _2361;
        _2930 = (_3142 * _3137) + _2363;
        _2932 = ((_3127 * _1155) * _3142) + _2707;
        _2934 = ((_3129 * _1157) * _3142) + _2709;
        _2936 = ((_3131 * _1158) * _3142) + _2711;
    }
    else
    {
        _2926 = _2359;
        _2928 = _2361;
        _2930 = _2363;
        _2932 = _2707;
        _2934 = _2709;
        _2936 = _2711;
    }
    float _4867 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _4878 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _4889 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    uint _2956 = _284 + 6u;
    float _2964 = _1093 / cbSceneParam._m0[86u].x;
    float _2965 = _1094 / cbSceneParam._m0[86u].y;
    vec4 _2979 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2964, _2965, (log2((isnan(cbSceneParam._m0[77u].w) ? _1028 : (isnan(_1028) ? cbSceneParam._m0[77u].w : min(_1028, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2981 = _2979.x;
    float _2982 = _2979.y;
    float _2983 = _2979.z;
    float _2984 = _2979.w;
    float _3077;
    float _3079;
    float _3081;
    float _3083;
    if (_1028 > cbSceneParam._m0[78u].w)
    {
        float _3039 = isnan(_1028) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1028 : min(cbSceneParam._m0[80u].w, _1028));
        float _3040 = _3039 / _1028;
        float _3051 = _3040 * _1078;
        float _3052 = _1079 * _3040;
        float _3053 = (-0.0) - _3052;
        float _3055 = _3040 * _1080;
        float _3057 = (cbSceneParam._m0[77u].w * _3053) / _3039;
        float _3058 = _3057 + cbSceneParam._m0[79u].w;
        float _3059 = cbSceneParam._m0[79u].w - _3052;
        float _3065 = sqrt(((_3051 * _3051) + (_3052 * _3052)) + (_3055 * _3055));
        float _3068 = (1.0 - (cbSceneParam._m0[77u].w / _3039)) * _3065;
        float _3073 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3075 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3228;
        if (abs((_3053 - _3057) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3228 = ((((_3058 > 0.0) ? exp2(_3073 * _3058) : (2.0 - exp2(_3075 * _3058))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3068;
        }
        else
        {
            float _3188 = 1.0 / cbSceneParam._m0[80u].x;
            float _3189 = isnan(_3059) ? _3058 : (isnan(_3058) ? _3059 : max(_3058, _3059));
            float _3190 = isnan(_3059) ? _3058 : (isnan(_3058) ? _3059 : min(_3058, _3059));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            float _3200 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : min(_3190, 0.0));
            _3228 = ((abs(_3065 / _3053) * cbSceneParam._m0[80u].y) * ((((_3199 - _3200) * 2.0) - ((exp2(_3073 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0)))) - exp2(_3073 * (isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))))) * _3188)) - ((exp2(_3075 * _3199) - exp2(_3075 * _3200)) * _3188))) + (_3068 * cbSceneParam._m0[80u].z);
        }
        vec4 _3230 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2964, _2965, 1.0), 0.0);
        float _3239 = exp2((_3228 * (-1.44269502162933349609375)) * (1.0 - _3230.w));
        float _3240 = log2(_3239);
        float _3256 = log2(_2984);
        _3077 = (exp2(_3256 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].x)) * _3230.x) / cbSceneParam._m0[78u].x)) + _2981;
        _3079 = (exp2(_3256 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].y)) * _3230.y) / cbSceneParam._m0[78u].y)) + _2982;
        _3081 = (exp2(_3256 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].z)) * _3230.z) / cbSceneParam._m0[78u].z)) + _2983;
        _3083 = _3239 * _2984;
    }
    else
    {
        _3077 = _2981;
        _3079 = _2982;
        _3081 = _2983;
        _3083 = _2984;
    }
    float _3095 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3096 = _3095 == 3.0;
    float _3097 = log2(_3083);
    float _3104 = exp2(_3097 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2926 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1171))) + ((_2932 + ((isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0))) * _1977)) * cbPerFrame._m0[3u].x));
    float _3105 = exp2(_3097 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2928 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1171))) + ((_2934 + ((isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0))) * _1977)) * cbPerFrame._m0[3u].x));
    float _3106 = exp2(_3097 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2930 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1171))) + ((_2936 + ((isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0))) * _1977)) * cbPerFrame._m0[3u].x));
    float _3115 = (_3095 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3115 * (_3096 ? _3104 : (_3104 + (cbSceneParam._m0[72u].w * _3077)));
    SV_Target.y = _3115 * (_3096 ? _3105 : (_3105 + (cbSceneParam._m0[72u].w * _3079)));
    SV_Target.z = _3115 * (_3096 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3081)));
    SV_Target.w = cbInstanceData._m0[_2956].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2956].w;
}


