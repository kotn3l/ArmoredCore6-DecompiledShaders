#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1367;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _358.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[23u].w) + _408) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3691 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _433 = (_426 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _434 = (_426 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _435 = (_426 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _358.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[23u].w) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3702 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _512 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433);
    float _515 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434);
    float _518 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435);
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _576 = _574.x;
    float _577 = _574.y;
    float _578 = _574.z;
    float _585 = ((_557.x - _576) * _426) + _576;
    float _586 = ((_557.y - _577) * _426) + _577;
    float _587 = ((_557.z - _578) * _426) + _578;
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _612 = ((_599.z - _587) * _499) + _587;
    float _615 = ((((_599.x - _585) * _499) + _585) * 2.0) + (-1.0);
    float _617 = ((((_599.y - _586) * _499) + _586) * 2.0) + (-1.0);
    float _618 = dot(vec2(_615, _617), vec2(_615, _617));
    float _3713 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _623 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _664 = _662.x;
    float _665 = 1.0 - _664;
    float _681 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_664 - _665) * cbMtdParam._m0[24u].z) + _665) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3724 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _689 = (_682 * ((_537.x * cbMtdParam._m0[18u].x) - _512)) + _512;
    float _690 = (_682 * ((_537.y * cbMtdParam._m0[18u].y) - _515)) + _515;
    float _691 = (_682 * ((_537.z * cbMtdParam._m0[18u].z) - _518)) + _518;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _719 = _717.x;
    float _736 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _719) * _426) + _719;
    float _753 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _736) * _499) + _736;
    float _757 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _753) * cbMtdParam._m0[19u].z) + _753;
    float _759 = _757 - (_757 * _682);
    float _763 = (cbMtdParam._m0[19u].w * (_637.z - _612)) + _612;
    vec4 _776 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _783 = (_776.x * 2.0) + (-1.0);
    float _784 = (_776.y * 2.0) + (-1.0);
    float _785 = dot(vec2(_783, _784), vec2(_783, _784));
    float _3735 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _793 = (_682 * (_776.z - _763)) + _763;
    float _796 = (((_637.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _615;
    float _797 = (((_637.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _617;
    float _809 = (((_783 - _796) + (cbMtdParam._m0[21u].x * _796)) * _682) + _796;
    float _810 = (((_784 - _797) + (cbMtdParam._m0[21u].x * _797)) * _682) + _797;
    float _811 = (_682 * (sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) - _623)) + _623;
    float _813 = cbMtdParam._m0[22u].x + _637.w;
    float _816 = fma(_811, _235 * NORMAL.x, fma(_810, _242 * TANGENT.x, (_228 * _220) * _809));
    float _819 = fma(_811, _235 * NORMAL.y, fma(_810, _242 * TANGENT.y, (_228 * _221) * _809));
    float _822 = fma(_811, _235 * NORMAL.z, fma(_810, _242 * TANGENT.z, (_228 * _222) * _809));
    float _826 = inversesqrt(dot(vec3(_816, _819, _822), vec3(_816, _819, _822)));
    float _827 = _826 * _816;
    float _828 = _826 * _819;
    float _829 = _826 * _822;
    float _3746 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _830 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _3768 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3779 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3790 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3801 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _835 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _849 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _900 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _890);
    float _901 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _890);
    float _902 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _890);
    float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
    float _907 = _900 * _906;
    float _908 = _901 * _906;
    float _909 = _902 * _906;
    float _915 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _916 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _934 = fma(_829, cbSceneParam._m0[5u].z, fma(_828, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _827));
    float _937 = fma(_829, cbSceneParam._m0[6u].z, fma(_828, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _827));
    float _940 = fma(_829, cbSceneParam._m0[7u].z, fma(_828, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _827));
    uint _954 = (_248 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _960 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_954].x;
    float _961 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_954].y;
    float _962 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_954].z;
    float _3812 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _966 = 1.0 - _835;
    float _967 = _963 * _966;
    float _968 = _964 * _966;
    float _969 = _965 * _966;
    float _974 = (_963 + (-0.039999999105930328369140625)) * _835;
    float _975 = (_964 + (-0.039999999105930328369140625)) * _835;
    float _976 = (_965 + (-0.039999999105930328369140625)) * _835;
    float _977 = _974 + 0.039999999105930328369140625;
    float _979 = _975 + 0.039999999105930328369140625;
    float _980 = _976 + 0.039999999105930328369140625;
    vec4 _989 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _915, cbSceneParam._m0[86u].y * _916));
    float _993 = ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * TEXCOORD_5.w) * _989.x;
    float _994 = dot(vec3(_827, _828, _829), vec3(_907, _908, _909));
    float _997 = _994 * 2.0;
    float _1001 = (_997 * _827) - _907;
    float _1002 = (_997 * _828) - _908;
    float _1003 = (_997 * _829) - _909;
    float _1007 = abs(dot(vec3(_907, _908, _909), vec3(_827, _828, _829)));
    float _3845 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1009 = sqrt(_830);
    float _1022 = exp2((_1009 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1009 * 3.0));
    float _1028 = (1.0 - _1022) * ((_1009 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1029 = _1022 * _1009;
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1366;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1091 = fma(_1065, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057));
        float _1095 = fma(_1065, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057));
        float _1099 = fma(_1065, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057));
        float _1124 = _1057 + _827;
        float _1125 = _1061 + _828;
        float _1126 = _1065 + _829;
        float _1136 = fma(_1126, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124)) - _1091;
        float _1137 = fma(_1126, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124)) - _1095;
        float _1138 = fma(_1126, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124)) - _1099;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1091 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1095 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[34u].z) + ((((((_1099 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1194 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1160.x + (-0.5));
        float _1196 = _1194 * (_1160.y + (-0.5));
        float _1197 = _1194 * (_1160.z + (-0.5));
        float _1204 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1167.x + (-0.5));
        float _1206 = _1204 * (_1167.y + (-0.5));
        float _1207 = _1204 * (_1167.z + (-0.5));
        float _1214 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1174.x + (-0.5));
        float _1216 = _1214 * (_1174.y + (-0.5));
        float _1217 = _1214 * (_1174.z + (-0.5));
        float _1224 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1181.x + (-0.5));
        float _1226 = _1224 * (_1181.y + (-0.5));
        float _1227 = _1224 * (_1181.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1248 = (dot(vec3(_827, _828, _829), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1258 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3893 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1260 + 1.0))) + _1265) * _1228;
        float _1275 = _1196 * 0.5;
        float _1276 = _1206 * 0.5;
        float _1277 = _1216 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_827, _828, _829), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3926 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1302 + 1.0))) + _1307) * _1229;
        float _1317 = _1197 * 0.5;
        float _1318 = _1207 * 0.5;
        float _1319 = _1217 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_827, _828, _829), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3959 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1344 + 1.0))) + _1349) * _1230;
        _1366 = _1197;
        _1368 = _1196;
        _1369 = _1195;
        _1370 = _1207;
        _1371 = _1206;
        _1372 = _1205;
        _1373 = _1217;
        _1374 = _1216;
        _1375 = _1215;
        _1376 = _1230;
        _1377 = _1229;
        _1378 = _1228;
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1367;
        _1368 = _1367;
        _1369 = _1367;
        _1370 = _1367;
        _1371 = _1367;
        _1372 = _1367;
        _1373 = _1367;
        _1374 = _1367;
        _1375 = _1367;
        _1376 = _1367;
        _1377 = _1367;
        _1378 = _1367;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1405 = fma(_1065, cbModelParam._m0[30u].z, fma(_1061, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057));
        float _1409 = fma(_1065, cbModelParam._m0[31u].z, fma(_1061, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057));
        float _1413 = fma(_1065, cbModelParam._m0[32u].z, fma(_1061, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057));
        float _1436 = _1057 + _827;
        float _1437 = _1061 + _828;
        float _1438 = _1065 + _829;
        float _1448 = fma(_1438, cbModelParam._m0[30u].z, fma(_1437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1436)) - _1405;
        float _1449 = fma(_1438, cbModelParam._m0[31u].z, fma(_1437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1436)) - _1409;
        float _1450 = fma(_1438, cbModelParam._m0[32u].z, fma(_1437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1436)) - _1413;
        float _1454 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
        float _1467 = ((_1454 * _1448) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1405 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1454 * _1449) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1409 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1454 * _1450) / cbModelParam._m0[35u].z) + ((((((_1413 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        float _1504 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1471.x + (-0.5));
        float _1506 = _1504 * (_1471.y + (-0.5));
        float _1507 = _1504 * (_1471.z + (-0.5));
        float _1514 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1478.x + (-0.5));
        float _1516 = _1514 * (_1478.y + (-0.5));
        float _1517 = _1514 * (_1478.z + (-0.5));
        float _1524 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1485.x + (-0.5));
        float _1526 = _1524 * (_1485.y + (-0.5));
        float _1527 = _1524 * (_1485.z + (-0.5));
        float _1534 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1492.x + (-0.5));
        float _1536 = _1534 * (_1492.y + (-0.5));
        float _1537 = _1534 * (_1492.z + (-0.5));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = _1505 * 0.5;
        float _1542 = _1515 * 0.5;
        float _1543 = _1525 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_827, _828, _829), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4022 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1568 + 1.0))) + _1573) * _1538;
        float _1583 = _1506 * 0.5;
        float _1584 = _1516 * 0.5;
        float _1585 = _1526 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_827, _828, _829), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4055 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1610 + 1.0))) + _1615) * _1539;
        float _1625 = _1507 * 0.5;
        float _1626 = _1517 * 0.5;
        float _1627 = _1527 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_827, _828, _829), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4088 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1652 + 1.0))) + _1657) * _1540;
        _1674 = _1507;
        _1675 = _1506;
        _1676 = _1505;
        _1677 = _1517;
        _1678 = _1516;
        _1679 = _1515;
        _1680 = _1527;
        _1681 = _1526;
        _1682 = _1525;
        _1683 = _1540;
        _1684 = _1539;
        _1685 = _1538;
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
    }
    else
    {
        _1674 = _1367;
        _1675 = _1367;
        _1676 = _1367;
        _1677 = _1367;
        _1678 = _1367;
        _1679 = _1367;
        _1680 = _1367;
        _1681 = _1367;
        _1682 = _1367;
        _1683 = _1367;
        _1684 = _1367;
        _1685 = _1367;
        _1686 = 0.0;
        _1687 = 0.0;
        _1688 = 0.0;
    }
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1379)) + _1379;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1380)) + _1380;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1381)) + _1381;
    float _1721 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1698));
    float _1742 = _1001 * 0.5;
    float _1743 = _1002 * 0.5;
    float _1744 = _1003 * 0.5;
    float _1745 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1748 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1751 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1785;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1758 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1366, _1370, _1373, _1376));
        float _1762 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1766 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1773 = dot(vec4(cbModelParam._m0[39u]), vec4(_1742, _1743, _1744, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1796;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1787 = dot(vec4(cbModelParam._m0[40u]), vec4(_1742, _1743, _1744, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1800 = (_1796 * cbModelParam._m0[1u].x) + (_1785 * (1.0 - cbModelParam._m0[1u].x));
    float _1810 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _830);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1810 : min(cbModelParam._m0[25u].z, _1810));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1858 = fma(_1065, cbModelParam._m0[13u].z, fma(_1061, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1057)) + cbModelParam._m0[13u].w;
        float _1862 = fma(_1065, cbModelParam._m0[14u].z, fma(_1061, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1057)) + cbModelParam._m0[14u].w;
        float _1866 = fma(_1065, cbModelParam._m0[15u].z, fma(_1061, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1057)) + cbModelParam._m0[15u].w;
        float _1869 = fma(_1003, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1001));
        float _1872 = fma(_1003, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1001));
        float _1875 = fma(_1003, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1001));
        float _1903;
        if (_1869 > 0.0)
        {
            _1903 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1903 = frontier_phi_14_12_ladder;
        }
        float _2105;
        if (_1872 > 0.0)
        {
            _2105 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2105 = frontier_phi_23_19_ladder;
        }
        float _2359;
        if (_1875 > 0.0)
        {
            _2359 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2359 = frontier_phi_35_30_ladder;
        }
        float _2361 = isnan(_2105) ? _1903 : (isnan(_1903) ? _2105 : min(_1903, _2105));
        float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
        float _2366 = (_2362 * _1869) + _1858;
        float _2367 = (_2362 * _1872) + _1862;
        float _2368 = (_2362 * _1875) + _1866;
        float _2369 = _2362 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2369;
        float _2373 = _2369 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 > _2373) || ((_2367 < _2371) || ((_2366 < _2371) || (_2366 > _2373))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2368, cbModelParam._m0[9u].z, fma(_2367, cbModelParam._m0[9u].y, _2366 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2368, cbModelParam._m0[10u].z, fma(_2367, cbModelParam._m0[10u].y, _2366 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2368, cbModelParam._m0[11u].z, fma(_2367, cbModelParam._m0[11u].y, _2366 * cbModelParam._m0[11u].x))), _1811);
            frontier_phi_13_35_ladder = _2496.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2496.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2496.x * cbModelParam._m0[1u].y;
        }
        _1891 = frontier_phi_13_35_ladder_2;
        _1893 = frontier_phi_13_35_ladder_1;
        _1895 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1001, _1002, _1003), _1811);
        _1891 = _1879.x * cbModelParam._m0[1u].y;
        _1893 = _1879.y * cbModelParam._m0[1u].y;
        _1895 = _1879.z * cbModelParam._m0[1u].y;
    }
    float _1899 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _830);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1899 : min(cbModelParam._m0[25u].w, _1899));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1065, cbModelParam._m0[21u].z, fma(_1061, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1057)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1065, cbModelParam._m0[22u].z, fma(_1061, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1057)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1065, cbModelParam._m0[23u].z, fma(_1061, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1057)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_1003, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1001));
        float _1967 = fma(_1003, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1001));
        float _1970 = fma(_1003, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1001));
        float _2110;
        if (_1964 > 0.0)
        {
            _2110 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2110 = frontier_phi_25_21_ladder;
        }
        float _2386;
        if (_1967 > 0.0)
        {
            _2386 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2386 = frontier_phi_37_32_ladder;
        }
        float _2599;
        if (_1970 > 0.0)
        {
            _2599 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2599 = frontier_phi_46_43_ladder;
        }
        float _2601 = isnan(_2386) ? _2110 : (isnan(_2110) ? _2386 : min(_2110, _2386));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _1964) + _1953;
        float _2607 = (_2602 * _1967) + _1957;
        float _2608 = (_2602 * _1970) + _1961;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2610 = (-1.0) - _2609;
        float _2612 = _2609 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2608 > _2612) || ((_2608 < _2610) || ((_2607 > _2612) || ((_2607 < _2610) || ((_2606 < _2610) || (_2606 > _2612))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2608, cbModelParam._m0[17u].z, fma(_2607, cbModelParam._m0[17u].y, _2606 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2608, cbModelParam._m0[18u].z, fma(_2607, cbModelParam._m0[18u].y, _2606 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2608, cbModelParam._m0[19u].z, fma(_2607, cbModelParam._m0[19u].y, _2606 * cbModelParam._m0[19u].x))), _1900);
            frontier_phi_22_46_ladder = _2807.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2807.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2807.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_22_46_ladder_2;
        _1991 = frontier_phi_22_46_ladder_1;
        _1993 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1001, _1002, _1003), _1900);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2006 = (((_1028 * _977) + _1029) * _993) * ((cbModelParam._m0[1u].w * (_1989 - _1891)) + _1891);
    float _2008 = (((_1028 * _979) + _1029) * _993) * ((cbModelParam._m0[1u].w * (_1991 - _1893)) + _1893);
    float _2010 = (((_1028 * _980) + _1029) * _993) * ((cbModelParam._m0[1u].w * (_1993 - _1895)) + _1895);
    float _2013 = fma(_2010, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_2010, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_2010, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    uvec4 _2029 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2031 = _2029.x * 14u;
    uint _2032 = _2031 + 13u;
    float _2039 = _993 + (-1.0);
    float _2044 = (cbLight._m0[_2032].x * _2039) + 1.0;
    float _2045 = (cbLight._m0[_2032].y * _2039) + 1.0;
    float _2046 = (cbLight._m0[_2032].z * _2039) + 1.0;
    float _2047 = (cbLight._m0[_2032].w * _2039) + 1.0;
    uint _2048 = _2031 + 5u;
    float _2054 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2058 = _2031 + 4u;
    float _2064 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2068 = _2031 | 1u;
    float _2079 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_827, _828, _829));
    float _2082 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_827, _828, _829));
    float _4224 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _4235 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2087 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2089 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2096 = ((cbLight._m0[_2048].x * _2054) * _2089) + ((cbLight._m0[_2058].x * _2064) * _2087);
    float _2097 = ((_2054 * cbLight._m0[_2048].y) * _2089) + ((_2064 * cbLight._m0[_2058].y) * _2087);
    float _2098 = ((_2054 * cbLight._m0[_2048].z) * _2089) + ((_2064 * cbLight._m0[_2058].z) * _2087);
    uvec4 _2102 = floatBitsToUint(cbLight._m0[_2031 + 12u]);
    bool _2104 = _2102.x == 0u;
    float _2115;
    float _2117;
    float _2119;
    if (_2104)
    {
        _2115 = _2096;
        _2117 = _2097;
        _2119 = _2098;
    }
    else
    {
        uint _2123 = _2031 + 6u;
        float _2139 = (dot(vec3(cbLight._m0[_2031 + 2u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2140 = _2139 * _2139;
        float _4246 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2141 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2142 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2115 = (((cbLight._m0[_2123].x * 0.3183098733425140380859375) * _2141) * _2142) + _2096;
        _2117 = (((cbLight._m0[_2123].y * 0.3183098733425140380859375) * _2141) * _2142) + _2097;
        _2119 = (((cbLight._m0[_2123].z * 0.3183098733425140380859375) * _2141) * _2142) + _2098;
    }
    bool _2122 = _2102.y == 0u;
    float _2160;
    float _2162;
    float _2164;
    if (_2122)
    {
        _2160 = _2115;
        _2162 = _2117;
        _2164 = _2119;
    }
    else
    {
        uint _2330 = _2031 + 7u;
        float _2346 = (dot(vec3(cbLight._m0[_2031 + 3u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2347 = _2346 * _2346;
        float _4262 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2348 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2349 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2160 = (((cbLight._m0[_2330].x * 0.3183098733425140380859375) * _2348) * _2349) + _2115;
        _2162 = (((cbLight._m0[_2330].y * 0.3183098733425140380859375) * _2348) * _2349) + _2117;
        _2164 = (((cbLight._m0[_2330].z * 0.3183098733425140380859375) * _2348) * _2349) + _2119;
    }
    uint _2167 = _2031 + 8u;
    float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _830) * 0.949999988079071044921875);
    float _2181 = _2180 * _2180;
    float _2182 = cbLight._m0[_2031].x + _907;
    float _2183 = cbLight._m0[_2031].y + _908;
    float _2184 = cbLight._m0[_2031].z + _909;
    float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
    float _2189 = _2188 * _2182;
    float _2190 = _2188 * _2183;
    float _2191 = _2188 * _2184;
    float _2192 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2031].xyz));
    float _4278 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _2196 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2197 = dot(vec3(_827, _828, _829), vec3(_2189, _2190, _2191));
    float _4300 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2189, _2190, _2191));
    float _4311 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2181 * _2181;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2217 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
    float _2218 = 0.959999978542327880859375 - _974;
    float _2220 = 0.959999978542327880859375 - _975;
    float _2221 = 0.959999978542327880859375 - _976;
    float _2228 = 1.0 - _2181;
    float _2239 = (0.5 / (((_2196 * ((_2195 * _2228) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2228) + _2181) * _2195))) * _2195;
    float _4322 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    uint _2252 = _2031 + 9u;
    float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _830) * 0.949999988079071044921875);
    float _2264 = _2263 * _2263;
    float _2265 = cbLight._m0[_2068].x + _907;
    float _2266 = cbLight._m0[_2068].y + _908;
    float _2267 = cbLight._m0[_2068].z + _909;
    float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
    float _2272 = _2271 * _2265;
    float _2273 = _2271 * _2266;
    float _2274 = _2271 * _2267;
    float _2275 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2068].xyz));
    float _4333 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2279 = dot(vec3(_827, _828, _829), vec3(_2272, _2273, _2274));
    float _4344 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2272, _2273, _2274));
    float _4355 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2264 * _2264;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2298 = exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0);
    float _2305 = 1.0 - _2264;
    float _2315 = (0.5 / (((_2196 * ((_2278 * _2305) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2305) + _2264) * _2278))) * _2278;
    float _4366 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    float _2327 = (((((_2298 * _2218) + _977) * cbLight._m0[_2252].x) * _2317) * _2054) + (((((_2217 * _2218) + _977) * cbLight._m0[_2167].x) * _2241) * _2064);
    float _2328 = (((((_2298 * _2220) + _979) * cbLight._m0[_2252].y) * _2317) * _2054) + (((((_2217 * _2220) + _979) * cbLight._m0[_2167].y) * _2241) * _2064);
    float _2329 = (((((_2298 * _2221) + _980) * cbLight._m0[_2252].z) * _2317) * _2054) + (((((_2217 * _2221) + _980) * cbLight._m0[_2167].z) * _2241) * _2064);
    float _2391;
    float _2393;
    float _2395;
    if (_2104)
    {
        _2391 = _2327;
        _2393 = _2328;
        _2395 = _2329;
    }
    else
    {
        uint _2397 = _2031 + 2u;
        uint _2401 = _2031 + 10u;
        float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _830) * 0.949999988079071044921875);
        float _2416 = _2415 * _2415;
        float _2417 = cbLight._m0[_2397].x + _907;
        float _2418 = cbLight._m0[_2397].y + _908;
        float _2419 = cbLight._m0[_2397].z + _909;
        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
        float _2424 = _2423 * _2417;
        float _2425 = _2423 * _2418;
        float _2426 = _2423 * _2419;
        float _2427 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2397].xyz));
        float _4377 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2431 = dot(vec3(_827, _828, _829), vec3(_2424, _2425, _2426));
        float _4388 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2435 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2424, _2425, _2426));
        float _4399 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2439 = _2416 * _2416;
        float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
        float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
        float _2457 = 1.0 - _2416;
        float _2467 = (0.5 / (((_2196 * ((_2430 * _2457) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2457) + _2416) * _2430))) * _2430;
        float _4410 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2391 = (((((_2450 * _2218) + _977) * cbLight._m0[_2401].x) * _2469) * _2470) + _2327;
        _2393 = (((((_2450 * _2220) + _979) * cbLight._m0[_2401].y) * _2469) * _2470) + _2328;
        _2395 = (((((_2450 * _2221) + _980) * cbLight._m0[_2401].z) * _2469) * _2470) + _2329;
    }
    float _2505;
    float _2507;
    float _2509;
    if (_2122)
    {
        _2505 = _2391;
        _2507 = _2393;
        _2509 = _2395;
    }
    else
    {
        uint _2516 = _2031 + 3u;
        uint _2520 = _2031 + 11u;
        float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2516].w)) * _830) * 0.949999988079071044921875);
        float _2535 = _2534 * _2534;
        float _2536 = cbLight._m0[_2516].x + _907;
        float _2537 = cbLight._m0[_2516].y + _908;
        float _2538 = cbLight._m0[_2516].z + _909;
        float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
        float _2543 = _2542 * _2536;
        float _2544 = _2542 * _2537;
        float _2545 = _2542 * _2538;
        float _2546 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2516].xyz));
        float _4426 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2550 = dot(vec3(_827, _828, _829), vec3(_2543, _2544, _2545));
        float _4437 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2554 = dot(vec3(cbLight._m0[_2516].xyz), vec3(_2543, _2544, _2545));
        float _4448 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2558 = _2535 * _2535;
        float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
        float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
        float _2576 = 1.0 - _2535;
        float _2586 = (0.5 / (((_2196 * ((_2549 * _2576) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2196 * _2576) + _2535) * _2549))) * _2549;
        float _4459 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2505 = (((((_2569 * _2218) + _977) * cbLight._m0[_2520].x) * _2588) * _2589) + _2391;
        _2507 = (((((_2569 * _2220) + _979) * cbLight._m0[_2520].y) * _2588) * _2589) + _2393;
        _2509 = (((((_2569 * _2221) + _980) * cbLight._m0[_2520].z) * _2588) * _2589) + _2395;
    }
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_2029.y == 0u)
    {
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2664;
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2664;
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2664;
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.x;
        uint _2691 = uint((float(_2679.y) * floor(float(uint(cbSceneParam._m0[85u].y * _916) / _2680))) + floor(float(uint(cbSceneParam._m0[85u].x * _915) / _2680)));
        float _2701 = (log2(_2667 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2702 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        uint _2705 = uint(isnan(14.0) ? _2702 : (isnan(_2702) ? 14.0 : min(_2702, 14.0)));
        uvec4 _2710 = texelFetch(g_lightClusterGridBuffer, int(((_2705 << 2u) + (_2691 << 6u)) >> 2u));
        uint _2711 = _2710.x;
        uint _2712 = _2679.z;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((((1u << ((_2712 >> 4u) & 15u)) + 4294967295u) & _2711) == 0u) || ((_2712 & 240u) == 0u))
        {
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
        }
        else
        {
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            uint _2963 = 0u;
            uint _2972;
            bool _2973;
            for (;;)
            {
                _2972 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_2963 << 2u)) >> 2u)).x;
                _2973 = _2972 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2973)
                {
                    frontier_phi_61_pred = _2957;
                    frontier_phi_61_pred_1 = _2962;
                    frontier_phi_61_pred_2 = _2961;
                    frontier_phi_61_pred_3 = _2960;
                    frontier_phi_61_pred_4 = _2959;
                    frontier_phi_61_pred_5 = _2958;
                }
                else
                {
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    uint _3087;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2972;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    for (;;)
                    {
                        uint _3091 = uint(findLSB(_3087)) + (_2963 << 5u);
                        uint _3088 = (_3087 + 4294967295u) & _3087;
                        uint _3093 = _3091 * 48u;
                        vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 3u)).x));
                        uint _3113 = (_3091 * 48u) + 4u;
                        vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3132 = (_3091 * 48u) + 8u;
                        vec3 _3143 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x));
                        float _3147 = _3107.x - _2665;
                        float _3148 = _3107.y - _2666;
                        float _3149 = _3107.z - _2667;
                        float _3150 = dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149));
                        float _3153 = inversesqrt(_3150);
                        float _3154 = _3153 * _3147;
                        float _3155 = _3153 * _3148;
                        float _3156 = _3153 * _3149;
                        float _3157 = dot(vec3(_934, _937, _940), vec3(_3154, _3155, _3156));
                        float _3162 = 1.0 - (_3150 * _3107.w);
                        float _4485 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3163 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3164 = sqrt(_3150) * _3126.w;
                        float _3167 = 1.39999997615814208984375 / (_3164 + 1.39999997615814208984375);
                        float _3168 = _3167 * _3167;
                        float _3171 = ((1.0 - _3168) * _3157) + _3168;
                        float _3174 = _3164 * _3164;
                        float _3178 = ((isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))) * _3163) / ((_3174 * 0.699999988079071044921875) + 1.0);
                        float _3182 = (-0.0) - _2665;
                        float _3183 = (-0.0) - _2666;
                        float _3184 = (-0.0) - _2667;
                        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                        float _3189 = _3188 * _3182;
                        float _3190 = _3188 * _3183;
                        float _3191 = _3188 * _3184;
                        float _3199 = exp2(log2(1.0 / ((_3174 * 3.5) + 5.0)) * 0.25);
                        float _3200 = 1.0 - _1009;
                        float _3207 = sqrt(1.0 - ((1.0 - (_3200 * _3200)) * (1.0 - (_3199 * _3199))));
                        float _3208 = _3207 * _3207;
                        float _3209 = _3208 * _3208;
                        float _3210 = _3189 + _3154;
                        float _3211 = _3190 + _3155;
                        float _3212 = _3191 + _3156;
                        float _3216 = inversesqrt(dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212)));
                        float _3220 = dot(vec3(_934, _937, _940), vec3(_3189, _3190, _3191));
                        float _4501 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3224 = dot(vec3(_934, _937, _940), vec3(_3216 * _3210, _3216 * _3211, _3216 * _3212));
                        float _4512 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3231 = ((_3227 * _3227) * (_3209 + (-1.0))) + 1.0;
                        float _3232 = _3167 * _3208;
                        float _3233 = _3232 * _3232;
                        float _3236 = ((1.0 - _3233) * _3157) + _3233;
                        float _4523 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3238 = 1.0 - _3208;
                        float _3248 = (0.5 / (((_3237 * ((_3223 * _3238) + _3208)) + 9.9999999392252902907785028219223e-09) + (((_3237 * _3238) + _3208) * _3223))) * _3237;
                        float _4534 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3259 = (((_3209 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3231 * _3231) * ((_3174 * 2.1991131305694580078125) + 3.141590118408203125))) * _3163;
                        _3016 = (_3178 * _3126.x) + _3084;
                        _3017 = (_3178 * _3126.y) + _3085;
                        _3018 = (_3178 * _3126.z) + _3086;
                        _3013 = (_3259 * _3143.x) + _3081;
                        _3014 = (_3259 * _3143.y) + _3082;
                        _3015 = (_3259 * _3143.z) + _3083;
                        if (_3088 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3088;
                        }
                    }
                    frontier_phi_61_pred = _3013;
                    frontier_phi_61_pred_1 = _3018;
                    frontier_phi_61_pred_2 = _3017;
                    frontier_phi_61_pred_3 = _3016;
                    frontier_phi_61_pred_4 = _3015;
                    frontier_phi_61_pred_5 = _3014;
                }
                _2813 = frontier_phi_61_pred;
                _2823 = frontier_phi_61_pred_1;
                _2821 = frontier_phi_61_pred_2;
                _2819 = frontier_phi_61_pred_3;
                _2817 = frontier_phi_61_pred_4;
                _2815 = frontier_phi_61_pred_5;
                uint _2964 = _2963 + 1u;
                if (_2964 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2957 = _2813;
                    _2958 = _2815;
                    _2959 = _2817;
                    _2960 = _2819;
                    _2961 = _2821;
                    _2962 = _2823;
                    _2963 = _2964;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
        }
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.z;
        uint _2829 = (_2827 >> 8u) & 15u;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        if (((4294967295u << _2829) & _2711) == 0u)
        {
            _2925 = _2812;
            _2927 = _2814;
            _2929 = _2816;
            _2931 = _2818;
            _2933 = _2820;
            _2935 = _2822;
        }
        else
        {
            float _2950 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
            float _2951 = _2950 * _2665;
            float _2952 = _2950 * _2666;
            float _2953 = _2950 * _2667;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2829 < ((_2827 >> 12u) & 15u))
            {
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _3064 = _2812;
                float _3065 = _2814;
                float _3066 = _2816;
                float _3067 = _2818;
                float _3068 = _2820;
                float _3069 = _2822;
                uint _3070 = _2829;
                uint _3079;
                bool _3080;
                for (;;)
                {
                    _3079 = texelFetch(g_lightClassification, int((((_2705 << 5u) + (_2691 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                    _3080 = _3079 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3080)
                    {
                        frontier_phi_67_pred = _3067;
                        frontier_phi_67_pred_1 = _3068;
                        frontier_phi_67_pred_2 = _3069;
                        frontier_phi_67_pred_3 = _3066;
                        frontier_phi_67_pred_4 = _3065;
                        frontier_phi_67_pred_5 = _3064;
                    }
                    else
                    {
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3277 = _3064;
                        float _3278 = _3065;
                        float _3279 = _3066;
                        float _3280 = _3067;
                        float _3281 = _3068;
                        float _3282 = _3069;
                        uint _3283 = _3079;
                        uint _3284;
                        vec4 _3309;
                        float _3310;
                        vec4 _3325;
                        vec3 _3337;
                        vec4 _3352;
                        vec4 _3367;
                        float _3413;
                        bool _3414;
                        for (;;)
                        {
                            uint _3294 = ((_3070 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3283));
                            _3284 = (_3283 + 4294967295u) & _3283;
                            uint _3296 = _3294 * 40u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3310 = _3309.w;
                            uint _3312 = (_3294 * 40u) + 4u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3294 * 40u) + 8u;
                            _3337 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x));
                            uint _3339 = (_3294 * 40u) + 16u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3294 * 40u) + 20u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3294 * 40u) + 24u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3388 = (_3294 * 40u) + 28u;
                            vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            _3413 = fma(_2667, _3401.z, fma(_2666, _3401.y, _3401.x * _2665)) + _3401.w;
                            _3414 = !((fma(_2667, _3382.z, fma(_2666, _3382.y, _3382.x * _2665)) + _3382.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3414)
                            {
                                float _3441 = _3309.x - _2665;
                                float _3442 = _3309.y - _2666;
                                float _3443 = _3309.z - _2667;
                                float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                                float _3447 = inversesqrt(_3444);
                                float _3448 = _3447 * _3441;
                                float _3449 = _3447 * _3442;
                                float _3450 = _3447 * _3443;
                                float _3454 = 1.0 - (_3444 / (_3310 * _3310));
                                float _4545 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3459 = sqrt(_3444) * _3325.w;
                                float _3461 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                                float _3462 = _3461 * _3461;
                                float _3465 = ((1.0 - _3462) * dot(vec3(_3448, _3449, _3450), vec3(_934, _937, _940))) + _3462;
                                float _3468 = _3459 * _3459;
                                float _3472 = (fma(_2667, _3352.z, fma(_2666, _3352.y, _3352.x * _2665)) + _3352.w) / _3413;
                                float _3473 = (fma(_2667, _3367.z, fma(_2666, _3367.y, _3367.x * _2665)) + _3367.w) / _3413;
                                float _3477 = 1.0 - dot(vec2(_3472, _3473), vec2(_3472, _3473));
                                float _4561 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3479 = _3478 * (((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3455) / ((_3468 * 0.699999988079071044921875) + 1.0));
                                float _3491 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                                float _3492 = 1.0 - _1009;
                                float _3499 = sqrt(1.0 - ((1.0 - (_3492 * _3492)) * (1.0 - (_3491 * _3491))));
                                float _3500 = _3499 * _3499;
                                float _3501 = _3500 * _3500;
                                float _3502 = _3448 - _2951;
                                float _3503 = _3449 - _2952;
                                float _3504 = _3450 - _2953;
                                float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                                float _3512 = dot(vec3(_934, _937, _940), vec3((-0.0) - _2951, (-0.0) - _2952, (-0.0) - _2953));
                                float _4572 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3516 = dot(vec3(_934, _937, _940), vec3(_3508 * _3502, _3508 * _3503, _3508 * _3504));
                                float _4583 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3523 = ((_3519 * _3519) * (_3501 + (-1.0))) + 1.0;
                                float _3524 = _3461 * _3500;
                                float _3525 = _3524 * _3524;
                                float _3531 = ((1.0 - _3525) * dot(vec3(_934, _937, _940), vec3(_3448, _3449, _3450))) + _3525;
                                float _4594 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3533 = 1.0 - _3500;
                                float _3543 = (0.5 / (((_3532 * ((_3515 * _3533) + _3500)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3500) * _3515))) * _3532;
                                float _4605 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3553 = (_3478 * _3455) * (((_3501 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3523 * _3523) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3553 * _3337.x;
                                frontier_phi_73_pred_1 = _3553 * _3337.y;
                                frontier_phi_73_pred_2 = _3479 * _3325.z;
                                frontier_phi_73_pred_3 = _3479 * _3325.y;
                                frontier_phi_73_pred_4 = _3479 * _3325.x;
                                frontier_phi_73_pred_5 = _3553 * _3337.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3557 = frontier_phi_73_pred;
                            _3558 = frontier_phi_73_pred_1;
                            _3562 = frontier_phi_73_pred_2;
                            _3561 = frontier_phi_73_pred_3;
                            _3560 = frontier_phi_73_pred_4;
                            _3559 = frontier_phi_73_pred_5;
                            _3267 = _3560 + _3280;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            if (_3284 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3284;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3267;
                        frontier_phi_67_pred_1 = _3268;
                        frontier_phi_67_pred_2 = _3269;
                        frontier_phi_67_pred_3 = _3266;
                        frontier_phi_67_pred_4 = _3265;
                        frontier_phi_67_pred_5 = _3264;
                    }
                    _2932 = frontier_phi_67_pred;
                    _2934 = frontier_phi_67_pred_1;
                    _2936 = frontier_phi_67_pred_2;
                    _2930 = frontier_phi_67_pred_3;
                    _2928 = frontier_phi_67_pred_4;
                    _2926 = frontier_phi_67_pred_5;
                    uint _3071 = _3070 + 1u;
                    if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3064 = _2926;
                        _3065 = _2928;
                        _3066 = _2930;
                        _3067 = _2932;
                        _3068 = _2934;
                        _3069 = _2936;
                        _3070 = _3071;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2934;
                frontier_phi_55_56_ladder_1 = _2936;
                frontier_phi_55_56_ladder_2 = _2932;
                frontier_phi_55_56_ladder_3 = _2930;
                frontier_phi_55_56_ladder_4 = _2928;
                frontier_phi_55_56_ladder_5 = _2926;
            }
            else
            {
                frontier_phi_55_56_ladder = _2820;
                frontier_phi_55_56_ladder_1 = _2822;
                frontier_phi_55_56_ladder_2 = _2818;
                frontier_phi_55_56_ladder_3 = _2816;
                frontier_phi_55_56_ladder_4 = _2814;
                frontier_phi_55_56_ladder_5 = _2812;
            }
            _2925 = frontier_phi_55_56_ladder_5;
            _2927 = frontier_phi_55_56_ladder_4;
            _2929 = frontier_phi_55_56_ladder_3;
            _2931 = frontier_phi_55_56_ladder_2;
            _2933 = frontier_phi_55_56_ladder;
            _2935 = frontier_phi_55_56_ladder_1;
        }
        float _2940 = isnan(1.0) ? _993 : (isnan(_993) ? 1.0 : min(_993, 1.0));
        _2724 = (_2940 * _2931) + _2160;
        _2726 = (_2940 * _2933) + _2162;
        _2728 = (_2940 * _2935) + _2164;
        _2730 = ((_2925 * _977) * _2940) + _2505;
        _2732 = ((_2927 * _979) * _2940) + _2507;
        _2734 = ((_2929 * _980) * _2940) + _2509;
    }
    else
    {
        _2724 = _2160;
        _2726 = _2162;
        _2728 = _2164;
        _2730 = _2505;
        _2732 = _2507;
        _2734 = _2509;
    }
    float _4621 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4632 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4643 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    uint _2754 = _248 + 6u;
    float _2762 = _915 / cbSceneParam._m0[86u].x;
    float _2763 = _916 / cbSceneParam._m0[86u].y;
    vec4 _2777 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, (log2((isnan(cbSceneParam._m0[77u].w) ? _849 : (isnan(_849) ? cbSceneParam._m0[77u].w : min(_849, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2779 = _2777.x;
    float _2780 = _2777.y;
    float _2781 = _2777.z;
    float _2782 = _2777.w;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_849 > cbSceneParam._m0[78u].w)
    {
        float _2837 = isnan(_849) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _849 : min(cbSceneParam._m0[80u].w, _849));
        float _2838 = _2837 / _849;
        float _2849 = _2838 * _900;
        float _2850 = _901 * _2838;
        float _2851 = (-0.0) - _2850;
        float _2853 = _2838 * _902;
        float _2855 = (cbSceneParam._m0[77u].w * _2851) / _2837;
        float _2856 = _2855 + cbSceneParam._m0[79u].w;
        float _2857 = cbSceneParam._m0[79u].w - _2850;
        float _2863 = sqrt(((_2849 * _2849) + (_2850 * _2850)) + (_2853 * _2853));
        float _2866 = (1.0 - (cbSceneParam._m0[77u].w / _2837)) * _2863;
        float _2871 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2873 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3026;
        if (abs((_2851 - _2855) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3026 = ((((_2856 > 0.0) ? exp2(_2871 * _2856) : (2.0 - exp2(_2873 * _2856))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2866;
        }
        else
        {
            float _2986 = 1.0 / cbSceneParam._m0[80u].x;
            float _2987 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : max(_2856, _2857));
            float _2988 = isnan(_2857) ? _2856 : (isnan(_2856) ? _2857 : min(_2856, _2857));
            float _2997 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : min(_2987, 0.0));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            _3026 = ((abs(_2863 / _2851) * cbSceneParam._m0[80u].y) * ((((_2997 - _2998) * 2.0) - ((exp2(_2871 * (isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0)))) - exp2(_2871 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0))))) * _2986)) - ((exp2(_2873 * _2997) - exp2(_2873 * _2998)) * _2986))) + (_2866 * cbSceneParam._m0[80u].z);
        }
        vec4 _3028 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2762, _2763, 1.0), 0.0);
        float _3037 = exp2((_3026 * (-1.44269502162933349609375)) * (1.0 - _3028.w));
        float _3038 = log2(_3037);
        float _3054 = log2(_2782);
        _2875 = (exp2(_3054 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].x)) * _3028.x) / cbSceneParam._m0[78u].x)) + _2779;
        _2877 = (exp2(_3054 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].y)) * _3028.y) / cbSceneParam._m0[78u].y)) + _2780;
        _2879 = (exp2(_3054 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].z)) * _3028.z) / cbSceneParam._m0[78u].z)) + _2781;
        _2881 = _3037 * _2782;
    }
    else
    {
        _2875 = _2779;
        _2877 = _2780;
        _2879 = _2781;
        _2881 = _2782;
    }
    float _2893 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2894 = _2893 == 3.0;
    float _2895 = log2(_2881);
    float _2902 = exp2(_2895 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2724 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _993))) + ((_2730 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _2903 = exp2(_2895 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2726 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _993))) + ((_2732 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _2904 = exp2(_2895 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2728 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _993))) + ((_2734 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _2913 = (_2893 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2913 * (_2894 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2875)));
    SV_Target.y = _2913 * (_2894 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2877)));
    SV_Target.z = _2913 * (_2894 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.w = cbInstanceData._m0[_2754].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2754].w;
}


