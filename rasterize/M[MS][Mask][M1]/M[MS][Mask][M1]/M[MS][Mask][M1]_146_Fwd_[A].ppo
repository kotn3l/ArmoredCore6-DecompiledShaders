#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1649;
float _4025;
float _4026;
float _4027;
float _4028;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _252 = _251 * _243;
    float _253 = _251 * _244;
    float _254 = _251 * _245;
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = _258 * NORMAL.x;
    float _260 = _258 * NORMAL.y;
    float _261 = _258 * NORMAL.z;
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = _265 * TANGENT.x;
    float _267 = _265 * TANGENT.y;
    float _268 = _265 * TANGENT.z;
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _311.x * cbMtdParam._m0[11u].x;
    float _318 = _311.y * cbMtdParam._m0[11u].y;
    float _319 = _311.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _357.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4037 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _435 = (_428 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _436 = (_428 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _437 = (_428 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _357.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[23u].w) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4048 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _548 = _546.x;
    float _558 = dot(vec4(_548, _546.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _570 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _357.z) * 2.0) - ((((_548 - _558) * cbMtdParam._m0[23u].w) + _558) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4059 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _578 = (_571 * ((_529.x * cbMtdParam._m0[14u].x) - _508)) + _508;
    float _579 = (_571 * ((_529.y * cbMtdParam._m0[14u].y) - _509)) + _509;
    float _580 = (_571 * ((_529.z * cbMtdParam._m0[14u].z) - _510)) + _510;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _290) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _291) + cbTextureTilingScale._m0[14u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _637 = _635.x;
    float _638 = _635.y;
    float _639 = _635.z;
    float _646 = ((_618.x - _637) * _428) + _637;
    float _647 = ((_618.y - _638) * _428) + _638;
    float _648 = ((_618.z - _639) * _428) + _639;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _671 = ((_660.x - _646) * _501) + _646;
    float _672 = ((_660.y - _647) * _501) + _647;
    float _673 = ((_660.z - _648) * _501) + _648;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _698 = ((_685.z - _673) * _571) + _673;
    float _701 = ((((_685.x - _671) * _571) + _671) * 2.0) + (-1.0);
    float _703 = ((((_685.y - _672) * _571) + _672) * 2.0) + (-1.0);
    float _704 = dot(vec2(_701, _703), vec2(_701, _703));
    float _4070 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _709 = sqrt(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _735 = (((_723.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _701;
    float _736 = (((_723.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _703;
    float _739 = fma(_709, _259, fma(_736, _266, _735 * _252));
    float _742 = fma(_709, _260, fma(_736, _267, _735 * _253));
    float _745 = fma(_709, _261, fma(_736, _268, _735 * _254));
    float _749 = inversesqrt(dot(vec3(_739, _742, _745), vec3(_739, _742, _745)));
    vec4 _776 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _778 = _776.x;
    float _779 = 1.0 - _778;
    float _787 = (cbMtdParam._m0[19u].x + dot(vec4(_749 * _739, _749 * _742, _749 * _745, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_778 - _779) * cbMtdParam._m0[24u].z) + _779) * cbMtdParam._m0[21u].z);
    float _4081 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _788 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _790 = (-0.0) - cbMtdParam._m0[24u].x;
    float _792 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _792 : (isnan(_792) ? 1.0 : min(_792, 1.0));
    float _800 = _788 - ((_788 * TEXCOORD_8.x) * _793);
    float _801 = _788 - ((_788 * TEXCOORD_8.y) * _793);
    float _802 = _788 - ((_788 * TEXCOORD_8.z) * _793);
    float _809 = (_800 * ((_598.x * cbMtdParam._m0[18u].x) - _578)) + _578;
    float _810 = (_801 * ((_598.y * cbMtdParam._m0[18u].y) - _579)) + _579;
    float _811 = (_802 * ((_598.z * cbMtdParam._m0[18u].z) - _580)) + _580;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _825 = _823.x;
    float _826 = 1.0 - _825;
    float _852 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_825 - _826) * cbMtdParam._m0[24u].w) + _826) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4102 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _853 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _861 = ((((cbMtdParam._m0[10u].x - _809) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _853) + _809;
    float _862 = ((((cbMtdParam._m0[10u].y - _810) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _853) + _810;
    float _863 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _811)) * _853) + _811;
    vec4 _889 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _891 = _889.x;
    float _909 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _891) * _428) + _891;
    float _926 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _909) * _501) + _909;
    float _943 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _926) * _571) + _926;
    float _947 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _943) * cbMtdParam._m0[19u].z) + _943;
    float _949 = _947 - (_947 * _800);
    float _951 = _949 - (_949 * _853);
    float _955 = (cbMtdParam._m0[19u].w * (_723.z - _698)) + _698;
    vec4 _971 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _978 = (_971.x * 2.0) + (-1.0);
    float _979 = (_971.y * 2.0) + (-1.0);
    float _980 = dot(vec2(_978, _979), vec2(_978, _979));
    float _4113 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _988 = ((_971.z - _955) * _800) + _955;
    float _991 = ((cbMtdParam._m0[23u].x - _988) * _853) + _988;
    vec4 _1014 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1020 = (_1014.x * 2.0) + (-1.0);
    float _1021 = (_1014.y * 2.0) + (-1.0);
    float _1022 = dot(vec2(_1020, _1021), vec2(_1020, _1021));
    float _4124 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1037 = ((sqrt(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) - _709) * _802) + _709;
    float _1040 = (((_978 - _735) * _800) + _735) + (cbMtdParam._m0[21u].x * _735);
    float _1041 = (((_979 - _736) * _801) + _736) + (cbMtdParam._m0[21u].x * _736);
    float _1052 = (((_1020 - _1040) + (_1040 * cbMtdParam._m0[22u].z)) * _853) + _1040;
    float _1053 = (((_1021 - _1041) + (_1041 * cbMtdParam._m0[22u].z)) * _853) + _1041;
    float _1054 = (_853 * (sqrt(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) - _1037)) + _1037;
    float _1056 = cbMtdParam._m0[22u].x + _723.w;
    float _1059 = fma(_1054, _259, fma(_1053, _266, _1052 * _252));
    float _1062 = fma(_1054, _260, fma(_1053, _267, _1052 * _253));
    float _1065 = fma(_1054, _261, fma(_1053, _268, _1052 * _254));
    float _1069 = inversesqrt(dot(vec3(_1059, _1062, _1065), vec3(_1059, _1062, _1065)));
    float _1070 = _1069 * _1059;
    float _1071 = _1069 * _1062;
    float _1072 = _1069 * _1065;
    float _4135 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _1073 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _4157 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4168 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4179 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4190 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _1078 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _1092 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1132 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1142 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1132);
    float _1143 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1132);
    float _1144 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1132);
    float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
    float _1149 = _1142 * _1148;
    float _1150 = _1143 * _1148;
    float _1151 = _1144 * _1148;
    vec4 _1156 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1158 = _1156.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1330 = sqrt(((_1142 * _1142) + (_1143 * _1143)) + (_1144 * _1144));
        float _1336 = (cbMatDynParam._m0[5u].x * _1330) + cbMatDynParam._m0[5u].y;
        float _4201 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1341 = (cbMatDynParam._m0[5u].z * _1330) + cbMatDynParam._m0[5u].w;
        float _4212 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) - _1337)) + _1337) < ((_1158 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1169 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1170 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1188 = fma(_1072, cbSceneParam._m0[5u].z, fma(_1071, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1070));
    float _1191 = fma(_1072, cbSceneParam._m0[6u].z, fma(_1071, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1070));
    float _1194 = fma(_1072, cbSceneParam._m0[7u].z, fma(_1071, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1070));
    uint _1207 = _271 + 9u;
    uint _1208 = _1207 + uint(cbMatDynParam._m0[0u].w);
    float _1214 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_1208].x;
    float _1215 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_1208].y;
    float _1216 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_1208].z;
    float _4223 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _1217 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _1218 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1219 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _1220 = 1.0 - _1078;
    float _1221 = _1217 * _1220;
    float _1222 = _1218 * _1220;
    float _1223 = _1219 * _1220;
    float _1228 = (_1217 + (-0.039999999105930328369140625)) * _1078;
    float _1229 = (_1218 + (-0.039999999105930328369140625)) * _1078;
    float _1230 = (_1219 + (-0.039999999105930328369140625)) * _1078;
    float _1231 = _1228 + 0.039999999105930328369140625;
    float _1233 = _1229 + 0.039999999105930328369140625;
    float _1234 = _1230 + 0.039999999105930328369140625;
    vec4 _1243 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1169, cbSceneParam._m0[86u].y * _1170));
    float _1247 = ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * TEXCOORD_5.w) * _1243.x;
    float _1248 = dot(vec3(_1070, _1071, _1072), vec3(_1149, _1150, _1151));
    float _1251 = _1248 * 2.0;
    float _1255 = (_1251 * _1070) - _1149;
    float _1256 = (_1251 * _1071) - _1150;
    float _1257 = (_1251 * _1072) - _1151;
    float _1261 = abs(dot(vec3(_1149, _1150, _1151), vec3(_1070, _1071, _1072)));
    float _4256 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
    float _1263 = sqrt(_1073);
    float _1276 = exp2((_1263 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1263 * 3.0));
    float _1282 = (1.0 - _1276) * ((_1263 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1283 = _1276 * _1263;
    float _1311 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1315 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1319 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1648;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1373 = fma(_1319, cbModelParam._m0[26u].z, fma(_1315, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1311));
        float _1377 = fma(_1319, cbModelParam._m0[27u].z, fma(_1315, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1311));
        float _1381 = fma(_1319, cbModelParam._m0[28u].z, fma(_1315, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1311));
        float _1406 = _1311 + _1070;
        float _1407 = _1315 + _1071;
        float _1408 = _1319 + _1072;
        float _1418 = fma(_1408, cbModelParam._m0[26u].z, fma(_1407, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1406)) - _1373;
        float _1419 = fma(_1408, cbModelParam._m0[27u].z, fma(_1407, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1406)) - _1377;
        float _1420 = fma(_1408, cbModelParam._m0[28u].z, fma(_1407, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1406)) - _1381;
        float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
        float _1437 = ((_1424 * _1418) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1373 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1424 * _1419) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1377 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1424 * _1420) / cbModelParam._m0[34u].z) + ((((((_1381 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1437, _1438, _1439), 0.0);
        float _1476 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1442.x + (-0.5));
        float _1478 = _1476 * (_1442.y + (-0.5));
        float _1479 = _1476 * (_1442.z + (-0.5));
        float _1486 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1449.x + (-0.5));
        float _1488 = _1486 * (_1449.y + (-0.5));
        float _1489 = _1486 * (_1449.z + (-0.5));
        float _1496 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1456.x + (-0.5));
        float _1498 = _1496 * (_1456.y + (-0.5));
        float _1499 = _1496 * (_1456.z + (-0.5));
        float _1506 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1463.x + (-0.5));
        float _1508 = _1506 * (_1463.y + (-0.5));
        float _1509 = _1506 * (_1463.z + (-0.5));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = _1477 * 0.5;
        float _1514 = _1487 * 0.5;
        float _1515 = _1497 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1530 = (dot(vec3(_1070, _1071, _1072), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1540 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4304 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1542 + 1.0))) + _1547) * _1510;
        float _1557 = _1478 * 0.5;
        float _1558 = _1488 * 0.5;
        float _1559 = _1498 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_1070, _1071, _1072), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4337 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1584 + 1.0))) + _1589) * _1511;
        float _1599 = _1479 * 0.5;
        float _1600 = _1489 * 0.5;
        float _1601 = _1499 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_1070, _1071, _1072), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4370 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1626 + 1.0))) + _1631) * _1512;
        _1648 = _1479;
        _1650 = _1478;
        _1651 = _1477;
        _1652 = _1489;
        _1653 = _1488;
        _1654 = _1487;
        _1655 = _1499;
        _1656 = _1498;
        _1657 = _1497;
        _1658 = _1512;
        _1659 = _1511;
        _1660 = _1510;
        _1661 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1662 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1663 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    }
    else
    {
        _1648 = _1649;
        _1650 = _1649;
        _1651 = _1649;
        _1652 = _1649;
        _1653 = _1649;
        _1654 = _1649;
        _1655 = _1649;
        _1656 = _1649;
        _1657 = _1649;
        _1658 = _1649;
        _1659 = _1649;
        _1660 = _1649;
        _1661 = 0.0;
        _1662 = 0.0;
        _1663 = 0.0;
    }
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1689 = fma(_1319, cbModelParam._m0[30u].z, fma(_1315, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1311));
        float _1693 = fma(_1319, cbModelParam._m0[31u].z, fma(_1315, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1311));
        float _1697 = fma(_1319, cbModelParam._m0[32u].z, fma(_1315, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1311));
        float _1720 = _1311 + _1070;
        float _1721 = _1315 + _1071;
        float _1722 = _1319 + _1072;
        float _1732 = fma(_1722, cbModelParam._m0[30u].z, fma(_1721, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1720)) - _1689;
        float _1733 = fma(_1722, cbModelParam._m0[31u].z, fma(_1721, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1720)) - _1693;
        float _1734 = fma(_1722, cbModelParam._m0[32u].z, fma(_1721, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1720)) - _1697;
        float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
        float _1751 = ((_1738 * _1732) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1689 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1752 = ((_1738 * _1733) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1693 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1753 = ((_1738 * _1734) / cbModelParam._m0[35u].z) + ((((((_1697 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1755 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1751, _1752, _1753), 0.0);
        vec4 _1762 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1751, _1752, _1753), 0.0);
        vec4 _1769 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1751, _1752, _1753), 0.0);
        vec4 _1776 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1751, _1752, _1753), 0.0);
        float _1788 = exp2((_1755.w + (-0.5)) * 20.0) * 2.0;
        float _1789 = _1788 * (_1755.x + (-0.5));
        float _1790 = _1788 * (_1755.y + (-0.5));
        float _1791 = _1788 * (_1755.z + (-0.5));
        float _1798 = exp2((_1762.w + (-0.5)) * 20.0) * 2.0;
        float _1799 = _1798 * (_1762.x + (-0.5));
        float _1800 = _1798 * (_1762.y + (-0.5));
        float _1801 = _1798 * (_1762.z + (-0.5));
        float _1808 = exp2((_1769.w + (-0.5)) * 20.0) * 2.0;
        float _1809 = _1808 * (_1769.x + (-0.5));
        float _1810 = _1808 * (_1769.y + (-0.5));
        float _1811 = _1808 * (_1769.z + (-0.5));
        float _1818 = exp2((_1776.w + (-0.5)) * 20.0) * 2.0;
        float _1819 = _1818 * (_1776.x + (-0.5));
        float _1820 = _1818 * (_1776.y + (-0.5));
        float _1821 = _1818 * (_1776.z + (-0.5));
        float _1822 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1823 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1824 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1825 = _1789 * 0.5;
        float _1826 = _1799 * 0.5;
        float _1827 = _1809 * 0.5;
        float _1828 = dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827));
        float _1833 = (_1828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1828);
        float _1841 = (dot(vec3(_1070, _1071, _1072), vec3(_1833 * _1825, _1833 * _1826, _1833 * _1827)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1850 = sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827)) / (_1822 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1852 = _1851 * 2.0;
        float _1856 = (1.0 - _1851) / (_1851 + 1.0);
        float _4433 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1866 = ((((1.0 - _1857) * (_1852 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1852 + 1.0))) + _1857) * _1822;
        float _1867 = _1790 * 0.5;
        float _1868 = _1800 * 0.5;
        float _1869 = _1810 * 0.5;
        float _1870 = dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869));
        float _1875 = (_1870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1870);
        float _1883 = (dot(vec3(_1070, _1071, _1072), vec3(_1875 * _1867, _1875 * _1868, _1875 * _1869)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1892 = sqrt(((_1868 * _1868) + (_1867 * _1867)) + (_1869 * _1869)) / (_1823 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1894 = _1893 * 2.0;
        float _1898 = (1.0 - _1893) / (_1893 + 1.0);
        float _4466 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1908 = ((((1.0 - _1899) * (_1894 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1894 + 1.0))) + _1899) * _1823;
        float _1909 = _1791 * 0.5;
        float _1910 = _1801 * 0.5;
        float _1911 = _1811 * 0.5;
        float _1912 = dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911));
        float _1917 = (_1912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1912);
        float _1925 = (dot(vec3(_1070, _1071, _1072), vec3(_1917 * _1909, _1917 * _1910, _1917 * _1911)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1934 = sqrt(((_1910 * _1910) + (_1909 * _1909)) + (_1911 * _1911)) / (_1824 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1936 = _1935 * 2.0;
        float _1940 = (1.0 - _1935) / (_1935 + 1.0);
        float _4499 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1941 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1950 = ((((1.0 - _1941) * (_1936 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1936 + 1.0))) + _1941) * _1824;
        _1958 = _1791;
        _1959 = _1790;
        _1960 = _1789;
        _1961 = _1801;
        _1962 = _1800;
        _1963 = _1799;
        _1964 = _1811;
        _1965 = _1810;
        _1966 = _1809;
        _1967 = _1824;
        _1968 = _1823;
        _1969 = _1822;
        _1970 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)));
        _1971 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)));
        _1972 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0)));
    }
    else
    {
        _1958 = _1649;
        _1959 = _1649;
        _1960 = _1649;
        _1961 = _1649;
        _1962 = _1649;
        _1963 = _1649;
        _1964 = _1649;
        _1965 = _1649;
        _1966 = _1649;
        _1967 = _1649;
        _1968 = _1649;
        _1969 = _1649;
        _1970 = 0.0;
        _1971 = 0.0;
        _1972 = 0.0;
    }
    float _1982 = (cbModelParam._m0[1u].x * (_1970 - _1661)) + _1661;
    float _1983 = (cbModelParam._m0[1u].x * (_1971 - _1662)) + _1662;
    float _1984 = (cbModelParam._m0[1u].x * (_1972 - _1663)) + _1663;
    float _2005 = fma(_1984, cbSceneParam._m0[89u].z, fma(_1983, cbSceneParam._m0[89u].y, _1982 * cbSceneParam._m0[89u].x));
    float _2008 = fma(_1984, cbSceneParam._m0[90u].z, fma(_1983, cbSceneParam._m0[90u].y, _1982 * cbSceneParam._m0[90u].x));
    float _2011 = fma(_1984, cbSceneParam._m0[91u].z, fma(_1983, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1982));
    float _2026 = _1255 * 0.5;
    float _2027 = _1256 * 0.5;
    float _2028 = _1257 * 0.5;
    float _2029 = dot(vec4(_2026, _2027, _2028, 1.0), vec4(_1960, _1963, _1966, _1969));
    float _2032 = dot(vec4(_2026, _2027, _2028, 1.0), vec4(_1959, _1962, _1965, _1968));
    float _2035 = dot(vec4(_2026, _2027, _2028, 1.0), vec4(_1958, _1961, _1964, _1967));
    float _2069;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2042 = dot(vec4(_2026, _2027, _2028, 1.0), vec4(_1648, _1652, _1655, _1658));
        float _2046 = dot(vec4(_2026, _2027, _2028, 1.0), vec4(_1650, _1653, _1656, _1659));
        float _2050 = dot(vec4(_2026, _2027, _2028, 1.0), vec4(_1651, _1654, _1657, _1660));
        float _2057 = dot(vec4(cbModelParam._m0[39u]), vec4(_2026, _2027, _2028, 1.0));
        _2069 = dot(vec3(isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0)), isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0)), isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2057) ? 0.0 : (isnan(0.0) ? _2057 : max(0.0, _2057))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2069 = 1.0;
    }
    float _2080;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2071 = dot(vec4(cbModelParam._m0[40u]), vec4(_2026, _2027, _2028, 1.0));
        _2080 = dot(vec3(isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)), isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0)), isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2071) ? 0.0 : (isnan(0.0) ? _2071 : max(0.0, _2071))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2080 = 1.0;
    }
    float _2084 = (_2080 * cbModelParam._m0[1u].x) + (_2069 * (1.0 - cbModelParam._m0[1u].x));
    float _2094 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1073);
    float _2095 = isnan(_2094) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2094 : min(cbModelParam._m0[25u].z, _2094));
    float _2175;
    float _2177;
    float _2179;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2142 = fma(_1319, cbModelParam._m0[13u].z, fma(_1315, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1311)) + cbModelParam._m0[13u].w;
        float _2146 = fma(_1319, cbModelParam._m0[14u].z, fma(_1315, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1311)) + cbModelParam._m0[14u].w;
        float _2150 = fma(_1319, cbModelParam._m0[15u].z, fma(_1315, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1311)) + cbModelParam._m0[15u].w;
        float _2153 = fma(_1257, cbModelParam._m0[13u].z, fma(_1256, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1255));
        float _2156 = fma(_1257, cbModelParam._m0[14u].z, fma(_1256, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1255));
        float _2159 = fma(_1257, cbModelParam._m0[15u].z, fma(_1256, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1255));
        float _2187;
        if (_2153 > 0.0)
        {
            _2187 = abs((1.0 - _2142) / _2153);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2142 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2187 = frontier_phi_17_15_ladder;
        }
        float _2389;
        if (_2156 > 0.0)
        {
            _2389 = abs((1.0 - _2146) / _2156);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2146 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2389 = frontier_phi_26_22_ladder;
        }
        float _2643;
        if (_2159 > 0.0)
        {
            _2643 = abs((1.0 - _2150) / _2159);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2150 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2643 = frontier_phi_38_33_ladder;
        }
        float _2645 = isnan(_2389) ? _2187 : (isnan(_2187) ? _2389 : min(_2187, _2389));
        float _2646 = isnan(_2643) ? _2645 : (isnan(_2645) ? _2643 : min(_2645, _2643));
        float _2650 = (_2646 * _2153) + _2142;
        float _2651 = (_2646 * _2156) + _2146;
        float _2652 = (_2646 * _2159) + _2150;
        float _2653 = _2646 * 9.9999997473787516355514526367188e-05;
        float _2655 = (-1.0) - _2653;
        float _2657 = _2653 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2652 > _2657) || ((_2652 < _2655) || ((_2651 > _2657) || ((_2651 < _2655) || ((_2650 < _2655) || (_2650 > _2657))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2652, cbModelParam._m0[9u].z, fma(_2651, cbModelParam._m0[9u].y, _2650 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2652, cbModelParam._m0[10u].z, fma(_2651, cbModelParam._m0[10u].y, _2650 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2652, cbModelParam._m0[11u].z, fma(_2651, cbModelParam._m0[11u].y, _2650 * cbModelParam._m0[11u].x))), _2095);
            frontier_phi_16_38_ladder = _2780.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2780.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2780.x * cbModelParam._m0[1u].y;
        }
        _2175 = frontier_phi_16_38_ladder_2;
        _2177 = frontier_phi_16_38_ladder_1;
        _2179 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2163 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1255, _1256, _1257), _2095);
        _2175 = _2163.x * cbModelParam._m0[1u].y;
        _2177 = _2163.y * cbModelParam._m0[1u].y;
        _2179 = _2163.z * cbModelParam._m0[1u].y;
    }
    float _2183 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1073);
    float _2184 = isnan(_2183) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2183 : min(cbModelParam._m0[25u].w, _2183));
    float _2273;
    float _2275;
    float _2277;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2237 = fma(_1319, cbModelParam._m0[21u].z, fma(_1315, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1311)) + cbModelParam._m0[21u].w;
        float _2241 = fma(_1319, cbModelParam._m0[22u].z, fma(_1315, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1311)) + cbModelParam._m0[22u].w;
        float _2245 = fma(_1319, cbModelParam._m0[23u].z, fma(_1315, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1311)) + cbModelParam._m0[23u].w;
        float _2248 = fma(_1257, cbModelParam._m0[21u].z, fma(_1256, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1255));
        float _2251 = fma(_1257, cbModelParam._m0[22u].z, fma(_1256, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1255));
        float _2254 = fma(_1257, cbModelParam._m0[23u].z, fma(_1256, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1255));
        float _2394;
        if (_2248 > 0.0)
        {
            _2394 = abs((1.0 - _2237) / _2248);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2248 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2237 + 1.0) / _2248);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2394 = frontier_phi_28_24_ladder;
        }
        float _2670;
        if (_2251 > 0.0)
        {
            _2670 = abs((1.0 - _2241) / _2251);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2251 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2241 + 1.0) / _2251);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2670 = frontier_phi_40_35_ladder;
        }
        float _2883;
        if (_2254 > 0.0)
        {
            _2883 = abs((1.0 - _2245) / _2254);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2254 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2245 + 1.0) / _2254);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2883 = frontier_phi_49_46_ladder;
        }
        float _2885 = isnan(_2670) ? _2394 : (isnan(_2394) ? _2670 : min(_2394, _2670));
        float _2886 = isnan(_2883) ? _2885 : (isnan(_2885) ? _2883 : min(_2885, _2883));
        float _2890 = (_2886 * _2248) + _2237;
        float _2891 = (_2886 * _2251) + _2241;
        float _2892 = (_2886 * _2254) + _2245;
        float _2893 = _2886 * 9.9999997473787516355514526367188e-05;
        float _2894 = (-1.0) - _2893;
        float _2896 = _2893 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2892 > _2896) || ((_2892 < _2894) || ((_2891 > _2896) || ((_2891 < _2894) || ((_2890 < _2894) || (_2890 > _2896))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3091 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2892, cbModelParam._m0[17u].z, fma(_2891, cbModelParam._m0[17u].y, _2890 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2892, cbModelParam._m0[18u].z, fma(_2891, cbModelParam._m0[18u].y, _2890 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2892, cbModelParam._m0[19u].z, fma(_2891, cbModelParam._m0[19u].y, _2890 * cbModelParam._m0[19u].x))), _2184);
            frontier_phi_25_49_ladder = _3091.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3091.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3091.x * cbModelParam._m0[1u].z;
        }
        _2273 = frontier_phi_25_49_ladder_2;
        _2275 = frontier_phi_25_49_ladder_1;
        _2277 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2257 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1255, _1256, _1257), _2184);
        _2273 = _2257.x * cbModelParam._m0[1u].z;
        _2275 = _2257.y * cbModelParam._m0[1u].z;
        _2277 = _2257.z * cbModelParam._m0[1u].z;
    }
    float _2290 = (((_1282 * _1231) + _1283) * _1247) * ((cbModelParam._m0[1u].w * (_2273 - _2175)) + _2175);
    float _2292 = (((_1282 * _1233) + _1283) * _1247) * ((cbModelParam._m0[1u].w * (_2275 - _2177)) + _2177);
    float _2294 = (((_1282 * _1234) + _1283) * _1247) * ((cbModelParam._m0[1u].w * (_2277 - _2179)) + _2179);
    float _2297 = fma(_2294, cbSceneParam._m0[89u].z, fma(_2292, cbSceneParam._m0[89u].y, _2290 * cbSceneParam._m0[89u].x));
    float _2300 = fma(_2294, cbSceneParam._m0[90u].z, fma(_2292, cbSceneParam._m0[90u].y, _2290 * cbSceneParam._m0[90u].x));
    float _2303 = fma(_2294, cbSceneParam._m0[91u].z, fma(_2292, cbSceneParam._m0[91u].y, _2290 * cbSceneParam._m0[91u].x));
    uvec4 _2313 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2315 = _2313.x * 14u;
    uint _2316 = _2315 + 13u;
    float _2323 = _1247 + (-1.0);
    float _2328 = (cbLight._m0[_2316].x * _2323) + 1.0;
    float _2329 = (cbLight._m0[_2316].y * _2323) + 1.0;
    float _2330 = (cbLight._m0[_2316].z * _2323) + 1.0;
    float _2331 = (cbLight._m0[_2316].w * _2323) + 1.0;
    uint _2332 = _2315 + 5u;
    float _2338 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
    uint _2342 = _2315 + 4u;
    float _2348 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2352 = _2315 | 1u;
    float _2363 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_1070, _1071, _1072));
    float _2366 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_1070, _1071, _1072));
    float _4635 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _4646 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2371 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * 0.3183098733425140380859375;
    float _2373 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * 0.3183098733425140380859375;
    float _2380 = ((cbLight._m0[_2332].x * _2338) * _2373) + ((cbLight._m0[_2342].x * _2348) * _2371);
    float _2381 = ((_2338 * cbLight._m0[_2332].y) * _2373) + ((_2348 * cbLight._m0[_2342].y) * _2371);
    float _2382 = ((_2338 * cbLight._m0[_2332].z) * _2373) + ((_2348 * cbLight._m0[_2342].z) * _2371);
    uvec4 _2386 = floatBitsToUint(cbLight._m0[_2315 + 12u]);
    bool _2388 = _2386.x == 0u;
    float _2399;
    float _2401;
    float _2403;
    if (_2388)
    {
        _2399 = _2380;
        _2401 = _2381;
        _2403 = _2382;
    }
    else
    {
        uint _2407 = _2315 + 6u;
        float _2423 = (dot(vec3(cbLight._m0[_2315 + 2u].xyz), vec3(_1070, _1071, _1072)) * 0.5) + 0.5;
        float _2424 = _2423 * _2423;
        float _4657 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2425 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2426 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2399 = (((cbLight._m0[_2407].x * 0.3183098733425140380859375) * _2425) * _2426) + _2380;
        _2401 = (((cbLight._m0[_2407].y * 0.3183098733425140380859375) * _2425) * _2426) + _2381;
        _2403 = (((cbLight._m0[_2407].z * 0.3183098733425140380859375) * _2425) * _2426) + _2382;
    }
    bool _2406 = _2386.y == 0u;
    float _2444;
    float _2446;
    float _2448;
    if (_2406)
    {
        _2444 = _2399;
        _2446 = _2401;
        _2448 = _2403;
    }
    else
    {
        uint _2614 = _2315 + 7u;
        float _2630 = (dot(vec3(cbLight._m0[_2315 + 3u].xyz), vec3(_1070, _1071, _1072)) * 0.5) + 0.5;
        float _2631 = _2630 * _2630;
        float _4673 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2632 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2633 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2444 = (((cbLight._m0[_2614].x * 0.3183098733425140380859375) * _2632) * _2633) + _2399;
        _2446 = (((cbLight._m0[_2614].y * 0.3183098733425140380859375) * _2632) * _2633) + _2401;
        _2448 = (((cbLight._m0[_2614].z * 0.3183098733425140380859375) * _2632) * _2633) + _2403;
    }
    uint _2451 = _2315 + 8u;
    float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _1073) * 0.949999988079071044921875);
    float _2465 = _2464 * _2464;
    float _2466 = cbLight._m0[_2315].x + _1149;
    float _2467 = cbLight._m0[_2315].y + _1150;
    float _2468 = cbLight._m0[_2315].z + _1151;
    float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
    float _2473 = _2472 * _2466;
    float _2474 = _2472 * _2467;
    float _2475 = _2472 * _2468;
    float _2476 = dot(vec3(_1070, _1071, _1072), vec3(cbLight._m0[_2315].xyz));
    float _4689 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _4700 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
    float _2480 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _2481 = dot(vec3(_1070, _1071, _1072), vec3(_2473, _2474, _2475));
    float _4711 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2473, _2474, _2475));
    float _4722 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2465 * _2465;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2501 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
    float _2502 = 0.959999978542327880859375 - _1228;
    float _2504 = 0.959999978542327880859375 - _1229;
    float _2505 = 0.959999978542327880859375 - _1230;
    float _2512 = 1.0 - _2465;
    float _2523 = (0.5 / (((_2480 * ((_2479 * _2512) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2512) + _2465) * _2479))) * _2479;
    float _4733 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2525 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    uint _2536 = _2315 + 9u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _1073) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2352].x + _1149;
    float _2550 = cbLight._m0[_2352].y + _1150;
    float _2551 = cbLight._m0[_2352].z + _1151;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_1070, _1071, _1072), vec3(cbLight._m0[_2352].xyz));
    float _4744 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2563 = dot(vec3(_1070, _1071, _1072), vec3(_2556, _2557, _2558));
    float _4755 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2556, _2557, _2558));
    float _4766 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2548 * _2548;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
    float _2589 = 1.0 - _2548;
    float _2599 = (0.5 / (((_2480 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2589) + _2548) * _2562))) * _2562;
    float _4777 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    float _2611 = (((((_2582 * _2502) + _1231) * cbLight._m0[_2536].x) * _2601) * _2338) + (((((_2501 * _2502) + _1231) * cbLight._m0[_2451].x) * _2525) * _2348);
    float _2612 = (((((_2582 * _2504) + _1233) * cbLight._m0[_2536].y) * _2601) * _2338) + (((((_2501 * _2504) + _1233) * cbLight._m0[_2451].y) * _2525) * _2348);
    float _2613 = (((((_2582 * _2505) + _1234) * cbLight._m0[_2536].z) * _2601) * _2338) + (((((_2501 * _2505) + _1234) * cbLight._m0[_2451].z) * _2525) * _2348);
    float _2675;
    float _2677;
    float _2679;
    if (_2388)
    {
        _2675 = _2611;
        _2677 = _2612;
        _2679 = _2613;
    }
    else
    {
        uint _2681 = _2315 + 2u;
        uint _2685 = _2315 + 10u;
        float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2681].w)) * _1073) * 0.949999988079071044921875);
        float _2700 = _2699 * _2699;
        float _2701 = cbLight._m0[_2681].x + _1149;
        float _2702 = cbLight._m0[_2681].y + _1150;
        float _2703 = cbLight._m0[_2681].z + _1151;
        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
        float _2708 = _2707 * _2701;
        float _2709 = _2707 * _2702;
        float _2710 = _2707 * _2703;
        float _2711 = dot(vec3(_1070, _1071, _1072), vec3(cbLight._m0[_2681].xyz));
        float _4788 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2715 = dot(vec3(_1070, _1071, _1072), vec3(_2708, _2709, _2710));
        float _4799 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2719 = dot(vec3(cbLight._m0[_2681].xyz), vec3(_2708, _2709, _2710));
        float _4810 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2723 = _2700 * _2700;
        float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
        float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) * 5.0);
        float _2741 = 1.0 - _2700;
        float _2751 = (0.5 / (((_2480 * ((_2714 * _2741) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2741) + _2700) * _2714))) * _2714;
        float _4821 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2675 = (((((_2734 * _2502) + _1231) * cbLight._m0[_2685].x) * _2753) * _2754) + _2611;
        _2677 = (((((_2734 * _2504) + _1233) * cbLight._m0[_2685].y) * _2753) * _2754) + _2612;
        _2679 = (((((_2734 * _2505) + _1234) * cbLight._m0[_2685].z) * _2753) * _2754) + _2613;
    }
    float _2789;
    float _2791;
    float _2793;
    if (_2406)
    {
        _2789 = _2675;
        _2791 = _2677;
        _2793 = _2679;
    }
    else
    {
        uint _2800 = _2315 + 3u;
        uint _2804 = _2315 + 11u;
        float _2818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2800].w)) * _1073) * 0.949999988079071044921875);
        float _2819 = _2818 * _2818;
        float _2820 = cbLight._m0[_2800].x + _1149;
        float _2821 = cbLight._m0[_2800].y + _1150;
        float _2822 = cbLight._m0[_2800].z + _1151;
        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
        float _2827 = _2826 * _2820;
        float _2828 = _2826 * _2821;
        float _2829 = _2826 * _2822;
        float _2830 = dot(vec3(_1070, _1071, _1072), vec3(cbLight._m0[_2800].xyz));
        float _4837 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2834 = dot(vec3(_1070, _1071, _1072), vec3(_2827, _2828, _2829));
        float _4848 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2838 = dot(vec3(cbLight._m0[_2800].xyz), vec3(_2827, _2828, _2829));
        float _4859 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2842 = _2819 * _2819;
        float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
        float _2853 = exp2(log2(1.0 - (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) * 5.0);
        float _2860 = 1.0 - _2819;
        float _2870 = (0.5 / (((_2480 * ((_2833 * _2860) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2860) + _2819) * _2833))) * _2833;
        float _4870 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2872 = (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
        float _2873 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2789 = (((((_2853 * _2502) + _1231) * cbLight._m0[_2804].x) * _2872) * _2873) + _2675;
        _2791 = (((((_2853 * _2504) + _1233) * cbLight._m0[_2804].y) * _2872) * _2873) + _2677;
        _2793 = (((((_2853 * _2505) + _1234) * cbLight._m0[_2804].z) * _2872) * _2873) + _2679;
    }
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    if (_2313.y == 0u)
    {
        float _2948 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2949 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2948;
        float _2950 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2948;
        float _2951 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2948;
        uvec4 _2963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2964 = _2963.x;
        uint _2975 = uint((float(_2963.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1170) / _2964))) + floor(float(uint(cbSceneParam._m0[85u].x * _1169) / _2964)));
        float _2985 = (log2(_2951 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2986 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        uint _2989 = uint(isnan(14.0) ? _2986 : (isnan(_2986) ? 14.0 : min(_2986, 14.0)));
        uvec4 _2994 = texelFetch(g_lightClusterGridBuffer, int(((_2989 << 2u) + (_2975 << 6u)) >> 2u));
        uint _2995 = _2994.x;
        uint _2996 = _2963.z;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        if (((((1u << ((_2996 >> 4u) & 15u)) + 4294967295u) & _2995) == 0u) || ((_2996 & 240u) == 0u))
        {
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
        }
        else
        {
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            uint _3254 = 0u;
            uint _3263;
            bool _3264;
            for (;;)
            {
                _3263 = texelFetch(g_lightClassification, int((((_2989 << 5u) + (_2975 << 9u)) + (_3254 << 2u)) >> 2u)).x;
                _3264 = _3263 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3264)
                {
                    frontier_phi_66_pred = _3248;
                    frontier_phi_66_pred_1 = _3253;
                    frontier_phi_66_pred_2 = _3252;
                    frontier_phi_66_pred_3 = _3251;
                    frontier_phi_66_pred_4 = _3250;
                    frontier_phi_66_pred_5 = _3249;
                }
                else
                {
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    uint _3399;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3263;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    for (;;)
                    {
                        uint _3403 = uint(findLSB(_3399)) + (_3254 << 5u);
                        uint _3400 = (_3399 + 4294967295u) & _3399;
                        uint _3405 = _3403 * 48u;
                        vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 3u)).x));
                        uint _3425 = (_3403 * 48u) + 4u;
                        vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3425)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 3u)).x));
                        uint _3444 = (_3403 * 48u) + 8u;
                        vec3 _3455 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3444)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 2u)).x));
                        float _3459 = _3419.x - _2949;
                        float _3460 = _3419.y - _2950;
                        float _3461 = _3419.z - _2951;
                        float _3462 = dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461));
                        float _3465 = inversesqrt(_3462);
                        float _3466 = _3465 * _3459;
                        float _3467 = _3465 * _3460;
                        float _3468 = _3465 * _3461;
                        float _3469 = dot(vec3(_1188, _1191, _1194), vec3(_3466, _3467, _3468));
                        float _3474 = 1.0 - (_3462 * _3419.w);
                        float _4896 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3475 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                        float _3476 = sqrt(_3462) * _3438.w;
                        float _3479 = 1.39999997615814208984375 / (_3476 + 1.39999997615814208984375);
                        float _3480 = _3479 * _3479;
                        float _3483 = ((1.0 - _3480) * _3469) + _3480;
                        float _3486 = _3476 * _3476;
                        float _3490 = ((isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0))) * _3475) / ((_3486 * 0.699999988079071044921875) + 1.0);
                        float _3494 = (-0.0) - _2949;
                        float _3495 = (-0.0) - _2950;
                        float _3496 = (-0.0) - _2951;
                        float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                        float _3501 = _3500 * _3494;
                        float _3502 = _3500 * _3495;
                        float _3503 = _3500 * _3496;
                        float _3511 = exp2(log2(1.0 / ((_3486 * 3.5) + 5.0)) * 0.25);
                        float _3512 = 1.0 - _1263;
                        float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                        float _3520 = _3519 * _3519;
                        float _3521 = _3520 * _3520;
                        float _3522 = _3501 + _3466;
                        float _3523 = _3502 + _3467;
                        float _3524 = _3503 + _3468;
                        float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                        float _3532 = dot(vec3(_1188, _1191, _1194), vec3(_3501, _3502, _3503));
                        float _4912 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3535 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3536 = dot(vec3(_1188, _1191, _1194), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                        float _4923 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3539 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                        float _3544 = _3479 * _3520;
                        float _3545 = _3544 * _3544;
                        float _3548 = ((1.0 - _3545) * _3469) + _3545;
                        float _4934 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3549 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                        float _3550 = 1.0 - _3520;
                        float _3560 = (0.5 / (((_3549 * ((_3535 * _3550) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3549 * _3550) + _3520) * _3535))) * _3549;
                        float _4945 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3571 = (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) / ((_3543 * _3543) * ((_3486 * 2.1991131305694580078125) + 3.141590118408203125))) * _3475;
                        _3323 = (_3490 * _3438.x) + _3396;
                        _3324 = (_3490 * _3438.y) + _3397;
                        _3325 = (_3490 * _3438.z) + _3398;
                        _3320 = (_3571 * _3455.x) + _3393;
                        _3321 = (_3571 * _3455.y) + _3394;
                        _3322 = (_3571 * _3455.z) + _3395;
                        if (_3400 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3400;
                        }
                    }
                    frontier_phi_66_pred = _3320;
                    frontier_phi_66_pred_1 = _3325;
                    frontier_phi_66_pred_2 = _3324;
                    frontier_phi_66_pred_3 = _3323;
                    frontier_phi_66_pred_4 = _3322;
                    frontier_phi_66_pred_5 = _3321;
                }
                _3097 = frontier_phi_66_pred;
                _3107 = frontier_phi_66_pred_1;
                _3105 = frontier_phi_66_pred_2;
                _3103 = frontier_phi_66_pred_3;
                _3101 = frontier_phi_66_pred_4;
                _3099 = frontier_phi_66_pred_5;
                uint _3255 = _3254 + 1u;
                if (_3255 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3248 = _3097;
                    _3249 = _3099;
                    _3250 = _3101;
                    _3251 = _3103;
                    _3252 = _3105;
                    _3253 = _3107;
                    _3254 = _3255;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
        }
        uvec4 _3110 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3111 = _3110.z;
        uint _3113 = (_3111 >> 8u) & 15u;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        if (((4294967295u << _3113) & _2995) == 0u)
        {
            _3216 = _3096;
            _3218 = _3098;
            _3220 = _3100;
            _3222 = _3102;
            _3224 = _3104;
            _3226 = _3106;
        }
        else
        {
            float _3241 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
            float _3242 = _3241 * _2949;
            float _3243 = _3241 * _2950;
            float _3244 = _3241 * _2951;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3113 < ((_3111 >> 12u) & 15u))
            {
                float _3217;
                float _3219;
                float _3221;
                float _3223;
                float _3225;
                float _3227;
                float _3376 = _3096;
                float _3377 = _3098;
                float _3378 = _3100;
                float _3379 = _3102;
                float _3380 = _3104;
                float _3381 = _3106;
                uint _3382 = _3113;
                uint _3391;
                bool _3392;
                for (;;)
                {
                    _3391 = texelFetch(g_lightClassification, int((((_2989 << 5u) + (_2975 << 9u)) + (_3382 << 2u)) >> 2u)).x;
                    _3392 = _3391 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3392)
                    {
                        frontier_phi_77_pred = _3381;
                        frontier_phi_77_pred_1 = _3380;
                        frontier_phi_77_pred_2 = _3379;
                        frontier_phi_77_pred_3 = _3378;
                        frontier_phi_77_pred_4 = _3377;
                        frontier_phi_77_pred_5 = _3376;
                    }
                    else
                    {
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3598 = _3376;
                        float _3599 = _3377;
                        float _3600 = _3378;
                        float _3601 = _3379;
                        float _3602 = _3380;
                        float _3603 = _3381;
                        uint _3604 = _3391;
                        uint _3605;
                        vec4 _3630;
                        float _3631;
                        vec4 _3646;
                        vec3 _3658;
                        vec4 _3673;
                        vec4 _3688;
                        float _3734;
                        bool _3735;
                        for (;;)
                        {
                            uint _3615 = ((_3382 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3604));
                            _3605 = (_3604 + 4294967295u) & _3604;
                            uint _3617 = _3615 * 40u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            _3631 = _3630.w;
                            uint _3633 = (_3615 * 40u) + 4u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3615 * 40u) + 8u;
                            _3658 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x));
                            uint _3660 = (_3615 * 40u) + 16u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            uint _3675 = (_3615 * 40u) + 20u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3615 * 40u) + 24u;
                            vec4 _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3709 = (_3615 * 40u) + 28u;
                            vec4 _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            _3734 = fma(_2951, _3722.z, fma(_2950, _3722.y, _3722.x * _2949)) + _3722.w;
                            _3735 = !((fma(_2951, _3703.z, fma(_2950, _3703.y, _3703.x * _2949)) + _3703.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3735)
                            {
                                float _3762 = _3630.x - _2949;
                                float _3763 = _3630.y - _2950;
                                float _3764 = _3630.z - _2951;
                                float _3765 = dot(vec3(_3762, _3763, _3764), vec3(_3762, _3763, _3764));
                                float _3768 = inversesqrt(_3765);
                                float _3769 = _3768 * _3762;
                                float _3770 = _3768 * _3763;
                                float _3771 = _3768 * _3764;
                                float _3775 = 1.0 - (_3765 / (_3631 * _3631));
                                float _4956 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3780 = sqrt(_3765) * _3646.w;
                                float _3782 = 1.39999997615814208984375 / (_3780 + 1.39999997615814208984375);
                                float _3783 = _3782 * _3782;
                                float _3786 = ((1.0 - _3783) * dot(vec3(_3769, _3770, _3771), vec3(_1188, _1191, _1194))) + _3783;
                                float _3789 = _3780 * _3780;
                                float _3793 = (fma(_2951, _3673.z, fma(_2950, _3673.y, _3673.x * _2949)) + _3673.w) / _3734;
                                float _3794 = (fma(_2951, _3688.z, fma(_2950, _3688.y, _3688.x * _2949)) + _3688.w) / _3734;
                                float _3798 = 1.0 - dot(vec2(_3793, _3794), vec2(_3793, _3794));
                                float _4972 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3799 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3800 = _3799 * (((isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0))) * _3776) / ((_3789 * 0.699999988079071044921875) + 1.0));
                                float _3812 = exp2(log2(1.0 / ((_3789 * 3.5) + 5.0)) * 0.25);
                                float _3813 = 1.0 - _1263;
                                float _3820 = sqrt(1.0 - ((1.0 - (_3813 * _3813)) * (1.0 - (_3812 * _3812))));
                                float _3821 = _3820 * _3820;
                                float _3822 = _3821 * _3821;
                                float _3823 = _3769 - _3242;
                                float _3824 = _3770 - _3243;
                                float _3825 = _3771 - _3244;
                                float _3829 = inversesqrt(dot(vec3(_3823, _3824, _3825), vec3(_3823, _3824, _3825)));
                                float _3833 = dot(vec3(_1188, _1191, _1194), vec3((-0.0) - _3242, (-0.0) - _3243, (-0.0) - _3244));
                                float _4983 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3836 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3837 = dot(vec3(_1188, _1191, _1194), vec3(_3829 * _3823, _3829 * _3824, _3829 * _3825));
                                float _4994 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3840 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3844 = ((_3840 * _3840) * (_3822 + (-1.0))) + 1.0;
                                float _3845 = _3782 * _3821;
                                float _3846 = _3845 * _3845;
                                float _3852 = ((1.0 - _3846) * dot(vec3(_1188, _1191, _1194), vec3(_3769, _3770, _3771))) + _3846;
                                float _5005 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3853 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                                float _3854 = 1.0 - _3821;
                                float _3864 = (0.5 / (((_3853 * ((_3836 * _3854) + _3821)) + 9.9999999392252902907785028219223e-09) + (((_3853 * _3854) + _3821) * _3836))) * _3853;
                                float _5016 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3874 = (_3799 * _3776) * (((_3822 * 3.1415927410125732421875) * (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0)))) / ((_3844 * _3844) * ((_3789 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3800 * _3646.y;
                                frontier_phi_83_pred_1 = _3800 * _3646.x;
                                frontier_phi_83_pred_2 = _3874 * _3658.z;
                                frontier_phi_83_pred_3 = _3874 * _3658.y;
                                frontier_phi_83_pred_4 = _3874 * _3658.x;
                                frontier_phi_83_pred_5 = _3800 * _3646.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3882 = frontier_phi_83_pred;
                            _3881 = frontier_phi_83_pred_1;
                            _3880 = frontier_phi_83_pred_2;
                            _3879 = frontier_phi_83_pred_3;
                            _3878 = frontier_phi_83_pred_4;
                            _3883 = frontier_phi_83_pred_5;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3585 = _3878 + _3598;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            if (_3605 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3605;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3590;
                        frontier_phi_77_pred_1 = _3589;
                        frontier_phi_77_pred_2 = _3588;
                        frontier_phi_77_pred_3 = _3587;
                        frontier_phi_77_pred_4 = _3586;
                        frontier_phi_77_pred_5 = _3585;
                    }
                    _3227 = frontier_phi_77_pred;
                    _3225 = frontier_phi_77_pred_1;
                    _3223 = frontier_phi_77_pred_2;
                    _3221 = frontier_phi_77_pred_3;
                    _3219 = frontier_phi_77_pred_4;
                    _3217 = frontier_phi_77_pred_5;
                    uint _3383 = _3382 + 1u;
                    if (_3383 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3376 = _3217;
                        _3377 = _3219;
                        _3378 = _3221;
                        _3379 = _3223;
                        _3380 = _3225;
                        _3381 = _3227;
                        _3382 = _3383;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3221;
                frontier_phi_58_59_ladder_1 = _3227;
                frontier_phi_58_59_ladder_2 = _3225;
                frontier_phi_58_59_ladder_3 = _3223;
                frontier_phi_58_59_ladder_4 = _3219;
                frontier_phi_58_59_ladder_5 = _3217;
            }
            else
            {
                frontier_phi_58_59_ladder = _3100;
                frontier_phi_58_59_ladder_1 = _3106;
                frontier_phi_58_59_ladder_2 = _3104;
                frontier_phi_58_59_ladder_3 = _3102;
                frontier_phi_58_59_ladder_4 = _3098;
                frontier_phi_58_59_ladder_5 = _3096;
            }
            _3216 = frontier_phi_58_59_ladder_5;
            _3218 = frontier_phi_58_59_ladder_4;
            _3220 = frontier_phi_58_59_ladder;
            _3222 = frontier_phi_58_59_ladder_3;
            _3224 = frontier_phi_58_59_ladder_2;
            _3226 = frontier_phi_58_59_ladder_1;
        }
        float _3231 = isnan(1.0) ? _1247 : (isnan(_1247) ? 1.0 : min(_1247, 1.0));
        _3008 = (_3231 * _3222) + _2444;
        _3010 = (_3231 * _3224) + _2446;
        _3012 = (_3231 * _3226) + _2448;
        _3014 = ((_3216 * _1231) * _3231) + _2789;
        _3016 = ((_3218 * _1233) * _3231) + _2791;
        _3018 = ((_3220 * _1234) * _3231) + _2793;
    }
    else
    {
        _3008 = _2444;
        _3010 = _2446;
        _3012 = _2448;
        _3014 = _2789;
        _3016 = _2791;
        _3018 = _2793;
    }
    float _5032 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _5043 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _5054 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _3035 = ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_3008 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1247))) + ((_3014 + ((isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0))) * _2084)) * cbPerFrame._m0[3u].x);
    float _3036 = ((isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_3010 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1247))) + ((_3016 + ((isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0))) * _2084)) * cbPerFrame._m0[3u].x);
    float _3037 = ((isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0))) * (_3012 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1247))) + ((_3018 + ((isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0))) * _2084)) * cbPerFrame._m0[3u].x);
    uint _3038 = _271 + 6u;
    float _3046 = _1169 / cbSceneParam._m0[86u].x;
    float _3047 = _1170 / cbSceneParam._m0[86u].y;
    vec4 _3061 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, (log2((isnan(cbSceneParam._m0[77u].w) ? _1092 : (isnan(_1092) ? cbSceneParam._m0[77u].w : min(_1092, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3063 = _3061.x;
    float _3064 = _3061.y;
    float _3065 = _3061.z;
    float _3066 = _3061.w;
    float _3158;
    float _3160;
    float _3162;
    float _3164;
    if (_1092 > cbSceneParam._m0[78u].w)
    {
        float _3121 = isnan(_1092) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1092 : min(cbSceneParam._m0[80u].w, _1092));
        float _3122 = _3121 / _1092;
        float _3133 = _3122 * _1142;
        float _3134 = _1143 * _3122;
        float _3135 = (-0.0) - _3134;
        float _3136 = _3122 * _1144;
        float _3138 = (cbSceneParam._m0[77u].w * _3135) / _3121;
        float _3139 = _3138 + cbSceneParam._m0[79u].w;
        float _3140 = cbSceneParam._m0[79u].w - _3134;
        float _3146 = sqrt(((_3133 * _3133) + (_3134 * _3134)) + (_3136 * _3136));
        float _3149 = (1.0 - (cbSceneParam._m0[77u].w / _3121)) * _3146;
        float _3154 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3156 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3333;
        if (abs((_3135 - _3138) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3333 = ((((_3139 > 0.0) ? exp2(_3154 * _3139) : (2.0 - exp2(_3156 * _3139))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3149;
        }
        else
        {
            float _3277 = 1.0 / cbSceneParam._m0[80u].x;
            float _3278 = isnan(_3140) ? _3139 : (isnan(_3139) ? _3140 : max(_3139, _3140));
            float _3279 = isnan(_3140) ? _3139 : (isnan(_3139) ? _3140 : min(_3139, _3140));
            float _3288 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : min(_3278, 0.0));
            float _3289 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : min(_3279, 0.0));
            _3333 = ((abs(_3146 / _3135) * cbSceneParam._m0[80u].y) * ((((_3288 - _3289) * 2.0) - ((exp2(_3154 * (isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0)))) - exp2(_3154 * (isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))))) * _3277)) - ((exp2(_3156 * _3288) - exp2(_3156 * _3289)) * _3277))) + (_3149 * cbSceneParam._m0[80u].z);
        }
        vec4 _3335 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3046, _3047, 1.0), 0.0);
        float _3344 = exp2((_3333 * (-1.44269502162933349609375)) * (1.0 - _3335.w));
        float _3345 = log2(_3344);
        float _3361 = log2(_3066);
        _3158 = (exp2(_3361 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].x)) * _3335.x) / cbSceneParam._m0[78u].x)) + _3063;
        _3160 = (exp2(_3361 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].y)) * _3335.y) / cbSceneParam._m0[78u].y)) + _3064;
        _3162 = (exp2(_3361 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].z)) * _3335.z) / cbSceneParam._m0[78u].z)) + _3065;
        _3164 = _3344 * _3066;
    }
    else
    {
        _3158 = _3063;
        _3160 = _3064;
        _3162 = _3065;
        _3164 = _3066;
    }
    bool _3371;
    vec4 _3174;
    vec4 _3196;
    float _3198;
    float _3202;
    float _3203;
    float _3204;
    float _3205;
    bool _3215;
    for (;;)
    {
        _3174 = cbMatDynParam._m0[0u];
        float _3176 = roundEven(_3174.y);
        bool _3177 = _3176 == 3.0;
        float _3178 = log2(_3164);
        float _3185 = exp2(_3178 * cbSceneParam._m0[78u].x) * _3035;
        float _3186 = exp2(_3178 * cbSceneParam._m0[78u].y) * _3036;
        float _3187 = exp2(_3178 * cbSceneParam._m0[78u].z) * _3037;
        float _3194 = _1158 + (-0.5);
        _3196 = cbMtdParam._m0[1u];
        _3198 = _3196.y * _3194;
        float _3201 = (_3176 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3202 = _3201 * (_3177 ? _3185 : (_3185 + (cbSceneParam._m0[72u].w * _3158)));
        _3203 = _3201 * (_3177 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3160)));
        _3204 = _3201 * (_3177 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3162)));
        _3205 = _3194 * 0.999000012874603271484375;
        _3215 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3215)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _3205) < 0.5)
            {
                _3371 = true;
                break;
            }
        }
        uint _3312 = _1207 + uint(_3174.w);
        if ((cbInstanceData._m0[_3312].w < 1.0) && ((cbInstanceData._m0[_3312].w + _3205) < 0.5))
        {
            _3371 = true;
            break;
        }
        if ((_3198 + 1.0) < _3196.x)
        {
            _3371 = true;
            break;
        }
        _3371 = false;
        break;
    }
    float _3576;
    if (_3371)
    {
        discard_state = true;
        _3576 = 0.0;
    }
    else
    {
        _3576 = cbInstanceData._m0[_3038].w;
    }
    SV_Target.x = _3202;
    SV_Target.y = _3203;
    SV_Target.z = _3204;
    SV_Target.w = _3576;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3038].w;
    discard_exit();
}


