#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1507;
float _4169;
float _4170;
float _4171;
float _4172;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4181 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4192 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4203 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _449 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _451 = _449.x;
    float _463 = dot(vec4(_451, _449.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _480 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_451 - _463) * cbMtdParam._m0[23u].w) + _463) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4214 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _491 = (_349.x * cbMtdParam._m0[9u].x) * ((_481 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380);
    float _492 = (_349.y * cbMtdParam._m0[9u].y) * ((_481 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381);
    float _493 = (_349.z * cbMtdParam._m0[9u].z) * ((_481 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382);
    float _497 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _491;
    float _500 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _492;
    float _503 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _493;
    float _511 = (((_491 - _497) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) + _497) * 4.55000019073486328125;
    float _513 = (((_492 - _500) * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) + _500) * 4.55000019073486328125;
    float _515 = (((_493 - _503) * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) + _503) * 4.55000019073486328125;
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _312) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _313) + cbTextureTilingScale._m0[14u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _598 = _596.x;
    float _599 = _596.y;
    float _600 = _596.z;
    float _609 = ((_579.z - _600) * _481) + _600;
    float _612 = ((((_579.x - _598) * _481) + _598) * 2.0) + (-1.0);
    float _613 = ((((_579.y - _599) * _481) + _599) * 2.0) + (-1.0);
    float _614 = dot(vec2(_612, _613), vec2(_612, _613));
    float _4225 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _619 = sqrt(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _662 = _660.x;
    float _663 = 1.0 - _662;
    float _672 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _675 = ((isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : min(_672, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _684 = (_675 - ((((((_662 - _663) * cbMtdParam._m0[24u].z) + _663) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _675))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4246 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _692 = (_685 * ((_534.x * cbMtdParam._m0[18u].x) - _511)) + _511;
    float _693 = (_685 * ((_534.y * cbMtdParam._m0[18u].y) - _513)) + _513;
    float _694 = (_685 * ((_534.z * cbMtdParam._m0[18u].z) - _515)) + _515;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _708 = _706.x;
    float _709 = 1.0 - _708;
    float _734 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_708 - _709) * cbMtdParam._m0[24u].w) + _709) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4257 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _735 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _743 = ((((cbMtdParam._m0[10u].x - _692) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _735) + _692;
    float _744 = ((((cbMtdParam._m0[10u].y - _693) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _735) + _693;
    float _745 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _694)) * _735) + _694;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _773 = _771.x;
    float _790 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _773) * _481) + _773;
    float _794 = ((_757.x - _790) * cbMtdParam._m0[19u].z) + _790;
    float _796 = _794 - (_794 * _685);
    float _798 = _796 - (_796 * _735);
    float _803 = (((_554.z - _609) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _609;
    float _807 = ((_635.z - _803) * cbMtdParam._m0[19u].w) + _803;
    vec4 _821 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _828 = (_821.x * 2.0) + (-1.0);
    float _829 = (_821.y * 2.0) + (-1.0);
    float _830 = dot(vec2(_828, _829), vec2(_828, _829));
    float _4268 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _838 = (_685 * (_821.z - _807)) + _807;
    float _841 = ((cbMtdParam._m0[23u].x - _838) * _735) + _838;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _868 = (_862.x * 2.0) + (-1.0);
    float _869 = (_862.y * 2.0) + (-1.0);
    float _870 = dot(vec2(_868, _869), vec2(_868, _869));
    float _4279 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _884 = (_612 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_554.x * 2.0) + (-1.0)))) + (((_635.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _885 = (_613 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_554.y * 2.0) + (-1.0)))) + (((_635.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _897 = (((_828 - _884) + (cbMtdParam._m0[21u].x * _884)) * _685) + _884;
    float _898 = (((_829 - _885) + (cbMtdParam._m0[21u].x * _885)) * _685) + _885;
    float _899 = (_685 * (sqrt(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) - _619)) + _619;
    float _910 = (((_868 - _897) + (_897 * cbMtdParam._m0[22u].z)) * _735) + _897;
    float _911 = (((_869 - _898) + (_898 * cbMtdParam._m0[22u].z)) * _735) + _898;
    float _912 = ((sqrt(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) - _899) * _735) + _899;
    float _914 = cbMtdParam._m0[22u].x + _635.w;
    float _917 = fma(_912, _261 * NORMAL.x, fma(_911, _268 * TANGENT.x, (_254 * _246) * _910));
    float _920 = fma(_912, _261 * NORMAL.y, fma(_911, _268 * TANGENT.y, (_254 * _247) * _910));
    float _923 = fma(_912, _261 * NORMAL.z, fma(_911, _268 * TANGENT.z, (_254 * _248) * _910));
    float _927 = inversesqrt(dot(vec3(_917, _920, _923), vec3(_917, _920, _923)));
    float _928 = _927 * _917;
    float _929 = _927 * _920;
    float _930 = _927 * _923;
    float _4290 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _931 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4312 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4323 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4334 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4345 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _936 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _950 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1000 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _990);
    float _1001 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _990);
    float _1002 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _990);
    float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
    float _1007 = _1000 * _1006;
    float _1008 = _1001 * _1006;
    float _1009 = _1002 * _1006;
    vec4 _1014 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1016 = _1014.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1188 = sqrt(((_1000 * _1000) + (_1001 * _1001)) + (_1002 * _1002));
        float _1194 = (cbMatDynParam._m0[5u].x * _1188) + cbMatDynParam._m0[5u].y;
        float _4356 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1199 = (cbMatDynParam._m0[5u].z * _1188) + cbMatDynParam._m0[5u].w;
        float _4367 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) - _1195)) + _1195) < ((_1016 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1027 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1028 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1046 = fma(_930, cbSceneParam._m0[5u].z, fma(_929, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _928));
    float _1049 = fma(_930, cbSceneParam._m0[6u].z, fma(_929, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _928));
    float _1052 = fma(_930, cbSceneParam._m0[7u].z, fma(_929, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _928));
    uint _1065 = _293 + 9u;
    uint _1066 = _1065 + uint(cbMatDynParam._m0[0u].w);
    float _1072 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * cbInstanceData._m0[_1066].x;
    float _1073 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * cbInstanceData._m0[_1066].y;
    float _1074 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * cbInstanceData._m0[_1066].z;
    float _4378 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _4389 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _1078 = 1.0 - _936;
    float _1079 = _1075 * _1078;
    float _1080 = _1076 * _1078;
    float _1081 = _1077 * _1078;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _936;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _936;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _936;
    float _1089 = _1086 + 0.039999999105930328369140625;
    float _1091 = _1087 + 0.039999999105930328369140625;
    float _1092 = _1088 + 0.039999999105930328369140625;
    vec4 _1101 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1027, cbSceneParam._m0[86u].y * _1028));
    float _1105 = ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * TEXCOORD_5.w) * _1101.x;
    float _1106 = dot(vec3(_928, _929, _930), vec3(_1007, _1008, _1009));
    float _1109 = _1106 * 2.0;
    float _1113 = (_1109 * _928) - _1007;
    float _1114 = (_1109 * _929) - _1008;
    float _1115 = (_1109 * _930) - _1009;
    float _1119 = abs(dot(vec3(_1007, _1008, _1009), vec3(_928, _929, _930)));
    float _4411 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1121 = sqrt(_931);
    float _1134 = exp2((_1121 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1121 * 3.0));
    float _1140 = (1.0 - _1134) * ((_1121 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1141 = _1134 * _1121;
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1506;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1231 = fma(_1177, cbModelParam._m0[26u].z, fma(_1173, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1169));
        float _1235 = fma(_1177, cbModelParam._m0[27u].z, fma(_1173, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1169));
        float _1239 = fma(_1177, cbModelParam._m0[28u].z, fma(_1173, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1169));
        float _1264 = _1169 + _928;
        float _1265 = _1173 + _929;
        float _1266 = _1177 + _930;
        float _1276 = fma(_1266, cbModelParam._m0[26u].z, fma(_1265, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1264)) - _1231;
        float _1277 = fma(_1266, cbModelParam._m0[27u].z, fma(_1265, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1264)) - _1235;
        float _1278 = fma(_1266, cbModelParam._m0[28u].z, fma(_1265, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1264)) - _1239;
        float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
        float _1295 = ((_1282 * _1276) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1231 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1282 * _1277) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1235 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1282 * _1278) / cbModelParam._m0[34u].z) + ((((((_1239 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        float _1334 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1300.x + (-0.5));
        float _1336 = _1334 * (_1300.y + (-0.5));
        float _1337 = _1334 * (_1300.z + (-0.5));
        float _1344 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1307.x + (-0.5));
        float _1346 = _1344 * (_1307.y + (-0.5));
        float _1347 = _1344 * (_1307.z + (-0.5));
        float _1354 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1314.x + (-0.5));
        float _1356 = _1354 * (_1314.y + (-0.5));
        float _1357 = _1354 * (_1314.z + (-0.5));
        float _1364 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1321.x + (-0.5));
        float _1366 = _1364 * (_1321.y + (-0.5));
        float _1367 = _1364 * (_1321.z + (-0.5));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = _1335 * 0.5;
        float _1372 = _1345 * 0.5;
        float _1373 = _1355 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1388 = (dot(vec3(_928, _929, _930), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1398 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4459 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1400 + 1.0))) + _1405) * _1368;
        float _1415 = _1336 * 0.5;
        float _1416 = _1346 * 0.5;
        float _1417 = _1356 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_928, _929, _930), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4492 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1442 + 1.0))) + _1447) * _1369;
        float _1457 = _1337 * 0.5;
        float _1458 = _1347 * 0.5;
        float _1459 = _1357 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_928, _929, _930), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4503 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4514 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4525 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_1484 + 1.0))) + _1489) * _1370;
        _1506 = _1337;
        _1508 = _1336;
        _1509 = _1335;
        _1510 = _1347;
        _1511 = _1346;
        _1512 = _1345;
        _1513 = _1357;
        _1514 = _1356;
        _1515 = _1355;
        _1516 = _1370;
        _1517 = _1369;
        _1518 = _1368;
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1507;
        _1508 = _1507;
        _1509 = _1507;
        _1510 = _1507;
        _1511 = _1507;
        _1512 = _1507;
        _1513 = _1507;
        _1514 = _1507;
        _1515 = _1507;
        _1516 = _1507;
        _1517 = _1507;
        _1518 = _1507;
        _1519 = 0.0;
        _1520 = 0.0;
        _1521 = 0.0;
    }
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1549 = fma(_1177, cbModelParam._m0[30u].z, fma(_1173, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169));
        float _1553 = fma(_1177, cbModelParam._m0[31u].z, fma(_1173, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169));
        float _1557 = fma(_1177, cbModelParam._m0[32u].z, fma(_1173, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169));
        float _1580 = _1169 + _928;
        float _1581 = _1173 + _929;
        float _1582 = _1177 + _930;
        float _1592 = fma(_1582, cbModelParam._m0[30u].z, fma(_1581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1580)) - _1549;
        float _1593 = fma(_1582, cbModelParam._m0[31u].z, fma(_1581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1580)) - _1553;
        float _1594 = fma(_1582, cbModelParam._m0[32u].z, fma(_1581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1580)) - _1557;
        float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
        float _1611 = ((_1598 * _1592) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1549 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1598 * _1593) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1553 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1598 * _1594) / cbModelParam._m0[35u].z) + ((((((_1557 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        float _1648 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1615.x + (-0.5));
        float _1650 = _1648 * (_1615.y + (-0.5));
        float _1651 = _1648 * (_1615.z + (-0.5));
        float _1658 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1622.x + (-0.5));
        float _1660 = _1658 * (_1622.y + (-0.5));
        float _1661 = _1658 * (_1622.z + (-0.5));
        float _1668 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1629.x + (-0.5));
        float _1670 = _1668 * (_1629.y + (-0.5));
        float _1671 = _1668 * (_1629.z + (-0.5));
        float _1678 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1636.x + (-0.5));
        float _1680 = _1678 * (_1636.y + (-0.5));
        float _1681 = _1678 * (_1636.z + (-0.5));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = _1649 * 0.5;
        float _1686 = _1659 * 0.5;
        float _1687 = _1669 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_928, _929, _930), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4566 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4577 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4588 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_1712 + 1.0))) + _1717) * _1682;
        float _1727 = _1650 * 0.5;
        float _1728 = _1660 * 0.5;
        float _1729 = _1670 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_928, _929, _930), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4599 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4610 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4621 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_1754 + 1.0))) + _1759) * _1683;
        float _1769 = _1651 * 0.5;
        float _1770 = _1661 * 0.5;
        float _1771 = _1671 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1785 = (dot(vec3(_928, _929, _930), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4632 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4643 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4654 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_1796 + 1.0))) + _1801) * _1684;
        _1818 = _1651;
        _1819 = _1650;
        _1820 = _1649;
        _1821 = _1661;
        _1822 = _1660;
        _1823 = _1659;
        _1824 = _1671;
        _1825 = _1670;
        _1826 = _1669;
        _1827 = _1684;
        _1828 = _1683;
        _1829 = _1682;
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
    }
    else
    {
        _1818 = _1507;
        _1819 = _1507;
        _1820 = _1507;
        _1821 = _1507;
        _1822 = _1507;
        _1823 = _1507;
        _1824 = _1507;
        _1825 = _1507;
        _1826 = _1507;
        _1827 = _1507;
        _1828 = _1507;
        _1829 = _1507;
        _1830 = 0.0;
        _1831 = 0.0;
        _1832 = 0.0;
    }
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1519)) + _1519;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1520)) + _1520;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1521)) + _1521;
    float _1865 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1842));
    float _1886 = _1113 * 0.5;
    float _1887 = _1114 * 0.5;
    float _1888 = _1115 * 0.5;
    float _1889 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1892 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1895 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1929;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1902 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1506, _1510, _1513, _1516));
        float _1906 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1508, _1511, _1514, _1517));
        float _1910 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1917 = dot(vec4(cbModelParam._m0[39u]), vec4(_1886, _1887, _1888, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1940;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1931 = dot(vec4(cbModelParam._m0[40u]), vec4(_1886, _1887, _1888, 1.0));
        _1940 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1931) ? 0.0 : (isnan(0.0) ? _1931 : max(0.0, _1931))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1940 = 1.0;
    }
    float _1944 = (_1940 * cbModelParam._m0[1u].x) + (_1929 * (1.0 - cbModelParam._m0[1u].x));
    float _1954 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _931);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1954 : min(cbModelParam._m0[25u].z, _1954));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2002 = fma(_1177, cbModelParam._m0[13u].z, fma(_1173, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1169)) + cbModelParam._m0[13u].w;
        float _2006 = fma(_1177, cbModelParam._m0[14u].z, fma(_1173, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1169)) + cbModelParam._m0[14u].w;
        float _2010 = fma(_1177, cbModelParam._m0[15u].z, fma(_1173, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1169)) + cbModelParam._m0[15u].w;
        float _2013 = fma(_1115, cbModelParam._m0[13u].z, fma(_1114, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1113));
        float _2016 = fma(_1115, cbModelParam._m0[14u].z, fma(_1114, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1113));
        float _2019 = fma(_1115, cbModelParam._m0[15u].z, fma(_1114, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1113));
        float _2047;
        if (_2013 > 0.0)
        {
            _2047 = abs((1.0 - _2002) / _2013);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2002 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2047 = frontier_phi_17_15_ladder;
        }
        float _2218;
        if (_2016 > 0.0)
        {
            _2218 = abs((1.0 - _2006) / _2016);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2006 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2218 = frontier_phi_26_22_ladder;
        }
        float _2513;
        if (_2019 > 0.0)
        {
            _2513 = abs((1.0 - _2010) / _2019);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2010 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2513 = frontier_phi_38_33_ladder;
        }
        float _2515 = isnan(_2218) ? _2047 : (isnan(_2047) ? _2218 : min(_2047, _2218));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _2013) + _2002;
        float _2521 = (_2516 * _2016) + _2006;
        float _2522 = (_2516 * _2019) + _2010;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2523;
        float _2527 = _2523 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 > _2527) || ((_2521 < _2525) || ((_2520 < _2525) || (_2520 > _2527))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2522, cbModelParam._m0[9u].z, fma(_2521, cbModelParam._m0[9u].y, _2520 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2522, cbModelParam._m0[10u].z, fma(_2521, cbModelParam._m0[10u].y, _2520 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2522, cbModelParam._m0[11u].z, fma(_2521, cbModelParam._m0[11u].y, _2520 * cbModelParam._m0[11u].x))), _1955);
            frontier_phi_16_38_ladder = _2667.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2667.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2667.x * cbModelParam._m0[1u].y;
        }
        _2035 = frontier_phi_16_38_ladder_2;
        _2037 = frontier_phi_16_38_ladder_1;
        _2039 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1113, _1114, _1115), _1955);
        _2035 = _2023.x * cbModelParam._m0[1u].y;
        _2037 = _2023.y * cbModelParam._m0[1u].y;
        _2039 = _2023.z * cbModelParam._m0[1u].y;
    }
    float _2043 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _931);
    float _2044 = isnan(_2043) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2043 : min(cbModelParam._m0[25u].w, _2043));
    float _2133;
    float _2135;
    float _2137;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2097 = fma(_1177, cbModelParam._m0[21u].z, fma(_1173, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1169)) + cbModelParam._m0[21u].w;
        float _2101 = fma(_1177, cbModelParam._m0[22u].z, fma(_1173, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1169)) + cbModelParam._m0[22u].w;
        float _2105 = fma(_1177, cbModelParam._m0[23u].z, fma(_1173, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1169)) + cbModelParam._m0[23u].w;
        float _2108 = fma(_1115, cbModelParam._m0[21u].z, fma(_1114, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1113));
        float _2111 = fma(_1115, cbModelParam._m0[22u].z, fma(_1114, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1113));
        float _2114 = fma(_1115, cbModelParam._m0[23u].z, fma(_1114, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1113));
        float _2223;
        if (_2108 > 0.0)
        {
            _2223 = abs((1.0 - _2097) / _2108);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2097 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2223 = frontier_phi_28_24_ladder;
        }
        float _2540;
        if (_2111 > 0.0)
        {
            _2540 = abs((1.0 - _2101) / _2111);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2101 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2540 = frontier_phi_40_35_ladder;
        }
        float _2878;
        if (_2114 > 0.0)
        {
            _2878 = abs((1.0 - _2105) / _2114);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2105 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2878 = frontier_phi_50_47_ladder;
        }
        float _2880 = isnan(_2540) ? _2223 : (isnan(_2223) ? _2540 : min(_2223, _2540));
        float _2881 = isnan(_2878) ? _2880 : (isnan(_2880) ? _2878 : min(_2880, _2878));
        float _2885 = (_2881 * _2108) + _2097;
        float _2886 = (_2881 * _2111) + _2101;
        float _2887 = (_2881 * _2114) + _2105;
        float _2888 = _2881 * 9.9999997473787516355514526367188e-05;
        float _2889 = (-1.0) - _2888;
        float _2891 = _2888 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2887 > _2891) || ((_2887 < _2889) || ((_2886 > _2891) || ((_2886 < _2889) || ((_2885 < _2889) || (_2885 > _2891))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3009 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2887, cbModelParam._m0[17u].z, fma(_2886, cbModelParam._m0[17u].y, _2885 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2887, cbModelParam._m0[18u].z, fma(_2886, cbModelParam._m0[18u].y, _2885 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2887, cbModelParam._m0[19u].z, fma(_2886, cbModelParam._m0[19u].y, _2885 * cbModelParam._m0[19u].x))), _2044);
            frontier_phi_25_50_ladder = _3009.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3009.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3009.x * cbModelParam._m0[1u].z;
        }
        _2133 = frontier_phi_25_50_ladder_2;
        _2135 = frontier_phi_25_50_ladder_1;
        _2137 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1113, _1114, _1115), _2044);
        _2133 = _2117.x * cbModelParam._m0[1u].z;
        _2135 = _2117.y * cbModelParam._m0[1u].z;
        _2137 = _2117.z * cbModelParam._m0[1u].z;
    }
    float _2150 = (((_1140 * _1089) + _1141) * _1105) * ((cbModelParam._m0[1u].w * (_2133 - _2035)) + _2035);
    float _2152 = (((_1140 * _1091) + _1141) * _1105) * ((cbModelParam._m0[1u].w * (_2135 - _2037)) + _2037);
    float _2154 = (((_1140 * _1092) + _1141) * _1105) * ((cbModelParam._m0[1u].w * (_2137 - _2039)) + _2039);
    float _2157 = fma(_2154, cbSceneParam._m0[89u].z, fma(_2152, cbSceneParam._m0[89u].y, _2150 * cbSceneParam._m0[89u].x));
    float _2160 = fma(_2154, cbSceneParam._m0[90u].z, fma(_2152, cbSceneParam._m0[90u].y, _2150 * cbSceneParam._m0[90u].x));
    float _2163 = fma(_2154, cbSceneParam._m0[91u].z, fma(_2152, cbSceneParam._m0[91u].y, _2150 * cbSceneParam._m0[91u].x));
    float _2197 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2201 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2205 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2209 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2210 = _2197 / _2209;
    float _2211 = _2201 / _2209;
    float _2212 = _2205 / _2209;
    float _2359;
    float _2360;
    float _2361;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2239 = ((uint(_2212 > cbSceneParam._m0[59u].y) + uint(_2212 > cbSceneParam._m0[59u].x)) + uint(_2212 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2240 = _2239 + 43u;
        uint _2248 = _2239 + 44u;
        uint _2256 = _2239 + 45u;
        uint _2264 = _2239 + 46u;
        float _2275 = fma(_2209, cbSceneParam._m0[_2240].w, fma(_2205, cbSceneParam._m0[_2240].z, fma(_2201, cbSceneParam._m0[_2240].y, _2197 * cbSceneParam._m0[_2240].x)));
        float _2279 = fma(_2209, cbSceneParam._m0[_2248].w, fma(_2205, cbSceneParam._m0[_2248].z, fma(_2201, cbSceneParam._m0[_2248].y, _2197 * cbSceneParam._m0[_2248].x)));
        float _2287 = fma(_2209, cbSceneParam._m0[_2264].w, fma(_2205, cbSceneParam._m0[_2264].z, fma(_2201, cbSceneParam._m0[_2264].y, _2197 * cbSceneParam._m0[_2264].x)));
        float _2292 = cbSceneParam._m0[33u].z * _2287;
        float _2294 = cbSceneParam._m0[33u].w * _2287;
        float _2297 = fma(_2209, cbSceneParam._m0[_2256].w, fma(_2205, cbSceneParam._m0[_2256].z, fma(_2201, cbSceneParam._m0[_2256].y, _2197 * cbSceneParam._m0[_2256].x))) / _2287;
        float _2345 = (cbSceneParam._m0[33u].x - sqrt(((_2211 * _2211) + (_2210 * _2210)) + (_2212 * _2212))) * cbSceneParam._m0[33u].y;
        float _4780 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2352 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2292 + _2275) / _2287, (_2294 + _2279) / _2287), _2297), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2294 + _2275) / _2287, (_2279 - _2292) / _2287), _2297), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2275 - _2292) / _2287, (_2279 - _2294) / _2287), _2297), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2275 - _2294) / _2287, (_2292 + _2279) / _2287), _2297), 0.0)).x), vec4(0.25)));
        _2359 = 1.0 - (_2352 * cbSceneParam._m0[34u].x);
        _2360 = 1.0 - (_2352 * cbSceneParam._m0[34u].y);
        _2361 = 1.0 - (_2352 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2359 = 1.0;
        _2360 = 1.0;
        _2361 = 1.0;
    }
    float _2425;
    float _2427;
    float _2429;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2413 = fma(_2209, cbSceneParam._m0[63u].w, fma(_2205, cbSceneParam._m0[63u].z, fma(_2201, cbSceneParam._m0[63u].y, _2197 * cbSceneParam._m0[63u].x)));
        float _2414 = fma(_2209, cbSceneParam._m0[60u].w, fma(_2205, cbSceneParam._m0[60u].z, fma(_2201, cbSceneParam._m0[60u].y, _2197 * cbSceneParam._m0[60u].x))) / _2413;
        float _2415 = fma(_2209, cbSceneParam._m0[61u].w, fma(_2205, cbSceneParam._m0[61u].z, fma(_2201, cbSceneParam._m0[61u].y, _2197 * cbSceneParam._m0[61u].x))) / _2413;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2414 >= cbSceneParam._m0[64u].x) && (_2415 >= cbSceneParam._m0[64u].y)) && (_2414 <= cbSceneParam._m0[64u].z)) && (_2415 <= cbSceneParam._m0[64u].w))
        {
            float _2553 = fma(_2209, cbSceneParam._m0[62u].w, fma(_2205, cbSceneParam._m0[62u].z, fma(_2201, cbSceneParam._m0[62u].y, _2197 * cbSceneParam._m0[62u].x))) / _2413;
            float _2557 = isnan(cbSceneParam._m0[41u].w) ? _2553 : (isnan(_2553) ? cbSceneParam._m0[41u].w : max(_2553, cbSceneParam._m0[41u].w));
            float _2600 = (cbSceneParam._m0[33u].x - sqrt(((_2211 * _2211) + (_2210 * _2210)) + (_2212 * _2212))) * cbSceneParam._m0[33u].y;
            float _4796 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
            float _2607 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2414, cbSceneParam._m0[33u].w + _2415), _2557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2414, _2415 - cbSceneParam._m0[33u].z), _2557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2414 - cbSceneParam._m0[33u].z, _2415 - cbSceneParam._m0[33u].w), _2557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2414 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2415), _2557), 0.0)).x), vec4(0.25)));
            float _2611 = 1.0 - (_2607 * cbSceneParam._m0[34u].x);
            float _2612 = 1.0 - (_2607 * cbSceneParam._m0[34u].y);
            float _2613 = 1.0 - (_2607 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2613) ? _2361 : (isnan(_2361) ? _2613 : min(_2361, _2613));
            frontier_phi_37_36_ladder_1 = isnan(_2612) ? _2360 : (isnan(_2360) ? _2612 : min(_2360, _2612));
            frontier_phi_37_36_ladder_2 = isnan(_2611) ? _2359 : (isnan(_2359) ? _2611 : min(_2359, _2611));
        }
        else
        {
            frontier_phi_37_36_ladder = _2361;
            frontier_phi_37_36_ladder_1 = _2360;
            frontier_phi_37_36_ladder_2 = _2359;
        }
        _2425 = frontier_phi_37_36_ladder_2;
        _2427 = frontier_phi_37_36_ladder_1;
        _2429 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2425 = _2359;
        _2427 = _2360;
        _2429 = _2361;
    }
    uvec4 _2434 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2436 = _2434.x * 14u;
    uint _2437 = _2436 + 13u;
    float _2444 = _1105 + (-1.0);
    float _2449 = (cbLight._m0[_2437].x * _2444) + 1.0;
    float _2450 = (cbLight._m0[_2437].y * _2444) + 1.0;
    float _2451 = (cbLight._m0[_2437].z * _2444) + 1.0;
    float _2452 = (cbLight._m0[_2437].w * _2444) + 1.0;
    uint _2453 = _2436 + 5u;
    float _2459 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
    uint _2463 = _2436 + 4u;
    float _2472 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
    uint _2476 = _2436 | 1u;
    float _2487 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_928, _929, _930));
    float _2490 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_928, _929, _930));
    float _4832 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _4843 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2495 = (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * 0.3183098733425140380859375;
    float _2497 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * 0.3183098733425140380859375;
    float _2504 = ((cbLight._m0[_2453].x * _2459) * _2497) + (((cbLight._m0[_2463].x * _2425) * _2472) * _2495);
    float _2505 = ((_2459 * cbLight._m0[_2453].y) * _2497) + (((cbLight._m0[_2463].y * _2427) * _2472) * _2495);
    float _2506 = ((_2459 * cbLight._m0[_2453].z) * _2497) + (((cbLight._m0[_2463].z * _2429) * _2472) * _2495);
    uvec4 _2510 = floatBitsToUint(cbLight._m0[_2436 + 12u]);
    bool _2512 = _2510.x == 0u;
    float _2614;
    float _2616;
    float _2618;
    if (_2512)
    {
        _2614 = _2504;
        _2616 = _2505;
        _2618 = _2506;
    }
    else
    {
        uint _2622 = _2436 + 6u;
        float _2638 = (dot(vec3(cbLight._m0[_2436 + 2u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2639 = _2638 * _2638;
        float _4854 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2640 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2641 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2614 = (((cbLight._m0[_2622].x * 0.3183098733425140380859375) * _2640) * _2641) + _2504;
        _2616 = (((cbLight._m0[_2622].y * 0.3183098733425140380859375) * _2640) * _2641) + _2505;
        _2618 = (((cbLight._m0[_2622].z * 0.3183098733425140380859375) * _2640) * _2641) + _2506;
    }
    bool _2621 = _2510.y == 0u;
    float _2676;
    float _2678;
    float _2680;
    if (_2621)
    {
        _2676 = _2614;
        _2678 = _2616;
        _2680 = _2618;
    }
    else
    {
        uint _2849 = _2436 + 7u;
        float _2865 = (dot(vec3(cbLight._m0[_2436 + 3u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2866 = _2865 * _2865;
        float _4870 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2867 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
        float _2868 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
        _2676 = (((cbLight._m0[_2849].x * 0.3183098733425140380859375) * _2867) * _2868) + _2614;
        _2678 = (((cbLight._m0[_2849].y * 0.3183098733425140380859375) * _2867) * _2868) + _2616;
        _2680 = (((cbLight._m0[_2849].z * 0.3183098733425140380859375) * _2867) * _2868) + _2618;
    }
    uint _2683 = _2436 + 8u;
    float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _931) * 0.949999988079071044921875);
    float _2697 = _2696 * _2696;
    float _2698 = cbLight._m0[_2436].x + _1007;
    float _2699 = cbLight._m0[_2436].y + _1008;
    float _2700 = cbLight._m0[_2436].z + _1009;
    float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
    float _2705 = _2704 * _2698;
    float _2706 = _2704 * _2699;
    float _2707 = _2704 * _2700;
    float _2708 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2436].xyz));
    float _4886 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2711 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
    float _4897 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _2712 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
    float _2713 = dot(vec3(_928, _929, _930), vec3(_2705, _2706, _2707));
    float _4908 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2716 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
    float _2717 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2705, _2706, _2707));
    float _4919 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2721 = _2697 * _2697;
    float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
    float _2733 = exp2(log2(1.0 - (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) * 5.0);
    float _2734 = 0.959999978542327880859375 - _1086;
    float _2736 = 0.959999978542327880859375 - _1087;
    float _2737 = 0.959999978542327880859375 - _1088;
    float _2744 = 1.0 - _2697;
    float _2755 = (0.5 / (((_2712 * ((_2711 * _2744) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _2744) + _2697) * _2711))) * _2711;
    float _4930 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2757 = (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
    uint _2771 = _2436 + 9u;
    float _2782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _931) * 0.949999988079071044921875);
    float _2783 = _2782 * _2782;
    float _2784 = cbLight._m0[_2476].x + _1007;
    float _2785 = cbLight._m0[_2476].y + _1008;
    float _2786 = cbLight._m0[_2476].z + _1009;
    float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
    float _2791 = _2790 * _2784;
    float _2792 = _2790 * _2785;
    float _2793 = _2790 * _2786;
    float _2794 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2476].xyz));
    float _4941 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2797 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
    float _2798 = dot(vec3(_928, _929, _930), vec3(_2791, _2792, _2793));
    float _4952 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2801 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
    float _2802 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2791, _2792, _2793));
    float _4963 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2806 = _2783 * _2783;
    float _2810 = ((_2801 * _2801) * (_2806 + (-1.0))) + 1.0;
    float _2817 = exp2(log2(1.0 - (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) * 5.0);
    float _2824 = 1.0 - _2783;
    float _2834 = (0.5 / (((_2712 * ((_2797 * _2824) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _2824) + _2783) * _2797))) * _2797;
    float _4974 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
    float _2836 = (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0))) * (_2806 / ((_2810 * _2810) * 3.141590118408203125));
    float _2846 = (((((_2817 * _2734) + _1089) * cbLight._m0[_2771].x) * _2836) * _2459) + ((((cbLight._m0[_2683].x * _2425) * ((_2733 * _2734) + _1089)) * _2757) * _2472);
    float _2847 = (((((_2817 * _2736) + _1091) * cbLight._m0[_2771].y) * _2836) * _2459) + ((((cbLight._m0[_2683].y * _2427) * ((_2733 * _2736) + _1091)) * _2757) * _2472);
    float _2848 = (((((_2817 * _2737) + _1092) * cbLight._m0[_2771].z) * _2836) * _2459) + ((((cbLight._m0[_2683].z * _2429) * ((_2733 * _2737) + _1092)) * _2757) * _2472);
    float _2904;
    float _2906;
    float _2908;
    if (_2512)
    {
        _2904 = _2846;
        _2906 = _2847;
        _2908 = _2848;
    }
    else
    {
        uint _2910 = _2436 + 2u;
        uint _2914 = _2436 + 10u;
        float _2928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2910].w)) * _931) * 0.949999988079071044921875);
        float _2929 = _2928 * _2928;
        float _2930 = cbLight._m0[_2910].x + _1007;
        float _2931 = cbLight._m0[_2910].y + _1008;
        float _2932 = cbLight._m0[_2910].z + _1009;
        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
        float _2937 = _2936 * _2930;
        float _2938 = _2936 * _2931;
        float _2939 = _2936 * _2932;
        float _2940 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2910].xyz));
        float _4985 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2943 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
        float _2944 = dot(vec3(_928, _929, _930), vec3(_2937, _2938, _2939));
        float _4996 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2947 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
        float _2948 = dot(vec3(cbLight._m0[_2910].xyz), vec3(_2937, _2938, _2939));
        float _5007 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2952 = _2929 * _2929;
        float _2956 = ((_2947 * _2947) * (_2952 + (-1.0))) + 1.0;
        float _2963 = exp2(log2(1.0 - (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0)))) * 5.0);
        float _2970 = 1.0 - _2929;
        float _2980 = (0.5 / (((_2712 * ((_2943 * _2970) + _2929)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _2970) + _2929) * _2943))) * _2943;
        float _5018 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2982 = (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_2952 / ((_2956 * _2956) * 3.141590118408203125));
        float _2983 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
        _2904 = (((((_2963 * _2734) + _1089) * cbLight._m0[_2914].x) * _2982) * _2983) + _2846;
        _2906 = (((((_2963 * _2736) + _1091) * cbLight._m0[_2914].y) * _2982) * _2983) + _2847;
        _2908 = (((((_2963 * _2737) + _1092) * cbLight._m0[_2914].z) * _2982) * _2983) + _2848;
    }
    float _3014;
    float _3016;
    float _3018;
    if (_2621)
    {
        _3014 = _2904;
        _3016 = _2906;
        _3018 = _2908;
    }
    else
    {
        uint _3025 = _2436 + 3u;
        uint _3029 = _2436 + 11u;
        float _3043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3025].w)) * _931) * 0.949999988079071044921875);
        float _3044 = _3043 * _3043;
        float _3045 = cbLight._m0[_3025].x + _1007;
        float _3046 = cbLight._m0[_3025].y + _1008;
        float _3047 = cbLight._m0[_3025].z + _1009;
        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
        float _3052 = _3051 * _3045;
        float _3053 = _3051 * _3046;
        float _3054 = _3051 * _3047;
        float _3055 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_3025].xyz));
        float _5034 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        float _3058 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
        float _3059 = dot(vec3(_928, _929, _930), vec3(_3052, _3053, _3054));
        float _5045 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        float _3062 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
        float _3063 = dot(vec3(cbLight._m0[_3025].xyz), vec3(_3052, _3053, _3054));
        float _5056 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
        float _3067 = _3044 * _3044;
        float _3071 = ((_3062 * _3062) * (_3067 + (-1.0))) + 1.0;
        float _3078 = exp2(log2(1.0 - (isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0)))) * 5.0);
        float _3085 = 1.0 - _3044;
        float _3095 = (0.5 / (((_2712 * ((_3058 * _3085) + _3044)) + 9.9999999392252902907785028219223e-09) + (((_2712 * _3085) + _3044) * _3058))) * _3058;
        float _5067 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
        float _3097 = (isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3067 / ((_3071 * _3071) * 3.141590118408203125));
        float _3098 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
        _3014 = (((((_3078 * _2734) + _1089) * cbLight._m0[_3029].x) * _3097) * _3098) + _2904;
        _3016 = (((((_3078 * _2736) + _1091) * cbLight._m0[_3029].y) * _3097) * _3098) + _2906;
        _3018 = (((((_3078 * _2737) + _1092) * cbLight._m0[_3029].z) * _3097) * _3098) + _2908;
    }
    float _3164;
    float _3166;
    float _3168;
    float _3170;
    float _3172;
    float _3174;
    if (_2434.y == 0u)
    {
        uvec4 _3119 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3120 = _3119.x;
        uint _3131 = uint((float(_3119.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1028) / _3120))) + floor(float(uint(cbSceneParam._m0[85u].x * _1027) / _3120)));
        float _3141 = (log2(_2212 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3142 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
        uint _3145 = uint(isnan(14.0) ? _3142 : (isnan(_3142) ? 14.0 : min(_3142, 14.0)));
        uvec4 _3150 = texelFetch(g_lightClusterGridBuffer, int(((_3145 << 2u) + (_3131 << 6u)) >> 2u));
        uint _3151 = _3150.x;
        uint _3152 = _3119.z;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        if (((((1u << ((_3152 >> 4u) & 15u)) + 4294967295u) & _3151) == 0u) || ((_3152 & 240u) == 0u))
        {
            _3231 = 0.0;
            _3233 = 0.0;
            _3235 = 0.0;
            _3237 = 0.0;
            _3239 = 0.0;
            _3241 = 0.0;
        }
        else
        {
            float _3232;
            float _3234;
            float _3236;
            float _3238;
            float _3240;
            float _3242;
            float _3384 = 0.0;
            float _3385 = 0.0;
            float _3386 = 0.0;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            uint _3390 = 0u;
            uint _3399;
            bool _3400;
            for (;;)
            {
                _3399 = texelFetch(g_lightClassification, int((((_3145 << 5u) + (_3131 << 9u)) + (_3390 << 2u)) >> 2u)).x;
                _3400 = _3399 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3400)
                {
                    frontier_phi_71_pred = _3389;
                    frontier_phi_71_pred_1 = _3388;
                    frontier_phi_71_pred_2 = _3387;
                    frontier_phi_71_pred_3 = _3386;
                    frontier_phi_71_pred_4 = _3385;
                    frontier_phi_71_pred_5 = _3384;
                }
                else
                {
                    float _3529;
                    float _3530;
                    float _3531;
                    float _3532;
                    float _3533;
                    float _3534;
                    uint _3535;
                    _3529 = _3384;
                    _3530 = _3385;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3399;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    for (;;)
                    {
                        uint _3539 = uint(findLSB(_3535)) + (_3390 << 5u);
                        uint _3536 = (_3535 + 4294967295u) & _3535;
                        uint _3541 = _3539 * 48u;
                        vec4 _3555 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3541)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 3u)).x));
                        uint _3561 = (_3539 * 48u) + 4u;
                        vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3561)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 3u)).x));
                        uint _3580 = (_3539 * 48u) + 8u;
                        vec3 _3591 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3580)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 2u)).x));
                        float _3595 = _3555.x - _2210;
                        float _3596 = _3555.y - _2211;
                        float _3597 = _3555.z - _2212;
                        float _3598 = dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597));
                        float _3601 = inversesqrt(_3598);
                        float _3602 = _3601 * _3595;
                        float _3603 = _3601 * _3596;
                        float _3604 = _3601 * _3597;
                        float _3605 = dot(vec3(_1046, _1049, _1052), vec3(_3602, _3603, _3604));
                        float _3610 = 1.0 - (_3598 * _3555.w);
                        float _5093 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3611 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                        float _3612 = sqrt(_3598) * _3574.w;
                        float _3615 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                        float _3616 = _3615 * _3615;
                        float _3619 = ((1.0 - _3616) * _3605) + _3616;
                        float _3622 = _3612 * _3612;
                        float _3626 = ((isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0))) * _3611) / ((_3622 * 0.699999988079071044921875) + 1.0);
                        float _3630 = (-0.0) - _2210;
                        float _3631 = (-0.0) - _2211;
                        float _3632 = (-0.0) - _2212;
                        float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                        float _3637 = _3636 * _3630;
                        float _3638 = _3636 * _3631;
                        float _3639 = _3636 * _3632;
                        float _3646 = exp2(log2(1.0 / ((_3622 * 3.5) + 5.0)) * 0.25);
                        float _3647 = 1.0 - _1121;
                        float _3654 = sqrt(1.0 - ((1.0 - (_3647 * _3647)) * (1.0 - (_3646 * _3646))));
                        float _3655 = _3654 * _3654;
                        float _3656 = _3655 * _3655;
                        float _3657 = _3637 + _3602;
                        float _3658 = _3638 + _3603;
                        float _3659 = _3639 + _3604;
                        float _3663 = inversesqrt(dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659)));
                        float _3667 = dot(vec3(_1046, _1049, _1052), vec3(_3637, _3638, _3639));
                        float _5109 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                        float _3670 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
                        float _3671 = dot(vec3(_1046, _1049, _1052), vec3(_3663 * _3657, _3663 * _3658, _3663 * _3659));
                        float _5120 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                        float _3674 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                        float _3678 = ((_3674 * _3674) * (_3656 + (-1.0))) + 1.0;
                        float _3679 = _3615 * _3655;
                        float _3680 = _3679 * _3679;
                        float _3683 = ((1.0 - _3680) * _3605) + _3680;
                        float _5131 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                        float _3684 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                        float _3685 = 1.0 - _3655;
                        float _3695 = (0.5 / (((_3684 * ((_3670 * _3685) + _3655)) + 9.9999999392252902907785028219223e-09) + (((_3684 * _3685) + _3655) * _3670))) * _3684;
                        float _5142 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3706 = (((_3656 * 3.1415927410125732421875) * (isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0)))) / ((_3678 * _3678) * ((_3622 * 2.1991131305694580078125) + 3.141590118408203125))) * _3611;
                        _3459 = (_3626 * _3574.x) + _3532;
                        _3460 = (_3626 * _3574.y) + _3533;
                        _3461 = (_3626 * _3574.z) + _3534;
                        _3456 = (_3706 * _3591.x) + _3529;
                        _3457 = (_3706 * _3591.y) + _3530;
                        _3458 = (_3706 * _3591.z) + _3531;
                        if (_3536 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3529 = _3456;
                            _3530 = _3457;
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3536;
                        }
                    }
                    frontier_phi_71_pred = _3461;
                    frontier_phi_71_pred_1 = _3460;
                    frontier_phi_71_pred_2 = _3459;
                    frontier_phi_71_pred_3 = _3458;
                    frontier_phi_71_pred_4 = _3457;
                    frontier_phi_71_pred_5 = _3456;
                }
                _3242 = frontier_phi_71_pred;
                _3240 = frontier_phi_71_pred_1;
                _3238 = frontier_phi_71_pred_2;
                _3236 = frontier_phi_71_pred_3;
                _3234 = frontier_phi_71_pred_4;
                _3232 = frontier_phi_71_pred_5;
                uint _3391 = _3390 + 1u;
                if (_3391 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3384 = _3232;
                    _3385 = _3234;
                    _3386 = _3236;
                    _3387 = _3238;
                    _3388 = _3240;
                    _3389 = _3242;
                    _3390 = _3391;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3231 = _3232;
            _3233 = _3234;
            _3235 = _3236;
            _3237 = _3238;
            _3239 = _3240;
            _3241 = _3242;
        }
        uvec4 _3245 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3246 = _3245.z;
        uint _3248 = (_3246 >> 8u) & 15u;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        float _3360;
        float _3362;
        if (((4294967295u << _3248) & _3151) == 0u)
        {
            _3352 = _3231;
            _3354 = _3233;
            _3356 = _3235;
            _3358 = _3237;
            _3360 = _3239;
            _3362 = _3241;
        }
        else
        {
            float _3377 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
            float _3378 = _3377 * _2210;
            float _3379 = _3377 * _2211;
            float _3380 = _3377 * _2212;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3248 < ((_3246 >> 12u) & 15u))
            {
                float _3353;
                float _3355;
                float _3357;
                float _3359;
                float _3361;
                float _3363;
                float _3512 = _3231;
                float _3513 = _3233;
                float _3514 = _3235;
                float _3515 = _3237;
                float _3516 = _3239;
                float _3517 = _3241;
                uint _3518 = _3248;
                uint _3527;
                bool _3528;
                for (;;)
                {
                    _3527 = texelFetch(g_lightClassification, int((((_3145 << 5u) + (_3131 << 9u)) + (_3518 << 2u)) >> 2u)).x;
                    _3528 = _3527 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3528)
                    {
                        frontier_phi_82_pred = _3517;
                        frontier_phi_82_pred_1 = _3516;
                        frontier_phi_82_pred_2 = _3515;
                        frontier_phi_82_pred_3 = _3514;
                        frontier_phi_82_pred_4 = _3513;
                        frontier_phi_82_pred_5 = _3512;
                    }
                    else
                    {
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _4013;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _3733 = _3512;
                        float _3734 = _3513;
                        float _3735 = _3514;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        float _3738 = _3517;
                        uint _3739 = _3527;
                        uint _3740;
                        vec4 _3765;
                        float _3766;
                        vec4 _3781;
                        vec3 _3793;
                        vec4 _3808;
                        vec4 _3823;
                        float _3869;
                        bool _3870;
                        for (;;)
                        {
                            uint _3750 = ((_3518 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3739));
                            _3740 = (_3739 + 4294967295u) & _3739;
                            uint _3752 = _3750 * 40u;
                            _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            _3766 = _3765.w;
                            uint _3768 = (_3750 * 40u) + 4u;
                            _3781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3768 + 3u)).x));
                            uint _3783 = (_3750 * 40u) + 8u;
                            _3793 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x));
                            uint _3795 = (_3750 * 40u) + 16u;
                            _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3810 = (_3750 * 40u) + 20u;
                            _3823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 3u)).x));
                            uint _3825 = (_3750 * 40u) + 24u;
                            vec4 _3838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3825 + 3u)).x));
                            uint _3844 = (_3750 * 40u) + 28u;
                            vec4 _3857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 3u)).x));
                            _3869 = fma(_2212, _3857.z, fma(_2211, _3857.y, _3857.x * _2210)) + _3857.w;
                            _3870 = !((fma(_2212, _3838.z, fma(_2211, _3838.y, _3838.x * _2210)) + _3838.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3870)
                            {
                                float _3897 = _3765.x - _2210;
                                float _3898 = _3765.y - _2211;
                                float _3899 = _3765.z - _2212;
                                float _3900 = dot(vec3(_3897, _3898, _3899), vec3(_3897, _3898, _3899));
                                float _3903 = inversesqrt(_3900);
                                float _3904 = _3903 * _3897;
                                float _3905 = _3903 * _3898;
                                float _3906 = _3903 * _3899;
                                float _3910 = 1.0 - (_3900 / (_3766 * _3766));
                                float _5153 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3911 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
                                float _3915 = sqrt(_3900) * _3781.w;
                                float _3917 = 1.39999997615814208984375 / (_3915 + 1.39999997615814208984375);
                                float _3918 = _3917 * _3917;
                                float _3921 = ((1.0 - _3918) * dot(vec3(_3904, _3905, _3906), vec3(_1046, _1049, _1052))) + _3918;
                                float _3924 = _3915 * _3915;
                                float _3928 = (fma(_2212, _3808.z, fma(_2211, _3808.y, _3808.x * _2210)) + _3808.w) / _3869;
                                float _3929 = (fma(_2212, _3823.z, fma(_2211, _3823.y, _3823.x * _2210)) + _3823.w) / _3869;
                                float _3933 = 1.0 - dot(vec2(_3928, _3929), vec2(_3928, _3929));
                                float _5169 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3934 = isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0));
                                float _3935 = _3934 * (((isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0))) * _3911) / ((_3924 * 0.699999988079071044921875) + 1.0));
                                float _3947 = exp2(log2(1.0 / ((_3924 * 3.5) + 5.0)) * 0.25);
                                float _3948 = 1.0 - _1121;
                                float _3955 = sqrt(1.0 - ((1.0 - (_3948 * _3948)) * (1.0 - (_3947 * _3947))));
                                float _3956 = _3955 * _3955;
                                float _3957 = _3956 * _3956;
                                float _3958 = _3904 - _3378;
                                float _3959 = _3905 - _3379;
                                float _3960 = _3906 - _3380;
                                float _3964 = inversesqrt(dot(vec3(_3958, _3959, _3960), vec3(_3958, _3959, _3960)));
                                float _3968 = dot(vec3(_1046, _1049, _1052), vec3((-0.0) - _3378, (-0.0) - _3379, (-0.0) - _3380));
                                float _5180 = isnan(0.0) ? _3968 : (isnan(_3968) ? 0.0 : max(_3968, 0.0));
                                float _3971 = isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0));
                                float _3972 = dot(vec3(_1046, _1049, _1052), vec3(_3964 * _3958, _3964 * _3959, _3964 * _3960));
                                float _5191 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3975 = isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0));
                                float _3979 = ((_3975 * _3975) * (_3957 + (-1.0))) + 1.0;
                                float _3980 = _3917 * _3956;
                                float _3981 = _3980 * _3980;
                                float _3987 = ((1.0 - _3981) * dot(vec3(_1046, _1049, _1052), vec3(_3904, _3905, _3906))) + _3981;
                                float _5202 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3988 = isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0));
                                float _3989 = 1.0 - _3956;
                                float _3999 = (0.5 / (((_3988 * ((_3971 * _3989) + _3956)) + 9.9999999392252902907785028219223e-09) + (((_3988 * _3989) + _3956) * _3971))) * _3988;
                                float _5213 = isnan(0.0) ? _3999 : (isnan(_3999) ? 0.0 : max(_3999, 0.0));
                                float _4009 = (_3934 * _3911) * (((_3957 * 3.1415927410125732421875) * (isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0)))) / ((_3979 * _3979) * ((_3924 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3935 * _3781.z;
                                frontier_phi_88_pred_1 = _3935 * _3781.y;
                                frontier_phi_88_pred_2 = _3935 * _3781.x;
                                frontier_phi_88_pred_3 = _4009 * _3793.z;
                                frontier_phi_88_pred_4 = _4009 * _3793.y;
                                frontier_phi_88_pred_5 = _4009 * _3793.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4018 = frontier_phi_88_pred;
                            _4017 = frontier_phi_88_pred_1;
                            _4016 = frontier_phi_88_pred_2;
                            _4015 = frontier_phi_88_pred_3;
                            _4014 = frontier_phi_88_pred_4;
                            _4013 = frontier_phi_88_pred_5;
                            _3723 = _4016 + _3736;
                            _3724 = _4017 + _3737;
                            _3725 = _4018 + _3738;
                            _3720 = _4013 + _3733;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            if (_3740 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3740;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3725;
                        frontier_phi_82_pred_1 = _3724;
                        frontier_phi_82_pred_2 = _3723;
                        frontier_phi_82_pred_3 = _3722;
                        frontier_phi_82_pred_4 = _3721;
                        frontier_phi_82_pred_5 = _3720;
                    }
                    _3363 = frontier_phi_82_pred;
                    _3361 = frontier_phi_82_pred_1;
                    _3359 = frontier_phi_82_pred_2;
                    _3357 = frontier_phi_82_pred_3;
                    _3355 = frontier_phi_82_pred_4;
                    _3353 = frontier_phi_82_pred_5;
                    uint _3519 = _3518 + 1u;
                    if (_3519 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3512 = _3353;
                        _3513 = _3355;
                        _3514 = _3357;
                        _3515 = _3359;
                        _3516 = _3361;
                        _3517 = _3363;
                        _3518 = _3519;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3359;
                frontier_phi_63_64_ladder_1 = _3363;
                frontier_phi_63_64_ladder_2 = _3361;
                frontier_phi_63_64_ladder_3 = _3357;
                frontier_phi_63_64_ladder_4 = _3355;
                frontier_phi_63_64_ladder_5 = _3353;
            }
            else
            {
                frontier_phi_63_64_ladder = _3237;
                frontier_phi_63_64_ladder_1 = _3241;
                frontier_phi_63_64_ladder_2 = _3239;
                frontier_phi_63_64_ladder_3 = _3235;
                frontier_phi_63_64_ladder_4 = _3233;
                frontier_phi_63_64_ladder_5 = _3231;
            }
            _3352 = frontier_phi_63_64_ladder_5;
            _3354 = frontier_phi_63_64_ladder_4;
            _3356 = frontier_phi_63_64_ladder_3;
            _3358 = frontier_phi_63_64_ladder;
            _3360 = frontier_phi_63_64_ladder_2;
            _3362 = frontier_phi_63_64_ladder_1;
        }
        float _3367 = isnan(1.0) ? _1105 : (isnan(_1105) ? 1.0 : min(_1105, 1.0));
        _3164 = (_3367 * _3358) + _2676;
        _3166 = (_3367 * _3360) + _2678;
        _3168 = (_3367 * _3362) + _2680;
        _3170 = ((_3352 * _1089) * _3367) + _3014;
        _3172 = ((_3354 * _1091) * _3367) + _3016;
        _3174 = ((_3356 * _1092) * _3367) + _3018;
    }
    else
    {
        _3164 = _2676;
        _3166 = _2678;
        _3168 = _2680;
        _3170 = _3014;
        _3172 = _3016;
        _3174 = _3018;
    }
    float _5229 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _5240 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _5251 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _3191 = ((isnan(1.0) ? _5229 : (isnan(_5229) ? 1.0 : min(_5229, 1.0))) * (_3164 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1105))) + ((_3170 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    float _3192 = ((isnan(1.0) ? _5240 : (isnan(_5240) ? 1.0 : min(_5240, 1.0))) * (_3166 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1105))) + ((_3172 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    float _3193 = ((isnan(1.0) ? _5251 : (isnan(_5251) ? 1.0 : min(_5251, 1.0))) * (_3168 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1105))) + ((_3174 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    uint _3194 = _293 + 6u;
    float _3202 = _1027 / cbSceneParam._m0[86u].x;
    float _3203 = _1028 / cbSceneParam._m0[86u].y;
    vec4 _3217 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3202, _3203, (log2((isnan(cbSceneParam._m0[77u].w) ? _950 : (isnan(_950) ? cbSceneParam._m0[77u].w : min(_950, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3219 = _3217.x;
    float _3220 = _3217.y;
    float _3221 = _3217.z;
    float _3222 = _3217.w;
    float _3294;
    float _3296;
    float _3298;
    float _3300;
    if (_950 > cbSceneParam._m0[78u].w)
    {
        float _3256 = isnan(_950) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _950 : min(cbSceneParam._m0[80u].w, _950));
        float _3257 = _3256 / _950;
        float _3268 = _3257 * _1000;
        float _3269 = _1001 * _3257;
        float _3270 = (-0.0) - _3269;
        float _3272 = _3257 * _1002;
        float _3274 = (cbSceneParam._m0[77u].w * _3270) / _3256;
        float _3275 = _3274 + cbSceneParam._m0[79u].w;
        float _3276 = cbSceneParam._m0[79u].w - _3269;
        float _3282 = sqrt(((_3268 * _3268) + (_3269 * _3269)) + (_3272 * _3272));
        float _3285 = (1.0 - (cbSceneParam._m0[77u].w / _3256)) * _3282;
        float _3290 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3292 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3469;
        if (abs((_3270 - _3274) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3469 = ((((_3275 > 0.0) ? exp2(_3290 * _3275) : (2.0 - exp2(_3292 * _3275))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3285;
        }
        else
        {
            float _3413 = 1.0 / cbSceneParam._m0[80u].x;
            float _3414 = isnan(_3276) ? _3275 : (isnan(_3275) ? _3276 : max(_3275, _3276));
            float _3415 = isnan(_3276) ? _3275 : (isnan(_3275) ? _3276 : min(_3275, _3276));
            float _3424 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : min(_3414, 0.0));
            float _3425 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : min(_3415, 0.0));
            _3469 = ((abs(_3282 / _3270) * cbSceneParam._m0[80u].y) * ((((_3424 - _3425) * 2.0) - ((exp2(_3290 * (isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0)))) - exp2(_3290 * (isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0))))) * _3413)) - ((exp2(_3292 * _3424) - exp2(_3292 * _3425)) * _3413))) + (_3285 * cbSceneParam._m0[80u].z);
        }
        vec4 _3471 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3202, _3203, 1.0), 0.0);
        float _3480 = exp2((_3469 * (-1.44269502162933349609375)) * (1.0 - _3471.w));
        float _3481 = log2(_3480);
        float _3497 = log2(_3222);
        _3294 = (exp2(_3497 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].x)) * _3471.x) / cbSceneParam._m0[78u].x)) + _3219;
        _3296 = (exp2(_3497 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].y)) * _3471.y) / cbSceneParam._m0[78u].y)) + _3220;
        _3298 = (exp2(_3497 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].z)) * _3471.z) / cbSceneParam._m0[78u].z)) + _3221;
        _3300 = _3480 * _3222;
    }
    else
    {
        _3294 = _3219;
        _3296 = _3220;
        _3298 = _3221;
        _3300 = _3222;
    }
    bool _3507;
    vec4 _3310;
    vec4 _3332;
    float _3334;
    float _3338;
    float _3339;
    float _3340;
    float _3341;
    bool _3351;
    for (;;)
    {
        _3310 = cbMatDynParam._m0[0u];
        float _3312 = roundEven(_3310.y);
        bool _3313 = _3312 == 3.0;
        float _3314 = log2(_3300);
        float _3321 = exp2(_3314 * cbSceneParam._m0[78u].x) * _3191;
        float _3322 = exp2(_3314 * cbSceneParam._m0[78u].y) * _3192;
        float _3323 = exp2(_3314 * cbSceneParam._m0[78u].z) * _3193;
        float _3330 = _1016 + (-0.5);
        _3332 = cbMtdParam._m0[1u];
        _3334 = _3332.y * _3330;
        float _3337 = (_3312 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3338 = _3337 * (_3313 ? _3321 : (_3321 + (cbSceneParam._m0[72u].w * _3294)));
        _3339 = _3337 * (_3313 ? _3322 : (_3322 + (cbSceneParam._m0[72u].w * _3296)));
        _3340 = _3337 * (_3313 ? _3323 : (_3323 + (cbSceneParam._m0[72u].w * _3298)));
        _3341 = _3330 * 0.999000012874603271484375;
        _3351 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3351)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3341) < 0.5)
            {
                _3507 = true;
                break;
            }
        }
        uint _3448 = _1065 + uint(_3310.w);
        if ((cbInstanceData._m0[_3448].w < 1.0) && ((cbInstanceData._m0[_3448].w + _3341) < 0.5))
        {
            _3507 = true;
            break;
        }
        if ((_3334 + 1.0) < _3332.x)
        {
            _3507 = true;
            break;
        }
        _3507 = false;
        break;
    }
    float _3711;
    if (_3507)
    {
        discard_state = true;
        _3711 = 0.0;
    }
    else
    {
        _3711 = cbInstanceData._m0[_3194].w;
    }
    SV_Target.x = _3338;
    SV_Target.y = _3339;
    SV_Target.z = _3340;
    SV_Target.w = _3711;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3194].w;
    discard_exit();
}


