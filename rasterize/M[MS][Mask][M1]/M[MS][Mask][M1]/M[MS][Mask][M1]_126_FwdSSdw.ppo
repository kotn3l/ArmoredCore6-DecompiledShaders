#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1585;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _307.x * cbMtdParam._m0[11u].x;
    float _314 = _307.y * cbMtdParam._m0[11u].y;
    float _315 = _307.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _406 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _353.x) * 2.0) - ((((_394 - _406) * cbMtdParam._m0[23u].w) + _406) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3932 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _431 = (_424 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _432 = (_424 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _433 = (_424 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _472 = _470.x;
    float _482 = dot(vec4(_472, _470.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _496 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _353.y) * 2.0) - ((((_472 - _482) * cbMtdParam._m0[23u].w) + _482) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3943 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _504 = (_497 * ((_450.x * cbMtdParam._m0[13u].x) - _431)) + _431;
    float _505 = (_497 * ((_450.y * cbMtdParam._m0[13u].y) - _432)) + _432;
    float _506 = (_497 * ((_450.z * cbMtdParam._m0[13u].z) - _433)) + _433;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _544 = _542.x;
    float _554 = dot(vec4(_544, _542.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _566 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _353.z) * 2.0) - ((((_544 - _554) * cbMtdParam._m0[23u].w) + _554) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3954 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _574 = (_567 * ((_525.x * cbMtdParam._m0[14u].x) - _504)) + _504;
    float _575 = (_567 * ((_525.y * cbMtdParam._m0[14u].y) - _505)) + _505;
    float _576 = (_567 * ((_525.z * cbMtdParam._m0[14u].z) - _506)) + _506;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _613 = _611.x;
    float _614 = _611.y;
    float _615 = _611.z;
    float _622 = ((_594.x - _613) * _424) + _613;
    float _623 = ((_594.y - _614) * _424) + _614;
    float _624 = ((_594.z - _615) * _424) + _615;
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _647 = ((_636.x - _622) * _497) + _622;
    float _648 = ((_636.y - _623) * _497) + _623;
    float _649 = ((_636.z - _624) * _497) + _624;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _674 = ((_661.z - _649) * _567) + _649;
    float _677 = ((((_661.x - _647) * _567) + _647) * 2.0) + (-1.0);
    float _679 = ((((_661.y - _648) * _567) + _648) * 2.0) + (-1.0);
    float _680 = dot(vec2(_677, _679), vec2(_677, _679));
    float _3965 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _685 = sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _711 = (((_699.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _677;
    float _712 = (((_699.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _679;
    float _715 = fma(_685, _255, fma(_712, _262, _711 * _248));
    float _718 = fma(_685, _256, fma(_712, _263, _711 * _249));
    float _721 = fma(_685, _257, fma(_712, _264, _711 * _250));
    float _725 = inversesqrt(dot(vec3(_715, _718, _721), vec3(_715, _718, _721)));
    vec4 _752 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _754 = _752.x;
    float _755 = 1.0 - _754;
    float _763 = (cbMtdParam._m0[19u].x + dot(vec4(_725 * _715, _725 * _718, _725 * _721, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_754 - _755) * cbMtdParam._m0[24u].z) + _755) * cbMtdParam._m0[21u].z);
    float _3976 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _764 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _766 = (-0.0) - cbMtdParam._m0[24u].x;
    float _768 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _768 : (isnan(_768) ? 1.0 : min(_768, 1.0));
    float _776 = _764 - ((_764 * TEXCOORD_8.x) * _769);
    float _777 = _764 - ((_764 * TEXCOORD_8.y) * _769);
    float _778 = _764 - ((_764 * TEXCOORD_8.z) * _769);
    float _785 = (_776 * (cbMtdParam._m0[17u].x - _574)) + _574;
    float _786 = (_777 * (cbMtdParam._m0[17u].y - _575)) + _575;
    float _787 = (_778 * (cbMtdParam._m0[17u].z - _576)) + _576;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _801 = _799.x;
    float _802 = 1.0 - _801;
    float _828 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_801 - _802) * cbMtdParam._m0[24u].w) + _802) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3997 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _829 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _837 = ((((cbMtdParam._m0[10u].x - _785) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _829) + _785;
    float _838 = ((((cbMtdParam._m0[10u].y - _786) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _829) + _786;
    float _839 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _787)) * _829) + _787;
    vec4 _865 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _867 = _865.x;
    float _885 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _867) * _424) + _867;
    float _902 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _885) * _497) + _885;
    float _919 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _286) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _287) + cbTextureTilingScale._m0[10u].w)).x - _902) * _567) + _902;
    float _923 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _919) * cbMtdParam._m0[19u].z) + _919;
    float _925 = _923 - (_923 * _776);
    float _927 = _925 - (_925 * _829);
    float _931 = (cbMtdParam._m0[19u].w * (_699.z - _674)) + _674;
    vec4 _947 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _954 = (_947.x * 2.0) + (-1.0);
    float _955 = (_947.y * 2.0) + (-1.0);
    float _956 = dot(vec2(_954, _955), vec2(_954, _955));
    float _4008 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _964 = ((_947.z - _931) * _776) + _931;
    float _967 = ((cbMtdParam._m0[23u].x - _964) * _829) + _964;
    vec4 _990 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _996 = (_990.x * 2.0) + (-1.0);
    float _997 = (_990.y * 2.0) + (-1.0);
    float _998 = dot(vec2(_996, _997), vec2(_996, _997));
    float _4019 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1013 = ((sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) - _685) * _778) + _685;
    float _1016 = (((_954 - _711) * _776) + _711) + (cbMtdParam._m0[21u].x * _711);
    float _1017 = (((_955 - _712) * _777) + _712) + (cbMtdParam._m0[21u].x * _712);
    float _1028 = (((_996 - _1016) + (_1016 * cbMtdParam._m0[22u].z)) * _829) + _1016;
    float _1029 = (((_997 - _1017) + (_1017 * cbMtdParam._m0[22u].z)) * _829) + _1017;
    float _1030 = (_829 * (sqrt(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) - _1013)) + _1013;
    float _1032 = cbMtdParam._m0[22u].x + _699.w;
    float _1035 = fma(_1030, _255, fma(_1029, _262, _1028 * _248));
    float _1038 = fma(_1030, _256, fma(_1029, _263, _1028 * _249));
    float _1041 = fma(_1030, _257, fma(_1029, _264, _1028 * _250));
    float _1045 = inversesqrt(dot(vec3(_1035, _1038, _1041), vec3(_1035, _1038, _1041)));
    float _1046 = _1045 * _1035;
    float _1047 = _1045 * _1038;
    float _1048 = _1045 * _1041;
    float _4030 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _1049 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _4052 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4063 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4074 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4085 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _1054 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _1068 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1108 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1118 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1108);
    float _1119 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1108);
    float _1120 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1108);
    float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
    float _1125 = _1118 * _1124;
    float _1126 = _1119 * _1124;
    float _1127 = _1120 * _1124;
    float _1133 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1134 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1152 = fma(_1048, cbSceneParam._m0[5u].z, fma(_1047, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1046));
    float _1155 = fma(_1048, cbSceneParam._m0[6u].z, fma(_1047, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1046));
    float _1158 = fma(_1048, cbSceneParam._m0[7u].z, fma(_1047, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1046));
    uint _1172 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1178 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1172].x;
    float _1179 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_1172].y;
    float _1180 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * cbInstanceData._m0[_1172].z;
    float _4096 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1181 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1182 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _1183 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1184 = 1.0 - _1054;
    float _1185 = _1181 * _1184;
    float _1186 = _1182 * _1184;
    float _1187 = _1183 * _1184;
    float _1192 = (_1181 + (-0.039999999105930328369140625)) * _1054;
    float _1193 = (_1182 + (-0.039999999105930328369140625)) * _1054;
    float _1194 = (_1183 + (-0.039999999105930328369140625)) * _1054;
    float _1195 = _1192 + 0.039999999105930328369140625;
    float _1197 = _1193 + 0.039999999105930328369140625;
    float _1198 = _1194 + 0.039999999105930328369140625;
    vec4 _1207 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1133, cbSceneParam._m0[86u].y * _1134));
    float _1211 = ((isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * TEXCOORD_5.w) * _1207.x;
    float _1212 = dot(vec3(_1046, _1047, _1048), vec3(_1125, _1126, _1127));
    float _1215 = _1212 * 2.0;
    float _1219 = (_1215 * _1046) - _1125;
    float _1220 = (_1215 * _1047) - _1126;
    float _1221 = (_1215 * _1048) - _1127;
    float _1225 = abs(dot(vec3(_1125, _1126, _1127), vec3(_1046, _1047, _1048)));
    float _4129 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _1227 = sqrt(_1049);
    float _1240 = exp2((_1227 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1227 * 3.0));
    float _1246 = (1.0 - _1240) * ((_1227 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1247 = _1240 * _1227;
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1279 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1584;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1309 = fma(_1283, cbModelParam._m0[26u].z, fma(_1279, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1275));
        float _1313 = fma(_1283, cbModelParam._m0[27u].z, fma(_1279, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1275));
        float _1317 = fma(_1283, cbModelParam._m0[28u].z, fma(_1279, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1275));
        float _1342 = _1275 + _1046;
        float _1343 = _1279 + _1047;
        float _1344 = _1283 + _1048;
        float _1354 = fma(_1344, cbModelParam._m0[26u].z, fma(_1343, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1342)) - _1309;
        float _1355 = fma(_1344, cbModelParam._m0[27u].z, fma(_1343, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1342)) - _1313;
        float _1356 = fma(_1344, cbModelParam._m0[28u].z, fma(_1343, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1342)) - _1317;
        float _1360 = inversesqrt(dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356)));
        float _1373 = ((_1360 * _1354) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1309 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1360 * _1355) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1313 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1360 * _1356) / cbModelParam._m0[34u].z) + ((((((_1317 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        float _1412 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1378.x + (-0.5));
        float _1414 = _1412 * (_1378.y + (-0.5));
        float _1415 = _1412 * (_1378.z + (-0.5));
        float _1422 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1385.x + (-0.5));
        float _1424 = _1422 * (_1385.y + (-0.5));
        float _1425 = _1422 * (_1385.z + (-0.5));
        float _1432 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1392.x + (-0.5));
        float _1434 = _1432 * (_1392.y + (-0.5));
        float _1435 = _1432 * (_1392.z + (-0.5));
        float _1442 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1399.x + (-0.5));
        float _1444 = _1442 * (_1399.y + (-0.5));
        float _1445 = _1442 * (_1399.z + (-0.5));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = _1413 * 0.5;
        float _1450 = _1423 * 0.5;
        float _1451 = _1433 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1466 = (dot(vec3(_1046, _1047, _1048), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1476 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4177 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1478 + 1.0))) + _1483) * _1446;
        float _1493 = _1414 * 0.5;
        float _1494 = _1424 * 0.5;
        float _1495 = _1434 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_1046, _1047, _1048), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4210 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1520 + 1.0))) + _1525) * _1447;
        float _1535 = _1415 * 0.5;
        float _1536 = _1425 * 0.5;
        float _1537 = _1435 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_1046, _1047, _1048), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4243 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1562 + 1.0))) + _1567) * _1448;
        _1584 = _1415;
        _1586 = _1414;
        _1587 = _1413;
        _1588 = _1425;
        _1589 = _1424;
        _1590 = _1423;
        _1591 = _1435;
        _1592 = _1434;
        _1593 = _1433;
        _1594 = _1448;
        _1595 = _1447;
        _1596 = _1446;
        _1597 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1598 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1599 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
    }
    else
    {
        _1584 = _1585;
        _1586 = _1585;
        _1587 = _1585;
        _1588 = _1585;
        _1589 = _1585;
        _1590 = _1585;
        _1591 = _1585;
        _1592 = _1585;
        _1593 = _1585;
        _1594 = _1585;
        _1595 = _1585;
        _1596 = _1585;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1622 = fma(_1283, cbModelParam._m0[30u].z, fma(_1279, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1275));
        float _1626 = fma(_1283, cbModelParam._m0[31u].z, fma(_1279, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1275));
        float _1630 = fma(_1283, cbModelParam._m0[32u].z, fma(_1279, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1275));
        float _1653 = _1275 + _1046;
        float _1654 = _1279 + _1047;
        float _1655 = _1283 + _1048;
        float _1665 = fma(_1655, cbModelParam._m0[30u].z, fma(_1654, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1653)) - _1622;
        float _1666 = fma(_1655, cbModelParam._m0[31u].z, fma(_1654, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1653)) - _1626;
        float _1667 = fma(_1655, cbModelParam._m0[32u].z, fma(_1654, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1653)) - _1630;
        float _1671 = inversesqrt(dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667)));
        float _1684 = ((_1671 * _1665) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1622 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1685 = ((_1671 * _1666) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1626 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1686 = ((_1671 * _1667) / cbModelParam._m0[35u].z) + ((((((_1630 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1688 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        vec4 _1695 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        vec4 _1702 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        vec4 _1709 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        float _1721 = exp2((_1688.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1688.x + (-0.5));
        float _1723 = _1721 * (_1688.y + (-0.5));
        float _1724 = _1721 * (_1688.z + (-0.5));
        float _1731 = exp2((_1695.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1695.x + (-0.5));
        float _1733 = _1731 * (_1695.y + (-0.5));
        float _1734 = _1731 * (_1695.z + (-0.5));
        float _1741 = exp2((_1702.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1702.x + (-0.5));
        float _1743 = _1741 * (_1702.y + (-0.5));
        float _1744 = _1741 * (_1702.z + (-0.5));
        float _1751 = exp2((_1709.w + (-0.5)) * 20.0) * 2.0;
        float _1752 = _1751 * (_1709.x + (-0.5));
        float _1753 = _1751 * (_1709.y + (-0.5));
        float _1754 = _1751 * (_1709.z + (-0.5));
        float _1755 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1756 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1757 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1758 = _1722 * 0.5;
        float _1759 = _1732 * 0.5;
        float _1760 = _1742 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_1046, _1047, _1048), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1755 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4306 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1785 + 1.0))) + _1790) * _1755;
        float _1800 = _1723 * 0.5;
        float _1801 = _1733 * 0.5;
        float _1802 = _1743 * 0.5;
        float _1803 = dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802));
        float _1808 = (_1803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1803);
        float _1816 = (dot(vec3(_1046, _1047, _1048), vec3(_1808 * _1800, _1808 * _1801, _1808 * _1802)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1825 = sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802)) / (_1756 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1827 = _1826 * 2.0;
        float _1831 = (1.0 - _1826) / (_1826 + 1.0);
        float _4339 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1841 = ((((1.0 - _1832) * (_1827 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1827 + 1.0))) + _1832) * _1756;
        float _1842 = _1724 * 0.5;
        float _1843 = _1734 * 0.5;
        float _1844 = _1744 * 0.5;
        float _1845 = dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844));
        float _1850 = (_1845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1845);
        float _1858 = (dot(vec3(_1046, _1047, _1048), vec3(_1850 * _1842, _1850 * _1843, _1850 * _1844)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1867 = sqrt(((_1843 * _1843) + (_1842 * _1842)) + (_1844 * _1844)) / (_1757 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1869 = _1868 * 2.0;
        float _1873 = (1.0 - _1868) / (_1868 + 1.0);
        float _4372 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1883 = ((((1.0 - _1874) * (_1869 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1869 + 1.0))) + _1874) * _1757;
        _1891 = _1724;
        _1892 = _1723;
        _1893 = _1722;
        _1894 = _1734;
        _1895 = _1733;
        _1896 = _1732;
        _1897 = _1744;
        _1898 = _1743;
        _1899 = _1742;
        _1900 = _1757;
        _1901 = _1756;
        _1902 = _1755;
        _1903 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
        _1904 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)));
        _1905 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)));
    }
    else
    {
        _1891 = _1585;
        _1892 = _1585;
        _1893 = _1585;
        _1894 = _1585;
        _1895 = _1585;
        _1896 = _1585;
        _1897 = _1585;
        _1898 = _1585;
        _1899 = _1585;
        _1900 = _1585;
        _1901 = _1585;
        _1902 = _1585;
        _1903 = 0.0;
        _1904 = 0.0;
        _1905 = 0.0;
    }
    float _1915 = (cbModelParam._m0[1u].x * (_1903 - _1597)) + _1597;
    float _1916 = (cbModelParam._m0[1u].x * (_1904 - _1598)) + _1598;
    float _1917 = (cbModelParam._m0[1u].x * (_1905 - _1599)) + _1599;
    float _1938 = fma(_1917, cbSceneParam._m0[89u].z, fma(_1916, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1917, cbSceneParam._m0[90u].z, fma(_1916, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1917, cbSceneParam._m0[91u].z, fma(_1916, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1915));
    float _1959 = _1219 * 0.5;
    float _1960 = _1220 * 0.5;
    float _1961 = _1221 * 0.5;
    float _1962 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1893, _1896, _1899, _1902));
    float _1965 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1892, _1895, _1898, _1901));
    float _1968 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1891, _1894, _1897, _1900));
    float _2002;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1975 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1584, _1588, _1591, _1594));
        float _1979 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1586, _1589, _1592, _1595));
        float _1983 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1587, _1590, _1593, _1596));
        float _1990 = dot(vec4(cbModelParam._m0[39u]), vec4(_1959, _1960, _1961, 1.0));
        _2002 = dot(vec3(isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0)), isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)), isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1990) ? 0.0 : (isnan(0.0) ? _1990 : max(0.0, _1990))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2002 = 1.0;
    }
    float _2013;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2004 = dot(vec4(cbModelParam._m0[40u]), vec4(_1959, _1960, _1961, 1.0));
        _2013 = dot(vec3(isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)), isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2004) ? 0.0 : (isnan(0.0) ? _2004 : max(0.0, _2004))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2013 = 1.0;
    }
    float _2017 = (_2013 * cbModelParam._m0[1u].x) + (_2002 * (1.0 - cbModelParam._m0[1u].x));
    float _2027 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1049);
    float _2028 = isnan(_2027) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2027 : min(cbModelParam._m0[25u].z, _2027));
    float _2108;
    float _2110;
    float _2112;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2075 = fma(_1283, cbModelParam._m0[13u].z, fma(_1279, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1275)) + cbModelParam._m0[13u].w;
        float _2079 = fma(_1283, cbModelParam._m0[14u].z, fma(_1279, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1275)) + cbModelParam._m0[14u].w;
        float _2083 = fma(_1283, cbModelParam._m0[15u].z, fma(_1279, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1275)) + cbModelParam._m0[15u].w;
        float _2086 = fma(_1221, cbModelParam._m0[13u].z, fma(_1220, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1219));
        float _2089 = fma(_1221, cbModelParam._m0[14u].z, fma(_1220, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1219));
        float _2092 = fma(_1221, cbModelParam._m0[15u].z, fma(_1220, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1219));
        float _2120;
        if (_2086 > 0.0)
        {
            _2120 = abs((1.0 - _2075) / _2086);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2075 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2120 = frontier_phi_14_12_ladder;
        }
        float _2344;
        if (_2089 > 0.0)
        {
            _2344 = abs((1.0 - _2079) / _2089);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2079 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2344 = frontier_phi_23_19_ladder;
        }
        float _2601;
        if (_2092 > 0.0)
        {
            _2601 = abs((1.0 - _2083) / _2092);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2083 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2601 = frontier_phi_35_30_ladder;
        }
        float _2603 = isnan(_2344) ? _2120 : (isnan(_2120) ? _2344 : min(_2120, _2344));
        float _2604 = isnan(_2601) ? _2603 : (isnan(_2603) ? _2601 : min(_2603, _2601));
        float _2608 = (_2604 * _2086) + _2075;
        float _2609 = (_2604 * _2089) + _2079;
        float _2610 = (_2604 * _2092) + _2083;
        float _2611 = _2604 * 9.9999997473787516355514526367188e-05;
        float _2613 = (-1.0) - _2611;
        float _2615 = _2611 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2610 > _2615) || ((_2610 < _2613) || ((_2609 > _2615) || ((_2609 < _2613) || ((_2608 < _2613) || (_2608 > _2615))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2610, cbModelParam._m0[9u].z, fma(_2609, cbModelParam._m0[9u].y, _2608 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2610, cbModelParam._m0[10u].z, fma(_2609, cbModelParam._m0[10u].y, _2608 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2610, cbModelParam._m0[11u].z, fma(_2609, cbModelParam._m0[11u].y, _2608 * cbModelParam._m0[11u].x))), _2028);
            frontier_phi_13_35_ladder = _2738.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2738.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2738.x * cbModelParam._m0[1u].y;
        }
        _2108 = frontier_phi_13_35_ladder_2;
        _2110 = frontier_phi_13_35_ladder_1;
        _2112 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2096 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1219, _1220, _1221), _2028);
        _2108 = _2096.x * cbModelParam._m0[1u].y;
        _2110 = _2096.y * cbModelParam._m0[1u].y;
        _2112 = _2096.z * cbModelParam._m0[1u].y;
    }
    float _2116 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1049);
    float _2117 = isnan(_2116) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2116 : min(cbModelParam._m0[25u].w, _2116));
    float _2207;
    float _2209;
    float _2211;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2171 = fma(_1283, cbModelParam._m0[21u].z, fma(_1279, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1275)) + cbModelParam._m0[21u].w;
        float _2175 = fma(_1283, cbModelParam._m0[22u].z, fma(_1279, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1275)) + cbModelParam._m0[22u].w;
        float _2179 = fma(_1283, cbModelParam._m0[23u].z, fma(_1279, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1275)) + cbModelParam._m0[23u].w;
        float _2182 = fma(_1221, cbModelParam._m0[21u].z, fma(_1220, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1219));
        float _2185 = fma(_1221, cbModelParam._m0[22u].z, fma(_1220, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1219));
        float _2188 = fma(_1221, cbModelParam._m0[23u].z, fma(_1220, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1219));
        float _2349;
        if (_2182 > 0.0)
        {
            _2349 = abs((1.0 - _2171) / _2182);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2171 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2349 = frontier_phi_25_21_ladder;
        }
        float _2628;
        if (_2185 > 0.0)
        {
            _2628 = abs((1.0 - _2175) / _2185);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2185 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2175 + 1.0) / _2185);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2628 = frontier_phi_37_32_ladder;
        }
        float _2841;
        if (_2188 > 0.0)
        {
            _2841 = abs((1.0 - _2179) / _2188);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2188 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2179 + 1.0) / _2188);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2841 = frontier_phi_46_43_ladder;
        }
        float _2843 = isnan(_2628) ? _2349 : (isnan(_2349) ? _2628 : min(_2349, _2628));
        float _2844 = isnan(_2841) ? _2843 : (isnan(_2843) ? _2841 : min(_2843, _2841));
        float _2848 = (_2844 * _2182) + _2171;
        float _2849 = (_2844 * _2185) + _2175;
        float _2850 = (_2844 * _2188) + _2179;
        float _2851 = _2844 * 9.9999997473787516355514526367188e-05;
        float _2852 = (-1.0) - _2851;
        float _2854 = _2851 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2850 > _2854) || ((_2850 < _2852) || ((_2849 > _2854) || ((_2849 < _2852) || ((_2848 < _2852) || (_2848 > _2854))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3049 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2850, cbModelParam._m0[17u].z, fma(_2849, cbModelParam._m0[17u].y, _2848 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2850, cbModelParam._m0[18u].z, fma(_2849, cbModelParam._m0[18u].y, _2848 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2850, cbModelParam._m0[19u].z, fma(_2849, cbModelParam._m0[19u].y, _2848 * cbModelParam._m0[19u].x))), _2117);
            frontier_phi_22_46_ladder = _3049.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3049.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3049.x * cbModelParam._m0[1u].z;
        }
        _2207 = frontier_phi_22_46_ladder_2;
        _2209 = frontier_phi_22_46_ladder_1;
        _2211 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2191 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1219, _1220, _1221), _2117);
        _2207 = _2191.x * cbModelParam._m0[1u].z;
        _2209 = _2191.y * cbModelParam._m0[1u].z;
        _2211 = _2191.z * cbModelParam._m0[1u].z;
    }
    float _2224 = (((_1246 * _1195) + _1247) * _1211) * ((cbModelParam._m0[1u].w * (_2207 - _2108)) + _2108);
    float _2226 = (((_1246 * _1197) + _1247) * _1211) * ((cbModelParam._m0[1u].w * (_2209 - _2110)) + _2110);
    float _2228 = (((_1246 * _1198) + _1247) * _1211) * ((cbModelParam._m0[1u].w * (_2211 - _2112)) + _2112);
    float _2231 = fma(_2228, cbSceneParam._m0[89u].z, fma(_2226, cbSceneParam._m0[89u].y, _2224 * cbSceneParam._m0[89u].x));
    float _2234 = fma(_2228, cbSceneParam._m0[90u].z, fma(_2226, cbSceneParam._m0[90u].y, _2224 * cbSceneParam._m0[90u].x));
    float _2237 = fma(_2228, cbSceneParam._m0[91u].z, fma(_2226, cbSceneParam._m0[91u].y, _2224 * cbSceneParam._m0[91u].x));
    vec4 _2245 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1133, _1134));
    float _2247 = _2245.w;
    float _2259 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2247);
    float _2260 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2247);
    float _2261 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2247);
    uvec4 _2265 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2267 = _2265.x * 14u;
    uint _2268 = _2267 + 13u;
    float _2275 = _1211 + (-1.0);
    float _2280 = (cbLight._m0[_2268].x * _2275) + 1.0;
    float _2281 = (cbLight._m0[_2268].y * _2275) + 1.0;
    float _2282 = (cbLight._m0[_2268].z * _2275) + 1.0;
    float _2283 = (cbLight._m0[_2268].w * _2275) + 1.0;
    uint _2284 = _2267 + 5u;
    float _2290 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2294 = _2267 + 4u;
    float _2303 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
    uint _2307 = _2267 | 1u;
    float _2318 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_1046, _1047, _1048));
    float _2321 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_1046, _1047, _1048));
    float _4508 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _4519 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2326 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * 0.3183098733425140380859375;
    float _2328 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * 0.3183098733425140380859375;
    float _2335 = ((cbLight._m0[_2284].x * _2290) * _2328) + (((cbLight._m0[_2294].x * _2259) * _2303) * _2326);
    float _2336 = ((_2290 * cbLight._m0[_2284].y) * _2328) + (((cbLight._m0[_2294].y * _2260) * _2303) * _2326);
    float _2337 = ((_2290 * cbLight._m0[_2284].z) * _2328) + (((cbLight._m0[_2294].z * _2261) * _2303) * _2326);
    uvec4 _2341 = floatBitsToUint(cbLight._m0[_2267 + 12u]);
    bool _2343 = _2341.x == 0u;
    float _2354;
    float _2356;
    float _2358;
    if (_2343)
    {
        _2354 = _2335;
        _2356 = _2336;
        _2358 = _2337;
    }
    else
    {
        uint _2362 = _2267 + 6u;
        float _2378 = (dot(vec3(cbLight._m0[_2267 + 2u].xyz), vec3(_1046, _1047, _1048)) * 0.5) + 0.5;
        float _2379 = _2378 * _2378;
        float _4530 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2380 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2381 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2354 = (((cbLight._m0[_2362].x * 0.3183098733425140380859375) * _2380) * _2381) + _2335;
        _2356 = (((cbLight._m0[_2362].y * 0.3183098733425140380859375) * _2380) * _2381) + _2336;
        _2358 = (((cbLight._m0[_2362].z * 0.3183098733425140380859375) * _2380) * _2381) + _2337;
    }
    bool _2361 = _2341.y == 0u;
    float _2399;
    float _2401;
    float _2403;
    if (_2361)
    {
        _2399 = _2354;
        _2401 = _2356;
        _2403 = _2358;
    }
    else
    {
        uint _2572 = _2267 + 7u;
        float _2588 = (dot(vec3(cbLight._m0[_2267 + 3u].xyz), vec3(_1046, _1047, _1048)) * 0.5) + 0.5;
        float _2589 = _2588 * _2588;
        float _4546 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2590 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2591 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2399 = (((cbLight._m0[_2572].x * 0.3183098733425140380859375) * _2590) * _2591) + _2354;
        _2401 = (((cbLight._m0[_2572].y * 0.3183098733425140380859375) * _2590) * _2591) + _2356;
        _2403 = (((cbLight._m0[_2572].z * 0.3183098733425140380859375) * _2590) * _2591) + _2358;
    }
    uint _2406 = _2267 + 8u;
    float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _1049) * 0.949999988079071044921875);
    float _2420 = _2419 * _2419;
    float _2421 = cbLight._m0[_2267].x + _1125;
    float _2422 = cbLight._m0[_2267].y + _1126;
    float _2423 = cbLight._m0[_2267].z + _1127;
    float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
    float _2428 = _2427 * _2421;
    float _2429 = _2427 * _2422;
    float _2430 = _2427 * _2423;
    float _2431 = dot(vec3(_1046, _1047, _1048), vec3(cbLight._m0[_2267].xyz));
    float _4562 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2434 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _4573 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _2435 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2436 = dot(vec3(_1046, _1047, _1048), vec3(_2428, _2429, _2430));
    float _4584 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2440 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2428, _2429, _2430));
    float _4595 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2444 = _2420 * _2420;
    float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
    float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
    float _2457 = 0.959999978542327880859375 - _1192;
    float _2459 = 0.959999978542327880859375 - _1193;
    float _2460 = 0.959999978542327880859375 - _1194;
    float _2467 = 1.0 - _2420;
    float _2478 = (0.5 / (((_2435 * ((_2434 * _2467) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2467) + _2420) * _2434))) * _2434;
    float _4606 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
    uint _2494 = _2267 + 9u;
    float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _1049) * 0.949999988079071044921875);
    float _2506 = _2505 * _2505;
    float _2507 = cbLight._m0[_2307].x + _1125;
    float _2508 = cbLight._m0[_2307].y + _1126;
    float _2509 = cbLight._m0[_2307].z + _1127;
    float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
    float _2514 = _2513 * _2507;
    float _2515 = _2513 * _2508;
    float _2516 = _2513 * _2509;
    float _2517 = dot(vec3(_1046, _1047, _1048), vec3(cbLight._m0[_2307].xyz));
    float _4617 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2520 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2521 = dot(vec3(_1046, _1047, _1048), vec3(_2514, _2515, _2516));
    float _4628 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2525 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2514, _2515, _2516));
    float _4639 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2529 = _2506 * _2506;
    float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
    float _2540 = exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0);
    float _2547 = 1.0 - _2506;
    float _2557 = (0.5 / (((_2435 * ((_2520 * _2547) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2547) + _2506) * _2520))) * _2520;
    float _4650 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2559 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
    float _2569 = (((((_2540 * _2457) + _1195) * cbLight._m0[_2494].x) * _2559) * _2290) + ((((cbLight._m0[_2406].x * _2259) * ((_2456 * _2457) + _1195)) * _2480) * _2303);
    float _2570 = (((((_2540 * _2459) + _1197) * cbLight._m0[_2494].y) * _2559) * _2290) + ((((cbLight._m0[_2406].y * _2260) * ((_2456 * _2459) + _1197)) * _2480) * _2303);
    float _2571 = (((((_2540 * _2460) + _1198) * cbLight._m0[_2494].z) * _2559) * _2290) + ((((cbLight._m0[_2406].z * _2261) * ((_2456 * _2460) + _1198)) * _2480) * _2303);
    float _2633;
    float _2635;
    float _2637;
    if (_2343)
    {
        _2633 = _2569;
        _2635 = _2570;
        _2637 = _2571;
    }
    else
    {
        uint _2639 = _2267 + 2u;
        uint _2643 = _2267 + 10u;
        float _2657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2639].w)) * _1049) * 0.949999988079071044921875);
        float _2658 = _2657 * _2657;
        float _2659 = cbLight._m0[_2639].x + _1125;
        float _2660 = cbLight._m0[_2639].y + _1126;
        float _2661 = cbLight._m0[_2639].z + _1127;
        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
        float _2666 = _2665 * _2659;
        float _2667 = _2665 * _2660;
        float _2668 = _2665 * _2661;
        float _2669 = dot(vec3(_1046, _1047, _1048), vec3(cbLight._m0[_2639].xyz));
        float _4661 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2673 = dot(vec3(_1046, _1047, _1048), vec3(_2666, _2667, _2668));
        float _4672 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2677 = dot(vec3(cbLight._m0[_2639].xyz), vec3(_2666, _2667, _2668));
        float _4683 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2681 = _2658 * _2658;
        float _2685 = ((_2676 * _2676) * (_2681 + (-1.0))) + 1.0;
        float _2692 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
        float _2699 = 1.0 - _2658;
        float _2709 = (0.5 / (((_2435 * ((_2672 * _2699) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2699) + _2658) * _2672))) * _2672;
        float _4694 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2711 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2681 / ((_2685 * _2685) * 3.141590118408203125));
        float _2712 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2633 = (((((_2692 * _2457) + _1195) * cbLight._m0[_2643].x) * _2711) * _2712) + _2569;
        _2635 = (((((_2692 * _2459) + _1197) * cbLight._m0[_2643].y) * _2711) * _2712) + _2570;
        _2637 = (((((_2692 * _2460) + _1198) * cbLight._m0[_2643].z) * _2711) * _2712) + _2571;
    }
    float _2747;
    float _2749;
    float _2751;
    if (_2361)
    {
        _2747 = _2633;
        _2749 = _2635;
        _2751 = _2637;
    }
    else
    {
        uint _2758 = _2267 + 3u;
        uint _2762 = _2267 + 11u;
        float _2776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2758].w)) * _1049) * 0.949999988079071044921875);
        float _2777 = _2776 * _2776;
        float _2778 = cbLight._m0[_2758].x + _1125;
        float _2779 = cbLight._m0[_2758].y + _1126;
        float _2780 = cbLight._m0[_2758].z + _1127;
        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
        float _2785 = _2784 * _2778;
        float _2786 = _2784 * _2779;
        float _2787 = _2784 * _2780;
        float _2788 = dot(vec3(_1046, _1047, _1048), vec3(cbLight._m0[_2758].xyz));
        float _4710 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2792 = dot(vec3(_1046, _1047, _1048), vec3(_2785, _2786, _2787));
        float _4721 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2796 = dot(vec3(cbLight._m0[_2758].xyz), vec3(_2785, _2786, _2787));
        float _4732 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2800 = _2777 * _2777;
        float _2804 = ((_2795 * _2795) * (_2800 + (-1.0))) + 1.0;
        float _2811 = exp2(log2(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) * 5.0);
        float _2818 = 1.0 - _2777;
        float _2828 = (0.5 / (((_2435 * ((_2791 * _2818) + _2777)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2818) + _2777) * _2791))) * _2791;
        float _4743 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2830 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2800 / ((_2804 * _2804) * 3.141590118408203125));
        float _2831 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2747 = (((((_2811 * _2457) + _1195) * cbLight._m0[_2762].x) * _2830) * _2831) + _2633;
        _2749 = (((((_2811 * _2459) + _1197) * cbLight._m0[_2762].y) * _2830) * _2831) + _2635;
        _2751 = (((((_2811 * _2460) + _1198) * cbLight._m0[_2762].z) * _2830) * _2831) + _2637;
    }
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_2265.y == 0u)
    {
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2906;
        float _2908 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2906;
        float _2909 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2906;
        uvec4 _2921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2922 = _2921.x;
        uint _2933 = uint((float(_2921.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1134) / _2922))) + floor(float(uint(cbSceneParam._m0[85u].x * _1133) / _2922)));
        float _2943 = (log2(_2909 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2944 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        uint _2947 = uint(isnan(14.0) ? _2944 : (isnan(_2944) ? 14.0 : min(_2944, 14.0)));
        uvec4 _2952 = texelFetch(g_lightClusterGridBuffer, int(((_2947 << 2u) + (_2933 << 6u)) >> 2u));
        uint _2953 = _2952.x;
        uint _2954 = _2921.z;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        if (((((1u << ((_2954 >> 4u) & 15u)) + 4294967295u) & _2953) == 0u) || ((_2954 & 240u) == 0u))
        {
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
        }
        else
        {
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            uint _3204 = 0u;
            uint _3213;
            bool _3214;
            for (;;)
            {
                _3213 = texelFetch(g_lightClassification, int((((_2947 << 5u) + (_2933 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                _3214 = _3213 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3214)
                {
                    frontier_phi_61_pred = _3198;
                    frontier_phi_61_pred_1 = _3203;
                    frontier_phi_61_pred_2 = _3202;
                    frontier_phi_61_pred_3 = _3201;
                    frontier_phi_61_pred_4 = _3200;
                    frontier_phi_61_pred_5 = _3199;
                }
                else
                {
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    uint _3328;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3213;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    for (;;)
                    {
                        uint _3332 = uint(findLSB(_3328)) + (_3204 << 5u);
                        uint _3329 = (_3328 + 4294967295u) & _3328;
                        uint _3334 = _3332 * 48u;
                        vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 3u)).x));
                        uint _3354 = (_3332 * 48u) + 4u;
                        vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 3u)).x));
                        uint _3373 = (_3332 * 48u) + 8u;
                        vec3 _3384 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3373)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 2u)).x));
                        float _3388 = _3348.x - _2907;
                        float _3389 = _3348.y - _2908;
                        float _3390 = _3348.z - _2909;
                        float _3391 = dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390));
                        float _3394 = inversesqrt(_3391);
                        float _3395 = _3394 * _3388;
                        float _3396 = _3394 * _3389;
                        float _3397 = _3394 * _3390;
                        float _3398 = dot(vec3(_1152, _1155, _1158), vec3(_3395, _3396, _3397));
                        float _3403 = 1.0 - (_3391 * _3348.w);
                        float _4769 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3405 = sqrt(_3391) * _3367.w;
                        float _3408 = 1.39999997615814208984375 / (_3405 + 1.39999997615814208984375);
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3398) + _3409;
                        float _3415 = _3405 * _3405;
                        float _3419 = ((isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0))) * _3404) / ((_3415 * 0.699999988079071044921875) + 1.0);
                        float _3423 = (-0.0) - _2907;
                        float _3424 = (-0.0) - _2908;
                        float _3425 = (-0.0) - _2909;
                        float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                        float _3430 = _3429 * _3423;
                        float _3431 = _3429 * _3424;
                        float _3432 = _3429 * _3425;
                        float _3440 = exp2(log2(1.0 / ((_3415 * 3.5) + 5.0)) * 0.25);
                        float _3441 = 1.0 - _1227;
                        float _3448 = sqrt(1.0 - ((1.0 - (_3441 * _3441)) * (1.0 - (_3440 * _3440))));
                        float _3449 = _3448 * _3448;
                        float _3450 = _3449 * _3449;
                        float _3451 = _3430 + _3395;
                        float _3452 = _3431 + _3396;
                        float _3453 = _3432 + _3397;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3461 = dot(vec3(_1152, _1155, _1158), vec3(_3430, _3431, _3432));
                        float _4785 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3465 = dot(vec3(_1152, _1155, _1158), vec3(_3457 * _3451, _3457 * _3452, _3457 * _3453));
                        float _4796 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3472 = ((_3468 * _3468) * (_3450 + (-1.0))) + 1.0;
                        float _3473 = _3408 * _3449;
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3398) + _3474;
                        float _4807 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3478 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3479 = 1.0 - _3449;
                        float _3489 = (0.5 / (((_3478 * ((_3464 * _3479) + _3449)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3449) * _3464))) * _3478;
                        float _4818 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3500 = (((_3450 * 3.1415927410125732421875) * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) / ((_3472 * _3472) * ((_3415 * 2.1991131305694580078125) + 3.141590118408203125))) * _3404;
                        _3257 = (_3419 * _3367.x) + _3325;
                        _3258 = (_3419 * _3367.y) + _3326;
                        _3259 = (_3419 * _3367.z) + _3327;
                        _3254 = (_3500 * _3384.x) + _3322;
                        _3255 = (_3500 * _3384.y) + _3323;
                        _3256 = (_3500 * _3384.z) + _3324;
                        if (_3329 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3329;
                        }
                    }
                    frontier_phi_61_pred = _3254;
                    frontier_phi_61_pred_1 = _3259;
                    frontier_phi_61_pred_2 = _3258;
                    frontier_phi_61_pred_3 = _3257;
                    frontier_phi_61_pred_4 = _3256;
                    frontier_phi_61_pred_5 = _3255;
                }
                _3055 = frontier_phi_61_pred;
                _3065 = frontier_phi_61_pred_1;
                _3063 = frontier_phi_61_pred_2;
                _3061 = frontier_phi_61_pred_3;
                _3059 = frontier_phi_61_pred_4;
                _3057 = frontier_phi_61_pred_5;
                uint _3205 = _3204 + 1u;
                if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3198 = _3055;
                    _3199 = _3057;
                    _3200 = _3059;
                    _3201 = _3061;
                    _3202 = _3063;
                    _3203 = _3065;
                    _3204 = _3205;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
        }
        uvec4 _3068 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3069 = _3068.z;
        uint _3071 = (_3069 >> 8u) & 15u;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        if (((4294967295u << _3071) & _2953) == 0u)
        {
            _3166 = _3054;
            _3168 = _3056;
            _3170 = _3058;
            _3172 = _3060;
            _3174 = _3062;
            _3176 = _3064;
        }
        else
        {
            float _3191 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
            float _3192 = _3191 * _2907;
            float _3193 = _3191 * _2908;
            float _3194 = _3191 * _2909;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3071 < ((_3069 >> 12u) & 15u))
            {
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3305 = _3054;
                float _3306 = _3056;
                float _3307 = _3058;
                float _3308 = _3060;
                float _3309 = _3062;
                float _3310 = _3064;
                uint _3311 = _3071;
                uint _3320;
                bool _3321;
                for (;;)
                {
                    _3320 = texelFetch(g_lightClassification, int((((_2947 << 5u) + (_2933 << 9u)) + (_3311 << 2u)) >> 2u)).x;
                    _3321 = _3320 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3321)
                    {
                        frontier_phi_67_pred = _3308;
                        frontier_phi_67_pred_1 = _3309;
                        frontier_phi_67_pred_2 = _3310;
                        frontier_phi_67_pred_3 = _3307;
                        frontier_phi_67_pred_4 = _3306;
                        frontier_phi_67_pred_5 = _3305;
                    }
                    else
                    {
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3518 = _3305;
                        float _3519 = _3306;
                        float _3520 = _3307;
                        float _3521 = _3308;
                        float _3522 = _3309;
                        float _3523 = _3310;
                        uint _3524 = _3320;
                        uint _3525;
                        vec4 _3550;
                        float _3551;
                        vec4 _3566;
                        vec3 _3578;
                        vec4 _3593;
                        vec4 _3608;
                        float _3654;
                        bool _3655;
                        for (;;)
                        {
                            uint _3535 = ((_3311 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3524));
                            _3525 = (_3524 + 4294967295u) & _3524;
                            uint _3537 = _3535 * 40u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            _3551 = _3550.w;
                            uint _3553 = (_3535 * 40u) + 4u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3535 * 40u) + 8u;
                            _3578 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x));
                            uint _3580 = (_3535 * 40u) + 16u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3535 * 40u) + 20u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3535 * 40u) + 24u;
                            vec4 _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3629 = (_3535 * 40u) + 28u;
                            vec4 _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            _3654 = fma(_2909, _3642.z, fma(_2908, _3642.y, _3642.x * _2907)) + _3642.w;
                            _3655 = !((fma(_2909, _3623.z, fma(_2908, _3623.y, _3623.x * _2907)) + _3623.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3655)
                            {
                                float _3682 = _3550.x - _2907;
                                float _3683 = _3550.y - _2908;
                                float _3684 = _3550.z - _2909;
                                float _3685 = dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684));
                                float _3688 = inversesqrt(_3685);
                                float _3689 = _3688 * _3682;
                                float _3690 = _3688 * _3683;
                                float _3691 = _3688 * _3684;
                                float _3695 = 1.0 - (_3685 / (_3551 * _3551));
                                float _4829 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3700 = sqrt(_3685) * _3566.w;
                                float _3702 = 1.39999997615814208984375 / (_3700 + 1.39999997615814208984375);
                                float _3703 = _3702 * _3702;
                                float _3706 = ((1.0 - _3703) * dot(vec3(_3689, _3690, _3691), vec3(_1152, _1155, _1158))) + _3703;
                                float _3709 = _3700 * _3700;
                                float _3713 = (fma(_2909, _3593.z, fma(_2908, _3593.y, _3593.x * _2907)) + _3593.w) / _3654;
                                float _3714 = (fma(_2909, _3608.z, fma(_2908, _3608.y, _3608.x * _2907)) + _3608.w) / _3654;
                                float _3718 = 1.0 - dot(vec2(_3713, _3714), vec2(_3713, _3714));
                                float _4845 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3720 = _3719 * (((isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0))) * _3696) / ((_3709 * 0.699999988079071044921875) + 1.0));
                                float _3732 = exp2(log2(1.0 / ((_3709 * 3.5) + 5.0)) * 0.25);
                                float _3733 = 1.0 - _1227;
                                float _3740 = sqrt(1.0 - ((1.0 - (_3733 * _3733)) * (1.0 - (_3732 * _3732))));
                                float _3741 = _3740 * _3740;
                                float _3742 = _3741 * _3741;
                                float _3743 = _3689 - _3192;
                                float _3744 = _3690 - _3193;
                                float _3745 = _3691 - _3194;
                                float _3749 = inversesqrt(dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745)));
                                float _3753 = dot(vec3(_1152, _1155, _1158), vec3((-0.0) - _3192, (-0.0) - _3193, (-0.0) - _3194));
                                float _4856 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3756 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3757 = dot(vec3(_1152, _1155, _1158), vec3(_3749 * _3743, _3749 * _3744, _3749 * _3745));
                                float _4867 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3760 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3764 = ((_3760 * _3760) * (_3742 + (-1.0))) + 1.0;
                                float _3765 = _3702 * _3741;
                                float _3766 = _3765 * _3765;
                                float _3772 = ((1.0 - _3766) * dot(vec3(_1152, _1155, _1158), vec3(_3689, _3690, _3691))) + _3766;
                                float _4878 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3774 = 1.0 - _3741;
                                float _3784 = (0.5 / (((_3773 * ((_3756 * _3774) + _3741)) + 9.9999999392252902907785028219223e-09) + (((_3773 * _3774) + _3741) * _3756))) * _3773;
                                float _4889 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3794 = (_3719 * _3696) * (((_3742 * 3.1415927410125732421875) * (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) / ((_3764 * _3764) * ((_3709 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3794 * _3578.x;
                                frontier_phi_73_pred_1 = _3794 * _3578.y;
                                frontier_phi_73_pred_2 = _3720 * _3566.z;
                                frontier_phi_73_pred_3 = _3720 * _3566.y;
                                frontier_phi_73_pred_4 = _3720 * _3566.x;
                                frontier_phi_73_pred_5 = _3794 * _3578.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3798 = frontier_phi_73_pred;
                            _3799 = frontier_phi_73_pred_1;
                            _3803 = frontier_phi_73_pred_2;
                            _3802 = frontier_phi_73_pred_3;
                            _3801 = frontier_phi_73_pred_4;
                            _3800 = frontier_phi_73_pred_5;
                            _3508 = _3801 + _3521;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3505 = _3798 + _3518;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            if (_3525 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3525;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3508;
                        frontier_phi_67_pred_1 = _3509;
                        frontier_phi_67_pred_2 = _3510;
                        frontier_phi_67_pred_3 = _3507;
                        frontier_phi_67_pred_4 = _3506;
                        frontier_phi_67_pred_5 = _3505;
                    }
                    _3173 = frontier_phi_67_pred;
                    _3175 = frontier_phi_67_pred_1;
                    _3177 = frontier_phi_67_pred_2;
                    _3171 = frontier_phi_67_pred_3;
                    _3169 = frontier_phi_67_pred_4;
                    _3167 = frontier_phi_67_pred_5;
                    uint _3312 = _3311 + 1u;
                    if (_3312 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3305 = _3167;
                        _3306 = _3169;
                        _3307 = _3171;
                        _3308 = _3173;
                        _3309 = _3175;
                        _3310 = _3177;
                        _3311 = _3312;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3175;
                frontier_phi_55_56_ladder_1 = _3177;
                frontier_phi_55_56_ladder_2 = _3173;
                frontier_phi_55_56_ladder_3 = _3171;
                frontier_phi_55_56_ladder_4 = _3169;
                frontier_phi_55_56_ladder_5 = _3167;
            }
            else
            {
                frontier_phi_55_56_ladder = _3062;
                frontier_phi_55_56_ladder_1 = _3064;
                frontier_phi_55_56_ladder_2 = _3060;
                frontier_phi_55_56_ladder_3 = _3058;
                frontier_phi_55_56_ladder_4 = _3056;
                frontier_phi_55_56_ladder_5 = _3054;
            }
            _3166 = frontier_phi_55_56_ladder_5;
            _3168 = frontier_phi_55_56_ladder_4;
            _3170 = frontier_phi_55_56_ladder_3;
            _3172 = frontier_phi_55_56_ladder_2;
            _3174 = frontier_phi_55_56_ladder;
            _3176 = frontier_phi_55_56_ladder_1;
        }
        float _3181 = isnan(1.0) ? _1211 : (isnan(_1211) ? 1.0 : min(_1211, 1.0));
        _2966 = (_3181 * _3172) + _2399;
        _2968 = (_3181 * _3174) + _2401;
        _2970 = (_3181 * _3176) + _2403;
        _2972 = ((_3166 * _1195) * _3181) + _2747;
        _2974 = ((_3168 * _1197) * _3181) + _2749;
        _2976 = ((_3170 * _1198) * _3181) + _2751;
    }
    else
    {
        _2966 = _2399;
        _2968 = _2401;
        _2970 = _2403;
        _2972 = _2747;
        _2974 = _2749;
        _2976 = _2751;
    }
    float _4905 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _4916 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _4927 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    uint _2996 = _267 + 6u;
    float _3004 = _1133 / cbSceneParam._m0[86u].x;
    float _3005 = _1134 / cbSceneParam._m0[86u].y;
    vec4 _3019 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3004, _3005, (log2((isnan(cbSceneParam._m0[77u].w) ? _1068 : (isnan(_1068) ? cbSceneParam._m0[77u].w : min(_1068, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3021 = _3019.x;
    float _3022 = _3019.y;
    float _3023 = _3019.z;
    float _3024 = _3019.w;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    if (_1068 > cbSceneParam._m0[78u].w)
    {
        float _3079 = isnan(_1068) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1068 : min(cbSceneParam._m0[80u].w, _1068));
        float _3080 = _3079 / _1068;
        float _3091 = _3080 * _1118;
        float _3092 = _1119 * _3080;
        float _3093 = (-0.0) - _3092;
        float _3094 = _3080 * _1120;
        float _3096 = (cbSceneParam._m0[77u].w * _3093) / _3079;
        float _3097 = _3096 + cbSceneParam._m0[79u].w;
        float _3098 = cbSceneParam._m0[79u].w - _3092;
        float _3104 = sqrt(((_3091 * _3091) + (_3092 * _3092)) + (_3094 * _3094));
        float _3107 = (1.0 - (cbSceneParam._m0[77u].w / _3079)) * _3104;
        float _3112 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3114 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3267;
        if (abs((_3093 - _3096) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3267 = ((((_3097 > 0.0) ? exp2(_3112 * _3097) : (2.0 - exp2(_3114 * _3097))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3107;
        }
        else
        {
            float _3227 = 1.0 / cbSceneParam._m0[80u].x;
            float _3228 = isnan(_3098) ? _3097 : (isnan(_3097) ? _3098 : max(_3097, _3098));
            float _3229 = isnan(_3098) ? _3097 : (isnan(_3097) ? _3098 : min(_3097, _3098));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            _3267 = ((abs(_3104 / _3093) * cbSceneParam._m0[80u].y) * ((((_3238 - _3239) * 2.0) - ((exp2(_3112 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0)))) - exp2(_3112 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))))) * _3227)) - ((exp2(_3114 * _3238) - exp2(_3114 * _3239)) * _3227))) + (_3107 * cbSceneParam._m0[80u].z);
        }
        vec4 _3269 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3004, _3005, 1.0), 0.0);
        float _3278 = exp2((_3267 * (-1.44269502162933349609375)) * (1.0 - _3269.w));
        float _3279 = log2(_3278);
        float _3295 = log2(_3024);
        _3116 = (exp2(_3295 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].x)) * _3269.x) / cbSceneParam._m0[78u].x)) + _3021;
        _3118 = (exp2(_3295 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].y)) * _3269.y) / cbSceneParam._m0[78u].y)) + _3022;
        _3120 = (exp2(_3295 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].z)) * _3269.z) / cbSceneParam._m0[78u].z)) + _3023;
        _3122 = _3278 * _3024;
    }
    else
    {
        _3116 = _3021;
        _3118 = _3022;
        _3120 = _3023;
        _3122 = _3024;
    }
    float _3134 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3135 = _3134 == 3.0;
    float _3136 = log2(_3122);
    float _3143 = exp2(_3136 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2966 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1211))) + ((_2972 + ((isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0))) * _2017)) * cbPerFrame._m0[3u].x));
    float _3144 = exp2(_3136 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2968 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1211))) + ((_2974 + ((isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0))) * _2017)) * cbPerFrame._m0[3u].x));
    float _3145 = exp2(_3136 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2970 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1211))) + ((_2976 + ((isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0))) * _2017)) * cbPerFrame._m0[3u].x));
    float _3154 = (_3134 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3154 * (_3135 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3116)));
    SV_Target.y = _3154 * (_3135 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3118)));
    SV_Target.z = _3154 * (_3135 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3120)));
    SV_Target.w = cbInstanceData._m0[_2996].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2996].w;
}


