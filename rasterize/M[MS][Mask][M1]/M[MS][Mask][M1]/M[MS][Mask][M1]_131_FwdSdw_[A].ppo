#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1503;
float _4163;
float _4164;
float _4165;
float _4166;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _262 + 1u;
    uint _272 = _262 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _350.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[23u].w) + _403) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4175 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _428 = (_421 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _429 = (_421 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _430 = (_421 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _350.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[23u].w) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4186 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _501 = (_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428;
    float _502 = (_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429;
    float _503 = (_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430;
    vec4 _522 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _539 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _541 = _539.x;
    float _551 = dot(vec4(_541, _539.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _563 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _350.z) * 2.0) - ((((_541 - _551) * cbMtdParam._m0[23u].w) + _551) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4197 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _571 = (_564 * ((_522.x * cbMtdParam._m0[14u].x) - _501)) + _501;
    float _572 = (_564 * ((_522.y * cbMtdParam._m0[14u].y) - _502)) + _502;
    float _573 = (_564 * ((_522.z * cbMtdParam._m0[14u].z) - _503)) + _503;
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _632 = _628.z;
    float _639 = ((_611.x - _630) * _421) + _630;
    float _640 = ((_611.y - _631) * _421) + _631;
    float _641 = ((_611.z - _632) * _421) + _632;
    vec4 _653 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _664 = ((_653.x - _639) * _494) + _639;
    float _665 = ((_653.y - _640) * _494) + _640;
    float _666 = ((_653.z - _641) * _494) + _641;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _691 = ((_678.z - _666) * _564) + _666;
    float _694 = ((((_678.x - _664) * _564) + _664) * 2.0) + (-1.0);
    float _696 = ((((_678.y - _665) * _564) + _665) * 2.0) + (-1.0);
    float _697 = dot(vec2(_694, _696), vec2(_694, _696));
    float _4208 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _702 = sqrt(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _743 = _741.x;
    float _744 = 1.0 - _743;
    float _759 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_743 - _744) * cbMtdParam._m0[24u].z) + _744) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4219 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _767 = (_760 * ((_591.x * cbMtdParam._m0[18u].x) - _571)) + _571;
    float _768 = (_760 * ((_591.y * cbMtdParam._m0[18u].y) - _572)) + _572;
    float _769 = (_760 * ((_591.z * cbMtdParam._m0[18u].z) - _573)) + _573;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _797 = _795.x;
    float _815 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _797) * _421) + _797;
    float _832 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _815) * _494) + _815;
    float _850 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _282) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _283) + cbTextureTilingScale._m0[10u].w)).x - _832) * _564) + _832;
    float _854 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _850) * cbMtdParam._m0[19u].z) + _850;
    float _856 = _854 - (_854 * _760);
    float _860 = (cbMtdParam._m0[19u].w * (_716.z - _691)) + _691;
    vec4 _873 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _880 = (_873.x * 2.0) + (-1.0);
    float _881 = (_873.y * 2.0) + (-1.0);
    float _882 = dot(vec2(_880, _881), vec2(_880, _881));
    float _4230 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _890 = (_760 * (_873.z - _860)) + _860;
    float _893 = (((_716.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _694;
    float _894 = (((_716.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _696;
    float _906 = (((_880 - _893) + (cbMtdParam._m0[21u].x * _893)) * _760) + _893;
    float _907 = (((_881 - _894) + (cbMtdParam._m0[21u].x * _894)) * _760) + _894;
    float _908 = (_760 * (sqrt(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) - _702)) + _702;
    float _910 = cbMtdParam._m0[22u].x + _716.w;
    float _913 = fma(_908, _249 * NORMAL.x, fma(_907, _256 * TANGENT.x, (_242 * _234) * _906));
    float _916 = fma(_908, _249 * NORMAL.y, fma(_907, _256 * TANGENT.y, (_242 * _235) * _906));
    float _919 = fma(_908, _249 * NORMAL.z, fma(_907, _256 * TANGENT.z, (_242 * _236) * _906));
    float _923 = inversesqrt(dot(vec3(_913, _916, _919), vec3(_913, _916, _919)));
    float _924 = _923 * _913;
    float _925 = _923 * _916;
    float _926 = _923 * _919;
    float _4241 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _927 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4263 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4274 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4285 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4296 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _932 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _946 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _996 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _986);
    float _997 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _986);
    float _998 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _986);
    float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
    float _1003 = _996 * _1002;
    float _1004 = _997 * _1002;
    float _1005 = _998 * _1002;
    vec4 _1010 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1012 = _1010.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1184 = sqrt(((_996 * _996) + (_997 * _997)) + (_998 * _998));
        float _1190 = (cbMatDynParam._m0[5u].x * _1184) + cbMatDynParam._m0[5u].y;
        float _4307 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1195 = (cbMatDynParam._m0[5u].z * _1184) + cbMatDynParam._m0[5u].w;
        float _4318 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) - _1191)) + _1191) < ((_1012 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1023 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1024 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1042 = fma(_926, cbSceneParam._m0[5u].z, fma(_925, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _924));
    float _1045 = fma(_926, cbSceneParam._m0[6u].z, fma(_925, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _924));
    float _1048 = fma(_926, cbSceneParam._m0[7u].z, fma(_925, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _924));
    uint _1061 = _262 + 9u;
    uint _1062 = _1061 + uint(cbMatDynParam._m0[0u].w);
    float _1068 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * cbInstanceData._m0[_1062].x;
    float _1069 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * cbInstanceData._m0[_1062].y;
    float _1070 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * cbInstanceData._m0[_1062].z;
    float _4329 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _4340 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _4351 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _1074 = 1.0 - _932;
    float _1075 = _1071 * _1074;
    float _1076 = _1072 * _1074;
    float _1077 = _1073 * _1074;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _932;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _932;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _932;
    float _1085 = _1082 + 0.039999999105930328369140625;
    float _1087 = _1083 + 0.039999999105930328369140625;
    float _1088 = _1084 + 0.039999999105930328369140625;
    vec4 _1097 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1023, cbSceneParam._m0[86u].y * _1024));
    float _1101 = ((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * TEXCOORD_5.w) * _1097.x;
    float _1102 = dot(vec3(_924, _925, _926), vec3(_1003, _1004, _1005));
    float _1105 = _1102 * 2.0;
    float _1109 = (_1105 * _924) - _1003;
    float _1110 = (_1105 * _925) - _1004;
    float _1111 = (_1105 * _926) - _1005;
    float _1115 = abs(dot(vec3(_1003, _1004, _1005), vec3(_924, _925, _926)));
    float _4362 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1117 = sqrt(_927);
    float _1130 = exp2((_1117 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1117 * 3.0));
    float _1136 = (1.0 - _1130) * ((_1117 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1137 = _1130 * _1117;
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1502;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1227 = fma(_1173, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165));
        float _1231 = fma(_1173, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165));
        float _1235 = fma(_1173, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165));
        float _1260 = _1165 + _924;
        float _1261 = _1169 + _925;
        float _1262 = _1173 + _926;
        float _1272 = fma(_1262, cbModelParam._m0[26u].z, fma(_1261, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1260)) - _1227;
        float _1273 = fma(_1262, cbModelParam._m0[27u].z, fma(_1261, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1260)) - _1231;
        float _1274 = fma(_1262, cbModelParam._m0[28u].z, fma(_1261, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1260)) - _1235;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1227 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1231 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[34u].z) + ((((((_1235 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1330 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1296.x + (-0.5));
        float _1332 = _1330 * (_1296.y + (-0.5));
        float _1333 = _1330 * (_1296.z + (-0.5));
        float _1340 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1303.x + (-0.5));
        float _1342 = _1340 * (_1303.y + (-0.5));
        float _1343 = _1340 * (_1303.z + (-0.5));
        float _1350 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1310.x + (-0.5));
        float _1352 = _1350 * (_1310.y + (-0.5));
        float _1353 = _1350 * (_1310.z + (-0.5));
        float _1360 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1317.x + (-0.5));
        float _1362 = _1360 * (_1317.y + (-0.5));
        float _1363 = _1360 * (_1317.z + (-0.5));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = _1331 * 0.5;
        float _1368 = _1341 * 0.5;
        float _1369 = _1351 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1384 = (dot(vec3(_924, _925, _926), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1394 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4410 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1396 + 1.0))) + _1401) * _1364;
        float _1411 = _1332 * 0.5;
        float _1412 = _1342 * 0.5;
        float _1413 = _1352 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_924, _925, _926), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4421 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4432 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4443 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_1438 + 1.0))) + _1443) * _1365;
        float _1453 = _1333 * 0.5;
        float _1454 = _1343 * 0.5;
        float _1455 = _1353 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_924, _925, _926), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4454 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4465 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4476 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_1480 + 1.0))) + _1485) * _1366;
        _1502 = _1333;
        _1504 = _1332;
        _1505 = _1331;
        _1506 = _1343;
        _1507 = _1342;
        _1508 = _1341;
        _1509 = _1353;
        _1510 = _1352;
        _1511 = _1351;
        _1512 = _1366;
        _1513 = _1365;
        _1514 = _1364;
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
    }
    else
    {
        _1502 = _1503;
        _1504 = _1503;
        _1505 = _1503;
        _1506 = _1503;
        _1507 = _1503;
        _1508 = _1503;
        _1509 = _1503;
        _1510 = _1503;
        _1511 = _1503;
        _1512 = _1503;
        _1513 = _1503;
        _1514 = _1503;
        _1515 = 0.0;
        _1516 = 0.0;
        _1517 = 0.0;
    }
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1543 = fma(_1173, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165));
        float _1547 = fma(_1173, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165));
        float _1551 = fma(_1173, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165));
        float _1574 = _1165 + _924;
        float _1575 = _1169 + _925;
        float _1576 = _1173 + _926;
        float _1586 = fma(_1576, cbModelParam._m0[30u].z, fma(_1575, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1574)) - _1543;
        float _1587 = fma(_1576, cbModelParam._m0[31u].z, fma(_1575, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1574)) - _1547;
        float _1588 = fma(_1576, cbModelParam._m0[32u].z, fma(_1575, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1574)) - _1551;
        float _1592 = inversesqrt(dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588)));
        float _1605 = ((_1592 * _1586) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1543 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1592 * _1587) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1547 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1592 * _1588) / cbModelParam._m0[35u].z) + ((((((_1551 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        vec4 _1616 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1605, _1606, _1607), 0.0);
        float _1642 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1609.x + (-0.5));
        float _1644 = _1642 * (_1609.y + (-0.5));
        float _1645 = _1642 * (_1609.z + (-0.5));
        float _1652 = exp2((_1616.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1616.x + (-0.5));
        float _1654 = _1652 * (_1616.y + (-0.5));
        float _1655 = _1652 * (_1616.z + (-0.5));
        float _1662 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1623.x + (-0.5));
        float _1664 = _1662 * (_1623.y + (-0.5));
        float _1665 = _1662 * (_1623.z + (-0.5));
        float _1672 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1630.x + (-0.5));
        float _1674 = _1672 * (_1630.y + (-0.5));
        float _1675 = _1672 * (_1630.z + (-0.5));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = _1643 * 0.5;
        float _1680 = _1653 * 0.5;
        float _1681 = _1663 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_924, _925, _926), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4517 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4528 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4539 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_1706 + 1.0))) + _1711) * _1676;
        float _1721 = _1644 * 0.5;
        float _1722 = _1654 * 0.5;
        float _1723 = _1664 * 0.5;
        float _1724 = dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723));
        float _1729 = (_1724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1724);
        float _1737 = (dot(vec3(_924, _925, _926), vec3(_1729 * _1721, _1729 * _1722, _1729 * _1723)) + 1.0) * 0.5;
        float _4550 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1746 = sqrt(((_1722 * _1722) + (_1721 * _1721)) + (_1723 * _1723)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4561 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _1748 = _1747 * 2.0;
        float _1752 = (1.0 - _1747) / (_1747 + 1.0);
        float _4572 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1762 = ((((1.0 - _1753) * (_1748 + 2.0)) * exp2(log2(isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_1748 + 1.0))) + _1753) * _1677;
        float _1763 = _1645 * 0.5;
        float _1764 = _1655 * 0.5;
        float _1765 = _1665 * 0.5;
        float _1766 = dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765));
        float _1771 = (_1766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1766);
        float _1779 = (dot(vec3(_924, _925, _926), vec3(_1771 * _1763, _1771 * _1764, _1771 * _1765)) + 1.0) * 0.5;
        float _4583 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1788 = sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4594 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1790 = _1789 * 2.0;
        float _1794 = (1.0 - _1789) / (_1789 + 1.0);
        float _4605 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _1804 = ((((1.0 - _1795) * (_1790 + 2.0)) * exp2(log2(isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_1790 + 1.0))) + _1795) * _1678;
        _1812 = _1645;
        _1813 = _1644;
        _1814 = _1643;
        _1815 = _1655;
        _1816 = _1654;
        _1817 = _1653;
        _1818 = _1665;
        _1819 = _1664;
        _1820 = _1663;
        _1821 = _1678;
        _1822 = _1677;
        _1823 = _1676;
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)));
    }
    else
    {
        _1812 = _1503;
        _1813 = _1503;
        _1814 = _1503;
        _1815 = _1503;
        _1816 = _1503;
        _1817 = _1503;
        _1818 = _1503;
        _1819 = _1503;
        _1820 = _1503;
        _1821 = _1503;
        _1822 = _1503;
        _1823 = _1503;
        _1824 = 0.0;
        _1825 = 0.0;
        _1826 = 0.0;
    }
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1515)) + _1515;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1516)) + _1516;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1517)) + _1517;
    float _1859 = fma(_1838, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1836 * cbSceneParam._m0[89u].x));
    float _1862 = fma(_1838, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1836 * cbSceneParam._m0[90u].x));
    float _1865 = fma(_1838, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1836));
    float _1880 = _1109 * 0.5;
    float _1881 = _1110 * 0.5;
    float _1882 = _1111 * 0.5;
    float _1883 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1886 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1889 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1923;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1896 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1502, _1506, _1509, _1512));
        float _1900 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1504, _1507, _1510, _1513));
        float _1904 = dot(vec4(_1880, _1881, _1882, 1.0), vec4(_1505, _1508, _1511, _1514));
        float _1911 = dot(vec4(cbModelParam._m0[39u]), vec4(_1880, _1881, _1882, 1.0));
        _1923 = dot(vec3(isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1911) ? 0.0 : (isnan(0.0) ? _1911 : max(0.0, _1911))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1923 = 1.0;
    }
    float _1934;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1925 = dot(vec4(cbModelParam._m0[40u]), vec4(_1880, _1881, _1882, 1.0));
        _1934 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1925) ? 0.0 : (isnan(0.0) ? _1925 : max(0.0, _1925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1934 = 1.0;
    }
    float _1938 = (_1934 * cbModelParam._m0[1u].x) + (_1923 * (1.0 - cbModelParam._m0[1u].x));
    float _1948 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _927);
    float _1949 = isnan(_1948) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1948 : min(cbModelParam._m0[25u].z, _1948));
    float _2029;
    float _2031;
    float _2033;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1996 = fma(_1173, cbModelParam._m0[13u].z, fma(_1169, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1165)) + cbModelParam._m0[13u].w;
        float _2000 = fma(_1173, cbModelParam._m0[14u].z, fma(_1169, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1165)) + cbModelParam._m0[14u].w;
        float _2004 = fma(_1173, cbModelParam._m0[15u].z, fma(_1169, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1165)) + cbModelParam._m0[15u].w;
        float _2007 = fma(_1111, cbModelParam._m0[13u].z, fma(_1110, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1109));
        float _2010 = fma(_1111, cbModelParam._m0[14u].z, fma(_1110, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1109));
        float _2013 = fma(_1111, cbModelParam._m0[15u].z, fma(_1110, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1109));
        float _2041;
        if (_2007 > 0.0)
        {
            _2041 = abs((1.0 - _1996) / _2007);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1996 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2041 = frontier_phi_17_15_ladder;
        }
        float _2212;
        if (_2010 > 0.0)
        {
            _2212 = abs((1.0 - _2000) / _2010);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2000 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2212 = frontier_phi_26_22_ladder;
        }
        float _2507;
        if (_2013 > 0.0)
        {
            _2507 = abs((1.0 - _2004) / _2013);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2004 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2507 = frontier_phi_38_33_ladder;
        }
        float _2509 = isnan(_2212) ? _2041 : (isnan(_2041) ? _2212 : min(_2041, _2212));
        float _2510 = isnan(_2507) ? _2509 : (isnan(_2509) ? _2507 : min(_2509, _2507));
        float _2514 = (_2510 * _2007) + _1996;
        float _2515 = (_2510 * _2010) + _2000;
        float _2516 = (_2510 * _2013) + _2004;
        float _2517 = _2510 * 9.9999997473787516355514526367188e-05;
        float _2519 = (-1.0) - _2517;
        float _2521 = _2517 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2516 > _2521) || ((_2516 < _2519) || ((_2515 > _2521) || ((_2515 < _2519) || ((_2514 < _2519) || (_2514 > _2521))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2516, cbModelParam._m0[9u].z, fma(_2515, cbModelParam._m0[9u].y, _2514 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2516, cbModelParam._m0[10u].z, fma(_2515, cbModelParam._m0[10u].y, _2514 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2516, cbModelParam._m0[11u].z, fma(_2515, cbModelParam._m0[11u].y, _2514 * cbModelParam._m0[11u].x))), _1949);
            frontier_phi_16_38_ladder = _2661.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2661.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2661.x * cbModelParam._m0[1u].y;
        }
        _2029 = frontier_phi_16_38_ladder_2;
        _2031 = frontier_phi_16_38_ladder_1;
        _2033 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1109, _1110, _1111), _1949);
        _2029 = _2017.x * cbModelParam._m0[1u].y;
        _2031 = _2017.y * cbModelParam._m0[1u].y;
        _2033 = _2017.z * cbModelParam._m0[1u].y;
    }
    float _2037 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _927);
    float _2038 = isnan(_2037) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2037 : min(cbModelParam._m0[25u].w, _2037));
    float _2127;
    float _2129;
    float _2131;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2091 = fma(_1173, cbModelParam._m0[21u].z, fma(_1169, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1165)) + cbModelParam._m0[21u].w;
        float _2095 = fma(_1173, cbModelParam._m0[22u].z, fma(_1169, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1165)) + cbModelParam._m0[22u].w;
        float _2099 = fma(_1173, cbModelParam._m0[23u].z, fma(_1169, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1165)) + cbModelParam._m0[23u].w;
        float _2102 = fma(_1111, cbModelParam._m0[21u].z, fma(_1110, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1109));
        float _2105 = fma(_1111, cbModelParam._m0[22u].z, fma(_1110, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1109));
        float _2108 = fma(_1111, cbModelParam._m0[23u].z, fma(_1110, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1109));
        float _2217;
        if (_2102 > 0.0)
        {
            _2217 = abs((1.0 - _2091) / _2102);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2091 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2217 = frontier_phi_28_24_ladder;
        }
        float _2534;
        if (_2105 > 0.0)
        {
            _2534 = abs((1.0 - _2095) / _2105);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2095 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2534 = frontier_phi_40_35_ladder;
        }
        float _2872;
        if (_2108 > 0.0)
        {
            _2872 = abs((1.0 - _2099) / _2108);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2099 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2872 = frontier_phi_50_47_ladder;
        }
        float _2874 = isnan(_2534) ? _2217 : (isnan(_2217) ? _2534 : min(_2217, _2534));
        float _2875 = isnan(_2872) ? _2874 : (isnan(_2874) ? _2872 : min(_2874, _2872));
        float _2879 = (_2875 * _2102) + _2091;
        float _2880 = (_2875 * _2105) + _2095;
        float _2881 = (_2875 * _2108) + _2099;
        float _2882 = _2875 * 9.9999997473787516355514526367188e-05;
        float _2883 = (-1.0) - _2882;
        float _2885 = _2882 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2881 > _2885) || ((_2881 < _2883) || ((_2880 > _2885) || ((_2880 < _2883) || ((_2879 < _2883) || (_2879 > _2885))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2881, cbModelParam._m0[17u].z, fma(_2880, cbModelParam._m0[17u].y, _2879 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2881, cbModelParam._m0[18u].z, fma(_2880, cbModelParam._m0[18u].y, _2879 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2881, cbModelParam._m0[19u].z, fma(_2880, cbModelParam._m0[19u].y, _2879 * cbModelParam._m0[19u].x))), _2038);
            frontier_phi_25_50_ladder = _3003.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3003.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3003.x * cbModelParam._m0[1u].z;
        }
        _2127 = frontier_phi_25_50_ladder_2;
        _2129 = frontier_phi_25_50_ladder_1;
        _2131 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2111 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1109, _1110, _1111), _2038);
        _2127 = _2111.x * cbModelParam._m0[1u].z;
        _2129 = _2111.y * cbModelParam._m0[1u].z;
        _2131 = _2111.z * cbModelParam._m0[1u].z;
    }
    float _2144 = (((_1136 * _1085) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2127 - _2029)) + _2029);
    float _2146 = (((_1136 * _1087) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2129 - _2031)) + _2031);
    float _2148 = (((_1136 * _1088) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2131 - _2033)) + _2033);
    float _2151 = fma(_2148, cbSceneParam._m0[89u].z, fma(_2146, cbSceneParam._m0[89u].y, _2144 * cbSceneParam._m0[89u].x));
    float _2154 = fma(_2148, cbSceneParam._m0[90u].z, fma(_2146, cbSceneParam._m0[90u].y, _2144 * cbSceneParam._m0[90u].x));
    float _2157 = fma(_2148, cbSceneParam._m0[91u].z, fma(_2146, cbSceneParam._m0[91u].y, _2144 * cbSceneParam._m0[91u].x));
    float _2191 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2195 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2199 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2203 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2204 = _2191 / _2203;
    float _2205 = _2195 / _2203;
    float _2206 = _2199 / _2203;
    float _2353;
    float _2354;
    float _2355;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2233 = ((uint(_2206 > cbSceneParam._m0[59u].y) + uint(_2206 > cbSceneParam._m0[59u].x)) + uint(_2206 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2234 = _2233 + 43u;
        uint _2242 = _2233 + 44u;
        uint _2250 = _2233 + 45u;
        uint _2258 = _2233 + 46u;
        float _2269 = fma(_2203, cbSceneParam._m0[_2234].w, fma(_2199, cbSceneParam._m0[_2234].z, fma(_2195, cbSceneParam._m0[_2234].y, _2191 * cbSceneParam._m0[_2234].x)));
        float _2273 = fma(_2203, cbSceneParam._m0[_2242].w, fma(_2199, cbSceneParam._m0[_2242].z, fma(_2195, cbSceneParam._m0[_2242].y, _2191 * cbSceneParam._m0[_2242].x)));
        float _2281 = fma(_2203, cbSceneParam._m0[_2258].w, fma(_2199, cbSceneParam._m0[_2258].z, fma(_2195, cbSceneParam._m0[_2258].y, _2191 * cbSceneParam._m0[_2258].x)));
        float _2286 = cbSceneParam._m0[33u].z * _2281;
        float _2288 = cbSceneParam._m0[33u].w * _2281;
        float _2291 = fma(_2203, cbSceneParam._m0[_2250].w, fma(_2199, cbSceneParam._m0[_2250].z, fma(_2195, cbSceneParam._m0[_2250].y, _2191 * cbSceneParam._m0[_2250].x))) / _2281;
        float _2339 = (cbSceneParam._m0[33u].x - sqrt(((_2205 * _2205) + (_2204 * _2204)) + (_2206 * _2206))) * cbSceneParam._m0[33u].y;
        float _4731 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2346 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2286 + _2269) / _2281, (_2288 + _2273) / _2281), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2288 + _2269) / _2281, (_2273 - _2286) / _2281), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2269 - _2286) / _2281, (_2273 - _2288) / _2281), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2269 - _2288) / _2281, (_2286 + _2273) / _2281), _2291), 0.0)).x), vec4(0.25)));
        _2353 = 1.0 - (_2346 * cbSceneParam._m0[34u].x);
        _2354 = 1.0 - (_2346 * cbSceneParam._m0[34u].y);
        _2355 = 1.0 - (_2346 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2353 = 1.0;
        _2354 = 1.0;
        _2355 = 1.0;
    }
    float _2419;
    float _2421;
    float _2423;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2407 = fma(_2203, cbSceneParam._m0[63u].w, fma(_2199, cbSceneParam._m0[63u].z, fma(_2195, cbSceneParam._m0[63u].y, _2191 * cbSceneParam._m0[63u].x)));
        float _2408 = fma(_2203, cbSceneParam._m0[60u].w, fma(_2199, cbSceneParam._m0[60u].z, fma(_2195, cbSceneParam._m0[60u].y, _2191 * cbSceneParam._m0[60u].x))) / _2407;
        float _2409 = fma(_2203, cbSceneParam._m0[61u].w, fma(_2199, cbSceneParam._m0[61u].z, fma(_2195, cbSceneParam._m0[61u].y, _2191 * cbSceneParam._m0[61u].x))) / _2407;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2408 >= cbSceneParam._m0[64u].x) && (_2409 >= cbSceneParam._m0[64u].y)) && (_2408 <= cbSceneParam._m0[64u].z)) && (_2409 <= cbSceneParam._m0[64u].w))
        {
            float _2547 = fma(_2203, cbSceneParam._m0[62u].w, fma(_2199, cbSceneParam._m0[62u].z, fma(_2195, cbSceneParam._m0[62u].y, _2191 * cbSceneParam._m0[62u].x))) / _2407;
            float _2551 = isnan(cbSceneParam._m0[41u].w) ? _2547 : (isnan(_2547) ? cbSceneParam._m0[41u].w : max(_2547, cbSceneParam._m0[41u].w));
            float _2594 = (cbSceneParam._m0[33u].x - sqrt(((_2205 * _2205) + (_2204 * _2204)) + (_2206 * _2206))) * cbSceneParam._m0[33u].y;
            float _4747 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
            float _2601 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2408, cbSceneParam._m0[33u].w + _2409), _2551), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2408, _2409 - cbSceneParam._m0[33u].z), _2551), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2408 - cbSceneParam._m0[33u].z, _2409 - cbSceneParam._m0[33u].w), _2551), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2408 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2409), _2551), 0.0)).x), vec4(0.25)));
            float _2605 = 1.0 - (_2601 * cbSceneParam._m0[34u].x);
            float _2606 = 1.0 - (_2601 * cbSceneParam._m0[34u].y);
            float _2607 = 1.0 - (_2601 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2607) ? _2355 : (isnan(_2355) ? _2607 : min(_2355, _2607));
            frontier_phi_37_36_ladder_1 = isnan(_2606) ? _2354 : (isnan(_2354) ? _2606 : min(_2354, _2606));
            frontier_phi_37_36_ladder_2 = isnan(_2605) ? _2353 : (isnan(_2353) ? _2605 : min(_2353, _2605));
        }
        else
        {
            frontier_phi_37_36_ladder = _2355;
            frontier_phi_37_36_ladder_1 = _2354;
            frontier_phi_37_36_ladder_2 = _2353;
        }
        _2419 = frontier_phi_37_36_ladder_2;
        _2421 = frontier_phi_37_36_ladder_1;
        _2423 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2419 = _2353;
        _2421 = _2354;
        _2423 = _2355;
    }
    uvec4 _2428 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _2430 = _2428.x * 14u;
    uint _2431 = _2430 + 13u;
    float _2438 = _1101 + (-1.0);
    float _2443 = (cbLight._m0[_2431].x * _2438) + 1.0;
    float _2444 = (cbLight._m0[_2431].y * _2438) + 1.0;
    float _2445 = (cbLight._m0[_2431].z * _2438) + 1.0;
    float _2446 = (cbLight._m0[_2431].w * _2438) + 1.0;
    uint _2447 = _2430 + 5u;
    float _2453 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
    uint _2457 = _2430 + 4u;
    float _2466 = isnan(1.0) ? _2443 : (isnan(_2443) ? 1.0 : min(_2443, 1.0));
    uint _2470 = _2430 | 1u;
    float _2481 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_924, _925, _926));
    float _2484 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_924, _925, _926));
    float _4783 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _4794 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2489 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * 0.3183098733425140380859375;
    float _2491 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * 0.3183098733425140380859375;
    float _2498 = ((cbLight._m0[_2447].x * _2453) * _2491) + (((cbLight._m0[_2457].x * _2419) * _2466) * _2489);
    float _2499 = ((_2453 * cbLight._m0[_2447].y) * _2491) + (((cbLight._m0[_2457].y * _2421) * _2466) * _2489);
    float _2500 = ((_2453 * cbLight._m0[_2447].z) * _2491) + (((cbLight._m0[_2457].z * _2423) * _2466) * _2489);
    uvec4 _2504 = floatBitsToUint(cbLight._m0[_2430 + 12u]);
    bool _2506 = _2504.x == 0u;
    float _2608;
    float _2610;
    float _2612;
    if (_2506)
    {
        _2608 = _2498;
        _2610 = _2499;
        _2612 = _2500;
    }
    else
    {
        uint _2616 = _2430 + 6u;
        float _2632 = (dot(vec3(cbLight._m0[_2430 + 2u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2633 = _2632 * _2632;
        float _4805 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2634 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
        float _2635 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2608 = (((cbLight._m0[_2616].x * 0.3183098733425140380859375) * _2634) * _2635) + _2498;
        _2610 = (((cbLight._m0[_2616].y * 0.3183098733425140380859375) * _2634) * _2635) + _2499;
        _2612 = (((cbLight._m0[_2616].z * 0.3183098733425140380859375) * _2634) * _2635) + _2500;
    }
    bool _2615 = _2504.y == 0u;
    float _2670;
    float _2672;
    float _2674;
    if (_2615)
    {
        _2670 = _2608;
        _2672 = _2610;
        _2674 = _2612;
    }
    else
    {
        uint _2843 = _2430 + 7u;
        float _2859 = (dot(vec3(cbLight._m0[_2430 + 3u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2860 = _2859 * _2859;
        float _4821 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2861 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2862 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
        _2670 = (((cbLight._m0[_2843].x * 0.3183098733425140380859375) * _2861) * _2862) + _2608;
        _2672 = (((cbLight._m0[_2843].y * 0.3183098733425140380859375) * _2861) * _2862) + _2610;
        _2674 = (((cbLight._m0[_2843].z * 0.3183098733425140380859375) * _2861) * _2862) + _2612;
    }
    uint _2677 = _2430 + 8u;
    float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _927) * 0.949999988079071044921875);
    float _2691 = _2690 * _2690;
    float _2692 = cbLight._m0[_2430].x + _1003;
    float _2693 = cbLight._m0[_2430].y + _1004;
    float _2694 = cbLight._m0[_2430].z + _1005;
    float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
    float _2699 = _2698 * _2692;
    float _2700 = _2698 * _2693;
    float _2701 = _2698 * _2694;
    float _2702 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2430].xyz));
    float _4837 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2705 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
    float _4848 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _2706 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
    float _2707 = dot(vec3(_924, _925, _926), vec3(_2699, _2700, _2701));
    float _4859 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
    float _2710 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
    float _2711 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2699, _2700, _2701));
    float _4870 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
    float _2715 = _2691 * _2691;
    float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
    float _2727 = exp2(log2(1.0 - (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) * 5.0);
    float _2728 = 0.959999978542327880859375 - _1082;
    float _2730 = 0.959999978542327880859375 - _1083;
    float _2731 = 0.959999978542327880859375 - _1084;
    float _2738 = 1.0 - _2691;
    float _2749 = (0.5 / (((_2706 * ((_2705 * _2738) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2706 * _2738) + _2691) * _2705))) * _2705;
    float _4881 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2751 = (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
    uint _2765 = _2430 + 9u;
    float _2776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _927) * 0.949999988079071044921875);
    float _2777 = _2776 * _2776;
    float _2778 = cbLight._m0[_2470].x + _1003;
    float _2779 = cbLight._m0[_2470].y + _1004;
    float _2780 = cbLight._m0[_2470].z + _1005;
    float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
    float _2785 = _2784 * _2778;
    float _2786 = _2784 * _2779;
    float _2787 = _2784 * _2780;
    float _2788 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2470].xyz));
    float _4892 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
    float _2791 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
    float _2792 = dot(vec3(_924, _925, _926), vec3(_2785, _2786, _2787));
    float _4903 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
    float _2795 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
    float _2796 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2785, _2786, _2787));
    float _4914 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2800 = _2777 * _2777;
    float _2804 = ((_2795 * _2795) * (_2800 + (-1.0))) + 1.0;
    float _2811 = exp2(log2(1.0 - (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0)))) * 5.0);
    float _2818 = 1.0 - _2777;
    float _2828 = (0.5 / (((_2706 * ((_2791 * _2818) + _2777)) + 9.9999999392252902907785028219223e-09) + (((_2706 * _2818) + _2777) * _2791))) * _2791;
    float _4925 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
    float _2830 = (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2800 / ((_2804 * _2804) * 3.141590118408203125));
    float _2840 = (((((_2811 * _2728) + _1085) * cbLight._m0[_2765].x) * _2830) * _2453) + ((((cbLight._m0[_2677].x * _2419) * ((_2727 * _2728) + _1085)) * _2751) * _2466);
    float _2841 = (((((_2811 * _2730) + _1087) * cbLight._m0[_2765].y) * _2830) * _2453) + ((((cbLight._m0[_2677].y * _2421) * ((_2727 * _2730) + _1087)) * _2751) * _2466);
    float _2842 = (((((_2811 * _2731) + _1088) * cbLight._m0[_2765].z) * _2830) * _2453) + ((((cbLight._m0[_2677].z * _2423) * ((_2727 * _2731) + _1088)) * _2751) * _2466);
    float _2898;
    float _2900;
    float _2902;
    if (_2506)
    {
        _2898 = _2840;
        _2900 = _2841;
        _2902 = _2842;
    }
    else
    {
        uint _2904 = _2430 + 2u;
        uint _2908 = _2430 + 10u;
        float _2922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2904].w)) * _927) * 0.949999988079071044921875);
        float _2923 = _2922 * _2922;
        float _2924 = cbLight._m0[_2904].x + _1003;
        float _2925 = cbLight._m0[_2904].y + _1004;
        float _2926 = cbLight._m0[_2904].z + _1005;
        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
        float _2931 = _2930 * _2924;
        float _2932 = _2930 * _2925;
        float _2933 = _2930 * _2926;
        float _2934 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2904].xyz));
        float _4936 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
        float _2938 = dot(vec3(_924, _925, _926), vec3(_2931, _2932, _2933));
        float _4947 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
        float _2942 = dot(vec3(cbLight._m0[_2904].xyz), vec3(_2931, _2932, _2933));
        float _4958 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2946 = _2923 * _2923;
        float _2950 = ((_2941 * _2941) * (_2946 + (-1.0))) + 1.0;
        float _2957 = exp2(log2(1.0 - (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0)))) * 5.0);
        float _2964 = 1.0 - _2923;
        float _2974 = (0.5 / (((_2706 * ((_2937 * _2964) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2706 * _2964) + _2923) * _2937))) * _2937;
        float _4969 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2976 = (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0))) * (_2946 / ((_2950 * _2950) * 3.141590118408203125));
        float _2977 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2898 = (((((_2957 * _2728) + _1085) * cbLight._m0[_2908].x) * _2976) * _2977) + _2840;
        _2900 = (((((_2957 * _2730) + _1087) * cbLight._m0[_2908].y) * _2976) * _2977) + _2841;
        _2902 = (((((_2957 * _2731) + _1088) * cbLight._m0[_2908].z) * _2976) * _2977) + _2842;
    }
    float _3008;
    float _3010;
    float _3012;
    if (_2615)
    {
        _3008 = _2898;
        _3010 = _2900;
        _3012 = _2902;
    }
    else
    {
        uint _3019 = _2430 + 3u;
        uint _3023 = _2430 + 11u;
        float _3037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3019].w)) * _927) * 0.949999988079071044921875);
        float _3038 = _3037 * _3037;
        float _3039 = cbLight._m0[_3019].x + _1003;
        float _3040 = cbLight._m0[_3019].y + _1004;
        float _3041 = cbLight._m0[_3019].z + _1005;
        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
        float _3046 = _3045 * _3039;
        float _3047 = _3045 * _3040;
        float _3048 = _3045 * _3041;
        float _3049 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_3019].xyz));
        float _4985 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        float _3052 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
        float _3053 = dot(vec3(_924, _925, _926), vec3(_3046, _3047, _3048));
        float _4996 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3056 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
        float _3057 = dot(vec3(cbLight._m0[_3019].xyz), vec3(_3046, _3047, _3048));
        float _5007 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        float _3061 = _3038 * _3038;
        float _3065 = ((_3056 * _3056) * (_3061 + (-1.0))) + 1.0;
        float _3072 = exp2(log2(1.0 - (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0)))) * 5.0);
        float _3079 = 1.0 - _3038;
        float _3089 = (0.5 / (((_2706 * ((_3052 * _3079) + _3038)) + 9.9999999392252902907785028219223e-09) + (((_2706 * _3079) + _3038) * _3052))) * _3052;
        float _5018 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
        float _3091 = (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_3061 / ((_3065 * _3065) * 3.141590118408203125));
        float _3092 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
        _3008 = (((((_3072 * _2728) + _1085) * cbLight._m0[_3023].x) * _3091) * _3092) + _2898;
        _3010 = (((((_3072 * _2730) + _1087) * cbLight._m0[_3023].y) * _3091) * _3092) + _2900;
        _3012 = (((((_3072 * _2731) + _1088) * cbLight._m0[_3023].z) * _3091) * _3092) + _2902;
    }
    float _3158;
    float _3160;
    float _3162;
    float _3164;
    float _3166;
    float _3168;
    if (_2428.y == 0u)
    {
        uvec4 _3113 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3114 = _3113.x;
        uint _3125 = uint((float(_3113.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1024) / _3114))) + floor(float(uint(cbSceneParam._m0[85u].x * _1023) / _3114)));
        float _3135 = (log2(_2206 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3136 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
        uint _3139 = uint(isnan(14.0) ? _3136 : (isnan(_3136) ? 14.0 : min(_3136, 14.0)));
        uvec4 _3144 = texelFetch(g_lightClusterGridBuffer, int(((_3139 << 2u) + (_3125 << 6u)) >> 2u));
        uint _3145 = _3144.x;
        uint _3146 = _3113.z;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        if (((((1u << ((_3146 >> 4u) & 15u)) + 4294967295u) & _3145) == 0u) || ((_3146 & 240u) == 0u))
        {
            _3225 = 0.0;
            _3227 = 0.0;
            _3229 = 0.0;
            _3231 = 0.0;
            _3233 = 0.0;
            _3235 = 0.0;
        }
        else
        {
            float _3226;
            float _3228;
            float _3230;
            float _3232;
            float _3234;
            float _3236;
            float _3378 = 0.0;
            float _3379 = 0.0;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            float _3383 = 0.0;
            uint _3384 = 0u;
            uint _3393;
            bool _3394;
            for (;;)
            {
                _3393 = texelFetch(g_lightClassification, int((((_3139 << 5u) + (_3125 << 9u)) + (_3384 << 2u)) >> 2u)).x;
                _3394 = _3393 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3394)
                {
                    frontier_phi_71_pred = _3383;
                    frontier_phi_71_pred_1 = _3382;
                    frontier_phi_71_pred_2 = _3381;
                    frontier_phi_71_pred_3 = _3380;
                    frontier_phi_71_pred_4 = _3379;
                    frontier_phi_71_pred_5 = _3378;
                }
                else
                {
                    float _3523;
                    float _3524;
                    float _3525;
                    float _3526;
                    float _3527;
                    float _3528;
                    uint _3529;
                    _3523 = _3378;
                    _3524 = _3379;
                    _3525 = _3380;
                    _3526 = _3381;
                    _3527 = _3382;
                    _3528 = _3383;
                    _3529 = _3393;
                    float _3450;
                    float _3451;
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    for (;;)
                    {
                        uint _3533 = uint(findLSB(_3529)) + (_3384 << 5u);
                        uint _3530 = (_3529 + 4294967295u) & _3529;
                        uint _3535 = _3533 * 48u;
                        vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3535)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3535 + 3u)).x));
                        uint _3555 = (_3533 * 48u) + 4u;
                        vec4 _3568 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3555)).x, texelFetch(g_PointLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3555 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3555 + 3u)).x));
                        uint _3574 = (_3533 * 48u) + 8u;
                        vec3 _3585 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3574)).x, texelFetch(g_PointLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3574 + 2u)).x));
                        float _3589 = _3549.x - _2204;
                        float _3590 = _3549.y - _2205;
                        float _3591 = _3549.z - _2206;
                        float _3592 = dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591));
                        float _3595 = inversesqrt(_3592);
                        float _3596 = _3595 * _3589;
                        float _3597 = _3595 * _3590;
                        float _3598 = _3595 * _3591;
                        float _3599 = dot(vec3(_1042, _1045, _1048), vec3(_3596, _3597, _3598));
                        float _3604 = 1.0 - (_3592 * _3549.w);
                        float _5044 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3605 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                        float _3606 = sqrt(_3592) * _3568.w;
                        float _3609 = 1.39999997615814208984375 / (_3606 + 1.39999997615814208984375);
                        float _3610 = _3609 * _3609;
                        float _3613 = ((1.0 - _3610) * _3599) + _3610;
                        float _3616 = _3606 * _3606;
                        float _3620 = ((isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0))) * _3605) / ((_3616 * 0.699999988079071044921875) + 1.0);
                        float _3624 = (-0.0) - _2204;
                        float _3625 = (-0.0) - _2205;
                        float _3626 = (-0.0) - _2206;
                        float _3630 = inversesqrt(dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626)));
                        float _3631 = _3630 * _3624;
                        float _3632 = _3630 * _3625;
                        float _3633 = _3630 * _3626;
                        float _3640 = exp2(log2(1.0 / ((_3616 * 3.5) + 5.0)) * 0.25);
                        float _3641 = 1.0 - _1117;
                        float _3648 = sqrt(1.0 - ((1.0 - (_3641 * _3641)) * (1.0 - (_3640 * _3640))));
                        float _3649 = _3648 * _3648;
                        float _3650 = _3649 * _3649;
                        float _3651 = _3631 + _3596;
                        float _3652 = _3632 + _3597;
                        float _3653 = _3633 + _3598;
                        float _3657 = inversesqrt(dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653)));
                        float _3661 = dot(vec3(_1042, _1045, _1048), vec3(_3631, _3632, _3633));
                        float _5060 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                        float _3664 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                        float _3665 = dot(vec3(_1042, _1045, _1048), vec3(_3657 * _3651, _3657 * _3652, _3657 * _3653));
                        float _5071 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                        float _3668 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                        float _3672 = ((_3668 * _3668) * (_3650 + (-1.0))) + 1.0;
                        float _3673 = _3609 * _3649;
                        float _3674 = _3673 * _3673;
                        float _3677 = ((1.0 - _3674) * _3599) + _3674;
                        float _5082 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                        float _3678 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                        float _3679 = 1.0 - _3649;
                        float _3689 = (0.5 / (((_3678 * ((_3664 * _3679) + _3649)) + 9.9999999392252902907785028219223e-09) + (((_3678 * _3679) + _3649) * _3664))) * _3678;
                        float _5093 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                        float _3700 = (((_3650 * 3.1415927410125732421875) * (isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0)))) / ((_3672 * _3672) * ((_3616 * 2.1991131305694580078125) + 3.141590118408203125))) * _3605;
                        _3453 = (_3620 * _3568.x) + _3526;
                        _3454 = (_3620 * _3568.y) + _3527;
                        _3455 = (_3620 * _3568.z) + _3528;
                        _3450 = (_3700 * _3585.x) + _3523;
                        _3451 = (_3700 * _3585.y) + _3524;
                        _3452 = (_3700 * _3585.z) + _3525;
                        if (_3530 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3523 = _3450;
                            _3524 = _3451;
                            _3525 = _3452;
                            _3526 = _3453;
                            _3527 = _3454;
                            _3528 = _3455;
                            _3529 = _3530;
                        }
                    }
                    frontier_phi_71_pred = _3455;
                    frontier_phi_71_pred_1 = _3454;
                    frontier_phi_71_pred_2 = _3453;
                    frontier_phi_71_pred_3 = _3452;
                    frontier_phi_71_pred_4 = _3451;
                    frontier_phi_71_pred_5 = _3450;
                }
                _3236 = frontier_phi_71_pred;
                _3234 = frontier_phi_71_pred_1;
                _3232 = frontier_phi_71_pred_2;
                _3230 = frontier_phi_71_pred_3;
                _3228 = frontier_phi_71_pred_4;
                _3226 = frontier_phi_71_pred_5;
                uint _3385 = _3384 + 1u;
                if (_3385 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3378 = _3226;
                    _3379 = _3228;
                    _3380 = _3230;
                    _3381 = _3232;
                    _3382 = _3234;
                    _3383 = _3236;
                    _3384 = _3385;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3225 = _3226;
            _3227 = _3228;
            _3229 = _3230;
            _3231 = _3232;
            _3233 = _3234;
            _3235 = _3236;
        }
        uvec4 _3239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3240 = _3239.z;
        uint _3242 = (_3240 >> 8u) & 15u;
        float _3346;
        float _3348;
        float _3350;
        float _3352;
        float _3354;
        float _3356;
        if (((4294967295u << _3242) & _3145) == 0u)
        {
            _3346 = _3225;
            _3348 = _3227;
            _3350 = _3229;
            _3352 = _3231;
            _3354 = _3233;
            _3356 = _3235;
        }
        else
        {
            float _3371 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
            float _3372 = _3371 * _2204;
            float _3373 = _3371 * _2205;
            float _3374 = _3371 * _2206;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3242 < ((_3240 >> 12u) & 15u))
            {
                float _3347;
                float _3349;
                float _3351;
                float _3353;
                float _3355;
                float _3357;
                float _3506 = _3225;
                float _3507 = _3227;
                float _3508 = _3229;
                float _3509 = _3231;
                float _3510 = _3233;
                float _3511 = _3235;
                uint _3512 = _3242;
                uint _3521;
                bool _3522;
                for (;;)
                {
                    _3521 = texelFetch(g_lightClassification, int((((_3139 << 5u) + (_3125 << 9u)) + (_3512 << 2u)) >> 2u)).x;
                    _3522 = _3521 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3522)
                    {
                        frontier_phi_82_pred = _3511;
                        frontier_phi_82_pred_1 = _3510;
                        frontier_phi_82_pred_2 = _3509;
                        frontier_phi_82_pred_3 = _3508;
                        frontier_phi_82_pred_4 = _3507;
                        frontier_phi_82_pred_5 = _3506;
                    }
                    else
                    {
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _4007;
                        float _4008;
                        float _4009;
                        float _4010;
                        float _4011;
                        float _4012;
                        float _3727 = _3506;
                        float _3728 = _3507;
                        float _3729 = _3508;
                        float _3730 = _3509;
                        float _3731 = _3510;
                        float _3732 = _3511;
                        uint _3733 = _3521;
                        uint _3734;
                        vec4 _3759;
                        float _3760;
                        vec4 _3775;
                        vec3 _3787;
                        vec4 _3802;
                        vec4 _3817;
                        float _3863;
                        bool _3864;
                        for (;;)
                        {
                            uint _3744 = ((_3512 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3733));
                            _3734 = (_3733 + 4294967295u) & _3733;
                            uint _3746 = _3744 * 40u;
                            _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            _3760 = _3759.w;
                            uint _3762 = (_3744 * 40u) + 4u;
                            _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            uint _3777 = (_3744 * 40u) + 8u;
                            _3787 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x));
                            uint _3789 = (_3744 * 40u) + 16u;
                            _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            uint _3804 = (_3744 * 40u) + 20u;
                            _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            uint _3819 = (_3744 * 40u) + 24u;
                            vec4 _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            uint _3838 = (_3744 * 40u) + 28u;
                            vec4 _3851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 3u)).x));
                            _3863 = fma(_2206, _3851.z, fma(_2205, _3851.y, _3851.x * _2204)) + _3851.w;
                            _3864 = !((fma(_2206, _3832.z, fma(_2205, _3832.y, _3832.x * _2204)) + _3832.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3864)
                            {
                                float _3891 = _3759.x - _2204;
                                float _3892 = _3759.y - _2205;
                                float _3893 = _3759.z - _2206;
                                float _3894 = dot(vec3(_3891, _3892, _3893), vec3(_3891, _3892, _3893));
                                float _3897 = inversesqrt(_3894);
                                float _3898 = _3897 * _3891;
                                float _3899 = _3897 * _3892;
                                float _3900 = _3897 * _3893;
                                float _3904 = 1.0 - (_3894 / (_3760 * _3760));
                                float _5104 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3905 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                                float _3909 = sqrt(_3894) * _3775.w;
                                float _3911 = 1.39999997615814208984375 / (_3909 + 1.39999997615814208984375);
                                float _3912 = _3911 * _3911;
                                float _3915 = ((1.0 - _3912) * dot(vec3(_3898, _3899, _3900), vec3(_1042, _1045, _1048))) + _3912;
                                float _3918 = _3909 * _3909;
                                float _3922 = (fma(_2206, _3802.z, fma(_2205, _3802.y, _3802.x * _2204)) + _3802.w) / _3863;
                                float _3923 = (fma(_2206, _3817.z, fma(_2205, _3817.y, _3817.x * _2204)) + _3817.w) / _3863;
                                float _3927 = 1.0 - dot(vec2(_3922, _3923), vec2(_3922, _3923));
                                float _5120 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3928 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                                float _3929 = _3928 * (((isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0))) * _3905) / ((_3918 * 0.699999988079071044921875) + 1.0));
                                float _3941 = exp2(log2(1.0 / ((_3918 * 3.5) + 5.0)) * 0.25);
                                float _3942 = 1.0 - _1117;
                                float _3949 = sqrt(1.0 - ((1.0 - (_3942 * _3942)) * (1.0 - (_3941 * _3941))));
                                float _3950 = _3949 * _3949;
                                float _3951 = _3950 * _3950;
                                float _3952 = _3898 - _3372;
                                float _3953 = _3899 - _3373;
                                float _3954 = _3900 - _3374;
                                float _3958 = inversesqrt(dot(vec3(_3952, _3953, _3954), vec3(_3952, _3953, _3954)));
                                float _3962 = dot(vec3(_1042, _1045, _1048), vec3((-0.0) - _3372, (-0.0) - _3373, (-0.0) - _3374));
                                float _5131 = isnan(0.0) ? _3962 : (isnan(_3962) ? 0.0 : max(_3962, 0.0));
                                float _3965 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                                float _3966 = dot(vec3(_1042, _1045, _1048), vec3(_3958 * _3952, _3958 * _3953, _3958 * _3954));
                                float _5142 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3969 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                                float _3973 = ((_3969 * _3969) * (_3951 + (-1.0))) + 1.0;
                                float _3974 = _3911 * _3950;
                                float _3975 = _3974 * _3974;
                                float _3981 = ((1.0 - _3975) * dot(vec3(_1042, _1045, _1048), vec3(_3898, _3899, _3900))) + _3975;
                                float _5153 = isnan(0.0) ? _3981 : (isnan(_3981) ? 0.0 : max(_3981, 0.0));
                                float _3982 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
                                float _3983 = 1.0 - _3950;
                                float _3993 = (0.5 / (((_3982 * ((_3965 * _3983) + _3950)) + 9.9999999392252902907785028219223e-09) + (((_3982 * _3983) + _3950) * _3965))) * _3982;
                                float _5164 = isnan(0.0) ? _3993 : (isnan(_3993) ? 0.0 : max(_3993, 0.0));
                                float _4003 = (_3928 * _3905) * (((_3951 * 3.1415927410125732421875) * (isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0)))) / ((_3973 * _3973) * ((_3918 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3929 * _3775.z;
                                frontier_phi_88_pred_1 = _3929 * _3775.y;
                                frontier_phi_88_pred_2 = _3929 * _3775.x;
                                frontier_phi_88_pred_3 = _4003 * _3787.z;
                                frontier_phi_88_pred_4 = _4003 * _3787.y;
                                frontier_phi_88_pred_5 = _4003 * _3787.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4012 = frontier_phi_88_pred;
                            _4011 = frontier_phi_88_pred_1;
                            _4010 = frontier_phi_88_pred_2;
                            _4009 = frontier_phi_88_pred_3;
                            _4008 = frontier_phi_88_pred_4;
                            _4007 = frontier_phi_88_pred_5;
                            _3717 = _4010 + _3730;
                            _3718 = _4011 + _3731;
                            _3719 = _4012 + _3732;
                            _3714 = _4007 + _3727;
                            _3715 = _4008 + _3728;
                            _3716 = _4009 + _3729;
                            if (_3734 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3727 = _3714;
                                _3728 = _3715;
                                _3729 = _3716;
                                _3730 = _3717;
                                _3731 = _3718;
                                _3732 = _3719;
                                _3733 = _3734;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3719;
                        frontier_phi_82_pred_1 = _3718;
                        frontier_phi_82_pred_2 = _3717;
                        frontier_phi_82_pred_3 = _3716;
                        frontier_phi_82_pred_4 = _3715;
                        frontier_phi_82_pred_5 = _3714;
                    }
                    _3357 = frontier_phi_82_pred;
                    _3355 = frontier_phi_82_pred_1;
                    _3353 = frontier_phi_82_pred_2;
                    _3351 = frontier_phi_82_pred_3;
                    _3349 = frontier_phi_82_pred_4;
                    _3347 = frontier_phi_82_pred_5;
                    uint _3513 = _3512 + 1u;
                    if (_3513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3506 = _3347;
                        _3507 = _3349;
                        _3508 = _3351;
                        _3509 = _3353;
                        _3510 = _3355;
                        _3511 = _3357;
                        _3512 = _3513;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3353;
                frontier_phi_63_64_ladder_1 = _3357;
                frontier_phi_63_64_ladder_2 = _3355;
                frontier_phi_63_64_ladder_3 = _3351;
                frontier_phi_63_64_ladder_4 = _3349;
                frontier_phi_63_64_ladder_5 = _3347;
            }
            else
            {
                frontier_phi_63_64_ladder = _3231;
                frontier_phi_63_64_ladder_1 = _3235;
                frontier_phi_63_64_ladder_2 = _3233;
                frontier_phi_63_64_ladder_3 = _3229;
                frontier_phi_63_64_ladder_4 = _3227;
                frontier_phi_63_64_ladder_5 = _3225;
            }
            _3346 = frontier_phi_63_64_ladder_5;
            _3348 = frontier_phi_63_64_ladder_4;
            _3350 = frontier_phi_63_64_ladder_3;
            _3352 = frontier_phi_63_64_ladder;
            _3354 = frontier_phi_63_64_ladder_2;
            _3356 = frontier_phi_63_64_ladder_1;
        }
        float _3361 = isnan(1.0) ? _1101 : (isnan(_1101) ? 1.0 : min(_1101, 1.0));
        _3158 = (_3361 * _3352) + _2670;
        _3160 = (_3361 * _3354) + _2672;
        _3162 = (_3361 * _3356) + _2674;
        _3164 = ((_3346 * _1085) * _3361) + _3008;
        _3166 = ((_3348 * _1087) * _3361) + _3010;
        _3168 = ((_3350 * _1088) * _3361) + _3012;
    }
    else
    {
        _3158 = _2670;
        _3160 = _2672;
        _3162 = _2674;
        _3164 = _3008;
        _3166 = _3010;
        _3168 = _3012;
    }
    float _5180 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _5191 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _5202 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _3185 = ((isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0))) * (_3158 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1101))) + ((_3164 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1938)) * cbPerFrame._m0[3u].x);
    float _3186 = ((isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0))) * (_3160 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1101))) + ((_3166 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1938)) * cbPerFrame._m0[3u].x);
    float _3187 = ((isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0))) * (_3162 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1101))) + ((_3168 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1938)) * cbPerFrame._m0[3u].x);
    uint _3188 = _262 + 6u;
    float _3196 = _1023 / cbSceneParam._m0[86u].x;
    float _3197 = _1024 / cbSceneParam._m0[86u].y;
    vec4 _3211 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3196, _3197, (log2((isnan(cbSceneParam._m0[77u].w) ? _946 : (isnan(_946) ? cbSceneParam._m0[77u].w : min(_946, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3213 = _3211.x;
    float _3214 = _3211.y;
    float _3215 = _3211.z;
    float _3216 = _3211.w;
    float _3288;
    float _3290;
    float _3292;
    float _3294;
    if (_946 > cbSceneParam._m0[78u].w)
    {
        float _3250 = isnan(_946) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _946 : min(cbSceneParam._m0[80u].w, _946));
        float _3251 = _3250 / _946;
        float _3262 = _3251 * _996;
        float _3263 = _997 * _3251;
        float _3264 = (-0.0) - _3263;
        float _3266 = _3251 * _998;
        float _3268 = (cbSceneParam._m0[77u].w * _3264) / _3250;
        float _3269 = _3268 + cbSceneParam._m0[79u].w;
        float _3270 = cbSceneParam._m0[79u].w - _3263;
        float _3276 = sqrt(((_3262 * _3262) + (_3263 * _3263)) + (_3266 * _3266));
        float _3279 = (1.0 - (cbSceneParam._m0[77u].w / _3250)) * _3276;
        float _3284 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3286 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3463;
        if (abs((_3264 - _3268) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3463 = ((((_3269 > 0.0) ? exp2(_3284 * _3269) : (2.0 - exp2(_3286 * _3269))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3279;
        }
        else
        {
            float _3407 = 1.0 / cbSceneParam._m0[80u].x;
            float _3408 = isnan(_3270) ? _3269 : (isnan(_3269) ? _3270 : max(_3269, _3270));
            float _3409 = isnan(_3270) ? _3269 : (isnan(_3269) ? _3270 : min(_3269, _3270));
            float _3418 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : min(_3408, 0.0));
            float _3419 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : min(_3409, 0.0));
            _3463 = ((abs(_3276 / _3264) * cbSceneParam._m0[80u].y) * ((((_3418 - _3419) * 2.0) - ((exp2(_3284 * (isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0)))) - exp2(_3284 * (isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))))) * _3407)) - ((exp2(_3286 * _3418) - exp2(_3286 * _3419)) * _3407))) + (_3279 * cbSceneParam._m0[80u].z);
        }
        vec4 _3465 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3196, _3197, 1.0), 0.0);
        float _3474 = exp2((_3463 * (-1.44269502162933349609375)) * (1.0 - _3465.w));
        float _3475 = log2(_3474);
        float _3491 = log2(_3216);
        _3288 = (exp2(_3491 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3475 * cbSceneParam._m0[78u].x)) * _3465.x) / cbSceneParam._m0[78u].x)) + _3213;
        _3290 = (exp2(_3491 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3475 * cbSceneParam._m0[78u].y)) * _3465.y) / cbSceneParam._m0[78u].y)) + _3214;
        _3292 = (exp2(_3491 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3475 * cbSceneParam._m0[78u].z)) * _3465.z) / cbSceneParam._m0[78u].z)) + _3215;
        _3294 = _3474 * _3216;
    }
    else
    {
        _3288 = _3213;
        _3290 = _3214;
        _3292 = _3215;
        _3294 = _3216;
    }
    bool _3501;
    vec4 _3304;
    vec4 _3326;
    float _3328;
    float _3332;
    float _3333;
    float _3334;
    float _3335;
    bool _3345;
    for (;;)
    {
        _3304 = cbMatDynParam._m0[0u];
        float _3306 = roundEven(_3304.y);
        bool _3307 = _3306 == 3.0;
        float _3308 = log2(_3294);
        float _3315 = exp2(_3308 * cbSceneParam._m0[78u].x) * _3185;
        float _3316 = exp2(_3308 * cbSceneParam._m0[78u].y) * _3186;
        float _3317 = exp2(_3308 * cbSceneParam._m0[78u].z) * _3187;
        float _3324 = _1012 + (-0.5);
        _3326 = cbMtdParam._m0[1u];
        _3328 = _3326.y * _3324;
        float _3331 = (_3306 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3332 = _3331 * (_3307 ? _3315 : (_3315 + (cbSceneParam._m0[72u].w * _3288)));
        _3333 = _3331 * (_3307 ? _3316 : (_3316 + (cbSceneParam._m0[72u].w * _3290)));
        _3334 = _3331 * (_3307 ? _3317 : (_3317 + (cbSceneParam._m0[72u].w * _3292)));
        _3335 = _3324 * 0.999000012874603271484375;
        _3345 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3345)
        {
            if ((cbInstanceData._m0[_262 + 7u].x + _3335) < 0.5)
            {
                _3501 = true;
                break;
            }
        }
        uint _3442 = _1061 + uint(_3304.w);
        if ((cbInstanceData._m0[_3442].w < 1.0) && ((cbInstanceData._m0[_3442].w + _3335) < 0.5))
        {
            _3501 = true;
            break;
        }
        if ((_3328 + 1.0) < _3326.x)
        {
            _3501 = true;
            break;
        }
        _3501 = false;
        break;
    }
    float _3705;
    if (_3501)
    {
        discard_state = true;
        _3705 = 0.0;
    }
    else
    {
        _3705 = cbInstanceData._m0[_3188].w;
    }
    SV_Target.x = _3332;
    SV_Target.y = _3333;
    SV_Target.z = _3334;
    SV_Target.w = _3705;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3188].w;
    discard_exit();
}


