#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1610;
float _3987;
float _3988;
float _3989;
float _3990;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3999 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4010 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4021 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _350 = _345.x * cbMtdParam._m0[11u].x;
    float _351 = _345.y * cbMtdParam._m0[11u].y;
    float _352 = _345.z * cbMtdParam._m0[11u].z;
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _390.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4032 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _464 = (_457 * ((_371.x * cbMtdParam._m0[12u].x) - _350)) + _350;
    float _465 = (_457 * ((_371.y * cbMtdParam._m0[12u].y) - _351)) + _351;
    float _466 = (_457 * ((_371.z * cbMtdParam._m0[12u].z) - _352)) + _352;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _390.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4043 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _577 = _575.x;
    float _587 = dot(vec4(_577, _575.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _599 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _390.z) * 2.0) - ((((_577 - _587) * cbMtdParam._m0[23u].w) + _587) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4054 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _607 = (_600 * ((_558.x * cbMtdParam._m0[14u].x) - _537)) + _537;
    float _608 = (_600 * ((_558.y * cbMtdParam._m0[14u].y) - _538)) + _538;
    float _609 = (_600 * ((_558.z * cbMtdParam._m0[14u].z) - _539)) + _539;
    float _613 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _607;
    float _616 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _608;
    float _619 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _609;
    float _626 = ((_607 - _613) * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) + _613;
    float _627 = ((_608 - _616) * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) + _616;
    float _628 = ((_609 - _619) * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) + _619;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _307) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _308) + cbTextureTilingScale._m0[14u].w));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _709 = _707.x;
    float _710 = _707.y;
    float _711 = _707.z;
    float _718 = ((_690.x - _709) * _457) + _709;
    float _719 = ((_690.y - _710) * _457) + _710;
    float _720 = ((_690.z - _711) * _457) + _711;
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _743 = ((_732.x - _718) * _530) + _718;
    float _744 = ((_732.y - _719) * _530) + _719;
    float _745 = ((_732.z - _720) * _530) + _720;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _770 = ((_757.z - _745) * _600) + _745;
    float _773 = ((((_757.x - _743) * _600) + _743) * 2.0) + (-1.0);
    float _774 = ((((_757.y - _744) * _600) + _744) * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _4065 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _780 = sqrt(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))));
    vec4 _798 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _810 = (_773 + ((((_665.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_798.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _811 = (_774 + ((((_665.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_798.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _814 = fma(_780, _255, fma(_811, _262, _810 * _248));
    float _817 = fma(_780, _256, fma(_811, _263, _810 * _249));
    float _820 = fma(_780, _257, fma(_811, _264, _810 * _250));
    float _824 = inversesqrt(dot(vec3(_814, _817, _820), vec3(_814, _817, _820)));
    vec4 _851 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _853 = _851.x;
    float _854 = 1.0 - _853;
    float _862 = (cbMtdParam._m0[19u].x + dot(vec4(_824 * _814, _824 * _817, _824 * _820, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_853 - _854) * cbMtdParam._m0[24u].z) + _854) * cbMtdParam._m0[21u].z);
    float _4076 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _863 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _870 = (_863 * ((_646.x * cbMtdParam._m0[18u].x) - _626)) + _626;
    float _871 = (_863 * ((_646.y * cbMtdParam._m0[18u].y) - _627)) + _627;
    float _872 = (_863 * ((_646.z * cbMtdParam._m0[18u].z) - _628)) + _628;
    vec4 _898 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _900 = _898.x;
    float _918 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _900) * _457) + _900;
    float _935 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _918) * _530) + _918;
    float _953 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _935) * _600) + _935;
    float _957 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _953) * cbMtdParam._m0[19u].z) + _953;
    float _959 = _957 - (_957 * _863);
    float _964 = (((_665.z - _770) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _770;
    float _968 = ((_798.z - _964) * cbMtdParam._m0[19u].w) + _964;
    vec4 _981 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _988 = (_981.x * 2.0) + (-1.0);
    float _989 = (_981.y * 2.0) + (-1.0);
    float _990 = dot(vec2(_988, _989), vec2(_988, _989));
    float _4087 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _998 = ((_981.z - _968) * _863) + _968;
    float _1008 = ((sqrt(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) - _780) * _863) + _780;
    float _1011 = (((_988 - _810) * _863) + _810) + (cbMtdParam._m0[21u].x * _810);
    float _1012 = (((_989 - _811) * _863) + _811) + (cbMtdParam._m0[21u].x * _811);
    float _1016 = cbMtdParam._m0[22u].x + _798.w;
    float _1019 = fma(_1008, _255, fma(_1012, _262, _1011 * _248));
    float _1022 = fma(_1008, _256, fma(_1012, _263, _1011 * _249));
    float _1025 = fma(_1008, _257, fma(_1012, _264, _1011 * _250));
    float _1029 = inversesqrt(dot(vec3(_1019, _1022, _1025), vec3(_1019, _1022, _1025)));
    float _1030 = _1029 * _1019;
    float _1031 = _1029 * _1022;
    float _1032 = _1029 * _1025;
    float _4098 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1033 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _4120 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4131 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4142 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4153 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _1038 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _1052 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1102 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1092);
    float _1103 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1092);
    float _1104 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1092);
    float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
    float _1109 = _1102 * _1108;
    float _1110 = _1103 * _1108;
    float _1111 = _1104 * _1108;
    vec4 _1116 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1118 = _1116.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1290 = sqrt(((_1102 * _1102) + (_1103 * _1103)) + (_1104 * _1104));
        float _1296 = (cbMatDynParam._m0[5u].x * _1290) + cbMatDynParam._m0[5u].y;
        float _4164 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1301 = (cbMatDynParam._m0[5u].z * _1290) + cbMatDynParam._m0[5u].w;
        float _4175 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) - _1297)) + _1297) < ((_1118 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1129 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1130 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1148 = fma(_1032, cbSceneParam._m0[5u].z, fma(_1031, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1030));
    float _1151 = fma(_1032, cbSceneParam._m0[6u].z, fma(_1031, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1030));
    float _1154 = fma(_1032, cbSceneParam._m0[7u].z, fma(_1031, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1030));
    uint _1167 = _288 + 9u;
    uint _1168 = _1167 + uint(cbMatDynParam._m0[0u].w);
    float _1174 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * cbInstanceData._m0[_1168].x;
    float _1175 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * cbInstanceData._m0[_1168].y;
    float _1176 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * cbInstanceData._m0[_1168].z;
    float _4186 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1179 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _1180 = 1.0 - _1038;
    float _1181 = _1177 * _1180;
    float _1182 = _1178 * _1180;
    float _1183 = _1179 * _1180;
    float _1188 = (_1177 + (-0.039999999105930328369140625)) * _1038;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1038;
    float _1190 = (_1179 + (-0.039999999105930328369140625)) * _1038;
    float _1191 = _1188 + 0.039999999105930328369140625;
    float _1193 = _1189 + 0.039999999105930328369140625;
    float _1194 = _1190 + 0.039999999105930328369140625;
    vec4 _1203 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1129, cbSceneParam._m0[86u].y * _1130));
    float _1207 = ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * TEXCOORD_5.w) * _1203.x;
    float _1208 = dot(vec3(_1030, _1031, _1032), vec3(_1109, _1110, _1111));
    float _1211 = _1208 * 2.0;
    float _1215 = (_1211 * _1030) - _1109;
    float _1216 = (_1211 * _1031) - _1110;
    float _1217 = (_1211 * _1032) - _1111;
    float _1221 = abs(dot(vec3(_1109, _1110, _1111), vec3(_1030, _1031, _1032)));
    float _4219 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _1223 = sqrt(_1033);
    float _1236 = exp2((_1223 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1223 * 3.0));
    float _1242 = (1.0 - _1236) * ((_1223 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1243 = _1236 * _1223;
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1279 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1609;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1334 = fma(_1279, cbModelParam._m0[26u].z, fma(_1275, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1271));
        float _1338 = fma(_1279, cbModelParam._m0[27u].z, fma(_1275, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1271));
        float _1342 = fma(_1279, cbModelParam._m0[28u].z, fma(_1275, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1271));
        float _1367 = _1271 + _1030;
        float _1368 = _1275 + _1031;
        float _1369 = _1279 + _1032;
        float _1379 = fma(_1369, cbModelParam._m0[26u].z, fma(_1368, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1367)) - _1334;
        float _1380 = fma(_1369, cbModelParam._m0[27u].z, fma(_1368, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1367)) - _1338;
        float _1381 = fma(_1369, cbModelParam._m0[28u].z, fma(_1368, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1367)) - _1342;
        float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
        float _1398 = ((_1385 * _1379) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1334 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1385 * _1380) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1338 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1385 * _1381) / cbModelParam._m0[34u].z) + ((((((_1342 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        float _1437 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1403.x + (-0.5));
        float _1439 = _1437 * (_1403.y + (-0.5));
        float _1440 = _1437 * (_1403.z + (-0.5));
        float _1447 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1410.x + (-0.5));
        float _1449 = _1447 * (_1410.y + (-0.5));
        float _1450 = _1447 * (_1410.z + (-0.5));
        float _1457 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1417.x + (-0.5));
        float _1459 = _1457 * (_1417.y + (-0.5));
        float _1460 = _1457 * (_1417.z + (-0.5));
        float _1467 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1424.x + (-0.5));
        float _1469 = _1467 * (_1424.y + (-0.5));
        float _1470 = _1467 * (_1424.z + (-0.5));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = _1438 * 0.5;
        float _1475 = _1448 * 0.5;
        float _1476 = _1458 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1491 = (dot(vec3(_1030, _1031, _1032), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1501 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4267 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1503 + 1.0))) + _1508) * _1471;
        float _1518 = _1439 * 0.5;
        float _1519 = _1449 * 0.5;
        float _1520 = _1459 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_1030, _1031, _1032), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4300 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1545 + 1.0))) + _1550) * _1472;
        float _1560 = _1440 * 0.5;
        float _1561 = _1450 * 0.5;
        float _1562 = _1460 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_1030, _1031, _1032), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4333 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1587 + 1.0))) + _1592) * _1473;
        _1609 = _1440;
        _1611 = _1439;
        _1612 = _1438;
        _1613 = _1450;
        _1614 = _1449;
        _1615 = _1448;
        _1616 = _1460;
        _1617 = _1459;
        _1618 = _1458;
        _1619 = _1473;
        _1620 = _1472;
        _1621 = _1471;
        _1622 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1623 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
        _1624 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
    }
    else
    {
        _1609 = _1610;
        _1611 = _1610;
        _1612 = _1610;
        _1613 = _1610;
        _1614 = _1610;
        _1615 = _1610;
        _1616 = _1610;
        _1617 = _1610;
        _1618 = _1610;
        _1619 = _1610;
        _1620 = _1610;
        _1621 = _1610;
        _1622 = 0.0;
        _1623 = 0.0;
        _1624 = 0.0;
    }
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1650 = fma(_1279, cbModelParam._m0[30u].z, fma(_1275, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271));
        float _1654 = fma(_1279, cbModelParam._m0[31u].z, fma(_1275, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271));
        float _1658 = fma(_1279, cbModelParam._m0[32u].z, fma(_1275, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271));
        float _1681 = _1271 + _1030;
        float _1682 = _1275 + _1031;
        float _1683 = _1279 + _1032;
        float _1693 = fma(_1683, cbModelParam._m0[30u].z, fma(_1682, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1681)) - _1650;
        float _1694 = fma(_1683, cbModelParam._m0[31u].z, fma(_1682, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1681)) - _1654;
        float _1695 = fma(_1683, cbModelParam._m0[32u].z, fma(_1682, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1681)) - _1658;
        float _1699 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
        float _1712 = ((_1699 * _1693) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1650 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1713 = ((_1699 * _1694) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1654 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1714 = ((_1699 * _1695) / cbModelParam._m0[35u].z) + ((((((_1658 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1716 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1712, _1713, _1714), 0.0);
        vec4 _1723 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1712, _1713, _1714), 0.0);
        vec4 _1730 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1712, _1713, _1714), 0.0);
        vec4 _1737 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1712, _1713, _1714), 0.0);
        float _1749 = exp2((_1716.w + (-0.5)) * 20.0) * 2.0;
        float _1750 = _1749 * (_1716.x + (-0.5));
        float _1751 = _1749 * (_1716.y + (-0.5));
        float _1752 = _1749 * (_1716.z + (-0.5));
        float _1759 = exp2((_1723.w + (-0.5)) * 20.0) * 2.0;
        float _1760 = _1759 * (_1723.x + (-0.5));
        float _1761 = _1759 * (_1723.y + (-0.5));
        float _1762 = _1759 * (_1723.z + (-0.5));
        float _1769 = exp2((_1730.w + (-0.5)) * 20.0) * 2.0;
        float _1770 = _1769 * (_1730.x + (-0.5));
        float _1771 = _1769 * (_1730.y + (-0.5));
        float _1772 = _1769 * (_1730.z + (-0.5));
        float _1779 = exp2((_1737.w + (-0.5)) * 20.0) * 2.0;
        float _1780 = _1779 * (_1737.x + (-0.5));
        float _1781 = _1779 * (_1737.y + (-0.5));
        float _1782 = _1779 * (_1737.z + (-0.5));
        float _1783 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1784 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1785 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1786 = _1750 * 0.5;
        float _1787 = _1760 * 0.5;
        float _1788 = _1770 * 0.5;
        float _1789 = dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788));
        float _1794 = (_1789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1789);
        float _1802 = (dot(vec3(_1030, _1031, _1032), vec3(_1794 * _1786, _1794 * _1787, _1794 * _1788)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1811 = sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788)) / (_1783 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1813 = _1812 * 2.0;
        float _1817 = (1.0 - _1812) / (_1812 + 1.0);
        float _4396 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1827 = ((((1.0 - _1818) * (_1813 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1813 + 1.0))) + _1818) * _1783;
        float _1828 = _1751 * 0.5;
        float _1829 = _1761 * 0.5;
        float _1830 = _1771 * 0.5;
        float _1831 = dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830));
        float _1836 = (_1831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1831);
        float _1844 = (dot(vec3(_1030, _1031, _1032), vec3(_1836 * _1828, _1836 * _1829, _1836 * _1830)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1853 = sqrt(((_1829 * _1829) + (_1828 * _1828)) + (_1830 * _1830)) / (_1784 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1855 = _1854 * 2.0;
        float _1859 = (1.0 - _1854) / (_1854 + 1.0);
        float _4429 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1869 = ((((1.0 - _1860) * (_1855 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1855 + 1.0))) + _1860) * _1784;
        float _1870 = _1752 * 0.5;
        float _1871 = _1762 * 0.5;
        float _1872 = _1772 * 0.5;
        float _1873 = dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872));
        float _1878 = (_1873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1873);
        float _1886 = (dot(vec3(_1030, _1031, _1032), vec3(_1878 * _1870, _1878 * _1871, _1878 * _1872)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1895 = sqrt(((_1871 * _1871) + (_1870 * _1870)) + (_1872 * _1872)) / (_1785 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1897 = _1896 * 2.0;
        float _1901 = (1.0 - _1896) / (_1896 + 1.0);
        float _4462 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1902 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1911 = ((((1.0 - _1902) * (_1897 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1897 + 1.0))) + _1902) * _1785;
        _1919 = _1752;
        _1920 = _1751;
        _1921 = _1750;
        _1922 = _1762;
        _1923 = _1761;
        _1924 = _1760;
        _1925 = _1772;
        _1926 = _1771;
        _1927 = _1770;
        _1928 = _1785;
        _1929 = _1784;
        _1930 = _1783;
        _1931 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)));
        _1932 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)));
        _1933 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)));
    }
    else
    {
        _1919 = _1610;
        _1920 = _1610;
        _1921 = _1610;
        _1922 = _1610;
        _1923 = _1610;
        _1924 = _1610;
        _1925 = _1610;
        _1926 = _1610;
        _1927 = _1610;
        _1928 = _1610;
        _1929 = _1610;
        _1930 = _1610;
        _1931 = 0.0;
        _1932 = 0.0;
        _1933 = 0.0;
    }
    float _1943 = (cbModelParam._m0[1u].x * (_1931 - _1622)) + _1622;
    float _1944 = (cbModelParam._m0[1u].x * (_1932 - _1623)) + _1623;
    float _1945 = (cbModelParam._m0[1u].x * (_1933 - _1624)) + _1624;
    float _1966 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1944, cbSceneParam._m0[89u].y, _1943 * cbSceneParam._m0[89u].x));
    float _1969 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1944, cbSceneParam._m0[90u].y, _1943 * cbSceneParam._m0[90u].x));
    float _1972 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1944, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1943));
    float _1987 = _1215 * 0.5;
    float _1988 = _1216 * 0.5;
    float _1989 = _1217 * 0.5;
    float _1990 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1921, _1924, _1927, _1930));
    float _1993 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1920, _1923, _1926, _1929));
    float _1996 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1919, _1922, _1925, _1928));
    float _2030;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2003 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1609, _1613, _1616, _1619));
        float _2007 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1611, _1614, _1617, _1620));
        float _2011 = dot(vec4(_1987, _1988, _1989, 1.0), vec4(_1612, _1615, _1618, _1621));
        float _2018 = dot(vec4(cbModelParam._m0[39u]), vec4(_1987, _1988, _1989, 1.0));
        _2030 = dot(vec3(isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)), isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)), isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2018) ? 0.0 : (isnan(0.0) ? _2018 : max(0.0, _2018))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2030 = 1.0;
    }
    float _2041;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2032 = dot(vec4(cbModelParam._m0[40u]), vec4(_1987, _1988, _1989, 1.0));
        _2041 = dot(vec3(isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)), isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0)), isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2032) ? 0.0 : (isnan(0.0) ? _2032 : max(0.0, _2032))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2041 = 1.0;
    }
    float _2045 = (_2041 * cbModelParam._m0[1u].x) + (_2030 * (1.0 - cbModelParam._m0[1u].x));
    float _2055 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1033);
    float _2056 = isnan(_2055) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2055 : min(cbModelParam._m0[25u].z, _2055));
    float _2136;
    float _2138;
    float _2140;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2103 = fma(_1279, cbModelParam._m0[13u].z, fma(_1275, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1271)) + cbModelParam._m0[13u].w;
        float _2107 = fma(_1279, cbModelParam._m0[14u].z, fma(_1275, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1271)) + cbModelParam._m0[14u].w;
        float _2111 = fma(_1279, cbModelParam._m0[15u].z, fma(_1275, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1271)) + cbModelParam._m0[15u].w;
        float _2114 = fma(_1217, cbModelParam._m0[13u].z, fma(_1216, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1215));
        float _2117 = fma(_1217, cbModelParam._m0[14u].z, fma(_1216, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1215));
        float _2120 = fma(_1217, cbModelParam._m0[15u].z, fma(_1216, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1215));
        float _2148;
        if (_2114 > 0.0)
        {
            _2148 = abs((1.0 - _2103) / _2114);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2103 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2148 = frontier_phi_17_15_ladder;
        }
        float _2350;
        if (_2117 > 0.0)
        {
            _2350 = abs((1.0 - _2107) / _2117);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2107 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2350 = frontier_phi_26_22_ladder;
        }
        float _2604;
        if (_2120 > 0.0)
        {
            _2604 = abs((1.0 - _2111) / _2120);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2111 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2604 = frontier_phi_38_33_ladder;
        }
        float _2606 = isnan(_2350) ? _2148 : (isnan(_2148) ? _2350 : min(_2148, _2350));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _2114) + _2103;
        float _2612 = (_2607 * _2117) + _2107;
        float _2613 = (_2607 * _2120) + _2111;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2614;
        float _2618 = _2614 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 > _2618) || ((_2612 < _2616) || ((_2611 < _2616) || (_2611 > _2618))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2613, cbModelParam._m0[9u].z, fma(_2612, cbModelParam._m0[9u].y, _2611 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2613, cbModelParam._m0[10u].z, fma(_2612, cbModelParam._m0[10u].y, _2611 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2613, cbModelParam._m0[11u].z, fma(_2612, cbModelParam._m0[11u].y, _2611 * cbModelParam._m0[11u].x))), _2056);
            frontier_phi_16_38_ladder = _2741.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2741.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2741.x * cbModelParam._m0[1u].y;
        }
        _2136 = frontier_phi_16_38_ladder_2;
        _2138 = frontier_phi_16_38_ladder_1;
        _2140 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2124 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1215, _1216, _1217), _2056);
        _2136 = _2124.x * cbModelParam._m0[1u].y;
        _2138 = _2124.y * cbModelParam._m0[1u].y;
        _2140 = _2124.z * cbModelParam._m0[1u].y;
    }
    float _2144 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1033);
    float _2145 = isnan(_2144) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2144 : min(cbModelParam._m0[25u].w, _2144));
    float _2234;
    float _2236;
    float _2238;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2198 = fma(_1279, cbModelParam._m0[21u].z, fma(_1275, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1271)) + cbModelParam._m0[21u].w;
        float _2202 = fma(_1279, cbModelParam._m0[22u].z, fma(_1275, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1271)) + cbModelParam._m0[22u].w;
        float _2206 = fma(_1279, cbModelParam._m0[23u].z, fma(_1275, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1271)) + cbModelParam._m0[23u].w;
        float _2209 = fma(_1217, cbModelParam._m0[21u].z, fma(_1216, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1215));
        float _2212 = fma(_1217, cbModelParam._m0[22u].z, fma(_1216, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1215));
        float _2215 = fma(_1217, cbModelParam._m0[23u].z, fma(_1216, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1215));
        float _2355;
        if (_2209 > 0.0)
        {
            _2355 = abs((1.0 - _2198) / _2209);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2198 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2355 = frontier_phi_28_24_ladder;
        }
        float _2631;
        if (_2212 > 0.0)
        {
            _2631 = abs((1.0 - _2202) / _2212);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2212 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2202 + 1.0) / _2212);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2631 = frontier_phi_40_35_ladder;
        }
        float _2844;
        if (_2215 > 0.0)
        {
            _2844 = abs((1.0 - _2206) / _2215);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2215 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2206 + 1.0) / _2215);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2844 = frontier_phi_49_46_ladder;
        }
        float _2846 = isnan(_2631) ? _2355 : (isnan(_2355) ? _2631 : min(_2355, _2631));
        float _2847 = isnan(_2844) ? _2846 : (isnan(_2846) ? _2844 : min(_2846, _2844));
        float _2851 = (_2847 * _2209) + _2198;
        float _2852 = (_2847 * _2212) + _2202;
        float _2853 = (_2847 * _2215) + _2206;
        float _2854 = _2847 * 9.9999997473787516355514526367188e-05;
        float _2855 = (-1.0) - _2854;
        float _2857 = _2854 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2853 > _2857) || ((_2853 < _2855) || ((_2852 > _2857) || ((_2852 < _2855) || ((_2851 < _2855) || (_2851 > _2857))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3052 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2853, cbModelParam._m0[17u].z, fma(_2852, cbModelParam._m0[17u].y, _2851 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2853, cbModelParam._m0[18u].z, fma(_2852, cbModelParam._m0[18u].y, _2851 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2853, cbModelParam._m0[19u].z, fma(_2852, cbModelParam._m0[19u].y, _2851 * cbModelParam._m0[19u].x))), _2145);
            frontier_phi_25_49_ladder = _3052.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3052.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3052.x * cbModelParam._m0[1u].z;
        }
        _2234 = frontier_phi_25_49_ladder_2;
        _2236 = frontier_phi_25_49_ladder_1;
        _2238 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2218 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1215, _1216, _1217), _2145);
        _2234 = _2218.x * cbModelParam._m0[1u].z;
        _2236 = _2218.y * cbModelParam._m0[1u].z;
        _2238 = _2218.z * cbModelParam._m0[1u].z;
    }
    float _2251 = (((_1242 * _1191) + _1243) * _1207) * ((cbModelParam._m0[1u].w * (_2234 - _2136)) + _2136);
    float _2253 = (((_1242 * _1193) + _1243) * _1207) * ((cbModelParam._m0[1u].w * (_2236 - _2138)) + _2138);
    float _2255 = (((_1242 * _1194) + _1243) * _1207) * ((cbModelParam._m0[1u].w * (_2238 - _2140)) + _2140);
    float _2258 = fma(_2255, cbSceneParam._m0[89u].z, fma(_2253, cbSceneParam._m0[89u].y, _2251 * cbSceneParam._m0[89u].x));
    float _2261 = fma(_2255, cbSceneParam._m0[90u].z, fma(_2253, cbSceneParam._m0[90u].y, _2251 * cbSceneParam._m0[90u].x));
    float _2264 = fma(_2255, cbSceneParam._m0[91u].z, fma(_2253, cbSceneParam._m0[91u].y, _2251 * cbSceneParam._m0[91u].x));
    uvec4 _2274 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2276 = _2274.x * 14u;
    uint _2277 = _2276 + 13u;
    float _2284 = _1207 + (-1.0);
    float _2289 = (cbLight._m0[_2277].x * _2284) + 1.0;
    float _2290 = (cbLight._m0[_2277].y * _2284) + 1.0;
    float _2291 = (cbLight._m0[_2277].z * _2284) + 1.0;
    float _2292 = (cbLight._m0[_2277].w * _2284) + 1.0;
    uint _2293 = _2276 + 5u;
    float _2299 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
    uint _2303 = _2276 + 4u;
    float _2309 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2313 = _2276 | 1u;
    float _2324 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_1030, _1031, _1032));
    float _2327 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_1030, _1031, _1032));
    float _4598 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _4609 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2332 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * 0.3183098733425140380859375;
    float _2334 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.3183098733425140380859375;
    float _2341 = ((cbLight._m0[_2293].x * _2299) * _2334) + ((cbLight._m0[_2303].x * _2309) * _2332);
    float _2342 = ((_2299 * cbLight._m0[_2293].y) * _2334) + ((_2309 * cbLight._m0[_2303].y) * _2332);
    float _2343 = ((_2299 * cbLight._m0[_2293].z) * _2334) + ((_2309 * cbLight._m0[_2303].z) * _2332);
    uvec4 _2347 = floatBitsToUint(cbLight._m0[_2276 + 12u]);
    bool _2349 = _2347.x == 0u;
    float _2360;
    float _2362;
    float _2364;
    if (_2349)
    {
        _2360 = _2341;
        _2362 = _2342;
        _2364 = _2343;
    }
    else
    {
        uint _2368 = _2276 + 6u;
        float _2384 = (dot(vec3(cbLight._m0[_2276 + 2u].xyz), vec3(_1030, _1031, _1032)) * 0.5) + 0.5;
        float _2385 = _2384 * _2384;
        float _4620 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2386 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2387 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2360 = (((cbLight._m0[_2368].x * 0.3183098733425140380859375) * _2386) * _2387) + _2341;
        _2362 = (((cbLight._m0[_2368].y * 0.3183098733425140380859375) * _2386) * _2387) + _2342;
        _2364 = (((cbLight._m0[_2368].z * 0.3183098733425140380859375) * _2386) * _2387) + _2343;
    }
    bool _2367 = _2347.y == 0u;
    float _2405;
    float _2407;
    float _2409;
    if (_2367)
    {
        _2405 = _2360;
        _2407 = _2362;
        _2409 = _2364;
    }
    else
    {
        uint _2575 = _2276 + 7u;
        float _2591 = (dot(vec3(cbLight._m0[_2276 + 3u].xyz), vec3(_1030, _1031, _1032)) * 0.5) + 0.5;
        float _2592 = _2591 * _2591;
        float _4636 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2593 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2594 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2405 = (((cbLight._m0[_2575].x * 0.3183098733425140380859375) * _2593) * _2594) + _2360;
        _2407 = (((cbLight._m0[_2575].y * 0.3183098733425140380859375) * _2593) * _2594) + _2362;
        _2409 = (((cbLight._m0[_2575].z * 0.3183098733425140380859375) * _2593) * _2594) + _2364;
    }
    uint _2412 = _2276 + 8u;
    float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _1033) * 0.949999988079071044921875);
    float _2426 = _2425 * _2425;
    float _2427 = cbLight._m0[_2276].x + _1109;
    float _2428 = cbLight._m0[_2276].y + _1110;
    float _2429 = cbLight._m0[_2276].z + _1111;
    float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
    float _2434 = _2433 * _2427;
    float _2435 = _2433 * _2428;
    float _2436 = _2433 * _2429;
    float _2437 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_2276].xyz));
    float _4652 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _4663 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _2441 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2442 = dot(vec3(_1030, _1031, _1032), vec3(_2434, _2435, _2436));
    float _4674 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2434, _2435, _2436));
    float _4685 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2426 * _2426;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0);
    float _2463 = 0.959999978542327880859375 - _1188;
    float _2465 = 0.959999978542327880859375 - _1189;
    float _2466 = 0.959999978542327880859375 - _1190;
    float _2473 = 1.0 - _2426;
    float _2484 = (0.5 / (((_2441 * ((_2440 * _2473) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2473) + _2426) * _2440))) * _2440;
    float _4696 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2486 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    uint _2497 = _2276 + 9u;
    float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _1033) * 0.949999988079071044921875);
    float _2509 = _2508 * _2508;
    float _2510 = cbLight._m0[_2313].x + _1109;
    float _2511 = cbLight._m0[_2313].y + _1110;
    float _2512 = cbLight._m0[_2313].z + _1111;
    float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
    float _2517 = _2516 * _2510;
    float _2518 = _2516 * _2511;
    float _2519 = _2516 * _2512;
    float _2520 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_2313].xyz));
    float _4707 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2524 = dot(vec3(_1030, _1031, _1032), vec3(_2517, _2518, _2519));
    float _4718 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2528 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2517, _2518, _2519));
    float _4729 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2532 = _2509 * _2509;
    float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
    float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
    float _2550 = 1.0 - _2509;
    float _2560 = (0.5 / (((_2441 * ((_2523 * _2550) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2550) + _2509) * _2523))) * _2523;
    float _4740 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2562 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
    float _2572 = (((((_2543 * _2463) + _1191) * cbLight._m0[_2497].x) * _2562) * _2299) + (((((_2462 * _2463) + _1191) * cbLight._m0[_2412].x) * _2486) * _2309);
    float _2573 = (((((_2543 * _2465) + _1193) * cbLight._m0[_2497].y) * _2562) * _2299) + (((((_2462 * _2465) + _1193) * cbLight._m0[_2412].y) * _2486) * _2309);
    float _2574 = (((((_2543 * _2466) + _1194) * cbLight._m0[_2497].z) * _2562) * _2299) + (((((_2462 * _2466) + _1194) * cbLight._m0[_2412].z) * _2486) * _2309);
    float _2636;
    float _2638;
    float _2640;
    if (_2349)
    {
        _2636 = _2572;
        _2638 = _2573;
        _2640 = _2574;
    }
    else
    {
        uint _2642 = _2276 + 2u;
        uint _2646 = _2276 + 10u;
        float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2642].w)) * _1033) * 0.949999988079071044921875);
        float _2661 = _2660 * _2660;
        float _2662 = cbLight._m0[_2642].x + _1109;
        float _2663 = cbLight._m0[_2642].y + _1110;
        float _2664 = cbLight._m0[_2642].z + _1111;
        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
        float _2669 = _2668 * _2662;
        float _2670 = _2668 * _2663;
        float _2671 = _2668 * _2664;
        float _2672 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_2642].xyz));
        float _4751 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2676 = dot(vec3(_1030, _1031, _1032), vec3(_2669, _2670, _2671));
        float _4762 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2680 = dot(vec3(cbLight._m0[_2642].xyz), vec3(_2669, _2670, _2671));
        float _4773 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2684 = _2661 * _2661;
        float _2688 = ((_2679 * _2679) * (_2684 + (-1.0))) + 1.0;
        float _2695 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
        float _2702 = 1.0 - _2661;
        float _2712 = (0.5 / (((_2441 * ((_2675 * _2702) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2702) + _2661) * _2675))) * _2675;
        float _4784 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2714 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2684 / ((_2688 * _2688) * 3.141590118408203125));
        float _2715 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2636 = (((((_2695 * _2463) + _1191) * cbLight._m0[_2646].x) * _2714) * _2715) + _2572;
        _2638 = (((((_2695 * _2465) + _1193) * cbLight._m0[_2646].y) * _2714) * _2715) + _2573;
        _2640 = (((((_2695 * _2466) + _1194) * cbLight._m0[_2646].z) * _2714) * _2715) + _2574;
    }
    float _2750;
    float _2752;
    float _2754;
    if (_2367)
    {
        _2750 = _2636;
        _2752 = _2638;
        _2754 = _2640;
    }
    else
    {
        uint _2761 = _2276 + 3u;
        uint _2765 = _2276 + 11u;
        float _2779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2761].w)) * _1033) * 0.949999988079071044921875);
        float _2780 = _2779 * _2779;
        float _2781 = cbLight._m0[_2761].x + _1109;
        float _2782 = cbLight._m0[_2761].y + _1110;
        float _2783 = cbLight._m0[_2761].z + _1111;
        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
        float _2788 = _2787 * _2781;
        float _2789 = _2787 * _2782;
        float _2790 = _2787 * _2783;
        float _2791 = dot(vec3(_1030, _1031, _1032), vec3(cbLight._m0[_2761].xyz));
        float _4800 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2795 = dot(vec3(_1030, _1031, _1032), vec3(_2788, _2789, _2790));
        float _4811 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2799 = dot(vec3(cbLight._m0[_2761].xyz), vec3(_2788, _2789, _2790));
        float _4822 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2803 = _2780 * _2780;
        float _2807 = ((_2798 * _2798) * (_2803 + (-1.0))) + 1.0;
        float _2814 = exp2(log2(1.0 - (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) * 5.0);
        float _2821 = 1.0 - _2780;
        float _2831 = (0.5 / (((_2441 * ((_2794 * _2821) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2441 * _2821) + _2780) * _2794))) * _2794;
        float _4833 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2833 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2803 / ((_2807 * _2807) * 3.141590118408203125));
        float _2834 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2750 = (((((_2814 * _2463) + _1191) * cbLight._m0[_2765].x) * _2833) * _2834) + _2636;
        _2752 = (((((_2814 * _2465) + _1193) * cbLight._m0[_2765].y) * _2833) * _2834) + _2638;
        _2754 = (((((_2814 * _2466) + _1194) * cbLight._m0[_2765].z) * _2833) * _2834) + _2640;
    }
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    if (_2274.y == 0u)
    {
        float _2909 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2910 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2909;
        float _2911 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2909;
        float _2912 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2909;
        uvec4 _2924 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2925 = _2924.x;
        uint _2936 = uint((float(_2924.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1130) / _2925))) + floor(float(uint(cbSceneParam._m0[85u].x * _1129) / _2925)));
        float _2946 = (log2(_2912 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2947 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        uint _2950 = uint(isnan(14.0) ? _2947 : (isnan(_2947) ? 14.0 : min(_2947, 14.0)));
        uvec4 _2955 = texelFetch(g_lightClusterGridBuffer, int(((_2950 << 2u) + (_2936 << 6u)) >> 2u));
        uint _2956 = _2955.x;
        uint _2957 = _2924.z;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        if (((((1u << ((_2957 >> 4u) & 15u)) + 4294967295u) & _2956) == 0u) || ((_2957 & 240u) == 0u))
        {
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
        }
        else
        {
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3068;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            uint _3216 = 0u;
            uint _3225;
            bool _3226;
            for (;;)
            {
                _3225 = texelFetch(g_lightClassification, int((((_2950 << 5u) + (_2936 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                _3226 = _3225 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3226)
                {
                    frontier_phi_66_pred = _3210;
                    frontier_phi_66_pred_1 = _3215;
                    frontier_phi_66_pred_2 = _3214;
                    frontier_phi_66_pred_3 = _3213;
                    frontier_phi_66_pred_4 = _3212;
                    frontier_phi_66_pred_5 = _3211;
                }
                else
                {
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    uint _3361;
                    _3355 = _3210;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3225;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    for (;;)
                    {
                        uint _3365 = uint(findLSB(_3361)) + (_3216 << 5u);
                        uint _3362 = (_3361 + 4294967295u) & _3361;
                        uint _3367 = _3365 * 48u;
                        vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 3u)).x));
                        uint _3387 = (_3365 * 48u) + 4u;
                        vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 3u)).x));
                        uint _3406 = (_3365 * 48u) + 8u;
                        vec3 _3417 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3406)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 2u)).x));
                        float _3421 = _3381.x - _2910;
                        float _3422 = _3381.y - _2911;
                        float _3423 = _3381.z - _2912;
                        float _3424 = dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423));
                        float _3427 = inversesqrt(_3424);
                        float _3428 = _3427 * _3421;
                        float _3429 = _3427 * _3422;
                        float _3430 = _3427 * _3423;
                        float _3431 = dot(vec3(_1148, _1151, _1154), vec3(_3428, _3429, _3430));
                        float _3436 = 1.0 - (_3424 * _3381.w);
                        float _4859 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3437 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3438 = sqrt(_3424) * _3400.w;
                        float _3441 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                        float _3442 = _3441 * _3441;
                        float _3445 = ((1.0 - _3442) * _3431) + _3442;
                        float _3448 = _3438 * _3438;
                        float _3452 = ((isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))) * _3437) / ((_3448 * 0.699999988079071044921875) + 1.0);
                        float _3456 = (-0.0) - _2910;
                        float _3457 = (-0.0) - _2911;
                        float _3458 = (-0.0) - _2912;
                        float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                        float _3463 = _3462 * _3456;
                        float _3464 = _3462 * _3457;
                        float _3465 = _3462 * _3458;
                        float _3473 = exp2(log2(1.0 / ((_3448 * 3.5) + 5.0)) * 0.25);
                        float _3474 = 1.0 - _1223;
                        float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                        float _3482 = _3481 * _3481;
                        float _3483 = _3482 * _3482;
                        float _3484 = _3463 + _3428;
                        float _3485 = _3464 + _3429;
                        float _3486 = _3465 + _3430;
                        float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                        float _3494 = dot(vec3(_1148, _1151, _1154), vec3(_3463, _3464, _3465));
                        float _4875 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3497 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3498 = dot(vec3(_1148, _1151, _1154), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                        float _4886 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                        float _3506 = _3441 * _3482;
                        float _3507 = _3506 * _3506;
                        float _3510 = ((1.0 - _3507) * _3431) + _3507;
                        float _4897 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3512 = 1.0 - _3482;
                        float _3522 = (0.5 / (((_3511 * ((_3497 * _3512) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3482) * _3497))) * _3511;
                        float _4908 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3533 = (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0)))) / ((_3505 * _3505) * ((_3448 * 2.1991131305694580078125) + 3.141590118408203125))) * _3437;
                        _3285 = (_3452 * _3400.x) + _3358;
                        _3286 = (_3452 * _3400.y) + _3359;
                        _3287 = (_3452 * _3400.z) + _3360;
                        _3282 = (_3533 * _3417.x) + _3355;
                        _3283 = (_3533 * _3417.y) + _3356;
                        _3284 = (_3533 * _3417.z) + _3357;
                        if (_3362 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3355 = _3282;
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3362;
                        }
                    }
                    frontier_phi_66_pred = _3282;
                    frontier_phi_66_pred_1 = _3287;
                    frontier_phi_66_pred_2 = _3286;
                    frontier_phi_66_pred_3 = _3285;
                    frontier_phi_66_pred_4 = _3284;
                    frontier_phi_66_pred_5 = _3283;
                }
                _3058 = frontier_phi_66_pred;
                _3068 = frontier_phi_66_pred_1;
                _3066 = frontier_phi_66_pred_2;
                _3064 = frontier_phi_66_pred_3;
                _3062 = frontier_phi_66_pred_4;
                _3060 = frontier_phi_66_pred_5;
                uint _3217 = _3216 + 1u;
                if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3210 = _3058;
                    _3211 = _3060;
                    _3212 = _3062;
                    _3213 = _3064;
                    _3214 = _3066;
                    _3215 = _3068;
                    _3216 = _3217;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
        }
        uvec4 _3071 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3072 = _3071.z;
        uint _3074 = (_3072 >> 8u) & 15u;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        if (((4294967295u << _3074) & _2956) == 0u)
        {
            _3178 = _3057;
            _3180 = _3059;
            _3182 = _3061;
            _3184 = _3063;
            _3186 = _3065;
            _3188 = _3067;
        }
        else
        {
            float _3203 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
            float _3204 = _3203 * _2910;
            float _3205 = _3203 * _2911;
            float _3206 = _3203 * _2912;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3074 < ((_3072 >> 12u) & 15u))
            {
                float _3179;
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3338 = _3057;
                float _3339 = _3059;
                float _3340 = _3061;
                float _3341 = _3063;
                float _3342 = _3065;
                float _3343 = _3067;
                uint _3344 = _3074;
                uint _3353;
                bool _3354;
                for (;;)
                {
                    _3353 = texelFetch(g_lightClassification, int((((_2950 << 5u) + (_2936 << 9u)) + (_3344 << 2u)) >> 2u)).x;
                    _3354 = _3353 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3354)
                    {
                        frontier_phi_77_pred = _3343;
                        frontier_phi_77_pred_1 = _3342;
                        frontier_phi_77_pred_2 = _3341;
                        frontier_phi_77_pred_3 = _3340;
                        frontier_phi_77_pred_4 = _3339;
                        frontier_phi_77_pred_5 = _3338;
                    }
                    else
                    {
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3560 = _3338;
                        float _3561 = _3339;
                        float _3562 = _3340;
                        float _3563 = _3341;
                        float _3564 = _3342;
                        float _3565 = _3343;
                        uint _3566 = _3353;
                        uint _3567;
                        vec4 _3592;
                        float _3593;
                        vec4 _3608;
                        vec3 _3620;
                        vec4 _3635;
                        vec4 _3650;
                        float _3696;
                        bool _3697;
                        for (;;)
                        {
                            uint _3577 = ((_3344 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3566));
                            _3567 = (_3566 + 4294967295u) & _3566;
                            uint _3579 = _3577 * 40u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3593 = _3592.w;
                            uint _3595 = (_3577 * 40u) + 4u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3577 * 40u) + 8u;
                            _3620 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x));
                            uint _3622 = (_3577 * 40u) + 16u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3577 * 40u) + 20u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3652 = (_3577 * 40u) + 24u;
                            vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            uint _3671 = (_3577 * 40u) + 28u;
                            vec4 _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            _3696 = fma(_2912, _3684.z, fma(_2911, _3684.y, _3684.x * _2910)) + _3684.w;
                            _3697 = !((fma(_2912, _3665.z, fma(_2911, _3665.y, _3665.x * _2910)) + _3665.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3697)
                            {
                                float _3724 = _3592.x - _2910;
                                float _3725 = _3592.y - _2911;
                                float _3726 = _3592.z - _2912;
                                float _3727 = dot(vec3(_3724, _3725, _3726), vec3(_3724, _3725, _3726));
                                float _3730 = inversesqrt(_3727);
                                float _3731 = _3730 * _3724;
                                float _3732 = _3730 * _3725;
                                float _3733 = _3730 * _3726;
                                float _3737 = 1.0 - (_3727 / (_3593 * _3593));
                                float _4919 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3742 = sqrt(_3727) * _3608.w;
                                float _3744 = 1.39999997615814208984375 / (_3742 + 1.39999997615814208984375);
                                float _3745 = _3744 * _3744;
                                float _3748 = ((1.0 - _3745) * dot(vec3(_3731, _3732, _3733), vec3(_1148, _1151, _1154))) + _3745;
                                float _3751 = _3742 * _3742;
                                float _3755 = (fma(_2912, _3635.z, fma(_2911, _3635.y, _3635.x * _2910)) + _3635.w) / _3696;
                                float _3756 = (fma(_2912, _3650.z, fma(_2911, _3650.y, _3650.x * _2910)) + _3650.w) / _3696;
                                float _3760 = 1.0 - dot(vec2(_3755, _3756), vec2(_3755, _3756));
                                float _4935 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3762 = _3761 * (((isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0))) * _3738) / ((_3751 * 0.699999988079071044921875) + 1.0));
                                float _3774 = exp2(log2(1.0 / ((_3751 * 3.5) + 5.0)) * 0.25);
                                float _3775 = 1.0 - _1223;
                                float _3782 = sqrt(1.0 - ((1.0 - (_3775 * _3775)) * (1.0 - (_3774 * _3774))));
                                float _3783 = _3782 * _3782;
                                float _3784 = _3783 * _3783;
                                float _3785 = _3731 - _3204;
                                float _3786 = _3732 - _3205;
                                float _3787 = _3733 - _3206;
                                float _3791 = inversesqrt(dot(vec3(_3785, _3786, _3787), vec3(_3785, _3786, _3787)));
                                float _3795 = dot(vec3(_1148, _1151, _1154), vec3((-0.0) - _3204, (-0.0) - _3205, (-0.0) - _3206));
                                float _4946 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3798 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3799 = dot(vec3(_1148, _1151, _1154), vec3(_3791 * _3785, _3791 * _3786, _3791 * _3787));
                                float _4957 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3802 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3806 = ((_3802 * _3802) * (_3784 + (-1.0))) + 1.0;
                                float _3807 = _3744 * _3783;
                                float _3808 = _3807 * _3807;
                                float _3814 = ((1.0 - _3808) * dot(vec3(_1148, _1151, _1154), vec3(_3731, _3732, _3733))) + _3808;
                                float _4968 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3816 = 1.0 - _3783;
                                float _3826 = (0.5 / (((_3815 * ((_3798 * _3816) + _3783)) + 9.9999999392252902907785028219223e-09) + (((_3815 * _3816) + _3783) * _3798))) * _3815;
                                float _4979 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3836 = (_3761 * _3738) * (((_3784 * 3.1415927410125732421875) * (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0)))) / ((_3806 * _3806) * ((_3751 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3762 * _3608.y;
                                frontier_phi_83_pred_1 = _3762 * _3608.x;
                                frontier_phi_83_pred_2 = _3836 * _3620.z;
                                frontier_phi_83_pred_3 = _3836 * _3620.y;
                                frontier_phi_83_pred_4 = _3836 * _3620.x;
                                frontier_phi_83_pred_5 = _3762 * _3608.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3844 = frontier_phi_83_pred;
                            _3843 = frontier_phi_83_pred_1;
                            _3842 = frontier_phi_83_pred_2;
                            _3841 = frontier_phi_83_pred_3;
                            _3840 = frontier_phi_83_pred_4;
                            _3845 = frontier_phi_83_pred_5;
                            _3550 = _3843 + _3563;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            _3547 = _3840 + _3560;
                            _3548 = _3841 + _3561;
                            _3549 = _3842 + _3562;
                            if (_3567 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3567;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3552;
                        frontier_phi_77_pred_1 = _3551;
                        frontier_phi_77_pred_2 = _3550;
                        frontier_phi_77_pred_3 = _3549;
                        frontier_phi_77_pred_4 = _3548;
                        frontier_phi_77_pred_5 = _3547;
                    }
                    _3189 = frontier_phi_77_pred;
                    _3187 = frontier_phi_77_pred_1;
                    _3185 = frontier_phi_77_pred_2;
                    _3183 = frontier_phi_77_pred_3;
                    _3181 = frontier_phi_77_pred_4;
                    _3179 = frontier_phi_77_pred_5;
                    uint _3345 = _3344 + 1u;
                    if (_3345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3338 = _3179;
                        _3339 = _3181;
                        _3340 = _3183;
                        _3341 = _3185;
                        _3342 = _3187;
                        _3343 = _3189;
                        _3344 = _3345;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3183;
                frontier_phi_58_59_ladder_1 = _3189;
                frontier_phi_58_59_ladder_2 = _3187;
                frontier_phi_58_59_ladder_3 = _3185;
                frontier_phi_58_59_ladder_4 = _3181;
                frontier_phi_58_59_ladder_5 = _3179;
            }
            else
            {
                frontier_phi_58_59_ladder = _3061;
                frontier_phi_58_59_ladder_1 = _3067;
                frontier_phi_58_59_ladder_2 = _3065;
                frontier_phi_58_59_ladder_3 = _3063;
                frontier_phi_58_59_ladder_4 = _3059;
                frontier_phi_58_59_ladder_5 = _3057;
            }
            _3178 = frontier_phi_58_59_ladder_5;
            _3180 = frontier_phi_58_59_ladder_4;
            _3182 = frontier_phi_58_59_ladder;
            _3184 = frontier_phi_58_59_ladder_3;
            _3186 = frontier_phi_58_59_ladder_2;
            _3188 = frontier_phi_58_59_ladder_1;
        }
        float _3193 = isnan(1.0) ? _1207 : (isnan(_1207) ? 1.0 : min(_1207, 1.0));
        _2969 = (_3193 * _3184) + _2405;
        _2971 = (_3193 * _3186) + _2407;
        _2973 = (_3193 * _3188) + _2409;
        _2975 = ((_3178 * _1191) * _3193) + _2750;
        _2977 = ((_3180 * _1193) * _3193) + _2752;
        _2979 = ((_3182 * _1194) * _3193) + _2754;
    }
    else
    {
        _2969 = _2405;
        _2971 = _2407;
        _2973 = _2409;
        _2975 = _2750;
        _2977 = _2752;
        _2979 = _2754;
    }
    float _4995 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _5006 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _5017 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _2996 = ((isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2969 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1207))) + ((_2975 + ((isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))) * _2045)) * cbPerFrame._m0[3u].x);
    float _2997 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2971 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1207))) + ((_2977 + ((isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0))) * _2045)) * cbPerFrame._m0[3u].x);
    float _2998 = ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2973 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1207))) + ((_2979 + ((isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0))) * _2045)) * cbPerFrame._m0[3u].x);
    uint _2999 = _288 + 6u;
    float _3007 = _1129 / cbSceneParam._m0[86u].x;
    float _3008 = _1130 / cbSceneParam._m0[86u].y;
    vec4 _3022 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3007, _3008, (log2((isnan(cbSceneParam._m0[77u].w) ? _1052 : (isnan(_1052) ? cbSceneParam._m0[77u].w : min(_1052, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3024 = _3022.x;
    float _3025 = _3022.y;
    float _3026 = _3022.z;
    float _3027 = _3022.w;
    float _3120;
    float _3122;
    float _3124;
    float _3126;
    if (_1052 > cbSceneParam._m0[78u].w)
    {
        float _3082 = isnan(_1052) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1052 : min(cbSceneParam._m0[80u].w, _1052));
        float _3083 = _3082 / _1052;
        float _3094 = _3083 * _1102;
        float _3095 = _1103 * _3083;
        float _3096 = (-0.0) - _3095;
        float _3098 = _3083 * _1104;
        float _3100 = (cbSceneParam._m0[77u].w * _3096) / _3082;
        float _3101 = _3100 + cbSceneParam._m0[79u].w;
        float _3102 = cbSceneParam._m0[79u].w - _3095;
        float _3108 = sqrt(((_3094 * _3094) + (_3095 * _3095)) + (_3098 * _3098));
        float _3111 = (1.0 - (cbSceneParam._m0[77u].w / _3082)) * _3108;
        float _3116 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3118 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3295;
        if (abs((_3096 - _3100) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3295 = ((((_3101 > 0.0) ? exp2(_3116 * _3101) : (2.0 - exp2(_3118 * _3101))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3111;
        }
        else
        {
            float _3239 = 1.0 / cbSceneParam._m0[80u].x;
            float _3240 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : max(_3101, _3102));
            float _3241 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : min(_3101, _3102));
            float _3250 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : min(_3240, 0.0));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            _3295 = ((abs(_3108 / _3096) * cbSceneParam._m0[80u].y) * ((((_3250 - _3251) * 2.0) - ((exp2(_3116 * (isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0)))) - exp2(_3116 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))))) * _3239)) - ((exp2(_3118 * _3250) - exp2(_3118 * _3251)) * _3239))) + (_3111 * cbSceneParam._m0[80u].z);
        }
        vec4 _3297 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3007, _3008, 1.0), 0.0);
        float _3306 = exp2((_3295 * (-1.44269502162933349609375)) * (1.0 - _3297.w));
        float _3307 = log2(_3306);
        float _3323 = log2(_3027);
        _3120 = (exp2(_3323 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].x)) * _3297.x) / cbSceneParam._m0[78u].x)) + _3024;
        _3122 = (exp2(_3323 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].y)) * _3297.y) / cbSceneParam._m0[78u].y)) + _3025;
        _3124 = (exp2(_3323 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].z)) * _3297.z) / cbSceneParam._m0[78u].z)) + _3026;
        _3126 = _3306 * _3027;
    }
    else
    {
        _3120 = _3024;
        _3122 = _3025;
        _3124 = _3026;
        _3126 = _3027;
    }
    bool _3333;
    vec4 _3136;
    vec4 _3158;
    float _3160;
    float _3164;
    float _3165;
    float _3166;
    float _3167;
    bool _3177;
    for (;;)
    {
        _3136 = cbMatDynParam._m0[0u];
        float _3138 = roundEven(_3136.y);
        bool _3139 = _3138 == 3.0;
        float _3140 = log2(_3126);
        float _3147 = exp2(_3140 * cbSceneParam._m0[78u].x) * _2996;
        float _3148 = exp2(_3140 * cbSceneParam._m0[78u].y) * _2997;
        float _3149 = exp2(_3140 * cbSceneParam._m0[78u].z) * _2998;
        float _3156 = _1118 + (-0.5);
        _3158 = cbMtdParam._m0[1u];
        _3160 = _3158.y * _3156;
        float _3163 = (_3138 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3164 = _3163 * (_3139 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3120)));
        _3165 = _3163 * (_3139 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3122)));
        _3166 = _3163 * (_3139 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3124)));
        _3167 = _3156 * 0.999000012874603271484375;
        _3177 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3177)
        {
            if ((cbInstanceData._m0[_288 + 7u].x + _3167) < 0.5)
            {
                _3333 = true;
                break;
            }
        }
        uint _3274 = _1167 + uint(_3136.w);
        if ((cbInstanceData._m0[_3274].w < 1.0) && ((cbInstanceData._m0[_3274].w + _3167) < 0.5))
        {
            _3333 = true;
            break;
        }
        if ((_3160 + 1.0) < _3158.x)
        {
            _3333 = true;
            break;
        }
        _3333 = false;
        break;
    }
    float _3538;
    if (_3333)
    {
        discard_state = true;
        _3538 = 0.0;
    }
    else
    {
        _3538 = cbInstanceData._m0[_2999].w;
    }
    SV_Target.x = _3164;
    SV_Target.y = _3165;
    SV_Target.z = _3166;
    SV_Target.w = _3538;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2999].w;
    discard_exit();
}


