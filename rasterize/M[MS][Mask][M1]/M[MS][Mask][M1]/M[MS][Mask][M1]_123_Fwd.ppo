#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1543;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3867 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3878 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3889 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _421 = _419.x;
    float _433 = dot(vec4(_421, _419.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _450 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _384.x) * 2.0) - ((((_421 - _433) * cbMtdParam._m0[23u].w) + _433) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3900 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _458 = (_451 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _459 = (_451 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _460 = (_451 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _477 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _499 = _497.x;
    float _509 = dot(vec4(_499, _497.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _523 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _384.y) * 2.0) - ((((_499 - _509) * cbMtdParam._m0[23u].w) + _509) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3911 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _531 = (_524 * ((_477.x * cbMtdParam._m0[13u].x) - _458)) + _458;
    float _532 = (_524 * ((_477.y * cbMtdParam._m0[13u].y) - _459)) + _459;
    float _533 = (_524 * ((_477.z * cbMtdParam._m0[13u].z) - _460)) + _460;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _301) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _302) + cbTextureTilingScale._m0[24u].w));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _571 = _569.x;
    float _581 = dot(vec4(_571, _569.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _593 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _384.z) * 2.0) - ((((_571 - _581) * cbMtdParam._m0[23u].w) + _581) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3922 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _601 = (_594 * ((_552.x * cbMtdParam._m0[14u].x) - _531)) + _531;
    float _602 = (_594 * ((_552.y * cbMtdParam._m0[14u].y) - _532)) + _532;
    float _603 = (_594 * ((_552.z * cbMtdParam._m0[14u].z) - _533)) + _533;
    float _607 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _601;
    float _610 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _602;
    float _613 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _603;
    float _620 = ((_601 - _607) * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) + _607;
    float _621 = ((_602 - _610) * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) + _610;
    float _622 = ((_603 - _613) * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) + _613;
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _683 = _681.x;
    float _684 = _681.y;
    float _685 = _681.z;
    float _692 = ((_664.x - _683) * _451) + _683;
    float _693 = ((_664.y - _684) * _451) + _684;
    float _694 = ((_664.z - _685) * _451) + _685;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _717 = ((_706.x - _692) * _524) + _692;
    float _718 = ((_706.y - _693) * _524) + _693;
    float _719 = ((_706.z - _694) * _524) + _694;
    vec4 _731 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _301) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _302) + cbTextureTilingScale._m0[23u].w));
    float _744 = ((_731.z - _719) * _594) + _719;
    float _747 = ((((_731.x - _717) * _594) + _717) * 2.0) + (-1.0);
    float _748 = ((((_731.y - _718) * _594) + _718) * 2.0) + (-1.0);
    float _749 = dot(vec2(_747, _748), vec2(_747, _748));
    float _3933 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _754 = sqrt(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))));
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _784 = (_747 + ((((_639.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_772.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _785 = (_748 + ((((_639.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_772.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _788 = fma(_754, _249, fma(_785, _256, _784 * _242));
    float _791 = fma(_754, _250, fma(_785, _257, _784 * _243));
    float _794 = fma(_754, _251, fma(_785, _258, _784 * _244));
    float _798 = inversesqrt(dot(vec3(_788, _791, _794), vec3(_788, _791, _794)));
    vec4 _825 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _827 = _825.x;
    float _828 = 1.0 - _827;
    float _836 = (cbMtdParam._m0[19u].x + dot(vec4(_798 * _788, _798 * _791, _798 * _794, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_827 - _828) * cbMtdParam._m0[24u].z) + _828) * cbMtdParam._m0[21u].z);
    float _3944 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _837 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _844 = (_837 * (cbMtdParam._m0[17u].x - _620)) + _620;
    float _845 = (_837 * (cbMtdParam._m0[17u].y - _621)) + _621;
    float _846 = (_837 * (cbMtdParam._m0[17u].z - _622)) + _622;
    vec4 _872 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _874 = _872.x;
    float _892 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _874) * _451) + _874;
    float _909 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _892) * _524) + _892;
    float _927 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _301) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _302) + cbTextureTilingScale._m0[10u].w)).x - _909) * _594) + _909;
    float _931 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _927) * cbMtdParam._m0[19u].z) + _927;
    float _933 = _931 - (_931 * _837);
    float _938 = (((_639.z - _744) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _744;
    float _942 = ((_772.z - _938) * cbMtdParam._m0[19u].w) + _938;
    vec4 _955 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _962 = (_955.x * 2.0) + (-1.0);
    float _963 = (_955.y * 2.0) + (-1.0);
    float _964 = dot(vec2(_962, _963), vec2(_962, _963));
    float _3955 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _972 = ((_955.z - _942) * _837) + _942;
    float _982 = ((sqrt(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) - _754) * _837) + _754;
    float _985 = (((_962 - _784) * _837) + _784) + (cbMtdParam._m0[21u].x * _784);
    float _986 = (((_963 - _785) * _837) + _785) + (cbMtdParam._m0[21u].x * _785);
    float _990 = cbMtdParam._m0[22u].x + _772.w;
    float _993 = fma(_982, _249, fma(_986, _256, _985 * _242));
    float _996 = fma(_982, _250, fma(_986, _257, _985 * _243));
    float _999 = fma(_982, _251, fma(_986, _258, _985 * _244));
    float _1003 = inversesqrt(dot(vec3(_993, _996, _999), vec3(_993, _996, _999)));
    float _1004 = _1003 * _993;
    float _1005 = _1003 * _996;
    float _1006 = _1003 * _999;
    float _3966 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _1007 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _3988 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _3999 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4010 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4021 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _1012 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1026 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1076 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1066);
    float _1077 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1066);
    float _1078 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1066);
    float _1082 = inversesqrt(dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078)));
    float _1083 = _1076 * _1082;
    float _1084 = _1077 * _1082;
    float _1085 = _1078 * _1082;
    float _1091 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1092 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1110 = fma(_1006, cbSceneParam._m0[5u].z, fma(_1005, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1004));
    float _1113 = fma(_1006, cbSceneParam._m0[6u].z, fma(_1005, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1004));
    float _1116 = fma(_1006, cbSceneParam._m0[7u].z, fma(_1005, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1004));
    uint _1130 = (_282 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1136 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * cbInstanceData._m0[_1130].x;
    float _1137 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * cbInstanceData._m0[_1130].y;
    float _1138 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_1130].z;
    float _4032 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1139 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1140 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1141 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _1142 = 1.0 - _1012;
    float _1143 = _1139 * _1142;
    float _1144 = _1140 * _1142;
    float _1145 = _1141 * _1142;
    float _1150 = (_1139 + (-0.039999999105930328369140625)) * _1012;
    float _1151 = (_1140 + (-0.039999999105930328369140625)) * _1012;
    float _1152 = (_1141 + (-0.039999999105930328369140625)) * _1012;
    float _1153 = _1150 + 0.039999999105930328369140625;
    float _1155 = _1151 + 0.039999999105930328369140625;
    float _1156 = _1152 + 0.039999999105930328369140625;
    vec4 _1165 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1091, cbSceneParam._m0[86u].y * _1092));
    float _1169 = ((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * TEXCOORD_5.w) * _1165.x;
    float _1170 = dot(vec3(_1004, _1005, _1006), vec3(_1083, _1084, _1085));
    float _1173 = _1170 * 2.0;
    float _1177 = (_1173 * _1004) - _1083;
    float _1178 = (_1173 * _1005) - _1084;
    float _1179 = (_1173 * _1006) - _1085;
    float _1183 = abs(dot(vec3(_1083, _1084, _1085), vec3(_1004, _1005, _1006)));
    float _4065 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1185 = sqrt(_1007);
    float _1198 = exp2((_1185 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1185 * 3.0));
    float _1204 = (1.0 - _1198) * ((_1185 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1205 = _1198 * _1185;
    float _1233 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1237 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1241 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1542;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1267 = fma(_1241, cbModelParam._m0[26u].z, fma(_1237, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233));
        float _1271 = fma(_1241, cbModelParam._m0[27u].z, fma(_1237, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233));
        float _1275 = fma(_1241, cbModelParam._m0[28u].z, fma(_1237, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233));
        float _1300 = _1233 + _1004;
        float _1301 = _1237 + _1005;
        float _1302 = _1241 + _1006;
        float _1312 = fma(_1302, cbModelParam._m0[26u].z, fma(_1301, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1300)) - _1267;
        float _1313 = fma(_1302, cbModelParam._m0[27u].z, fma(_1301, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1300)) - _1271;
        float _1314 = fma(_1302, cbModelParam._m0[28u].z, fma(_1301, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1300)) - _1275;
        float _1318 = inversesqrt(dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314)));
        float _1331 = ((_1318 * _1312) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1267 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1318 * _1313) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1271 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1318 * _1314) / cbModelParam._m0[34u].z) + ((((((_1275 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1331, _1332, _1333), 0.0);
        float _1370 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1336.x + (-0.5));
        float _1372 = _1370 * (_1336.y + (-0.5));
        float _1373 = _1370 * (_1336.z + (-0.5));
        float _1380 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1343.x + (-0.5));
        float _1382 = _1380 * (_1343.y + (-0.5));
        float _1383 = _1380 * (_1343.z + (-0.5));
        float _1390 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1350.x + (-0.5));
        float _1392 = _1390 * (_1350.y + (-0.5));
        float _1393 = _1390 * (_1350.z + (-0.5));
        float _1400 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1357.x + (-0.5));
        float _1402 = _1400 * (_1357.y + (-0.5));
        float _1403 = _1400 * (_1357.z + (-0.5));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = _1371 * 0.5;
        float _1408 = _1381 * 0.5;
        float _1409 = _1391 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1424 = (dot(vec3(_1004, _1005, _1006), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1434 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4113 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1436 + 1.0))) + _1441) * _1404;
        float _1451 = _1372 * 0.5;
        float _1452 = _1382 * 0.5;
        float _1453 = _1392 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_1004, _1005, _1006), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4146 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1478 + 1.0))) + _1483) * _1405;
        float _1493 = _1373 * 0.5;
        float _1494 = _1383 * 0.5;
        float _1495 = _1393 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_1004, _1005, _1006), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4179 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1520 + 1.0))) + _1525) * _1406;
        _1542 = _1373;
        _1544 = _1372;
        _1545 = _1371;
        _1546 = _1383;
        _1547 = _1382;
        _1548 = _1381;
        _1549 = _1393;
        _1550 = _1392;
        _1551 = _1391;
        _1552 = _1406;
        _1553 = _1405;
        _1554 = _1404;
        _1555 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1556 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1557 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
    }
    else
    {
        _1542 = _1543;
        _1544 = _1543;
        _1545 = _1543;
        _1546 = _1543;
        _1547 = _1543;
        _1548 = _1543;
        _1549 = _1543;
        _1550 = _1543;
        _1551 = _1543;
        _1552 = _1543;
        _1553 = _1543;
        _1554 = _1543;
        _1555 = 0.0;
        _1556 = 0.0;
        _1557 = 0.0;
    }
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1580 = fma(_1241, cbModelParam._m0[30u].z, fma(_1237, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1233));
        float _1584 = fma(_1241, cbModelParam._m0[31u].z, fma(_1237, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1233));
        float _1588 = fma(_1241, cbModelParam._m0[32u].z, fma(_1237, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1233));
        float _1611 = _1233 + _1004;
        float _1612 = _1237 + _1005;
        float _1613 = _1241 + _1006;
        float _1623 = fma(_1613, cbModelParam._m0[30u].z, fma(_1612, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1611)) - _1580;
        float _1624 = fma(_1613, cbModelParam._m0[31u].z, fma(_1612, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1611)) - _1584;
        float _1625 = fma(_1613, cbModelParam._m0[32u].z, fma(_1612, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1611)) - _1588;
        float _1629 = inversesqrt(dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625)));
        float _1642 = ((_1629 * _1623) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1580 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1643 = ((_1629 * _1624) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1584 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1644 = ((_1629 * _1625) / cbModelParam._m0[35u].z) + ((((((_1588 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1642, _1643, _1644), 0.0);
        vec4 _1653 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1642, _1643, _1644), 0.0);
        vec4 _1660 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1642, _1643, _1644), 0.0);
        vec4 _1667 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1642, _1643, _1644), 0.0);
        float _1679 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1646.x + (-0.5));
        float _1681 = _1679 * (_1646.y + (-0.5));
        float _1682 = _1679 * (_1646.z + (-0.5));
        float _1689 = exp2((_1653.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1653.x + (-0.5));
        float _1691 = _1689 * (_1653.y + (-0.5));
        float _1692 = _1689 * (_1653.z + (-0.5));
        float _1699 = exp2((_1660.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1660.x + (-0.5));
        float _1701 = _1699 * (_1660.y + (-0.5));
        float _1702 = _1699 * (_1660.z + (-0.5));
        float _1709 = exp2((_1667.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1667.x + (-0.5));
        float _1711 = _1709 * (_1667.y + (-0.5));
        float _1712 = _1709 * (_1667.z + (-0.5));
        float _1713 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1714 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1715 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1716 = _1680 * 0.5;
        float _1717 = _1690 * 0.5;
        float _1718 = _1700 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_1004, _1005, _1006), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1713 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4242 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1743 + 1.0))) + _1748) * _1713;
        float _1758 = _1681 * 0.5;
        float _1759 = _1691 * 0.5;
        float _1760 = _1701 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_1004, _1005, _1006), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1714 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4275 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1785 + 1.0))) + _1790) * _1714;
        float _1800 = _1682 * 0.5;
        float _1801 = _1692 * 0.5;
        float _1802 = _1702 * 0.5;
        float _1803 = dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802));
        float _1808 = (_1803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1803);
        float _1816 = (dot(vec3(_1004, _1005, _1006), vec3(_1808 * _1800, _1808 * _1801, _1808 * _1802)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1825 = sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802)) / (_1715 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1827 = _1826 * 2.0;
        float _1831 = (1.0 - _1826) / (_1826 + 1.0);
        float _4308 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1841 = ((((1.0 - _1832) * (_1827 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1827 + 1.0))) + _1832) * _1715;
        _1849 = _1682;
        _1850 = _1681;
        _1851 = _1680;
        _1852 = _1692;
        _1853 = _1691;
        _1854 = _1690;
        _1855 = _1702;
        _1856 = _1701;
        _1857 = _1700;
        _1858 = _1715;
        _1859 = _1714;
        _1860 = _1713;
        _1861 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
        _1862 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
        _1863 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)));
    }
    else
    {
        _1849 = _1543;
        _1850 = _1543;
        _1851 = _1543;
        _1852 = _1543;
        _1853 = _1543;
        _1854 = _1543;
        _1855 = _1543;
        _1856 = _1543;
        _1857 = _1543;
        _1858 = _1543;
        _1859 = _1543;
        _1860 = _1543;
        _1861 = 0.0;
        _1862 = 0.0;
        _1863 = 0.0;
    }
    float _1873 = (cbModelParam._m0[1u].x * (_1861 - _1555)) + _1555;
    float _1874 = (cbModelParam._m0[1u].x * (_1862 - _1556)) + _1556;
    float _1875 = (cbModelParam._m0[1u].x * (_1863 - _1557)) + _1557;
    float _1896 = fma(_1875, cbSceneParam._m0[89u].z, fma(_1874, cbSceneParam._m0[89u].y, _1873 * cbSceneParam._m0[89u].x));
    float _1899 = fma(_1875, cbSceneParam._m0[90u].z, fma(_1874, cbSceneParam._m0[90u].y, _1873 * cbSceneParam._m0[90u].x));
    float _1902 = fma(_1875, cbSceneParam._m0[91u].z, fma(_1874, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1873));
    float _1917 = _1177 * 0.5;
    float _1918 = _1178 * 0.5;
    float _1919 = _1179 * 0.5;
    float _1920 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1851, _1854, _1857, _1860));
    float _1923 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1850, _1853, _1856, _1859));
    float _1926 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1849, _1852, _1855, _1858));
    float _1960;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1933 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1542, _1546, _1549, _1552));
        float _1937 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1544, _1547, _1550, _1553));
        float _1941 = dot(vec4(_1917, _1918, _1919, 1.0), vec4(_1545, _1548, _1551, _1554));
        float _1948 = dot(vec4(cbModelParam._m0[39u]), vec4(_1917, _1918, _1919, 1.0));
        _1960 = dot(vec3(isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)), isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)), isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1948) ? 0.0 : (isnan(0.0) ? _1948 : max(0.0, _1948))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1960 = 1.0;
    }
    float _1971;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1962 = dot(vec4(cbModelParam._m0[40u]), vec4(_1917, _1918, _1919, 1.0));
        _1971 = dot(vec3(isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1962) ? 0.0 : (isnan(0.0) ? _1962 : max(0.0, _1962))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1971 = 1.0;
    }
    float _1975 = (_1971 * cbModelParam._m0[1u].x) + (_1960 * (1.0 - cbModelParam._m0[1u].x));
    float _1985 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1007);
    float _1986 = isnan(_1985) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1985 : min(cbModelParam._m0[25u].z, _1985));
    float _2066;
    float _2068;
    float _2070;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2033 = fma(_1241, cbModelParam._m0[13u].z, fma(_1237, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1233)) + cbModelParam._m0[13u].w;
        float _2037 = fma(_1241, cbModelParam._m0[14u].z, fma(_1237, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1233)) + cbModelParam._m0[14u].w;
        float _2041 = fma(_1241, cbModelParam._m0[15u].z, fma(_1237, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1233)) + cbModelParam._m0[15u].w;
        float _2044 = fma(_1179, cbModelParam._m0[13u].z, fma(_1178, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177));
        float _2047 = fma(_1179, cbModelParam._m0[14u].z, fma(_1178, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177));
        float _2050 = fma(_1179, cbModelParam._m0[15u].z, fma(_1178, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177));
        float _2078;
        if (_2044 > 0.0)
        {
            _2078 = abs((1.0 - _2033) / _2044);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2033 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2078 = frontier_phi_14_12_ladder;
        }
        float _2281;
        if (_2047 > 0.0)
        {
            _2281 = abs((1.0 - _2037) / _2047);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2037 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2281 = frontier_phi_23_19_ladder;
        }
        float _2535;
        if (_2050 > 0.0)
        {
            _2535 = abs((1.0 - _2041) / _2050);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2041 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2535 = frontier_phi_35_30_ladder;
        }
        float _2537 = isnan(_2281) ? _2078 : (isnan(_2078) ? _2281 : min(_2078, _2281));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _2044) + _2033;
        float _2543 = (_2538 * _2047) + _2037;
        float _2544 = (_2538 * _2050) + _2041;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2545;
        float _2549 = _2545 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 > _2549) || ((_2543 < _2547) || ((_2542 < _2547) || (_2542 > _2549))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2544, cbModelParam._m0[9u].z, fma(_2543, cbModelParam._m0[9u].y, _2542 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2544, cbModelParam._m0[10u].z, fma(_2543, cbModelParam._m0[10u].y, _2542 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2544, cbModelParam._m0[11u].z, fma(_2543, cbModelParam._m0[11u].y, _2542 * cbModelParam._m0[11u].x))), _1986);
            frontier_phi_13_35_ladder = _2672.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2672.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2672.x * cbModelParam._m0[1u].y;
        }
        _2066 = frontier_phi_13_35_ladder_2;
        _2068 = frontier_phi_13_35_ladder_1;
        _2070 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2054 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1177, _1178, _1179), _1986);
        _2066 = _2054.x * cbModelParam._m0[1u].y;
        _2068 = _2054.y * cbModelParam._m0[1u].y;
        _2070 = _2054.z * cbModelParam._m0[1u].y;
    }
    float _2074 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1007);
    float _2075 = isnan(_2074) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2074 : min(cbModelParam._m0[25u].w, _2074));
    float _2165;
    float _2167;
    float _2169;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2129 = fma(_1241, cbModelParam._m0[21u].z, fma(_1237, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1233)) + cbModelParam._m0[21u].w;
        float _2133 = fma(_1241, cbModelParam._m0[22u].z, fma(_1237, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1233)) + cbModelParam._m0[22u].w;
        float _2137 = fma(_1241, cbModelParam._m0[23u].z, fma(_1237, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1233)) + cbModelParam._m0[23u].w;
        float _2140 = fma(_1179, cbModelParam._m0[21u].z, fma(_1178, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177));
        float _2143 = fma(_1179, cbModelParam._m0[22u].z, fma(_1178, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177));
        float _2146 = fma(_1179, cbModelParam._m0[23u].z, fma(_1178, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177));
        float _2286;
        if (_2140 > 0.0)
        {
            _2286 = abs((1.0 - _2129) / _2140);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2129 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2286 = frontier_phi_25_21_ladder;
        }
        float _2562;
        if (_2143 > 0.0)
        {
            _2562 = abs((1.0 - _2133) / _2143);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2143 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2133 + 1.0) / _2143);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2562 = frontier_phi_37_32_ladder;
        }
        float _2775;
        if (_2146 > 0.0)
        {
            _2775 = abs((1.0 - _2137) / _2146);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2146 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2137 + 1.0) / _2146);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2775 = frontier_phi_46_43_ladder;
        }
        float _2777 = isnan(_2562) ? _2286 : (isnan(_2286) ? _2562 : min(_2286, _2562));
        float _2778 = isnan(_2775) ? _2777 : (isnan(_2777) ? _2775 : min(_2777, _2775));
        float _2782 = (_2778 * _2140) + _2129;
        float _2783 = (_2778 * _2143) + _2133;
        float _2784 = (_2778 * _2146) + _2137;
        float _2785 = _2778 * 9.9999997473787516355514526367188e-05;
        float _2786 = (-1.0) - _2785;
        float _2788 = _2785 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2784 > _2788) || ((_2784 < _2786) || ((_2783 > _2788) || ((_2783 < _2786) || ((_2782 < _2786) || (_2782 > _2788))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2784, cbModelParam._m0[17u].z, fma(_2783, cbModelParam._m0[17u].y, _2782 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2784, cbModelParam._m0[18u].z, fma(_2783, cbModelParam._m0[18u].y, _2782 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2784, cbModelParam._m0[19u].z, fma(_2783, cbModelParam._m0[19u].y, _2782 * cbModelParam._m0[19u].x))), _2075);
            frontier_phi_22_46_ladder = _2983.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2983.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2983.x * cbModelParam._m0[1u].z;
        }
        _2165 = frontier_phi_22_46_ladder_2;
        _2167 = frontier_phi_22_46_ladder_1;
        _2169 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2149 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1177, _1178, _1179), _2075);
        _2165 = _2149.x * cbModelParam._m0[1u].z;
        _2167 = _2149.y * cbModelParam._m0[1u].z;
        _2169 = _2149.z * cbModelParam._m0[1u].z;
    }
    float _2182 = (((_1204 * _1153) + _1205) * _1169) * ((cbModelParam._m0[1u].w * (_2165 - _2066)) + _2066);
    float _2184 = (((_1204 * _1155) + _1205) * _1169) * ((cbModelParam._m0[1u].w * (_2167 - _2068)) + _2068);
    float _2186 = (((_1204 * _1156) + _1205) * _1169) * ((cbModelParam._m0[1u].w * (_2169 - _2070)) + _2070);
    float _2189 = fma(_2186, cbSceneParam._m0[89u].z, fma(_2184, cbSceneParam._m0[89u].y, _2182 * cbSceneParam._m0[89u].x));
    float _2192 = fma(_2186, cbSceneParam._m0[90u].z, fma(_2184, cbSceneParam._m0[90u].y, _2182 * cbSceneParam._m0[90u].x));
    float _2195 = fma(_2186, cbSceneParam._m0[91u].z, fma(_2184, cbSceneParam._m0[91u].y, _2182 * cbSceneParam._m0[91u].x));
    uvec4 _2205 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2207 = _2205.x * 14u;
    uint _2208 = _2207 + 13u;
    float _2215 = _1169 + (-1.0);
    float _2220 = (cbLight._m0[_2208].x * _2215) + 1.0;
    float _2221 = (cbLight._m0[_2208].y * _2215) + 1.0;
    float _2222 = (cbLight._m0[_2208].z * _2215) + 1.0;
    float _2223 = (cbLight._m0[_2208].w * _2215) + 1.0;
    uint _2224 = _2207 + 5u;
    float _2230 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
    uint _2234 = _2207 + 4u;
    float _2240 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
    uint _2244 = _2207 | 1u;
    float _2255 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_1004, _1005, _1006));
    float _2258 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_1004, _1005, _1006));
    float _4444 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _4455 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2263 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * 0.3183098733425140380859375;
    float _2265 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * 0.3183098733425140380859375;
    float _2272 = ((cbLight._m0[_2224].x * _2230) * _2265) + ((cbLight._m0[_2234].x * _2240) * _2263);
    float _2273 = ((_2230 * cbLight._m0[_2224].y) * _2265) + ((_2240 * cbLight._m0[_2234].y) * _2263);
    float _2274 = ((_2230 * cbLight._m0[_2224].z) * _2265) + ((_2240 * cbLight._m0[_2234].z) * _2263);
    uvec4 _2278 = floatBitsToUint(cbLight._m0[_2207 + 12u]);
    bool _2280 = _2278.x == 0u;
    float _2291;
    float _2293;
    float _2295;
    if (_2280)
    {
        _2291 = _2272;
        _2293 = _2273;
        _2295 = _2274;
    }
    else
    {
        uint _2299 = _2207 + 6u;
        float _2315 = (dot(vec3(cbLight._m0[_2207 + 2u].xyz), vec3(_1004, _1005, _1006)) * 0.5) + 0.5;
        float _2316 = _2315 * _2315;
        float _4466 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2317 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2318 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2291 = (((cbLight._m0[_2299].x * 0.3183098733425140380859375) * _2317) * _2318) + _2272;
        _2293 = (((cbLight._m0[_2299].y * 0.3183098733425140380859375) * _2317) * _2318) + _2273;
        _2295 = (((cbLight._m0[_2299].z * 0.3183098733425140380859375) * _2317) * _2318) + _2274;
    }
    bool _2298 = _2278.y == 0u;
    float _2336;
    float _2338;
    float _2340;
    if (_2298)
    {
        _2336 = _2291;
        _2338 = _2293;
        _2340 = _2295;
    }
    else
    {
        uint _2506 = _2207 + 7u;
        float _2522 = (dot(vec3(cbLight._m0[_2207 + 3u].xyz), vec3(_1004, _1005, _1006)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4482 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2525 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2336 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2291;
        _2338 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2293;
        _2340 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2295;
    }
    uint _2343 = _2207 + 8u;
    float _2356 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _1007) * 0.949999988079071044921875);
    float _2357 = _2356 * _2356;
    float _2358 = cbLight._m0[_2207].x + _1083;
    float _2359 = cbLight._m0[_2207].y + _1084;
    float _2360 = cbLight._m0[_2207].z + _1085;
    float _2364 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
    float _2365 = _2364 * _2358;
    float _2366 = _2364 * _2359;
    float _2367 = _2364 * _2360;
    float _2368 = dot(vec3(_1004, _1005, _1006), vec3(cbLight._m0[_2207].xyz));
    float _4498 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _4509 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _2372 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2373 = dot(vec3(_1004, _1005, _1006), vec3(_2365, _2366, _2367));
    float _4520 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2377 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2365, _2366, _2367));
    float _4531 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2381 = _2357 * _2357;
    float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
    float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0);
    float _2394 = 0.959999978542327880859375 - _1150;
    float _2396 = 0.959999978542327880859375 - _1151;
    float _2397 = 0.959999978542327880859375 - _1152;
    float _2404 = 1.0 - _2357;
    float _2415 = (0.5 / (((_2372 * ((_2371 * _2404) + _2357)) + 9.9999999392252902907785028219223e-09) + (((_2372 * _2404) + _2357) * _2371))) * _2371;
    float _4542 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
    uint _2428 = _2207 + 9u;
    float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _1007) * 0.949999988079071044921875);
    float _2440 = _2439 * _2439;
    float _2441 = cbLight._m0[_2244].x + _1083;
    float _2442 = cbLight._m0[_2244].y + _1084;
    float _2443 = cbLight._m0[_2244].z + _1085;
    float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
    float _2448 = _2447 * _2441;
    float _2449 = _2447 * _2442;
    float _2450 = _2447 * _2443;
    float _2451 = dot(vec3(_1004, _1005, _1006), vec3(cbLight._m0[_2244].xyz));
    float _4553 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2455 = dot(vec3(_1004, _1005, _1006), vec3(_2448, _2449, _2450));
    float _4564 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2459 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2448, _2449, _2450));
    float _4575 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2463 = _2440 * _2440;
    float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
    float _2474 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
    float _2481 = 1.0 - _2440;
    float _2491 = (0.5 / (((_2372 * ((_2454 * _2481) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2372 * _2481) + _2440) * _2454))) * _2454;
    float _4586 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2493 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
    float _2503 = (((((_2474 * _2394) + _1153) * cbLight._m0[_2428].x) * _2493) * _2230) + (((((_2393 * _2394) + _1153) * cbLight._m0[_2343].x) * _2417) * _2240);
    float _2504 = (((((_2474 * _2396) + _1155) * cbLight._m0[_2428].y) * _2493) * _2230) + (((((_2393 * _2396) + _1155) * cbLight._m0[_2343].y) * _2417) * _2240);
    float _2505 = (((((_2474 * _2397) + _1156) * cbLight._m0[_2428].z) * _2493) * _2230) + (((((_2393 * _2397) + _1156) * cbLight._m0[_2343].z) * _2417) * _2240);
    float _2567;
    float _2569;
    float _2571;
    if (_2280)
    {
        _2567 = _2503;
        _2569 = _2504;
        _2571 = _2505;
    }
    else
    {
        uint _2573 = _2207 + 2u;
        uint _2577 = _2207 + 10u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _1007) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _1083;
        float _2594 = cbLight._m0[_2573].y + _1084;
        float _2595 = cbLight._m0[_2573].z + _1085;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_1004, _1005, _1006), vec3(cbLight._m0[_2573].xyz));
        float _4597 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2607 = dot(vec3(_1004, _1005, _1006), vec3(_2600, _2601, _2602));
        float _4608 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4619 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
        float _2633 = 1.0 - _2592;
        float _2643 = (0.5 / (((_2372 * ((_2606 * _2633) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2372 * _2633) + _2592) * _2606))) * _2606;
        float _4630 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2645 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2646 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2567 = (((((_2626 * _2394) + _1153) * cbLight._m0[_2577].x) * _2645) * _2646) + _2503;
        _2569 = (((((_2626 * _2396) + _1155) * cbLight._m0[_2577].y) * _2645) * _2646) + _2504;
        _2571 = (((((_2626 * _2397) + _1156) * cbLight._m0[_2577].z) * _2645) * _2646) + _2505;
    }
    float _2681;
    float _2683;
    float _2685;
    if (_2298)
    {
        _2681 = _2567;
        _2683 = _2569;
        _2685 = _2571;
    }
    else
    {
        uint _2692 = _2207 + 3u;
        uint _2696 = _2207 + 11u;
        float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _1007) * 0.949999988079071044921875);
        float _2711 = _2710 * _2710;
        float _2712 = cbLight._m0[_2692].x + _1083;
        float _2713 = cbLight._m0[_2692].y + _1084;
        float _2714 = cbLight._m0[_2692].z + _1085;
        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
        float _2719 = _2718 * _2712;
        float _2720 = _2718 * _2713;
        float _2721 = _2718 * _2714;
        float _2722 = dot(vec3(_1004, _1005, _1006), vec3(cbLight._m0[_2692].xyz));
        float _4646 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2726 = dot(vec3(_1004, _1005, _1006), vec3(_2719, _2720, _2721));
        float _4657 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2730 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_2719, _2720, _2721));
        float _4668 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2734 = _2711 * _2711;
        float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
        float _2745 = exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0);
        float _2752 = 1.0 - _2711;
        float _2762 = (0.5 / (((_2372 * ((_2725 * _2752) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2372 * _2752) + _2711) * _2725))) * _2725;
        float _4679 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2764 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
        float _2765 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2681 = (((((_2745 * _2394) + _1153) * cbLight._m0[_2696].x) * _2764) * _2765) + _2567;
        _2683 = (((((_2745 * _2396) + _1155) * cbLight._m0[_2696].y) * _2764) * _2765) + _2569;
        _2685 = (((((_2745 * _2397) + _1156) * cbLight._m0[_2696].z) * _2764) * _2765) + _2571;
    }
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    float _2910;
    if (_2205.y == 0u)
    {
        float _2840 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2841 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2840;
        float _2842 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2840;
        float _2843 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2840;
        uvec4 _2855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2856 = _2855.x;
        uint _2867 = uint((float(_2855.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1092) / _2856))) + floor(float(uint(cbSceneParam._m0[85u].x * _1091) / _2856)));
        float _2877 = (log2(_2843 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2878 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        uint _2881 = uint(isnan(14.0) ? _2878 : (isnan(_2878) ? 14.0 : min(_2878, 14.0)));
        uvec4 _2886 = texelFetch(g_lightClusterGridBuffer, int(((_2881 << 2u) + (_2867 << 6u)) >> 2u));
        uint _2887 = _2886.x;
        uint _2888 = _2855.z;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((((1u << ((_2888 >> 4u) & 15u)) + 4294967295u) & _2887) == 0u) || ((_2888 & 240u) == 0u))
        {
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
        }
        else
        {
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            uint _3139 = 0u;
            uint _3148;
            bool _3149;
            for (;;)
            {
                _3148 = texelFetch(g_lightClassification, int((((_2881 << 5u) + (_2867 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                _3149 = _3148 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3149)
                {
                    frontier_phi_61_pred = _3133;
                    frontier_phi_61_pred_1 = _3138;
                    frontier_phi_61_pred_2 = _3137;
                    frontier_phi_61_pred_3 = _3136;
                    frontier_phi_61_pred_4 = _3135;
                    frontier_phi_61_pred_5 = _3134;
                }
                else
                {
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    uint _3263;
                    _3257 = _3133;
                    _3258 = _3134;
                    _3259 = _3135;
                    _3260 = _3136;
                    _3261 = _3137;
                    _3262 = _3138;
                    _3263 = _3148;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    for (;;)
                    {
                        uint _3267 = uint(findLSB(_3263)) + (_3139 << 5u);
                        uint _3264 = (_3263 + 4294967295u) & _3263;
                        uint _3269 = _3267 * 48u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3269)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 3u)).x));
                        uint _3289 = (_3267 * 48u) + 4u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3308 = (_3267 * 48u) + 8u;
                        vec3 _3319 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x));
                        float _3323 = _3283.x - _2841;
                        float _3324 = _3283.y - _2842;
                        float _3325 = _3283.z - _2843;
                        float _3326 = dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325));
                        float _3329 = inversesqrt(_3326);
                        float _3330 = _3329 * _3323;
                        float _3331 = _3329 * _3324;
                        float _3332 = _3329 * _3325;
                        float _3333 = dot(vec3(_1110, _1113, _1116), vec3(_3330, _3331, _3332));
                        float _3338 = 1.0 - (_3326 * _3283.w);
                        float _4705 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3340 = sqrt(_3326) * _3302.w;
                        float _3343 = 1.39999997615814208984375 / (_3340 + 1.39999997615814208984375);
                        float _3344 = _3343 * _3343;
                        float _3347 = ((1.0 - _3344) * _3333) + _3344;
                        float _3350 = _3340 * _3340;
                        float _3354 = ((isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))) * _3339) / ((_3350 * 0.699999988079071044921875) + 1.0);
                        float _3358 = (-0.0) - _2841;
                        float _3359 = (-0.0) - _2842;
                        float _3360 = (-0.0) - _2843;
                        float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                        float _3365 = _3364 * _3358;
                        float _3366 = _3364 * _3359;
                        float _3367 = _3364 * _3360;
                        float _3375 = exp2(log2(1.0 / ((_3350 * 3.5) + 5.0)) * 0.25);
                        float _3376 = 1.0 - _1185;
                        float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                        float _3384 = _3383 * _3383;
                        float _3385 = _3384 * _3384;
                        float _3386 = _3365 + _3330;
                        float _3387 = _3366 + _3331;
                        float _3388 = _3367 + _3332;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3396 = dot(vec3(_1110, _1113, _1116), vec3(_3365, _3366, _3367));
                        float _4721 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3400 = dot(vec3(_1110, _1113, _1116), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                        float _4732 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                        float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                        float _3408 = _3343 * _3384;
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3333) + _3409;
                        float _4743 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3414 = 1.0 - _3384;
                        float _3424 = (0.5 / (((_3413 * ((_3399 * _3414) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3413 * _3414) + _3384) * _3399))) * _3413;
                        float _4754 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3435 = (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) / ((_3407 * _3407) * ((_3350 * 2.1991131305694580078125) + 3.141590118408203125))) * _3339;
                        _3192 = (_3354 * _3302.x) + _3260;
                        _3193 = (_3354 * _3302.y) + _3261;
                        _3194 = (_3354 * _3302.z) + _3262;
                        _3189 = (_3435 * _3319.x) + _3257;
                        _3190 = (_3435 * _3319.y) + _3258;
                        _3191 = (_3435 * _3319.z) + _3259;
                        if (_3264 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3257 = _3189;
                            _3258 = _3190;
                            _3259 = _3191;
                            _3260 = _3192;
                            _3261 = _3193;
                            _3262 = _3194;
                            _3263 = _3264;
                        }
                    }
                    frontier_phi_61_pred = _3189;
                    frontier_phi_61_pred_1 = _3194;
                    frontier_phi_61_pred_2 = _3193;
                    frontier_phi_61_pred_3 = _3192;
                    frontier_phi_61_pred_4 = _3191;
                    frontier_phi_61_pred_5 = _3190;
                }
                _2989 = frontier_phi_61_pred;
                _2999 = frontier_phi_61_pred_1;
                _2997 = frontier_phi_61_pred_2;
                _2995 = frontier_phi_61_pred_3;
                _2993 = frontier_phi_61_pred_4;
                _2991 = frontier_phi_61_pred_5;
                uint _3140 = _3139 + 1u;
                if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3133 = _2989;
                    _3134 = _2991;
                    _3135 = _2993;
                    _3136 = _2995;
                    _3137 = _2997;
                    _3138 = _2999;
                    _3139 = _3140;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
        }
        uvec4 _3002 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3003 = _3002.z;
        uint _3005 = (_3003 >> 8u) & 15u;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        if (((4294967295u << _3005) & _2887) == 0u)
        {
            _3101 = _2988;
            _3103 = _2990;
            _3105 = _2992;
            _3107 = _2994;
            _3109 = _2996;
            _3111 = _2998;
        }
        else
        {
            float _3126 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
            float _3127 = _3126 * _2841;
            float _3128 = _3126 * _2842;
            float _3129 = _3126 * _2843;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3005 < ((_3003 >> 12u) & 15u))
            {
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3240 = _2988;
                float _3241 = _2990;
                float _3242 = _2992;
                float _3243 = _2994;
                float _3244 = _2996;
                float _3245 = _2998;
                uint _3246 = _3005;
                uint _3255;
                bool _3256;
                for (;;)
                {
                    _3255 = texelFetch(g_lightClassification, int((((_2881 << 5u) + (_2867 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                    _3256 = _3255 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3256)
                    {
                        frontier_phi_67_pred = _3243;
                        frontier_phi_67_pred_1 = _3244;
                        frontier_phi_67_pred_2 = _3245;
                        frontier_phi_67_pred_3 = _3242;
                        frontier_phi_67_pred_4 = _3241;
                        frontier_phi_67_pred_5 = _3240;
                    }
                    else
                    {
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3453 = _3240;
                        float _3454 = _3241;
                        float _3455 = _3242;
                        float _3456 = _3243;
                        float _3457 = _3244;
                        float _3458 = _3245;
                        uint _3459 = _3255;
                        uint _3460;
                        vec4 _3485;
                        float _3486;
                        vec4 _3501;
                        vec3 _3513;
                        vec4 _3528;
                        vec4 _3543;
                        float _3589;
                        bool _3590;
                        for (;;)
                        {
                            uint _3470 = ((_3246 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3459));
                            _3460 = (_3459 + 4294967295u) & _3459;
                            uint _3472 = _3470 * 40u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3486 = _3485.w;
                            uint _3488 = (_3470 * 40u) + 4u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3470 * 40u) + 8u;
                            _3513 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x));
                            uint _3515 = (_3470 * 40u) + 16u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3470 * 40u) + 20u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3470 * 40u) + 24u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3564 = (_3470 * 40u) + 28u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3589 = fma(_2843, _3577.z, fma(_2842, _3577.y, _3577.x * _2841)) + _3577.w;
                            _3590 = !((fma(_2843, _3558.z, fma(_2842, _3558.y, _3558.x * _2841)) + _3558.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3590)
                            {
                                float _3617 = _3485.x - _2841;
                                float _3618 = _3485.y - _2842;
                                float _3619 = _3485.z - _2843;
                                float _3620 = dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619));
                                float _3623 = inversesqrt(_3620);
                                float _3624 = _3623 * _3617;
                                float _3625 = _3623 * _3618;
                                float _3626 = _3623 * _3619;
                                float _3630 = 1.0 - (_3620 / (_3486 * _3486));
                                float _4765 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3635 = sqrt(_3620) * _3501.w;
                                float _3637 = 1.39999997615814208984375 / (_3635 + 1.39999997615814208984375);
                                float _3638 = _3637 * _3637;
                                float _3641 = ((1.0 - _3638) * dot(vec3(_3624, _3625, _3626), vec3(_1110, _1113, _1116))) + _3638;
                                float _3644 = _3635 * _3635;
                                float _3648 = (fma(_2843, _3528.z, fma(_2842, _3528.y, _3528.x * _2841)) + _3528.w) / _3589;
                                float _3649 = (fma(_2843, _3543.z, fma(_2842, _3543.y, _3543.x * _2841)) + _3543.w) / _3589;
                                float _3653 = 1.0 - dot(vec2(_3648, _3649), vec2(_3648, _3649));
                                float _4781 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3655 = _3654 * (((isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0))) * _3631) / ((_3644 * 0.699999988079071044921875) + 1.0));
                                float _3667 = exp2(log2(1.0 / ((_3644 * 3.5) + 5.0)) * 0.25);
                                float _3668 = 1.0 - _1185;
                                float _3675 = sqrt(1.0 - ((1.0 - (_3668 * _3668)) * (1.0 - (_3667 * _3667))));
                                float _3676 = _3675 * _3675;
                                float _3677 = _3676 * _3676;
                                float _3678 = _3624 - _3127;
                                float _3679 = _3625 - _3128;
                                float _3680 = _3626 - _3129;
                                float _3684 = inversesqrt(dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680)));
                                float _3688 = dot(vec3(_1110, _1113, _1116), vec3((-0.0) - _3127, (-0.0) - _3128, (-0.0) - _3129));
                                float _4792 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3692 = dot(vec3(_1110, _1113, _1116), vec3(_3684 * _3678, _3684 * _3679, _3684 * _3680));
                                float _4803 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3699 = ((_3695 * _3695) * (_3677 + (-1.0))) + 1.0;
                                float _3700 = _3637 * _3676;
                                float _3701 = _3700 * _3700;
                                float _3707 = ((1.0 - _3701) * dot(vec3(_1110, _1113, _1116), vec3(_3624, _3625, _3626))) + _3701;
                                float _4814 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3709 = 1.0 - _3676;
                                float _3719 = (0.5 / (((_3708 * ((_3691 * _3709) + _3676)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3676) * _3691))) * _3708;
                                float _4825 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3729 = (_3654 * _3631) * (((_3677 * 3.1415927410125732421875) * (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) / ((_3699 * _3699) * ((_3644 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3729 * _3513.x;
                                frontier_phi_73_pred_1 = _3729 * _3513.y;
                                frontier_phi_73_pred_2 = _3655 * _3501.z;
                                frontier_phi_73_pred_3 = _3655 * _3501.y;
                                frontier_phi_73_pred_4 = _3655 * _3501.x;
                                frontier_phi_73_pred_5 = _3729 * _3513.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3733 = frontier_phi_73_pred;
                            _3734 = frontier_phi_73_pred_1;
                            _3738 = frontier_phi_73_pred_2;
                            _3737 = frontier_phi_73_pred_3;
                            _3736 = frontier_phi_73_pred_4;
                            _3735 = frontier_phi_73_pred_5;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            if (_3460 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3460;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3443;
                        frontier_phi_67_pred_1 = _3444;
                        frontier_phi_67_pred_2 = _3445;
                        frontier_phi_67_pred_3 = _3442;
                        frontier_phi_67_pred_4 = _3441;
                        frontier_phi_67_pred_5 = _3440;
                    }
                    _3108 = frontier_phi_67_pred;
                    _3110 = frontier_phi_67_pred_1;
                    _3112 = frontier_phi_67_pred_2;
                    _3106 = frontier_phi_67_pred_3;
                    _3104 = frontier_phi_67_pred_4;
                    _3102 = frontier_phi_67_pred_5;
                    uint _3247 = _3246 + 1u;
                    if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3240 = _3102;
                        _3241 = _3104;
                        _3242 = _3106;
                        _3243 = _3108;
                        _3244 = _3110;
                        _3245 = _3112;
                        _3246 = _3247;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3110;
                frontier_phi_55_56_ladder_1 = _3112;
                frontier_phi_55_56_ladder_2 = _3108;
                frontier_phi_55_56_ladder_3 = _3106;
                frontier_phi_55_56_ladder_4 = _3104;
                frontier_phi_55_56_ladder_5 = _3102;
            }
            else
            {
                frontier_phi_55_56_ladder = _2996;
                frontier_phi_55_56_ladder_1 = _2998;
                frontier_phi_55_56_ladder_2 = _2994;
                frontier_phi_55_56_ladder_3 = _2992;
                frontier_phi_55_56_ladder_4 = _2990;
                frontier_phi_55_56_ladder_5 = _2988;
            }
            _3101 = frontier_phi_55_56_ladder_5;
            _3103 = frontier_phi_55_56_ladder_4;
            _3105 = frontier_phi_55_56_ladder_3;
            _3107 = frontier_phi_55_56_ladder_2;
            _3109 = frontier_phi_55_56_ladder;
            _3111 = frontier_phi_55_56_ladder_1;
        }
        float _3116 = isnan(1.0) ? _1169 : (isnan(_1169) ? 1.0 : min(_1169, 1.0));
        _2900 = (_3116 * _3107) + _2336;
        _2902 = (_3116 * _3109) + _2338;
        _2904 = (_3116 * _3111) + _2340;
        _2906 = ((_3101 * _1153) * _3116) + _2681;
        _2908 = ((_3103 * _1155) * _3116) + _2683;
        _2910 = ((_3105 * _1156) * _3116) + _2685;
    }
    else
    {
        _2900 = _2336;
        _2902 = _2338;
        _2904 = _2340;
        _2906 = _2681;
        _2908 = _2683;
        _2910 = _2685;
    }
    float _4841 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _4852 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _4863 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    uint _2930 = _282 + 6u;
    float _2938 = _1091 / cbSceneParam._m0[86u].x;
    float _2939 = _1092 / cbSceneParam._m0[86u].y;
    vec4 _2953 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2938, _2939, (log2((isnan(cbSceneParam._m0[77u].w) ? _1026 : (isnan(_1026) ? cbSceneParam._m0[77u].w : min(_1026, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2955 = _2953.x;
    float _2956 = _2953.y;
    float _2957 = _2953.z;
    float _2958 = _2953.w;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    if (_1026 > cbSceneParam._m0[78u].w)
    {
        float _3013 = isnan(_1026) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1026 : min(cbSceneParam._m0[80u].w, _1026));
        float _3014 = _3013 / _1026;
        float _3025 = _3014 * _1076;
        float _3026 = _1077 * _3014;
        float _3027 = (-0.0) - _3026;
        float _3029 = _3014 * _1078;
        float _3031 = (cbSceneParam._m0[77u].w * _3027) / _3013;
        float _3032 = _3031 + cbSceneParam._m0[79u].w;
        float _3033 = cbSceneParam._m0[79u].w - _3026;
        float _3039 = sqrt(((_3025 * _3025) + (_3026 * _3026)) + (_3029 * _3029));
        float _3042 = (1.0 - (cbSceneParam._m0[77u].w / _3013)) * _3039;
        float _3047 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3049 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3202;
        if (abs((_3027 - _3031) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3202 = ((((_3032 > 0.0) ? exp2(_3047 * _3032) : (2.0 - exp2(_3049 * _3032))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3042;
        }
        else
        {
            float _3162 = 1.0 / cbSceneParam._m0[80u].x;
            float _3163 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : max(_3032, _3033));
            float _3164 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : min(_3032, _3033));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            _3202 = ((abs(_3039 / _3027) * cbSceneParam._m0[80u].y) * ((((_3173 - _3174) * 2.0) - ((exp2(_3047 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0)))) - exp2(_3047 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))))) * _3162)) - ((exp2(_3049 * _3173) - exp2(_3049 * _3174)) * _3162))) + (_3042 * cbSceneParam._m0[80u].z);
        }
        vec4 _3204 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2938, _2939, 1.0), 0.0);
        float _3213 = exp2((_3202 * (-1.44269502162933349609375)) * (1.0 - _3204.w));
        float _3214 = log2(_3213);
        float _3230 = log2(_2958);
        _3051 = (exp2(_3230 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].x)) * _3204.x) / cbSceneParam._m0[78u].x)) + _2955;
        _3053 = (exp2(_3230 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].y)) * _3204.y) / cbSceneParam._m0[78u].y)) + _2956;
        _3055 = (exp2(_3230 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].z)) * _3204.z) / cbSceneParam._m0[78u].z)) + _2957;
        _3057 = _3213 * _2958;
    }
    else
    {
        _3051 = _2955;
        _3053 = _2956;
        _3055 = _2957;
        _3057 = _2958;
    }
    float _3069 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3070 = _3069 == 3.0;
    float _3071 = log2(_3057);
    float _3078 = exp2(_3071 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2900 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1169))) + ((_2906 + ((isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0))) * _1975)) * cbPerFrame._m0[3u].x));
    float _3079 = exp2(_3071 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0))) * (_2902 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1169))) + ((_2908 + ((isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0))) * _1975)) * cbPerFrame._m0[3u].x));
    float _3080 = exp2(_3071 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2904 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1169))) + ((_2910 + ((isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0))) * _1975)) * cbPerFrame._m0[3u].x));
    float _3089 = (_3069 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3089 * (_3070 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3051)));
    SV_Target.y = _3089 * (_3070 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3053)));
    SV_Target.z = _3089 * (_3070 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3055)));
    SV_Target.w = cbInstanceData._m0[_2930].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2930].w;
}


