#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1363;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _403 = _401.x;
    float _415 = dot(vec4(_403, _401.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _432 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _365.x) * 2.0) - ((((_403 - _415) * cbMtdParam._m0[23u].w) + _415) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3714 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _440 = (_433 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _441 = (_433 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _442 = (_433 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _481 = _479.x;
    float _491 = dot(vec4(_481, _479.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _505 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _365.y) * 2.0) - ((((_481 - _491) * cbMtdParam._m0[23u].w) + _491) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3725 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _519 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_506 * ((_459.x * cbMtdParam._m0[13u].x) - _440)) + _440);
    float _522 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_506 * ((_459.y * cbMtdParam._m0[13u].y) - _441)) + _441);
    float _525 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_506 * ((_459.z * cbMtdParam._m0[13u].z) - _442)) + _442);
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _566 = ((_538.x - _557) * _433) + _557;
    float _567 = ((_538.y - _558) * _433) + _558;
    float _568 = ((_538.z - _559) * _433) + _559;
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _593 = ((_580.z - _568) * _506) + _568;
    float _596 = ((((_580.x - _566) * _506) + _566) * 2.0) + (-1.0);
    float _598 = ((((_580.y - _567) * _506) + _567) * 2.0) + (-1.0);
    float _599 = dot(vec2(_596, _598), vec2(_596, _598));
    float _3736 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _630 = (((_618.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _596;
    float _631 = (((_618.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _645 = _643.x;
    float _646 = 1.0 - _645;
    float _675 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_645 - _646) * cbMtdParam._m0[24u].w) + _646) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3747 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _684 = ((((cbMtdParam._m0[10u].x - _519) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _676) + _519;
    float _685 = ((((cbMtdParam._m0[10u].y - _522) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _676) + _522;
    float _686 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _525)) * _676) + _525;
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _714 = _712.x;
    float _731 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _714) * _433) + _714;
    float _749 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _731) * _506) + _731;
    float _753 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _749) * cbMtdParam._m0[19u].z) + _749;
    float _755 = _753 - (_753 * _676);
    float _759 = (cbMtdParam._m0[19u].w * (_618.z - _593)) + _593;
    float _763 = ((cbMtdParam._m0[23u].x - _759) * _676) + _759;
    vec4 _782 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _788 = (_782.x * 2.0) + (-1.0);
    float _789 = (_782.y * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _3758 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _806 = (_676 * (((cbMtdParam._m0[22u].z * _630) - _630) + _788)) + _630;
    float _807 = (_676 * (((cbMtdParam._m0[22u].z * _631) - _631) + _789)) + _631;
    float _808 = (_676 * (sqrt(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) - _604)) + _604;
    float _810 = cbMtdParam._m0[22u].x + _618.w;
    float _813 = fma(_808, _244 * NORMAL.x, fma(_807, _251 * TANGENT.x, (_237 * _229) * _806));
    float _816 = fma(_808, _244 * NORMAL.y, fma(_807, _251 * TANGENT.y, (_237 * _230) * _806));
    float _819 = fma(_808, _244 * NORMAL.z, fma(_807, _251 * TANGENT.z, (_237 * _231) * _806));
    float _823 = inversesqrt(dot(vec3(_813, _816, _819), vec3(_813, _816, _819)));
    float _824 = _823 * _813;
    float _825 = _823 * _816;
    float _826 = _823 * _819;
    float _3769 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _827 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _3791 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3802 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3813 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3824 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _832 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _846 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _896 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _886);
    float _897 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _886);
    float _898 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _886);
    float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
    float _903 = _896 * _902;
    float _904 = _897 * _902;
    float _905 = _898 * _902;
    float _911 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _912 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _930 = fma(_826, cbSceneParam._m0[5u].z, fma(_825, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _824));
    float _933 = fma(_826, cbSceneParam._m0[6u].z, fma(_825, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _824));
    float _936 = fma(_826, cbSceneParam._m0[7u].z, fma(_825, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _824));
    uint _950 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _956 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_950].x;
    float _957 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_950].y;
    float _958 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_950].z;
    float _3835 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _962 = 1.0 - _832;
    float _963 = _959 * _962;
    float _964 = _960 * _962;
    float _965 = _961 * _962;
    float _970 = (_959 + (-0.039999999105930328369140625)) * _832;
    float _971 = (_960 + (-0.039999999105930328369140625)) * _832;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _832;
    float _973 = _970 + 0.039999999105930328369140625;
    float _975 = _971 + 0.039999999105930328369140625;
    float _976 = _972 + 0.039999999105930328369140625;
    vec4 _985 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _911, cbSceneParam._m0[86u].y * _912));
    float _989 = ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * TEXCOORD_5.w) * _985.x;
    float _990 = dot(vec3(_824, _825, _826), vec3(_903, _904, _905));
    float _993 = _990 * 2.0;
    float _997 = (_993 * _824) - _903;
    float _998 = (_993 * _825) - _904;
    float _999 = (_993 * _826) - _905;
    float _1003 = abs(dot(vec3(_903, _904, _905), vec3(_824, _825, _826)));
    float _3868 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _1005 = sqrt(_827);
    float _1018 = exp2((_1005 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1005 * 3.0));
    float _1024 = (1.0 - _1018) * ((_1005 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1025 = _1018 * _1005;
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1362;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1087 = fma(_1061, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053));
        float _1091 = fma(_1061, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053));
        float _1095 = fma(_1061, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053));
        float _1120 = _1053 + _824;
        float _1121 = _1057 + _825;
        float _1122 = _1061 + _826;
        float _1132 = fma(_1122, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120)) - _1087;
        float _1133 = fma(_1122, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120)) - _1091;
        float _1134 = fma(_1122, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120)) - _1095;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1087 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1091 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[34u].z) + ((((((_1095 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1190 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1156.x + (-0.5));
        float _1192 = _1190 * (_1156.y + (-0.5));
        float _1193 = _1190 * (_1156.z + (-0.5));
        float _1200 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1163.x + (-0.5));
        float _1202 = _1200 * (_1163.y + (-0.5));
        float _1203 = _1200 * (_1163.z + (-0.5));
        float _1210 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1170.x + (-0.5));
        float _1212 = _1210 * (_1170.y + (-0.5));
        float _1213 = _1210 * (_1170.z + (-0.5));
        float _1220 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1177.x + (-0.5));
        float _1222 = _1220 * (_1177.y + (-0.5));
        float _1223 = _1220 * (_1177.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1244 = (dot(vec3(_824, _825, _826), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1254 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3916 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1256 + 1.0))) + _1261) * _1224;
        float _1271 = _1192 * 0.5;
        float _1272 = _1202 * 0.5;
        float _1273 = _1212 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_824, _825, _826), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3949 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1298 + 1.0))) + _1303) * _1225;
        float _1313 = _1193 * 0.5;
        float _1314 = _1203 * 0.5;
        float _1315 = _1213 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_824, _825, _826), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3982 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1340 + 1.0))) + _1345) * _1226;
        _1362 = _1193;
        _1364 = _1192;
        _1365 = _1191;
        _1366 = _1203;
        _1367 = _1202;
        _1368 = _1201;
        _1369 = _1213;
        _1370 = _1212;
        _1371 = _1211;
        _1372 = _1226;
        _1373 = _1225;
        _1374 = _1224;
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1363;
        _1364 = _1363;
        _1365 = _1363;
        _1366 = _1363;
        _1367 = _1363;
        _1368 = _1363;
        _1369 = _1363;
        _1370 = _1363;
        _1371 = _1363;
        _1372 = _1363;
        _1373 = _1363;
        _1374 = _1363;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1401 = fma(_1061, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053));
        float _1405 = fma(_1061, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053));
        float _1409 = fma(_1061, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053));
        float _1432 = _1053 + _824;
        float _1433 = _1057 + _825;
        float _1434 = _1061 + _826;
        float _1444 = fma(_1434, cbModelParam._m0[30u].z, fma(_1433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432)) - _1401;
        float _1445 = fma(_1434, cbModelParam._m0[31u].z, fma(_1433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432)) - _1405;
        float _1446 = fma(_1434, cbModelParam._m0[32u].z, fma(_1433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432)) - _1409;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1401 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1405 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[35u].z) + ((((((_1409 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1500 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1467.x + (-0.5));
        float _1502 = _1500 * (_1467.y + (-0.5));
        float _1503 = _1500 * (_1467.z + (-0.5));
        float _1510 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1474.x + (-0.5));
        float _1512 = _1510 * (_1474.y + (-0.5));
        float _1513 = _1510 * (_1474.z + (-0.5));
        float _1520 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1481.x + (-0.5));
        float _1522 = _1520 * (_1481.y + (-0.5));
        float _1523 = _1520 * (_1481.z + (-0.5));
        float _1530 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1488.x + (-0.5));
        float _1532 = _1530 * (_1488.y + (-0.5));
        float _1533 = _1530 * (_1488.z + (-0.5));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = _1501 * 0.5;
        float _1538 = _1511 * 0.5;
        float _1539 = _1521 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_824, _825, _826), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4045 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1564 + 1.0))) + _1569) * _1534;
        float _1579 = _1502 * 0.5;
        float _1580 = _1512 * 0.5;
        float _1581 = _1522 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_824, _825, _826), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4078 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1606 + 1.0))) + _1611) * _1535;
        float _1621 = _1503 * 0.5;
        float _1622 = _1513 * 0.5;
        float _1623 = _1523 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_824, _825, _826), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4111 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1648 + 1.0))) + _1653) * _1536;
        _1670 = _1503;
        _1671 = _1502;
        _1672 = _1501;
        _1673 = _1513;
        _1674 = _1512;
        _1675 = _1511;
        _1676 = _1523;
        _1677 = _1522;
        _1678 = _1521;
        _1679 = _1536;
        _1680 = _1535;
        _1681 = _1534;
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
    }
    else
    {
        _1670 = _1363;
        _1671 = _1363;
        _1672 = _1363;
        _1673 = _1363;
        _1674 = _1363;
        _1675 = _1363;
        _1676 = _1363;
        _1677 = _1363;
        _1678 = _1363;
        _1679 = _1363;
        _1680 = _1363;
        _1681 = _1363;
        _1682 = 0.0;
        _1683 = 0.0;
        _1684 = 0.0;
    }
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1375)) + _1375;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1376)) + _1376;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1377)) + _1377;
    float _1717 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1694));
    float _1738 = _997 * 0.5;
    float _1739 = _998 * 0.5;
    float _1740 = _999 * 0.5;
    float _1741 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1744 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1747 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1781;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1754 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1362, _1366, _1369, _1372));
        float _1758 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1762 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1769 = dot(vec4(cbModelParam._m0[39u]), vec4(_1738, _1739, _1740, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1792;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1783 = dot(vec4(cbModelParam._m0[40u]), vec4(_1738, _1739, _1740, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1796 = (_1792 * cbModelParam._m0[1u].x) + (_1781 * (1.0 - cbModelParam._m0[1u].x));
    float _1806 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _827);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1806 : min(cbModelParam._m0[25u].z, _1806));
    float _1889;
    float _1891;
    float _1893;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1856 = fma(_1061, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053)) + cbModelParam._m0[13u].w;
        float _1860 = fma(_1061, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053)) + cbModelParam._m0[14u].w;
        float _1864 = fma(_1061, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053)) + cbModelParam._m0[15u].w;
        float _1867 = fma(_999, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997));
        float _1870 = fma(_999, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997));
        float _1873 = fma(_999, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997));
        float _1901;
        if (_1867 > 0.0)
        {
            _1901 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1901 = frontier_phi_14_12_ladder;
        }
        float _2125;
        if (_1870 > 0.0)
        {
            _2125 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2125 = frontier_phi_23_19_ladder;
        }
        float _2382;
        if (_1873 > 0.0)
        {
            _2382 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2382 = frontier_phi_35_30_ladder;
        }
        float _2384 = isnan(_2125) ? _1901 : (isnan(_1901) ? _2125 : min(_1901, _2125));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1867) + _1856;
        float _2390 = (_2385 * _1870) + _1860;
        float _2391 = (_2385 * _1873) + _1864;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2392;
        float _2396 = _2392 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 > _2396) || ((_2390 < _2394) || ((_2389 < _2394) || (_2389 > _2396))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2391, cbModelParam._m0[9u].z, fma(_2390, cbModelParam._m0[9u].y, _2389 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2391, cbModelParam._m0[10u].z, fma(_2390, cbModelParam._m0[10u].y, _2389 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2391, cbModelParam._m0[11u].z, fma(_2390, cbModelParam._m0[11u].y, _2389 * cbModelParam._m0[11u].x))), _1807);
            frontier_phi_13_35_ladder = _2519.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2519.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2519.x * cbModelParam._m0[1u].y;
        }
        _1889 = frontier_phi_13_35_ladder_2;
        _1891 = frontier_phi_13_35_ladder_1;
        _1893 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1877 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_997, _998, _999), _1807);
        _1889 = _1877.x * cbModelParam._m0[1u].y;
        _1891 = _1877.y * cbModelParam._m0[1u].y;
        _1893 = _1877.z * cbModelParam._m0[1u].y;
    }
    float _1897 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _827);
    float _1898 = isnan(_1897) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1897 : min(cbModelParam._m0[25u].w, _1897));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1952 = fma(_1061, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053)) + cbModelParam._m0[21u].w;
        float _1956 = fma(_1061, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053)) + cbModelParam._m0[22u].w;
        float _1960 = fma(_1061, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053)) + cbModelParam._m0[23u].w;
        float _1963 = fma(_999, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997));
        float _1966 = fma(_999, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997));
        float _1969 = fma(_999, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997));
        float _2130;
        if (_1963 > 0.0)
        {
            _2130 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2130 = frontier_phi_25_21_ladder;
        }
        float _2409;
        if (_1966 > 0.0)
        {
            _2409 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2409 = frontier_phi_37_32_ladder;
        }
        float _2622;
        if (_1969 > 0.0)
        {
            _2622 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2622 = frontier_phi_46_43_ladder;
        }
        float _2624 = isnan(_2409) ? _2130 : (isnan(_2130) ? _2409 : min(_2130, _2409));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _1963) + _1952;
        float _2630 = (_2625 * _1966) + _1956;
        float _2631 = (_2625 * _1969) + _1960;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2633 = (-1.0) - _2632;
        float _2635 = _2632 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2631 > _2635) || ((_2631 < _2633) || ((_2630 > _2635) || ((_2630 < _2633) || ((_2629 < _2633) || (_2629 > _2635))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2631, cbModelParam._m0[17u].z, fma(_2630, cbModelParam._m0[17u].y, _2629 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2631, cbModelParam._m0[18u].z, fma(_2630, cbModelParam._m0[18u].y, _2629 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2631, cbModelParam._m0[19u].z, fma(_2630, cbModelParam._m0[19u].y, _2629 * cbModelParam._m0[19u].x))), _1898);
            frontier_phi_22_46_ladder = _2830.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2830.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2830.x * cbModelParam._m0[1u].z;
        }
        _1988 = frontier_phi_22_46_ladder_2;
        _1990 = frontier_phi_22_46_ladder_1;
        _1992 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_997, _998, _999), _1898);
        _1988 = _1972.x * cbModelParam._m0[1u].z;
        _1990 = _1972.y * cbModelParam._m0[1u].z;
        _1992 = _1972.z * cbModelParam._m0[1u].z;
    }
    float _2005 = (((_1024 * _973) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_1988 - _1889)) + _1889);
    float _2007 = (((_1024 * _975) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_1990 - _1891)) + _1891);
    float _2009 = (((_1024 * _976) + _1025) * _989) * ((cbModelParam._m0[1u].w * (_1992 - _1893)) + _1893);
    float _2012 = fma(_2009, cbSceneParam._m0[89u].z, fma(_2007, cbSceneParam._m0[89u].y, _2005 * cbSceneParam._m0[89u].x));
    float _2015 = fma(_2009, cbSceneParam._m0[90u].z, fma(_2007, cbSceneParam._m0[90u].y, _2005 * cbSceneParam._m0[90u].x));
    float _2018 = fma(_2009, cbSceneParam._m0[91u].z, fma(_2007, cbSceneParam._m0[91u].y, _2005 * cbSceneParam._m0[91u].x));
    vec4 _2026 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_911, _912));
    float _2028 = _2026.w;
    float _2040 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2028);
    float _2041 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2028);
    float _2042 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2028);
    uvec4 _2046 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2048 = _2046.x * 14u;
    uint _2049 = _2048 + 13u;
    float _2056 = _989 + (-1.0);
    float _2061 = (cbLight._m0[_2049].x * _2056) + 1.0;
    float _2062 = (cbLight._m0[_2049].y * _2056) + 1.0;
    float _2063 = (cbLight._m0[_2049].z * _2056) + 1.0;
    float _2064 = (cbLight._m0[_2049].w * _2056) + 1.0;
    uint _2065 = _2048 + 5u;
    float _2071 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
    uint _2075 = _2048 + 4u;
    float _2084 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2088 = _2048 | 1u;
    float _2099 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_824, _825, _826));
    float _2102 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_824, _825, _826));
    float _4247 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _4258 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2109 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2116 = ((cbLight._m0[_2065].x * _2071) * _2109) + (((cbLight._m0[_2075].x * _2040) * _2084) * _2107);
    float _2117 = ((_2071 * cbLight._m0[_2065].y) * _2109) + (((cbLight._m0[_2075].y * _2041) * _2084) * _2107);
    float _2118 = ((_2071 * cbLight._m0[_2065].z) * _2109) + (((cbLight._m0[_2075].z * _2042) * _2084) * _2107);
    uvec4 _2122 = floatBitsToUint(cbLight._m0[_2048 + 12u]);
    bool _2124 = _2122.x == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2124)
    {
        _2135 = _2116;
        _2137 = _2117;
        _2139 = _2118;
    }
    else
    {
        uint _2143 = _2048 + 6u;
        float _2159 = (dot(vec3(cbLight._m0[_2048 + 2u].xyz), vec3(_824, _825, _826)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4269 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2162 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2135 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _2116;
        _2137 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _2117;
        _2139 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _2118;
    }
    bool _2142 = _2122.y == 0u;
    float _2180;
    float _2182;
    float _2184;
    if (_2142)
    {
        _2180 = _2135;
        _2182 = _2137;
        _2184 = _2139;
    }
    else
    {
        uint _2353 = _2048 + 7u;
        float _2369 = (dot(vec3(cbLight._m0[_2048 + 3u].xyz), vec3(_824, _825, _826)) * 0.5) + 0.5;
        float _2370 = _2369 * _2369;
        float _4285 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2371 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2372 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2180 = (((cbLight._m0[_2353].x * 0.3183098733425140380859375) * _2371) * _2372) + _2135;
        _2182 = (((cbLight._m0[_2353].y * 0.3183098733425140380859375) * _2371) * _2372) + _2137;
        _2184 = (((cbLight._m0[_2353].z * 0.3183098733425140380859375) * _2371) * _2372) + _2139;
    }
    uint _2187 = _2048 + 8u;
    float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _827) * 0.949999988079071044921875);
    float _2201 = _2200 * _2200;
    float _2202 = cbLight._m0[_2048].x + _903;
    float _2203 = cbLight._m0[_2048].y + _904;
    float _2204 = cbLight._m0[_2048].z + _905;
    float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
    float _2209 = _2208 * _2202;
    float _2210 = _2208 * _2203;
    float _2211 = _2208 * _2204;
    float _2212 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2048].xyz));
    float _4301 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _4312 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _2216 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2217 = dot(vec3(_824, _825, _826), vec3(_2209, _2210, _2211));
    float _4323 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2209, _2210, _2211));
    float _4334 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2225 = _2201 * _2201;
    float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
    float _2237 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
    float _2238 = 0.959999978542327880859375 - _970;
    float _2240 = 0.959999978542327880859375 - _971;
    float _2241 = 0.959999978542327880859375 - _972;
    float _2248 = 1.0 - _2201;
    float _2259 = (0.5 / (((_2216 * ((_2215 * _2248) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2248) + _2201) * _2215))) * _2215;
    float _4345 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2261 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
    uint _2275 = _2048 + 9u;
    float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _827) * 0.949999988079071044921875);
    float _2287 = _2286 * _2286;
    float _2288 = cbLight._m0[_2088].x + _903;
    float _2289 = cbLight._m0[_2088].y + _904;
    float _2290 = cbLight._m0[_2088].z + _905;
    float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
    float _2295 = _2294 * _2288;
    float _2296 = _2294 * _2289;
    float _2297 = _2294 * _2290;
    float _2298 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2088].xyz));
    float _4356 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2302 = dot(vec3(_824, _825, _826), vec3(_2295, _2296, _2297));
    float _4367 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2306 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2295, _2296, _2297));
    float _4378 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2310 = _2287 * _2287;
    float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
    float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0);
    float _2328 = 1.0 - _2287;
    float _2338 = (0.5 / (((_2216 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2328) + _2287) * _2301))) * _2301;
    float _4389 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2340 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
    float _2350 = (((((_2321 * _2238) + _973) * cbLight._m0[_2275].x) * _2340) * _2071) + ((((cbLight._m0[_2187].x * _2040) * ((_2237 * _2238) + _973)) * _2261) * _2084);
    float _2351 = (((((_2321 * _2240) + _975) * cbLight._m0[_2275].y) * _2340) * _2071) + ((((cbLight._m0[_2187].y * _2041) * ((_2237 * _2240) + _975)) * _2261) * _2084);
    float _2352 = (((((_2321 * _2241) + _976) * cbLight._m0[_2275].z) * _2340) * _2071) + ((((cbLight._m0[_2187].z * _2042) * ((_2237 * _2241) + _976)) * _2261) * _2084);
    float _2414;
    float _2416;
    float _2418;
    if (_2124)
    {
        _2414 = _2350;
        _2416 = _2351;
        _2418 = _2352;
    }
    else
    {
        uint _2420 = _2048 + 2u;
        uint _2424 = _2048 + 10u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _827) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _903;
        float _2441 = cbLight._m0[_2420].y + _904;
        float _2442 = cbLight._m0[_2420].z + _905;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2420].xyz));
        float _4400 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2454 = dot(vec3(_824, _825, _826), vec3(_2447, _2448, _2449));
        float _4411 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4422 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2473 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
        float _2480 = 1.0 - _2439;
        float _2490 = (0.5 / (((_2216 * ((_2453 * _2480) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2480) + _2439) * _2453))) * _2453;
        float _4433 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2492 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2493 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2414 = (((((_2473 * _2238) + _973) * cbLight._m0[_2424].x) * _2492) * _2493) + _2350;
        _2416 = (((((_2473 * _2240) + _975) * cbLight._m0[_2424].y) * _2492) * _2493) + _2351;
        _2418 = (((((_2473 * _2241) + _976) * cbLight._m0[_2424].z) * _2492) * _2493) + _2352;
    }
    float _2528;
    float _2530;
    float _2532;
    if (_2142)
    {
        _2528 = _2414;
        _2530 = _2416;
        _2532 = _2418;
    }
    else
    {
        uint _2539 = _2048 + 3u;
        uint _2543 = _2048 + 11u;
        float _2557 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2539].w)) * _827) * 0.949999988079071044921875);
        float _2558 = _2557 * _2557;
        float _2559 = cbLight._m0[_2539].x + _903;
        float _2560 = cbLight._m0[_2539].y + _904;
        float _2561 = cbLight._m0[_2539].z + _905;
        float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
        float _2566 = _2565 * _2559;
        float _2567 = _2565 * _2560;
        float _2568 = _2565 * _2561;
        float _2569 = dot(vec3(_824, _825, _826), vec3(cbLight._m0[_2539].xyz));
        float _4449 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2573 = dot(vec3(_824, _825, _826), vec3(_2566, _2567, _2568));
        float _4460 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2577 = dot(vec3(cbLight._m0[_2539].xyz), vec3(_2566, _2567, _2568));
        float _4471 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2581 = _2558 * _2558;
        float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
        float _2592 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
        float _2599 = 1.0 - _2558;
        float _2609 = (0.5 / (((_2216 * ((_2572 * _2599) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2216 * _2599) + _2558) * _2572))) * _2572;
        float _4482 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2611 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
        float _2612 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2528 = (((((_2592 * _2238) + _973) * cbLight._m0[_2543].x) * _2611) * _2612) + _2414;
        _2530 = (((((_2592 * _2240) + _975) * cbLight._m0[_2543].y) * _2611) * _2612) + _2416;
        _2532 = (((((_2592 * _2241) + _976) * cbLight._m0[_2543].z) * _2611) * _2612) + _2418;
    }
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_2046.y == 0u)
    {
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2687;
        float _2689 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2687;
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2687;
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.x;
        uint _2714 = uint((float(_2702.y) * floor(float(uint(cbSceneParam._m0[85u].y * _912) / _2703))) + floor(float(uint(cbSceneParam._m0[85u].x * _911) / _2703)));
        float _2724 = (log2(_2690 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2725 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        uint _2728 = uint(isnan(14.0) ? _2725 : (isnan(_2725) ? 14.0 : min(_2725, 14.0)));
        uvec4 _2733 = texelFetch(g_lightClusterGridBuffer, int(((_2728 << 2u) + (_2714 << 6u)) >> 2u));
        uint _2734 = _2733.x;
        uint _2735 = _2702.z;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        if (((((1u << ((_2735 >> 4u) & 15u)) + 4294967295u) & _2734) == 0u) || ((_2735 & 240u) == 0u))
        {
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
        }
        else
        {
            float _2836;
            float _2838;
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            uint _2986 = 0u;
            uint _2995;
            bool _2996;
            for (;;)
            {
                _2995 = texelFetch(g_lightClassification, int((((_2728 << 5u) + (_2714 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                _2996 = _2995 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2996)
                {
                    frontier_phi_61_pred = _2980;
                    frontier_phi_61_pred_1 = _2985;
                    frontier_phi_61_pred_2 = _2984;
                    frontier_phi_61_pred_3 = _2983;
                    frontier_phi_61_pred_4 = _2982;
                    frontier_phi_61_pred_5 = _2981;
                }
                else
                {
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    uint _3110;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2995;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    for (;;)
                    {
                        uint _3114 = uint(findLSB(_3110)) + (_2986 << 5u);
                        uint _3111 = (_3110 + 4294967295u) & _3110;
                        uint _3116 = _3114 * 48u;
                        vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 3u)).x));
                        uint _3136 = (_3114 * 48u) + 4u;
                        vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 3u)).x));
                        uint _3155 = (_3114 * 48u) + 8u;
                        vec3 _3166 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x));
                        float _3170 = _3130.x - _2688;
                        float _3171 = _3130.y - _2689;
                        float _3172 = _3130.z - _2690;
                        float _3173 = dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172));
                        float _3176 = inversesqrt(_3173);
                        float _3177 = _3176 * _3170;
                        float _3178 = _3176 * _3171;
                        float _3179 = _3176 * _3172;
                        float _3180 = dot(vec3(_930, _933, _936), vec3(_3177, _3178, _3179));
                        float _3185 = 1.0 - (_3173 * _3130.w);
                        float _4508 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3186 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3187 = sqrt(_3173) * _3149.w;
                        float _3190 = 1.39999997615814208984375 / (_3187 + 1.39999997615814208984375);
                        float _3191 = _3190 * _3190;
                        float _3194 = ((1.0 - _3191) * _3180) + _3191;
                        float _3197 = _3187 * _3187;
                        float _3201 = ((isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))) * _3186) / ((_3197 * 0.699999988079071044921875) + 1.0);
                        float _3205 = (-0.0) - _2688;
                        float _3206 = (-0.0) - _2689;
                        float _3207 = (-0.0) - _2690;
                        float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                        float _3212 = _3211 * _3205;
                        float _3213 = _3211 * _3206;
                        float _3214 = _3211 * _3207;
                        float _3222 = exp2(log2(1.0 / ((_3197 * 3.5) + 5.0)) * 0.25);
                        float _3223 = 1.0 - _1005;
                        float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                        float _3231 = _3230 * _3230;
                        float _3232 = _3231 * _3231;
                        float _3233 = _3212 + _3177;
                        float _3234 = _3213 + _3178;
                        float _3235 = _3214 + _3179;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3243 = dot(vec3(_930, _933, _936), vec3(_3212, _3213, _3214));
                        float _4524 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3246 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3247 = dot(vec3(_930, _933, _936), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                        float _4535 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3250 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                        float _3255 = _3190 * _3231;
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3180) + _3256;
                        float _4546 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3260 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3261 = 1.0 - _3231;
                        float _3271 = (0.5 / (((_3260 * ((_3246 * _3261) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3260 * _3261) + _3231) * _3246))) * _3260;
                        float _4557 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3282 = (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3254 * _3254) * ((_3197 * 2.1991131305694580078125) + 3.141590118408203125))) * _3186;
                        _3039 = (_3201 * _3149.x) + _3107;
                        _3040 = (_3201 * _3149.y) + _3108;
                        _3041 = (_3201 * _3149.z) + _3109;
                        _3036 = (_3282 * _3166.x) + _3104;
                        _3037 = (_3282 * _3166.y) + _3105;
                        _3038 = (_3282 * _3166.z) + _3106;
                        if (_3111 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3111;
                        }
                    }
                    frontier_phi_61_pred = _3036;
                    frontier_phi_61_pred_1 = _3041;
                    frontier_phi_61_pred_2 = _3040;
                    frontier_phi_61_pred_3 = _3039;
                    frontier_phi_61_pred_4 = _3038;
                    frontier_phi_61_pred_5 = _3037;
                }
                _2836 = frontier_phi_61_pred;
                _2846 = frontier_phi_61_pred_1;
                _2844 = frontier_phi_61_pred_2;
                _2842 = frontier_phi_61_pred_3;
                _2840 = frontier_phi_61_pred_4;
                _2838 = frontier_phi_61_pred_5;
                uint _2987 = _2986 + 1u;
                if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2980 = _2836;
                    _2981 = _2838;
                    _2982 = _2840;
                    _2983 = _2842;
                    _2984 = _2844;
                    _2985 = _2846;
                    _2986 = _2987;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
        }
        uvec4 _2849 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2850 = _2849.z;
        uint _2852 = (_2850 >> 8u) & 15u;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((4294967295u << _2852) & _2734) == 0u)
        {
            _2948 = _2835;
            _2950 = _2837;
            _2952 = _2839;
            _2954 = _2841;
            _2956 = _2843;
            _2958 = _2845;
        }
        else
        {
            float _2973 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
            float _2974 = _2973 * _2688;
            float _2975 = _2973 * _2689;
            float _2976 = _2973 * _2690;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2852 < ((_2850 >> 12u) & 15u))
            {
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _3087 = _2835;
                float _3088 = _2837;
                float _3089 = _2839;
                float _3090 = _2841;
                float _3091 = _2843;
                float _3092 = _2845;
                uint _3093 = _2852;
                uint _3102;
                bool _3103;
                for (;;)
                {
                    _3102 = texelFetch(g_lightClassification, int((((_2728 << 5u) + (_2714 << 9u)) + (_3093 << 2u)) >> 2u)).x;
                    _3103 = _3102 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3103)
                    {
                        frontier_phi_67_pred = _3090;
                        frontier_phi_67_pred_1 = _3091;
                        frontier_phi_67_pred_2 = _3092;
                        frontier_phi_67_pred_3 = _3089;
                        frontier_phi_67_pred_4 = _3088;
                        frontier_phi_67_pred_5 = _3087;
                    }
                    else
                    {
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3300 = _3087;
                        float _3301 = _3088;
                        float _3302 = _3089;
                        float _3303 = _3090;
                        float _3304 = _3091;
                        float _3305 = _3092;
                        uint _3306 = _3102;
                        uint _3307;
                        vec4 _3332;
                        float _3333;
                        vec4 _3348;
                        vec3 _3360;
                        vec4 _3375;
                        vec4 _3390;
                        float _3436;
                        bool _3437;
                        for (;;)
                        {
                            uint _3317 = ((_3093 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3306));
                            _3307 = (_3306 + 4294967295u) & _3306;
                            uint _3319 = _3317 * 40u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3333 = _3332.w;
                            uint _3335 = (_3317 * 40u) + 4u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3317 * 40u) + 8u;
                            _3360 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x));
                            uint _3362 = (_3317 * 40u) + 16u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3317 * 40u) + 20u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3317 * 40u) + 24u;
                            vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3411 = (_3317 * 40u) + 28u;
                            vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            _3436 = fma(_2690, _3424.z, fma(_2689, _3424.y, _3424.x * _2688)) + _3424.w;
                            _3437 = !((fma(_2690, _3405.z, fma(_2689, _3405.y, _3405.x * _2688)) + _3405.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3437)
                            {
                                float _3464 = _3332.x - _2688;
                                float _3465 = _3332.y - _2689;
                                float _3466 = _3332.z - _2690;
                                float _3467 = dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466));
                                float _3470 = inversesqrt(_3467);
                                float _3471 = _3470 * _3464;
                                float _3472 = _3470 * _3465;
                                float _3473 = _3470 * _3466;
                                float _3477 = 1.0 - (_3467 / (_3333 * _3333));
                                float _4568 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3482 = sqrt(_3467) * _3348.w;
                                float _3484 = 1.39999997615814208984375 / (_3482 + 1.39999997615814208984375);
                                float _3485 = _3484 * _3484;
                                float _3488 = ((1.0 - _3485) * dot(vec3(_3471, _3472, _3473), vec3(_930, _933, _936))) + _3485;
                                float _3491 = _3482 * _3482;
                                float _3495 = (fma(_2690, _3375.z, fma(_2689, _3375.y, _3375.x * _2688)) + _3375.w) / _3436;
                                float _3496 = (fma(_2690, _3390.z, fma(_2689, _3390.y, _3390.x * _2688)) + _3390.w) / _3436;
                                float _3500 = 1.0 - dot(vec2(_3495, _3496), vec2(_3495, _3496));
                                float _4584 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3502 = _3501 * (((isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0))) * _3478) / ((_3491 * 0.699999988079071044921875) + 1.0));
                                float _3514 = exp2(log2(1.0 / ((_3491 * 3.5) + 5.0)) * 0.25);
                                float _3515 = 1.0 - _1005;
                                float _3522 = sqrt(1.0 - ((1.0 - (_3515 * _3515)) * (1.0 - (_3514 * _3514))));
                                float _3523 = _3522 * _3522;
                                float _3524 = _3523 * _3523;
                                float _3525 = _3471 - _2974;
                                float _3526 = _3472 - _2975;
                                float _3527 = _3473 - _2976;
                                float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                                float _3535 = dot(vec3(_930, _933, _936), vec3((-0.0) - _2974, (-0.0) - _2975, (-0.0) - _2976));
                                float _4595 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3538 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3539 = dot(vec3(_930, _933, _936), vec3(_3531 * _3525, _3531 * _3526, _3531 * _3527));
                                float _4606 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3542 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3546 = ((_3542 * _3542) * (_3524 + (-1.0))) + 1.0;
                                float _3547 = _3484 * _3523;
                                float _3548 = _3547 * _3547;
                                float _3554 = ((1.0 - _3548) * dot(vec3(_930, _933, _936), vec3(_3471, _3472, _3473))) + _3548;
                                float _4617 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3556 = 1.0 - _3523;
                                float _3566 = (0.5 / (((_3555 * ((_3538 * _3556) + _3523)) + 9.9999999392252902907785028219223e-09) + (((_3555 * _3556) + _3523) * _3538))) * _3555;
                                float _4628 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3576 = (_3501 * _3478) * (((_3524 * 3.1415927410125732421875) * (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) / ((_3546 * _3546) * ((_3491 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3576 * _3360.x;
                                frontier_phi_73_pred_1 = _3576 * _3360.y;
                                frontier_phi_73_pred_2 = _3502 * _3348.z;
                                frontier_phi_73_pred_3 = _3502 * _3348.y;
                                frontier_phi_73_pred_4 = _3502 * _3348.x;
                                frontier_phi_73_pred_5 = _3576 * _3360.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3580 = frontier_phi_73_pred;
                            _3581 = frontier_phi_73_pred_1;
                            _3585 = frontier_phi_73_pred_2;
                            _3584 = frontier_phi_73_pred_3;
                            _3583 = frontier_phi_73_pred_4;
                            _3582 = frontier_phi_73_pred_5;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            _3287 = _3580 + _3300;
                            _3288 = _3581 + _3301;
                            _3289 = _3582 + _3302;
                            if (_3307 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3307;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3290;
                        frontier_phi_67_pred_1 = _3291;
                        frontier_phi_67_pred_2 = _3292;
                        frontier_phi_67_pred_3 = _3289;
                        frontier_phi_67_pred_4 = _3288;
                        frontier_phi_67_pred_5 = _3287;
                    }
                    _2955 = frontier_phi_67_pred;
                    _2957 = frontier_phi_67_pred_1;
                    _2959 = frontier_phi_67_pred_2;
                    _2953 = frontier_phi_67_pred_3;
                    _2951 = frontier_phi_67_pred_4;
                    _2949 = frontier_phi_67_pred_5;
                    uint _3094 = _3093 + 1u;
                    if (_3094 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3087 = _2949;
                        _3088 = _2951;
                        _3089 = _2953;
                        _3090 = _2955;
                        _3091 = _2957;
                        _3092 = _2959;
                        _3093 = _3094;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2957;
                frontier_phi_55_56_ladder_1 = _2959;
                frontier_phi_55_56_ladder_2 = _2955;
                frontier_phi_55_56_ladder_3 = _2953;
                frontier_phi_55_56_ladder_4 = _2951;
                frontier_phi_55_56_ladder_5 = _2949;
            }
            else
            {
                frontier_phi_55_56_ladder = _2843;
                frontier_phi_55_56_ladder_1 = _2845;
                frontier_phi_55_56_ladder_2 = _2841;
                frontier_phi_55_56_ladder_3 = _2839;
                frontier_phi_55_56_ladder_4 = _2837;
                frontier_phi_55_56_ladder_5 = _2835;
            }
            _2948 = frontier_phi_55_56_ladder_5;
            _2950 = frontier_phi_55_56_ladder_4;
            _2952 = frontier_phi_55_56_ladder_3;
            _2954 = frontier_phi_55_56_ladder_2;
            _2956 = frontier_phi_55_56_ladder;
            _2958 = frontier_phi_55_56_ladder_1;
        }
        float _2963 = isnan(1.0) ? _989 : (isnan(_989) ? 1.0 : min(_989, 1.0));
        _2747 = (_2963 * _2954) + _2180;
        _2749 = (_2963 * _2956) + _2182;
        _2751 = (_2963 * _2958) + _2184;
        _2753 = ((_2948 * _973) * _2963) + _2528;
        _2755 = ((_2950 * _975) * _2963) + _2530;
        _2757 = ((_2952 * _976) * _2963) + _2532;
    }
    else
    {
        _2747 = _2180;
        _2749 = _2182;
        _2751 = _2184;
        _2753 = _2528;
        _2755 = _2530;
        _2757 = _2532;
    }
    float _4644 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4655 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4666 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    uint _2777 = _257 + 6u;
    float _2785 = _911 / cbSceneParam._m0[86u].x;
    float _2786 = _912 / cbSceneParam._m0[86u].y;
    vec4 _2800 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2785, _2786, (log2((isnan(cbSceneParam._m0[77u].w) ? _846 : (isnan(_846) ? cbSceneParam._m0[77u].w : min(_846, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2802 = _2800.x;
    float _2803 = _2800.y;
    float _2804 = _2800.z;
    float _2805 = _2800.w;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    if (_846 > cbSceneParam._m0[78u].w)
    {
        float _2860 = isnan(_846) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _846 : min(cbSceneParam._m0[80u].w, _846));
        float _2861 = _2860 / _846;
        float _2872 = _2861 * _896;
        float _2873 = _897 * _2861;
        float _2874 = (-0.0) - _2873;
        float _2876 = _2861 * _898;
        float _2878 = (cbSceneParam._m0[77u].w * _2874) / _2860;
        float _2879 = _2878 + cbSceneParam._m0[79u].w;
        float _2880 = cbSceneParam._m0[79u].w - _2873;
        float _2886 = sqrt(((_2872 * _2872) + (_2873 * _2873)) + (_2876 * _2876));
        float _2889 = (1.0 - (cbSceneParam._m0[77u].w / _2860)) * _2886;
        float _2894 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2896 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3049;
        if (abs((_2874 - _2878) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3049 = ((((_2879 > 0.0) ? exp2(_2894 * _2879) : (2.0 - exp2(_2896 * _2879))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2889;
        }
        else
        {
            float _3009 = 1.0 / cbSceneParam._m0[80u].x;
            float _3010 = isnan(_2880) ? _2879 : (isnan(_2879) ? _2880 : max(_2879, _2880));
            float _3011 = isnan(_2880) ? _2879 : (isnan(_2879) ? _2880 : min(_2879, _2880));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            _3049 = ((abs(_2886 / _2874) * cbSceneParam._m0[80u].y) * ((((_3020 - _3021) * 2.0) - ((exp2(_2894 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0)))) - exp2(_2894 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))))) * _3009)) - ((exp2(_2896 * _3020) - exp2(_2896 * _3021)) * _3009))) + (_2889 * cbSceneParam._m0[80u].z);
        }
        vec4 _3051 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2785, _2786, 1.0), 0.0);
        float _3060 = exp2((_3049 * (-1.44269502162933349609375)) * (1.0 - _3051.w));
        float _3061 = log2(_3060);
        float _3077 = log2(_2805);
        _2898 = (exp2(_3077 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3061 * cbSceneParam._m0[78u].x)) * _3051.x) / cbSceneParam._m0[78u].x)) + _2802;
        _2900 = (exp2(_3077 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3061 * cbSceneParam._m0[78u].y)) * _3051.y) / cbSceneParam._m0[78u].y)) + _2803;
        _2902 = (exp2(_3077 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3061 * cbSceneParam._m0[78u].z)) * _3051.z) / cbSceneParam._m0[78u].z)) + _2804;
        _2904 = _3060 * _2805;
    }
    else
    {
        _2898 = _2802;
        _2900 = _2803;
        _2902 = _2804;
        _2904 = _2805;
    }
    float _2916 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2917 = _2916 == 3.0;
    float _2918 = log2(_2904);
    float _2925 = exp2(_2918 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2747 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _989))) + ((_2753 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _2926 = exp2(_2918 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2749 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _989))) + ((_2755 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _2927 = exp2(_2918 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2751 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _989))) + ((_2757 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1796)) * cbPerFrame._m0[3u].x));
    float _2936 = (_2916 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2936 * (_2917 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2898)));
    SV_Target.y = _2936 * (_2917 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2900)));
    SV_Target.z = _2936 * (_2917 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2902)));
    SV_Target.w = cbInstanceData._m0[_2777].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2777].w;
}


