#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1664;
float _4324;
float _4325;
float _4326;
float _4327;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _247 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _248 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _249 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _255 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _256 = _255 * _247;
    float _257 = _255 * _248;
    float _258 = _255 * _249;
    float _262 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = _262 * NORMAL.x;
    float _264 = _262 * NORMAL.y;
    float _265 = _262 * NORMAL.z;
    float _269 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = _269 * TANGENT.x;
    float _271 = _269 * TANGENT.y;
    float _272 = _269 * TANGENT.z;
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _383.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[23u].w) + _436) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4336 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _461 = (_454 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _462 = (_454 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _463 = (_454 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _294) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _295) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _383.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[23u].w) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4347 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _294) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _295) + cbTextureTilingScale._m0[24u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _574 = _572.x;
    float _584 = dot(vec4(_574, _572.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _596 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _383.z) * 2.0) - ((((_574 - _584) * cbMtdParam._m0[23u].w) + _584) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4358 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _610 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _314.x) * ((_597 * ((_555.x * cbMtdParam._m0[14u].x) - _534)) + _534);
    float _613 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _314.y) * ((_597 * ((_555.y * cbMtdParam._m0[14u].y) - _535)) + _535);
    float _616 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _314.z) * ((_597 * ((_555.z * cbMtdParam._m0[14u].z) - _536)) + _536);
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _653 = _651.x;
    float _654 = _651.y;
    float _655 = _651.z;
    float _662 = ((_634.x - _653) * _454) + _653;
    float _663 = ((_634.y - _654) * _454) + _654;
    float _664 = ((_634.z - _655) * _454) + _655;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _294) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _295) + cbTextureTilingScale._m0[2u].w));
    float _687 = ((_676.x - _662) * _527) + _662;
    float _688 = ((_676.y - _663) * _527) + _663;
    float _689 = ((_676.z - _664) * _527) + _664;
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _294) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _295) + cbTextureTilingScale._m0[23u].w));
    float _714 = ((_701.z - _689) * _597) + _689;
    float _717 = ((((_701.x - _687) * _597) + _687) * 2.0) + (-1.0);
    float _719 = ((((_701.y - _688) * _597) + _688) * 2.0) + (-1.0);
    float _720 = dot(vec2(_717, _719), vec2(_717, _719));
    float _4369 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _725 = sqrt(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))));
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _751 = (((_739.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _717;
    float _752 = (((_739.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _719;
    float _755 = fma(_725, _263, fma(_752, _270, _751 * _256));
    float _758 = fma(_725, _264, fma(_752, _271, _751 * _257));
    float _761 = fma(_725, _265, fma(_752, _272, _751 * _258));
    float _765 = inversesqrt(dot(vec3(_755, _758, _761), vec3(_755, _758, _761)));
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _794 = _792.x;
    float _795 = 1.0 - _794;
    float _803 = (cbMtdParam._m0[19u].x + dot(vec4(_765 * _755, _765 * _758, _765 * _761, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_794 - _795) * cbMtdParam._m0[24u].z) + _795) * cbMtdParam._m0[21u].z);
    float _4380 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _804 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _806 = (-0.0) - cbMtdParam._m0[24u].x;
    float _808 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _808 : (isnan(_808) ? 1.0 : min(_808, 1.0));
    float _816 = _804 - ((_804 * TEXCOORD_8.x) * _809);
    float _817 = _804 - ((_804 * TEXCOORD_8.y) * _809);
    float _818 = _804 - ((_804 * TEXCOORD_8.z) * _809);
    float _825 = (_816 * (cbMtdParam._m0[17u].x - _610)) + _610;
    float _826 = (_817 * (cbMtdParam._m0[17u].y - _613)) + _613;
    float _827 = (_818 * (cbMtdParam._m0[17u].z - _616)) + _616;
    vec4 _839 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _841 = _839.x;
    float _842 = 1.0 - _841;
    float _868 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_841 - _842) * cbMtdParam._m0[24u].w) + _842) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4401 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _869 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _877 = ((((cbMtdParam._m0[10u].x - _825) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _869) + _825;
    float _878 = ((((cbMtdParam._m0[10u].y - _826) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _869) + _826;
    float _879 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _827)) * _869) + _827;
    vec4 _905 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _907 = _905.x;
    float _924 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _907) * _454) + _907;
    float _941 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _294) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _295) + cbTextureTilingScale._m0[21u].w)).x - _924) * _527) + _924;
    float _958 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _294) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _295) + cbTextureTilingScale._m0[10u].w)).x - _941) * _597) + _941;
    float _962 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _958) * cbMtdParam._m0[19u].z) + _958;
    float _964 = _962 - (_962 * _816);
    float _966 = _964 - (_964 * _869);
    float _970 = (cbMtdParam._m0[19u].w * (_739.z - _714)) + _714;
    vec4 _986 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _993 = (_986.x * 2.0) + (-1.0);
    float _994 = (_986.y * 2.0) + (-1.0);
    float _995 = dot(vec2(_993, _994), vec2(_993, _994));
    float _4412 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _1003 = ((_986.z - _970) * _816) + _970;
    float _1006 = ((cbMtdParam._m0[23u].x - _1003) * _869) + _1003;
    vec4 _1029 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1035 = (_1029.x * 2.0) + (-1.0);
    float _1036 = (_1029.y * 2.0) + (-1.0);
    float _1037 = dot(vec2(_1035, _1036), vec2(_1035, _1036));
    float _4423 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _1052 = ((sqrt(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) - _725) * _818) + _725;
    float _1055 = (((_993 - _751) * _816) + _751) + (cbMtdParam._m0[21u].x * _751);
    float _1056 = (((_994 - _752) * _817) + _752) + (cbMtdParam._m0[21u].x * _752);
    float _1067 = (((_1035 - _1055) + (_1055 * cbMtdParam._m0[22u].z)) * _869) + _1055;
    float _1068 = (((_1036 - _1056) + (_1056 * cbMtdParam._m0[22u].z)) * _869) + _1056;
    float _1069 = (_869 * (sqrt(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) - _1052)) + _1052;
    float _1071 = cbMtdParam._m0[22u].x + _739.w;
    float _1074 = fma(_1069, _263, fma(_1068, _270, _1067 * _256));
    float _1077 = fma(_1069, _264, fma(_1068, _271, _1067 * _257));
    float _1080 = fma(_1069, _265, fma(_1068, _272, _1067 * _258));
    float _1084 = inversesqrt(dot(vec3(_1074, _1077, _1080), vec3(_1074, _1077, _1080)));
    float _1085 = _1084 * _1074;
    float _1086 = _1084 * _1077;
    float _1087 = _1084 * _1080;
    float _4434 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1088 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _4445 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _4456 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4467 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4478 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4489 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _1093 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _1107 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1157 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1147);
    float _1158 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1147);
    float _1159 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1147);
    float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
    float _1164 = _1157 * _1163;
    float _1165 = _1158 * _1163;
    float _1166 = _1159 * _1163;
    vec4 _1171 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1173 = _1171.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1345 = sqrt(((_1157 * _1157) + (_1158 * _1158)) + (_1159 * _1159));
        float _1351 = (cbMatDynParam._m0[5u].x * _1345) + cbMatDynParam._m0[5u].y;
        float _4500 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1356 = (cbMatDynParam._m0[5u].z * _1345) + cbMatDynParam._m0[5u].w;
        float _4511 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) - _1352)) + _1352) < ((_1173 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1184 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1185 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1203 = fma(_1087, cbSceneParam._m0[5u].z, fma(_1086, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1085));
    float _1206 = fma(_1087, cbSceneParam._m0[6u].z, fma(_1086, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1085));
    float _1209 = fma(_1087, cbSceneParam._m0[7u].z, fma(_1086, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1085));
    uint _1222 = _275 + 9u;
    uint _1223 = _1222 + uint(cbMatDynParam._m0[0u].w);
    float _1229 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * cbInstanceData._m0[_1223].x;
    float _1230 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * cbInstanceData._m0[_1223].y;
    float _1231 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * cbInstanceData._m0[_1223].z;
    float _4522 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1232 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _4533 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
    float _1233 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _1234 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _1235 = 1.0 - _1093;
    float _1236 = _1232 * _1235;
    float _1237 = _1233 * _1235;
    float _1238 = _1234 * _1235;
    float _1243 = (_1232 + (-0.039999999105930328369140625)) * _1093;
    float _1244 = (_1233 + (-0.039999999105930328369140625)) * _1093;
    float _1245 = (_1234 + (-0.039999999105930328369140625)) * _1093;
    float _1246 = _1243 + 0.039999999105930328369140625;
    float _1248 = _1244 + 0.039999999105930328369140625;
    float _1249 = _1245 + 0.039999999105930328369140625;
    vec4 _1258 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1184, cbSceneParam._m0[86u].y * _1185));
    float _1262 = ((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * TEXCOORD_5.w) * _1258.x;
    float _1263 = dot(vec3(_1085, _1086, _1087), vec3(_1164, _1165, _1166));
    float _1266 = _1263 * 2.0;
    float _1270 = (_1266 * _1085) - _1164;
    float _1271 = (_1266 * _1086) - _1165;
    float _1272 = (_1266 * _1087) - _1166;
    float _1276 = abs(dot(vec3(_1164, _1165, _1166), vec3(_1085, _1086, _1087)));
    float _4555 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
    float _1278 = sqrt(_1088);
    float _1291 = exp2((_1278 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1278 * 3.0));
    float _1297 = (1.0 - _1291) * ((_1278 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1298 = _1291 * _1278;
    float _1326 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1330 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1334 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1663;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1388 = fma(_1334, cbModelParam._m0[26u].z, fma(_1330, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1326));
        float _1392 = fma(_1334, cbModelParam._m0[27u].z, fma(_1330, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1326));
        float _1396 = fma(_1334, cbModelParam._m0[28u].z, fma(_1330, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1326));
        float _1421 = _1326 + _1085;
        float _1422 = _1330 + _1086;
        float _1423 = _1334 + _1087;
        float _1433 = fma(_1423, cbModelParam._m0[26u].z, fma(_1422, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1421)) - _1388;
        float _1434 = fma(_1423, cbModelParam._m0[27u].z, fma(_1422, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1421)) - _1392;
        float _1435 = fma(_1423, cbModelParam._m0[28u].z, fma(_1422, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1421)) - _1396;
        float _1439 = inversesqrt(dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435)));
        float _1452 = ((_1439 * _1433) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1388 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1439 * _1434) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1392 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1454 = ((_1439 * _1435) / cbModelParam._m0[34u].z) + ((((((_1396 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        float _1491 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1457.x + (-0.5));
        float _1493 = _1491 * (_1457.y + (-0.5));
        float _1494 = _1491 * (_1457.z + (-0.5));
        float _1501 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1464.x + (-0.5));
        float _1503 = _1501 * (_1464.y + (-0.5));
        float _1504 = _1501 * (_1464.z + (-0.5));
        float _1511 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1471.x + (-0.5));
        float _1513 = _1511 * (_1471.y + (-0.5));
        float _1514 = _1511 * (_1471.z + (-0.5));
        float _1521 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1478.x + (-0.5));
        float _1523 = _1521 * (_1478.y + (-0.5));
        float _1524 = _1521 * (_1478.z + (-0.5));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = _1492 * 0.5;
        float _1529 = _1502 * 0.5;
        float _1530 = _1512 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1545 = (dot(vec3(_1085, _1086, _1087), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4581 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1555 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4592 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4603 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_1557 + 1.0))) + _1562) * _1525;
        float _1572 = _1493 * 0.5;
        float _1573 = _1503 * 0.5;
        float _1574 = _1513 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_1085, _1086, _1087), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4614 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4625 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4636 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_1599 + 1.0))) + _1604) * _1526;
        float _1614 = _1494 * 0.5;
        float _1615 = _1504 * 0.5;
        float _1616 = _1514 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_1085, _1086, _1087), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4647 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4658 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4669 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_1641 + 1.0))) + _1646) * _1527;
        _1663 = _1494;
        _1665 = _1493;
        _1666 = _1492;
        _1667 = _1504;
        _1668 = _1503;
        _1669 = _1502;
        _1670 = _1514;
        _1671 = _1513;
        _1672 = _1512;
        _1673 = _1527;
        _1674 = _1526;
        _1675 = _1525;
        _1676 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1677 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1678 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
    }
    else
    {
        _1663 = _1664;
        _1665 = _1664;
        _1666 = _1664;
        _1667 = _1664;
        _1668 = _1664;
        _1669 = _1664;
        _1670 = _1664;
        _1671 = _1664;
        _1672 = _1664;
        _1673 = _1664;
        _1674 = _1664;
        _1675 = _1664;
        _1676 = 0.0;
        _1677 = 0.0;
        _1678 = 0.0;
    }
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    float _1979;
    float _1980;
    float _1981;
    float _1982;
    float _1983;
    float _1984;
    float _1985;
    float _1986;
    float _1987;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1704 = fma(_1334, cbModelParam._m0[30u].z, fma(_1330, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326));
        float _1708 = fma(_1334, cbModelParam._m0[31u].z, fma(_1330, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326));
        float _1712 = fma(_1334, cbModelParam._m0[32u].z, fma(_1330, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326));
        float _1735 = _1326 + _1085;
        float _1736 = _1330 + _1086;
        float _1737 = _1334 + _1087;
        float _1747 = fma(_1737, cbModelParam._m0[30u].z, fma(_1736, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1735)) - _1704;
        float _1748 = fma(_1737, cbModelParam._m0[31u].z, fma(_1736, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1735)) - _1708;
        float _1749 = fma(_1737, cbModelParam._m0[32u].z, fma(_1736, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1735)) - _1712;
        float _1753 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
        float _1766 = ((_1753 * _1747) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1704 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1767 = ((_1753 * _1748) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1708 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1768 = ((_1753 * _1749) / cbModelParam._m0[35u].z) + ((((((_1712 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1770 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1766, _1767, _1768), 0.0);
        vec4 _1777 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1766, _1767, _1768), 0.0);
        vec4 _1784 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1766, _1767, _1768), 0.0);
        vec4 _1791 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1766, _1767, _1768), 0.0);
        float _1803 = exp2((_1770.w + (-0.5)) * 20.0) * 2.0;
        float _1804 = _1803 * (_1770.x + (-0.5));
        float _1805 = _1803 * (_1770.y + (-0.5));
        float _1806 = _1803 * (_1770.z + (-0.5));
        float _1813 = exp2((_1777.w + (-0.5)) * 20.0) * 2.0;
        float _1814 = _1813 * (_1777.x + (-0.5));
        float _1815 = _1813 * (_1777.y + (-0.5));
        float _1816 = _1813 * (_1777.z + (-0.5));
        float _1823 = exp2((_1784.w + (-0.5)) * 20.0) * 2.0;
        float _1824 = _1823 * (_1784.x + (-0.5));
        float _1825 = _1823 * (_1784.y + (-0.5));
        float _1826 = _1823 * (_1784.z + (-0.5));
        float _1833 = exp2((_1791.w + (-0.5)) * 20.0) * 2.0;
        float _1834 = _1833 * (_1791.x + (-0.5));
        float _1835 = _1833 * (_1791.y + (-0.5));
        float _1836 = _1833 * (_1791.z + (-0.5));
        float _1837 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1838 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1839 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1840 = _1804 * 0.5;
        float _1841 = _1814 * 0.5;
        float _1842 = _1824 * 0.5;
        float _1843 = dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842));
        float _1848 = (_1843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1843);
        float _1856 = (dot(vec3(_1085, _1086, _1087), vec3(_1848 * _1840, _1848 * _1841, _1848 * _1842)) + 1.0) * 0.5;
        float _4710 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842)) / (_1837 + 9.9999997473787516355514526367188e-06);
        float _4721 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _1867 = _1866 * 2.0;
        float _1871 = (1.0 - _1866) / (_1866 + 1.0);
        float _4732 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _1881 = ((((1.0 - _1872) * (_1867 + 2.0)) * exp2(log2(isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_1867 + 1.0))) + _1872) * _1837;
        float _1882 = _1805 * 0.5;
        float _1883 = _1815 * 0.5;
        float _1884 = _1825 * 0.5;
        float _1885 = dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884));
        float _1890 = (_1885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1885);
        float _1898 = (dot(vec3(_1085, _1086, _1087), vec3(_1890 * _1882, _1890 * _1883, _1890 * _1884)) + 1.0) * 0.5;
        float _4743 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1907 = sqrt(((_1883 * _1883) + (_1882 * _1882)) + (_1884 * _1884)) / (_1838 + 9.9999997473787516355514526367188e-06);
        float _4754 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _1909 = _1908 * 2.0;
        float _1913 = (1.0 - _1908) / (_1908 + 1.0);
        float _4765 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _1923 = ((((1.0 - _1914) * (_1909 + 2.0)) * exp2(log2(isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_1909 + 1.0))) + _1914) * _1838;
        float _1924 = _1806 * 0.5;
        float _1925 = _1816 * 0.5;
        float _1926 = _1826 * 0.5;
        float _1927 = dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926));
        float _1932 = (_1927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1927);
        float _1940 = (dot(vec3(_1085, _1086, _1087), vec3(_1932 * _1924, _1932 * _1925, _1932 * _1926)) + 1.0) * 0.5;
        float _4776 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1949 = sqrt(((_1925 * _1925) + (_1924 * _1924)) + (_1926 * _1926)) / (_1839 + 9.9999997473787516355514526367188e-06);
        float _4787 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
        float _1951 = _1950 * 2.0;
        float _1955 = (1.0 - _1950) / (_1950 + 1.0);
        float _4798 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _1965 = ((((1.0 - _1956) * (_1951 + 2.0)) * exp2(log2(isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_1951 + 1.0))) + _1956) * _1839;
        _1973 = _1806;
        _1974 = _1805;
        _1975 = _1804;
        _1976 = _1816;
        _1977 = _1815;
        _1978 = _1814;
        _1979 = _1826;
        _1980 = _1825;
        _1981 = _1824;
        _1982 = _1839;
        _1983 = _1838;
        _1984 = _1837;
        _1985 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)));
        _1986 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)));
        _1987 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)));
    }
    else
    {
        _1973 = _1664;
        _1974 = _1664;
        _1975 = _1664;
        _1976 = _1664;
        _1977 = _1664;
        _1978 = _1664;
        _1979 = _1664;
        _1980 = _1664;
        _1981 = _1664;
        _1982 = _1664;
        _1983 = _1664;
        _1984 = _1664;
        _1985 = 0.0;
        _1986 = 0.0;
        _1987 = 0.0;
    }
    float _1997 = (cbModelParam._m0[1u].x * (_1985 - _1676)) + _1676;
    float _1998 = (cbModelParam._m0[1u].x * (_1986 - _1677)) + _1677;
    float _1999 = (cbModelParam._m0[1u].x * (_1987 - _1678)) + _1678;
    float _2020 = fma(_1999, cbSceneParam._m0[89u].z, fma(_1998, cbSceneParam._m0[89u].y, _1997 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_1999, cbSceneParam._m0[90u].z, fma(_1998, cbSceneParam._m0[90u].y, _1997 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_1999, cbSceneParam._m0[91u].z, fma(_1998, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1997));
    float _2041 = _1270 * 0.5;
    float _2042 = _1271 * 0.5;
    float _2043 = _1272 * 0.5;
    float _2044 = dot(vec4(_2041, _2042, _2043, 1.0), vec4(_1975, _1978, _1981, _1984));
    float _2047 = dot(vec4(_2041, _2042, _2043, 1.0), vec4(_1974, _1977, _1980, _1983));
    float _2050 = dot(vec4(_2041, _2042, _2043, 1.0), vec4(_1973, _1976, _1979, _1982));
    float _2084;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2057 = dot(vec4(_2041, _2042, _2043, 1.0), vec4(_1663, _1667, _1670, _1673));
        float _2061 = dot(vec4(_2041, _2042, _2043, 1.0), vec4(_1665, _1668, _1671, _1674));
        float _2065 = dot(vec4(_2041, _2042, _2043, 1.0), vec4(_1666, _1669, _1672, _1675));
        float _2072 = dot(vec4(cbModelParam._m0[39u]), vec4(_2041, _2042, _2043, 1.0));
        _2084 = dot(vec3(isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0)), isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0)), isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2072) ? 0.0 : (isnan(0.0) ? _2072 : max(0.0, _2072))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2084 = 1.0;
    }
    float _2095;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2086 = dot(vec4(cbModelParam._m0[40u]), vec4(_2041, _2042, _2043, 1.0));
        _2095 = dot(vec3(isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0)), isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0)), isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2086) ? 0.0 : (isnan(0.0) ? _2086 : max(0.0, _2086))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2095 = 1.0;
    }
    float _2099 = (_2095 * cbModelParam._m0[1u].x) + (_2084 * (1.0 - cbModelParam._m0[1u].x));
    float _2109 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1088);
    float _2110 = isnan(_2109) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2109 : min(cbModelParam._m0[25u].z, _2109));
    float _2190;
    float _2192;
    float _2194;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2157 = fma(_1334, cbModelParam._m0[13u].z, fma(_1330, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1326)) + cbModelParam._m0[13u].w;
        float _2161 = fma(_1334, cbModelParam._m0[14u].z, fma(_1330, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1326)) + cbModelParam._m0[14u].w;
        float _2165 = fma(_1334, cbModelParam._m0[15u].z, fma(_1330, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1326)) + cbModelParam._m0[15u].w;
        float _2168 = fma(_1272, cbModelParam._m0[13u].z, fma(_1271, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1270));
        float _2171 = fma(_1272, cbModelParam._m0[14u].z, fma(_1271, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1270));
        float _2174 = fma(_1272, cbModelParam._m0[15u].z, fma(_1271, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1270));
        float _2202;
        if (_2168 > 0.0)
        {
            _2202 = abs((1.0 - _2157) / _2168);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2168 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2157 + 1.0) / _2168);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2202 = frontier_phi_17_15_ladder;
        }
        float _2374;
        if (_2171 > 0.0)
        {
            _2374 = abs((1.0 - _2161) / _2171);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2171 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2161 + 1.0) / _2171);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2374 = frontier_phi_26_22_ladder;
        }
        float _2669;
        if (_2174 > 0.0)
        {
            _2669 = abs((1.0 - _2165) / _2174);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2174 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2165 + 1.0) / _2174);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2669 = frontier_phi_38_33_ladder;
        }
        float _2671 = isnan(_2374) ? _2202 : (isnan(_2202) ? _2374 : min(_2202, _2374));
        float _2672 = isnan(_2669) ? _2671 : (isnan(_2671) ? _2669 : min(_2671, _2669));
        float _2676 = (_2672 * _2168) + _2157;
        float _2677 = (_2672 * _2171) + _2161;
        float _2678 = (_2672 * _2174) + _2165;
        float _2679 = _2672 * 9.9999997473787516355514526367188e-05;
        float _2681 = (-1.0) - _2679;
        float _2683 = _2679 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2678 > _2683) || ((_2678 < _2681) || ((_2677 > _2683) || ((_2677 < _2681) || ((_2676 < _2681) || (_2676 > _2683))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2823 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2678, cbModelParam._m0[9u].z, fma(_2677, cbModelParam._m0[9u].y, _2676 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2678, cbModelParam._m0[10u].z, fma(_2677, cbModelParam._m0[10u].y, _2676 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2678, cbModelParam._m0[11u].z, fma(_2677, cbModelParam._m0[11u].y, _2676 * cbModelParam._m0[11u].x))), _2110);
            frontier_phi_16_38_ladder = _2823.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2823.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2823.x * cbModelParam._m0[1u].y;
        }
        _2190 = frontier_phi_16_38_ladder_2;
        _2192 = frontier_phi_16_38_ladder_1;
        _2194 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2178 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1270, _1271, _1272), _2110);
        _2190 = _2178.x * cbModelParam._m0[1u].y;
        _2192 = _2178.y * cbModelParam._m0[1u].y;
        _2194 = _2178.z * cbModelParam._m0[1u].y;
    }
    float _2198 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1088);
    float _2199 = isnan(_2198) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2198 : min(cbModelParam._m0[25u].w, _2198));
    float _2289;
    float _2291;
    float _2293;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2253 = fma(_1334, cbModelParam._m0[21u].z, fma(_1330, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1326)) + cbModelParam._m0[21u].w;
        float _2257 = fma(_1334, cbModelParam._m0[22u].z, fma(_1330, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1326)) + cbModelParam._m0[22u].w;
        float _2261 = fma(_1334, cbModelParam._m0[23u].z, fma(_1330, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1326)) + cbModelParam._m0[23u].w;
        float _2264 = fma(_1272, cbModelParam._m0[21u].z, fma(_1271, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1270));
        float _2267 = fma(_1272, cbModelParam._m0[22u].z, fma(_1271, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1270));
        float _2270 = fma(_1272, cbModelParam._m0[23u].z, fma(_1271, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1270));
        float _2379;
        if (_2264 > 0.0)
        {
            _2379 = abs((1.0 - _2253) / _2264);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2264 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2253 + 1.0) / _2264);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2379 = frontier_phi_28_24_ladder;
        }
        float _2696;
        if (_2267 > 0.0)
        {
            _2696 = abs((1.0 - _2257) / _2267);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2267 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2257 + 1.0) / _2267);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2696 = frontier_phi_40_35_ladder;
        }
        float _3034;
        if (_2270 > 0.0)
        {
            _3034 = abs((1.0 - _2261) / _2270);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2270 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2261 + 1.0) / _2270);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3034 = frontier_phi_50_47_ladder;
        }
        float _3036 = isnan(_2696) ? _2379 : (isnan(_2379) ? _2696 : min(_2379, _2696));
        float _3037 = isnan(_3034) ? _3036 : (isnan(_3036) ? _3034 : min(_3036, _3034));
        float _3041 = (_3037 * _2264) + _2253;
        float _3042 = (_3037 * _2267) + _2257;
        float _3043 = (_3037 * _2270) + _2261;
        float _3044 = _3037 * 9.9999997473787516355514526367188e-05;
        float _3045 = (-1.0) - _3044;
        float _3047 = _3044 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3043 > _3047) || ((_3043 < _3045) || ((_3042 > _3047) || ((_3042 < _3045) || ((_3041 < _3045) || (_3041 > _3047))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3165 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3043, cbModelParam._m0[17u].z, fma(_3042, cbModelParam._m0[17u].y, _3041 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3043, cbModelParam._m0[18u].z, fma(_3042, cbModelParam._m0[18u].y, _3041 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3043, cbModelParam._m0[19u].z, fma(_3042, cbModelParam._m0[19u].y, _3041 * cbModelParam._m0[19u].x))), _2199);
            frontier_phi_25_50_ladder = _3165.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3165.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3165.x * cbModelParam._m0[1u].z;
        }
        _2289 = frontier_phi_25_50_ladder_2;
        _2291 = frontier_phi_25_50_ladder_1;
        _2293 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2273 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1270, _1271, _1272), _2199);
        _2289 = _2273.x * cbModelParam._m0[1u].z;
        _2291 = _2273.y * cbModelParam._m0[1u].z;
        _2293 = _2273.z * cbModelParam._m0[1u].z;
    }
    float _2306 = (((_1297 * _1246) + _1298) * _1262) * ((cbModelParam._m0[1u].w * (_2289 - _2190)) + _2190);
    float _2308 = (((_1297 * _1248) + _1298) * _1262) * ((cbModelParam._m0[1u].w * (_2291 - _2192)) + _2192);
    float _2310 = (((_1297 * _1249) + _1298) * _1262) * ((cbModelParam._m0[1u].w * (_2293 - _2194)) + _2194);
    float _2313 = fma(_2310, cbSceneParam._m0[89u].z, fma(_2308, cbSceneParam._m0[89u].y, _2306 * cbSceneParam._m0[89u].x));
    float _2316 = fma(_2310, cbSceneParam._m0[90u].z, fma(_2308, cbSceneParam._m0[90u].y, _2306 * cbSceneParam._m0[90u].x));
    float _2319 = fma(_2310, cbSceneParam._m0[91u].z, fma(_2308, cbSceneParam._m0[91u].y, _2306 * cbSceneParam._m0[91u].x));
    float _2353 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2357 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2361 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2365 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2366 = _2353 / _2365;
    float _2367 = _2357 / _2365;
    float _2368 = _2361 / _2365;
    float _2515;
    float _2516;
    float _2517;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2395 = ((uint(_2368 > cbSceneParam._m0[59u].y) + uint(_2368 > cbSceneParam._m0[59u].x)) + uint(_2368 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2396 = _2395 + 43u;
        uint _2404 = _2395 + 44u;
        uint _2412 = _2395 + 45u;
        uint _2420 = _2395 + 46u;
        float _2431 = fma(_2365, cbSceneParam._m0[_2396].w, fma(_2361, cbSceneParam._m0[_2396].z, fma(_2357, cbSceneParam._m0[_2396].y, _2353 * cbSceneParam._m0[_2396].x)));
        float _2435 = fma(_2365, cbSceneParam._m0[_2404].w, fma(_2361, cbSceneParam._m0[_2404].z, fma(_2357, cbSceneParam._m0[_2404].y, _2353 * cbSceneParam._m0[_2404].x)));
        float _2443 = fma(_2365, cbSceneParam._m0[_2420].w, fma(_2361, cbSceneParam._m0[_2420].z, fma(_2357, cbSceneParam._m0[_2420].y, _2353 * cbSceneParam._m0[_2420].x)));
        float _2448 = cbSceneParam._m0[33u].z * _2443;
        float _2450 = cbSceneParam._m0[33u].w * _2443;
        float _2453 = fma(_2365, cbSceneParam._m0[_2412].w, fma(_2361, cbSceneParam._m0[_2412].z, fma(_2357, cbSceneParam._m0[_2412].y, _2353 * cbSceneParam._m0[_2412].x))) / _2443;
        float _2501 = (cbSceneParam._m0[33u].x - sqrt(((_2367 * _2367) + (_2366 * _2366)) + (_2368 * _2368))) * cbSceneParam._m0[33u].y;
        float _4924 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2508 = (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2448 + _2431) / _2443, (_2450 + _2435) / _2443), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2450 + _2431) / _2443, (_2435 - _2448) / _2443), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2431 - _2448) / _2443, (_2435 - _2450) / _2443), _2453), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2431 - _2450) / _2443, (_2448 + _2435) / _2443), _2453), 0.0)).x), vec4(0.25)));
        _2515 = 1.0 - (_2508 * cbSceneParam._m0[34u].x);
        _2516 = 1.0 - (_2508 * cbSceneParam._m0[34u].y);
        _2517 = 1.0 - (_2508 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2515 = 1.0;
        _2516 = 1.0;
        _2517 = 1.0;
    }
    float _2581;
    float _2583;
    float _2585;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2569 = fma(_2365, cbSceneParam._m0[63u].w, fma(_2361, cbSceneParam._m0[63u].z, fma(_2357, cbSceneParam._m0[63u].y, _2353 * cbSceneParam._m0[63u].x)));
        float _2570 = fma(_2365, cbSceneParam._m0[60u].w, fma(_2361, cbSceneParam._m0[60u].z, fma(_2357, cbSceneParam._m0[60u].y, _2353 * cbSceneParam._m0[60u].x))) / _2569;
        float _2571 = fma(_2365, cbSceneParam._m0[61u].w, fma(_2361, cbSceneParam._m0[61u].z, fma(_2357, cbSceneParam._m0[61u].y, _2353 * cbSceneParam._m0[61u].x))) / _2569;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2570 >= cbSceneParam._m0[64u].x) && (_2571 >= cbSceneParam._m0[64u].y)) && (_2570 <= cbSceneParam._m0[64u].z)) && (_2571 <= cbSceneParam._m0[64u].w))
        {
            float _2709 = fma(_2365, cbSceneParam._m0[62u].w, fma(_2361, cbSceneParam._m0[62u].z, fma(_2357, cbSceneParam._m0[62u].y, _2353 * cbSceneParam._m0[62u].x))) / _2569;
            float _2713 = isnan(cbSceneParam._m0[41u].w) ? _2709 : (isnan(_2709) ? cbSceneParam._m0[41u].w : max(_2709, cbSceneParam._m0[41u].w));
            float _2756 = (cbSceneParam._m0[33u].x - sqrt(((_2367 * _2367) + (_2366 * _2366)) + (_2368 * _2368))) * cbSceneParam._m0[33u].y;
            float _4940 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
            float _2763 = (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2570, cbSceneParam._m0[33u].w + _2571), _2713), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2570, _2571 - cbSceneParam._m0[33u].z), _2713), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2570 - cbSceneParam._m0[33u].z, _2571 - cbSceneParam._m0[33u].w), _2713), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2570 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2571), _2713), 0.0)).x), vec4(0.25)));
            float _2767 = 1.0 - (_2763 * cbSceneParam._m0[34u].x);
            float _2768 = 1.0 - (_2763 * cbSceneParam._m0[34u].y);
            float _2769 = 1.0 - (_2763 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2769) ? _2517 : (isnan(_2517) ? _2769 : min(_2517, _2769));
            frontier_phi_37_36_ladder_1 = isnan(_2768) ? _2516 : (isnan(_2516) ? _2768 : min(_2516, _2768));
            frontier_phi_37_36_ladder_2 = isnan(_2767) ? _2515 : (isnan(_2515) ? _2767 : min(_2515, _2767));
        }
        else
        {
            frontier_phi_37_36_ladder = _2517;
            frontier_phi_37_36_ladder_1 = _2516;
            frontier_phi_37_36_ladder_2 = _2515;
        }
        _2581 = frontier_phi_37_36_ladder_2;
        _2583 = frontier_phi_37_36_ladder_1;
        _2585 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2581 = _2515;
        _2583 = _2516;
        _2585 = _2517;
    }
    uvec4 _2590 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2592 = _2590.x * 14u;
    uint _2593 = _2592 + 13u;
    float _2600 = _1262 + (-1.0);
    float _2605 = (cbLight._m0[_2593].x * _2600) + 1.0;
    float _2606 = (cbLight._m0[_2593].y * _2600) + 1.0;
    float _2607 = (cbLight._m0[_2593].z * _2600) + 1.0;
    float _2608 = (cbLight._m0[_2593].w * _2600) + 1.0;
    uint _2609 = _2592 + 5u;
    float _2615 = isnan(1.0) ? _2606 : (isnan(_2606) ? 1.0 : min(_2606, 1.0));
    uint _2619 = _2592 + 4u;
    float _2628 = isnan(1.0) ? _2605 : (isnan(_2605) ? 1.0 : min(_2605, 1.0));
    uint _2632 = _2592 | 1u;
    float _2643 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_1085, _1086, _1087));
    float _2646 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_1085, _1086, _1087));
    float _4976 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _4987 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2651 = (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * 0.3183098733425140380859375;
    float _2653 = (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * 0.3183098733425140380859375;
    float _2660 = ((cbLight._m0[_2609].x * _2615) * _2653) + (((cbLight._m0[_2619].x * _2581) * _2628) * _2651);
    float _2661 = ((_2615 * cbLight._m0[_2609].y) * _2653) + (((cbLight._m0[_2619].y * _2583) * _2628) * _2651);
    float _2662 = ((_2615 * cbLight._m0[_2609].z) * _2653) + (((cbLight._m0[_2619].z * _2585) * _2628) * _2651);
    uvec4 _2666 = floatBitsToUint(cbLight._m0[_2592 + 12u]);
    bool _2668 = _2666.x == 0u;
    float _2770;
    float _2772;
    float _2774;
    if (_2668)
    {
        _2770 = _2660;
        _2772 = _2661;
        _2774 = _2662;
    }
    else
    {
        uint _2778 = _2592 + 6u;
        float _2794 = (dot(vec3(cbLight._m0[_2592 + 2u].xyz), vec3(_1085, _1086, _1087)) * 0.5) + 0.5;
        float _2795 = _2794 * _2794;
        float _4998 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2796 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
        float _2797 = isnan(1.0) ? _2607 : (isnan(_2607) ? 1.0 : min(_2607, 1.0));
        _2770 = (((cbLight._m0[_2778].x * 0.3183098733425140380859375) * _2796) * _2797) + _2660;
        _2772 = (((cbLight._m0[_2778].y * 0.3183098733425140380859375) * _2796) * _2797) + _2661;
        _2774 = (((cbLight._m0[_2778].z * 0.3183098733425140380859375) * _2796) * _2797) + _2662;
    }
    bool _2777 = _2666.y == 0u;
    float _2832;
    float _2834;
    float _2836;
    if (_2777)
    {
        _2832 = _2770;
        _2834 = _2772;
        _2836 = _2774;
    }
    else
    {
        uint _3005 = _2592 + 7u;
        float _3021 = (dot(vec3(cbLight._m0[_2592 + 3u].xyz), vec3(_1085, _1086, _1087)) * 0.5) + 0.5;
        float _3022 = _3021 * _3021;
        float _5014 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
        float _3023 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
        float _3024 = isnan(1.0) ? _2608 : (isnan(_2608) ? 1.0 : min(_2608, 1.0));
        _2832 = (((cbLight._m0[_3005].x * 0.3183098733425140380859375) * _3023) * _3024) + _2770;
        _2834 = (((cbLight._m0[_3005].y * 0.3183098733425140380859375) * _3023) * _3024) + _2772;
        _2836 = (((cbLight._m0[_3005].z * 0.3183098733425140380859375) * _3023) * _3024) + _2774;
    }
    uint _2839 = _2592 + 8u;
    float _2852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _1088) * 0.949999988079071044921875);
    float _2853 = _2852 * _2852;
    float _2854 = cbLight._m0[_2592].x + _1164;
    float _2855 = cbLight._m0[_2592].y + _1165;
    float _2856 = cbLight._m0[_2592].z + _1166;
    float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
    float _2861 = _2860 * _2854;
    float _2862 = _2860 * _2855;
    float _2863 = _2860 * _2856;
    float _2864 = dot(vec3(_1085, _1086, _1087), vec3(cbLight._m0[_2592].xyz));
    float _5030 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
    float _2867 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
    float _5041 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _2868 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
    float _2869 = dot(vec3(_1085, _1086, _1087), vec3(_2861, _2862, _2863));
    float _5052 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
    float _2872 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
    float _2873 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2861, _2862, _2863));
    float _5063 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
    float _2877 = _2853 * _2853;
    float _2881 = ((_2872 * _2872) * (_2877 + (-1.0))) + 1.0;
    float _2889 = exp2(log2(1.0 - (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0)))) * 5.0);
    float _2890 = 0.959999978542327880859375 - _1243;
    float _2892 = 0.959999978542327880859375 - _1244;
    float _2893 = 0.959999978542327880859375 - _1245;
    float _2900 = 1.0 - _2853;
    float _2911 = (0.5 / (((_2868 * ((_2867 * _2900) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2868 * _2900) + _2853) * _2867))) * _2867;
    float _5074 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
    float _2913 = (isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_2877 / ((_2881 * _2881) * 3.141590118408203125));
    uint _2927 = _2592 + 9u;
    float _2938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _1088) * 0.949999988079071044921875);
    float _2939 = _2938 * _2938;
    float _2940 = cbLight._m0[_2632].x + _1164;
    float _2941 = cbLight._m0[_2632].y + _1165;
    float _2942 = cbLight._m0[_2632].z + _1166;
    float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
    float _2947 = _2946 * _2940;
    float _2948 = _2946 * _2941;
    float _2949 = _2946 * _2942;
    float _2950 = dot(vec3(_1085, _1086, _1087), vec3(cbLight._m0[_2632].xyz));
    float _5085 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
    float _2953 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
    float _2954 = dot(vec3(_1085, _1086, _1087), vec3(_2947, _2948, _2949));
    float _5096 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
    float _2957 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
    float _2958 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2947, _2948, _2949));
    float _5107 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
    float _2962 = _2939 * _2939;
    float _2966 = ((_2957 * _2957) * (_2962 + (-1.0))) + 1.0;
    float _2973 = exp2(log2(1.0 - (isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0)))) * 5.0);
    float _2980 = 1.0 - _2939;
    float _2990 = (0.5 / (((_2868 * ((_2953 * _2980) + _2939)) + 9.9999999392252902907785028219223e-09) + (((_2868 * _2980) + _2939) * _2953))) * _2953;
    float _5118 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
    float _2992 = (isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0))) * (_2962 / ((_2966 * _2966) * 3.141590118408203125));
    float _3002 = (((((_2973 * _2890) + _1246) * cbLight._m0[_2927].x) * _2992) * _2615) + ((((cbLight._m0[_2839].x * _2581) * ((_2889 * _2890) + _1246)) * _2913) * _2628);
    float _3003 = (((((_2973 * _2892) + _1248) * cbLight._m0[_2927].y) * _2992) * _2615) + ((((cbLight._m0[_2839].y * _2583) * ((_2889 * _2892) + _1248)) * _2913) * _2628);
    float _3004 = (((((_2973 * _2893) + _1249) * cbLight._m0[_2927].z) * _2992) * _2615) + ((((cbLight._m0[_2839].z * _2585) * ((_2889 * _2893) + _1249)) * _2913) * _2628);
    float _3060;
    float _3062;
    float _3064;
    if (_2668)
    {
        _3060 = _3002;
        _3062 = _3003;
        _3064 = _3004;
    }
    else
    {
        uint _3066 = _2592 + 2u;
        uint _3070 = _2592 + 10u;
        float _3084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3066].w)) * _1088) * 0.949999988079071044921875);
        float _3085 = _3084 * _3084;
        float _3086 = cbLight._m0[_3066].x + _1164;
        float _3087 = cbLight._m0[_3066].y + _1165;
        float _3088 = cbLight._m0[_3066].z + _1166;
        float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
        float _3093 = _3092 * _3086;
        float _3094 = _3092 * _3087;
        float _3095 = _3092 * _3088;
        float _3096 = dot(vec3(_1085, _1086, _1087), vec3(cbLight._m0[_3066].xyz));
        float _5129 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        float _3099 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
        float _3100 = dot(vec3(_1085, _1086, _1087), vec3(_3093, _3094, _3095));
        float _5140 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
        float _3103 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
        float _3104 = dot(vec3(cbLight._m0[_3066].xyz), vec3(_3093, _3094, _3095));
        float _5151 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
        float _3108 = _3085 * _3085;
        float _3112 = ((_3103 * _3103) * (_3108 + (-1.0))) + 1.0;
        float _3119 = exp2(log2(1.0 - (isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0)))) * 5.0);
        float _3126 = 1.0 - _3085;
        float _3136 = (0.5 / (((_2868 * ((_3099 * _3126) + _3085)) + 9.9999999392252902907785028219223e-09) + (((_2868 * _3126) + _3085) * _3099))) * _3099;
        float _5162 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
        float _3138 = (isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0))) * (_3108 / ((_3112 * _3112) * 3.141590118408203125));
        float _3139 = isnan(1.0) ? _2607 : (isnan(_2607) ? 1.0 : min(_2607, 1.0));
        _3060 = (((((_3119 * _2890) + _1246) * cbLight._m0[_3070].x) * _3138) * _3139) + _3002;
        _3062 = (((((_3119 * _2892) + _1248) * cbLight._m0[_3070].y) * _3138) * _3139) + _3003;
        _3064 = (((((_3119 * _2893) + _1249) * cbLight._m0[_3070].z) * _3138) * _3139) + _3004;
    }
    float _3170;
    float _3172;
    float _3174;
    if (_2777)
    {
        _3170 = _3060;
        _3172 = _3062;
        _3174 = _3064;
    }
    else
    {
        uint _3181 = _2592 + 3u;
        uint _3185 = _2592 + 11u;
        float _3199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3181].w)) * _1088) * 0.949999988079071044921875);
        float _3200 = _3199 * _3199;
        float _3201 = cbLight._m0[_3181].x + _1164;
        float _3202 = cbLight._m0[_3181].y + _1165;
        float _3203 = cbLight._m0[_3181].z + _1166;
        float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
        float _3208 = _3207 * _3201;
        float _3209 = _3207 * _3202;
        float _3210 = _3207 * _3203;
        float _3211 = dot(vec3(_1085, _1086, _1087), vec3(cbLight._m0[_3181].xyz));
        float _5178 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
        float _3214 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
        float _3215 = dot(vec3(_1085, _1086, _1087), vec3(_3208, _3209, _3210));
        float _5189 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
        float _3218 = isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0));
        float _3219 = dot(vec3(cbLight._m0[_3181].xyz), vec3(_3208, _3209, _3210));
        float _5200 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
        float _3223 = _3200 * _3200;
        float _3227 = ((_3218 * _3218) * (_3223 + (-1.0))) + 1.0;
        float _3234 = exp2(log2(1.0 - (isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0)))) * 5.0);
        float _3241 = 1.0 - _3200;
        float _3251 = (0.5 / (((_2868 * ((_3214 * _3241) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_2868 * _3241) + _3200) * _3214))) * _3214;
        float _5211 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
        float _3253 = (isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0))) * (_3223 / ((_3227 * _3227) * 3.141590118408203125));
        float _3254 = isnan(1.0) ? _2608 : (isnan(_2608) ? 1.0 : min(_2608, 1.0));
        _3170 = (((((_3234 * _2890) + _1246) * cbLight._m0[_3185].x) * _3253) * _3254) + _3060;
        _3172 = (((((_3234 * _2892) + _1248) * cbLight._m0[_3185].y) * _3253) * _3254) + _3062;
        _3174 = (((((_3234 * _2893) + _1249) * cbLight._m0[_3185].z) * _3253) * _3254) + _3064;
    }
    float _3320;
    float _3322;
    float _3324;
    float _3326;
    float _3328;
    float _3330;
    if (_2590.y == 0u)
    {
        uvec4 _3275 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3276 = _3275.x;
        uint _3287 = uint((float(_3275.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1185) / _3276))) + floor(float(uint(cbSceneParam._m0[85u].x * _1184) / _3276)));
        float _3297 = (log2(_2368 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3298 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
        uint _3301 = uint(isnan(14.0) ? _3298 : (isnan(_3298) ? 14.0 : min(_3298, 14.0)));
        uvec4 _3306 = texelFetch(g_lightClusterGridBuffer, int(((_3301 << 2u) + (_3287 << 6u)) >> 2u));
        uint _3307 = _3306.x;
        uint _3308 = _3275.z;
        float _3387;
        float _3389;
        float _3391;
        float _3393;
        float _3395;
        float _3397;
        if (((((1u << ((_3308 >> 4u) & 15u)) + 4294967295u) & _3307) == 0u) || ((_3308 & 240u) == 0u))
        {
            _3387 = 0.0;
            _3389 = 0.0;
            _3391 = 0.0;
            _3393 = 0.0;
            _3395 = 0.0;
            _3397 = 0.0;
        }
        else
        {
            float _3388;
            float _3390;
            float _3392;
            float _3394;
            float _3396;
            float _3398;
            float _3539 = 0.0;
            float _3540 = 0.0;
            float _3541 = 0.0;
            float _3542 = 0.0;
            float _3543 = 0.0;
            float _3544 = 0.0;
            uint _3545 = 0u;
            uint _3554;
            bool _3555;
            for (;;)
            {
                _3554 = texelFetch(g_lightClassification, int((((_3301 << 5u) + (_3287 << 9u)) + (_3545 << 2u)) >> 2u)).x;
                _3555 = _3554 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3555)
                {
                    frontier_phi_71_pred = _3544;
                    frontier_phi_71_pred_1 = _3543;
                    frontier_phi_71_pred_2 = _3542;
                    frontier_phi_71_pred_3 = _3541;
                    frontier_phi_71_pred_4 = _3540;
                    frontier_phi_71_pred_5 = _3539;
                }
                else
                {
                    float _3684;
                    float _3685;
                    float _3686;
                    float _3687;
                    float _3688;
                    float _3689;
                    uint _3690;
                    _3684 = _3539;
                    _3685 = _3540;
                    _3686 = _3541;
                    _3687 = _3542;
                    _3688 = _3543;
                    _3689 = _3544;
                    _3690 = _3554;
                    float _3611;
                    float _3612;
                    float _3613;
                    float _3614;
                    float _3615;
                    float _3616;
                    for (;;)
                    {
                        uint _3694 = uint(findLSB(_3690)) + (_3545 << 5u);
                        uint _3691 = (_3690 + 4294967295u) & _3690;
                        uint _3696 = _3694 * 48u;
                        vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3696)).x, texelFetch(g_PointLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3696 + 3u)).x));
                        uint _3716 = (_3694 * 48u) + 4u;
                        vec4 _3729 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3716)).x, texelFetch(g_PointLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3716 + 3u)).x));
                        uint _3735 = (_3694 * 48u) + 8u;
                        vec3 _3746 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3735)).x, texelFetch(g_PointLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3735 + 2u)).x));
                        float _3750 = _3710.x - _2366;
                        float _3751 = _3710.y - _2367;
                        float _3752 = _3710.z - _2368;
                        float _3753 = dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752));
                        float _3756 = inversesqrt(_3753);
                        float _3757 = _3756 * _3750;
                        float _3758 = _3756 * _3751;
                        float _3759 = _3756 * _3752;
                        float _3760 = dot(vec3(_1203, _1206, _1209), vec3(_3757, _3758, _3759));
                        float _3765 = 1.0 - (_3753 * _3710.w);
                        float _5237 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                        float _3766 = isnan(1.0) ? _5237 : (isnan(_5237) ? 1.0 : min(_5237, 1.0));
                        float _3767 = sqrt(_3753) * _3729.w;
                        float _3770 = 1.39999997615814208984375 / (_3767 + 1.39999997615814208984375);
                        float _3771 = _3770 * _3770;
                        float _3774 = ((1.0 - _3771) * _3760) + _3771;
                        float _3777 = _3767 * _3767;
                        float _3781 = ((isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0))) * _3766) / ((_3777 * 0.699999988079071044921875) + 1.0);
                        float _3785 = (-0.0) - _2366;
                        float _3786 = (-0.0) - _2367;
                        float _3787 = (-0.0) - _2368;
                        float _3791 = inversesqrt(dot(vec3(_3785, _3786, _3787), vec3(_3785, _3786, _3787)));
                        float _3792 = _3791 * _3785;
                        float _3793 = _3791 * _3786;
                        float _3794 = _3791 * _3787;
                        float _3801 = exp2(log2(1.0 / ((_3777 * 3.5) + 5.0)) * 0.25);
                        float _3802 = 1.0 - _1278;
                        float _3809 = sqrt(1.0 - ((1.0 - (_3802 * _3802)) * (1.0 - (_3801 * _3801))));
                        float _3810 = _3809 * _3809;
                        float _3811 = _3810 * _3810;
                        float _3812 = _3792 + _3757;
                        float _3813 = _3793 + _3758;
                        float _3814 = _3794 + _3759;
                        float _3818 = inversesqrt(dot(vec3(_3812, _3813, _3814), vec3(_3812, _3813, _3814)));
                        float _3822 = dot(vec3(_1203, _1206, _1209), vec3(_3792, _3793, _3794));
                        float _5253 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                        float _3825 = isnan(1.0) ? _5253 : (isnan(_5253) ? 1.0 : min(_5253, 1.0));
                        float _3826 = dot(vec3(_1203, _1206, _1209), vec3(_3818 * _3812, _3818 * _3813, _3818 * _3814));
                        float _5264 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                        float _3829 = isnan(1.0) ? _5264 : (isnan(_5264) ? 1.0 : min(_5264, 1.0));
                        float _3833 = ((_3829 * _3829) * (_3811 + (-1.0))) + 1.0;
                        float _3834 = _3770 * _3810;
                        float _3835 = _3834 * _3834;
                        float _3838 = ((1.0 - _3835) * _3760) + _3835;
                        float _5275 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                        float _3839 = isnan(1.0) ? _5275 : (isnan(_5275) ? 1.0 : min(_5275, 1.0));
                        float _3840 = 1.0 - _3810;
                        float _3850 = (0.5 / (((_3839 * ((_3825 * _3840) + _3810)) + 9.9999999392252902907785028219223e-09) + (((_3839 * _3840) + _3810) * _3825))) * _3839;
                        float _5286 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                        float _3861 = (((_3811 * 3.1415927410125732421875) * (isnan(1.0) ? _5286 : (isnan(_5286) ? 1.0 : min(_5286, 1.0)))) / ((_3833 * _3833) * ((_3777 * 2.1991131305694580078125) + 3.141590118408203125))) * _3766;
                        _3614 = (_3781 * _3729.x) + _3687;
                        _3615 = (_3781 * _3729.y) + _3688;
                        _3616 = (_3781 * _3729.z) + _3689;
                        _3611 = (_3861 * _3746.x) + _3684;
                        _3612 = (_3861 * _3746.y) + _3685;
                        _3613 = (_3861 * _3746.z) + _3686;
                        if (_3691 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3684 = _3611;
                            _3685 = _3612;
                            _3686 = _3613;
                            _3687 = _3614;
                            _3688 = _3615;
                            _3689 = _3616;
                            _3690 = _3691;
                        }
                    }
                    frontier_phi_71_pred = _3616;
                    frontier_phi_71_pred_1 = _3615;
                    frontier_phi_71_pred_2 = _3614;
                    frontier_phi_71_pred_3 = _3613;
                    frontier_phi_71_pred_4 = _3612;
                    frontier_phi_71_pred_5 = _3611;
                }
                _3398 = frontier_phi_71_pred;
                _3396 = frontier_phi_71_pred_1;
                _3394 = frontier_phi_71_pred_2;
                _3392 = frontier_phi_71_pred_3;
                _3390 = frontier_phi_71_pred_4;
                _3388 = frontier_phi_71_pred_5;
                uint _3546 = _3545 + 1u;
                if (_3546 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3539 = _3388;
                    _3540 = _3390;
                    _3541 = _3392;
                    _3542 = _3394;
                    _3543 = _3396;
                    _3544 = _3398;
                    _3545 = _3546;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3387 = _3388;
            _3389 = _3390;
            _3391 = _3392;
            _3393 = _3394;
            _3395 = _3396;
            _3397 = _3398;
        }
        uvec4 _3401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3402 = _3401.z;
        uint _3404 = (_3402 >> 8u) & 15u;
        float _3507;
        float _3509;
        float _3511;
        float _3513;
        float _3515;
        float _3517;
        if (((4294967295u << _3404) & _3307) == 0u)
        {
            _3507 = _3387;
            _3509 = _3389;
            _3511 = _3391;
            _3513 = _3393;
            _3515 = _3395;
            _3517 = _3397;
        }
        else
        {
            float _3532 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
            float _3533 = _3532 * _2366;
            float _3534 = _3532 * _2367;
            float _3535 = _3532 * _2368;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3404 < ((_3402 >> 12u) & 15u))
            {
                float _3508;
                float _3510;
                float _3512;
                float _3514;
                float _3516;
                float _3518;
                float _3667 = _3387;
                float _3668 = _3389;
                float _3669 = _3391;
                float _3670 = _3393;
                float _3671 = _3395;
                float _3672 = _3397;
                uint _3673 = _3404;
                uint _3682;
                bool _3683;
                for (;;)
                {
                    _3682 = texelFetch(g_lightClassification, int((((_3301 << 5u) + (_3287 << 9u)) + (_3673 << 2u)) >> 2u)).x;
                    _3683 = _3682 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3683)
                    {
                        frontier_phi_82_pred = _3672;
                        frontier_phi_82_pred_1 = _3671;
                        frontier_phi_82_pred_2 = _3670;
                        frontier_phi_82_pred_3 = _3669;
                        frontier_phi_82_pred_4 = _3668;
                        frontier_phi_82_pred_5 = _3667;
                    }
                    else
                    {
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _4168;
                        float _4169;
                        float _4170;
                        float _4171;
                        float _4172;
                        float _4173;
                        float _3888 = _3667;
                        float _3889 = _3668;
                        float _3890 = _3669;
                        float _3891 = _3670;
                        float _3892 = _3671;
                        float _3893 = _3672;
                        uint _3894 = _3682;
                        uint _3895;
                        vec4 _3920;
                        float _3921;
                        vec4 _3936;
                        vec3 _3948;
                        vec4 _3963;
                        vec4 _3978;
                        float _4024;
                        bool _4025;
                        for (;;)
                        {
                            uint _3905 = ((_3673 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3894));
                            _3895 = (_3894 + 4294967295u) & _3894;
                            uint _3907 = _3905 * 40u;
                            _3920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3907 + 3u)).x));
                            _3921 = _3920.w;
                            uint _3923 = (_3905 * 40u) + 4u;
                            _3936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3923 + 3u)).x));
                            uint _3938 = (_3905 * 40u) + 8u;
                            _3948 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3938 + 2u)).x));
                            uint _3950 = (_3905 * 40u) + 16u;
                            _3963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 3u)).x));
                            uint _3965 = (_3905 * 40u) + 20u;
                            _3978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3965 + 3u)).x));
                            uint _3980 = (_3905 * 40u) + 24u;
                            vec4 _3993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3980 + 3u)).x));
                            uint _3999 = (_3905 * 40u) + 28u;
                            vec4 _4012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3999 + 3u)).x));
                            _4024 = fma(_2368, _4012.z, fma(_2367, _4012.y, _4012.x * _2366)) + _4012.w;
                            _4025 = !((fma(_2368, _3993.z, fma(_2367, _3993.y, _3993.x * _2366)) + _3993.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4025)
                            {
                                float _4052 = _3920.x - _2366;
                                float _4053 = _3920.y - _2367;
                                float _4054 = _3920.z - _2368;
                                float _4055 = dot(vec3(_4052, _4053, _4054), vec3(_4052, _4053, _4054));
                                float _4058 = inversesqrt(_4055);
                                float _4059 = _4058 * _4052;
                                float _4060 = _4058 * _4053;
                                float _4061 = _4058 * _4054;
                                float _4065 = 1.0 - (_4055 / (_3921 * _3921));
                                float _5297 = isnan(0.0) ? _4065 : (isnan(_4065) ? 0.0 : max(_4065, 0.0));
                                float _4066 = isnan(1.0) ? _5297 : (isnan(_5297) ? 1.0 : min(_5297, 1.0));
                                float _4070 = sqrt(_4055) * _3936.w;
                                float _4072 = 1.39999997615814208984375 / (_4070 + 1.39999997615814208984375);
                                float _4073 = _4072 * _4072;
                                float _4076 = ((1.0 - _4073) * dot(vec3(_4059, _4060, _4061), vec3(_1203, _1206, _1209))) + _4073;
                                float _4079 = _4070 * _4070;
                                float _4083 = (fma(_2368, _3963.z, fma(_2367, _3963.y, _3963.x * _2366)) + _3963.w) / _4024;
                                float _4084 = (fma(_2368, _3978.z, fma(_2367, _3978.y, _3978.x * _2366)) + _3978.w) / _4024;
                                float _4088 = 1.0 - dot(vec2(_4083, _4084), vec2(_4083, _4084));
                                float _5313 = isnan(0.0) ? _4088 : (isnan(_4088) ? 0.0 : max(_4088, 0.0));
                                float _4089 = isnan(1.0) ? _5313 : (isnan(_5313) ? 1.0 : min(_5313, 1.0));
                                float _4090 = _4089 * (((isnan(0.0) ? _4076 : (isnan(_4076) ? 0.0 : max(_4076, 0.0))) * _4066) / ((_4079 * 0.699999988079071044921875) + 1.0));
                                float _4102 = exp2(log2(1.0 / ((_4079 * 3.5) + 5.0)) * 0.25);
                                float _4103 = 1.0 - _1278;
                                float _4110 = sqrt(1.0 - ((1.0 - (_4103 * _4103)) * (1.0 - (_4102 * _4102))));
                                float _4111 = _4110 * _4110;
                                float _4112 = _4111 * _4111;
                                float _4113 = _4059 - _3533;
                                float _4114 = _4060 - _3534;
                                float _4115 = _4061 - _3535;
                                float _4119 = inversesqrt(dot(vec3(_4113, _4114, _4115), vec3(_4113, _4114, _4115)));
                                float _4123 = dot(vec3(_1203, _1206, _1209), vec3((-0.0) - _3533, (-0.0) - _3534, (-0.0) - _3535));
                                float _5324 = isnan(0.0) ? _4123 : (isnan(_4123) ? 0.0 : max(_4123, 0.0));
                                float _4126 = isnan(1.0) ? _5324 : (isnan(_5324) ? 1.0 : min(_5324, 1.0));
                                float _4127 = dot(vec3(_1203, _1206, _1209), vec3(_4119 * _4113, _4119 * _4114, _4119 * _4115));
                                float _5335 = isnan(0.0) ? _4127 : (isnan(_4127) ? 0.0 : max(_4127, 0.0));
                                float _4130 = isnan(1.0) ? _5335 : (isnan(_5335) ? 1.0 : min(_5335, 1.0));
                                float _4134 = ((_4130 * _4130) * (_4112 + (-1.0))) + 1.0;
                                float _4135 = _4072 * _4111;
                                float _4136 = _4135 * _4135;
                                float _4142 = ((1.0 - _4136) * dot(vec3(_1203, _1206, _1209), vec3(_4059, _4060, _4061))) + _4136;
                                float _5346 = isnan(0.0) ? _4142 : (isnan(_4142) ? 0.0 : max(_4142, 0.0));
                                float _4143 = isnan(1.0) ? _5346 : (isnan(_5346) ? 1.0 : min(_5346, 1.0));
                                float _4144 = 1.0 - _4111;
                                float _4154 = (0.5 / (((_4143 * ((_4126 * _4144) + _4111)) + 9.9999999392252902907785028219223e-09) + (((_4143 * _4144) + _4111) * _4126))) * _4143;
                                float _5357 = isnan(0.0) ? _4154 : (isnan(_4154) ? 0.0 : max(_4154, 0.0));
                                float _4164 = (_4089 * _4066) * (((_4112 * 3.1415927410125732421875) * (isnan(1.0) ? _5357 : (isnan(_5357) ? 1.0 : min(_5357, 1.0)))) / ((_4134 * _4134) * ((_4079 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4090 * _3936.z;
                                frontier_phi_88_pred_1 = _4090 * _3936.y;
                                frontier_phi_88_pred_2 = _4090 * _3936.x;
                                frontier_phi_88_pred_3 = _4164 * _3948.z;
                                frontier_phi_88_pred_4 = _4164 * _3948.y;
                                frontier_phi_88_pred_5 = _4164 * _3948.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4173 = frontier_phi_88_pred;
                            _4172 = frontier_phi_88_pred_1;
                            _4171 = frontier_phi_88_pred_2;
                            _4170 = frontier_phi_88_pred_3;
                            _4169 = frontier_phi_88_pred_4;
                            _4168 = frontier_phi_88_pred_5;
                            _3878 = _4171 + _3891;
                            _3879 = _4172 + _3892;
                            _3880 = _4173 + _3893;
                            _3875 = _4168 + _3888;
                            _3876 = _4169 + _3889;
                            _3877 = _4170 + _3890;
                            if (_3895 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3888 = _3875;
                                _3889 = _3876;
                                _3890 = _3877;
                                _3891 = _3878;
                                _3892 = _3879;
                                _3893 = _3880;
                                _3894 = _3895;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3880;
                        frontier_phi_82_pred_1 = _3879;
                        frontier_phi_82_pred_2 = _3878;
                        frontier_phi_82_pred_3 = _3877;
                        frontier_phi_82_pred_4 = _3876;
                        frontier_phi_82_pred_5 = _3875;
                    }
                    _3518 = frontier_phi_82_pred;
                    _3516 = frontier_phi_82_pred_1;
                    _3514 = frontier_phi_82_pred_2;
                    _3512 = frontier_phi_82_pred_3;
                    _3510 = frontier_phi_82_pred_4;
                    _3508 = frontier_phi_82_pred_5;
                    uint _3674 = _3673 + 1u;
                    if (_3674 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3667 = _3508;
                        _3668 = _3510;
                        _3669 = _3512;
                        _3670 = _3514;
                        _3671 = _3516;
                        _3672 = _3518;
                        _3673 = _3674;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3514;
                frontier_phi_63_64_ladder_1 = _3518;
                frontier_phi_63_64_ladder_2 = _3516;
                frontier_phi_63_64_ladder_3 = _3512;
                frontier_phi_63_64_ladder_4 = _3510;
                frontier_phi_63_64_ladder_5 = _3508;
            }
            else
            {
                frontier_phi_63_64_ladder = _3393;
                frontier_phi_63_64_ladder_1 = _3397;
                frontier_phi_63_64_ladder_2 = _3395;
                frontier_phi_63_64_ladder_3 = _3391;
                frontier_phi_63_64_ladder_4 = _3389;
                frontier_phi_63_64_ladder_5 = _3387;
            }
            _3507 = frontier_phi_63_64_ladder_5;
            _3509 = frontier_phi_63_64_ladder_4;
            _3511 = frontier_phi_63_64_ladder_3;
            _3513 = frontier_phi_63_64_ladder;
            _3515 = frontier_phi_63_64_ladder_2;
            _3517 = frontier_phi_63_64_ladder_1;
        }
        float _3522 = isnan(1.0) ? _1262 : (isnan(_1262) ? 1.0 : min(_1262, 1.0));
        _3320 = (_3522 * _3513) + _2832;
        _3322 = (_3522 * _3515) + _2834;
        _3324 = (_3522 * _3517) + _2836;
        _3326 = ((_3507 * _1246) * _3522) + _3170;
        _3328 = ((_3509 * _1248) * _3522) + _3172;
        _3330 = ((_3511 * _1249) * _3522) + _3174;
    }
    else
    {
        _3320 = _2832;
        _3322 = _2834;
        _3324 = _2836;
        _3326 = _3170;
        _3328 = _3172;
        _3330 = _3174;
    }
    float _5373 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _5384 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
    float _5395 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _3347 = ((isnan(1.0) ? _5373 : (isnan(_5373) ? 1.0 : min(_5373, 1.0))) * (_3320 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1262))) + ((_3326 + ((isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0))) * _2099)) * cbPerFrame._m0[3u].x);
    float _3348 = ((isnan(1.0) ? _5384 : (isnan(_5384) ? 1.0 : min(_5384, 1.0))) * (_3322 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1262))) + ((_3328 + ((isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0))) * _2099)) * cbPerFrame._m0[3u].x);
    float _3349 = ((isnan(1.0) ? _5395 : (isnan(_5395) ? 1.0 : min(_5395, 1.0))) * (_3324 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1262))) + ((_3330 + ((isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0))) * _2099)) * cbPerFrame._m0[3u].x);
    uint _3350 = _275 + 6u;
    float _3358 = _1184 / cbSceneParam._m0[86u].x;
    float _3359 = _1185 / cbSceneParam._m0[86u].y;
    vec4 _3373 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3358, _3359, (log2((isnan(cbSceneParam._m0[77u].w) ? _1107 : (isnan(_1107) ? cbSceneParam._m0[77u].w : min(_1107, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3375 = _3373.x;
    float _3376 = _3373.y;
    float _3377 = _3373.z;
    float _3378 = _3373.w;
    float _3449;
    float _3451;
    float _3453;
    float _3455;
    if (_1107 > cbSceneParam._m0[78u].w)
    {
        float _3412 = isnan(_1107) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1107 : min(cbSceneParam._m0[80u].w, _1107));
        float _3413 = _3412 / _1107;
        float _3424 = _3413 * _1157;
        float _3425 = _1158 * _3413;
        float _3426 = (-0.0) - _3425;
        float _3427 = _3413 * _1159;
        float _3429 = (cbSceneParam._m0[77u].w * _3426) / _3412;
        float _3430 = _3429 + cbSceneParam._m0[79u].w;
        float _3431 = cbSceneParam._m0[79u].w - _3425;
        float _3437 = sqrt(((_3424 * _3424) + (_3425 * _3425)) + (_3427 * _3427));
        float _3440 = (1.0 - (cbSceneParam._m0[77u].w / _3412)) * _3437;
        float _3445 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3447 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3624;
        if (abs((_3426 - _3429) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3624 = ((((_3430 > 0.0) ? exp2(_3445 * _3430) : (2.0 - exp2(_3447 * _3430))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3440;
        }
        else
        {
            float _3568 = 1.0 / cbSceneParam._m0[80u].x;
            float _3569 = isnan(_3431) ? _3430 : (isnan(_3430) ? _3431 : max(_3430, _3431));
            float _3570 = isnan(_3431) ? _3430 : (isnan(_3430) ? _3431 : min(_3430, _3431));
            float _3579 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : min(_3569, 0.0));
            float _3580 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : min(_3570, 0.0));
            _3624 = ((abs(_3437 / _3426) * cbSceneParam._m0[80u].y) * ((((_3579 - _3580) * 2.0) - ((exp2(_3445 * (isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0)))) - exp2(_3445 * (isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0))))) * _3568)) - ((exp2(_3447 * _3579) - exp2(_3447 * _3580)) * _3568))) + (_3440 * cbSceneParam._m0[80u].z);
        }
        vec4 _3626 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3358, _3359, 1.0), 0.0);
        float _3635 = exp2((_3624 * (-1.44269502162933349609375)) * (1.0 - _3626.w));
        float _3636 = log2(_3635);
        float _3652 = log2(_3378);
        _3449 = (exp2(_3652 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3636 * cbSceneParam._m0[78u].x)) * _3626.x) / cbSceneParam._m0[78u].x)) + _3375;
        _3451 = (exp2(_3652 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3636 * cbSceneParam._m0[78u].y)) * _3626.y) / cbSceneParam._m0[78u].y)) + _3376;
        _3453 = (exp2(_3652 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3636 * cbSceneParam._m0[78u].z)) * _3626.z) / cbSceneParam._m0[78u].z)) + _3377;
        _3455 = _3635 * _3378;
    }
    else
    {
        _3449 = _3375;
        _3451 = _3376;
        _3453 = _3377;
        _3455 = _3378;
    }
    bool _3662;
    vec4 _3465;
    vec4 _3487;
    float _3489;
    float _3493;
    float _3494;
    float _3495;
    float _3496;
    bool _3506;
    for (;;)
    {
        _3465 = cbMatDynParam._m0[0u];
        float _3467 = roundEven(_3465.y);
        bool _3468 = _3467 == 3.0;
        float _3469 = log2(_3455);
        float _3476 = exp2(_3469 * cbSceneParam._m0[78u].x) * _3347;
        float _3477 = exp2(_3469 * cbSceneParam._m0[78u].y) * _3348;
        float _3478 = exp2(_3469 * cbSceneParam._m0[78u].z) * _3349;
        float _3485 = _1173 + (-0.5);
        _3487 = cbMtdParam._m0[1u];
        _3489 = _3487.y * _3485;
        float _3492 = (_3467 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3493 = _3492 * (_3468 ? _3476 : (_3476 + (cbSceneParam._m0[72u].w * _3449)));
        _3494 = _3492 * (_3468 ? _3477 : (_3477 + (cbSceneParam._m0[72u].w * _3451)));
        _3495 = _3492 * (_3468 ? _3478 : (_3478 + (cbSceneParam._m0[72u].w * _3453)));
        _3496 = _3485 * 0.999000012874603271484375;
        _3506 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3506)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _3496) < 0.5)
            {
                _3662 = true;
                break;
            }
        }
        uint _3603 = _1222 + uint(_3465.w);
        if ((cbInstanceData._m0[_3603].w < 1.0) && ((cbInstanceData._m0[_3603].w + _3496) < 0.5))
        {
            _3662 = true;
            break;
        }
        if ((_3489 + 1.0) < _3487.x)
        {
            _3662 = true;
            break;
        }
        _3662 = false;
        break;
    }
    float _3866;
    if (_3662)
    {
        discard_state = true;
        _3866 = 0.0;
    }
    else
    {
        _3866 = cbInstanceData._m0[_3350].w;
    }
    SV_Target.x = _3493;
    SV_Target.y = _3494;
    SV_Target.z = _3495;
    SV_Target.w = _3866;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3350].w;
    discard_exit();
}


