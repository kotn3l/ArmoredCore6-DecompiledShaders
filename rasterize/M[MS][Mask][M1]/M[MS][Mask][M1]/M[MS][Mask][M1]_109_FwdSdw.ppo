#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1581;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4189 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4200 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4211 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _461 = _459.x;
    float _473 = dot(vec4(_461, _459.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _490 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_461 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4222 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _491 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _498 = (_491 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _499 = (_491 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _500 = (_491 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _539 = _537.x;
    float _549 = dot(vec4(_539, _537.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _563 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_539 - _549) * cbMtdParam._m0[23u].w) + _549) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4233 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _571 = (_564 * ((_517.x * cbMtdParam._m0[13u].x) - _498)) + _498;
    float _572 = (_564 * ((_517.y * cbMtdParam._m0[13u].y) - _499)) + _499;
    float _573 = (_564 * ((_517.z * cbMtdParam._m0[13u].z) - _500)) + _500;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _611 = _609.x;
    float _621 = dot(vec4(_611, _609.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _633 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _424.z) * 2.0) - ((((_611 - _621) * cbMtdParam._m0[23u].w) + _621) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4244 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _644 = (_353.x * cbMtdParam._m0[9u].x) * ((_634 * ((_592.x * cbMtdParam._m0[14u].x) - _571)) + _571);
    float _645 = (_353.y * cbMtdParam._m0[9u].y) * ((_634 * ((_592.y * cbMtdParam._m0[14u].y) - _572)) + _572);
    float _646 = (_353.z * cbMtdParam._m0[9u].z) * ((_634 * ((_592.z * cbMtdParam._m0[14u].z) - _573)) + _573);
    float _650 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _644;
    float _653 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _645;
    float _656 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _646;
    float _664 = (((_644 - _650) * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) + _650) * 4.55000019073486328125;
    float _666 = (((_645 - _653) * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) + _653) * 4.55000019073486328125;
    float _668 = (((_646 - _656) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) + _656) * 4.55000019073486328125;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = _720.x;
    float _723 = _720.y;
    float _724 = _720.z;
    float _731 = ((_703.x - _722) * _491) + _722;
    float _732 = ((_703.y - _723) * _491) + _723;
    float _733 = ((_703.z - _724) * _491) + _724;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _756 = ((_745.x - _731) * _564) + _731;
    float _757 = ((_745.y - _732) * _564) + _732;
    float _758 = ((_745.z - _733) * _564) + _733;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _783 = ((_770.z - _758) * _634) + _758;
    float _786 = ((((_770.x - _756) * _634) + _756) * 2.0) + (-1.0);
    float _787 = ((((_770.y - _757) * _634) + _757) * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _4255 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))));
    vec4 _813 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _825 = (_786 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_680.x * 2.0) + (-1.0)))) + (((_813.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _826 = (_787 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_680.y * 2.0) + (-1.0)))) + (((_813.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _840 = _838.x;
    float _841 = 1.0 - _840;
    float _869 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_840 - _841) * cbMtdParam._m0[24u].w) + _841) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4266 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _870 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _878 = ((((cbMtdParam._m0[10u].x - _664) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _870) + _664;
    float _879 = ((((cbMtdParam._m0[10u].y - _666) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _870) + _666;
    float _880 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _668)) * _870) + _668;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _908 = _906.x;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _908) * _491) + _908;
    float _943 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _925) * _564) + _925;
    float _960 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _316) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _317) + cbTextureTilingScale._m0[10u].w)).x - _943) * _634) + _943;
    float _964 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _960) * cbMtdParam._m0[19u].z) + _960;
    float _966 = _964 - (_964 * _870);
    float _971 = (((_680.z - _783) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _783;
    float _975 = ((_813.z - _971) * cbMtdParam._m0[19u].w) + _971;
    float _979 = ((cbMtdParam._m0[23u].x - _975) * _870) + _975;
    vec4 _1000 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1006 = (_1000.x * 2.0) + (-1.0);
    float _1007 = (_1000.y * 2.0) + (-1.0);
    float _1008 = dot(vec2(_1006, _1007), vec2(_1006, _1007));
    float _4277 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1024 = (_870 * (((cbMtdParam._m0[22u].z * _825) - _825) + _1006)) + _825;
    float _1025 = (_870 * (((cbMtdParam._m0[22u].z * _826) - _826) + _1007)) + _826;
    float _1026 = (_870 * (sqrt(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) - _793)) + _793;
    float _1028 = cbMtdParam._m0[22u].x + _813.w;
    float _1031 = fma(_1026, _265 * NORMAL.x, fma(_1025, _272 * TANGENT.x, (_258 * _250) * _1024));
    float _1034 = fma(_1026, _265 * NORMAL.y, fma(_1025, _272 * TANGENT.y, (_258 * _251) * _1024));
    float _1037 = fma(_1026, _265 * NORMAL.z, fma(_1025, _272 * TANGENT.z, (_258 * _252) * _1024));
    float _1041 = inversesqrt(dot(vec3(_1031, _1034, _1037), vec3(_1031, _1034, _1037)));
    float _1042 = _1041 * _1031;
    float _1043 = _1041 * _1034;
    float _1044 = _1041 * _1037;
    float _4288 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _1045 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _4310 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4321 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4332 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4343 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _1050 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _1064 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1114 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1104);
    float _1115 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1104);
    float _1116 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1104);
    float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
    float _1121 = _1114 * _1120;
    float _1122 = _1115 * _1120;
    float _1123 = _1116 * _1120;
    float _1129 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1130 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1148 = fma(_1044, cbSceneParam._m0[5u].z, fma(_1043, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1042));
    float _1151 = fma(_1044, cbSceneParam._m0[6u].z, fma(_1043, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1042));
    float _1154 = fma(_1044, cbSceneParam._m0[7u].z, fma(_1043, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1042));
    uint _1168 = (_297 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1174 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * cbInstanceData._m0[_1168].x;
    float _1175 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * cbInstanceData._m0[_1168].y;
    float _1176 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * cbInstanceData._m0[_1168].z;
    float _4354 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _4365 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _4376 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1179 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _1180 = 1.0 - _1050;
    float _1181 = _1177 * _1180;
    float _1182 = _1178 * _1180;
    float _1183 = _1179 * _1180;
    float _1188 = (_1177 + (-0.039999999105930328369140625)) * _1050;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1050;
    float _1190 = (_1179 + (-0.039999999105930328369140625)) * _1050;
    float _1191 = _1188 + 0.039999999105930328369140625;
    float _1193 = _1189 + 0.039999999105930328369140625;
    float _1194 = _1190 + 0.039999999105930328369140625;
    vec4 _1203 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1129, cbSceneParam._m0[86u].y * _1130));
    float _1207 = ((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * TEXCOORD_5.w) * _1203.x;
    float _1208 = dot(vec3(_1042, _1043, _1044), vec3(_1121, _1122, _1123));
    float _1211 = _1208 * 2.0;
    float _1215 = (_1211 * _1042) - _1121;
    float _1216 = (_1211 * _1043) - _1122;
    float _1217 = (_1211 * _1044) - _1123;
    float _1221 = abs(dot(vec3(_1121, _1122, _1123), vec3(_1042, _1043, _1044)));
    float _4387 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _1223 = sqrt(_1045);
    float _1236 = exp2((_1223 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1223 * 3.0));
    float _1242 = (1.0 - _1236) * ((_1223 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1243 = _1236 * _1223;
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1279 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1580;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1305 = fma(_1279, cbModelParam._m0[26u].z, fma(_1275, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1271));
        float _1309 = fma(_1279, cbModelParam._m0[27u].z, fma(_1275, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1271));
        float _1313 = fma(_1279, cbModelParam._m0[28u].z, fma(_1275, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1271));
        float _1338 = _1271 + _1042;
        float _1339 = _1275 + _1043;
        float _1340 = _1279 + _1044;
        float _1350 = fma(_1340, cbModelParam._m0[26u].z, fma(_1339, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1338)) - _1305;
        float _1351 = fma(_1340, cbModelParam._m0[27u].z, fma(_1339, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1338)) - _1309;
        float _1352 = fma(_1340, cbModelParam._m0[28u].z, fma(_1339, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1338)) - _1313;
        float _1356 = inversesqrt(dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352)));
        float _1369 = ((_1356 * _1350) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1305 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1356 * _1351) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1309 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1356 * _1352) / cbModelParam._m0[34u].z) + ((((((_1313 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1369, _1370, _1371), 0.0);
        float _1408 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1374.x + (-0.5));
        float _1410 = _1408 * (_1374.y + (-0.5));
        float _1411 = _1408 * (_1374.z + (-0.5));
        float _1418 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1381.x + (-0.5));
        float _1420 = _1418 * (_1381.y + (-0.5));
        float _1421 = _1418 * (_1381.z + (-0.5));
        float _1428 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1388.x + (-0.5));
        float _1430 = _1428 * (_1388.y + (-0.5));
        float _1431 = _1428 * (_1388.z + (-0.5));
        float _1438 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1395.x + (-0.5));
        float _1440 = _1438 * (_1395.y + (-0.5));
        float _1441 = _1438 * (_1395.z + (-0.5));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = _1409 * 0.5;
        float _1446 = _1419 * 0.5;
        float _1447 = _1429 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1462 = (dot(vec3(_1042, _1043, _1044), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1472 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4435 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1474 + 1.0))) + _1479) * _1442;
        float _1489 = _1410 * 0.5;
        float _1490 = _1420 * 0.5;
        float _1491 = _1430 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_1042, _1043, _1044), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _4446 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4457 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4468 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_1516 + 1.0))) + _1521) * _1443;
        float _1531 = _1411 * 0.5;
        float _1532 = _1421 * 0.5;
        float _1533 = _1431 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_1042, _1043, _1044), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4501 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1558 + 1.0))) + _1563) * _1444;
        _1580 = _1411;
        _1582 = _1410;
        _1583 = _1409;
        _1584 = _1421;
        _1585 = _1420;
        _1586 = _1419;
        _1587 = _1431;
        _1588 = _1430;
        _1589 = _1429;
        _1590 = _1444;
        _1591 = _1443;
        _1592 = _1442;
        _1593 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1594 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1595 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
    }
    else
    {
        _1580 = _1581;
        _1582 = _1581;
        _1583 = _1581;
        _1584 = _1581;
        _1585 = _1581;
        _1586 = _1581;
        _1587 = _1581;
        _1588 = _1581;
        _1589 = _1581;
        _1590 = _1581;
        _1591 = _1581;
        _1592 = _1581;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
    }
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1618 = fma(_1279, cbModelParam._m0[30u].z, fma(_1275, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271));
        float _1622 = fma(_1279, cbModelParam._m0[31u].z, fma(_1275, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271));
        float _1626 = fma(_1279, cbModelParam._m0[32u].z, fma(_1275, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271));
        float _1649 = _1271 + _1042;
        float _1650 = _1275 + _1043;
        float _1651 = _1279 + _1044;
        float _1661 = fma(_1651, cbModelParam._m0[30u].z, fma(_1650, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1649)) - _1618;
        float _1662 = fma(_1651, cbModelParam._m0[31u].z, fma(_1650, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1649)) - _1622;
        float _1663 = fma(_1651, cbModelParam._m0[32u].z, fma(_1650, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1649)) - _1626;
        float _1667 = inversesqrt(dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663)));
        float _1680 = ((_1667 * _1661) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1618 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1681 = ((_1667 * _1662) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1622 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1682 = ((_1667 * _1663) / cbModelParam._m0[35u].z) + ((((((_1626 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1680, _1681, _1682), 0.0);
        vec4 _1691 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1680, _1681, _1682), 0.0);
        vec4 _1698 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1680, _1681, _1682), 0.0);
        vec4 _1705 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1680, _1681, _1682), 0.0);
        float _1717 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1684.x + (-0.5));
        float _1719 = _1717 * (_1684.y + (-0.5));
        float _1720 = _1717 * (_1684.z + (-0.5));
        float _1727 = exp2((_1691.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1691.x + (-0.5));
        float _1729 = _1727 * (_1691.y + (-0.5));
        float _1730 = _1727 * (_1691.z + (-0.5));
        float _1737 = exp2((_1698.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1698.x + (-0.5));
        float _1739 = _1737 * (_1698.y + (-0.5));
        float _1740 = _1737 * (_1698.z + (-0.5));
        float _1747 = exp2((_1705.w + (-0.5)) * 20.0) * 2.0;
        float _1748 = _1747 * (_1705.x + (-0.5));
        float _1749 = _1747 * (_1705.y + (-0.5));
        float _1750 = _1747 * (_1705.z + (-0.5));
        float _1751 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1752 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1753 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1754 = _1718 * 0.5;
        float _1755 = _1728 * 0.5;
        float _1756 = _1738 * 0.5;
        float _1757 = dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756));
        float _1762 = (_1757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1757);
        float _1770 = (dot(vec3(_1042, _1043, _1044), vec3(_1762 * _1754, _1762 * _1755, _1762 * _1756)) + 1.0) * 0.5;
        float _4542 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1779 = sqrt(((_1755 * _1755) + (_1754 * _1754)) + (_1756 * _1756)) / (_1751 + 9.9999997473787516355514526367188e-06);
        float _4553 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _1781 = _1780 * 2.0;
        float _1785 = (1.0 - _1780) / (_1780 + 1.0);
        float _4564 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _1795 = ((((1.0 - _1786) * (_1781 + 2.0)) * exp2(log2(isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_1781 + 1.0))) + _1786) * _1751;
        float _1796 = _1719 * 0.5;
        float _1797 = _1729 * 0.5;
        float _1798 = _1739 * 0.5;
        float _1799 = dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798));
        float _1804 = (_1799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1799);
        float _1812 = (dot(vec3(_1042, _1043, _1044), vec3(_1804 * _1796, _1804 * _1797, _1804 * _1798)) + 1.0) * 0.5;
        float _4575 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1821 = sqrt(((_1797 * _1797) + (_1796 * _1796)) + (_1798 * _1798)) / (_1752 + 9.9999997473787516355514526367188e-06);
        float _4586 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _1823 = _1822 * 2.0;
        float _1827 = (1.0 - _1822) / (_1822 + 1.0);
        float _4597 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _1837 = ((((1.0 - _1828) * (_1823 + 2.0)) * exp2(log2(isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_1823 + 1.0))) + _1828) * _1752;
        float _1838 = _1720 * 0.5;
        float _1839 = _1730 * 0.5;
        float _1840 = _1740 * 0.5;
        float _1841 = dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840));
        float _1846 = (_1841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1841);
        float _1854 = (dot(vec3(_1042, _1043, _1044), vec3(_1846 * _1838, _1846 * _1839, _1846 * _1840)) + 1.0) * 0.5;
        float _4608 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1863 = sqrt(((_1839 * _1839) + (_1838 * _1838)) + (_1840 * _1840)) / (_1753 + 9.9999997473787516355514526367188e-06);
        float _4619 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _1865 = _1864 * 2.0;
        float _1869 = (1.0 - _1864) / (_1864 + 1.0);
        float _4630 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _1879 = ((((1.0 - _1870) * (_1865 + 2.0)) * exp2(log2(isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_1865 + 1.0))) + _1870) * _1753;
        _1887 = _1720;
        _1888 = _1719;
        _1889 = _1718;
        _1890 = _1730;
        _1891 = _1729;
        _1892 = _1728;
        _1893 = _1740;
        _1894 = _1739;
        _1895 = _1738;
        _1896 = _1753;
        _1897 = _1752;
        _1898 = _1751;
        _1899 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)));
        _1900 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)));
        _1901 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)));
    }
    else
    {
        _1887 = _1581;
        _1888 = _1581;
        _1889 = _1581;
        _1890 = _1581;
        _1891 = _1581;
        _1892 = _1581;
        _1893 = _1581;
        _1894 = _1581;
        _1895 = _1581;
        _1896 = _1581;
        _1897 = _1581;
        _1898 = _1581;
        _1899 = 0.0;
        _1900 = 0.0;
        _1901 = 0.0;
    }
    float _1911 = (cbModelParam._m0[1u].x * (_1899 - _1593)) + _1593;
    float _1912 = (cbModelParam._m0[1u].x * (_1900 - _1594)) + _1594;
    float _1913 = (cbModelParam._m0[1u].x * (_1901 - _1595)) + _1595;
    float _1934 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1911 * cbSceneParam._m0[89u].x));
    float _1937 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1911 * cbSceneParam._m0[90u].x));
    float _1940 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1911));
    float _1955 = _1215 * 0.5;
    float _1956 = _1216 * 0.5;
    float _1957 = _1217 * 0.5;
    float _1958 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1889, _1892, _1895, _1898));
    float _1961 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1888, _1891, _1894, _1897));
    float _1964 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1887, _1890, _1893, _1896));
    float _1998;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1971 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1580, _1584, _1587, _1590));
        float _1975 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1582, _1585, _1588, _1591));
        float _1979 = dot(vec4(_1955, _1956, _1957, 1.0), vec4(_1583, _1586, _1589, _1592));
        float _1986 = dot(vec4(cbModelParam._m0[39u]), vec4(_1955, _1956, _1957, 1.0));
        _1998 = dot(vec3(isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)), isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)), isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1986) ? 0.0 : (isnan(0.0) ? _1986 : max(0.0, _1986))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1998 = 1.0;
    }
    float _2009;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2000 = dot(vec4(cbModelParam._m0[40u]), vec4(_1955, _1956, _1957, 1.0));
        _2009 = dot(vec3(isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)), isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2000) ? 0.0 : (isnan(0.0) ? _2000 : max(0.0, _2000))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2009 = 1.0;
    }
    float _2013 = (_2009 * cbModelParam._m0[1u].x) + (_1998 * (1.0 - cbModelParam._m0[1u].x));
    float _2023 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1045);
    float _2024 = isnan(_2023) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2023 : min(cbModelParam._m0[25u].z, _2023));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2072 = fma(_1279, cbModelParam._m0[13u].z, fma(_1275, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1271)) + cbModelParam._m0[13u].w;
        float _2076 = fma(_1279, cbModelParam._m0[14u].z, fma(_1275, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1271)) + cbModelParam._m0[14u].w;
        float _2080 = fma(_1279, cbModelParam._m0[15u].z, fma(_1275, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1271)) + cbModelParam._m0[15u].w;
        float _2083 = fma(_1217, cbModelParam._m0[13u].z, fma(_1216, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1215));
        float _2086 = fma(_1217, cbModelParam._m0[14u].z, fma(_1216, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1215));
        float _2089 = fma(_1217, cbModelParam._m0[15u].z, fma(_1216, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1215));
        float _2117;
        if (_2083 > 0.0)
        {
            _2117 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2117 = frontier_phi_14_12_ladder;
        }
        float _2289;
        if (_2086 > 0.0)
        {
            _2289 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2289 = frontier_phi_23_19_ladder;
        }
        float _2584;
        if (_2089 > 0.0)
        {
            _2584 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2584 = frontier_phi_35_30_ladder;
        }
        float _2586 = isnan(_2289) ? _2117 : (isnan(_2117) ? _2289 : min(_2117, _2289));
        float _2587 = isnan(_2584) ? _2586 : (isnan(_2586) ? _2584 : min(_2586, _2584));
        float _2591 = (_2587 * _2083) + _2072;
        float _2592 = (_2587 * _2086) + _2076;
        float _2593 = (_2587 * _2089) + _2080;
        float _2594 = _2587 * 9.9999997473787516355514526367188e-05;
        float _2596 = (-1.0) - _2594;
        float _2598 = _2594 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2593 > _2598) || ((_2593 < _2596) || ((_2592 > _2598) || ((_2592 < _2596) || ((_2591 < _2596) || (_2591 > _2598))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2593, cbModelParam._m0[9u].z, fma(_2592, cbModelParam._m0[9u].y, _2591 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2593, cbModelParam._m0[10u].z, fma(_2592, cbModelParam._m0[10u].y, _2591 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2593, cbModelParam._m0[11u].z, fma(_2592, cbModelParam._m0[11u].y, _2591 * cbModelParam._m0[11u].x))), _2024);
            frontier_phi_13_35_ladder = _2738.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2738.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2738.x * cbModelParam._m0[1u].y;
        }
        _2105 = frontier_phi_13_35_ladder_2;
        _2107 = frontier_phi_13_35_ladder_1;
        _2109 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1215, _1216, _1217), _2024);
        _2105 = _2093.x * cbModelParam._m0[1u].y;
        _2107 = _2093.y * cbModelParam._m0[1u].y;
        _2109 = _2093.z * cbModelParam._m0[1u].y;
    }
    float _2113 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1045);
    float _2114 = isnan(_2113) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2113 : min(cbModelParam._m0[25u].w, _2113));
    float _2204;
    float _2206;
    float _2208;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2168 = fma(_1279, cbModelParam._m0[21u].z, fma(_1275, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1271)) + cbModelParam._m0[21u].w;
        float _2172 = fma(_1279, cbModelParam._m0[22u].z, fma(_1275, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1271)) + cbModelParam._m0[22u].w;
        float _2176 = fma(_1279, cbModelParam._m0[23u].z, fma(_1275, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1271)) + cbModelParam._m0[23u].w;
        float _2179 = fma(_1217, cbModelParam._m0[21u].z, fma(_1216, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1215));
        float _2182 = fma(_1217, cbModelParam._m0[22u].z, fma(_1216, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1215));
        float _2185 = fma(_1217, cbModelParam._m0[23u].z, fma(_1216, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1215));
        float _2294;
        if (_2179 > 0.0)
        {
            _2294 = abs((1.0 - _2168) / _2179);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2179 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2168 + 1.0) / _2179);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2294 = frontier_phi_25_21_ladder;
        }
        float _2611;
        if (_2182 > 0.0)
        {
            _2611 = abs((1.0 - _2172) / _2182);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2172 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2611 = frontier_phi_37_32_ladder;
        }
        float _2949;
        if (_2185 > 0.0)
        {
            _2949 = abs((1.0 - _2176) / _2185);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2185 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2176 + 1.0) / _2185);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2949 = frontier_phi_47_44_ladder;
        }
        float _2951 = isnan(_2611) ? _2294 : (isnan(_2294) ? _2611 : min(_2294, _2611));
        float _2952 = isnan(_2949) ? _2951 : (isnan(_2951) ? _2949 : min(_2951, _2949));
        float _2956 = (_2952 * _2179) + _2168;
        float _2957 = (_2952 * _2182) + _2172;
        float _2958 = (_2952 * _2185) + _2176;
        float _2959 = _2952 * 9.9999997473787516355514526367188e-05;
        float _2960 = (-1.0) - _2959;
        float _2962 = _2959 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2958 > _2962) || ((_2958 < _2960) || ((_2957 > _2962) || ((_2957 < _2960) || ((_2956 < _2960) || (_2956 > _2962))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3080 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2958, cbModelParam._m0[17u].z, fma(_2957, cbModelParam._m0[17u].y, _2956 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2958, cbModelParam._m0[18u].z, fma(_2957, cbModelParam._m0[18u].y, _2956 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2958, cbModelParam._m0[19u].z, fma(_2957, cbModelParam._m0[19u].y, _2956 * cbModelParam._m0[19u].x))), _2114);
            frontier_phi_22_47_ladder = _3080.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3080.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3080.x * cbModelParam._m0[1u].z;
        }
        _2204 = frontier_phi_22_47_ladder_2;
        _2206 = frontier_phi_22_47_ladder_1;
        _2208 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2188 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1215, _1216, _1217), _2114);
        _2204 = _2188.x * cbModelParam._m0[1u].z;
        _2206 = _2188.y * cbModelParam._m0[1u].z;
        _2208 = _2188.z * cbModelParam._m0[1u].z;
    }
    float _2221 = (((_1242 * _1191) + _1243) * _1207) * ((cbModelParam._m0[1u].w * (_2204 - _2105)) + _2105);
    float _2223 = (((_1242 * _1193) + _1243) * _1207) * ((cbModelParam._m0[1u].w * (_2206 - _2107)) + _2107);
    float _2225 = (((_1242 * _1194) + _1243) * _1207) * ((cbModelParam._m0[1u].w * (_2208 - _2109)) + _2109);
    float _2228 = fma(_2225, cbSceneParam._m0[89u].z, fma(_2223, cbSceneParam._m0[89u].y, _2221 * cbSceneParam._m0[89u].x));
    float _2231 = fma(_2225, cbSceneParam._m0[90u].z, fma(_2223, cbSceneParam._m0[90u].y, _2221 * cbSceneParam._m0[90u].x));
    float _2234 = fma(_2225, cbSceneParam._m0[91u].z, fma(_2223, cbSceneParam._m0[91u].y, _2221 * cbSceneParam._m0[91u].x));
    float _2268 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2272 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2276 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2280 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2281 = _2268 / _2280;
    float _2282 = _2272 / _2280;
    float _2283 = _2276 / _2280;
    float _2430;
    float _2431;
    float _2432;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2310 = ((uint(_2283 > cbSceneParam._m0[59u].y) + uint(_2283 > cbSceneParam._m0[59u].x)) + uint(_2283 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2311 = _2310 + 43u;
        uint _2319 = _2310 + 44u;
        uint _2327 = _2310 + 45u;
        uint _2335 = _2310 + 46u;
        float _2346 = fma(_2280, cbSceneParam._m0[_2311].w, fma(_2276, cbSceneParam._m0[_2311].z, fma(_2272, cbSceneParam._m0[_2311].y, _2268 * cbSceneParam._m0[_2311].x)));
        float _2350 = fma(_2280, cbSceneParam._m0[_2319].w, fma(_2276, cbSceneParam._m0[_2319].z, fma(_2272, cbSceneParam._m0[_2319].y, _2268 * cbSceneParam._m0[_2319].x)));
        float _2358 = fma(_2280, cbSceneParam._m0[_2335].w, fma(_2276, cbSceneParam._m0[_2335].z, fma(_2272, cbSceneParam._m0[_2335].y, _2268 * cbSceneParam._m0[_2335].x)));
        float _2363 = cbSceneParam._m0[33u].z * _2358;
        float _2365 = cbSceneParam._m0[33u].w * _2358;
        float _2368 = fma(_2280, cbSceneParam._m0[_2327].w, fma(_2276, cbSceneParam._m0[_2327].z, fma(_2272, cbSceneParam._m0[_2327].y, _2268 * cbSceneParam._m0[_2327].x))) / _2358;
        float _2416 = (cbSceneParam._m0[33u].x - sqrt(((_2282 * _2282) + (_2281 * _2281)) + (_2283 * _2283))) * cbSceneParam._m0[33u].y;
        float _4756 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2423 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2363 + _2346) / _2358, (_2365 + _2350) / _2358), _2368), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2365 + _2346) / _2358, (_2350 - _2363) / _2358), _2368), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2346 - _2363) / _2358, (_2350 - _2365) / _2358), _2368), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2346 - _2365) / _2358, (_2363 + _2350) / _2358), _2368), 0.0)).x), vec4(0.25)));
        _2430 = 1.0 - (_2423 * cbSceneParam._m0[34u].x);
        _2431 = 1.0 - (_2423 * cbSceneParam._m0[34u].y);
        _2432 = 1.0 - (_2423 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2430 = 1.0;
        _2431 = 1.0;
        _2432 = 1.0;
    }
    float _2496;
    float _2498;
    float _2500;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2484 = fma(_2280, cbSceneParam._m0[63u].w, fma(_2276, cbSceneParam._m0[63u].z, fma(_2272, cbSceneParam._m0[63u].y, _2268 * cbSceneParam._m0[63u].x)));
        float _2485 = fma(_2280, cbSceneParam._m0[60u].w, fma(_2276, cbSceneParam._m0[60u].z, fma(_2272, cbSceneParam._m0[60u].y, _2268 * cbSceneParam._m0[60u].x))) / _2484;
        float _2486 = fma(_2280, cbSceneParam._m0[61u].w, fma(_2276, cbSceneParam._m0[61u].z, fma(_2272, cbSceneParam._m0[61u].y, _2268 * cbSceneParam._m0[61u].x))) / _2484;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2485 >= cbSceneParam._m0[64u].x) && (_2486 >= cbSceneParam._m0[64u].y)) && (_2485 <= cbSceneParam._m0[64u].z)) && (_2486 <= cbSceneParam._m0[64u].w))
        {
            float _2624 = fma(_2280, cbSceneParam._m0[62u].w, fma(_2276, cbSceneParam._m0[62u].z, fma(_2272, cbSceneParam._m0[62u].y, _2268 * cbSceneParam._m0[62u].x))) / _2484;
            float _2628 = isnan(cbSceneParam._m0[41u].w) ? _2624 : (isnan(_2624) ? cbSceneParam._m0[41u].w : max(_2624, cbSceneParam._m0[41u].w));
            float _2671 = (cbSceneParam._m0[33u].x - sqrt(((_2282 * _2282) + (_2281 * _2281)) + (_2283 * _2283))) * cbSceneParam._m0[33u].y;
            float _4772 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
            float _2678 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2485, cbSceneParam._m0[33u].w + _2486), _2628), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2485, _2486 - cbSceneParam._m0[33u].z), _2628), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2485 - cbSceneParam._m0[33u].z, _2486 - cbSceneParam._m0[33u].w), _2628), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2485 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2486), _2628), 0.0)).x), vec4(0.25)));
            float _2682 = 1.0 - (_2678 * cbSceneParam._m0[34u].x);
            float _2683 = 1.0 - (_2678 * cbSceneParam._m0[34u].y);
            float _2684 = 1.0 - (_2678 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2684) ? _2432 : (isnan(_2432) ? _2684 : min(_2432, _2684));
            frontier_phi_34_33_ladder_1 = isnan(_2683) ? _2431 : (isnan(_2431) ? _2683 : min(_2431, _2683));
            frontier_phi_34_33_ladder_2 = isnan(_2682) ? _2430 : (isnan(_2430) ? _2682 : min(_2430, _2682));
        }
        else
        {
            frontier_phi_34_33_ladder = _2432;
            frontier_phi_34_33_ladder_1 = _2431;
            frontier_phi_34_33_ladder_2 = _2430;
        }
        _2496 = frontier_phi_34_33_ladder_2;
        _2498 = frontier_phi_34_33_ladder_1;
        _2500 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2496 = _2430;
        _2498 = _2431;
        _2500 = _2432;
    }
    uvec4 _2505 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2507 = _2505.x * 14u;
    uint _2508 = _2507 + 13u;
    float _2515 = _1207 + (-1.0);
    float _2520 = (cbLight._m0[_2508].x * _2515) + 1.0;
    float _2521 = (cbLight._m0[_2508].y * _2515) + 1.0;
    float _2522 = (cbLight._m0[_2508].z * _2515) + 1.0;
    float _2523 = (cbLight._m0[_2508].w * _2515) + 1.0;
    uint _2524 = _2507 + 5u;
    float _2530 = isnan(1.0) ? _2521 : (isnan(_2521) ? 1.0 : min(_2521, 1.0));
    uint _2534 = _2507 + 4u;
    float _2543 = isnan(1.0) ? _2520 : (isnan(_2520) ? 1.0 : min(_2520, 1.0));
    uint _2547 = _2507 | 1u;
    float _2558 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_1042, _1043, _1044));
    float _2561 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_1042, _1043, _1044));
    float _4808 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _4819 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2566 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * 0.3183098733425140380859375;
    float _2568 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * 0.3183098733425140380859375;
    float _2575 = ((cbLight._m0[_2524].x * _2530) * _2568) + (((cbLight._m0[_2534].x * _2496) * _2543) * _2566);
    float _2576 = ((_2530 * cbLight._m0[_2524].y) * _2568) + (((cbLight._m0[_2534].y * _2498) * _2543) * _2566);
    float _2577 = ((_2530 * cbLight._m0[_2524].z) * _2568) + (((cbLight._m0[_2534].z * _2500) * _2543) * _2566);
    uvec4 _2581 = floatBitsToUint(cbLight._m0[_2507 + 12u]);
    bool _2583 = _2581.x == 0u;
    float _2685;
    float _2687;
    float _2689;
    if (_2583)
    {
        _2685 = _2575;
        _2687 = _2576;
        _2689 = _2577;
    }
    else
    {
        uint _2693 = _2507 + 6u;
        float _2709 = (dot(vec3(cbLight._m0[_2507 + 2u].xyz), vec3(_1042, _1043, _1044)) * 0.5) + 0.5;
        float _2710 = _2709 * _2709;
        float _4830 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2711 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2712 = isnan(1.0) ? _2522 : (isnan(_2522) ? 1.0 : min(_2522, 1.0));
        _2685 = (((cbLight._m0[_2693].x * 0.3183098733425140380859375) * _2711) * _2712) + _2575;
        _2687 = (((cbLight._m0[_2693].y * 0.3183098733425140380859375) * _2711) * _2712) + _2576;
        _2689 = (((cbLight._m0[_2693].z * 0.3183098733425140380859375) * _2711) * _2712) + _2577;
    }
    bool _2692 = _2581.y == 0u;
    float _2747;
    float _2749;
    float _2751;
    if (_2692)
    {
        _2747 = _2685;
        _2749 = _2687;
        _2751 = _2689;
    }
    else
    {
        uint _2920 = _2507 + 7u;
        float _2936 = (dot(vec3(cbLight._m0[_2507 + 3u].xyz), vec3(_1042, _1043, _1044)) * 0.5) + 0.5;
        float _2937 = _2936 * _2936;
        float _4846 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2938 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2939 = isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0));
        _2747 = (((cbLight._m0[_2920].x * 0.3183098733425140380859375) * _2938) * _2939) + _2685;
        _2749 = (((cbLight._m0[_2920].y * 0.3183098733425140380859375) * _2938) * _2939) + _2687;
        _2751 = (((cbLight._m0[_2920].z * 0.3183098733425140380859375) * _2938) * _2939) + _2689;
    }
    uint _2754 = _2507 + 8u;
    float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _1045) * 0.949999988079071044921875);
    float _2768 = _2767 * _2767;
    float _2769 = cbLight._m0[_2507].x + _1121;
    float _2770 = cbLight._m0[_2507].y + _1122;
    float _2771 = cbLight._m0[_2507].z + _1123;
    float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
    float _2776 = _2775 * _2769;
    float _2777 = _2775 * _2770;
    float _2778 = _2775 * _2771;
    float _2779 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2507].xyz));
    float _4862 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2782 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
    float _4873 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _2783 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
    float _2784 = dot(vec3(_1042, _1043, _1044), vec3(_2776, _2777, _2778));
    float _4884 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
    float _2787 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
    float _2788 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2776, _2777, _2778));
    float _4895 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
    float _2792 = _2768 * _2768;
    float _2796 = ((_2787 * _2787) * (_2792 + (-1.0))) + 1.0;
    float _2804 = exp2(log2(1.0 - (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) * 5.0);
    float _2805 = 0.959999978542327880859375 - _1188;
    float _2807 = 0.959999978542327880859375 - _1189;
    float _2808 = 0.959999978542327880859375 - _1190;
    float _2815 = 1.0 - _2768;
    float _2826 = (0.5 / (((_2783 * ((_2782 * _2815) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2783 * _2815) + _2768) * _2782))) * _2782;
    float _4906 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
    float _2828 = (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2792 / ((_2796 * _2796) * 3.141590118408203125));
    uint _2842 = _2507 + 9u;
    float _2853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2547].w)) * _1045) * 0.949999988079071044921875);
    float _2854 = _2853 * _2853;
    float _2855 = cbLight._m0[_2547].x + _1121;
    float _2856 = cbLight._m0[_2547].y + _1122;
    float _2857 = cbLight._m0[_2547].z + _1123;
    float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
    float _2862 = _2861 * _2855;
    float _2863 = _2861 * _2856;
    float _2864 = _2861 * _2857;
    float _2865 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2547].xyz));
    float _4917 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
    float _2868 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
    float _2869 = dot(vec3(_1042, _1043, _1044), vec3(_2862, _2863, _2864));
    float _4928 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
    float _2872 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
    float _2873 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_2862, _2863, _2864));
    float _4939 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
    float _2877 = _2854 * _2854;
    float _2881 = ((_2872 * _2872) * (_2877 + (-1.0))) + 1.0;
    float _2888 = exp2(log2(1.0 - (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0)))) * 5.0);
    float _2895 = 1.0 - _2854;
    float _2905 = (0.5 / (((_2783 * ((_2868 * _2895) + _2854)) + 9.9999999392252902907785028219223e-09) + (((_2783 * _2895) + _2854) * _2868))) * _2868;
    float _4950 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
    float _2907 = (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2877 / ((_2881 * _2881) * 3.141590118408203125));
    float _2917 = (((((_2888 * _2805) + _1191) * cbLight._m0[_2842].x) * _2907) * _2530) + ((((cbLight._m0[_2754].x * _2496) * ((_2804 * _2805) + _1191)) * _2828) * _2543);
    float _2918 = (((((_2888 * _2807) + _1193) * cbLight._m0[_2842].y) * _2907) * _2530) + ((((cbLight._m0[_2754].y * _2498) * ((_2804 * _2807) + _1193)) * _2828) * _2543);
    float _2919 = (((((_2888 * _2808) + _1194) * cbLight._m0[_2842].z) * _2907) * _2530) + ((((cbLight._m0[_2754].z * _2500) * ((_2804 * _2808) + _1194)) * _2828) * _2543);
    float _2975;
    float _2977;
    float _2979;
    if (_2583)
    {
        _2975 = _2917;
        _2977 = _2918;
        _2979 = _2919;
    }
    else
    {
        uint _2981 = _2507 + 2u;
        uint _2985 = _2507 + 10u;
        float _2999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2981].w)) * _1045) * 0.949999988079071044921875);
        float _3000 = _2999 * _2999;
        float _3001 = cbLight._m0[_2981].x + _1121;
        float _3002 = cbLight._m0[_2981].y + _1122;
        float _3003 = cbLight._m0[_2981].z + _1123;
        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
        float _3008 = _3007 * _3001;
        float _3009 = _3007 * _3002;
        float _3010 = _3007 * _3003;
        float _3011 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2981].xyz));
        float _4961 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3014 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
        float _3015 = dot(vec3(_1042, _1043, _1044), vec3(_3008, _3009, _3010));
        float _4972 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        float _3018 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _3019 = dot(vec3(cbLight._m0[_2981].xyz), vec3(_3008, _3009, _3010));
        float _4983 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3023 = _3000 * _3000;
        float _3027 = ((_3018 * _3018) * (_3023 + (-1.0))) + 1.0;
        float _3034 = exp2(log2(1.0 - (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0)))) * 5.0);
        float _3041 = 1.0 - _3000;
        float _3051 = (0.5 / (((_2783 * ((_3014 * _3041) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_2783 * _3041) + _3000) * _3014))) * _3014;
        float _4994 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
        float _3053 = (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_3023 / ((_3027 * _3027) * 3.141590118408203125));
        float _3054 = isnan(1.0) ? _2522 : (isnan(_2522) ? 1.0 : min(_2522, 1.0));
        _2975 = (((((_3034 * _2805) + _1191) * cbLight._m0[_2985].x) * _3053) * _3054) + _2917;
        _2977 = (((((_3034 * _2807) + _1193) * cbLight._m0[_2985].y) * _3053) * _3054) + _2918;
        _2979 = (((((_3034 * _2808) + _1194) * cbLight._m0[_2985].z) * _3053) * _3054) + _2919;
    }
    float _3085;
    float _3087;
    float _3089;
    if (_2692)
    {
        _3085 = _2975;
        _3087 = _2977;
        _3089 = _2979;
    }
    else
    {
        uint _3096 = _2507 + 3u;
        uint _3100 = _2507 + 11u;
        float _3114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3096].w)) * _1045) * 0.949999988079071044921875);
        float _3115 = _3114 * _3114;
        float _3116 = cbLight._m0[_3096].x + _1121;
        float _3117 = cbLight._m0[_3096].y + _1122;
        float _3118 = cbLight._m0[_3096].z + _1123;
        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
        float _3123 = _3122 * _3116;
        float _3124 = _3122 * _3117;
        float _3125 = _3122 * _3118;
        float _3126 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_3096].xyz));
        float _5010 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
        float _3129 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
        float _3130 = dot(vec3(_1042, _1043, _1044), vec3(_3123, _3124, _3125));
        float _5021 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
        float _3133 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
        float _3134 = dot(vec3(cbLight._m0[_3096].xyz), vec3(_3123, _3124, _3125));
        float _5032 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
        float _3138 = _3115 * _3115;
        float _3142 = ((_3133 * _3133) * (_3138 + (-1.0))) + 1.0;
        float _3149 = exp2(log2(1.0 - (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) * 5.0);
        float _3156 = 1.0 - _3115;
        float _3166 = (0.5 / (((_2783 * ((_3129 * _3156) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_2783 * _3156) + _3115) * _3129))) * _3129;
        float _5043 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
        float _3168 = (isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_3138 / ((_3142 * _3142) * 3.141590118408203125));
        float _3169 = isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0));
        _3085 = (((((_3149 * _2805) + _1191) * cbLight._m0[_3100].x) * _3168) * _3169) + _2975;
        _3087 = (((((_3149 * _2807) + _1193) * cbLight._m0[_3100].y) * _3168) * _3169) + _2977;
        _3089 = (((((_3149 * _2808) + _1194) * cbLight._m0[_3100].z) * _3168) * _3169) + _2979;
    }
    float _3235;
    float _3237;
    float _3239;
    float _3241;
    float _3243;
    float _3245;
    if (_2505.y == 0u)
    {
        uvec4 _3190 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3191 = _3190.x;
        uint _3202 = uint((float(_3190.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1130) / _3191))) + floor(float(uint(cbSceneParam._m0[85u].x * _1129) / _3191)));
        float _3212 = (log2(_2283 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3213 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
        uint _3216 = uint(isnan(14.0) ? _3213 : (isnan(_3213) ? 14.0 : min(_3213, 14.0)));
        uvec4 _3221 = texelFetch(g_lightClusterGridBuffer, int(((_3216 << 2u) + (_3202 << 6u)) >> 2u));
        uint _3222 = _3221.x;
        uint _3223 = _3190.z;
        float _3302;
        float _3304;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        if (((((1u << ((_3223 >> 4u) & 15u)) + 4294967295u) & _3222) == 0u) || ((_3223 & 240u) == 0u))
        {
            _3302 = 0.0;
            _3304 = 0.0;
            _3306 = 0.0;
            _3308 = 0.0;
            _3310 = 0.0;
            _3312 = 0.0;
        }
        else
        {
            float _3303;
            float _3305;
            float _3307;
            float _3309;
            float _3311;
            float _3313;
            float _3447 = 0.0;
            float _3448 = 0.0;
            float _3449 = 0.0;
            float _3450 = 0.0;
            float _3451 = 0.0;
            float _3452 = 0.0;
            uint _3453 = 0u;
            uint _3462;
            bool _3463;
            for (;;)
            {
                _3462 = texelFetch(g_lightClassification, int((((_3216 << 5u) + (_3202 << 9u)) + (_3453 << 2u)) >> 2u)).x;
                _3463 = _3462 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3463)
                {
                    frontier_phi_66_pred = _3452;
                    frontier_phi_66_pred_1 = _3451;
                    frontier_phi_66_pred_2 = _3450;
                    frontier_phi_66_pred_3 = _3449;
                    frontier_phi_66_pred_4 = _3448;
                    frontier_phi_66_pred_5 = _3447;
                }
                else
                {
                    float _3571;
                    float _3572;
                    float _3573;
                    float _3574;
                    float _3575;
                    float _3576;
                    uint _3577;
                    _3571 = _3447;
                    _3572 = _3448;
                    _3573 = _3449;
                    _3574 = _3450;
                    _3575 = _3451;
                    _3576 = _3452;
                    _3577 = _3462;
                    float _3503;
                    float _3504;
                    float _3505;
                    float _3506;
                    float _3507;
                    float _3508;
                    for (;;)
                    {
                        uint _3581 = uint(findLSB(_3577)) + (_3453 << 5u);
                        uint _3578 = (_3577 + 4294967295u) & _3577;
                        uint _3583 = _3581 * 48u;
                        vec4 _3597 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3583)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 3u)).x));
                        uint _3603 = (_3581 * 48u) + 4u;
                        vec4 _3616 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3603)).x, texelFetch(g_PointLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3603 + 3u)).x));
                        uint _3622 = (_3581 * 48u) + 8u;
                        vec3 _3633 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3622)).x, texelFetch(g_PointLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3622 + 2u)).x));
                        float _3637 = _3597.x - _2281;
                        float _3638 = _3597.y - _2282;
                        float _3639 = _3597.z - _2283;
                        float _3640 = dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639));
                        float _3643 = inversesqrt(_3640);
                        float _3644 = _3643 * _3637;
                        float _3645 = _3643 * _3638;
                        float _3646 = _3643 * _3639;
                        float _3647 = dot(vec3(_1148, _1151, _1154), vec3(_3644, _3645, _3646));
                        float _3652 = 1.0 - (_3640 * _3597.w);
                        float _5069 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                        float _3653 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                        float _3654 = sqrt(_3640) * _3616.w;
                        float _3657 = 1.39999997615814208984375 / (_3654 + 1.39999997615814208984375);
                        float _3658 = _3657 * _3657;
                        float _3661 = ((1.0 - _3658) * _3647) + _3658;
                        float _3664 = _3654 * _3654;
                        float _3668 = ((isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0))) * _3653) / ((_3664 * 0.699999988079071044921875) + 1.0);
                        float _3672 = (-0.0) - _2281;
                        float _3673 = (-0.0) - _2282;
                        float _3674 = (-0.0) - _2283;
                        float _3678 = inversesqrt(dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674)));
                        float _3679 = _3678 * _3672;
                        float _3680 = _3678 * _3673;
                        float _3681 = _3678 * _3674;
                        float _3688 = exp2(log2(1.0 / ((_3664 * 3.5) + 5.0)) * 0.25);
                        float _3689 = 1.0 - _1223;
                        float _3696 = sqrt(1.0 - ((1.0 - (_3689 * _3689)) * (1.0 - (_3688 * _3688))));
                        float _3697 = _3696 * _3696;
                        float _3698 = _3697 * _3697;
                        float _3699 = _3679 + _3644;
                        float _3700 = _3680 + _3645;
                        float _3701 = _3681 + _3646;
                        float _3705 = inversesqrt(dot(vec3(_3699, _3700, _3701), vec3(_3699, _3700, _3701)));
                        float _3709 = dot(vec3(_1148, _1151, _1154), vec3(_3679, _3680, _3681));
                        float _5085 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                        float _3712 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                        float _3713 = dot(vec3(_1148, _1151, _1154), vec3(_3705 * _3699, _3705 * _3700, _3705 * _3701));
                        float _5096 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                        float _3716 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                        float _3720 = ((_3716 * _3716) * (_3698 + (-1.0))) + 1.0;
                        float _3721 = _3657 * _3697;
                        float _3722 = _3721 * _3721;
                        float _3725 = ((1.0 - _3722) * _3647) + _3722;
                        float _5107 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                        float _3726 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                        float _3727 = 1.0 - _3697;
                        float _3737 = (0.5 / (((_3726 * ((_3712 * _3727) + _3697)) + 9.9999999392252902907785028219223e-09) + (((_3726 * _3727) + _3697) * _3712))) * _3726;
                        float _5118 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                        float _3748 = (((_3698 * 3.1415927410125732421875) * (isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0)))) / ((_3720 * _3720) * ((_3664 * 2.1991131305694580078125) + 3.141590118408203125))) * _3653;
                        _3506 = (_3668 * _3616.x) + _3574;
                        _3507 = (_3668 * _3616.y) + _3575;
                        _3508 = (_3668 * _3616.z) + _3576;
                        _3503 = (_3748 * _3633.x) + _3571;
                        _3504 = (_3748 * _3633.y) + _3572;
                        _3505 = (_3748 * _3633.z) + _3573;
                        if (_3578 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3571 = _3503;
                            _3572 = _3504;
                            _3573 = _3505;
                            _3574 = _3506;
                            _3575 = _3507;
                            _3576 = _3508;
                            _3577 = _3578;
                        }
                    }
                    frontier_phi_66_pred = _3508;
                    frontier_phi_66_pred_1 = _3507;
                    frontier_phi_66_pred_2 = _3506;
                    frontier_phi_66_pred_3 = _3505;
                    frontier_phi_66_pred_4 = _3504;
                    frontier_phi_66_pred_5 = _3503;
                }
                _3313 = frontier_phi_66_pred;
                _3311 = frontier_phi_66_pred_1;
                _3309 = frontier_phi_66_pred_2;
                _3307 = frontier_phi_66_pred_3;
                _3305 = frontier_phi_66_pred_4;
                _3303 = frontier_phi_66_pred_5;
                uint _3454 = _3453 + 1u;
                if (_3454 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3447 = _3303;
                    _3448 = _3305;
                    _3449 = _3307;
                    _3450 = _3309;
                    _3451 = _3311;
                    _3452 = _3313;
                    _3453 = _3454;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3302 = _3303;
            _3304 = _3305;
            _3306 = _3307;
            _3308 = _3309;
            _3310 = _3311;
            _3312 = _3313;
        }
        uvec4 _3316 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3317 = _3316.z;
        uint _3319 = (_3317 >> 8u) & 15u;
        float _3415;
        float _3417;
        float _3419;
        float _3421;
        float _3423;
        float _3425;
        if (((4294967295u << _3319) & _3222) == 0u)
        {
            _3415 = _3302;
            _3417 = _3304;
            _3419 = _3306;
            _3421 = _3308;
            _3423 = _3310;
            _3425 = _3312;
        }
        else
        {
            float _3440 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
            float _3441 = _3440 * _2281;
            float _3442 = _3440 * _2282;
            float _3443 = _3440 * _2283;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3319 < ((_3317 >> 12u) & 15u))
            {
                float _3416;
                float _3418;
                float _3420;
                float _3422;
                float _3424;
                float _3426;
                float _3554 = _3302;
                float _3555 = _3304;
                float _3556 = _3306;
                float _3557 = _3308;
                float _3558 = _3310;
                float _3559 = _3312;
                uint _3560 = _3319;
                uint _3569;
                bool _3570;
                for (;;)
                {
                    _3569 = texelFetch(g_lightClassification, int((((_3216 << 5u) + (_3202 << 9u)) + (_3560 << 2u)) >> 2u)).x;
                    _3570 = _3569 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3570)
                    {
                        frontier_phi_72_pred = _3559;
                        frontier_phi_72_pred_1 = _3558;
                        frontier_phi_72_pred_2 = _3557;
                        frontier_phi_72_pred_3 = _3556;
                        frontier_phi_72_pred_4 = _3555;
                        frontier_phi_72_pred_5 = _3554;
                    }
                    else
                    {
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _4046;
                        float _4047;
                        float _4048;
                        float _4049;
                        float _4050;
                        float _4051;
                        float _3766 = _3554;
                        float _3767 = _3555;
                        float _3768 = _3556;
                        float _3769 = _3557;
                        float _3770 = _3558;
                        float _3771 = _3559;
                        uint _3772 = _3569;
                        uint _3773;
                        vec4 _3798;
                        float _3799;
                        vec4 _3814;
                        vec3 _3826;
                        vec4 _3841;
                        vec4 _3856;
                        float _3902;
                        bool _3903;
                        for (;;)
                        {
                            uint _3783 = ((_3560 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3772));
                            _3773 = (_3772 + 4294967295u) & _3772;
                            uint _3785 = _3783 * 40u;
                            _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            _3799 = _3798.w;
                            uint _3801 = (_3783 * 40u) + 4u;
                            _3814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 3u)).x));
                            uint _3816 = (_3783 * 40u) + 8u;
                            _3826 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 2u)).x));
                            uint _3828 = (_3783 * 40u) + 16u;
                            _3841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 3u)).x));
                            uint _3843 = (_3783 * 40u) + 20u;
                            _3856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 3u)).x));
                            uint _3858 = (_3783 * 40u) + 24u;
                            vec4 _3871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 3u)).x));
                            uint _3877 = (_3783 * 40u) + 28u;
                            vec4 _3890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 3u)).x));
                            _3902 = fma(_2283, _3890.z, fma(_2282, _3890.y, _3890.x * _2281)) + _3890.w;
                            _3903 = !((fma(_2283, _3871.z, fma(_2282, _3871.y, _3871.x * _2281)) + _3871.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3903)
                            {
                                float _3930 = _3798.x - _2281;
                                float _3931 = _3798.y - _2282;
                                float _3932 = _3798.z - _2283;
                                float _3933 = dot(vec3(_3930, _3931, _3932), vec3(_3930, _3931, _3932));
                                float _3936 = inversesqrt(_3933);
                                float _3937 = _3936 * _3930;
                                float _3938 = _3936 * _3931;
                                float _3939 = _3936 * _3932;
                                float _3943 = 1.0 - (_3933 / (_3799 * _3799));
                                float _5129 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3944 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                                float _3948 = sqrt(_3933) * _3814.w;
                                float _3950 = 1.39999997615814208984375 / (_3948 + 1.39999997615814208984375);
                                float _3951 = _3950 * _3950;
                                float _3954 = ((1.0 - _3951) * dot(vec3(_3937, _3938, _3939), vec3(_1148, _1151, _1154))) + _3951;
                                float _3957 = _3948 * _3948;
                                float _3961 = (fma(_2283, _3841.z, fma(_2282, _3841.y, _3841.x * _2281)) + _3841.w) / _3902;
                                float _3962 = (fma(_2283, _3856.z, fma(_2282, _3856.y, _3856.x * _2281)) + _3856.w) / _3902;
                                float _3966 = 1.0 - dot(vec2(_3961, _3962), vec2(_3961, _3962));
                                float _5145 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3967 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
                                float _3968 = _3967 * (((isnan(0.0) ? _3954 : (isnan(_3954) ? 0.0 : max(_3954, 0.0))) * _3944) / ((_3957 * 0.699999988079071044921875) + 1.0));
                                float _3980 = exp2(log2(1.0 / ((_3957 * 3.5) + 5.0)) * 0.25);
                                float _3981 = 1.0 - _1223;
                                float _3988 = sqrt(1.0 - ((1.0 - (_3981 * _3981)) * (1.0 - (_3980 * _3980))));
                                float _3989 = _3988 * _3988;
                                float _3990 = _3989 * _3989;
                                float _3991 = _3937 - _3441;
                                float _3992 = _3938 - _3442;
                                float _3993 = _3939 - _3443;
                                float _3997 = inversesqrt(dot(vec3(_3991, _3992, _3993), vec3(_3991, _3992, _3993)));
                                float _4001 = dot(vec3(_1148, _1151, _1154), vec3((-0.0) - _3441, (-0.0) - _3442, (-0.0) - _3443));
                                float _5156 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4004 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
                                float _4005 = dot(vec3(_1148, _1151, _1154), vec3(_3997 * _3991, _3997 * _3992, _3997 * _3993));
                                float _5167 = isnan(0.0) ? _4005 : (isnan(_4005) ? 0.0 : max(_4005, 0.0));
                                float _4008 = isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0));
                                float _4012 = ((_4008 * _4008) * (_3990 + (-1.0))) + 1.0;
                                float _4013 = _3950 * _3989;
                                float _4014 = _4013 * _4013;
                                float _4020 = ((1.0 - _4014) * dot(vec3(_1148, _1151, _1154), vec3(_3937, _3938, _3939))) + _4014;
                                float _5178 = isnan(0.0) ? _4020 : (isnan(_4020) ? 0.0 : max(_4020, 0.0));
                                float _4021 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
                                float _4022 = 1.0 - _3989;
                                float _4032 = (0.5 / (((_4021 * ((_4004 * _4022) + _3989)) + 9.9999999392252902907785028219223e-09) + (((_4021 * _4022) + _3989) * _4004))) * _4021;
                                float _5189 = isnan(0.0) ? _4032 : (isnan(_4032) ? 0.0 : max(_4032, 0.0));
                                float _4042 = (_3967 * _3944) * (((_3990 * 3.1415927410125732421875) * (isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0)))) / ((_4012 * _4012) * ((_3957 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3968 * _3814.y;
                                frontier_phi_78_pred_1 = _3968 * _3814.x;
                                frontier_phi_78_pred_2 = _4042 * _3826.z;
                                frontier_phi_78_pred_3 = _4042 * _3826.y;
                                frontier_phi_78_pred_4 = _4042 * _3826.x;
                                frontier_phi_78_pred_5 = _3968 * _3814.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4050 = frontier_phi_78_pred;
                            _4049 = frontier_phi_78_pred_1;
                            _4048 = frontier_phi_78_pred_2;
                            _4047 = frontier_phi_78_pred_3;
                            _4046 = frontier_phi_78_pred_4;
                            _4051 = frontier_phi_78_pred_5;
                            _3756 = _4049 + _3769;
                            _3757 = _4050 + _3770;
                            _3758 = _4051 + _3771;
                            _3753 = _4046 + _3766;
                            _3754 = _4047 + _3767;
                            _3755 = _4048 + _3768;
                            if (_3773 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3766 = _3753;
                                _3767 = _3754;
                                _3768 = _3755;
                                _3769 = _3756;
                                _3770 = _3757;
                                _3771 = _3758;
                                _3772 = _3773;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3758;
                        frontier_phi_72_pred_1 = _3757;
                        frontier_phi_72_pred_2 = _3756;
                        frontier_phi_72_pred_3 = _3755;
                        frontier_phi_72_pred_4 = _3754;
                        frontier_phi_72_pred_5 = _3753;
                    }
                    _3426 = frontier_phi_72_pred;
                    _3424 = frontier_phi_72_pred_1;
                    _3422 = frontier_phi_72_pred_2;
                    _3420 = frontier_phi_72_pred_3;
                    _3418 = frontier_phi_72_pred_4;
                    _3416 = frontier_phi_72_pred_5;
                    uint _3561 = _3560 + 1u;
                    if (_3561 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3554 = _3416;
                        _3555 = _3418;
                        _3556 = _3420;
                        _3557 = _3422;
                        _3558 = _3424;
                        _3559 = _3426;
                        _3560 = _3561;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3426;
                frontier_phi_60_61_ladder_1 = _3424;
                frontier_phi_60_61_ladder_2 = _3420;
                frontier_phi_60_61_ladder_3 = _3418;
                frontier_phi_60_61_ladder_4 = _3416;
                frontier_phi_60_61_ladder_5 = _3422;
            }
            else
            {
                frontier_phi_60_61_ladder = _3312;
                frontier_phi_60_61_ladder_1 = _3310;
                frontier_phi_60_61_ladder_2 = _3306;
                frontier_phi_60_61_ladder_3 = _3304;
                frontier_phi_60_61_ladder_4 = _3302;
                frontier_phi_60_61_ladder_5 = _3308;
            }
            _3415 = frontier_phi_60_61_ladder_4;
            _3417 = frontier_phi_60_61_ladder_3;
            _3419 = frontier_phi_60_61_ladder_2;
            _3421 = frontier_phi_60_61_ladder_5;
            _3423 = frontier_phi_60_61_ladder_1;
            _3425 = frontier_phi_60_61_ladder;
        }
        float _3430 = isnan(1.0) ? _1207 : (isnan(_1207) ? 1.0 : min(_1207, 1.0));
        _3235 = (_3430 * _3421) + _2747;
        _3237 = (_3430 * _3423) + _2749;
        _3239 = (_3430 * _3425) + _2751;
        _3241 = ((_3415 * _1191) * _3430) + _3085;
        _3243 = ((_3417 * _1193) * _3430) + _3087;
        _3245 = ((_3419 * _1194) * _3430) + _3089;
    }
    else
    {
        _3235 = _2747;
        _3237 = _2749;
        _3239 = _2751;
        _3241 = _3085;
        _3243 = _3087;
        _3245 = _3089;
    }
    float _5205 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _5216 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _5227 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    uint _3265 = _297 + 6u;
    float _3273 = _1129 / cbSceneParam._m0[86u].x;
    float _3274 = _1130 / cbSceneParam._m0[86u].y;
    vec4 _3288 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3273, _3274, (log2((isnan(cbSceneParam._m0[77u].w) ? _1064 : (isnan(_1064) ? cbSceneParam._m0[77u].w : min(_1064, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3290 = _3288.x;
    float _3291 = _3288.y;
    float _3292 = _3288.z;
    float _3293 = _3288.w;
    float _3365;
    float _3367;
    float _3369;
    float _3371;
    if (_1064 > cbSceneParam._m0[78u].w)
    {
        float _3327 = isnan(_1064) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1064 : min(cbSceneParam._m0[80u].w, _1064));
        float _3328 = _3327 / _1064;
        float _3339 = _3328 * _1114;
        float _3340 = _1115 * _3328;
        float _3341 = (-0.0) - _3340;
        float _3343 = _3328 * _1116;
        float _3345 = (cbSceneParam._m0[77u].w * _3341) / _3327;
        float _3346 = _3345 + cbSceneParam._m0[79u].w;
        float _3347 = cbSceneParam._m0[79u].w - _3340;
        float _3353 = sqrt(((_3339 * _3339) + (_3340 * _3340)) + (_3343 * _3343));
        float _3356 = (1.0 - (cbSceneParam._m0[77u].w / _3327)) * _3353;
        float _3361 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3363 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3516;
        if (abs((_3341 - _3345) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3516 = ((((_3346 > 0.0) ? exp2(_3361 * _3346) : (2.0 - exp2(_3363 * _3346))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3356;
        }
        else
        {
            float _3476 = 1.0 / cbSceneParam._m0[80u].x;
            float _3477 = isnan(_3347) ? _3346 : (isnan(_3346) ? _3347 : max(_3346, _3347));
            float _3478 = isnan(_3347) ? _3346 : (isnan(_3346) ? _3347 : min(_3346, _3347));
            float _3487 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : min(_3477, 0.0));
            float _3488 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : min(_3478, 0.0));
            _3516 = ((abs(_3353 / _3341) * cbSceneParam._m0[80u].y) * ((((_3487 - _3488) * 2.0) - ((exp2(_3361 * (isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0)))) - exp2(_3361 * (isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))))) * _3476)) - ((exp2(_3363 * _3487) - exp2(_3363 * _3488)) * _3476))) + (_3356 * cbSceneParam._m0[80u].z);
        }
        vec4 _3518 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3273, _3274, 1.0), 0.0);
        float _3527 = exp2((_3516 * (-1.44269502162933349609375)) * (1.0 - _3518.w));
        float _3528 = log2(_3527);
        float _3544 = log2(_3293);
        _3365 = (exp2(_3544 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3528 * cbSceneParam._m0[78u].x)) * _3518.x) / cbSceneParam._m0[78u].x)) + _3290;
        _3367 = (exp2(_3544 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3528 * cbSceneParam._m0[78u].y)) * _3518.y) / cbSceneParam._m0[78u].y)) + _3291;
        _3369 = (exp2(_3544 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3528 * cbSceneParam._m0[78u].z)) * _3518.z) / cbSceneParam._m0[78u].z)) + _3292;
        _3371 = _3527 * _3293;
    }
    else
    {
        _3365 = _3290;
        _3367 = _3291;
        _3369 = _3292;
        _3371 = _3293;
    }
    float _3383 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3384 = _3383 == 3.0;
    float _3385 = log2(_3371);
    float _3392 = exp2(_3385 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0))) * (_3235 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1207))) + ((_3241 + ((isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0))) * _2013)) * cbPerFrame._m0[3u].x));
    float _3393 = exp2(_3385 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0))) * (_3237 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1207))) + ((_3243 + ((isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0))) * _2013)) * cbPerFrame._m0[3u].x));
    float _3394 = exp2(_3385 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0))) * (_3239 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1207))) + ((_3245 + ((isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0))) * _2013)) * cbPerFrame._m0[3u].x));
    float _3403 = (_3383 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3403 * (_3384 ? _3392 : (_3392 + (cbSceneParam._m0[72u].w * _3365)));
    SV_Target.y = _3403 * (_3384 ? _3393 : (_3393 + (cbSceneParam._m0[72u].w * _3367)));
    SV_Target.z = _3403 * (_3384 ? _3394 : (_3394 + (cbSceneParam._m0[72u].w * _3369)));
    SV_Target.w = cbInstanceData._m0[_3265].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3265].w;
}


