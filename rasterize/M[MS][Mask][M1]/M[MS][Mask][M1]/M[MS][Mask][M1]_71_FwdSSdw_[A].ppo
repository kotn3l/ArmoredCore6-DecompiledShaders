#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1373;
float _3777;
float _3778;
float _3779;
float _3780;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _336.x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[23u].w) + _386) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3789 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _411 = (_404 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _412 = (_404 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _413 = (_404 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _462 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _476 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _336.y) * 2.0) - ((((_452 - _462) * cbMtdParam._m0[23u].w) + _462) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3800 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _484 = (_477 * ((_430.x * cbMtdParam._m0[13u].x) - _411)) + _411;
    float _485 = (_477 * ((_430.y * cbMtdParam._m0[13u].y) - _412)) + _412;
    float _486 = (_477 * ((_430.z * cbMtdParam._m0[13u].z) - _413)) + _413;
    vec4 _504 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _523 = _521.x;
    float _524 = _521.y;
    float _525 = _521.z;
    float _532 = ((_504.x - _523) * _404) + _523;
    float _533 = ((_504.y - _524) * _404) + _524;
    float _534 = ((_504.z - _525) * _404) + _525;
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _559 = ((_546.z - _534) * _477) + _534;
    float _562 = ((((_546.x - _532) * _477) + _532) * 2.0) + (-1.0);
    float _564 = ((((_546.y - _533) * _477) + _533) * 2.0) + (-1.0);
    float _565 = dot(vec2(_562, _564), vec2(_562, _564));
    float _3811 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _596 = (((_584.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _562;
    float _597 = (((_584.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _564;
    float _600 = fma(_570, _236, fma(_597, _243, _596 * _229));
    float _603 = fma(_570, _237, fma(_597, _244, _596 * _230));
    float _606 = fma(_570, _238, fma(_597, _245, _596 * _231));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _639 = _637.x;
    float _640 = 1.0 - _639;
    float _649 = (cbMtdParam._m0[19u].x + dot(vec4(_610 * _600, _610 * _603, _610 * _606, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_639 - _640) * cbMtdParam._m0[24u].z) + _640) * cbMtdParam._m0[21u].z);
    float _3822 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _650 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _657 = (_650 * (cbMtdParam._m0[17u].x - _484)) + _484;
    float _658 = (_650 * (cbMtdParam._m0[17u].y - _485)) + _485;
    float _659 = (_650 * (cbMtdParam._m0[17u].z - _486)) + _486;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _687 = _685.x;
    float _705 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _687) * _404) + _687;
    float _722 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _705) * _477) + _705;
    float _726 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _722) * cbMtdParam._m0[19u].z) + _722;
    float _728 = _726 - (_726 * _650);
    float _732 = (cbMtdParam._m0[19u].w * (_584.z - _559)) + _559;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _752 = (_745.x * 2.0) + (-1.0);
    float _753 = (_745.y * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3833 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _762 = ((_745.z - _732) * _650) + _732;
    float _772 = ((sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) - _570) * _650) + _570;
    float _775 = (((_752 - _596) * _650) + _596) + (cbMtdParam._m0[21u].x * _596);
    float _776 = (((_753 - _597) * _650) + _597) + (cbMtdParam._m0[21u].x * _597);
    float _778 = cbMtdParam._m0[22u].x + _584.w;
    float _781 = fma(_772, _236, fma(_776, _243, _775 * _229));
    float _784 = fma(_772, _237, fma(_776, _244, _775 * _230));
    float _787 = fma(_772, _238, fma(_776, _245, _775 * _231));
    float _791 = inversesqrt(dot(vec3(_781, _784, _787), vec3(_781, _784, _787)));
    float _792 = _791 * _781;
    float _793 = _791 * _784;
    float _794 = _791 * _787;
    float _3844 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _795 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _3866 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _3877 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3888 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3899 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _800 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _865 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _867 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
    float _872 = _865 * _871;
    float _873 = _866 * _871;
    float _874 = _867 * _871;
    vec4 _879 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _881 = _879.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1053 = sqrt(((_865 * _865) + (_866 * _866)) + (_867 * _867));
        float _1059 = (cbMatDynParam._m0[5u].x * _1053) + cbMatDynParam._m0[5u].y;
        float _3910 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1064 = (cbMatDynParam._m0[5u].z * _1053) + cbMatDynParam._m0[5u].w;
        float _3921 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) - _1060)) + _1060) < ((_881 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _892 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _893 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _911 = fma(_794, cbSceneParam._m0[5u].z, fma(_793, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _792));
    float _914 = fma(_794, cbSceneParam._m0[6u].z, fma(_793, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _792));
    float _917 = fma(_794, cbSceneParam._m0[7u].z, fma(_793, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _792));
    uint _930 = _248 + 9u;
    uint _931 = _930 + uint(cbMatDynParam._m0[0u].w);
    float _937 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_931].x;
    float _938 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_931].y;
    float _939 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_931].z;
    float _3932 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _943 = 1.0 - _800;
    float _944 = _940 * _943;
    float _945 = _941 * _943;
    float _946 = _942 * _943;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _800;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _800;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _800;
    float _954 = _951 + 0.039999999105930328369140625;
    float _956 = _952 + 0.039999999105930328369140625;
    float _957 = _953 + 0.039999999105930328369140625;
    vec4 _966 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _892, cbSceneParam._m0[86u].y * _893));
    float _970 = ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * TEXCOORD_5.w) * _966.x;
    float _971 = dot(vec3(_792, _793, _794), vec3(_872, _873, _874));
    float _974 = _971 * 2.0;
    float _978 = (_974 * _792) - _872;
    float _979 = (_974 * _793) - _873;
    float _980 = (_974 * _794) - _874;
    float _984 = abs(dot(vec3(_872, _873, _874), vec3(_792, _793, _794)));
    float _3965 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _986 = sqrt(_795);
    float _999 = exp2((_986 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_986 * 3.0));
    float _1005 = (1.0 - _999) * ((_986 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1006 = _999 * _986;
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1372;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1097 = fma(_1042, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034));
        float _1101 = fma(_1042, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034));
        float _1105 = fma(_1042, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034));
        float _1130 = _1034 + _792;
        float _1131 = _1038 + _793;
        float _1132 = _1042 + _794;
        float _1142 = fma(_1132, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1130)) - _1097;
        float _1143 = fma(_1132, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1130)) - _1101;
        float _1144 = fma(_1132, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1130)) - _1105;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1097 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1101 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[34u].z) + ((((((_1105 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1200 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1166.x + (-0.5));
        float _1202 = _1200 * (_1166.y + (-0.5));
        float _1203 = _1200 * (_1166.z + (-0.5));
        float _1210 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1173.x + (-0.5));
        float _1212 = _1210 * (_1173.y + (-0.5));
        float _1213 = _1210 * (_1173.z + (-0.5));
        float _1220 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1180.x + (-0.5));
        float _1222 = _1220 * (_1180.y + (-0.5));
        float _1223 = _1220 * (_1180.z + (-0.5));
        float _1230 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1187.x + (-0.5));
        float _1232 = _1230 * (_1187.y + (-0.5));
        float _1233 = _1230 * (_1187.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1254 = (dot(vec3(_792, _793, _794), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1264 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4013 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1266 + 1.0))) + _1271) * _1234;
        float _1281 = _1202 * 0.5;
        float _1282 = _1212 * 0.5;
        float _1283 = _1222 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_792, _793, _794), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4046 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1308 + 1.0))) + _1313) * _1235;
        float _1323 = _1203 * 0.5;
        float _1324 = _1213 * 0.5;
        float _1325 = _1223 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_792, _793, _794), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4079 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1350 + 1.0))) + _1355) * _1236;
        _1372 = _1203;
        _1374 = _1202;
        _1375 = _1201;
        _1376 = _1213;
        _1377 = _1212;
        _1378 = _1211;
        _1379 = _1223;
        _1380 = _1222;
        _1381 = _1221;
        _1382 = _1236;
        _1383 = _1235;
        _1384 = _1234;
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1373;
        _1374 = _1373;
        _1375 = _1373;
        _1376 = _1373;
        _1377 = _1373;
        _1378 = _1373;
        _1379 = _1373;
        _1380 = _1373;
        _1381 = _1373;
        _1382 = _1373;
        _1383 = _1373;
        _1384 = _1373;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1042, cbModelParam._m0[30u].z, fma(_1038, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1034));
        float _1418 = fma(_1042, cbModelParam._m0[31u].z, fma(_1038, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1034));
        float _1422 = fma(_1042, cbModelParam._m0[32u].z, fma(_1038, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1034));
        float _1445 = _1034 + _792;
        float _1446 = _1038 + _793;
        float _1447 = _1042 + _794;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_792, _793, _794), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4142 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_792, _793, _794), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4175 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_792, _793, _794), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4208 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1373;
        _1684 = _1373;
        _1685 = _1373;
        _1686 = _1373;
        _1687 = _1373;
        _1688 = _1373;
        _1689 = _1373;
        _1690 = _1373;
        _1691 = _1373;
        _1692 = _1373;
        _1693 = _1373;
        _1694 = _1373;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1385)) + _1385;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1386)) + _1386;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1387)) + _1387;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _978 * 0.5;
    float _1752 = _979 * 0.5;
    float _1753 = _980 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1372, _1376, _1379, _1382));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _795);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1868 = fma(_1042, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1034)) + cbModelParam._m0[13u].w;
        float _1872 = fma(_1042, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1034)) + cbModelParam._m0[14u].w;
        float _1876 = fma(_1042, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1034)) + cbModelParam._m0[15u].w;
        float _1879 = fma(_980, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978));
        float _1882 = fma(_980, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978));
        float _1885 = fma(_980, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978));
        float _1913;
        if (_1879 > 0.0)
        {
            _1913 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1913 = frontier_phi_17_15_ladder;
        }
        float _2137;
        if (_1882 > 0.0)
        {
            _2137 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2137 = frontier_phi_26_22_ladder;
        }
        float _2394;
        if (_1885 > 0.0)
        {
            _2394 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2394 = frontier_phi_38_33_ladder;
        }
        float _2396 = isnan(_2137) ? _1913 : (isnan(_1913) ? _2137 : min(_1913, _2137));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1879) + _1868;
        float _2402 = (_2397 * _1882) + _1872;
        float _2403 = (_2397 * _1885) + _1876;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2406 = (-1.0) - _2404;
        float _2408 = _2404 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2403 > _2408) || ((_2403 < _2406) || ((_2402 > _2408) || ((_2402 < _2406) || ((_2401 < _2406) || (_2401 > _2408))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2403, cbModelParam._m0[9u].z, fma(_2402, cbModelParam._m0[9u].y, _2401 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2403, cbModelParam._m0[10u].z, fma(_2402, cbModelParam._m0[10u].y, _2401 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2403, cbModelParam._m0[11u].z, fma(_2402, cbModelParam._m0[11u].y, _2401 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_16_38_ladder = _2531.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2531.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2531.x * cbModelParam._m0[1u].y;
        }
        _1901 = frontier_phi_16_38_ladder_2;
        _1903 = frontier_phi_16_38_ladder_1;
        _1905 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_978, _979, _980), _1820);
        _1901 = _1889.x * cbModelParam._m0[1u].y;
        _1903 = _1889.y * cbModelParam._m0[1u].y;
        _1905 = _1889.z * cbModelParam._m0[1u].y;
    }
    float _1909 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _795);
    float _1910 = isnan(_1909) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1909 : min(cbModelParam._m0[25u].w, _1909));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1964 = fma(_1042, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1034)) + cbModelParam._m0[21u].w;
        float _1968 = fma(_1042, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1034)) + cbModelParam._m0[22u].w;
        float _1972 = fma(_1042, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1034)) + cbModelParam._m0[23u].w;
        float _1975 = fma(_980, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978));
        float _1978 = fma(_980, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978));
        float _1981 = fma(_980, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978));
        float _2142;
        if (_1975 > 0.0)
        {
            _2142 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2142 = frontier_phi_28_24_ladder;
        }
        float _2421;
        if (_1978 > 0.0)
        {
            _2421 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2421 = frontier_phi_40_35_ladder;
        }
        float _2634;
        if (_1981 > 0.0)
        {
            _2634 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2634 = frontier_phi_49_46_ladder;
        }
        float _2636 = isnan(_2421) ? _2142 : (isnan(_2142) ? _2421 : min(_2142, _2421));
        float _2637 = isnan(_2634) ? _2636 : (isnan(_2636) ? _2634 : min(_2636, _2634));
        float _2641 = (_2637 * _1975) + _1964;
        float _2642 = (_2637 * _1978) + _1968;
        float _2643 = (_2637 * _1981) + _1972;
        float _2644 = _2637 * 9.9999997473787516355514526367188e-05;
        float _2645 = (-1.0) - _2644;
        float _2647 = _2644 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2643 > _2647) || ((_2643 < _2645) || ((_2642 > _2647) || ((_2642 < _2645) || ((_2641 < _2645) || (_2641 > _2647))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2643, cbModelParam._m0[17u].z, fma(_2642, cbModelParam._m0[17u].y, _2641 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2643, cbModelParam._m0[18u].z, fma(_2642, cbModelParam._m0[18u].y, _2641 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2643, cbModelParam._m0[19u].z, fma(_2642, cbModelParam._m0[19u].y, _2641 * cbModelParam._m0[19u].x))), _1910);
            frontier_phi_25_49_ladder = _2842.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2842.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2842.x * cbModelParam._m0[1u].z;
        }
        _2000 = frontier_phi_25_49_ladder_2;
        _2002 = frontier_phi_25_49_ladder_1;
        _2004 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_978, _979, _980), _1910);
        _2000 = _1984.x * cbModelParam._m0[1u].z;
        _2002 = _1984.y * cbModelParam._m0[1u].z;
        _2004 = _1984.z * cbModelParam._m0[1u].z;
    }
    float _2017 = (((_1005 * _954) + _1006) * _970) * ((cbModelParam._m0[1u].w * (_2000 - _1901)) + _1901);
    float _2019 = (((_1005 * _956) + _1006) * _970) * ((cbModelParam._m0[1u].w * (_2002 - _1903)) + _1903);
    float _2021 = (((_1005 * _957) + _1006) * _970) * ((cbModelParam._m0[1u].w * (_2004 - _1905)) + _1905);
    float _2024 = fma(_2021, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2017 * cbSceneParam._m0[89u].x));
    float _2027 = fma(_2021, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2017 * cbSceneParam._m0[90u].x));
    float _2030 = fma(_2021, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, _2017 * cbSceneParam._m0[91u].x));
    vec4 _2038 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_892, _893));
    float _2040 = _2038.w;
    float _2052 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2040);
    float _2053 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2040);
    float _2054 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2040);
    uvec4 _2058 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2060 = _2058.x * 14u;
    uint _2061 = _2060 + 13u;
    float _2068 = _970 + (-1.0);
    float _2073 = (cbLight._m0[_2061].x * _2068) + 1.0;
    float _2074 = (cbLight._m0[_2061].y * _2068) + 1.0;
    float _2075 = (cbLight._m0[_2061].z * _2068) + 1.0;
    float _2076 = (cbLight._m0[_2061].w * _2068) + 1.0;
    uint _2077 = _2060 + 5u;
    float _2083 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2087 = _2060 + 4u;
    float _2096 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
    uint _2100 = _2060 | 1u;
    float _2111 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_792, _793, _794));
    float _2114 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_792, _793, _794));
    float _4344 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _4355 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2119 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * 0.3183098733425140380859375;
    float _2121 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * 0.3183098733425140380859375;
    float _2128 = ((cbLight._m0[_2077].x * _2083) * _2121) + (((cbLight._m0[_2087].x * _2052) * _2096) * _2119);
    float _2129 = ((_2083 * cbLight._m0[_2077].y) * _2121) + (((cbLight._m0[_2087].y * _2053) * _2096) * _2119);
    float _2130 = ((_2083 * cbLight._m0[_2077].z) * _2121) + (((cbLight._m0[_2087].z * _2054) * _2096) * _2119);
    uvec4 _2134 = floatBitsToUint(cbLight._m0[_2060 + 12u]);
    bool _2136 = _2134.x == 0u;
    float _2147;
    float _2149;
    float _2151;
    if (_2136)
    {
        _2147 = _2128;
        _2149 = _2129;
        _2151 = _2130;
    }
    else
    {
        uint _2155 = _2060 + 6u;
        float _2171 = (dot(vec3(cbLight._m0[_2060 + 2u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2172 = _2171 * _2171;
        float _4366 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2173 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2174 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2147 = (((cbLight._m0[_2155].x * 0.3183098733425140380859375) * _2173) * _2174) + _2128;
        _2149 = (((cbLight._m0[_2155].y * 0.3183098733425140380859375) * _2173) * _2174) + _2129;
        _2151 = (((cbLight._m0[_2155].z * 0.3183098733425140380859375) * _2173) * _2174) + _2130;
    }
    bool _2154 = _2134.y == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2154)
    {
        _2192 = _2147;
        _2194 = _2149;
        _2196 = _2151;
    }
    else
    {
        uint _2365 = _2060 + 7u;
        float _2381 = (dot(vec3(cbLight._m0[_2060 + 3u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2382 = _2381 * _2381;
        float _4382 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2383 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2384 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2192 = (((cbLight._m0[_2365].x * 0.3183098733425140380859375) * _2383) * _2384) + _2147;
        _2194 = (((cbLight._m0[_2365].y * 0.3183098733425140380859375) * _2383) * _2384) + _2149;
        _2196 = (((cbLight._m0[_2365].z * 0.3183098733425140380859375) * _2383) * _2384) + _2151;
    }
    uint _2199 = _2060 + 8u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2060].w)) * _795) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_2060].x + _872;
    float _2215 = cbLight._m0[_2060].y + _873;
    float _2216 = cbLight._m0[_2060].z + _874;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2060].xyz));
    float _4398 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _4409 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _2228 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2229 = dot(vec3(_792, _793, _794), vec3(_2221, _2222, _2223));
    float _4420 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2233 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_2221, _2222, _2223));
    float _4431 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = _2213 * _2213;
    float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
    float _2249 = exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0);
    float _2250 = 0.959999978542327880859375 - _951;
    float _2252 = 0.959999978542327880859375 - _952;
    float _2253 = 0.959999978542327880859375 - _953;
    float _2260 = 1.0 - _2213;
    float _2271 = (0.5 / (((_2228 * ((_2227 * _2260) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2260) + _2213) * _2227))) * _2227;
    float _4442 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
    uint _2287 = _2060 + 9u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _795) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_2100].x + _872;
    float _2301 = cbLight._m0[_2100].y + _873;
    float _2302 = cbLight._m0[_2100].z + _874;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2100].xyz));
    float _4453 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2314 = dot(vec3(_792, _793, _794), vec3(_2307, _2308, _2309));
    float _4464 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2307, _2308, _2309));
    float _4475 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2299 * _2299;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0);
    float _2340 = 1.0 - _2299;
    float _2350 = (0.5 / (((_2228 * ((_2313 * _2340) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2340) + _2299) * _2313))) * _2313;
    float _4486 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    float _2362 = (((((_2333 * _2250) + _954) * cbLight._m0[_2287].x) * _2352) * _2083) + ((((cbLight._m0[_2199].x * _2052) * ((_2249 * _2250) + _954)) * _2273) * _2096);
    float _2363 = (((((_2333 * _2252) + _956) * cbLight._m0[_2287].y) * _2352) * _2083) + ((((cbLight._m0[_2199].y * _2053) * ((_2249 * _2252) + _956)) * _2273) * _2096);
    float _2364 = (((((_2333 * _2253) + _957) * cbLight._m0[_2287].z) * _2352) * _2083) + ((((cbLight._m0[_2199].z * _2054) * ((_2249 * _2253) + _957)) * _2273) * _2096);
    float _2426;
    float _2428;
    float _2430;
    if (_2136)
    {
        _2426 = _2362;
        _2428 = _2363;
        _2430 = _2364;
    }
    else
    {
        uint _2432 = _2060 + 2u;
        uint _2436 = _2060 + 10u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _795) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _872;
        float _2453 = cbLight._m0[_2432].y + _873;
        float _2454 = cbLight._m0[_2432].z + _874;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2432].xyz));
        float _4497 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2466 = dot(vec3(_792, _793, _794), vec3(_2459, _2460, _2461));
        float _4508 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4519 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
        float _2492 = 1.0 - _2451;
        float _2502 = (0.5 / (((_2228 * ((_2465 * _2492) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2492) + _2451) * _2465))) * _2465;
        float _4530 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2504 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2505 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2426 = (((((_2485 * _2250) + _954) * cbLight._m0[_2436].x) * _2504) * _2505) + _2362;
        _2428 = (((((_2485 * _2252) + _956) * cbLight._m0[_2436].y) * _2504) * _2505) + _2363;
        _2430 = (((((_2485 * _2253) + _957) * cbLight._m0[_2436].z) * _2504) * _2505) + _2364;
    }
    float _2540;
    float _2542;
    float _2544;
    if (_2154)
    {
        _2540 = _2426;
        _2542 = _2428;
        _2544 = _2430;
    }
    else
    {
        uint _2551 = _2060 + 3u;
        uint _2555 = _2060 + 11u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _795) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _872;
        float _2572 = cbLight._m0[_2551].y + _873;
        float _2573 = cbLight._m0[_2551].z + _874;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2551].xyz));
        float _4546 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2585 = dot(vec3(_792, _793, _794), vec3(_2578, _2579, _2580));
        float _4557 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4568 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2604 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
        float _2611 = 1.0 - _2570;
        float _2621 = (0.5 / (((_2228 * ((_2584 * _2611) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2611) + _2570) * _2584))) * _2584;
        float _4579 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2623 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2624 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2540 = (((((_2604 * _2250) + _954) * cbLight._m0[_2555].x) * _2623) * _2624) + _2426;
        _2542 = (((((_2604 * _2252) + _956) * cbLight._m0[_2555].y) * _2623) * _2624) + _2428;
        _2544 = (((((_2604 * _2253) + _957) * cbLight._m0[_2555].z) * _2623) * _2624) + _2430;
    }
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_2058.y == 0u)
    {
        float _2699 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2699;
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2699;
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2699;
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.x;
        uint _2726 = uint((float(_2714.y) * floor(float(uint(cbSceneParam._m0[85u].y * _893) / _2715))) + floor(float(uint(cbSceneParam._m0[85u].x * _892) / _2715)));
        float _2736 = (log2(_2702 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2737 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        uint _2740 = uint(isnan(14.0) ? _2737 : (isnan(_2737) ? 14.0 : min(_2737, 14.0)));
        uvec4 _2745 = texelFetch(g_lightClusterGridBuffer, int(((_2740 << 2u) + (_2726 << 6u)) >> 2u));
        uint _2746 = _2745.x;
        uint _2747 = _2714.z;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((((1u << ((_2747 >> 4u) & 15u)) + 4294967295u) & _2746) == 0u) || ((_2747 & 240u) == 0u))
        {
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
        }
        else
        {
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            uint _3006 = 0u;
            uint _3015;
            bool _3016;
            for (;;)
            {
                _3015 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3006 << 2u)) >> 2u)).x;
                _3016 = _3015 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3016)
                {
                    frontier_phi_66_pred = _3000;
                    frontier_phi_66_pred_1 = _3005;
                    frontier_phi_66_pred_2 = _3004;
                    frontier_phi_66_pred_3 = _3003;
                    frontier_phi_66_pred_4 = _3002;
                    frontier_phi_66_pred_5 = _3001;
                }
                else
                {
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    uint _3151;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3015;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    for (;;)
                    {
                        uint _3155 = uint(findLSB(_3151)) + (_3006 << 5u);
                        uint _3152 = (_3151 + 4294967295u) & _3151;
                        uint _3157 = _3155 * 48u;
                        vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3177 = (_3155 * 48u) + 4u;
                        vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3196 = (_3155 * 48u) + 8u;
                        vec3 _3207 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x));
                        float _3211 = _3171.x - _2700;
                        float _3212 = _3171.y - _2701;
                        float _3213 = _3171.z - _2702;
                        float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                        float _3217 = inversesqrt(_3214);
                        float _3218 = _3217 * _3211;
                        float _3219 = _3217 * _3212;
                        float _3220 = _3217 * _3213;
                        float _3221 = dot(vec3(_911, _914, _917), vec3(_3218, _3219, _3220));
                        float _3226 = 1.0 - (_3214 * _3171.w);
                        float _4605 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                        float _3228 = sqrt(_3214) * _3190.w;
                        float _3231 = 1.39999997615814208984375 / (_3228 + 1.39999997615814208984375);
                        float _3232 = _3231 * _3231;
                        float _3235 = ((1.0 - _3232) * _3221) + _3232;
                        float _3238 = _3228 * _3228;
                        float _3242 = ((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3227) / ((_3238 * 0.699999988079071044921875) + 1.0);
                        float _3246 = (-0.0) - _2700;
                        float _3247 = (-0.0) - _2701;
                        float _3248 = (-0.0) - _2702;
                        float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3263 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                        float _3264 = 1.0 - _986;
                        float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                        float _3272 = _3271 * _3271;
                        float _3273 = _3272 * _3272;
                        float _3274 = _3253 + _3218;
                        float _3275 = _3254 + _3219;
                        float _3276 = _3255 + _3220;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3284 = dot(vec3(_911, _914, _917), vec3(_3253, _3254, _3255));
                        float _4621 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3287 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3288 = dot(vec3(_911, _914, _917), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                        float _4632 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3291 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                        float _3296 = _3231 * _3272;
                        float _3297 = _3296 * _3296;
                        float _3300 = ((1.0 - _3297) * _3221) + _3297;
                        float _4643 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3301 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3302 = 1.0 - _3272;
                        float _3312 = (0.5 / (((_3301 * ((_3287 * _3302) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3301 * _3302) + _3272) * _3287))) * _3301;
                        float _4654 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3323 = (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) / ((_3295 * _3295) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125))) * _3227;
                        _3075 = (_3242 * _3190.x) + _3148;
                        _3076 = (_3242 * _3190.y) + _3149;
                        _3077 = (_3242 * _3190.z) + _3150;
                        _3072 = (_3323 * _3207.x) + _3145;
                        _3073 = (_3323 * _3207.y) + _3146;
                        _3074 = (_3323 * _3207.z) + _3147;
                        if (_3152 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3152;
                        }
                    }
                    frontier_phi_66_pred = _3072;
                    frontier_phi_66_pred_1 = _3077;
                    frontier_phi_66_pred_2 = _3076;
                    frontier_phi_66_pred_3 = _3075;
                    frontier_phi_66_pred_4 = _3074;
                    frontier_phi_66_pred_5 = _3073;
                }
                _2848 = frontier_phi_66_pred;
                _2858 = frontier_phi_66_pred_1;
                _2856 = frontier_phi_66_pred_2;
                _2854 = frontier_phi_66_pred_3;
                _2852 = frontier_phi_66_pred_4;
                _2850 = frontier_phi_66_pred_5;
                uint _3007 = _3006 + 1u;
                if (_3007 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3000 = _2848;
                    _3001 = _2850;
                    _3002 = _2852;
                    _3003 = _2854;
                    _3004 = _2856;
                    _3005 = _2858;
                    _3006 = _3007;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
        }
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.z;
        uint _2864 = (_2862 >> 8u) & 15u;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        if (((4294967295u << _2864) & _2746) == 0u)
        {
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
        }
        else
        {
            float _2993 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
            float _2994 = _2993 * _2700;
            float _2995 = _2993 * _2701;
            float _2996 = _2993 * _2702;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2864 < ((_2862 >> 12u) & 15u))
            {
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _3128 = _2847;
                float _3129 = _2849;
                float _3130 = _2851;
                float _3131 = _2853;
                float _3132 = _2855;
                float _3133 = _2857;
                uint _3134 = _2864;
                uint _3143;
                bool _3144;
                for (;;)
                {
                    _3143 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3134 << 2u)) >> 2u)).x;
                    _3144 = _3143 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3144)
                    {
                        frontier_phi_77_pred = _3133;
                        frontier_phi_77_pred_1 = _3132;
                        frontier_phi_77_pred_2 = _3131;
                        frontier_phi_77_pred_3 = _3130;
                        frontier_phi_77_pred_4 = _3129;
                        frontier_phi_77_pred_5 = _3128;
                    }
                    else
                    {
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3350 = _3128;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        uint _3356 = _3143;
                        uint _3357;
                        vec4 _3382;
                        float _3383;
                        vec4 _3398;
                        vec3 _3410;
                        vec4 _3425;
                        vec4 _3440;
                        float _3486;
                        bool _3487;
                        for (;;)
                        {
                            uint _3367 = ((_3134 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3356));
                            _3357 = (_3356 + 4294967295u) & _3356;
                            uint _3369 = _3367 * 40u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3383 = _3382.w;
                            uint _3385 = (_3367 * 40u) + 4u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3367 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3367 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3367 * 40u) + 20u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3367 * 40u) + 24u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3461 = (_3367 * 40u) + 28u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            _3486 = fma(_2702, _3474.z, fma(_2701, _3474.y, _3474.x * _2700)) + _3474.w;
                            _3487 = !((fma(_2702, _3455.z, fma(_2701, _3455.y, _3455.x * _2700)) + _3455.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3487)
                            {
                                float _3514 = _3382.x - _2700;
                                float _3515 = _3382.y - _2701;
                                float _3516 = _3382.z - _2702;
                                float _3517 = dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516));
                                float _3520 = inversesqrt(_3517);
                                float _3521 = _3520 * _3514;
                                float _3522 = _3520 * _3515;
                                float _3523 = _3520 * _3516;
                                float _3527 = 1.0 - (_3517 / (_3383 * _3383));
                                float _4665 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                                float _3532 = sqrt(_3517) * _3398.w;
                                float _3534 = 1.39999997615814208984375 / (_3532 + 1.39999997615814208984375);
                                float _3535 = _3534 * _3534;
                                float _3538 = ((1.0 - _3535) * dot(vec3(_3521, _3522, _3523), vec3(_911, _914, _917))) + _3535;
                                float _3541 = _3532 * _3532;
                                float _3545 = (fma(_2702, _3425.z, fma(_2701, _3425.y, _3425.x * _2700)) + _3425.w) / _3486;
                                float _3546 = (fma(_2702, _3440.z, fma(_2701, _3440.y, _3440.x * _2700)) + _3440.w) / _3486;
                                float _3550 = 1.0 - dot(vec2(_3545, _3546), vec2(_3545, _3546));
                                float _4681 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3552 = _3551 * (((isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0))) * _3528) / ((_3541 * 0.699999988079071044921875) + 1.0));
                                float _3564 = exp2(log2(1.0 / ((_3541 * 3.5) + 5.0)) * 0.25);
                                float _3565 = 1.0 - _986;
                                float _3572 = sqrt(1.0 - ((1.0 - (_3565 * _3565)) * (1.0 - (_3564 * _3564))));
                                float _3573 = _3572 * _3572;
                                float _3574 = _3573 * _3573;
                                float _3575 = _3521 - _2994;
                                float _3576 = _3522 - _2995;
                                float _3577 = _3523 - _2996;
                                float _3581 = inversesqrt(dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577)));
                                float _3585 = dot(vec3(_911, _914, _917), vec3((-0.0) - _2994, (-0.0) - _2995, (-0.0) - _2996));
                                float _4692 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3588 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3589 = dot(vec3(_911, _914, _917), vec3(_3581 * _3575, _3581 * _3576, _3581 * _3577));
                                float _4703 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3592 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3596 = ((_3592 * _3592) * (_3574 + (-1.0))) + 1.0;
                                float _3597 = _3534 * _3573;
                                float _3598 = _3597 * _3597;
                                float _3604 = ((1.0 - _3598) * dot(vec3(_911, _914, _917), vec3(_3521, _3522, _3523))) + _3598;
                                float _4714 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3606 = 1.0 - _3573;
                                float _3616 = (0.5 / (((_3605 * ((_3588 * _3606) + _3573)) + 9.9999999392252902907785028219223e-09) + (((_3605 * _3606) + _3573) * _3588))) * _3605;
                                float _4725 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3626 = (_3551 * _3528) * (((_3574 * 3.1415927410125732421875) * (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) / ((_3596 * _3596) * ((_3541 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3552 * _3398.y;
                                frontier_phi_83_pred_1 = _3552 * _3398.x;
                                frontier_phi_83_pred_2 = _3626 * _3410.z;
                                frontier_phi_83_pred_3 = _3626 * _3410.y;
                                frontier_phi_83_pred_4 = _3626 * _3410.x;
                                frontier_phi_83_pred_5 = _3552 * _3398.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3634 = frontier_phi_83_pred;
                            _3633 = frontier_phi_83_pred_1;
                            _3632 = frontier_phi_83_pred_2;
                            _3631 = frontier_phi_83_pred_3;
                            _3630 = frontier_phi_83_pred_4;
                            _3635 = frontier_phi_83_pred_5;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            if (_3357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3357;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3342;
                        frontier_phi_77_pred_1 = _3341;
                        frontier_phi_77_pred_2 = _3340;
                        frontier_phi_77_pred_3 = _3339;
                        frontier_phi_77_pred_4 = _3338;
                        frontier_phi_77_pred_5 = _3337;
                    }
                    _2979 = frontier_phi_77_pred;
                    _2977 = frontier_phi_77_pred_1;
                    _2975 = frontier_phi_77_pred_2;
                    _2973 = frontier_phi_77_pred_3;
                    _2971 = frontier_phi_77_pred_4;
                    _2969 = frontier_phi_77_pred_5;
                    uint _3135 = _3134 + 1u;
                    if (_3135 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3128 = _2969;
                        _3129 = _2971;
                        _3130 = _2973;
                        _3131 = _2975;
                        _3132 = _2977;
                        _3133 = _2979;
                        _3134 = _3135;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2973;
                frontier_phi_58_59_ladder_1 = _2979;
                frontier_phi_58_59_ladder_2 = _2977;
                frontier_phi_58_59_ladder_3 = _2975;
                frontier_phi_58_59_ladder_4 = _2971;
                frontier_phi_58_59_ladder_5 = _2969;
            }
            else
            {
                frontier_phi_58_59_ladder = _2851;
                frontier_phi_58_59_ladder_1 = _2857;
                frontier_phi_58_59_ladder_2 = _2855;
                frontier_phi_58_59_ladder_3 = _2853;
                frontier_phi_58_59_ladder_4 = _2849;
                frontier_phi_58_59_ladder_5 = _2847;
            }
            _2968 = frontier_phi_58_59_ladder_5;
            _2970 = frontier_phi_58_59_ladder_4;
            _2972 = frontier_phi_58_59_ladder;
            _2974 = frontier_phi_58_59_ladder_3;
            _2976 = frontier_phi_58_59_ladder_2;
            _2978 = frontier_phi_58_59_ladder_1;
        }
        float _2983 = isnan(1.0) ? _970 : (isnan(_970) ? 1.0 : min(_970, 1.0));
        _2759 = (_2983 * _2974) + _2192;
        _2761 = (_2983 * _2976) + _2194;
        _2763 = (_2983 * _2978) + _2196;
        _2765 = ((_2968 * _954) * _2983) + _2540;
        _2767 = ((_2970 * _956) * _2983) + _2542;
        _2769 = ((_2972 * _957) * _2983) + _2544;
    }
    else
    {
        _2759 = _2192;
        _2761 = _2194;
        _2763 = _2196;
        _2765 = _2540;
        _2767 = _2542;
        _2769 = _2544;
    }
    float _4741 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4752 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4763 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2786 = ((isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2759 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _970))) + ((_2765 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _2787 = ((isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2761 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _970))) + ((_2767 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _2788 = ((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2763 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _970))) + ((_2769 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    uint _2789 = _248 + 6u;
    float _2797 = _892 / cbSceneParam._m0[86u].x;
    float _2798 = _893 / cbSceneParam._m0[86u].y;
    vec4 _2812 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2814 = _2812.x;
    float _2815 = _2812.y;
    float _2816 = _2812.z;
    float _2817 = _2812.w;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2872 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2873 = _2872 / _814;
        float _2884 = _2873 * _865;
        float _2885 = _866 * _2873;
        float _2886 = (-0.0) - _2885;
        float _2888 = _2873 * _867;
        float _2890 = (cbSceneParam._m0[77u].w * _2886) / _2872;
        float _2891 = _2890 + cbSceneParam._m0[79u].w;
        float _2892 = cbSceneParam._m0[79u].w - _2885;
        float _2898 = sqrt(((_2884 * _2884) + (_2885 * _2885)) + (_2888 * _2888));
        float _2901 = (1.0 - (cbSceneParam._m0[77u].w / _2872)) * _2898;
        float _2906 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2908 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3085;
        if (abs((_2886 - _2890) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3085 = ((((_2891 > 0.0) ? exp2(_2906 * _2891) : (2.0 - exp2(_2908 * _2891))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2901;
        }
        else
        {
            float _3029 = 1.0 / cbSceneParam._m0[80u].x;
            float _3030 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : max(_2891, _2892));
            float _3031 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : min(_2891, _2892));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            _3085 = ((abs(_2898 / _2886) * cbSceneParam._m0[80u].y) * ((((_3040 - _3041) * 2.0) - ((exp2(_2906 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0)))) - exp2(_2906 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))))) * _3029)) - ((exp2(_2908 * _3040) - exp2(_2908 * _3041)) * _3029))) + (_2901 * cbSceneParam._m0[80u].z);
        }
        vec4 _3087 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, 1.0), 0.0);
        float _3096 = exp2((_3085 * (-1.44269502162933349609375)) * (1.0 - _3087.w));
        float _3097 = log2(_3096);
        float _3113 = log2(_2817);
        _2910 = (exp2(_3113 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].x)) * _3087.x) / cbSceneParam._m0[78u].x)) + _2814;
        _2912 = (exp2(_3113 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].y)) * _3087.y) / cbSceneParam._m0[78u].y)) + _2815;
        _2914 = (exp2(_3113 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].z)) * _3087.z) / cbSceneParam._m0[78u].z)) + _2816;
        _2916 = _3096 * _2817;
    }
    else
    {
        _2910 = _2814;
        _2912 = _2815;
        _2914 = _2816;
        _2916 = _2817;
    }
    bool _3123;
    vec4 _2926;
    vec4 _2948;
    float _2950;
    float _2954;
    float _2955;
    float _2956;
    float _2957;
    bool _2967;
    for (;;)
    {
        _2926 = cbMatDynParam._m0[0u];
        float _2928 = roundEven(_2926.y);
        bool _2929 = _2928 == 3.0;
        float _2930 = log2(_2916);
        float _2937 = exp2(_2930 * cbSceneParam._m0[78u].x) * _2786;
        float _2938 = exp2(_2930 * cbSceneParam._m0[78u].y) * _2787;
        float _2939 = exp2(_2930 * cbSceneParam._m0[78u].z) * _2788;
        float _2946 = _881 + (-0.5);
        _2948 = cbMtdParam._m0[1u];
        _2950 = _2948.y * _2946;
        float _2953 = (_2928 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2954 = _2953 * (_2929 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2910)));
        _2955 = _2953 * (_2929 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2912)));
        _2956 = _2953 * (_2929 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2914)));
        _2957 = _2946 * 0.999000012874603271484375;
        _2967 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2967)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _2957) < 0.5)
            {
                _3123 = true;
                break;
            }
        }
        uint _3064 = _930 + uint(_2926.w);
        if ((cbInstanceData._m0[_3064].w < 1.0) && ((cbInstanceData._m0[_3064].w + _2957) < 0.5))
        {
            _3123 = true;
            break;
        }
        if ((_2950 + 1.0) < _2948.x)
        {
            _3123 = true;
            break;
        }
        _3123 = false;
        break;
    }
    float _3328;
    if (_3123)
    {
        discard_state = true;
        _3328 = 0.0;
    }
    else
    {
        _3328 = cbInstanceData._m0[_2789].w;
    }
    SV_Target.x = _2954;
    SV_Target.y = _2955;
    SV_Target.z = _2956;
    SV_Target.w = _3328;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2789].w;
    discard_exit();
}


