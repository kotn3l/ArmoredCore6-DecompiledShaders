#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1454;
float _4117;
float _4118;
float _4119;
float _4120;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4129 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4140 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4151 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _346 = _341.x * cbMtdParam._m0[11u].x;
    float _347 = _341.y * cbMtdParam._m0[11u].y;
    float _348 = _341.z * cbMtdParam._m0[11u].z;
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _386.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4162 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _457 = (_450 * ((_367.x * cbMtdParam._m0[12u].x) - _346)) + _346;
    float _458 = (_450 * ((_367.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _459 = (_450 * ((_367.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _386.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[23u].w) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4173 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    float _536 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _530;
    float _539 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _531;
    float _542 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _532;
    float _549 = ((_530 - _536) * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) + _536;
    float _550 = ((_531 - _539) * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) + _539;
    float _551 = ((_532 - _542) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) + _542;
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _610 = _608.x;
    float _611 = _608.y;
    float _612 = _608.z;
    float _619 = ((_591.x - _610) * _450) + _610;
    float _620 = ((_591.y - _611) * _450) + _611;
    float _621 = ((_591.z - _612) * _450) + _612;
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _646 = ((_633.z - _621) * _523) + _621;
    float _649 = ((((_633.x - _619) * _523) + _619) * 2.0) + (-1.0);
    float _650 = ((((_633.y - _620) * _523) + _620) * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _4184 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _656 = sqrt(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _697 = _695.x;
    float _698 = 1.0 - _697;
    float _714 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_697 - _698) * cbMtdParam._m0[24u].z) + _698) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4195 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _715 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _722 = (_715 * (cbMtdParam._m0[17u].x - _549)) + _549;
    float _723 = (_715 * (cbMtdParam._m0[17u].y - _550)) + _550;
    float _724 = (_715 * (cbMtdParam._m0[17u].z - _551)) + _551;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _752 = _750.x;
    float _770 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _752) * _450) + _752;
    float _787 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _770) * _523) + _770;
    float _791 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _787) * cbMtdParam._m0[19u].z) + _787;
    float _793 = _791 - (_791 * _715);
    float _798 = (((_568.z - _646) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _646;
    float _802 = ((_670.z - _798) * cbMtdParam._m0[19u].w) + _798;
    vec4 _815 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _822 = (_815.x * 2.0) + (-1.0);
    float _823 = (_815.y * 2.0) + (-1.0);
    float _824 = dot(vec2(_822, _823), vec2(_822, _823));
    float _4206 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _832 = (_715 * (_815.z - _802)) + _802;
    float _841 = (_649 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_568.x * 2.0) + (-1.0)))) + (((_670.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _842 = (_650 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_568.y * 2.0) + (-1.0)))) + (((_670.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _854 = (((_822 - _841) + (cbMtdParam._m0[21u].x * _841)) * _715) + _841;
    float _855 = (((_823 - _842) + (cbMtdParam._m0[21u].x * _842)) * _715) + _842;
    float _856 = (_715 * (sqrt(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) - _656)) + _656;
    float _860 = cbMtdParam._m0[22u].x + _670.w;
    float _863 = fma(_856, _250 * NORMAL.x, fma(_855, _257 * TANGENT.x, (_243 * _235) * _854));
    float _866 = fma(_856, _250 * NORMAL.y, fma(_855, _257 * TANGENT.y, (_243 * _236) * _854));
    float _869 = fma(_856, _250 * NORMAL.z, fma(_855, _257 * TANGENT.z, (_243 * _237) * _854));
    float _873 = inversesqrt(dot(vec3(_863, _866, _869), vec3(_863, _866, _869)));
    float _874 = _873 * _863;
    float _875 = _873 * _866;
    float _876 = _873 * _869;
    float _4217 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _877 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _4228 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4239 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4250 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4261 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4272 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _882 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _896 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _947 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _937);
    float _948 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _937);
    float _949 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _937);
    float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
    float _954 = _947 * _953;
    float _955 = _948 * _953;
    float _956 = _949 * _953;
    vec4 _961 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _963 = _961.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1135 = sqrt(((_947 * _947) + (_948 * _948)) + (_949 * _949));
        float _1141 = (cbMatDynParam._m0[5u].x * _1135) + cbMatDynParam._m0[5u].y;
        float _4283 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1146 = (cbMatDynParam._m0[5u].z * _1135) + cbMatDynParam._m0[5u].w;
        float _4294 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) - _1142)) + _1142) < ((_963 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _974 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _975 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _993 = fma(_876, cbSceneParam._m0[5u].z, fma(_875, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _874));
    float _996 = fma(_876, cbSceneParam._m0[6u].z, fma(_875, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _874));
    float _999 = fma(_876, cbSceneParam._m0[7u].z, fma(_875, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _874));
    uint _1012 = _284 + 9u;
    uint _1013 = _1012 + uint(cbMatDynParam._m0[0u].w);
    float _1019 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * cbInstanceData._m0[_1013].x;
    float _1020 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * cbInstanceData._m0[_1013].y;
    float _1021 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * cbInstanceData._m0[_1013].z;
    float _4305 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1022 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _4316 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _4327 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _1025 = 1.0 - _882;
    float _1026 = _1022 * _1025;
    float _1027 = _1023 * _1025;
    float _1028 = _1024 * _1025;
    float _1033 = (_1022 + (-0.039999999105930328369140625)) * _882;
    float _1034 = (_1023 + (-0.039999999105930328369140625)) * _882;
    float _1035 = (_1024 + (-0.039999999105930328369140625)) * _882;
    float _1036 = _1033 + 0.039999999105930328369140625;
    float _1038 = _1034 + 0.039999999105930328369140625;
    float _1039 = _1035 + 0.039999999105930328369140625;
    vec4 _1048 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _974, cbSceneParam._m0[86u].y * _975));
    float _1052 = ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * TEXCOORD_5.w) * _1048.x;
    float _1053 = dot(vec3(_874, _875, _876), vec3(_954, _955, _956));
    float _1056 = _1053 * 2.0;
    float _1060 = (_1056 * _874) - _954;
    float _1061 = (_1056 * _875) - _955;
    float _1062 = (_1056 * _876) - _956;
    float _1066 = abs(dot(vec3(_954, _955, _956), vec3(_874, _875, _876)));
    float _4338 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1068 = sqrt(_877);
    float _1081 = exp2((_1068 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1068 * 3.0));
    float _1087 = (1.0 - _1081) * ((_1068 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1088 = _1081 * _1068;
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1453;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1178 = fma(_1124, cbModelParam._m0[26u].z, fma(_1120, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116));
        float _1182 = fma(_1124, cbModelParam._m0[27u].z, fma(_1120, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116));
        float _1186 = fma(_1124, cbModelParam._m0[28u].z, fma(_1120, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116));
        float _1211 = _1116 + _874;
        float _1212 = _1120 + _875;
        float _1213 = _1124 + _876;
        float _1223 = fma(_1213, cbModelParam._m0[26u].z, fma(_1212, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211)) - _1178;
        float _1224 = fma(_1213, cbModelParam._m0[27u].z, fma(_1212, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211)) - _1182;
        float _1225 = fma(_1213, cbModelParam._m0[28u].z, fma(_1212, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211)) - _1186;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1178 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1182 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[34u].z) + ((((((_1186 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1281 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1247.x + (-0.5));
        float _1283 = _1281 * (_1247.y + (-0.5));
        float _1284 = _1281 * (_1247.z + (-0.5));
        float _1291 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1254.x + (-0.5));
        float _1293 = _1291 * (_1254.y + (-0.5));
        float _1294 = _1291 * (_1254.z + (-0.5));
        float _1301 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1261.x + (-0.5));
        float _1303 = _1301 * (_1261.y + (-0.5));
        float _1304 = _1301 * (_1261.z + (-0.5));
        float _1311 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1268.x + (-0.5));
        float _1313 = _1311 * (_1268.y + (-0.5));
        float _1314 = _1311 * (_1268.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1335 = (dot(vec3(_874, _875, _876), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1345 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4386 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1347 + 1.0))) + _1352) * _1315;
        float _1362 = _1283 * 0.5;
        float _1363 = _1293 * 0.5;
        float _1364 = _1303 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_874, _875, _876), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4419 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1389 + 1.0))) + _1394) * _1316;
        float _1404 = _1284 * 0.5;
        float _1405 = _1294 * 0.5;
        float _1406 = _1304 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_874, _875, _876), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4452 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1431 + 1.0))) + _1436) * _1317;
        _1453 = _1284;
        _1455 = _1283;
        _1456 = _1282;
        _1457 = _1294;
        _1458 = _1293;
        _1459 = _1292;
        _1460 = _1304;
        _1461 = _1303;
        _1462 = _1302;
        _1463 = _1317;
        _1464 = _1316;
        _1465 = _1315;
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _1454;
        _1455 = _1454;
        _1456 = _1454;
        _1457 = _1454;
        _1458 = _1454;
        _1459 = _1454;
        _1460 = _1454;
        _1461 = _1454;
        _1462 = _1454;
        _1463 = _1454;
        _1464 = _1454;
        _1465 = _1454;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1495 = fma(_1124, cbModelParam._m0[30u].z, fma(_1120, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116));
        float _1499 = fma(_1124, cbModelParam._m0[31u].z, fma(_1120, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116));
        float _1503 = fma(_1124, cbModelParam._m0[32u].z, fma(_1120, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116));
        float _1526 = _1116 + _874;
        float _1527 = _1120 + _875;
        float _1528 = _1124 + _876;
        float _1538 = fma(_1528, cbModelParam._m0[30u].z, fma(_1527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1526)) - _1495;
        float _1539 = fma(_1528, cbModelParam._m0[31u].z, fma(_1527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1526)) - _1499;
        float _1540 = fma(_1528, cbModelParam._m0[32u].z, fma(_1527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1526)) - _1503;
        float _1544 = inversesqrt(dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540)));
        float _1557 = ((_1544 * _1538) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1495 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1544 * _1539) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1499 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1544 * _1540) / cbModelParam._m0[35u].z) + ((((((_1503 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        float _1594 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1561.x + (-0.5));
        float _1596 = _1594 * (_1561.y + (-0.5));
        float _1597 = _1594 * (_1561.z + (-0.5));
        float _1604 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1568.x + (-0.5));
        float _1606 = _1604 * (_1568.y + (-0.5));
        float _1607 = _1604 * (_1568.z + (-0.5));
        float _1614 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1575.x + (-0.5));
        float _1616 = _1614 * (_1575.y + (-0.5));
        float _1617 = _1614 * (_1575.z + (-0.5));
        float _1624 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1582.x + (-0.5));
        float _1626 = _1624 * (_1582.y + (-0.5));
        float _1627 = _1624 * (_1582.z + (-0.5));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = _1595 * 0.5;
        float _1632 = _1605 * 0.5;
        float _1633 = _1615 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_874, _875, _876), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4493 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4504 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4515 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_1658 + 1.0))) + _1663) * _1628;
        float _1673 = _1596 * 0.5;
        float _1674 = _1606 * 0.5;
        float _1675 = _1616 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_874, _875, _876), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4526 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4537 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4548 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_1700 + 1.0))) + _1705) * _1629;
        float _1715 = _1597 * 0.5;
        float _1716 = _1607 * 0.5;
        float _1717 = _1617 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_874, _875, _876), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4559 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4570 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4581 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_1742 + 1.0))) + _1747) * _1630;
        _1764 = _1597;
        _1765 = _1596;
        _1766 = _1595;
        _1767 = _1607;
        _1768 = _1606;
        _1769 = _1605;
        _1770 = _1617;
        _1771 = _1616;
        _1772 = _1615;
        _1773 = _1630;
        _1774 = _1629;
        _1775 = _1628;
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
    }
    else
    {
        _1764 = _1454;
        _1765 = _1454;
        _1766 = _1454;
        _1767 = _1454;
        _1768 = _1454;
        _1769 = _1454;
        _1770 = _1454;
        _1771 = _1454;
        _1772 = _1454;
        _1773 = _1454;
        _1774 = _1454;
        _1775 = _1454;
        _1776 = 0.0;
        _1777 = 0.0;
        _1778 = 0.0;
    }
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1466)) + _1466;
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1467)) + _1467;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1468)) + _1468;
    float _1811 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1788));
    float _1832 = _1060 * 0.5;
    float _1833 = _1061 * 0.5;
    float _1834 = _1062 * 0.5;
    float _1835 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1838 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1841 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1875;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1848 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1453, _1457, _1460, _1463));
        float _1852 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1455, _1458, _1461, _1464));
        float _1856 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1863 = dot(vec4(cbModelParam._m0[39u]), vec4(_1832, _1833, _1834, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1886;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1877 = dot(vec4(cbModelParam._m0[40u]), vec4(_1832, _1833, _1834, 1.0));
        _1886 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1886 = 1.0;
    }
    float _1890 = (_1886 * cbModelParam._m0[1u].x) + (_1875 * (1.0 - cbModelParam._m0[1u].x));
    float _1900 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _877);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1900 : min(cbModelParam._m0[25u].z, _1900));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1949 = fma(_1124, cbModelParam._m0[13u].z, fma(_1120, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1116)) + cbModelParam._m0[13u].w;
        float _1953 = fma(_1124, cbModelParam._m0[14u].z, fma(_1120, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1116)) + cbModelParam._m0[14u].w;
        float _1957 = fma(_1124, cbModelParam._m0[15u].z, fma(_1120, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1116)) + cbModelParam._m0[15u].w;
        float _1960 = fma(_1062, cbModelParam._m0[13u].z, fma(_1061, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1060));
        float _1963 = fma(_1062, cbModelParam._m0[14u].z, fma(_1061, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1060));
        float _1966 = fma(_1062, cbModelParam._m0[15u].z, fma(_1061, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1060));
        float _1994;
        if (_1960 > 0.0)
        {
            _1994 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1994 = frontier_phi_17_15_ladder;
        }
        float _2166;
        if (_1963 > 0.0)
        {
            _2166 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2166 = frontier_phi_26_22_ladder;
        }
        float _2461;
        if (_1966 > 0.0)
        {
            _2461 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2461 = frontier_phi_38_33_ladder;
        }
        float _2463 = isnan(_2166) ? _1994 : (isnan(_1994) ? _2166 : min(_1994, _2166));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1960) + _1949;
        float _2469 = (_2464 * _1963) + _1953;
        float _2470 = (_2464 * _1966) + _1957;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2471;
        float _2475 = _2471 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 > _2475) || ((_2469 < _2473) || ((_2468 < _2473) || (_2468 > _2475))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2470, cbModelParam._m0[9u].z, fma(_2469, cbModelParam._m0[9u].y, _2468 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2470, cbModelParam._m0[10u].z, fma(_2469, cbModelParam._m0[10u].y, _2468 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2470, cbModelParam._m0[11u].z, fma(_2469, cbModelParam._m0[11u].y, _2468 * cbModelParam._m0[11u].x))), _1901);
            frontier_phi_16_38_ladder = _2615.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2615.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2615.x * cbModelParam._m0[1u].y;
        }
        _1982 = frontier_phi_16_38_ladder_2;
        _1984 = frontier_phi_16_38_ladder_1;
        _1986 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1060, _1061, _1062), _1901);
        _1982 = _1970.x * cbModelParam._m0[1u].y;
        _1984 = _1970.y * cbModelParam._m0[1u].y;
        _1986 = _1970.z * cbModelParam._m0[1u].y;
    }
    float _1990 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _877);
    float _1991 = isnan(_1990) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1990 : min(cbModelParam._m0[25u].w, _1990));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2045 = fma(_1124, cbModelParam._m0[21u].z, fma(_1120, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1116)) + cbModelParam._m0[21u].w;
        float _2049 = fma(_1124, cbModelParam._m0[22u].z, fma(_1120, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1116)) + cbModelParam._m0[22u].w;
        float _2053 = fma(_1124, cbModelParam._m0[23u].z, fma(_1120, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1116)) + cbModelParam._m0[23u].w;
        float _2056 = fma(_1062, cbModelParam._m0[21u].z, fma(_1061, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1060));
        float _2059 = fma(_1062, cbModelParam._m0[22u].z, fma(_1061, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1060));
        float _2062 = fma(_1062, cbModelParam._m0[23u].z, fma(_1061, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1060));
        float _2171;
        if (_2056 > 0.0)
        {
            _2171 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2171 = frontier_phi_28_24_ladder;
        }
        float _2488;
        if (_2059 > 0.0)
        {
            _2488 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2488 = frontier_phi_40_35_ladder;
        }
        float _2826;
        if (_2062 > 0.0)
        {
            _2826 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2826 = frontier_phi_50_47_ladder;
        }
        float _2828 = isnan(_2488) ? _2171 : (isnan(_2171) ? _2488 : min(_2171, _2488));
        float _2829 = isnan(_2826) ? _2828 : (isnan(_2828) ? _2826 : min(_2828, _2826));
        float _2833 = (_2829 * _2056) + _2045;
        float _2834 = (_2829 * _2059) + _2049;
        float _2835 = (_2829 * _2062) + _2053;
        float _2836 = _2829 * 9.9999997473787516355514526367188e-05;
        float _2837 = (-1.0) - _2836;
        float _2839 = _2836 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2835 > _2839) || ((_2835 < _2837) || ((_2834 > _2839) || ((_2834 < _2837) || ((_2833 < _2837) || (_2833 > _2839))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2835, cbModelParam._m0[17u].z, fma(_2834, cbModelParam._m0[17u].y, _2833 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2835, cbModelParam._m0[18u].z, fma(_2834, cbModelParam._m0[18u].y, _2833 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2835, cbModelParam._m0[19u].z, fma(_2834, cbModelParam._m0[19u].y, _2833 * cbModelParam._m0[19u].x))), _1991);
            frontier_phi_25_50_ladder = _2957.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2957.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2957.x * cbModelParam._m0[1u].z;
        }
        _2081 = frontier_phi_25_50_ladder_2;
        _2083 = frontier_phi_25_50_ladder_1;
        _2085 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2065 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1060, _1061, _1062), _1991);
        _2081 = _2065.x * cbModelParam._m0[1u].z;
        _2083 = _2065.y * cbModelParam._m0[1u].z;
        _2085 = _2065.z * cbModelParam._m0[1u].z;
    }
    float _2098 = (((_1087 * _1036) + _1088) * _1052) * ((cbModelParam._m0[1u].w * (_2081 - _1982)) + _1982);
    float _2100 = (((_1087 * _1038) + _1088) * _1052) * ((cbModelParam._m0[1u].w * (_2083 - _1984)) + _1984);
    float _2102 = (((_1087 * _1039) + _1088) * _1052) * ((cbModelParam._m0[1u].w * (_2085 - _1986)) + _1986);
    float _2105 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2100, cbSceneParam._m0[89u].y, _2098 * cbSceneParam._m0[89u].x));
    float _2108 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2100, cbSceneParam._m0[90u].y, _2098 * cbSceneParam._m0[90u].x));
    float _2111 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2100, cbSceneParam._m0[91u].y, _2098 * cbSceneParam._m0[91u].x));
    float _2145 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2149 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2153 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2157 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2158 = _2145 / _2157;
    float _2159 = _2149 / _2157;
    float _2160 = _2153 / _2157;
    float _2307;
    float _2308;
    float _2309;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2187 = ((uint(_2160 > cbSceneParam._m0[59u].y) + uint(_2160 > cbSceneParam._m0[59u].x)) + uint(_2160 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2188 = _2187 + 43u;
        uint _2196 = _2187 + 44u;
        uint _2204 = _2187 + 45u;
        uint _2212 = _2187 + 46u;
        float _2223 = fma(_2157, cbSceneParam._m0[_2188].w, fma(_2153, cbSceneParam._m0[_2188].z, fma(_2149, cbSceneParam._m0[_2188].y, _2145 * cbSceneParam._m0[_2188].x)));
        float _2227 = fma(_2157, cbSceneParam._m0[_2196].w, fma(_2153, cbSceneParam._m0[_2196].z, fma(_2149, cbSceneParam._m0[_2196].y, _2145 * cbSceneParam._m0[_2196].x)));
        float _2235 = fma(_2157, cbSceneParam._m0[_2212].w, fma(_2153, cbSceneParam._m0[_2212].z, fma(_2149, cbSceneParam._m0[_2212].y, _2145 * cbSceneParam._m0[_2212].x)));
        float _2240 = cbSceneParam._m0[33u].z * _2235;
        float _2242 = cbSceneParam._m0[33u].w * _2235;
        float _2245 = fma(_2157, cbSceneParam._m0[_2204].w, fma(_2153, cbSceneParam._m0[_2204].z, fma(_2149, cbSceneParam._m0[_2204].y, _2145 * cbSceneParam._m0[_2204].x))) / _2235;
        float _2293 = (cbSceneParam._m0[33u].x - sqrt(((_2159 * _2159) + (_2158 * _2158)) + (_2160 * _2160))) * cbSceneParam._m0[33u].y;
        float _4707 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2300 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2240 + _2223) / _2235, (_2242 + _2227) / _2235), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2242 + _2223) / _2235, (_2227 - _2240) / _2235), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2223 - _2240) / _2235, (_2227 - _2242) / _2235), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2223 - _2242) / _2235, (_2240 + _2227) / _2235), _2245), 0.0)).x), vec4(0.25)));
        _2307 = 1.0 - (_2300 * cbSceneParam._m0[34u].x);
        _2308 = 1.0 - (_2300 * cbSceneParam._m0[34u].y);
        _2309 = 1.0 - (_2300 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2307 = 1.0;
        _2308 = 1.0;
        _2309 = 1.0;
    }
    float _2373;
    float _2375;
    float _2377;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2361 = fma(_2157, cbSceneParam._m0[63u].w, fma(_2153, cbSceneParam._m0[63u].z, fma(_2149, cbSceneParam._m0[63u].y, _2145 * cbSceneParam._m0[63u].x)));
        float _2362 = fma(_2157, cbSceneParam._m0[60u].w, fma(_2153, cbSceneParam._m0[60u].z, fma(_2149, cbSceneParam._m0[60u].y, _2145 * cbSceneParam._m0[60u].x))) / _2361;
        float _2363 = fma(_2157, cbSceneParam._m0[61u].w, fma(_2153, cbSceneParam._m0[61u].z, fma(_2149, cbSceneParam._m0[61u].y, _2145 * cbSceneParam._m0[61u].x))) / _2361;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2362 >= cbSceneParam._m0[64u].x) && (_2363 >= cbSceneParam._m0[64u].y)) && (_2362 <= cbSceneParam._m0[64u].z)) && (_2363 <= cbSceneParam._m0[64u].w))
        {
            float _2501 = fma(_2157, cbSceneParam._m0[62u].w, fma(_2153, cbSceneParam._m0[62u].z, fma(_2149, cbSceneParam._m0[62u].y, _2145 * cbSceneParam._m0[62u].x))) / _2361;
            float _2505 = isnan(cbSceneParam._m0[41u].w) ? _2501 : (isnan(_2501) ? cbSceneParam._m0[41u].w : max(_2501, cbSceneParam._m0[41u].w));
            float _2548 = (cbSceneParam._m0[33u].x - sqrt(((_2159 * _2159) + (_2158 * _2158)) + (_2160 * _2160))) * cbSceneParam._m0[33u].y;
            float _4723 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
            float _2555 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2362, cbSceneParam._m0[33u].w + _2363), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2362, _2363 - cbSceneParam._m0[33u].z), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2362 - cbSceneParam._m0[33u].z, _2363 - cbSceneParam._m0[33u].w), _2505), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2362 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2363), _2505), 0.0)).x), vec4(0.25)));
            float _2559 = 1.0 - (_2555 * cbSceneParam._m0[34u].x);
            float _2560 = 1.0 - (_2555 * cbSceneParam._m0[34u].y);
            float _2561 = 1.0 - (_2555 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2561) ? _2309 : (isnan(_2309) ? _2561 : min(_2309, _2561));
            frontier_phi_37_36_ladder_1 = isnan(_2560) ? _2308 : (isnan(_2308) ? _2560 : min(_2308, _2560));
            frontier_phi_37_36_ladder_2 = isnan(_2559) ? _2307 : (isnan(_2307) ? _2559 : min(_2307, _2559));
        }
        else
        {
            frontier_phi_37_36_ladder = _2309;
            frontier_phi_37_36_ladder_1 = _2308;
            frontier_phi_37_36_ladder_2 = _2307;
        }
        _2373 = frontier_phi_37_36_ladder_2;
        _2375 = frontier_phi_37_36_ladder_1;
        _2377 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2373 = _2307;
        _2375 = _2308;
        _2377 = _2309;
    }
    uvec4 _2382 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2384 = _2382.x * 14u;
    uint _2385 = _2384 + 13u;
    float _2392 = _1052 + (-1.0);
    float _2397 = (cbLight._m0[_2385].x * _2392) + 1.0;
    float _2398 = (cbLight._m0[_2385].y * _2392) + 1.0;
    float _2399 = (cbLight._m0[_2385].z * _2392) + 1.0;
    float _2400 = (cbLight._m0[_2385].w * _2392) + 1.0;
    uint _2401 = _2384 + 5u;
    float _2407 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
    uint _2411 = _2384 + 4u;
    float _2420 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
    uint _2424 = _2384 | 1u;
    float _2435 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_874, _875, _876));
    float _2438 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_874, _875, _876));
    float _4759 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _4770 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2443 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * 0.3183098733425140380859375;
    float _2445 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * 0.3183098733425140380859375;
    float _2452 = ((cbLight._m0[_2401].x * _2407) * _2445) + (((cbLight._m0[_2411].x * _2373) * _2420) * _2443);
    float _2453 = ((_2407 * cbLight._m0[_2401].y) * _2445) + (((cbLight._m0[_2411].y * _2375) * _2420) * _2443);
    float _2454 = ((_2407 * cbLight._m0[_2401].z) * _2445) + (((cbLight._m0[_2411].z * _2377) * _2420) * _2443);
    uvec4 _2458 = floatBitsToUint(cbLight._m0[_2384 + 12u]);
    bool _2460 = _2458.x == 0u;
    float _2562;
    float _2564;
    float _2566;
    if (_2460)
    {
        _2562 = _2452;
        _2564 = _2453;
        _2566 = _2454;
    }
    else
    {
        uint _2570 = _2384 + 6u;
        float _2586 = (dot(vec3(cbLight._m0[_2384 + 2u].xyz), vec3(_874, _875, _876)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4781 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2589 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2562 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2452;
        _2564 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2453;
        _2566 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2454;
    }
    bool _2569 = _2458.y == 0u;
    float _2624;
    float _2626;
    float _2628;
    if (_2569)
    {
        _2624 = _2562;
        _2626 = _2564;
        _2628 = _2566;
    }
    else
    {
        uint _2797 = _2384 + 7u;
        float _2813 = (dot(vec3(cbLight._m0[_2384 + 3u].xyz), vec3(_874, _875, _876)) * 0.5) + 0.5;
        float _2814 = _2813 * _2813;
        float _4797 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2815 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2816 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
        _2624 = (((cbLight._m0[_2797].x * 0.3183098733425140380859375) * _2815) * _2816) + _2562;
        _2626 = (((cbLight._m0[_2797].y * 0.3183098733425140380859375) * _2815) * _2816) + _2564;
        _2628 = (((cbLight._m0[_2797].z * 0.3183098733425140380859375) * _2815) * _2816) + _2566;
    }
    uint _2631 = _2384 + 8u;
    float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _877) * 0.949999988079071044921875);
    float _2645 = _2644 * _2644;
    float _2646 = cbLight._m0[_2384].x + _954;
    float _2647 = cbLight._m0[_2384].y + _955;
    float _2648 = cbLight._m0[_2384].z + _956;
    float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
    float _2653 = _2652 * _2646;
    float _2654 = _2652 * _2647;
    float _2655 = _2652 * _2648;
    float _2656 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2384].xyz));
    float _4813 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2659 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
    float _4824 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _2660 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    float _2661 = dot(vec3(_874, _875, _876), vec3(_2653, _2654, _2655));
    float _4835 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2653, _2654, _2655));
    float _4846 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2645 * _2645;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
    float _2682 = 0.959999978542327880859375 - _1033;
    float _2684 = 0.959999978542327880859375 - _1034;
    float _2685 = 0.959999978542327880859375 - _1035;
    float _2692 = 1.0 - _2645;
    float _2703 = (0.5 / (((_2660 * ((_2659 * _2692) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2692) + _2645) * _2659))) * _2659;
    float _4857 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2705 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    uint _2719 = _2384 + 9u;
    float _2730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _877) * 0.949999988079071044921875);
    float _2731 = _2730 * _2730;
    float _2732 = cbLight._m0[_2424].x + _954;
    float _2733 = cbLight._m0[_2424].y + _955;
    float _2734 = cbLight._m0[_2424].z + _956;
    float _2738 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
    float _2739 = _2738 * _2732;
    float _2740 = _2738 * _2733;
    float _2741 = _2738 * _2734;
    float _2742 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2424].xyz));
    float _4868 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2745 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
    float _2746 = dot(vec3(_874, _875, _876), vec3(_2739, _2740, _2741));
    float _4879 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2749 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
    float _2750 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2739, _2740, _2741));
    float _4890 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2754 = _2731 * _2731;
    float _2758 = ((_2749 * _2749) * (_2754 + (-1.0))) + 1.0;
    float _2765 = exp2(log2(1.0 - (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0)))) * 5.0);
    float _2772 = 1.0 - _2731;
    float _2782 = (0.5 / (((_2660 * ((_2745 * _2772) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2772) + _2731) * _2745))) * _2745;
    float _4901 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2784 = (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2754 / ((_2758 * _2758) * 3.141590118408203125));
    float _2794 = (((((_2765 * _2682) + _1036) * cbLight._m0[_2719].x) * _2784) * _2407) + ((((cbLight._m0[_2631].x * _2373) * ((_2681 * _2682) + _1036)) * _2705) * _2420);
    float _2795 = (((((_2765 * _2684) + _1038) * cbLight._m0[_2719].y) * _2784) * _2407) + ((((cbLight._m0[_2631].y * _2375) * ((_2681 * _2684) + _1038)) * _2705) * _2420);
    float _2796 = (((((_2765 * _2685) + _1039) * cbLight._m0[_2719].z) * _2784) * _2407) + ((((cbLight._m0[_2631].z * _2377) * ((_2681 * _2685) + _1039)) * _2705) * _2420);
    float _2852;
    float _2854;
    float _2856;
    if (_2460)
    {
        _2852 = _2794;
        _2854 = _2795;
        _2856 = _2796;
    }
    else
    {
        uint _2858 = _2384 + 2u;
        uint _2862 = _2384 + 10u;
        float _2876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2858].w)) * _877) * 0.949999988079071044921875);
        float _2877 = _2876 * _2876;
        float _2878 = cbLight._m0[_2858].x + _954;
        float _2879 = cbLight._m0[_2858].y + _955;
        float _2880 = cbLight._m0[_2858].z + _956;
        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
        float _2885 = _2884 * _2878;
        float _2886 = _2884 * _2879;
        float _2887 = _2884 * _2880;
        float _2888 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2858].xyz));
        float _4912 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
        float _2892 = dot(vec3(_874, _875, _876), vec3(_2885, _2886, _2887));
        float _4923 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2895 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
        float _2896 = dot(vec3(cbLight._m0[_2858].xyz), vec3(_2885, _2886, _2887));
        float _4934 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2900 = _2877 * _2877;
        float _2904 = ((_2895 * _2895) * (_2900 + (-1.0))) + 1.0;
        float _2911 = exp2(log2(1.0 - (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) * 5.0);
        float _2918 = 1.0 - _2877;
        float _2928 = (0.5 / (((_2660 * ((_2891 * _2918) + _2877)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2918) + _2877) * _2891))) * _2891;
        float _4945 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2930 = (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2900 / ((_2904 * _2904) * 3.141590118408203125));
        float _2931 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2852 = (((((_2911 * _2682) + _1036) * cbLight._m0[_2862].x) * _2930) * _2931) + _2794;
        _2854 = (((((_2911 * _2684) + _1038) * cbLight._m0[_2862].y) * _2930) * _2931) + _2795;
        _2856 = (((((_2911 * _2685) + _1039) * cbLight._m0[_2862].z) * _2930) * _2931) + _2796;
    }
    float _2962;
    float _2964;
    float _2966;
    if (_2569)
    {
        _2962 = _2852;
        _2964 = _2854;
        _2966 = _2856;
    }
    else
    {
        uint _2973 = _2384 + 3u;
        uint _2977 = _2384 + 11u;
        float _2991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2973].w)) * _877) * 0.949999988079071044921875);
        float _2992 = _2991 * _2991;
        float _2993 = cbLight._m0[_2973].x + _954;
        float _2994 = cbLight._m0[_2973].y + _955;
        float _2995 = cbLight._m0[_2973].z + _956;
        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
        float _3000 = _2999 * _2993;
        float _3001 = _2999 * _2994;
        float _3002 = _2999 * _2995;
        float _3003 = dot(vec3(_874, _875, _876), vec3(cbLight._m0[_2973].xyz));
        float _4961 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3006 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
        float _3007 = dot(vec3(_874, _875, _876), vec3(_3000, _3001, _3002));
        float _4972 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3010 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _3011 = dot(vec3(cbLight._m0[_2973].xyz), vec3(_3000, _3001, _3002));
        float _4983 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3015 = _2992 * _2992;
        float _3019 = ((_3010 * _3010) * (_3015 + (-1.0))) + 1.0;
        float _3026 = exp2(log2(1.0 - (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0)))) * 5.0);
        float _3033 = 1.0 - _2992;
        float _3043 = (0.5 / (((_2660 * ((_3006 * _3033) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _3033) + _2992) * _3006))) * _3006;
        float _4994 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3045 = (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_3015 / ((_3019 * _3019) * 3.141590118408203125));
        float _3046 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
        _2962 = (((((_3026 * _2682) + _1036) * cbLight._m0[_2977].x) * _3045) * _3046) + _2852;
        _2964 = (((((_3026 * _2684) + _1038) * cbLight._m0[_2977].y) * _3045) * _3046) + _2854;
        _2966 = (((((_3026 * _2685) + _1039) * cbLight._m0[_2977].z) * _3045) * _3046) + _2856;
    }
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    float _3122;
    if (_2382.y == 0u)
    {
        uvec4 _3067 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3068 = _3067.x;
        uint _3079 = uint((float(_3067.y) * floor(float(uint(cbSceneParam._m0[85u].y * _975) / _3068))) + floor(float(uint(cbSceneParam._m0[85u].x * _974) / _3068)));
        float _3089 = (log2(_2160 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3090 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
        uint _3093 = uint(isnan(14.0) ? _3090 : (isnan(_3090) ? 14.0 : min(_3090, 14.0)));
        uvec4 _3098 = texelFetch(g_lightClusterGridBuffer, int(((_3093 << 2u) + (_3079 << 6u)) >> 2u));
        uint _3099 = _3098.x;
        uint _3100 = _3067.z;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((((1u << ((_3100 >> 4u) & 15u)) + 4294967295u) & _3099) == 0u) || ((_3100 & 240u) == 0u))
        {
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
        }
        else
        {
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3188;
            float _3190;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            float _3335 = 0.0;
            float _3336 = 0.0;
            float _3337 = 0.0;
            uint _3338 = 0u;
            uint _3347;
            bool _3348;
            for (;;)
            {
                _3347 = texelFetch(g_lightClassification, int((((_3093 << 5u) + (_3079 << 9u)) + (_3338 << 2u)) >> 2u)).x;
                _3348 = _3347 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3348)
                {
                    frontier_phi_71_pred = _3337;
                    frontier_phi_71_pred_1 = _3336;
                    frontier_phi_71_pred_2 = _3335;
                    frontier_phi_71_pred_3 = _3334;
                    frontier_phi_71_pred_4 = _3333;
                    frontier_phi_71_pred_5 = _3332;
                }
                else
                {
                    float _3477;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    uint _3483;
                    _3477 = _3332;
                    _3478 = _3333;
                    _3479 = _3334;
                    _3480 = _3335;
                    _3481 = _3336;
                    _3482 = _3337;
                    _3483 = _3347;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    for (;;)
                    {
                        uint _3487 = uint(findLSB(_3483)) + (_3338 << 5u);
                        uint _3484 = (_3483 + 4294967295u) & _3483;
                        uint _3489 = _3487 * 48u;
                        vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3489)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 3u)).x));
                        uint _3509 = (_3487 * 48u) + 4u;
                        vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3509)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 3u)).x));
                        uint _3528 = (_3487 * 48u) + 8u;
                        vec3 _3539 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3528)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 2u)).x));
                        float _3543 = _3503.x - _2158;
                        float _3544 = _3503.y - _2159;
                        float _3545 = _3503.z - _2160;
                        float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                        float _3549 = inversesqrt(_3546);
                        float _3550 = _3549 * _3543;
                        float _3551 = _3549 * _3544;
                        float _3552 = _3549 * _3545;
                        float _3553 = dot(vec3(_993, _996, _999), vec3(_3550, _3551, _3552));
                        float _3558 = 1.0 - (_3546 * _3503.w);
                        float _5020 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3559 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                        float _3560 = sqrt(_3546) * _3522.w;
                        float _3563 = 1.39999997615814208984375 / (_3560 + 1.39999997615814208984375);
                        float _3564 = _3563 * _3563;
                        float _3567 = ((1.0 - _3564) * _3553) + _3564;
                        float _3570 = _3560 * _3560;
                        float _3574 = ((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3559) / ((_3570 * 0.699999988079071044921875) + 1.0);
                        float _3578 = (-0.0) - _2158;
                        float _3579 = (-0.0) - _2159;
                        float _3580 = (-0.0) - _2160;
                        float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                        float _3585 = _3584 * _3578;
                        float _3586 = _3584 * _3579;
                        float _3587 = _3584 * _3580;
                        float _3594 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                        float _3595 = 1.0 - _1068;
                        float _3602 = sqrt(1.0 - ((1.0 - (_3595 * _3595)) * (1.0 - (_3594 * _3594))));
                        float _3603 = _3602 * _3602;
                        float _3604 = _3603 * _3603;
                        float _3605 = _3585 + _3550;
                        float _3606 = _3586 + _3551;
                        float _3607 = _3587 + _3552;
                        float _3611 = inversesqrt(dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607)));
                        float _3615 = dot(vec3(_993, _996, _999), vec3(_3585, _3586, _3587));
                        float _5036 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3618 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                        float _3619 = dot(vec3(_993, _996, _999), vec3(_3611 * _3605, _3611 * _3606, _3611 * _3607));
                        float _5047 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3622 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                        float _3626 = ((_3622 * _3622) * (_3604 + (-1.0))) + 1.0;
                        float _3627 = _3563 * _3603;
                        float _3628 = _3627 * _3627;
                        float _3631 = ((1.0 - _3628) * _3553) + _3628;
                        float _5058 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                        float _3632 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                        float _3633 = 1.0 - _3603;
                        float _3643 = (0.5 / (((_3632 * ((_3618 * _3633) + _3603)) + 9.9999999392252902907785028219223e-09) + (((_3632 * _3633) + _3603) * _3618))) * _3632;
                        float _5069 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3654 = (((_3604 * 3.1415927410125732421875) * (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0)))) / ((_3626 * _3626) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125))) * _3559;
                        _3407 = (_3574 * _3522.x) + _3480;
                        _3408 = (_3574 * _3522.y) + _3481;
                        _3409 = (_3574 * _3522.z) + _3482;
                        _3404 = (_3654 * _3539.x) + _3477;
                        _3405 = (_3654 * _3539.y) + _3478;
                        _3406 = (_3654 * _3539.z) + _3479;
                        if (_3484 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3477 = _3404;
                            _3478 = _3405;
                            _3479 = _3406;
                            _3480 = _3407;
                            _3481 = _3408;
                            _3482 = _3409;
                            _3483 = _3484;
                        }
                    }
                    frontier_phi_71_pred = _3409;
                    frontier_phi_71_pred_1 = _3408;
                    frontier_phi_71_pred_2 = _3407;
                    frontier_phi_71_pred_3 = _3406;
                    frontier_phi_71_pred_4 = _3405;
                    frontier_phi_71_pred_5 = _3404;
                }
                _3190 = frontier_phi_71_pred;
                _3188 = frontier_phi_71_pred_1;
                _3186 = frontier_phi_71_pred_2;
                _3184 = frontier_phi_71_pred_3;
                _3182 = frontier_phi_71_pred_4;
                _3180 = frontier_phi_71_pred_5;
                uint _3339 = _3338 + 1u;
                if (_3339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3332 = _3180;
                    _3333 = _3182;
                    _3334 = _3184;
                    _3335 = _3186;
                    _3336 = _3188;
                    _3337 = _3190;
                    _3338 = _3339;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
        }
        uvec4 _3193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3194 = _3193.z;
        uint _3196 = (_3194 >> 8u) & 15u;
        float _3300;
        float _3302;
        float _3304;
        float _3306;
        float _3308;
        float _3310;
        if (((4294967295u << _3196) & _3099) == 0u)
        {
            _3300 = _3179;
            _3302 = _3181;
            _3304 = _3183;
            _3306 = _3185;
            _3308 = _3187;
            _3310 = _3189;
        }
        else
        {
            float _3325 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
            float _3326 = _3325 * _2158;
            float _3327 = _3325 * _2159;
            float _3328 = _3325 * _2160;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3196 < ((_3194 >> 12u) & 15u))
            {
                float _3301;
                float _3303;
                float _3305;
                float _3307;
                float _3309;
                float _3311;
                float _3460 = _3179;
                float _3461 = _3181;
                float _3462 = _3183;
                float _3463 = _3185;
                float _3464 = _3187;
                float _3465 = _3189;
                uint _3466 = _3196;
                uint _3475;
                bool _3476;
                for (;;)
                {
                    _3475 = texelFetch(g_lightClassification, int((((_3093 << 5u) + (_3079 << 9u)) + (_3466 << 2u)) >> 2u)).x;
                    _3476 = _3475 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3476)
                    {
                        frontier_phi_82_pred = _3465;
                        frontier_phi_82_pred_1 = _3464;
                        frontier_phi_82_pred_2 = _3463;
                        frontier_phi_82_pred_3 = _3462;
                        frontier_phi_82_pred_4 = _3461;
                        frontier_phi_82_pred_5 = _3460;
                    }
                    else
                    {
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3961;
                        float _3962;
                        float _3963;
                        float _3964;
                        float _3965;
                        float _3966;
                        float _3681 = _3460;
                        float _3682 = _3461;
                        float _3683 = _3462;
                        float _3684 = _3463;
                        float _3685 = _3464;
                        float _3686 = _3465;
                        uint _3687 = _3475;
                        uint _3688;
                        vec4 _3713;
                        float _3714;
                        vec4 _3729;
                        vec3 _3741;
                        vec4 _3756;
                        vec4 _3771;
                        float _3817;
                        bool _3818;
                        for (;;)
                        {
                            uint _3698 = ((_3466 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3687));
                            _3688 = (_3687 + 4294967295u) & _3687;
                            uint _3700 = _3698 * 40u;
                            _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            _3714 = _3713.w;
                            uint _3716 = (_3698 * 40u) + 4u;
                            _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            uint _3731 = (_3698 * 40u) + 8u;
                            _3741 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x));
                            uint _3743 = (_3698 * 40u) + 16u;
                            _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3758 = (_3698 * 40u) + 20u;
                            _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            uint _3773 = (_3698 * 40u) + 24u;
                            vec4 _3786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 3u)).x));
                            uint _3792 = (_3698 * 40u) + 28u;
                            vec4 _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            _3817 = fma(_2160, _3805.z, fma(_2159, _3805.y, _3805.x * _2158)) + _3805.w;
                            _3818 = !((fma(_2160, _3786.z, fma(_2159, _3786.y, _3786.x * _2158)) + _3786.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3818)
                            {
                                float _3845 = _3713.x - _2158;
                                float _3846 = _3713.y - _2159;
                                float _3847 = _3713.z - _2160;
                                float _3848 = dot(vec3(_3845, _3846, _3847), vec3(_3845, _3846, _3847));
                                float _3851 = inversesqrt(_3848);
                                float _3852 = _3851 * _3845;
                                float _3853 = _3851 * _3846;
                                float _3854 = _3851 * _3847;
                                float _3858 = 1.0 - (_3848 / (_3714 * _3714));
                                float _5080 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3859 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                                float _3863 = sqrt(_3848) * _3729.w;
                                float _3865 = 1.39999997615814208984375 / (_3863 + 1.39999997615814208984375);
                                float _3866 = _3865 * _3865;
                                float _3869 = ((1.0 - _3866) * dot(vec3(_3852, _3853, _3854), vec3(_993, _996, _999))) + _3866;
                                float _3872 = _3863 * _3863;
                                float _3876 = (fma(_2160, _3756.z, fma(_2159, _3756.y, _3756.x * _2158)) + _3756.w) / _3817;
                                float _3877 = (fma(_2160, _3771.z, fma(_2159, _3771.y, _3771.x * _2158)) + _3771.w) / _3817;
                                float _3881 = 1.0 - dot(vec2(_3876, _3877), vec2(_3876, _3877));
                                float _5096 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3882 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                                float _3883 = _3882 * (((isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0))) * _3859) / ((_3872 * 0.699999988079071044921875) + 1.0));
                                float _3895 = exp2(log2(1.0 / ((_3872 * 3.5) + 5.0)) * 0.25);
                                float _3896 = 1.0 - _1068;
                                float _3903 = sqrt(1.0 - ((1.0 - (_3896 * _3896)) * (1.0 - (_3895 * _3895))));
                                float _3904 = _3903 * _3903;
                                float _3905 = _3904 * _3904;
                                float _3906 = _3852 - _3326;
                                float _3907 = _3853 - _3327;
                                float _3908 = _3854 - _3328;
                                float _3912 = inversesqrt(dot(vec3(_3906, _3907, _3908), vec3(_3906, _3907, _3908)));
                                float _3916 = dot(vec3(_993, _996, _999), vec3((-0.0) - _3326, (-0.0) - _3327, (-0.0) - _3328));
                                float _5107 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3919 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                                float _3920 = dot(vec3(_993, _996, _999), vec3(_3912 * _3906, _3912 * _3907, _3912 * _3908));
                                float _5118 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3923 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                                float _3927 = ((_3923 * _3923) * (_3905 + (-1.0))) + 1.0;
                                float _3928 = _3865 * _3904;
                                float _3929 = _3928 * _3928;
                                float _3935 = ((1.0 - _3929) * dot(vec3(_993, _996, _999), vec3(_3852, _3853, _3854))) + _3929;
                                float _5129 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3936 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                                float _3937 = 1.0 - _3904;
                                float _3947 = (0.5 / (((_3936 * ((_3919 * _3937) + _3904)) + 9.9999999392252902907785028219223e-09) + (((_3936 * _3937) + _3904) * _3919))) * _3936;
                                float _5140 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3957 = (_3882 * _3859) * (((_3905 * 3.1415927410125732421875) * (isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0)))) / ((_3927 * _3927) * ((_3872 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3883 * _3729.z;
                                frontier_phi_88_pred_1 = _3883 * _3729.y;
                                frontier_phi_88_pred_2 = _3883 * _3729.x;
                                frontier_phi_88_pred_3 = _3957 * _3741.z;
                                frontier_phi_88_pred_4 = _3957 * _3741.y;
                                frontier_phi_88_pred_5 = _3957 * _3741.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3966 = frontier_phi_88_pred;
                            _3965 = frontier_phi_88_pred_1;
                            _3964 = frontier_phi_88_pred_2;
                            _3963 = frontier_phi_88_pred_3;
                            _3962 = frontier_phi_88_pred_4;
                            _3961 = frontier_phi_88_pred_5;
                            _3671 = _3964 + _3684;
                            _3672 = _3965 + _3685;
                            _3673 = _3966 + _3686;
                            _3668 = _3961 + _3681;
                            _3669 = _3962 + _3682;
                            _3670 = _3963 + _3683;
                            if (_3688 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3681 = _3668;
                                _3682 = _3669;
                                _3683 = _3670;
                                _3684 = _3671;
                                _3685 = _3672;
                                _3686 = _3673;
                                _3687 = _3688;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3673;
                        frontier_phi_82_pred_1 = _3672;
                        frontier_phi_82_pred_2 = _3671;
                        frontier_phi_82_pred_3 = _3670;
                        frontier_phi_82_pred_4 = _3669;
                        frontier_phi_82_pred_5 = _3668;
                    }
                    _3311 = frontier_phi_82_pred;
                    _3309 = frontier_phi_82_pred_1;
                    _3307 = frontier_phi_82_pred_2;
                    _3305 = frontier_phi_82_pred_3;
                    _3303 = frontier_phi_82_pred_4;
                    _3301 = frontier_phi_82_pred_5;
                    uint _3467 = _3466 + 1u;
                    if (_3467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3460 = _3301;
                        _3461 = _3303;
                        _3462 = _3305;
                        _3463 = _3307;
                        _3464 = _3309;
                        _3465 = _3311;
                        _3466 = _3467;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3307;
                frontier_phi_63_64_ladder_1 = _3311;
                frontier_phi_63_64_ladder_2 = _3309;
                frontier_phi_63_64_ladder_3 = _3305;
                frontier_phi_63_64_ladder_4 = _3303;
                frontier_phi_63_64_ladder_5 = _3301;
            }
            else
            {
                frontier_phi_63_64_ladder = _3185;
                frontier_phi_63_64_ladder_1 = _3189;
                frontier_phi_63_64_ladder_2 = _3187;
                frontier_phi_63_64_ladder_3 = _3183;
                frontier_phi_63_64_ladder_4 = _3181;
                frontier_phi_63_64_ladder_5 = _3179;
            }
            _3300 = frontier_phi_63_64_ladder_5;
            _3302 = frontier_phi_63_64_ladder_4;
            _3304 = frontier_phi_63_64_ladder_3;
            _3306 = frontier_phi_63_64_ladder;
            _3308 = frontier_phi_63_64_ladder_2;
            _3310 = frontier_phi_63_64_ladder_1;
        }
        float _3315 = isnan(1.0) ? _1052 : (isnan(_1052) ? 1.0 : min(_1052, 1.0));
        _3112 = (_3315 * _3306) + _2624;
        _3114 = (_3315 * _3308) + _2626;
        _3116 = (_3315 * _3310) + _2628;
        _3118 = ((_3300 * _1036) * _3315) + _2962;
        _3120 = ((_3302 * _1038) * _3315) + _2964;
        _3122 = ((_3304 * _1039) * _3315) + _2966;
    }
    else
    {
        _3112 = _2624;
        _3114 = _2626;
        _3116 = _2628;
        _3118 = _2962;
        _3120 = _2964;
        _3122 = _2966;
    }
    float _5156 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _5167 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _5178 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _3139 = ((isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0))) * (_3112 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1052))) + ((_3118 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1890)) * cbPerFrame._m0[3u].x);
    float _3140 = ((isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0))) * (_3114 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1052))) + ((_3120 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1890)) * cbPerFrame._m0[3u].x);
    float _3141 = ((isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0))) * (_3116 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1052))) + ((_3122 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1890)) * cbPerFrame._m0[3u].x);
    uint _3142 = _284 + 6u;
    float _3150 = _974 / cbSceneParam._m0[86u].x;
    float _3151 = _975 / cbSceneParam._m0[86u].y;
    vec4 _3165 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3150, _3151, (log2((isnan(cbSceneParam._m0[77u].w) ? _896 : (isnan(_896) ? cbSceneParam._m0[77u].w : min(_896, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3167 = _3165.x;
    float _3168 = _3165.y;
    float _3169 = _3165.z;
    float _3170 = _3165.w;
    float _3242;
    float _3244;
    float _3246;
    float _3248;
    if (_896 > cbSceneParam._m0[78u].w)
    {
        float _3204 = isnan(_896) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _896 : min(cbSceneParam._m0[80u].w, _896));
        float _3205 = _3204 / _896;
        float _3216 = _3205 * _947;
        float _3217 = _948 * _3205;
        float _3218 = (-0.0) - _3217;
        float _3220 = _3205 * _949;
        float _3222 = (cbSceneParam._m0[77u].w * _3218) / _3204;
        float _3223 = _3222 + cbSceneParam._m0[79u].w;
        float _3224 = cbSceneParam._m0[79u].w - _3217;
        float _3230 = sqrt(((_3216 * _3216) + (_3217 * _3217)) + (_3220 * _3220));
        float _3233 = (1.0 - (cbSceneParam._m0[77u].w / _3204)) * _3230;
        float _3238 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3240 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3417;
        if (abs((_3218 - _3222) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3417 = ((((_3223 > 0.0) ? exp2(_3238 * _3223) : (2.0 - exp2(_3240 * _3223))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3233;
        }
        else
        {
            float _3361 = 1.0 / cbSceneParam._m0[80u].x;
            float _3362 = isnan(_3224) ? _3223 : (isnan(_3223) ? _3224 : max(_3223, _3224));
            float _3363 = isnan(_3224) ? _3223 : (isnan(_3223) ? _3224 : min(_3223, _3224));
            float _3372 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : min(_3362, 0.0));
            float _3373 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : min(_3363, 0.0));
            _3417 = ((abs(_3230 / _3218) * cbSceneParam._m0[80u].y) * ((((_3372 - _3373) * 2.0) - ((exp2(_3238 * (isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0)))) - exp2(_3238 * (isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))))) * _3361)) - ((exp2(_3240 * _3372) - exp2(_3240 * _3373)) * _3361))) + (_3233 * cbSceneParam._m0[80u].z);
        }
        vec4 _3419 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3150, _3151, 1.0), 0.0);
        float _3428 = exp2((_3417 * (-1.44269502162933349609375)) * (1.0 - _3419.w));
        float _3429 = log2(_3428);
        float _3445 = log2(_3170);
        _3242 = (exp2(_3445 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3429 * cbSceneParam._m0[78u].x)) * _3419.x) / cbSceneParam._m0[78u].x)) + _3167;
        _3244 = (exp2(_3445 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3429 * cbSceneParam._m0[78u].y)) * _3419.y) / cbSceneParam._m0[78u].y)) + _3168;
        _3246 = (exp2(_3445 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3429 * cbSceneParam._m0[78u].z)) * _3419.z) / cbSceneParam._m0[78u].z)) + _3169;
        _3248 = _3428 * _3170;
    }
    else
    {
        _3242 = _3167;
        _3244 = _3168;
        _3246 = _3169;
        _3248 = _3170;
    }
    bool _3455;
    vec4 _3258;
    vec4 _3280;
    float _3282;
    float _3286;
    float _3287;
    float _3288;
    float _3289;
    bool _3299;
    for (;;)
    {
        _3258 = cbMatDynParam._m0[0u];
        float _3260 = roundEven(_3258.y);
        bool _3261 = _3260 == 3.0;
        float _3262 = log2(_3248);
        float _3269 = exp2(_3262 * cbSceneParam._m0[78u].x) * _3139;
        float _3270 = exp2(_3262 * cbSceneParam._m0[78u].y) * _3140;
        float _3271 = exp2(_3262 * cbSceneParam._m0[78u].z) * _3141;
        float _3278 = _963 + (-0.5);
        _3280 = cbMtdParam._m0[1u];
        _3282 = _3280.y * _3278;
        float _3285 = (_3260 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3286 = _3285 * (_3261 ? _3269 : (_3269 + (cbSceneParam._m0[72u].w * _3242)));
        _3287 = _3285 * (_3261 ? _3270 : (_3270 + (cbSceneParam._m0[72u].w * _3244)));
        _3288 = _3285 * (_3261 ? _3271 : (_3271 + (cbSceneParam._m0[72u].w * _3246)));
        _3289 = _3278 * 0.999000012874603271484375;
        _3299 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3299)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3289) < 0.5)
            {
                _3455 = true;
                break;
            }
        }
        uint _3396 = _1012 + uint(_3258.w);
        if ((cbInstanceData._m0[_3396].w < 1.0) && ((cbInstanceData._m0[_3396].w + _3289) < 0.5))
        {
            _3455 = true;
            break;
        }
        if ((_3282 + 1.0) < _3280.x)
        {
            _3455 = true;
            break;
        }
        _3455 = false;
        break;
    }
    float _3659;
    if (_3455)
    {
        discard_state = true;
        _3659 = 0.0;
    }
    else
    {
        _3659 = cbInstanceData._m0[_3142].w;
    }
    SV_Target.x = _3286;
    SV_Target.y = _3287;
    SV_Target.z = _3288;
    SV_Target.w = _3659;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3142].w;
    discard_exit();
}


