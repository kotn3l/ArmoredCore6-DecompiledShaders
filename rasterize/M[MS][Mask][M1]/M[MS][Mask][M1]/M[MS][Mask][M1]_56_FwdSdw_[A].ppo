#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1376;
float _4040;
float _4041;
float _4042;
float _4043;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _347.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4052 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _422 = (_415 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _423 = (_415 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _424 = (_415 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _347.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4063 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    float _538 = ((_510.x - _529) * _415) + _529;
    float _539 = ((_510.y - _530) * _415) + _530;
    float _540 = ((_510.z - _531) * _415) + _531;
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _565 = ((_552.z - _540) * _488) + _540;
    float _568 = ((((_552.x - _538) * _488) + _538) * 2.0) + (-1.0);
    float _570 = ((((_552.y - _539) * _488) + _539) * 2.0) + (-1.0);
    float _571 = dot(vec2(_568, _570), vec2(_568, _570));
    float _4074 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _576 = sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _602 = (((_590.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _568;
    float _603 = (((_590.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _570;
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _617 = _615.x;
    float _618 = 1.0 - _617;
    float _647 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_617 - _618) * cbMtdParam._m0[24u].w) + _618) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4085 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _648 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _656 = ((((cbMtdParam._m0[10u].x - _495) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _648) + _495;
    float _657 = ((((cbMtdParam._m0[10u].y - _496) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _648) + _496;
    float _658 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _497)) * _648) + _497;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _686 = _684.x;
    float _704 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _686) * _415) + _686;
    float _722 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _704) * _488) + _704;
    float _726 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _722) * cbMtdParam._m0[19u].z) + _722;
    float _728 = _726 - (_726 * _648);
    float _732 = (cbMtdParam._m0[19u].w * (_590.z - _565)) + _565;
    float _736 = ((cbMtdParam._m0[23u].x - _732) * _648) + _732;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _761 = (_755.x * 2.0) + (-1.0);
    float _762 = (_755.y * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _4096 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _779 = (_648 * (((cbMtdParam._m0[22u].z * _602) - _602) + _761)) + _602;
    float _780 = (_648 * (((cbMtdParam._m0[22u].z * _603) - _603) + _762)) + _603;
    float _781 = (_648 * (sqrt(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) - _576)) + _576;
    float _783 = cbMtdParam._m0[22u].x + _590.w;
    float _786 = fma(_781, _248 * NORMAL.x, fma(_780, _255 * TANGENT.x, (_241 * _233) * _779));
    float _789 = fma(_781, _248 * NORMAL.y, fma(_780, _255 * TANGENT.y, (_241 * _234) * _779));
    float _792 = fma(_781, _248 * NORMAL.z, fma(_780, _255 * TANGENT.z, (_241 * _235) * _779));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    float _797 = _796 * _786;
    float _798 = _796 * _789;
    float _799 = _796 * _792;
    float _4107 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _800 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4129 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4140 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4151 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4162 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _805 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _819 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _869 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _859);
    float _870 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _859);
    float _871 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _859);
    float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
    float _876 = _869 * _875;
    float _877 = _870 * _875;
    float _878 = _871 * _875;
    vec4 _883 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _885 = _883.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1057 = sqrt(((_869 * _869) + (_870 * _870)) + (_871 * _871));
        float _1063 = (cbMatDynParam._m0[5u].x * _1057) + cbMatDynParam._m0[5u].y;
        float _4173 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1068 = (cbMatDynParam._m0[5u].z * _1057) + cbMatDynParam._m0[5u].w;
        float _4184 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) - _1064)) + _1064) < ((_885 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _896 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _897 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _915 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _797));
    float _918 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _797));
    float _921 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _797));
    uint _934 = _261 + 9u;
    uint _935 = _934 + uint(cbMatDynParam._m0[0u].w);
    float _941 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_935].x;
    float _942 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_935].y;
    float _943 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * cbInstanceData._m0[_935].z;
    float _4195 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _4217 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _947 = 1.0 - _805;
    float _948 = _944 * _947;
    float _949 = _945 * _947;
    float _950 = _946 * _947;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _805;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _805;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _805;
    float _958 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    vec4 _970 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _896, cbSceneParam._m0[86u].y * _897));
    float _974 = ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * TEXCOORD_5.w) * _970.x;
    float _975 = dot(vec3(_797, _798, _799), vec3(_876, _877, _878));
    float _978 = _975 * 2.0;
    float _982 = (_978 * _797) - _876;
    float _983 = (_978 * _798) - _877;
    float _984 = (_978 * _799) - _878;
    float _988 = abs(dot(vec3(_876, _877, _878), vec3(_797, _798, _799)));
    float _4228 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _990 = sqrt(_800);
    float _1003 = exp2((_990 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_990 * 3.0));
    float _1009 = (1.0 - _1003) * ((_990 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1010 = _1003 * _990;
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1100 = fma(_1046, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038));
        float _1104 = fma(_1046, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038));
        float _1108 = fma(_1046, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038));
        float _1133 = _1038 + _797;
        float _1134 = _1042 + _798;
        float _1135 = _1046 + _799;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1100;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1104;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1108;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1100 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1104 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1108 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_797, _798, _799), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_797, _798, _799), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4309 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_797, _798, _799), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4342 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1417 = fma(_1046, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1038));
        float _1421 = fma(_1046, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1038));
        float _1425 = fma(_1046, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1038));
        float _1448 = _1038 + _797;
        float _1449 = _1042 + _798;
        float _1450 = _1046 + _799;
        float _1460 = fma(_1450, cbModelParam._m0[30u].z, fma(_1449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1448)) - _1417;
        float _1461 = fma(_1450, cbModelParam._m0[31u].z, fma(_1449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1448)) - _1421;
        float _1462 = fma(_1450, cbModelParam._m0[32u].z, fma(_1449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1448)) - _1425;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1479 = ((_1466 * _1460) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1417 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1461) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1421 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1466 * _1462) / cbModelParam._m0[35u].z) + ((((((_1425 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1516 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1483.x + (-0.5));
        float _1518 = _1516 * (_1483.y + (-0.5));
        float _1519 = _1516 * (_1483.z + (-0.5));
        float _1526 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1490.x + (-0.5));
        float _1528 = _1526 * (_1490.y + (-0.5));
        float _1529 = _1526 * (_1490.z + (-0.5));
        float _1536 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1497.x + (-0.5));
        float _1538 = _1536 * (_1497.y + (-0.5));
        float _1539 = _1536 * (_1497.z + (-0.5));
        float _1546 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1504.x + (-0.5));
        float _1548 = _1546 * (_1504.y + (-0.5));
        float _1549 = _1546 * (_1504.z + (-0.5));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = _1517 * 0.5;
        float _1554 = _1527 * 0.5;
        float _1555 = _1537 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_797, _798, _799), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4405 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1580 + 1.0))) + _1585) * _1550;
        float _1595 = _1518 * 0.5;
        float _1596 = _1528 * 0.5;
        float _1597 = _1538 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_797, _798, _799), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4438 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1622 + 1.0))) + _1627) * _1551;
        float _1637 = _1519 * 0.5;
        float _1638 = _1529 * 0.5;
        float _1639 = _1539 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_797, _798, _799), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4471 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1664 + 1.0))) + _1669) * _1552;
        _1686 = _1519;
        _1687 = _1518;
        _1688 = _1517;
        _1689 = _1529;
        _1690 = _1528;
        _1691 = _1527;
        _1692 = _1539;
        _1693 = _1538;
        _1694 = _1537;
        _1695 = _1552;
        _1696 = _1551;
        _1697 = _1550;
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
    }
    else
    {
        _1686 = _1376;
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = _1376;
        _1697 = _1376;
        _1698 = 0.0;
        _1699 = 0.0;
        _1700 = 0.0;
    }
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1388)) + _1388;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1389)) + _1389;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1390)) + _1390;
    float _1733 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1710));
    float _1754 = _982 * 0.5;
    float _1755 = _983 * 0.5;
    float _1756 = _984 * 0.5;
    float _1757 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1760 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1763 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1797;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1770 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1774 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1778 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1785 = dot(vec4(cbModelParam._m0[39u]), vec4(_1754, _1755, _1756, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1808;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1799 = dot(vec4(cbModelParam._m0[40u]), vec4(_1754, _1755, _1756, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1812 = (_1808 * cbModelParam._m0[1u].x) + (_1797 * (1.0 - cbModelParam._m0[1u].x));
    float _1822 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1822 : min(cbModelParam._m0[25u].z, _1822));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1046, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1046, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1046, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_984, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982));
        float _1886 = fma(_984, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982));
        float _1889 = fma(_984, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1917 = frontier_phi_17_15_ladder;
        }
        float _2089;
        if (_1886 > 0.0)
        {
            _2089 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2089 = frontier_phi_26_22_ladder;
        }
        float _2384;
        if (_1889 > 0.0)
        {
            _2384 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2384 = frontier_phi_38_33_ladder;
        }
        float _2386 = isnan(_2089) ? _1917 : (isnan(_1917) ? _2089 : min(_1917, _2089));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1883) + _1872;
        float _2392 = (_2387 * _1886) + _1876;
        float _2393 = (_2387 * _1889) + _1880;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2396 = (-1.0) - _2394;
        float _2398 = _2394 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2393 > _2398) || ((_2393 < _2396) || ((_2392 > _2398) || ((_2392 < _2396) || ((_2391 < _2396) || (_2391 > _2398))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2393, cbModelParam._m0[9u].z, fma(_2392, cbModelParam._m0[9u].y, _2391 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2393, cbModelParam._m0[10u].z, fma(_2392, cbModelParam._m0[10u].y, _2391 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2393, cbModelParam._m0[11u].z, fma(_2392, cbModelParam._m0[11u].y, _2391 * cbModelParam._m0[11u].x))), _1823);
            frontier_phi_16_38_ladder = _2538.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2538.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2538.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_16_38_ladder_2;
        _1907 = frontier_phi_16_38_ladder_1;
        _1909 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_982, _983, _984), _1823);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1046, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1046, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1046, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_984, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982));
        float _1982 = fma(_984, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982));
        float _1985 = fma(_984, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982));
        float _2094;
        if (_1979 > 0.0)
        {
            _2094 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2094 = frontier_phi_28_24_ladder;
        }
        float _2411;
        if (_1982 > 0.0)
        {
            _2411 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2411 = frontier_phi_40_35_ladder;
        }
        float _2749;
        if (_1985 > 0.0)
        {
            _2749 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2749 = frontier_phi_50_47_ladder;
        }
        float _2751 = isnan(_2411) ? _2094 : (isnan(_2094) ? _2411 : min(_2094, _2411));
        float _2752 = isnan(_2749) ? _2751 : (isnan(_2751) ? _2749 : min(_2751, _2749));
        float _2756 = (_2752 * _1979) + _1968;
        float _2757 = (_2752 * _1982) + _1972;
        float _2758 = (_2752 * _1985) + _1976;
        float _2759 = _2752 * 9.9999997473787516355514526367188e-05;
        float _2760 = (-1.0) - _2759;
        float _2762 = _2759 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2758 > _2762) || ((_2758 < _2760) || ((_2757 > _2762) || ((_2757 < _2760) || ((_2756 < _2760) || (_2756 > _2762))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2758, cbModelParam._m0[17u].z, fma(_2757, cbModelParam._m0[17u].y, _2756 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2758, cbModelParam._m0[18u].z, fma(_2757, cbModelParam._m0[18u].y, _2756 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2758, cbModelParam._m0[19u].z, fma(_2757, cbModelParam._m0[19u].y, _2756 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_25_50_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_25_50_ladder_2;
        _2006 = frontier_phi_25_50_ladder_1;
        _2008 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_982, _983, _984), _1914);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2021 = (((_1009 * _958) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_2004 - _1905)) + _1905);
    float _2023 = (((_1009 * _960) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_2006 - _1907)) + _1907);
    float _2025 = (((_1009 * _961) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2028 = fma(_2025, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2031 = fma(_2025, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2034 = fma(_2025, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2081 = _2068 / _2080;
    float _2082 = _2072 / _2080;
    float _2083 = _2076 / _2080;
    float _2230;
    float _2231;
    float _2232;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2110 = ((uint(_2083 > cbSceneParam._m0[59u].y) + uint(_2083 > cbSceneParam._m0[59u].x)) + uint(_2083 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2111 = _2110 + 43u;
        uint _2119 = _2110 + 44u;
        uint _2127 = _2110 + 45u;
        uint _2135 = _2110 + 46u;
        float _2146 = fma(_2080, cbSceneParam._m0[_2111].w, fma(_2076, cbSceneParam._m0[_2111].z, fma(_2072, cbSceneParam._m0[_2111].y, _2068 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2080, cbSceneParam._m0[_2119].w, fma(_2076, cbSceneParam._m0[_2119].z, fma(_2072, cbSceneParam._m0[_2119].y, _2068 * cbSceneParam._m0[_2119].x)));
        float _2158 = fma(_2080, cbSceneParam._m0[_2135].w, fma(_2076, cbSceneParam._m0[_2135].z, fma(_2072, cbSceneParam._m0[_2135].y, _2068 * cbSceneParam._m0[_2135].x)));
        float _2163 = cbSceneParam._m0[33u].z * _2158;
        float _2165 = cbSceneParam._m0[33u].w * _2158;
        float _2168 = fma(_2080, cbSceneParam._m0[_2127].w, fma(_2076, cbSceneParam._m0[_2127].z, fma(_2072, cbSceneParam._m0[_2127].y, _2068 * cbSceneParam._m0[_2127].x))) / _2158;
        float _2216 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
        float _4597 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2223 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 + _2146) / _2158, (_2165 + _2150) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2146) / _2158, (_2150 - _2163) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2163) / _2158, (_2150 - _2165) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2165) / _2158, (_2163 + _2150) / _2158), _2168), 0.0)).x), vec4(0.25)));
        _2230 = 1.0 - (_2223 * cbSceneParam._m0[34u].x);
        _2231 = 1.0 - (_2223 * cbSceneParam._m0[34u].y);
        _2232 = 1.0 - (_2223 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2230 = 1.0;
        _2231 = 1.0;
        _2232 = 1.0;
    }
    float _2296;
    float _2298;
    float _2300;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2284 = fma(_2080, cbSceneParam._m0[63u].w, fma(_2076, cbSceneParam._m0[63u].z, fma(_2072, cbSceneParam._m0[63u].y, _2068 * cbSceneParam._m0[63u].x)));
        float _2285 = fma(_2080, cbSceneParam._m0[60u].w, fma(_2076, cbSceneParam._m0[60u].z, fma(_2072, cbSceneParam._m0[60u].y, _2068 * cbSceneParam._m0[60u].x))) / _2284;
        float _2286 = fma(_2080, cbSceneParam._m0[61u].w, fma(_2076, cbSceneParam._m0[61u].z, fma(_2072, cbSceneParam._m0[61u].y, _2068 * cbSceneParam._m0[61u].x))) / _2284;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2285 >= cbSceneParam._m0[64u].x) && (_2286 >= cbSceneParam._m0[64u].y)) && (_2285 <= cbSceneParam._m0[64u].z)) && (_2286 <= cbSceneParam._m0[64u].w))
        {
            float _2424 = fma(_2080, cbSceneParam._m0[62u].w, fma(_2076, cbSceneParam._m0[62u].z, fma(_2072, cbSceneParam._m0[62u].y, _2068 * cbSceneParam._m0[62u].x))) / _2284;
            float _2428 = isnan(cbSceneParam._m0[41u].w) ? _2424 : (isnan(_2424) ? cbSceneParam._m0[41u].w : max(_2424, cbSceneParam._m0[41u].w));
            float _2471 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
            float _4613 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
            float _2478 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2285, cbSceneParam._m0[33u].w + _2286), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2285, _2286 - cbSceneParam._m0[33u].z), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2285 - cbSceneParam._m0[33u].z, _2286 - cbSceneParam._m0[33u].w), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2285 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2286), _2428), 0.0)).x), vec4(0.25)));
            float _2482 = 1.0 - (_2478 * cbSceneParam._m0[34u].x);
            float _2483 = 1.0 - (_2478 * cbSceneParam._m0[34u].y);
            float _2484 = 1.0 - (_2478 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2484) ? _2232 : (isnan(_2232) ? _2484 : min(_2232, _2484));
            frontier_phi_37_36_ladder_1 = isnan(_2483) ? _2231 : (isnan(_2231) ? _2483 : min(_2231, _2483));
            frontier_phi_37_36_ladder_2 = isnan(_2482) ? _2230 : (isnan(_2230) ? _2482 : min(_2230, _2482));
        }
        else
        {
            frontier_phi_37_36_ladder = _2232;
            frontier_phi_37_36_ladder_1 = _2231;
            frontier_phi_37_36_ladder_2 = _2230;
        }
        _2296 = frontier_phi_37_36_ladder_2;
        _2298 = frontier_phi_37_36_ladder_1;
        _2300 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2296 = _2230;
        _2298 = _2231;
        _2300 = _2232;
    }
    uvec4 _2305 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2307 = _2305.x * 14u;
    uint _2308 = _2307 + 13u;
    float _2315 = _974 + (-1.0);
    float _2320 = (cbLight._m0[_2308].x * _2315) + 1.0;
    float _2321 = (cbLight._m0[_2308].y * _2315) + 1.0;
    float _2322 = (cbLight._m0[_2308].z * _2315) + 1.0;
    float _2323 = (cbLight._m0[_2308].w * _2315) + 1.0;
    uint _2324 = _2307 + 5u;
    float _2330 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
    uint _2334 = _2307 + 4u;
    float _2343 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2347 = _2307 | 1u;
    float _2358 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_797, _798, _799));
    float _2361 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_797, _798, _799));
    float _4649 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _4660 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2366 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * 0.3183098733425140380859375;
    float _2368 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * 0.3183098733425140380859375;
    float _2375 = ((cbLight._m0[_2324].x * _2330) * _2368) + (((cbLight._m0[_2334].x * _2296) * _2343) * _2366);
    float _2376 = ((_2330 * cbLight._m0[_2324].y) * _2368) + (((cbLight._m0[_2334].y * _2298) * _2343) * _2366);
    float _2377 = ((_2330 * cbLight._m0[_2324].z) * _2368) + (((cbLight._m0[_2334].z * _2300) * _2343) * _2366);
    uvec4 _2381 = floatBitsToUint(cbLight._m0[_2307 + 12u]);
    bool _2383 = _2381.x == 0u;
    float _2485;
    float _2487;
    float _2489;
    if (_2383)
    {
        _2485 = _2375;
        _2487 = _2376;
        _2489 = _2377;
    }
    else
    {
        uint _2493 = _2307 + 6u;
        float _2509 = (dot(vec3(cbLight._m0[_2307 + 2u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2510 = _2509 * _2509;
        float _4671 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2511 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2512 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2485 = (((cbLight._m0[_2493].x * 0.3183098733425140380859375) * _2511) * _2512) + _2375;
        _2487 = (((cbLight._m0[_2493].y * 0.3183098733425140380859375) * _2511) * _2512) + _2376;
        _2489 = (((cbLight._m0[_2493].z * 0.3183098733425140380859375) * _2511) * _2512) + _2377;
    }
    bool _2492 = _2381.y == 0u;
    float _2547;
    float _2549;
    float _2551;
    if (_2492)
    {
        _2547 = _2485;
        _2549 = _2487;
        _2551 = _2489;
    }
    else
    {
        uint _2720 = _2307 + 7u;
        float _2736 = (dot(vec3(cbLight._m0[_2307 + 3u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2737 = _2736 * _2736;
        float _4687 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2738 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2739 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2547 = (((cbLight._m0[_2720].x * 0.3183098733425140380859375) * _2738) * _2739) + _2485;
        _2549 = (((cbLight._m0[_2720].y * 0.3183098733425140380859375) * _2738) * _2739) + _2487;
        _2551 = (((cbLight._m0[_2720].z * 0.3183098733425140380859375) * _2738) * _2739) + _2489;
    }
    uint _2554 = _2307 + 8u;
    float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _800) * 0.949999988079071044921875);
    float _2568 = _2567 * _2567;
    float _2569 = cbLight._m0[_2307].x + _876;
    float _2570 = cbLight._m0[_2307].y + _877;
    float _2571 = cbLight._m0[_2307].z + _878;
    float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
    float _2576 = _2575 * _2569;
    float _2577 = _2575 * _2570;
    float _2578 = _2575 * _2571;
    float _2579 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2307].xyz));
    float _4703 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _4714 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2583 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _2584 = dot(vec3(_797, _798, _799), vec3(_2576, _2577, _2578));
    float _4725 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2588 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2576, _2577, _2578));
    float _4736 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2592 = _2568 * _2568;
    float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
    float _2604 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
    float _2605 = 0.959999978542327880859375 - _955;
    float _2607 = 0.959999978542327880859375 - _956;
    float _2608 = 0.959999978542327880859375 - _957;
    float _2615 = 1.0 - _2568;
    float _2626 = (0.5 / (((_2583 * ((_2582 * _2615) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2615) + _2568) * _2582))) * _2582;
    float _4747 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2628 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
    uint _2642 = _2307 + 9u;
    float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _800) * 0.949999988079071044921875);
    float _2654 = _2653 * _2653;
    float _2655 = cbLight._m0[_2347].x + _876;
    float _2656 = cbLight._m0[_2347].y + _877;
    float _2657 = cbLight._m0[_2347].z + _878;
    float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
    float _2662 = _2661 * _2655;
    float _2663 = _2661 * _2656;
    float _2664 = _2661 * _2657;
    float _2665 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2347].xyz));
    float _4758 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2669 = dot(vec3(_797, _798, _799), vec3(_2662, _2663, _2664));
    float _4769 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2672 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2673 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2662, _2663, _2664));
    float _4780 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2677 = _2654 * _2654;
    float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
    float _2688 = exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0);
    float _2695 = 1.0 - _2654;
    float _2705 = (0.5 / (((_2583 * ((_2668 * _2695) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2695) + _2654) * _2668))) * _2668;
    float _4791 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2707 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
    float _2717 = (((((_2688 * _2605) + _958) * cbLight._m0[_2642].x) * _2707) * _2330) + ((((cbLight._m0[_2554].x * _2296) * ((_2604 * _2605) + _958)) * _2628) * _2343);
    float _2718 = (((((_2688 * _2607) + _960) * cbLight._m0[_2642].y) * _2707) * _2330) + ((((cbLight._m0[_2554].y * _2298) * ((_2604 * _2607) + _960)) * _2628) * _2343);
    float _2719 = (((((_2688 * _2608) + _961) * cbLight._m0[_2642].z) * _2707) * _2330) + ((((cbLight._m0[_2554].z * _2300) * ((_2604 * _2608) + _961)) * _2628) * _2343);
    float _2775;
    float _2777;
    float _2779;
    if (_2383)
    {
        _2775 = _2717;
        _2777 = _2718;
        _2779 = _2719;
    }
    else
    {
        uint _2781 = _2307 + 2u;
        uint _2785 = _2307 + 10u;
        float _2799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2781].w)) * _800) * 0.949999988079071044921875);
        float _2800 = _2799 * _2799;
        float _2801 = cbLight._m0[_2781].x + _876;
        float _2802 = cbLight._m0[_2781].y + _877;
        float _2803 = cbLight._m0[_2781].z + _878;
        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
        float _2808 = _2807 * _2801;
        float _2809 = _2807 * _2802;
        float _2810 = _2807 * _2803;
        float _2811 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2781].xyz));
        float _4802 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2815 = dot(vec3(_797, _798, _799), vec3(_2808, _2809, _2810));
        float _4813 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2819 = dot(vec3(cbLight._m0[_2781].xyz), vec3(_2808, _2809, _2810));
        float _4824 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2823 = _2800 * _2800;
        float _2827 = ((_2818 * _2818) * (_2823 + (-1.0))) + 1.0;
        float _2834 = exp2(log2(1.0 - (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) * 5.0);
        float _2841 = 1.0 - _2800;
        float _2851 = (0.5 / (((_2583 * ((_2814 * _2841) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2841) + _2800) * _2814))) * _2814;
        float _4835 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2853 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2823 / ((_2827 * _2827) * 3.141590118408203125));
        float _2854 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2775 = (((((_2834 * _2605) + _958) * cbLight._m0[_2785].x) * _2853) * _2854) + _2717;
        _2777 = (((((_2834 * _2607) + _960) * cbLight._m0[_2785].y) * _2853) * _2854) + _2718;
        _2779 = (((((_2834 * _2608) + _961) * cbLight._m0[_2785].z) * _2853) * _2854) + _2719;
    }
    float _2885;
    float _2887;
    float _2889;
    if (_2492)
    {
        _2885 = _2775;
        _2887 = _2777;
        _2889 = _2779;
    }
    else
    {
        uint _2896 = _2307 + 3u;
        uint _2900 = _2307 + 11u;
        float _2914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2896].w)) * _800) * 0.949999988079071044921875);
        float _2915 = _2914 * _2914;
        float _2916 = cbLight._m0[_2896].x + _876;
        float _2917 = cbLight._m0[_2896].y + _877;
        float _2918 = cbLight._m0[_2896].z + _878;
        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
        float _2923 = _2922 * _2916;
        float _2924 = _2922 * _2917;
        float _2925 = _2922 * _2918;
        float _2926 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2896].xyz));
        float _4851 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2929 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2930 = dot(vec3(_797, _798, _799), vec3(_2923, _2924, _2925));
        float _4862 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2933 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2934 = dot(vec3(cbLight._m0[_2896].xyz), vec3(_2923, _2924, _2925));
        float _4873 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2938 = _2915 * _2915;
        float _2942 = ((_2933 * _2933) * (_2938 + (-1.0))) + 1.0;
        float _2949 = exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0);
        float _2956 = 1.0 - _2915;
        float _2966 = (0.5 / (((_2583 * ((_2929 * _2956) + _2915)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2956) + _2915) * _2929))) * _2929;
        float _4884 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2968 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2938 / ((_2942 * _2942) * 3.141590118408203125));
        float _2969 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2885 = (((((_2949 * _2605) + _958) * cbLight._m0[_2900].x) * _2968) * _2969) + _2775;
        _2887 = (((((_2949 * _2607) + _960) * cbLight._m0[_2900].y) * _2968) * _2969) + _2777;
        _2889 = (((((_2949 * _2608) + _961) * cbLight._m0[_2900].z) * _2968) * _2969) + _2779;
    }
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_2305.y == 0u)
    {
        uvec4 _2990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2991 = _2990.x;
        uint _3002 = uint((float(_2990.y) * floor(float(uint(cbSceneParam._m0[85u].y * _897) / _2991))) + floor(float(uint(cbSceneParam._m0[85u].x * _896) / _2991)));
        float _3012 = (log2(_2083 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3013 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        uint _3016 = uint(isnan(14.0) ? _3013 : (isnan(_3013) ? 14.0 : min(_3013, 14.0)));
        uvec4 _3021 = texelFetch(g_lightClusterGridBuffer, int(((_3016 << 2u) + (_3002 << 6u)) >> 2u));
        uint _3022 = _3021.x;
        uint _3023 = _2990.z;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((((1u << ((_3023 >> 4u) & 15u)) + 4294967295u) & _3022) == 0u) || ((_3023 & 240u) == 0u))
        {
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
        }
        else
        {
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            uint _3261 = 0u;
            uint _3270;
            bool _3271;
            for (;;)
            {
                _3270 = texelFetch(g_lightClassification, int((((_3016 << 5u) + (_3002 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                _3271 = _3270 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3271)
                {
                    frontier_phi_71_pred = _3260;
                    frontier_phi_71_pred_1 = _3259;
                    frontier_phi_71_pred_2 = _3258;
                    frontier_phi_71_pred_3 = _3257;
                    frontier_phi_71_pred_4 = _3256;
                    frontier_phi_71_pred_5 = _3255;
                }
                else
                {
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    uint _3406;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3270;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    for (;;)
                    {
                        uint _3410 = uint(findLSB(_3406)) + (_3261 << 5u);
                        uint _3407 = (_3406 + 4294967295u) & _3406;
                        uint _3412 = _3410 * 48u;
                        vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 3u)).x));
                        uint _3432 = (_3410 * 48u) + 4u;
                        vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3432)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 3u)).x));
                        uint _3451 = (_3410 * 48u) + 8u;
                        vec3 _3462 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3451)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 2u)).x));
                        float _3466 = _3426.x - _2081;
                        float _3467 = _3426.y - _2082;
                        float _3468 = _3426.z - _2083;
                        float _3469 = dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468));
                        float _3472 = inversesqrt(_3469);
                        float _3473 = _3472 * _3466;
                        float _3474 = _3472 * _3467;
                        float _3475 = _3472 * _3468;
                        float _3476 = dot(vec3(_915, _918, _921), vec3(_3473, _3474, _3475));
                        float _3481 = 1.0 - (_3469 * _3426.w);
                        float _4910 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3483 = sqrt(_3469) * _3445.w;
                        float _3486 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                        float _3487 = _3486 * _3486;
                        float _3490 = ((1.0 - _3487) * _3476) + _3487;
                        float _3493 = _3483 * _3483;
                        float _3497 = ((isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0))) * _3482) / ((_3493 * 0.699999988079071044921875) + 1.0);
                        float _3501 = (-0.0) - _2081;
                        float _3502 = (-0.0) - _2082;
                        float _3503 = (-0.0) - _2083;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3508 = _3507 * _3501;
                        float _3509 = _3507 * _3502;
                        float _3510 = _3507 * _3503;
                        float _3517 = exp2(log2(1.0 / ((_3493 * 3.5) + 5.0)) * 0.25);
                        float _3518 = 1.0 - _990;
                        float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                        float _3526 = _3525 * _3525;
                        float _3527 = _3526 * _3526;
                        float _3528 = _3508 + _3473;
                        float _3529 = _3509 + _3474;
                        float _3530 = _3510 + _3475;
                        float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                        float _3538 = dot(vec3(_915, _918, _921), vec3(_3508, _3509, _3510));
                        float _4926 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3541 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3542 = dot(vec3(_915, _918, _921), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                        float _4937 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3545 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                        float _3550 = _3486 * _3526;
                        float _3551 = _3550 * _3550;
                        float _3554 = ((1.0 - _3551) * _3476) + _3551;
                        float _4948 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3555 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3556 = 1.0 - _3526;
                        float _3566 = (0.5 / (((_3555 * ((_3541 * _3556) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3555 * _3556) + _3526) * _3541))) * _3555;
                        float _4959 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3577 = (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0)))) / ((_3549 * _3549) * ((_3493 * 2.1991131305694580078125) + 3.141590118408203125))) * _3482;
                        _3330 = (_3497 * _3445.x) + _3403;
                        _3331 = (_3497 * _3445.y) + _3404;
                        _3332 = (_3497 * _3445.z) + _3405;
                        _3327 = (_3577 * _3462.x) + _3400;
                        _3328 = (_3577 * _3462.y) + _3401;
                        _3329 = (_3577 * _3462.z) + _3402;
                        if (_3407 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3407;
                        }
                    }
                    frontier_phi_71_pred = _3332;
                    frontier_phi_71_pred_1 = _3331;
                    frontier_phi_71_pred_2 = _3330;
                    frontier_phi_71_pred_3 = _3329;
                    frontier_phi_71_pred_4 = _3328;
                    frontier_phi_71_pred_5 = _3327;
                }
                _3113 = frontier_phi_71_pred;
                _3111 = frontier_phi_71_pred_1;
                _3109 = frontier_phi_71_pred_2;
                _3107 = frontier_phi_71_pred_3;
                _3105 = frontier_phi_71_pred_4;
                _3103 = frontier_phi_71_pred_5;
                uint _3262 = _3261 + 1u;
                if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3255 = _3103;
                    _3256 = _3105;
                    _3257 = _3107;
                    _3258 = _3109;
                    _3259 = _3111;
                    _3260 = _3113;
                    _3261 = _3262;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
        }
        uvec4 _3116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3117 = _3116.z;
        uint _3119 = (_3117 >> 8u) & 15u;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        if (((4294967295u << _3119) & _3022) == 0u)
        {
            _3223 = _3102;
            _3225 = _3104;
            _3227 = _3106;
            _3229 = _3108;
            _3231 = _3110;
            _3233 = _3112;
        }
        else
        {
            float _3248 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
            float _3249 = _3248 * _2081;
            float _3250 = _3248 * _2082;
            float _3251 = _3248 * _2083;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3119 < ((_3117 >> 12u) & 15u))
            {
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3234;
                float _3383 = _3102;
                float _3384 = _3104;
                float _3385 = _3106;
                float _3386 = _3108;
                float _3387 = _3110;
                float _3388 = _3112;
                uint _3389 = _3119;
                uint _3398;
                bool _3399;
                for (;;)
                {
                    _3398 = texelFetch(g_lightClassification, int((((_3016 << 5u) + (_3002 << 9u)) + (_3389 << 2u)) >> 2u)).x;
                    _3399 = _3398 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3399)
                    {
                        frontier_phi_82_pred = _3388;
                        frontier_phi_82_pred_1 = _3387;
                        frontier_phi_82_pred_2 = _3386;
                        frontier_phi_82_pred_3 = _3385;
                        frontier_phi_82_pred_4 = _3384;
                        frontier_phi_82_pred_5 = _3383;
                    }
                    else
                    {
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3604 = _3383;
                        float _3605 = _3384;
                        float _3606 = _3385;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        uint _3610 = _3398;
                        uint _3611;
                        vec4 _3636;
                        float _3637;
                        vec4 _3652;
                        vec3 _3664;
                        vec4 _3679;
                        vec4 _3694;
                        float _3740;
                        bool _3741;
                        for (;;)
                        {
                            uint _3621 = ((_3389 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3610));
                            _3611 = (_3610 + 4294967295u) & _3610;
                            uint _3623 = _3621 * 40u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            _3637 = _3636.w;
                            uint _3639 = (_3621 * 40u) + 4u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3621 * 40u) + 8u;
                            _3664 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x));
                            uint _3666 = (_3621 * 40u) + 16u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3621 * 40u) + 20u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3621 * 40u) + 24u;
                            vec4 _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3715 = (_3621 * 40u) + 28u;
                            vec4 _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            _3740 = fma(_2083, _3728.z, fma(_2082, _3728.y, _3728.x * _2081)) + _3728.w;
                            _3741 = !((fma(_2083, _3709.z, fma(_2082, _3709.y, _3709.x * _2081)) + _3709.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3741)
                            {
                                float _3768 = _3636.x - _2081;
                                float _3769 = _3636.y - _2082;
                                float _3770 = _3636.z - _2083;
                                float _3771 = dot(vec3(_3768, _3769, _3770), vec3(_3768, _3769, _3770));
                                float _3774 = inversesqrt(_3771);
                                float _3775 = _3774 * _3768;
                                float _3776 = _3774 * _3769;
                                float _3777 = _3774 * _3770;
                                float _3781 = 1.0 - (_3771 / (_3637 * _3637));
                                float _4970 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3786 = sqrt(_3771) * _3652.w;
                                float _3788 = 1.39999997615814208984375 / (_3786 + 1.39999997615814208984375);
                                float _3789 = _3788 * _3788;
                                float _3792 = ((1.0 - _3789) * dot(vec3(_3775, _3776, _3777), vec3(_915, _918, _921))) + _3789;
                                float _3795 = _3786 * _3786;
                                float _3799 = (fma(_2083, _3679.z, fma(_2082, _3679.y, _3679.x * _2081)) + _3679.w) / _3740;
                                float _3800 = (fma(_2083, _3694.z, fma(_2082, _3694.y, _3694.x * _2081)) + _3694.w) / _3740;
                                float _3804 = 1.0 - dot(vec2(_3799, _3800), vec2(_3799, _3800));
                                float _4986 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3806 = _3805 * (((isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0))) * _3782) / ((_3795 * 0.699999988079071044921875) + 1.0));
                                float _3818 = exp2(log2(1.0 / ((_3795 * 3.5) + 5.0)) * 0.25);
                                float _3819 = 1.0 - _990;
                                float _3826 = sqrt(1.0 - ((1.0 - (_3819 * _3819)) * (1.0 - (_3818 * _3818))));
                                float _3827 = _3826 * _3826;
                                float _3828 = _3827 * _3827;
                                float _3829 = _3775 - _3249;
                                float _3830 = _3776 - _3250;
                                float _3831 = _3777 - _3251;
                                float _3835 = inversesqrt(dot(vec3(_3829, _3830, _3831), vec3(_3829, _3830, _3831)));
                                float _3839 = dot(vec3(_915, _918, _921), vec3((-0.0) - _3249, (-0.0) - _3250, (-0.0) - _3251));
                                float _4997 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3842 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3843 = dot(vec3(_915, _918, _921), vec3(_3835 * _3829, _3835 * _3830, _3835 * _3831));
                                float _5008 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3850 = ((_3846 * _3846) * (_3828 + (-1.0))) + 1.0;
                                float _3851 = _3788 * _3827;
                                float _3852 = _3851 * _3851;
                                float _3858 = ((1.0 - _3852) * dot(vec3(_915, _918, _921), vec3(_3775, _3776, _3777))) + _3852;
                                float _5019 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3859 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3860 = 1.0 - _3827;
                                float _3870 = (0.5 / (((_3859 * ((_3842 * _3860) + _3827)) + 9.9999999392252902907785028219223e-09) + (((_3859 * _3860) + _3827) * _3842))) * _3859;
                                float _5030 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3880 = (_3805 * _3782) * (((_3828 * 3.1415927410125732421875) * (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) / ((_3850 * _3850) * ((_3795 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3806 * _3652.z;
                                frontier_phi_88_pred_1 = _3806 * _3652.y;
                                frontier_phi_88_pred_2 = _3806 * _3652.x;
                                frontier_phi_88_pred_3 = _3880 * _3664.z;
                                frontier_phi_88_pred_4 = _3880 * _3664.y;
                                frontier_phi_88_pred_5 = _3880 * _3664.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3889 = frontier_phi_88_pred;
                            _3888 = frontier_phi_88_pred_1;
                            _3887 = frontier_phi_88_pred_2;
                            _3886 = frontier_phi_88_pred_3;
                            _3885 = frontier_phi_88_pred_4;
                            _3884 = frontier_phi_88_pred_5;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            if (_3611 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3611;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3596;
                        frontier_phi_82_pred_1 = _3595;
                        frontier_phi_82_pred_2 = _3594;
                        frontier_phi_82_pred_3 = _3593;
                        frontier_phi_82_pred_4 = _3592;
                        frontier_phi_82_pred_5 = _3591;
                    }
                    _3234 = frontier_phi_82_pred;
                    _3232 = frontier_phi_82_pred_1;
                    _3230 = frontier_phi_82_pred_2;
                    _3228 = frontier_phi_82_pred_3;
                    _3226 = frontier_phi_82_pred_4;
                    _3224 = frontier_phi_82_pred_5;
                    uint _3390 = _3389 + 1u;
                    if (_3390 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3383 = _3224;
                        _3384 = _3226;
                        _3385 = _3228;
                        _3386 = _3230;
                        _3387 = _3232;
                        _3388 = _3234;
                        _3389 = _3390;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3230;
                frontier_phi_63_64_ladder_1 = _3234;
                frontier_phi_63_64_ladder_2 = _3232;
                frontier_phi_63_64_ladder_3 = _3228;
                frontier_phi_63_64_ladder_4 = _3226;
                frontier_phi_63_64_ladder_5 = _3224;
            }
            else
            {
                frontier_phi_63_64_ladder = _3108;
                frontier_phi_63_64_ladder_1 = _3112;
                frontier_phi_63_64_ladder_2 = _3110;
                frontier_phi_63_64_ladder_3 = _3106;
                frontier_phi_63_64_ladder_4 = _3104;
                frontier_phi_63_64_ladder_5 = _3102;
            }
            _3223 = frontier_phi_63_64_ladder_5;
            _3225 = frontier_phi_63_64_ladder_4;
            _3227 = frontier_phi_63_64_ladder_3;
            _3229 = frontier_phi_63_64_ladder;
            _3231 = frontier_phi_63_64_ladder_2;
            _3233 = frontier_phi_63_64_ladder_1;
        }
        float _3238 = isnan(1.0) ? _974 : (isnan(_974) ? 1.0 : min(_974, 1.0));
        _3035 = (_3238 * _3229) + _2547;
        _3037 = (_3238 * _3231) + _2549;
        _3039 = (_3238 * _3233) + _2551;
        _3041 = ((_3223 * _958) * _3238) + _2885;
        _3043 = ((_3225 * _960) * _3238) + _2887;
        _3045 = ((_3227 * _961) * _3238) + _2889;
    }
    else
    {
        _3035 = _2547;
        _3037 = _2549;
        _3039 = _2551;
        _3041 = _2885;
        _3043 = _2887;
        _3045 = _2889;
    }
    float _5046 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _5057 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _5068 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _3062 = ((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3035 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _974))) + ((_3041 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    float _3063 = ((isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_3037 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _974))) + ((_3043 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    float _3064 = ((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3039 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _974))) + ((_3045 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    uint _3065 = _261 + 6u;
    float _3073 = _896 / cbSceneParam._m0[86u].x;
    float _3074 = _897 / cbSceneParam._m0[86u].y;
    vec4 _3088 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3073, _3074, (log2((isnan(cbSceneParam._m0[77u].w) ? _819 : (isnan(_819) ? cbSceneParam._m0[77u].w : min(_819, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3090 = _3088.x;
    float _3091 = _3088.y;
    float _3092 = _3088.z;
    float _3093 = _3088.w;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    if (_819 > cbSceneParam._m0[78u].w)
    {
        float _3127 = isnan(_819) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _819 : min(cbSceneParam._m0[80u].w, _819));
        float _3128 = _3127 / _819;
        float _3139 = _3128 * _869;
        float _3140 = _870 * _3128;
        float _3141 = (-0.0) - _3140;
        float _3143 = _3128 * _871;
        float _3145 = (cbSceneParam._m0[77u].w * _3141) / _3127;
        float _3146 = _3145 + cbSceneParam._m0[79u].w;
        float _3147 = cbSceneParam._m0[79u].w - _3140;
        float _3153 = sqrt(((_3139 * _3139) + (_3140 * _3140)) + (_3143 * _3143));
        float _3156 = (1.0 - (cbSceneParam._m0[77u].w / _3127)) * _3153;
        float _3161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3340;
        if (abs((_3141 - _3145) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3340 = ((((_3146 > 0.0) ? exp2(_3161 * _3146) : (2.0 - exp2(_3163 * _3146))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3156;
        }
        else
        {
            float _3284 = 1.0 / cbSceneParam._m0[80u].x;
            float _3285 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : max(_3146, _3147));
            float _3286 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : min(_3146, _3147));
            float _3295 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : min(_3285, 0.0));
            float _3296 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : min(_3286, 0.0));
            _3340 = ((abs(_3153 / _3141) * cbSceneParam._m0[80u].y) * ((((_3295 - _3296) * 2.0) - ((exp2(_3161 * (isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0)))) - exp2(_3161 * (isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))))) * _3284)) - ((exp2(_3163 * _3295) - exp2(_3163 * _3296)) * _3284))) + (_3156 * cbSceneParam._m0[80u].z);
        }
        vec4 _3342 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3073, _3074, 1.0), 0.0);
        float _3351 = exp2((_3340 * (-1.44269502162933349609375)) * (1.0 - _3342.w));
        float _3352 = log2(_3351);
        float _3368 = log2(_3093);
        _3165 = (exp2(_3368 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3352 * cbSceneParam._m0[78u].x)) * _3342.x) / cbSceneParam._m0[78u].x)) + _3090;
        _3167 = (exp2(_3368 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3352 * cbSceneParam._m0[78u].y)) * _3342.y) / cbSceneParam._m0[78u].y)) + _3091;
        _3169 = (exp2(_3368 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3352 * cbSceneParam._m0[78u].z)) * _3342.z) / cbSceneParam._m0[78u].z)) + _3092;
        _3171 = _3351 * _3093;
    }
    else
    {
        _3165 = _3090;
        _3167 = _3091;
        _3169 = _3092;
        _3171 = _3093;
    }
    bool _3378;
    vec4 _3181;
    vec4 _3203;
    float _3205;
    float _3209;
    float _3210;
    float _3211;
    float _3212;
    bool _3222;
    for (;;)
    {
        _3181 = cbMatDynParam._m0[0u];
        float _3183 = roundEven(_3181.y);
        bool _3184 = _3183 == 3.0;
        float _3185 = log2(_3171);
        float _3192 = exp2(_3185 * cbSceneParam._m0[78u].x) * _3062;
        float _3193 = exp2(_3185 * cbSceneParam._m0[78u].y) * _3063;
        float _3194 = exp2(_3185 * cbSceneParam._m0[78u].z) * _3064;
        float _3201 = _885 + (-0.5);
        _3203 = cbMtdParam._m0[1u];
        _3205 = _3203.y * _3201;
        float _3208 = (_3183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3209 = _3208 * (_3184 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3165)));
        _3210 = _3208 * (_3184 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3167)));
        _3211 = _3208 * (_3184 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3169)));
        _3212 = _3201 * 0.999000012874603271484375;
        _3222 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3222)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3212) < 0.5)
            {
                _3378 = true;
                break;
            }
        }
        uint _3319 = _934 + uint(_3181.w);
        if ((cbInstanceData._m0[_3319].w < 1.0) && ((cbInstanceData._m0[_3319].w + _3212) < 0.5))
        {
            _3378 = true;
            break;
        }
        if ((_3205 + 1.0) < _3203.x)
        {
            _3378 = true;
            break;
        }
        _3378 = false;
        break;
    }
    float _3582;
    if (_3378)
    {
        discard_state = true;
        _3582 = 0.0;
    }
    else
    {
        _3582 = cbInstanceData._m0[_3065].w;
    }
    SV_Target.x = _3209;
    SV_Target.y = _3210;
    SV_Target.z = _3211;
    SV_Target.w = _3582;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3065].w;
    discard_exit();
}


