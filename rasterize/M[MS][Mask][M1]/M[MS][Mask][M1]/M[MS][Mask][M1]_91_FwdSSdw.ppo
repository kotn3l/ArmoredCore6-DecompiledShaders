#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1351;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _334.x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[23u].w) + _384) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3699 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _409 = (_402 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _410 = (_402 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _411 = (_402 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _450 = _448.x;
    float _460 = dot(vec4(_450, _448.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _474 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _334.y) * 2.0) - ((((_450 - _460) * cbMtdParam._m0[23u].w) + _460) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3710 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _482 = (_475 * ((_428.x * cbMtdParam._m0[13u].x) - _409)) + _409;
    float _483 = (_475 * ((_428.y * cbMtdParam._m0[13u].y) - _410)) + _410;
    float _484 = (_475 * ((_428.z * cbMtdParam._m0[13u].z) - _411)) + _411;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _542 = _540.x;
    float _543 = _540.y;
    float _544 = _540.z;
    float _551 = ((_523.x - _542) * _402) + _542;
    float _552 = ((_523.y - _543) * _402) + _543;
    float _553 = ((_523.z - _544) * _402) + _544;
    vec4 _565 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _578 = ((_565.z - _553) * _475) + _553;
    float _581 = ((((_565.x - _551) * _475) + _551) * 2.0) + (-1.0);
    float _583 = ((((_565.y - _552) * _475) + _552) * 2.0) + (-1.0);
    float _584 = dot(vec2(_581, _583), vec2(_581, _583));
    float _3721 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _589 = sqrt(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _615 = (((_603.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _581;
    float _616 = (((_603.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _583;
    float _619 = fma(_589, _234, fma(_616, _241, _615 * _227));
    float _622 = fma(_589, _235, fma(_616, _242, _615 * _228));
    float _625 = fma(_589, _236, fma(_616, _243, _615 * _229));
    float _629 = inversesqrt(dot(vec3(_619, _622, _625), vec3(_619, _622, _625)));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _668 = (cbMtdParam._m0[19u].x + dot(vec4(_629 * _619, _629 * _622, _629 * _625, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_658 - _659) * cbMtdParam._m0[24u].z) + _659) * cbMtdParam._m0[21u].z);
    float _3732 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _676 = (_669 * ((_503.x * cbMtdParam._m0[18u].x) - _482)) + _482;
    float _677 = (_669 * ((_503.y * cbMtdParam._m0[18u].y) - _483)) + _483;
    float _678 = (_669 * ((_503.z * cbMtdParam._m0[18u].z) - _484)) + _484;
    vec4 _704 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _706 = _704.x;
    float _724 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _706) * _402) + _706;
    float _741 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _724) * _475) + _724;
    float _745 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _741) * cbMtdParam._m0[19u].z) + _741;
    float _747 = _745 - (_745 * _669);
    float _751 = (cbMtdParam._m0[19u].w * (_603.z - _578)) + _578;
    vec4 _764 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _771 = (_764.x * 2.0) + (-1.0);
    float _772 = (_764.y * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _3743 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _781 = ((_764.z - _751) * _669) + _751;
    float _791 = ((sqrt(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) - _589) * _669) + _589;
    float _794 = (((_771 - _615) * _669) + _615) + (cbMtdParam._m0[21u].x * _615);
    float _795 = (((_772 - _616) * _669) + _616) + (cbMtdParam._m0[21u].x * _616);
    float _797 = cbMtdParam._m0[22u].x + _603.w;
    float _800 = fma(_791, _234, fma(_795, _241, _794 * _227));
    float _803 = fma(_791, _235, fma(_795, _242, _794 * _228));
    float _806 = fma(_791, _236, fma(_795, _243, _794 * _229));
    float _810 = inversesqrt(dot(vec3(_800, _803, _806), vec3(_800, _803, _806)));
    float _811 = _810 * _800;
    float _812 = _810 * _803;
    float _813 = _810 * _806;
    float _3754 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _814 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _3776 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3787 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3798 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3809 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _819 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _833 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _884 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _874);
    float _885 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _874);
    float _886 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _874);
    float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
    float _891 = _884 * _890;
    float _892 = _885 * _890;
    float _893 = _886 * _890;
    float _899 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _900 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _918 = fma(_813, cbSceneParam._m0[5u].z, fma(_812, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _811));
    float _921 = fma(_813, cbSceneParam._m0[6u].z, fma(_812, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _811));
    float _924 = fma(_813, cbSceneParam._m0[7u].z, fma(_812, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _811));
    uint _938 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _944 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) * cbInstanceData._m0[_938].x;
    float _945 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * cbInstanceData._m0[_938].y;
    float _946 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_938].z;
    float _3820 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _950 = 1.0 - _819;
    float _951 = _947 * _950;
    float _952 = _948 * _950;
    float _953 = _949 * _950;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _819;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _819;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _819;
    float _961 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    float _964 = _960 + 0.039999999105930328369140625;
    vec4 _973 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _899, cbSceneParam._m0[86u].y * _900));
    float _977 = ((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * TEXCOORD_5.w) * _973.x;
    float _978 = dot(vec3(_811, _812, _813), vec3(_891, _892, _893));
    float _981 = _978 * 2.0;
    float _985 = (_981 * _811) - _891;
    float _986 = (_981 * _812) - _892;
    float _987 = (_981 * _813) - _893;
    float _991 = abs(dot(vec3(_891, _892, _893), vec3(_811, _812, _813)));
    float _3853 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _993 = sqrt(_814);
    float _1006 = exp2((_993 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_993 * 3.0));
    float _1012 = (1.0 - _1006) * ((_993 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1013 = _1006 * _993;
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1350;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1075 = fma(_1049, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041));
        float _1079 = fma(_1049, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041));
        float _1083 = fma(_1049, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041));
        float _1108 = _1041 + _811;
        float _1109 = _1045 + _812;
        float _1110 = _1049 + _813;
        float _1120 = fma(_1110, cbModelParam._m0[26u].z, fma(_1109, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108)) - _1075;
        float _1121 = fma(_1110, cbModelParam._m0[27u].z, fma(_1109, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108)) - _1079;
        float _1122 = fma(_1110, cbModelParam._m0[28u].z, fma(_1109, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108)) - _1083;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1075 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1079 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[34u].z) + ((((((_1083 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1178 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1144.x + (-0.5));
        float _1180 = _1178 * (_1144.y + (-0.5));
        float _1181 = _1178 * (_1144.z + (-0.5));
        float _1188 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1151.x + (-0.5));
        float _1190 = _1188 * (_1151.y + (-0.5));
        float _1191 = _1188 * (_1151.z + (-0.5));
        float _1198 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1158.x + (-0.5));
        float _1200 = _1198 * (_1158.y + (-0.5));
        float _1201 = _1198 * (_1158.z + (-0.5));
        float _1208 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1165.x + (-0.5));
        float _1210 = _1208 * (_1165.y + (-0.5));
        float _1211 = _1208 * (_1165.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1232 = (dot(vec3(_811, _812, _813), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1242 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3901 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1244 + 1.0))) + _1249) * _1212;
        float _1259 = _1180 * 0.5;
        float _1260 = _1190 * 0.5;
        float _1261 = _1200 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_811, _812, _813), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3934 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1286 + 1.0))) + _1291) * _1213;
        float _1301 = _1181 * 0.5;
        float _1302 = _1191 * 0.5;
        float _1303 = _1201 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_811, _812, _813), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3967 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1328 + 1.0))) + _1333) * _1214;
        _1350 = _1181;
        _1352 = _1180;
        _1353 = _1179;
        _1354 = _1191;
        _1355 = _1190;
        _1356 = _1189;
        _1357 = _1201;
        _1358 = _1200;
        _1359 = _1199;
        _1360 = _1214;
        _1361 = _1213;
        _1362 = _1212;
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1351;
        _1352 = _1351;
        _1353 = _1351;
        _1354 = _1351;
        _1355 = _1351;
        _1356 = _1351;
        _1357 = _1351;
        _1358 = _1351;
        _1359 = _1351;
        _1360 = _1351;
        _1361 = _1351;
        _1362 = _1351;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1389 = fma(_1049, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041));
        float _1393 = fma(_1049, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041));
        float _1397 = fma(_1049, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041));
        float _1420 = _1041 + _811;
        float _1421 = _1045 + _812;
        float _1422 = _1049 + _813;
        float _1432 = fma(_1422, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1420)) - _1389;
        float _1433 = fma(_1422, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1420)) - _1393;
        float _1434 = fma(_1422, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1420)) - _1397;
        float _1438 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
        float _1451 = ((_1438 * _1432) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1389 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1438 * _1433) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1393 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1438 * _1434) / cbModelParam._m0[35u].z) + ((((((_1397 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1488 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1455.x + (-0.5));
        float _1490 = _1488 * (_1455.y + (-0.5));
        float _1491 = _1488 * (_1455.z + (-0.5));
        float _1498 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1462.x + (-0.5));
        float _1500 = _1498 * (_1462.y + (-0.5));
        float _1501 = _1498 * (_1462.z + (-0.5));
        float _1508 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1469.x + (-0.5));
        float _1510 = _1508 * (_1469.y + (-0.5));
        float _1511 = _1508 * (_1469.z + (-0.5));
        float _1518 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1476.x + (-0.5));
        float _1520 = _1518 * (_1476.y + (-0.5));
        float _1521 = _1518 * (_1476.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_811, _812, _813), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4030 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1552 + 1.0))) + _1557) * _1522;
        float _1567 = _1490 * 0.5;
        float _1568 = _1500 * 0.5;
        float _1569 = _1510 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_811, _812, _813), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4063 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1594 + 1.0))) + _1599) * _1523;
        float _1609 = _1491 * 0.5;
        float _1610 = _1501 * 0.5;
        float _1611 = _1511 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_811, _812, _813), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4096 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1636 + 1.0))) + _1641) * _1524;
        _1658 = _1491;
        _1659 = _1490;
        _1660 = _1489;
        _1661 = _1501;
        _1662 = _1500;
        _1663 = _1499;
        _1664 = _1511;
        _1665 = _1510;
        _1666 = _1509;
        _1667 = _1524;
        _1668 = _1523;
        _1669 = _1522;
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1351;
        _1659 = _1351;
        _1660 = _1351;
        _1661 = _1351;
        _1662 = _1351;
        _1663 = _1351;
        _1664 = _1351;
        _1665 = _1351;
        _1666 = _1351;
        _1667 = _1351;
        _1668 = _1351;
        _1669 = _1351;
        _1670 = 0.0;
        _1671 = 0.0;
        _1672 = 0.0;
    }
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1363)) + _1363;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1364)) + _1364;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1365)) + _1365;
    float _1705 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1682));
    float _1726 = _985 * 0.5;
    float _1727 = _986 * 0.5;
    float _1728 = _987 * 0.5;
    float _1729 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1732 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1735 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1769;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1742 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1350, _1354, _1357, _1360));
        float _1746 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1750 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1757 = dot(vec4(cbModelParam._m0[39u]), vec4(_1726, _1727, _1728, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1780;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1771 = dot(vec4(cbModelParam._m0[40u]), vec4(_1726, _1727, _1728, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1784 = (_1780 * cbModelParam._m0[1u].x) + (_1769 * (1.0 - cbModelParam._m0[1u].x));
    float _1794 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _814);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1794 : min(cbModelParam._m0[25u].z, _1794));
    float _1875;
    float _1877;
    float _1879;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1842 = fma(_1049, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041)) + cbModelParam._m0[13u].w;
        float _1846 = fma(_1049, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041)) + cbModelParam._m0[14u].w;
        float _1850 = fma(_1049, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041)) + cbModelParam._m0[15u].w;
        float _1853 = fma(_987, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _985));
        float _1856 = fma(_987, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _985));
        float _1859 = fma(_987, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _985));
        float _1887;
        if (_1853 > 0.0)
        {
            _1887 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1887 = frontier_phi_14_12_ladder;
        }
        float _2110;
        if (_1856 > 0.0)
        {
            _2110 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2110 = frontier_phi_23_19_ladder;
        }
        float _2367;
        if (_1859 > 0.0)
        {
            _2367 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2367 = frontier_phi_35_30_ladder;
        }
        float _2369 = isnan(_2110) ? _1887 : (isnan(_1887) ? _2110 : min(_1887, _2110));
        float _2370 = isnan(_2367) ? _2369 : (isnan(_2369) ? _2367 : min(_2369, _2367));
        float _2374 = (_2370 * _1853) + _1842;
        float _2375 = (_2370 * _1856) + _1846;
        float _2376 = (_2370 * _1859) + _1850;
        float _2377 = _2370 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2377;
        float _2381 = _2377 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 > _2381) || ((_2375 < _2379) || ((_2374 < _2379) || (_2374 > _2381))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2376, cbModelParam._m0[9u].z, fma(_2375, cbModelParam._m0[9u].y, _2374 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2376, cbModelParam._m0[10u].z, fma(_2375, cbModelParam._m0[10u].y, _2374 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2376, cbModelParam._m0[11u].z, fma(_2375, cbModelParam._m0[11u].y, _2374 * cbModelParam._m0[11u].x))), _1795);
            frontier_phi_13_35_ladder = _2504.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2504.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2504.x * cbModelParam._m0[1u].y;
        }
        _1875 = frontier_phi_13_35_ladder_2;
        _1877 = frontier_phi_13_35_ladder_1;
        _1879 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1863 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_985, _986, _987), _1795);
        _1875 = _1863.x * cbModelParam._m0[1u].y;
        _1877 = _1863.y * cbModelParam._m0[1u].y;
        _1879 = _1863.z * cbModelParam._m0[1u].y;
    }
    float _1883 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _814);
    float _1884 = isnan(_1883) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1883 : min(cbModelParam._m0[25u].w, _1883));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1937 = fma(_1049, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041)) + cbModelParam._m0[21u].w;
        float _1941 = fma(_1049, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041)) + cbModelParam._m0[22u].w;
        float _1945 = fma(_1049, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041)) + cbModelParam._m0[23u].w;
        float _1948 = fma(_987, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _985));
        float _1951 = fma(_987, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _985));
        float _1954 = fma(_987, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _985));
        float _2115;
        if (_1948 > 0.0)
        {
            _2115 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2115 = frontier_phi_25_21_ladder;
        }
        float _2394;
        if (_1951 > 0.0)
        {
            _2394 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2394 = frontier_phi_37_32_ladder;
        }
        float _2607;
        if (_1954 > 0.0)
        {
            _2607 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2607 = frontier_phi_46_43_ladder;
        }
        float _2609 = isnan(_2394) ? _2115 : (isnan(_2115) ? _2394 : min(_2115, _2394));
        float _2610 = isnan(_2607) ? _2609 : (isnan(_2609) ? _2607 : min(_2609, _2607));
        float _2614 = (_2610 * _1948) + _1937;
        float _2615 = (_2610 * _1951) + _1941;
        float _2616 = (_2610 * _1954) + _1945;
        float _2617 = _2610 * 9.9999997473787516355514526367188e-05;
        float _2618 = (-1.0) - _2617;
        float _2620 = _2617 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2616 > _2620) || ((_2616 < _2618) || ((_2615 > _2620) || ((_2615 < _2618) || ((_2614 < _2618) || (_2614 > _2620))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2616, cbModelParam._m0[17u].z, fma(_2615, cbModelParam._m0[17u].y, _2614 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2616, cbModelParam._m0[18u].z, fma(_2615, cbModelParam._m0[18u].y, _2614 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2616, cbModelParam._m0[19u].z, fma(_2615, cbModelParam._m0[19u].y, _2614 * cbModelParam._m0[19u].x))), _1884);
            frontier_phi_22_46_ladder = _2815.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2815.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2815.x * cbModelParam._m0[1u].z;
        }
        _1973 = frontier_phi_22_46_ladder_2;
        _1975 = frontier_phi_22_46_ladder_1;
        _1977 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_985, _986, _987), _1884);
        _1973 = _1957.x * cbModelParam._m0[1u].z;
        _1975 = _1957.y * cbModelParam._m0[1u].z;
        _1977 = _1957.z * cbModelParam._m0[1u].z;
    }
    float _1990 = (((_1012 * _961) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_1973 - _1875)) + _1875);
    float _1992 = (((_1012 * _963) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_1975 - _1877)) + _1877);
    float _1994 = (((_1012 * _964) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_1977 - _1879)) + _1879);
    float _1997 = fma(_1994, cbSceneParam._m0[89u].z, fma(_1992, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _2000 = fma(_1994, cbSceneParam._m0[90u].z, fma(_1992, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2003 = fma(_1994, cbSceneParam._m0[91u].z, fma(_1992, cbSceneParam._m0[91u].y, _1990 * cbSceneParam._m0[91u].x));
    vec4 _2011 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_899, _900));
    float _2013 = _2011.w;
    float _2025 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2013);
    float _2026 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2013);
    float _2027 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2013);
    uvec4 _2031 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2033 = _2031.x * 14u;
    uint _2034 = _2033 + 13u;
    float _2041 = _977 + (-1.0);
    float _2046 = (cbLight._m0[_2034].x * _2041) + 1.0;
    float _2047 = (cbLight._m0[_2034].y * _2041) + 1.0;
    float _2048 = (cbLight._m0[_2034].z * _2041) + 1.0;
    float _2049 = (cbLight._m0[_2034].w * _2041) + 1.0;
    uint _2050 = _2033 + 5u;
    float _2056 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2060 = _2033 + 4u;
    float _2069 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
    uint _2073 = _2033 | 1u;
    float _2084 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_811, _812, _813));
    float _2087 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_811, _812, _813));
    float _4232 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _4243 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2092 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _2094 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _2101 = ((cbLight._m0[_2050].x * _2056) * _2094) + (((cbLight._m0[_2060].x * _2025) * _2069) * _2092);
    float _2102 = ((_2056 * cbLight._m0[_2050].y) * _2094) + (((cbLight._m0[_2060].y * _2026) * _2069) * _2092);
    float _2103 = ((_2056 * cbLight._m0[_2050].z) * _2094) + (((cbLight._m0[_2060].z * _2027) * _2069) * _2092);
    uvec4 _2107 = floatBitsToUint(cbLight._m0[_2033 + 12u]);
    bool _2109 = _2107.x == 0u;
    float _2120;
    float _2122;
    float _2124;
    if (_2109)
    {
        _2120 = _2101;
        _2122 = _2102;
        _2124 = _2103;
    }
    else
    {
        uint _2128 = _2033 + 6u;
        float _2144 = (dot(vec3(cbLight._m0[_2033 + 2u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4254 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2147 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
        _2120 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _2101;
        _2122 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _2102;
        _2124 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _2103;
    }
    bool _2127 = _2107.y == 0u;
    float _2165;
    float _2167;
    float _2169;
    if (_2127)
    {
        _2165 = _2120;
        _2167 = _2122;
        _2169 = _2124;
    }
    else
    {
        uint _2338 = _2033 + 7u;
        float _2354 = (dot(vec3(cbLight._m0[_2033 + 3u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2355 = _2354 * _2354;
        float _4270 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2356 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2357 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2165 = (((cbLight._m0[_2338].x * 0.3183098733425140380859375) * _2356) * _2357) + _2120;
        _2167 = (((cbLight._m0[_2338].y * 0.3183098733425140380859375) * _2356) * _2357) + _2122;
        _2169 = (((cbLight._m0[_2338].z * 0.3183098733425140380859375) * _2356) * _2357) + _2124;
    }
    uint _2172 = _2033 + 8u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _814) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_2033].x + _891;
    float _2188 = cbLight._m0[_2033].y + _892;
    float _2189 = cbLight._m0[_2033].z + _893;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2033].xyz));
    float _4286 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _2201 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2202 = dot(vec3(_811, _812, _813), vec3(_2194, _2195, _2196));
    float _4308 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2206 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2194, _2195, _2196));
    float _4319 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2210 = _2186 * _2186;
    float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
    float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0);
    float _2223 = 0.959999978542327880859375 - _958;
    float _2225 = 0.959999978542327880859375 - _959;
    float _2226 = 0.959999978542327880859375 - _960;
    float _2233 = 1.0 - _2186;
    float _2244 = (0.5 / (((_2201 * ((_2200 * _2233) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2233) + _2186) * _2200))) * _2200;
    float _4330 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
    uint _2260 = _2033 + 9u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _814) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_2073].x + _891;
    float _2274 = cbLight._m0[_2073].y + _892;
    float _2275 = cbLight._m0[_2073].z + _893;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2073].xyz));
    float _4341 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2287 = dot(vec3(_811, _812, _813), vec3(_2280, _2281, _2282));
    float _4352 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2291 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2280, _2281, _2282));
    float _4363 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2295 = _2272 * _2272;
    float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
    float _2306 = exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0);
    float _2313 = 1.0 - _2272;
    float _2323 = (0.5 / (((_2201 * ((_2286 * _2313) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2313) + _2272) * _2286))) * _2286;
    float _4374 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2325 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
    float _2335 = (((((_2306 * _2223) + _961) * cbLight._m0[_2260].x) * _2325) * _2056) + ((((cbLight._m0[_2172].x * _2025) * ((_2222 * _2223) + _961)) * _2246) * _2069);
    float _2336 = (((((_2306 * _2225) + _963) * cbLight._m0[_2260].y) * _2325) * _2056) + ((((cbLight._m0[_2172].y * _2026) * ((_2222 * _2225) + _963)) * _2246) * _2069);
    float _2337 = (((((_2306 * _2226) + _964) * cbLight._m0[_2260].z) * _2325) * _2056) + ((((cbLight._m0[_2172].z * _2027) * ((_2222 * _2226) + _964)) * _2246) * _2069);
    float _2399;
    float _2401;
    float _2403;
    if (_2109)
    {
        _2399 = _2335;
        _2401 = _2336;
        _2403 = _2337;
    }
    else
    {
        uint _2405 = _2033 + 2u;
        uint _2409 = _2033 + 10u;
        float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _814) * 0.949999988079071044921875);
        float _2424 = _2423 * _2423;
        float _2425 = cbLight._m0[_2405].x + _891;
        float _2426 = cbLight._m0[_2405].y + _892;
        float _2427 = cbLight._m0[_2405].z + _893;
        float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
        float _2432 = _2431 * _2425;
        float _2433 = _2431 * _2426;
        float _2434 = _2431 * _2427;
        float _2435 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2405].xyz));
        float _4385 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2439 = dot(vec3(_811, _812, _813), vec3(_2432, _2433, _2434));
        float _4396 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2443 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2432, _2433, _2434));
        float _4407 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2447 = _2424 * _2424;
        float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
        float _2458 = exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0);
        float _2465 = 1.0 - _2424;
        float _2475 = (0.5 / (((_2201 * ((_2438 * _2465) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2465) + _2424) * _2438))) * _2438;
        float _4418 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
        _2399 = (((((_2458 * _2223) + _961) * cbLight._m0[_2409].x) * _2477) * _2478) + _2335;
        _2401 = (((((_2458 * _2225) + _963) * cbLight._m0[_2409].y) * _2477) * _2478) + _2336;
        _2403 = (((((_2458 * _2226) + _964) * cbLight._m0[_2409].z) * _2477) * _2478) + _2337;
    }
    float _2513;
    float _2515;
    float _2517;
    if (_2127)
    {
        _2513 = _2399;
        _2515 = _2401;
        _2517 = _2403;
    }
    else
    {
        uint _2524 = _2033 + 3u;
        uint _2528 = _2033 + 11u;
        float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _814) * 0.949999988079071044921875);
        float _2543 = _2542 * _2542;
        float _2544 = cbLight._m0[_2524].x + _891;
        float _2545 = cbLight._m0[_2524].y + _892;
        float _2546 = cbLight._m0[_2524].z + _893;
        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
        float _2551 = _2550 * _2544;
        float _2552 = _2550 * _2545;
        float _2553 = _2550 * _2546;
        float _2554 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2524].xyz));
        float _4434 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2558 = dot(vec3(_811, _812, _813), vec3(_2551, _2552, _2553));
        float _4445 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2562 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2551, _2552, _2553));
        float _4456 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2566 = _2543 * _2543;
        float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
        float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
        float _2584 = 1.0 - _2543;
        float _2594 = (0.5 / (((_2201 * ((_2557 * _2584) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2201 * _2584) + _2543) * _2557))) * _2557;
        float _4467 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2596 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
        float _2597 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2513 = (((((_2577 * _2223) + _961) * cbLight._m0[_2528].x) * _2596) * _2597) + _2399;
        _2515 = (((((_2577 * _2225) + _963) * cbLight._m0[_2528].y) * _2596) * _2597) + _2401;
        _2517 = (((((_2577 * _2226) + _964) * cbLight._m0[_2528].z) * _2596) * _2597) + _2403;
    }
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    if (_2031.y == 0u)
    {
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2673 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2672;
        float _2674 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2672;
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2672;
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.x;
        uint _2699 = uint((float(_2687.y) * floor(float(uint(cbSceneParam._m0[85u].y * _900) / _2688))) + floor(float(uint(cbSceneParam._m0[85u].x * _899) / _2688)));
        float _2709 = (log2(_2675 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2710 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        uint _2713 = uint(isnan(14.0) ? _2710 : (isnan(_2710) ? 14.0 : min(_2710, 14.0)));
        uvec4 _2718 = texelFetch(g_lightClusterGridBuffer, int(((_2713 << 2u) + (_2699 << 6u)) >> 2u));
        uint _2719 = _2718.x;
        uint _2720 = _2687.z;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((((1u << ((_2720 >> 4u) & 15u)) + 4294967295u) & _2719) == 0u) || ((_2720 & 240u) == 0u))
        {
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
        }
        else
        {
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            uint _2971 = 0u;
            uint _2980;
            bool _2981;
            for (;;)
            {
                _2980 = texelFetch(g_lightClassification, int((((_2713 << 5u) + (_2699 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                _2981 = _2980 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2981)
                {
                    frontier_phi_61_pred = _2965;
                    frontier_phi_61_pred_1 = _2970;
                    frontier_phi_61_pred_2 = _2969;
                    frontier_phi_61_pred_3 = _2968;
                    frontier_phi_61_pred_4 = _2967;
                    frontier_phi_61_pred_5 = _2966;
                }
                else
                {
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    uint _3095;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2968;
                    _3093 = _2969;
                    _3094 = _2970;
                    _3095 = _2980;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    for (;;)
                    {
                        uint _3099 = uint(findLSB(_3095)) + (_2971 << 5u);
                        uint _3096 = (_3095 + 4294967295u) & _3095;
                        uint _3101 = _3099 * 48u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3121 = (_3099 * 48u) + 4u;
                        vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 3u)).x));
                        uint _3140 = (_3099 * 48u) + 8u;
                        vec3 _3151 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x));
                        float _3155 = _3115.x - _2673;
                        float _3156 = _3115.y - _2674;
                        float _3157 = _3115.z - _2675;
                        float _3158 = dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157));
                        float _3161 = inversesqrt(_3158);
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3165 = dot(vec3(_918, _921, _924), vec3(_3162, _3163, _3164));
                        float _3170 = 1.0 - (_3158 * _3115.w);
                        float _4493 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3172 = sqrt(_3158) * _3134.w;
                        float _3175 = 1.39999997615814208984375 / (_3172 + 1.39999997615814208984375);
                        float _3176 = _3175 * _3175;
                        float _3179 = ((1.0 - _3176) * _3165) + _3176;
                        float _3182 = _3172 * _3172;
                        float _3186 = ((isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))) * _3171) / ((_3182 * 0.699999988079071044921875) + 1.0);
                        float _3190 = (-0.0) - _2673;
                        float _3191 = (-0.0) - _2674;
                        float _3192 = (-0.0) - _2675;
                        float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3207 = exp2(log2(1.0 / ((_3182 * 3.5) + 5.0)) * 0.25);
                        float _3208 = 1.0 - _993;
                        float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                        float _3216 = _3215 * _3215;
                        float _3217 = _3216 * _3216;
                        float _3218 = _3197 + _3162;
                        float _3219 = _3198 + _3163;
                        float _3220 = _3199 + _3164;
                        float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                        float _3228 = dot(vec3(_918, _921, _924), vec3(_3197, _3198, _3199));
                        float _4509 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3232 = dot(vec3(_918, _921, _924), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                        float _4520 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                        float _3240 = _3175 * _3216;
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3165) + _3241;
                        float _4531 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3246 = 1.0 - _3216;
                        float _3256 = (0.5 / (((_3245 * ((_3231 * _3246) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3245 * _3246) + _3216) * _3231))) * _3245;
                        float _4542 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3267 = (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) / ((_3239 * _3239) * ((_3182 * 2.1991131305694580078125) + 3.141590118408203125))) * _3171;
                        _3024 = (_3186 * _3134.x) + _3092;
                        _3025 = (_3186 * _3134.y) + _3093;
                        _3026 = (_3186 * _3134.z) + _3094;
                        _3021 = (_3267 * _3151.x) + _3089;
                        _3022 = (_3267 * _3151.y) + _3090;
                        _3023 = (_3267 * _3151.z) + _3091;
                        if (_3096 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3024;
                            _3093 = _3025;
                            _3094 = _3026;
                            _3095 = _3096;
                        }
                    }
                    frontier_phi_61_pred = _3021;
                    frontier_phi_61_pred_1 = _3026;
                    frontier_phi_61_pred_2 = _3025;
                    frontier_phi_61_pred_3 = _3024;
                    frontier_phi_61_pred_4 = _3023;
                    frontier_phi_61_pred_5 = _3022;
                }
                _2821 = frontier_phi_61_pred;
                _2831 = frontier_phi_61_pred_1;
                _2829 = frontier_phi_61_pred_2;
                _2827 = frontier_phi_61_pred_3;
                _2825 = frontier_phi_61_pred_4;
                _2823 = frontier_phi_61_pred_5;
                uint _2972 = _2971 + 1u;
                if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2965 = _2821;
                    _2966 = _2823;
                    _2967 = _2825;
                    _2968 = _2827;
                    _2969 = _2829;
                    _2970 = _2831;
                    _2971 = _2972;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
        }
        uvec4 _2834 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2835 = _2834.z;
        uint _2837 = (_2835 >> 8u) & 15u;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        if (((4294967295u << _2837) & _2719) == 0u)
        {
            _2933 = _2820;
            _2935 = _2822;
            _2937 = _2824;
            _2939 = _2826;
            _2941 = _2828;
            _2943 = _2830;
        }
        else
        {
            float _2958 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
            float _2959 = _2958 * _2673;
            float _2960 = _2958 * _2674;
            float _2961 = _2958 * _2675;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2837 < ((_2835 >> 12u) & 15u))
            {
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _3072 = _2820;
                float _3073 = _2822;
                float _3074 = _2824;
                float _3075 = _2826;
                float _3076 = _2828;
                float _3077 = _2830;
                uint _3078 = _2837;
                uint _3087;
                bool _3088;
                for (;;)
                {
                    _3087 = texelFetch(g_lightClassification, int((((_2713 << 5u) + (_2699 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                    _3088 = _3087 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3088)
                    {
                        frontier_phi_67_pred = _3075;
                        frontier_phi_67_pred_1 = _3076;
                        frontier_phi_67_pred_2 = _3077;
                        frontier_phi_67_pred_3 = _3074;
                        frontier_phi_67_pred_4 = _3073;
                        frontier_phi_67_pred_5 = _3072;
                    }
                    else
                    {
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3285 = _3072;
                        float _3286 = _3073;
                        float _3287 = _3074;
                        float _3288 = _3075;
                        float _3289 = _3076;
                        float _3290 = _3077;
                        uint _3291 = _3087;
                        uint _3292;
                        vec4 _3317;
                        float _3318;
                        vec4 _3333;
                        vec3 _3345;
                        vec4 _3360;
                        vec4 _3375;
                        float _3421;
                        bool _3422;
                        for (;;)
                        {
                            uint _3302 = ((_3078 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3291));
                            _3292 = (_3291 + 4294967295u) & _3291;
                            uint _3304 = _3302 * 40u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3318 = _3317.w;
                            uint _3320 = (_3302 * 40u) + 4u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3302 * 40u) + 8u;
                            _3345 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x));
                            uint _3347 = (_3302 * 40u) + 16u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3302 * 40u) + 20u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3302 * 40u) + 24u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3396 = (_3302 * 40u) + 28u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3421 = fma(_2675, _3409.z, fma(_2674, _3409.y, _3409.x * _2673)) + _3409.w;
                            _3422 = !((fma(_2675, _3390.z, fma(_2674, _3390.y, _3390.x * _2673)) + _3390.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3422)
                            {
                                float _3449 = _3317.x - _2673;
                                float _3450 = _3317.y - _2674;
                                float _3451 = _3317.z - _2675;
                                float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                                float _3455 = inversesqrt(_3452);
                                float _3456 = _3455 * _3449;
                                float _3457 = _3455 * _3450;
                                float _3458 = _3455 * _3451;
                                float _3462 = 1.0 - (_3452 / (_3318 * _3318));
                                float _4553 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3467 = sqrt(_3452) * _3333.w;
                                float _3469 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                                float _3470 = _3469 * _3469;
                                float _3473 = ((1.0 - _3470) * dot(vec3(_3456, _3457, _3458), vec3(_918, _921, _924))) + _3470;
                                float _3476 = _3467 * _3467;
                                float _3480 = (fma(_2675, _3360.z, fma(_2674, _3360.y, _3360.x * _2673)) + _3360.w) / _3421;
                                float _3481 = (fma(_2675, _3375.z, fma(_2674, _3375.y, _3375.x * _2673)) + _3375.w) / _3421;
                                float _3485 = 1.0 - dot(vec2(_3480, _3481), vec2(_3480, _3481));
                                float _4569 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3487 = _3486 * (((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3463) / ((_3476 * 0.699999988079071044921875) + 1.0));
                                float _3499 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                                float _3500 = 1.0 - _993;
                                float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                                float _3508 = _3507 * _3507;
                                float _3509 = _3508 * _3508;
                                float _3510 = _3456 - _2959;
                                float _3511 = _3457 - _2960;
                                float _3512 = _3458 - _2961;
                                float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                                float _3520 = dot(vec3(_918, _921, _924), vec3((-0.0) - _2959, (-0.0) - _2960, (-0.0) - _2961));
                                float _4580 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3524 = dot(vec3(_918, _921, _924), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                                float _4591 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                                float _3532 = _3469 * _3508;
                                float _3533 = _3532 * _3532;
                                float _3539 = ((1.0 - _3533) * dot(vec3(_918, _921, _924), vec3(_3456, _3457, _3458))) + _3533;
                                float _4602 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3541 = 1.0 - _3508;
                                float _3551 = (0.5 / (((_3540 * ((_3523 * _3541) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3508) * _3523))) * _3540;
                                float _4613 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3561 = (_3486 * _3463) * (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3531 * _3531) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3561 * _3345.x;
                                frontier_phi_73_pred_1 = _3561 * _3345.y;
                                frontier_phi_73_pred_2 = _3487 * _3333.z;
                                frontier_phi_73_pred_3 = _3487 * _3333.y;
                                frontier_phi_73_pred_4 = _3487 * _3333.x;
                                frontier_phi_73_pred_5 = _3561 * _3345.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3565 = frontier_phi_73_pred;
                            _3566 = frontier_phi_73_pred_1;
                            _3570 = frontier_phi_73_pred_2;
                            _3569 = frontier_phi_73_pred_3;
                            _3568 = frontier_phi_73_pred_4;
                            _3567 = frontier_phi_73_pred_5;
                            _3275 = _3568 + _3288;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            if (_3292 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3292;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3275;
                        frontier_phi_67_pred_1 = _3276;
                        frontier_phi_67_pred_2 = _3277;
                        frontier_phi_67_pred_3 = _3274;
                        frontier_phi_67_pred_4 = _3273;
                        frontier_phi_67_pred_5 = _3272;
                    }
                    _2940 = frontier_phi_67_pred;
                    _2942 = frontier_phi_67_pred_1;
                    _2944 = frontier_phi_67_pred_2;
                    _2938 = frontier_phi_67_pred_3;
                    _2936 = frontier_phi_67_pred_4;
                    _2934 = frontier_phi_67_pred_5;
                    uint _3079 = _3078 + 1u;
                    if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3072 = _2934;
                        _3073 = _2936;
                        _3074 = _2938;
                        _3075 = _2940;
                        _3076 = _2942;
                        _3077 = _2944;
                        _3078 = _3079;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2942;
                frontier_phi_55_56_ladder_1 = _2944;
                frontier_phi_55_56_ladder_2 = _2940;
                frontier_phi_55_56_ladder_3 = _2938;
                frontier_phi_55_56_ladder_4 = _2936;
                frontier_phi_55_56_ladder_5 = _2934;
            }
            else
            {
                frontier_phi_55_56_ladder = _2828;
                frontier_phi_55_56_ladder_1 = _2830;
                frontier_phi_55_56_ladder_2 = _2826;
                frontier_phi_55_56_ladder_3 = _2824;
                frontier_phi_55_56_ladder_4 = _2822;
                frontier_phi_55_56_ladder_5 = _2820;
            }
            _2933 = frontier_phi_55_56_ladder_5;
            _2935 = frontier_phi_55_56_ladder_4;
            _2937 = frontier_phi_55_56_ladder_3;
            _2939 = frontier_phi_55_56_ladder_2;
            _2941 = frontier_phi_55_56_ladder;
            _2943 = frontier_phi_55_56_ladder_1;
        }
        float _2948 = isnan(1.0) ? _977 : (isnan(_977) ? 1.0 : min(_977, 1.0));
        _2732 = (_2948 * _2939) + _2165;
        _2734 = (_2948 * _2941) + _2167;
        _2736 = (_2948 * _2943) + _2169;
        _2738 = ((_2933 * _961) * _2948) + _2513;
        _2740 = ((_2935 * _963) * _2948) + _2515;
        _2742 = ((_2937 * _964) * _2948) + _2517;
    }
    else
    {
        _2732 = _2165;
        _2734 = _2167;
        _2736 = _2169;
        _2738 = _2513;
        _2740 = _2515;
        _2742 = _2517;
    }
    float _4629 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _4640 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _4651 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    uint _2762 = _246 + 6u;
    float _2770 = _899 / cbSceneParam._m0[86u].x;
    float _2771 = _900 / cbSceneParam._m0[86u].y;
    vec4 _2785 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, (log2((isnan(cbSceneParam._m0[77u].w) ? _833 : (isnan(_833) ? cbSceneParam._m0[77u].w : min(_833, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2787 = _2785.x;
    float _2788 = _2785.y;
    float _2789 = _2785.z;
    float _2790 = _2785.w;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_833 > cbSceneParam._m0[78u].w)
    {
        float _2845 = isnan(_833) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _833 : min(cbSceneParam._m0[80u].w, _833));
        float _2846 = _2845 / _833;
        float _2857 = _2846 * _884;
        float _2858 = _885 * _2846;
        float _2859 = (-0.0) - _2858;
        float _2861 = _2846 * _886;
        float _2863 = (cbSceneParam._m0[77u].w * _2859) / _2845;
        float _2864 = _2863 + cbSceneParam._m0[79u].w;
        float _2865 = cbSceneParam._m0[79u].w - _2858;
        float _2871 = sqrt(((_2857 * _2857) + (_2858 * _2858)) + (_2861 * _2861));
        float _2874 = (1.0 - (cbSceneParam._m0[77u].w / _2845)) * _2871;
        float _2879 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2881 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3034;
        if (abs((_2859 - _2863) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3034 = ((((_2864 > 0.0) ? exp2(_2879 * _2864) : (2.0 - exp2(_2881 * _2864))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2874;
        }
        else
        {
            float _2994 = 1.0 / cbSceneParam._m0[80u].x;
            float _2995 = isnan(_2865) ? _2864 : (isnan(_2864) ? _2865 : max(_2864, _2865));
            float _2996 = isnan(_2865) ? _2864 : (isnan(_2864) ? _2865 : min(_2864, _2865));
            float _3005 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : min(_2995, 0.0));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            _3034 = ((abs(_2871 / _2859) * cbSceneParam._m0[80u].y) * ((((_3005 - _3006) * 2.0) - ((exp2(_2879 * (isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0)))) - exp2(_2879 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))))) * _2994)) - ((exp2(_2881 * _3005) - exp2(_2881 * _3006)) * _2994))) + (_2874 * cbSceneParam._m0[80u].z);
        }
        vec4 _3036 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2770, _2771, 1.0), 0.0);
        float _3045 = exp2((_3034 * (-1.44269502162933349609375)) * (1.0 - _3036.w));
        float _3046 = log2(_3045);
        float _3062 = log2(_2790);
        _2883 = (exp2(_3062 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].x)) * _3036.x) / cbSceneParam._m0[78u].x)) + _2787;
        _2885 = (exp2(_3062 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].y)) * _3036.y) / cbSceneParam._m0[78u].y)) + _2788;
        _2887 = (exp2(_3062 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3046 * cbSceneParam._m0[78u].z)) * _3036.z) / cbSceneParam._m0[78u].z)) + _2789;
        _2889 = _3045 * _2790;
    }
    else
    {
        _2883 = _2787;
        _2885 = _2788;
        _2887 = _2789;
        _2889 = _2790;
    }
    float _2901 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2902 = _2901 == 3.0;
    float _2903 = log2(_2889);
    float _2910 = exp2(_2903 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2732 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _977))) + ((_2738 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _2911 = exp2(_2903 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2734 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _977))) + ((_2740 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _2912 = exp2(_2903 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2736 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _977))) + ((_2742 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1784)) * cbPerFrame._m0[3u].x));
    float _2921 = (_2901 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2921 * (_2902 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.y = _2921 * (_2902 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2885)));
    SV_Target.z = _2921 * (_2902 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2887)));
    SV_Target.w = cbInstanceData._m0[_2762].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2762].w;
}


