#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1467;
float _3848;
float _3849;
float _3850;
float _3851;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3860 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3871 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3882 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _435 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _452 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _389.x) * 2.0) - ((((_423 - _435) * cbMtdParam._m0[23u].w) + _435) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3893 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _460 = (_453 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _461 = (_453 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _462 = (_453 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _501 = _499.x;
    float _511 = dot(vec4(_501, _499.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _525 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _389.y) * 2.0) - ((((_501 - _511) * cbMtdParam._m0[23u].w) + _511) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3904 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _533 = (_526 * ((_479.x * cbMtdParam._m0[13u].x) - _460)) + _460;
    float _534 = (_526 * ((_479.y * cbMtdParam._m0[13u].y) - _461)) + _461;
    float _535 = (_526 * ((_479.z * cbMtdParam._m0[13u].z) - _462)) + _462;
    float _539 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _533;
    float _542 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _534;
    float _545 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _535;
    float _552 = ((_533 - _539) * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) + _539;
    float _553 = ((_534 - _542) * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) + _542;
    float _554 = ((_535 - _545) * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) + _545;
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _609 = _606.y;
    float _610 = _606.z;
    float _617 = ((_589.x - _608) * _453) + _608;
    float _618 = ((_589.y - _609) * _453) + _609;
    float _619 = ((_589.z - _610) * _453) + _610;
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _644 = ((_631.z - _619) * _526) + _619;
    float _647 = ((((_631.x - _617) * _526) + _617) * 2.0) + (-1.0);
    float _648 = ((((_631.y - _618) * _526) + _618) * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3915 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _654 = sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _686 = (_647 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_566.x * 2.0) + (-1.0)))) + (((_674.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _687 = (_648 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_566.y * 2.0) + (-1.0)))) + (((_674.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _701 = _699.x;
    float _702 = 1.0 - _701;
    float _731 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_701 - _702) * cbMtdParam._m0[24u].w) + _702) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3926 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _732 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _740 = ((((cbMtdParam._m0[10u].x - _552) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _732) + _552;
    float _741 = ((((cbMtdParam._m0[10u].y - _553) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _732) + _553;
    float _742 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _554)) * _732) + _554;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _770 = _768.x;
    float _788 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _770) * _453) + _770;
    float _806 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _306) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _307) + cbTextureTilingScale._m0[21u].w)).x - _788) * _526) + _788;
    float _810 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _806) * cbMtdParam._m0[19u].z) + _806;
    float _812 = _810 - (_810 * _732);
    float _817 = (((_566.z - _644) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _644;
    float _821 = ((_674.z - _817) * cbMtdParam._m0[19u].w) + _817;
    float _825 = ((cbMtdParam._m0[23u].x - _821) * _732) + _821;
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _850 = (_844.x * 2.0) + (-1.0);
    float _851 = (_844.y * 2.0) + (-1.0);
    float _852 = dot(vec2(_850, _851), vec2(_850, _851));
    float _3937 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _868 = (_732 * (((cbMtdParam._m0[22u].z * _686) - _686) + _850)) + _686;
    float _869 = (_732 * (((cbMtdParam._m0[22u].z * _687) - _687) + _851)) + _687;
    float _870 = (_732 * (sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) - _654)) + _654;
    float _874 = cbMtdParam._m0[22u].x + _674.w;
    float _877 = fma(_870, _255 * NORMAL.x, fma(_869, _262 * TANGENT.x, (_248 * _240) * _868));
    float _880 = fma(_870, _255 * NORMAL.y, fma(_869, _262 * TANGENT.y, (_248 * _241) * _868));
    float _883 = fma(_870, _255 * NORMAL.z, fma(_869, _262 * TANGENT.z, (_248 * _242) * _868));
    float _887 = inversesqrt(dot(vec3(_877, _880, _883), vec3(_877, _880, _883)));
    float _888 = _887 * _877;
    float _889 = _887 * _880;
    float _890 = _887 * _883;
    float _3948 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _891 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _3970 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3981 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3992 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4003 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _896 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _910 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _960 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _950);
    float _961 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _950);
    float _962 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _950);
    float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
    float _967 = _960 * _966;
    float _968 = _961 * _966;
    float _969 = _962 * _966;
    vec4 _974 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _976 = _974.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1148 = sqrt(((_960 * _960) + (_961 * _961)) + (_962 * _962));
        float _1154 = (cbMatDynParam._m0[5u].x * _1148) + cbMatDynParam._m0[5u].y;
        float _4014 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1159 = (cbMatDynParam._m0[5u].z * _1148) + cbMatDynParam._m0[5u].w;
        float _4025 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) - _1155)) + _1155) < ((_976 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _987 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _988 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1006 = fma(_890, cbSceneParam._m0[5u].z, fma(_889, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _888));
    float _1009 = fma(_890, cbSceneParam._m0[6u].z, fma(_889, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _888));
    float _1012 = fma(_890, cbSceneParam._m0[7u].z, fma(_889, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _888));
    uint _1025 = _287 + 9u;
    uint _1026 = _1025 + uint(cbMatDynParam._m0[0u].w);
    float _1032 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_1026].x;
    float _1033 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_1026].y;
    float _1034 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_1026].z;
    float _4036 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1036 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1038 = 1.0 - _896;
    float _1039 = _1035 * _1038;
    float _1040 = _1036 * _1038;
    float _1041 = _1037 * _1038;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _896;
    float _1047 = (_1036 + (-0.039999999105930328369140625)) * _896;
    float _1048 = (_1037 + (-0.039999999105930328369140625)) * _896;
    float _1049 = _1046 + 0.039999999105930328369140625;
    float _1051 = _1047 + 0.039999999105930328369140625;
    float _1052 = _1048 + 0.039999999105930328369140625;
    vec4 _1061 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _987, cbSceneParam._m0[86u].y * _988));
    float _1065 = ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * TEXCOORD_5.w) * _1061.x;
    float _1066 = dot(vec3(_888, _889, _890), vec3(_967, _968, _969));
    float _1069 = _1066 * 2.0;
    float _1073 = (_1069 * _888) - _967;
    float _1074 = (_1069 * _889) - _968;
    float _1075 = (_1069 * _890) - _969;
    float _1079 = abs(dot(vec3(_967, _968, _969), vec3(_888, _889, _890)));
    float _4069 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1081 = sqrt(_891);
    float _1094 = exp2((_1081 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1081 * 3.0));
    float _1100 = (1.0 - _1094) * ((_1081 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1101 = _1094 * _1081;
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1466;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1191 = fma(_1137, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1129));
        float _1195 = fma(_1137, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1129));
        float _1199 = fma(_1137, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1129));
        float _1224 = _1129 + _888;
        float _1225 = _1133 + _889;
        float _1226 = _1137 + _890;
        float _1236 = fma(_1226, cbModelParam._m0[26u].z, fma(_1225, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1224)) - _1191;
        float _1237 = fma(_1226, cbModelParam._m0[27u].z, fma(_1225, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1224)) - _1195;
        float _1238 = fma(_1226, cbModelParam._m0[28u].z, fma(_1225, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1224)) - _1199;
        float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
        float _1255 = ((_1242 * _1236) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1191 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1242 * _1237) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1195 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1242 * _1238) / cbModelParam._m0[34u].z) + ((((((_1199 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        float _1294 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1260.x + (-0.5));
        float _1296 = _1294 * (_1260.y + (-0.5));
        float _1297 = _1294 * (_1260.z + (-0.5));
        float _1304 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1267.x + (-0.5));
        float _1306 = _1304 * (_1267.y + (-0.5));
        float _1307 = _1304 * (_1267.z + (-0.5));
        float _1314 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1274.x + (-0.5));
        float _1316 = _1314 * (_1274.y + (-0.5));
        float _1317 = _1314 * (_1274.z + (-0.5));
        float _1324 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1281.x + (-0.5));
        float _1326 = _1324 * (_1281.y + (-0.5));
        float _1327 = _1324 * (_1281.z + (-0.5));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = _1295 * 0.5;
        float _1332 = _1305 * 0.5;
        float _1333 = _1315 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1348 = (dot(vec3(_888, _889, _890), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1358 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4117 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1360 + 1.0))) + _1365) * _1328;
        float _1375 = _1296 * 0.5;
        float _1376 = _1306 * 0.5;
        float _1377 = _1316 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_888, _889, _890), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4150 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1402 + 1.0))) + _1407) * _1329;
        float _1417 = _1297 * 0.5;
        float _1418 = _1307 * 0.5;
        float _1419 = _1317 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_888, _889, _890), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4183 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1444 + 1.0))) + _1449) * _1330;
        _1466 = _1297;
        _1468 = _1296;
        _1469 = _1295;
        _1470 = _1307;
        _1471 = _1306;
        _1472 = _1305;
        _1473 = _1317;
        _1474 = _1316;
        _1475 = _1315;
        _1476 = _1330;
        _1477 = _1329;
        _1478 = _1328;
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1480 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1481 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
    }
    else
    {
        _1466 = _1467;
        _1468 = _1467;
        _1469 = _1467;
        _1470 = _1467;
        _1471 = _1467;
        _1472 = _1467;
        _1473 = _1467;
        _1474 = _1467;
        _1475 = _1467;
        _1476 = _1467;
        _1477 = _1467;
        _1478 = _1467;
        _1479 = 0.0;
        _1480 = 0.0;
        _1481 = 0.0;
    }
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1508 = fma(_1137, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1129));
        float _1512 = fma(_1137, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1129));
        float _1516 = fma(_1137, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1129));
        float _1539 = _1129 + _888;
        float _1540 = _1133 + _889;
        float _1541 = _1137 + _890;
        float _1551 = fma(_1541, cbModelParam._m0[30u].z, fma(_1540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1539)) - _1508;
        float _1552 = fma(_1541, cbModelParam._m0[31u].z, fma(_1540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1539)) - _1512;
        float _1553 = fma(_1541, cbModelParam._m0[32u].z, fma(_1540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1539)) - _1516;
        float _1557 = inversesqrt(dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553)));
        float _1570 = ((_1557 * _1551) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1508 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1571 = ((_1557 * _1552) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1512 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1572 = ((_1557 * _1553) / cbModelParam._m0[35u].z) + ((((((_1516 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1574 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1570, _1571, _1572), 0.0);
        float _1607 = exp2((_1574.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1574.x + (-0.5));
        float _1609 = _1607 * (_1574.y + (-0.5));
        float _1610 = _1607 * (_1574.z + (-0.5));
        float _1617 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1581.x + (-0.5));
        float _1619 = _1617 * (_1581.y + (-0.5));
        float _1620 = _1617 * (_1581.z + (-0.5));
        float _1627 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1588.x + (-0.5));
        float _1629 = _1627 * (_1588.y + (-0.5));
        float _1630 = _1627 * (_1588.z + (-0.5));
        float _1637 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1595.x + (-0.5));
        float _1639 = _1637 * (_1595.y + (-0.5));
        float _1640 = _1637 * (_1595.z + (-0.5));
        float _1641 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1644 = _1608 * 0.5;
        float _1645 = _1618 * 0.5;
        float _1646 = _1628 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_888, _889, _890), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1641 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4246 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1671 + 1.0))) + _1676) * _1641;
        float _1686 = _1609 * 0.5;
        float _1687 = _1619 * 0.5;
        float _1688 = _1629 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_888, _889, _890), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4279 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1713 + 1.0))) + _1718) * _1642;
        float _1728 = _1610 * 0.5;
        float _1729 = _1620 * 0.5;
        float _1730 = _1630 * 0.5;
        float _1731 = dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730));
        float _1736 = (_1731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1731);
        float _1744 = (dot(vec3(_888, _889, _890), vec3(_1736 * _1728, _1736 * _1729, _1736 * _1730)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1753 = sqrt(((_1729 * _1729) + (_1728 * _1728)) + (_1730 * _1730)) / (_1643 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1755 = _1754 * 2.0;
        float _1759 = (1.0 - _1754) / (_1754 + 1.0);
        float _4312 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1769 = ((((1.0 - _1760) * (_1755 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1755 + 1.0))) + _1760) * _1643;
        _1777 = _1610;
        _1778 = _1609;
        _1779 = _1608;
        _1780 = _1620;
        _1781 = _1619;
        _1782 = _1618;
        _1783 = _1630;
        _1784 = _1629;
        _1785 = _1628;
        _1786 = _1643;
        _1787 = _1642;
        _1788 = _1641;
        _1789 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
        _1791 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)));
    }
    else
    {
        _1777 = _1467;
        _1778 = _1467;
        _1779 = _1467;
        _1780 = _1467;
        _1781 = _1467;
        _1782 = _1467;
        _1783 = _1467;
        _1784 = _1467;
        _1785 = _1467;
        _1786 = _1467;
        _1787 = _1467;
        _1788 = _1467;
        _1789 = 0.0;
        _1790 = 0.0;
        _1791 = 0.0;
    }
    float _1801 = (cbModelParam._m0[1u].x * (_1789 - _1479)) + _1479;
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1480)) + _1480;
    float _1803 = (cbModelParam._m0[1u].x * (_1791 - _1481)) + _1481;
    float _1824 = fma(_1803, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1801 * cbSceneParam._m0[89u].x));
    float _1827 = fma(_1803, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1801 * cbSceneParam._m0[90u].x));
    float _1830 = fma(_1803, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1801));
    float _1845 = _1073 * 0.5;
    float _1846 = _1074 * 0.5;
    float _1847 = _1075 * 0.5;
    float _1848 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1779, _1782, _1785, _1788));
    float _1851 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1854 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1888;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1861 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1466, _1470, _1473, _1476));
        float _1865 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1468, _1471, _1474, _1477));
        float _1869 = dot(vec4(_1845, _1846, _1847, 1.0), vec4(_1469, _1472, _1475, _1478));
        float _1876 = dot(vec4(cbModelParam._m0[39u]), vec4(_1845, _1846, _1847, 1.0));
        _1888 = dot(vec3(isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1876) ? 0.0 : (isnan(0.0) ? _1876 : max(0.0, _1876))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1888 = 1.0;
    }
    float _1899;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1890 = dot(vec4(cbModelParam._m0[40u]), vec4(_1845, _1846, _1847, 1.0));
        _1899 = dot(vec3(isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1899 = 1.0;
    }
    float _1903 = (_1899 * cbModelParam._m0[1u].x) + (_1888 * (1.0 - cbModelParam._m0[1u].x));
    float _1913 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _891);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1913 : min(cbModelParam._m0[25u].z, _1913));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1963 = fma(_1137, cbModelParam._m0[13u].z, fma(_1133, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1129)) + cbModelParam._m0[13u].w;
        float _1967 = fma(_1137, cbModelParam._m0[14u].z, fma(_1133, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1129)) + cbModelParam._m0[14u].w;
        float _1971 = fma(_1137, cbModelParam._m0[15u].z, fma(_1133, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1129)) + cbModelParam._m0[15u].w;
        float _1974 = fma(_1075, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1073));
        float _1977 = fma(_1075, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1073));
        float _1980 = fma(_1075, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1073));
        float _2008;
        if (_1974 > 0.0)
        {
            _2008 = abs((1.0 - _1963) / _1974);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1963 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2008 = frontier_phi_17_15_ladder;
        }
        float _2211;
        if (_1977 > 0.0)
        {
            _2211 = abs((1.0 - _1967) / _1977);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1967 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2211 = frontier_phi_26_22_ladder;
        }
        float _2465;
        if (_1980 > 0.0)
        {
            _2465 = abs((1.0 - _1971) / _1980);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1971 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2465 = frontier_phi_38_33_ladder;
        }
        float _2467 = isnan(_2211) ? _2008 : (isnan(_2008) ? _2211 : min(_2008, _2211));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1974) + _1963;
        float _2473 = (_2468 * _1977) + _1967;
        float _2474 = (_2468 * _1980) + _1971;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2475;
        float _2479 = _2475 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 > _2479) || ((_2473 < _2477) || ((_2472 < _2477) || (_2472 > _2479))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2474, cbModelParam._m0[9u].z, fma(_2473, cbModelParam._m0[9u].y, _2472 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2474, cbModelParam._m0[10u].z, fma(_2473, cbModelParam._m0[10u].y, _2472 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2474, cbModelParam._m0[11u].z, fma(_2473, cbModelParam._m0[11u].y, _2472 * cbModelParam._m0[11u].x))), _1914);
            frontier_phi_16_38_ladder = _2602.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2602.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2602.x * cbModelParam._m0[1u].y;
        }
        _1996 = frontier_phi_16_38_ladder_2;
        _1998 = frontier_phi_16_38_ladder_1;
        _2000 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1073, _1074, _1075), _1914);
        _1996 = _1984.x * cbModelParam._m0[1u].y;
        _1998 = _1984.y * cbModelParam._m0[1u].y;
        _2000 = _1984.z * cbModelParam._m0[1u].y;
    }
    float _2004 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _891);
    float _2005 = isnan(_2004) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2004 : min(cbModelParam._m0[25u].w, _2004));
    float _2095;
    float _2097;
    float _2099;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2059 = fma(_1137, cbModelParam._m0[21u].z, fma(_1133, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1129)) + cbModelParam._m0[21u].w;
        float _2063 = fma(_1137, cbModelParam._m0[22u].z, fma(_1133, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1129)) + cbModelParam._m0[22u].w;
        float _2067 = fma(_1137, cbModelParam._m0[23u].z, fma(_1133, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1129)) + cbModelParam._m0[23u].w;
        float _2070 = fma(_1075, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1073));
        float _2073 = fma(_1075, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1073));
        float _2076 = fma(_1075, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1073));
        float _2216;
        if (_2070 > 0.0)
        {
            _2216 = abs((1.0 - _2059) / _2070);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2059 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2216 = frontier_phi_28_24_ladder;
        }
        float _2492;
        if (_2073 > 0.0)
        {
            _2492 = abs((1.0 - _2063) / _2073);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2063 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2492 = frontier_phi_40_35_ladder;
        }
        float _2705;
        if (_2076 > 0.0)
        {
            _2705 = abs((1.0 - _2067) / _2076);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2067 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2705 = frontier_phi_49_46_ladder;
        }
        float _2707 = isnan(_2492) ? _2216 : (isnan(_2216) ? _2492 : min(_2216, _2492));
        float _2708 = isnan(_2705) ? _2707 : (isnan(_2707) ? _2705 : min(_2707, _2705));
        float _2712 = (_2708 * _2070) + _2059;
        float _2713 = (_2708 * _2073) + _2063;
        float _2714 = (_2708 * _2076) + _2067;
        float _2715 = _2708 * 9.9999997473787516355514526367188e-05;
        float _2716 = (-1.0) - _2715;
        float _2718 = _2715 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2714 > _2718) || ((_2714 < _2716) || ((_2713 > _2718) || ((_2713 < _2716) || ((_2712 < _2716) || (_2712 > _2718))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2714, cbModelParam._m0[17u].z, fma(_2713, cbModelParam._m0[17u].y, _2712 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2714, cbModelParam._m0[18u].z, fma(_2713, cbModelParam._m0[18u].y, _2712 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2714, cbModelParam._m0[19u].z, fma(_2713, cbModelParam._m0[19u].y, _2712 * cbModelParam._m0[19u].x))), _2005);
            frontier_phi_25_49_ladder = _2913.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2913.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2913.x * cbModelParam._m0[1u].z;
        }
        _2095 = frontier_phi_25_49_ladder_2;
        _2097 = frontier_phi_25_49_ladder_1;
        _2099 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2079 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1073, _1074, _1075), _2005);
        _2095 = _2079.x * cbModelParam._m0[1u].z;
        _2097 = _2079.y * cbModelParam._m0[1u].z;
        _2099 = _2079.z * cbModelParam._m0[1u].z;
    }
    float _2112 = (((_1100 * _1049) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2095 - _1996)) + _1996);
    float _2114 = (((_1100 * _1051) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2097 - _1998)) + _1998);
    float _2116 = (((_1100 * _1052) + _1101) * _1065) * ((cbModelParam._m0[1u].w * (_2099 - _2000)) + _2000);
    float _2119 = fma(_2116, cbSceneParam._m0[89u].z, fma(_2114, cbSceneParam._m0[89u].y, _2112 * cbSceneParam._m0[89u].x));
    float _2122 = fma(_2116, cbSceneParam._m0[90u].z, fma(_2114, cbSceneParam._m0[90u].y, _2112 * cbSceneParam._m0[90u].x));
    float _2125 = fma(_2116, cbSceneParam._m0[91u].z, fma(_2114, cbSceneParam._m0[91u].y, _2112 * cbSceneParam._m0[91u].x));
    uvec4 _2135 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2137 = _2135.x * 14u;
    uint _2138 = _2137 + 13u;
    float _2145 = _1065 + (-1.0);
    float _2150 = (cbLight._m0[_2138].x * _2145) + 1.0;
    float _2151 = (cbLight._m0[_2138].y * _2145) + 1.0;
    float _2152 = (cbLight._m0[_2138].z * _2145) + 1.0;
    float _2153 = (cbLight._m0[_2138].w * _2145) + 1.0;
    uint _2154 = _2137 + 5u;
    float _2160 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2164 = _2137 + 4u;
    float _2170 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2174 = _2137 | 1u;
    float _2185 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_888, _889, _890));
    float _2188 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_888, _889, _890));
    float _4448 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _4459 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2193 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * 0.3183098733425140380859375;
    float _2195 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * 0.3183098733425140380859375;
    float _2202 = ((cbLight._m0[_2154].x * _2160) * _2195) + ((cbLight._m0[_2164].x * _2170) * _2193);
    float _2203 = ((_2160 * cbLight._m0[_2154].y) * _2195) + ((_2170 * cbLight._m0[_2164].y) * _2193);
    float _2204 = ((_2160 * cbLight._m0[_2154].z) * _2195) + ((_2170 * cbLight._m0[_2164].z) * _2193);
    uvec4 _2208 = floatBitsToUint(cbLight._m0[_2137 + 12u]);
    bool _2210 = _2208.x == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2210)
    {
        _2221 = _2202;
        _2223 = _2203;
        _2225 = _2204;
    }
    else
    {
        uint _2229 = _2137 + 6u;
        float _2245 = (dot(vec3(cbLight._m0[_2137 + 2u].xyz), vec3(_888, _889, _890)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4470 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2248 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2221 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2202;
        _2223 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2203;
        _2225 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2204;
    }
    bool _2228 = _2208.y == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2228)
    {
        _2266 = _2221;
        _2268 = _2223;
        _2270 = _2225;
    }
    else
    {
        uint _2436 = _2137 + 7u;
        float _2452 = (dot(vec3(cbLight._m0[_2137 + 3u].xyz), vec3(_888, _889, _890)) * 0.5) + 0.5;
        float _2453 = _2452 * _2452;
        float _4486 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2454 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2455 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2266 = (((cbLight._m0[_2436].x * 0.3183098733425140380859375) * _2454) * _2455) + _2221;
        _2268 = (((cbLight._m0[_2436].y * 0.3183098733425140380859375) * _2454) * _2455) + _2223;
        _2270 = (((cbLight._m0[_2436].z * 0.3183098733425140380859375) * _2454) * _2455) + _2225;
    }
    uint _2273 = _2137 + 8u;
    float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _891) * 0.949999988079071044921875);
    float _2287 = _2286 * _2286;
    float _2288 = cbLight._m0[_2137].x + _967;
    float _2289 = cbLight._m0[_2137].y + _968;
    float _2290 = cbLight._m0[_2137].z + _969;
    float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
    float _2295 = _2294 * _2288;
    float _2296 = _2294 * _2289;
    float _2297 = _2294 * _2290;
    float _2298 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2137].xyz));
    float _4502 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _4513 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _2302 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2303 = dot(vec3(_888, _889, _890), vec3(_2295, _2296, _2297));
    float _4524 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2307 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2295, _2296, _2297));
    float _4535 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2311 = _2287 * _2287;
    float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
    float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
    float _2324 = 0.959999978542327880859375 - _1046;
    float _2326 = 0.959999978542327880859375 - _1047;
    float _2327 = 0.959999978542327880859375 - _1048;
    float _2334 = 1.0 - _2287;
    float _2345 = (0.5 / (((_2302 * ((_2301 * _2334) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2334) + _2287) * _2301))) * _2301;
    float _4546 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
    uint _2358 = _2137 + 9u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _891) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2174].x + _967;
    float _2372 = cbLight._m0[_2174].y + _968;
    float _2373 = cbLight._m0[_2174].z + _969;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2174].xyz));
    float _4557 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2385 = dot(vec3(_888, _889, _890), vec3(_2378, _2379, _2380));
    float _4568 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2378, _2379, _2380));
    float _4579 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2370 * _2370;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0);
    float _2411 = 1.0 - _2370;
    float _2421 = (0.5 / (((_2302 * ((_2384 * _2411) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2411) + _2370) * _2384))) * _2384;
    float _4590 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    float _2433 = (((((_2404 * _2324) + _1049) * cbLight._m0[_2358].x) * _2423) * _2160) + (((((_2323 * _2324) + _1049) * cbLight._m0[_2273].x) * _2347) * _2170);
    float _2434 = (((((_2404 * _2326) + _1051) * cbLight._m0[_2358].y) * _2423) * _2160) + (((((_2323 * _2326) + _1051) * cbLight._m0[_2273].y) * _2347) * _2170);
    float _2435 = (((((_2404 * _2327) + _1052) * cbLight._m0[_2358].z) * _2423) * _2160) + (((((_2323 * _2327) + _1052) * cbLight._m0[_2273].z) * _2347) * _2170);
    float _2497;
    float _2499;
    float _2501;
    if (_2210)
    {
        _2497 = _2433;
        _2499 = _2434;
        _2501 = _2435;
    }
    else
    {
        uint _2503 = _2137 + 2u;
        uint _2507 = _2137 + 10u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _891) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _967;
        float _2524 = cbLight._m0[_2503].y + _968;
        float _2525 = cbLight._m0[_2503].z + _969;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2503].xyz));
        float _4601 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2537 = dot(vec3(_888, _889, _890), vec3(_2530, _2531, _2532));
        float _4612 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4623 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0);
        float _2563 = 1.0 - _2522;
        float _2573 = (0.5 / (((_2302 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2563) + _2522) * _2536))) * _2536;
        float _4634 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2497 = (((((_2556 * _2324) + _1049) * cbLight._m0[_2507].x) * _2575) * _2576) + _2433;
        _2499 = (((((_2556 * _2326) + _1051) * cbLight._m0[_2507].y) * _2575) * _2576) + _2434;
        _2501 = (((((_2556 * _2327) + _1052) * cbLight._m0[_2507].z) * _2575) * _2576) + _2435;
    }
    float _2611;
    float _2613;
    float _2615;
    if (_2228)
    {
        _2611 = _2497;
        _2613 = _2499;
        _2615 = _2501;
    }
    else
    {
        uint _2622 = _2137 + 3u;
        uint _2626 = _2137 + 11u;
        float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2622].w)) * _891) * 0.949999988079071044921875);
        float _2641 = _2640 * _2640;
        float _2642 = cbLight._m0[_2622].x + _967;
        float _2643 = cbLight._m0[_2622].y + _968;
        float _2644 = cbLight._m0[_2622].z + _969;
        float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
        float _2649 = _2648 * _2642;
        float _2650 = _2648 * _2643;
        float _2651 = _2648 * _2644;
        float _2652 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2622].xyz));
        float _4650 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2656 = dot(vec3(_888, _889, _890), vec3(_2649, _2650, _2651));
        float _4661 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2660 = dot(vec3(cbLight._m0[_2622].xyz), vec3(_2649, _2650, _2651));
        float _4672 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2664 = _2641 * _2641;
        float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
        float _2675 = exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0);
        float _2682 = 1.0 - _2641;
        float _2692 = (0.5 / (((_2302 * ((_2655 * _2682) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2682) + _2641) * _2655))) * _2655;
        float _4683 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2694 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
        float _2695 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2611 = (((((_2675 * _2324) + _1049) * cbLight._m0[_2626].x) * _2694) * _2695) + _2497;
        _2613 = (((((_2675 * _2326) + _1051) * cbLight._m0[_2626].y) * _2694) * _2695) + _2499;
        _2615 = (((((_2675 * _2327) + _1052) * cbLight._m0[_2626].z) * _2694) * _2695) + _2501;
    }
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_2135.y == 0u)
    {
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2770;
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2770;
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2770;
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.x;
        uint _2797 = uint((float(_2785.y) * floor(float(uint(cbSceneParam._m0[85u].y * _988) / _2786))) + floor(float(uint(cbSceneParam._m0[85u].x * _987) / _2786)));
        float _2807 = (log2(_2773 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2808 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        uint _2811 = uint(isnan(14.0) ? _2808 : (isnan(_2808) ? 14.0 : min(_2808, 14.0)));
        uvec4 _2816 = texelFetch(g_lightClusterGridBuffer, int(((_2811 << 2u) + (_2797 << 6u)) >> 2u));
        uint _2817 = _2816.x;
        uint _2818 = _2785.z;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((((1u << ((_2818 >> 4u) & 15u)) + 4294967295u) & _2817) == 0u) || ((_2818 & 240u) == 0u))
        {
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
        }
        else
        {
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            uint _3077 = 0u;
            uint _3086;
            bool _3087;
            for (;;)
            {
                _3086 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3077 << 2u)) >> 2u)).x;
                _3087 = _3086 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3087)
                {
                    frontier_phi_66_pred = _3071;
                    frontier_phi_66_pred_1 = _3076;
                    frontier_phi_66_pred_2 = _3075;
                    frontier_phi_66_pred_3 = _3074;
                    frontier_phi_66_pred_4 = _3073;
                    frontier_phi_66_pred_5 = _3072;
                }
                else
                {
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    uint _3222;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3074;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3086;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    for (;;)
                    {
                        uint _3226 = uint(findLSB(_3222)) + (_3077 << 5u);
                        uint _3223 = (_3222 + 4294967295u) & _3222;
                        uint _3228 = _3226 * 48u;
                        vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3248 = (_3226 * 48u) + 4u;
                        vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 3u)).x));
                        uint _3267 = (_3226 * 48u) + 8u;
                        vec3 _3278 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x));
                        float _3282 = _3242.x - _2771;
                        float _3283 = _3242.y - _2772;
                        float _3284 = _3242.z - _2773;
                        float _3285 = dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284));
                        float _3288 = inversesqrt(_3285);
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3292 = dot(vec3(_1006, _1009, _1012), vec3(_3289, _3290, _3291));
                        float _3297 = 1.0 - (_3285 * _3242.w);
                        float _4709 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3298 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3299 = sqrt(_3285) * _3261.w;
                        float _3302 = 1.39999997615814208984375 / (_3299 + 1.39999997615814208984375);
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3292) + _3303;
                        float _3309 = _3299 * _3299;
                        float _3313 = ((isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0))) * _3298) / ((_3309 * 0.699999988079071044921875) + 1.0);
                        float _3317 = (-0.0) - _2771;
                        float _3318 = (-0.0) - _2772;
                        float _3319 = (-0.0) - _2773;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3324 = _3323 * _3317;
                        float _3325 = _3323 * _3318;
                        float _3326 = _3323 * _3319;
                        float _3334 = exp2(log2(1.0 / ((_3309 * 3.5) + 5.0)) * 0.25);
                        float _3335 = 1.0 - _1081;
                        float _3342 = sqrt(1.0 - ((1.0 - (_3335 * _3335)) * (1.0 - (_3334 * _3334))));
                        float _3343 = _3342 * _3342;
                        float _3344 = _3343 * _3343;
                        float _3345 = _3324 + _3289;
                        float _3346 = _3325 + _3290;
                        float _3347 = _3326 + _3291;
                        float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                        float _3355 = dot(vec3(_1006, _1009, _1012), vec3(_3324, _3325, _3326));
                        float _4725 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3358 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3359 = dot(vec3(_1006, _1009, _1012), vec3(_3351 * _3345, _3351 * _3346, _3351 * _3347));
                        float _4736 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3362 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3366 = ((_3362 * _3362) * (_3344 + (-1.0))) + 1.0;
                        float _3367 = _3302 * _3343;
                        float _3368 = _3367 * _3367;
                        float _3371 = ((1.0 - _3368) * _3292) + _3368;
                        float _4747 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3372 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3373 = 1.0 - _3343;
                        float _3383 = (0.5 / (((_3372 * ((_3358 * _3373) + _3343)) + 9.9999999392252902907785028219223e-09) + (((_3372 * _3373) + _3343) * _3358))) * _3372;
                        float _4758 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3394 = (((_3344 * 3.1415927410125732421875) * (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) / ((_3366 * _3366) * ((_3309 * 2.1991131305694580078125) + 3.141590118408203125))) * _3298;
                        _3146 = (_3313 * _3261.x) + _3219;
                        _3147 = (_3313 * _3261.y) + _3220;
                        _3148 = (_3313 * _3261.z) + _3221;
                        _3143 = (_3394 * _3278.x) + _3216;
                        _3144 = (_3394 * _3278.y) + _3217;
                        _3145 = (_3394 * _3278.z) + _3218;
                        if (_3223 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3146;
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3223;
                        }
                    }
                    frontier_phi_66_pred = _3143;
                    frontier_phi_66_pred_1 = _3148;
                    frontier_phi_66_pred_2 = _3147;
                    frontier_phi_66_pred_3 = _3146;
                    frontier_phi_66_pred_4 = _3145;
                    frontier_phi_66_pred_5 = _3144;
                }
                _2919 = frontier_phi_66_pred;
                _2929 = frontier_phi_66_pred_1;
                _2927 = frontier_phi_66_pred_2;
                _2925 = frontier_phi_66_pred_3;
                _2923 = frontier_phi_66_pred_4;
                _2921 = frontier_phi_66_pred_5;
                uint _3078 = _3077 + 1u;
                if (_3078 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3071 = _2919;
                    _3072 = _2921;
                    _3073 = _2923;
                    _3074 = _2925;
                    _3075 = _2927;
                    _3076 = _2929;
                    _3077 = _3078;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
        }
        uvec4 _2932 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2933 = _2932.z;
        uint _2935 = (_2933 >> 8u) & 15u;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        if (((4294967295u << _2935) & _2817) == 0u)
        {
            _3039 = _2918;
            _3041 = _2920;
            _3043 = _2922;
            _3045 = _2924;
            _3047 = _2926;
            _3049 = _2928;
        }
        else
        {
            float _3064 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
            float _3065 = _3064 * _2771;
            float _3066 = _3064 * _2772;
            float _3067 = _3064 * _2773;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2935 < ((_2933 >> 12u) & 15u))
            {
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3199 = _2918;
                float _3200 = _2920;
                float _3201 = _2922;
                float _3202 = _2924;
                float _3203 = _2926;
                float _3204 = _2928;
                uint _3205 = _2935;
                uint _3214;
                bool _3215;
                for (;;)
                {
                    _3214 = texelFetch(g_lightClassification, int((((_2811 << 5u) + (_2797 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                    _3215 = _3214 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3215)
                    {
                        frontier_phi_77_pred = _3204;
                        frontier_phi_77_pred_1 = _3203;
                        frontier_phi_77_pred_2 = _3202;
                        frontier_phi_77_pred_3 = _3201;
                        frontier_phi_77_pred_4 = _3200;
                        frontier_phi_77_pred_5 = _3199;
                    }
                    else
                    {
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3421 = _3199;
                        float _3422 = _3200;
                        float _3423 = _3201;
                        float _3424 = _3202;
                        float _3425 = _3203;
                        float _3426 = _3204;
                        uint _3427 = _3214;
                        uint _3428;
                        vec4 _3453;
                        float _3454;
                        vec4 _3469;
                        vec3 _3481;
                        vec4 _3496;
                        vec4 _3511;
                        float _3557;
                        bool _3558;
                        for (;;)
                        {
                            uint _3438 = ((_3205 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3427));
                            _3428 = (_3427 + 4294967295u) & _3427;
                            uint _3440 = _3438 * 40u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            _3454 = _3453.w;
                            uint _3456 = (_3438 * 40u) + 4u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3471 = (_3438 * 40u) + 8u;
                            _3481 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x));
                            uint _3483 = (_3438 * 40u) + 16u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3438 * 40u) + 20u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3513 = (_3438 * 40u) + 24u;
                            vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3532 = (_3438 * 40u) + 28u;
                            vec4 _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            _3557 = fma(_2773, _3545.z, fma(_2772, _3545.y, _3545.x * _2771)) + _3545.w;
                            _3558 = !((fma(_2773, _3526.z, fma(_2772, _3526.y, _3526.x * _2771)) + _3526.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3558)
                            {
                                float _3585 = _3453.x - _2771;
                                float _3586 = _3453.y - _2772;
                                float _3587 = _3453.z - _2773;
                                float _3588 = dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587));
                                float _3591 = inversesqrt(_3588);
                                float _3592 = _3591 * _3585;
                                float _3593 = _3591 * _3586;
                                float _3594 = _3591 * _3587;
                                float _3598 = 1.0 - (_3588 / (_3454 * _3454));
                                float _4769 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3603 = sqrt(_3588) * _3469.w;
                                float _3605 = 1.39999997615814208984375 / (_3603 + 1.39999997615814208984375);
                                float _3606 = _3605 * _3605;
                                float _3609 = ((1.0 - _3606) * dot(vec3(_3592, _3593, _3594), vec3(_1006, _1009, _1012))) + _3606;
                                float _3612 = _3603 * _3603;
                                float _3616 = (fma(_2773, _3496.z, fma(_2772, _3496.y, _3496.x * _2771)) + _3496.w) / _3557;
                                float _3617 = (fma(_2773, _3511.z, fma(_2772, _3511.y, _3511.x * _2771)) + _3511.w) / _3557;
                                float _3621 = 1.0 - dot(vec2(_3616, _3617), vec2(_3616, _3617));
                                float _4785 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3623 = _3622 * (((isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0))) * _3599) / ((_3612 * 0.699999988079071044921875) + 1.0));
                                float _3635 = exp2(log2(1.0 / ((_3612 * 3.5) + 5.0)) * 0.25);
                                float _3636 = 1.0 - _1081;
                                float _3643 = sqrt(1.0 - ((1.0 - (_3636 * _3636)) * (1.0 - (_3635 * _3635))));
                                float _3644 = _3643 * _3643;
                                float _3645 = _3644 * _3644;
                                float _3646 = _3592 - _3065;
                                float _3647 = _3593 - _3066;
                                float _3648 = _3594 - _3067;
                                float _3652 = inversesqrt(dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648)));
                                float _3656 = dot(vec3(_1006, _1009, _1012), vec3((-0.0) - _3065, (-0.0) - _3066, (-0.0) - _3067));
                                float _4796 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3659 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3660 = dot(vec3(_1006, _1009, _1012), vec3(_3652 * _3646, _3652 * _3647, _3652 * _3648));
                                float _4807 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3663 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3667 = ((_3663 * _3663) * (_3645 + (-1.0))) + 1.0;
                                float _3668 = _3605 * _3644;
                                float _3669 = _3668 * _3668;
                                float _3675 = ((1.0 - _3669) * dot(vec3(_1006, _1009, _1012), vec3(_3592, _3593, _3594))) + _3669;
                                float _4818 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3677 = 1.0 - _3644;
                                float _3687 = (0.5 / (((_3676 * ((_3659 * _3677) + _3644)) + 9.9999999392252902907785028219223e-09) + (((_3676 * _3677) + _3644) * _3659))) * _3676;
                                float _4829 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3697 = (_3622 * _3599) * (((_3645 * 3.1415927410125732421875) * (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) / ((_3667 * _3667) * ((_3612 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3623 * _3469.y;
                                frontier_phi_83_pred_1 = _3623 * _3469.x;
                                frontier_phi_83_pred_2 = _3697 * _3481.z;
                                frontier_phi_83_pred_3 = _3697 * _3481.y;
                                frontier_phi_83_pred_4 = _3697 * _3481.x;
                                frontier_phi_83_pred_5 = _3623 * _3469.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3705 = frontier_phi_83_pred;
                            _3704 = frontier_phi_83_pred_1;
                            _3703 = frontier_phi_83_pred_2;
                            _3702 = frontier_phi_83_pred_3;
                            _3701 = frontier_phi_83_pred_4;
                            _3706 = frontier_phi_83_pred_5;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            if (_3428 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3428;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3413;
                        frontier_phi_77_pred_1 = _3412;
                        frontier_phi_77_pred_2 = _3411;
                        frontier_phi_77_pred_3 = _3410;
                        frontier_phi_77_pred_4 = _3409;
                        frontier_phi_77_pred_5 = _3408;
                    }
                    _3050 = frontier_phi_77_pred;
                    _3048 = frontier_phi_77_pred_1;
                    _3046 = frontier_phi_77_pred_2;
                    _3044 = frontier_phi_77_pred_3;
                    _3042 = frontier_phi_77_pred_4;
                    _3040 = frontier_phi_77_pred_5;
                    uint _3206 = _3205 + 1u;
                    if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3199 = _3040;
                        _3200 = _3042;
                        _3201 = _3044;
                        _3202 = _3046;
                        _3203 = _3048;
                        _3204 = _3050;
                        _3205 = _3206;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3044;
                frontier_phi_58_59_ladder_1 = _3050;
                frontier_phi_58_59_ladder_2 = _3048;
                frontier_phi_58_59_ladder_3 = _3046;
                frontier_phi_58_59_ladder_4 = _3042;
                frontier_phi_58_59_ladder_5 = _3040;
            }
            else
            {
                frontier_phi_58_59_ladder = _2922;
                frontier_phi_58_59_ladder_1 = _2928;
                frontier_phi_58_59_ladder_2 = _2926;
                frontier_phi_58_59_ladder_3 = _2924;
                frontier_phi_58_59_ladder_4 = _2920;
                frontier_phi_58_59_ladder_5 = _2918;
            }
            _3039 = frontier_phi_58_59_ladder_5;
            _3041 = frontier_phi_58_59_ladder_4;
            _3043 = frontier_phi_58_59_ladder;
            _3045 = frontier_phi_58_59_ladder_3;
            _3047 = frontier_phi_58_59_ladder_2;
            _3049 = frontier_phi_58_59_ladder_1;
        }
        float _3054 = isnan(1.0) ? _1065 : (isnan(_1065) ? 1.0 : min(_1065, 1.0));
        _2830 = (_3054 * _3045) + _2266;
        _2832 = (_3054 * _3047) + _2268;
        _2834 = (_3054 * _3049) + _2270;
        _2836 = ((_3039 * _1049) * _3054) + _2611;
        _2838 = ((_3041 * _1051) * _3054) + _2613;
        _2840 = ((_3043 * _1052) * _3054) + _2615;
    }
    else
    {
        _2830 = _2266;
        _2832 = _2268;
        _2834 = _2270;
        _2836 = _2611;
        _2838 = _2613;
        _2840 = _2615;
    }
    float _4845 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _4856 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _4867 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2857 = ((isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2830 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1065))) + ((_2836 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1903)) * cbPerFrame._m0[3u].x);
    float _2858 = ((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2832 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1065))) + ((_2838 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1903)) * cbPerFrame._m0[3u].x);
    float _2859 = ((isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2834 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1065))) + ((_2840 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1903)) * cbPerFrame._m0[3u].x);
    uint _2860 = _287 + 6u;
    float _2868 = _987 / cbSceneParam._m0[86u].x;
    float _2869 = _988 / cbSceneParam._m0[86u].y;
    vec4 _2883 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, (log2((isnan(cbSceneParam._m0[77u].w) ? _910 : (isnan(_910) ? cbSceneParam._m0[77u].w : min(_910, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2885 = _2883.x;
    float _2886 = _2883.y;
    float _2887 = _2883.z;
    float _2888 = _2883.w;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_910 > cbSceneParam._m0[78u].w)
    {
        float _2943 = isnan(_910) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _910 : min(cbSceneParam._m0[80u].w, _910));
        float _2944 = _2943 / _910;
        float _2955 = _2944 * _960;
        float _2956 = _961 * _2944;
        float _2957 = (-0.0) - _2956;
        float _2959 = _2944 * _962;
        float _2961 = (cbSceneParam._m0[77u].w * _2957) / _2943;
        float _2962 = _2961 + cbSceneParam._m0[79u].w;
        float _2963 = cbSceneParam._m0[79u].w - _2956;
        float _2969 = sqrt(((_2955 * _2955) + (_2956 * _2956)) + (_2959 * _2959));
        float _2972 = (1.0 - (cbSceneParam._m0[77u].w / _2943)) * _2969;
        float _2977 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2979 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3156;
        if (abs((_2957 - _2961) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3156 = ((((_2962 > 0.0) ? exp2(_2977 * _2962) : (2.0 - exp2(_2979 * _2962))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2972;
        }
        else
        {
            float _3100 = 1.0 / cbSceneParam._m0[80u].x;
            float _3101 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : max(_2962, _2963));
            float _3102 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : min(_2962, _2963));
            float _3111 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : min(_3101, 0.0));
            float _3112 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : min(_3102, 0.0));
            _3156 = ((abs(_2969 / _2957) * cbSceneParam._m0[80u].y) * ((((_3111 - _3112) * 2.0) - ((exp2(_2977 * (isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0)))) - exp2(_2977 * (isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))))) * _3100)) - ((exp2(_2979 * _3111) - exp2(_2979 * _3112)) * _3100))) + (_2972 * cbSceneParam._m0[80u].z);
        }
        vec4 _3158 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2868, _2869, 1.0), 0.0);
        float _3167 = exp2((_3156 * (-1.44269502162933349609375)) * (1.0 - _3158.w));
        float _3168 = log2(_3167);
        float _3184 = log2(_2888);
        _2981 = (exp2(_3184 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].x)) * _3158.x) / cbSceneParam._m0[78u].x)) + _2885;
        _2983 = (exp2(_3184 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].y)) * _3158.y) / cbSceneParam._m0[78u].y)) + _2886;
        _2985 = (exp2(_3184 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3168 * cbSceneParam._m0[78u].z)) * _3158.z) / cbSceneParam._m0[78u].z)) + _2887;
        _2987 = _3167 * _2888;
    }
    else
    {
        _2981 = _2885;
        _2983 = _2886;
        _2985 = _2887;
        _2987 = _2888;
    }
    bool _3194;
    vec4 _2997;
    vec4 _3019;
    float _3021;
    float _3025;
    float _3026;
    float _3027;
    float _3028;
    bool _3038;
    for (;;)
    {
        _2997 = cbMatDynParam._m0[0u];
        float _2999 = roundEven(_2997.y);
        bool _3000 = _2999 == 3.0;
        float _3001 = log2(_2987);
        float _3008 = exp2(_3001 * cbSceneParam._m0[78u].x) * _2857;
        float _3009 = exp2(_3001 * cbSceneParam._m0[78u].y) * _2858;
        float _3010 = exp2(_3001 * cbSceneParam._m0[78u].z) * _2859;
        float _3017 = _976 + (-0.5);
        _3019 = cbMtdParam._m0[1u];
        _3021 = _3019.y * _3017;
        float _3024 = (_2999 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3025 = _3024 * (_3000 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2981)));
        _3026 = _3024 * (_3000 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2983)));
        _3027 = _3024 * (_3000 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2985)));
        _3028 = _3017 * 0.999000012874603271484375;
        _3038 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3038)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3028) < 0.5)
            {
                _3194 = true;
                break;
            }
        }
        uint _3135 = _1025 + uint(_2997.w);
        if ((cbInstanceData._m0[_3135].w < 1.0) && ((cbInstanceData._m0[_3135].w + _3028) < 0.5))
        {
            _3194 = true;
            break;
        }
        if ((_3021 + 1.0) < _3019.x)
        {
            _3194 = true;
            break;
        }
        _3194 = false;
        break;
    }
    float _3399;
    if (_3194)
    {
        discard_state = true;
        _3399 = 0.0;
    }
    else
    {
        _3399 = cbInstanceData._m0[_2860].w;
    }
    SV_Target.x = _3025;
    SV_Target.y = _3026;
    SV_Target.z = _3027;
    SV_Target.w = _3399;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2860].w;
    discard_exit();
}


