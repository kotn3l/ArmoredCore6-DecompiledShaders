#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1268;
float _3933;
float _3934;
float _3935;
float _3936;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[23u].w) + _403) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3945 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _434 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_421 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315);
    float _437 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_421 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316);
    float _440 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_421 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317);
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _475 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _477 = _475.x;
    float _478 = _475.y;
    float _479 = _475.z;
    float _488 = ((_458.z - _479) * _421) + _479;
    float _491 = ((((_458.x - _477) * _421) + _477) * 2.0) + (-1.0);
    float _493 = ((((_458.y - _478) * _421) + _478) * 2.0) + (-1.0);
    float _494 = dot(vec2(_491, _493), vec2(_491, _493));
    float _3956 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _499 = sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _542 = _540.x;
    float _543 = 1.0 - _542;
    float _559 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_542 - _543) * cbMtdParam._m0[24u].z) + _543) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3967 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _567 = (_560 * (cbMtdParam._m0[17u].x - _434)) + _434;
    float _568 = (_560 * (cbMtdParam._m0[17u].y - _437)) + _437;
    float _569 = (_560 * (cbMtdParam._m0[17u].z - _440)) + _440;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _597 = _595.x;
    float _614 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _597) * _421) + _597;
    float _618 = ((_581.x - _614) * cbMtdParam._m0[19u].z) + _614;
    float _620 = _618 - (_618 * _560);
    float _624 = (cbMtdParam._m0[19u].w * (_515.z - _488)) + _488;
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _644 = (_637.x * 2.0) + (-1.0);
    float _645 = (_637.y * 2.0) + (-1.0);
    float _646 = dot(vec2(_644, _645), vec2(_644, _645));
    float _3978 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _654 = (_560 * (_637.z - _624)) + _624;
    float _657 = (((_515.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _491;
    float _658 = (((_515.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _493;
    float _670 = (((_644 - _657) + (cbMtdParam._m0[21u].x * _657)) * _560) + _657;
    float _671 = (((_645 - _658) + (cbMtdParam._m0[21u].x * _658)) * _560) + _658;
    float _672 = (_560 * (sqrt(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) - _499)) + _499;
    float _674 = cbMtdParam._m0[22u].x + _515.w;
    float _677 = fma(_672, _233 * NORMAL.x, fma(_671, _240 * TANGENT.x, (_226 * _218) * _670));
    float _680 = fma(_672, _233 * NORMAL.y, fma(_671, _240 * TANGENT.y, (_226 * _219) * _670));
    float _683 = fma(_672, _233 * NORMAL.z, fma(_671, _240 * TANGENT.z, (_226 * _220) * _670));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = _687 * _677;
    float _689 = _687 * _680;
    float _690 = _687 * _683;
    float _3989 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _691 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4011 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4022 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4033 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4044 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _696 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _710 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _761 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _751);
    float _762 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _751);
    float _763 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _751);
    float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
    float _768 = _761 * _767;
    float _769 = _762 * _767;
    float _770 = _763 * _767;
    vec4 _775 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _777 = _775.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _949 = sqrt(((_761 * _761) + (_762 * _762)) + (_763 * _763));
        float _955 = (cbMatDynParam._m0[5u].x * _949) + cbMatDynParam._m0[5u].y;
        float _4055 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _960 = (cbMatDynParam._m0[5u].z * _949) + cbMatDynParam._m0[5u].w;
        float _4066 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) - _956)) + _956) < ((_777 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _788 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _789 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _807 = fma(_690, cbSceneParam._m0[5u].z, fma(_689, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _688));
    float _810 = fma(_690, cbSceneParam._m0[6u].z, fma(_689, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _688));
    float _813 = fma(_690, cbSceneParam._m0[7u].z, fma(_689, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _688));
    uint _826 = _246 + 9u;
    uint _827 = _826 + uint(cbMatDynParam._m0[0u].w);
    float _833 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_827].x;
    float _834 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_827].y;
    float _835 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_827].z;
    float _4077 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _839 = 1.0 - _696;
    float _840 = _836 * _839;
    float _841 = _837 * _839;
    float _842 = _838 * _839;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _696;
    float _848 = (_837 + (-0.039999999105930328369140625)) * _696;
    float _849 = (_838 + (-0.039999999105930328369140625)) * _696;
    float _850 = _847 + 0.039999999105930328369140625;
    float _852 = _848 + 0.039999999105930328369140625;
    float _853 = _849 + 0.039999999105930328369140625;
    vec4 _862 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _788, cbSceneParam._m0[86u].y * _789));
    float _866 = ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * TEXCOORD_5.w) * _862.x;
    float _867 = dot(vec3(_688, _689, _690), vec3(_768, _769, _770));
    float _870 = _867 * 2.0;
    float _874 = (_870 * _688) - _768;
    float _875 = (_870 * _689) - _769;
    float _876 = (_870 * _690) - _770;
    float _880 = abs(dot(vec3(_768, _769, _770), vec3(_688, _689, _690)));
    float _4110 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _882 = sqrt(_691);
    float _895 = exp2((_882 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_882 * 3.0));
    float _901 = (1.0 - _895) * ((_882 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _902 = _895 * _882;
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1267;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _992 = fma(_938, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930));
        float _996 = fma(_938, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930));
        float _1000 = fma(_938, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930));
        float _1025 = _930 + _688;
        float _1026 = _934 + _689;
        float _1027 = _938 + _690;
        float _1037 = fma(_1027, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025)) - _992;
        float _1038 = fma(_1027, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025)) - _996;
        float _1039 = fma(_1027, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025)) - _1000;
        float _1043 = inversesqrt(dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039)));
        float _1056 = ((_1043 * _1037) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_992 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1043 * _1038) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_996 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1043 * _1039) / cbModelParam._m0[34u].z) + ((((((_1000 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1095 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1061.x + (-0.5));
        float _1097 = _1095 * (_1061.y + (-0.5));
        float _1098 = _1095 * (_1061.z + (-0.5));
        float _1105 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1068.x + (-0.5));
        float _1107 = _1105 * (_1068.y + (-0.5));
        float _1108 = _1105 * (_1068.z + (-0.5));
        float _1115 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1075.x + (-0.5));
        float _1117 = _1115 * (_1075.y + (-0.5));
        float _1118 = _1115 * (_1075.z + (-0.5));
        float _1125 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1082.x + (-0.5));
        float _1127 = _1125 * (_1082.y + (-0.5));
        float _1128 = _1125 * (_1082.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1149 = (dot(vec3(_688, _689, _690), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1159 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _4158 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1161 + 1.0))) + _1166) * _1129;
        float _1176 = _1097 * 0.5;
        float _1177 = _1107 * 0.5;
        float _1178 = _1117 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_688, _689, _690), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _4191 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1203 + 1.0))) + _1208) * _1130;
        float _1218 = _1098 * 0.5;
        float _1219 = _1108 * 0.5;
        float _1220 = _1118 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_688, _689, _690), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4224 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1245 + 1.0))) + _1250) * _1131;
        _1267 = _1098;
        _1269 = _1097;
        _1270 = _1096;
        _1271 = _1108;
        _1272 = _1107;
        _1273 = _1106;
        _1274 = _1118;
        _1275 = _1117;
        _1276 = _1116;
        _1277 = _1131;
        _1278 = _1130;
        _1279 = _1129;
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _1268;
        _1269 = _1268;
        _1270 = _1268;
        _1271 = _1268;
        _1272 = _1268;
        _1273 = _1268;
        _1274 = _1268;
        _1275 = _1268;
        _1276 = _1268;
        _1277 = _1268;
        _1278 = _1268;
        _1279 = _1268;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1310 = fma(_938, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930));
        float _1314 = fma(_938, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930));
        float _1318 = fma(_938, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930));
        float _1341 = _930 + _688;
        float _1342 = _934 + _689;
        float _1343 = _938 + _690;
        float _1353 = fma(_1343, cbModelParam._m0[30u].z, fma(_1342, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341)) - _1310;
        float _1354 = fma(_1343, cbModelParam._m0[31u].z, fma(_1342, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341)) - _1314;
        float _1355 = fma(_1343, cbModelParam._m0[32u].z, fma(_1342, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341)) - _1318;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1310 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1314 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[35u].z) + ((((((_1318 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1409 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1376.x + (-0.5));
        float _1411 = _1409 * (_1376.y + (-0.5));
        float _1412 = _1409 * (_1376.z + (-0.5));
        float _1419 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1383.x + (-0.5));
        float _1421 = _1419 * (_1383.y + (-0.5));
        float _1422 = _1419 * (_1383.z + (-0.5));
        float _1429 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1390.x + (-0.5));
        float _1431 = _1429 * (_1390.y + (-0.5));
        float _1432 = _1429 * (_1390.z + (-0.5));
        float _1439 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1397.x + (-0.5));
        float _1441 = _1439 * (_1397.y + (-0.5));
        float _1442 = _1439 * (_1397.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_688, _689, _690), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4287 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1473 + 1.0))) + _1478) * _1443;
        float _1488 = _1411 * 0.5;
        float _1489 = _1421 * 0.5;
        float _1490 = _1431 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_688, _689, _690), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4320 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1515 + 1.0))) + _1520) * _1444;
        float _1530 = _1412 * 0.5;
        float _1531 = _1422 * 0.5;
        float _1532 = _1432 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_688, _689, _690), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4353 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1557 + 1.0))) + _1562) * _1445;
        _1579 = _1412;
        _1580 = _1411;
        _1581 = _1410;
        _1582 = _1422;
        _1583 = _1421;
        _1584 = _1420;
        _1585 = _1432;
        _1586 = _1431;
        _1587 = _1430;
        _1588 = _1445;
        _1589 = _1444;
        _1590 = _1443;
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1268;
        _1580 = _1268;
        _1581 = _1268;
        _1582 = _1268;
        _1583 = _1268;
        _1584 = _1268;
        _1585 = _1268;
        _1586 = _1268;
        _1587 = _1268;
        _1588 = _1268;
        _1589 = _1268;
        _1590 = _1268;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1280)) + _1280;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1281)) + _1281;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1282)) + _1282;
    float _1626 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1603));
    float _1647 = _874 * 0.5;
    float _1648 = _875 * 0.5;
    float _1649 = _876 * 0.5;
    float _1650 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1653 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1656 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1690;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1663 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1267, _1271, _1274, _1277));
        float _1667 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1671 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1678 = dot(vec4(cbModelParam._m0[39u]), vec4(_1647, _1648, _1649, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1701;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1692 = dot(vec4(cbModelParam._m0[40u]), vec4(_1647, _1648, _1649, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1705 = (_1701 * cbModelParam._m0[1u].x) + (_1690 * (1.0 - cbModelParam._m0[1u].x));
    float _1715 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _691);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1715 : min(cbModelParam._m0[25u].z, _1715));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1764 = fma(_938, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930)) + cbModelParam._m0[13u].w;
        float _1768 = fma(_938, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930)) + cbModelParam._m0[14u].w;
        float _1772 = fma(_938, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930)) + cbModelParam._m0[15u].w;
        float _1775 = fma(_876, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _874));
        float _1778 = fma(_876, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _874));
        float _1781 = fma(_876, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _874));
        float _1809;
        if (_1775 > 0.0)
        {
            _1809 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1809 = frontier_phi_17_15_ladder;
        }
        float _1981;
        if (_1778 > 0.0)
        {
            _1981 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1981 = frontier_phi_26_22_ladder;
        }
        float _2276;
        if (_1781 > 0.0)
        {
            _2276 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2276 = frontier_phi_38_33_ladder;
        }
        float _2278 = isnan(_1981) ? _1809 : (isnan(_1809) ? _1981 : min(_1809, _1981));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1775) + _1764;
        float _2284 = (_2279 * _1778) + _1768;
        float _2285 = (_2279 * _1781) + _1772;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2286;
        float _2290 = _2286 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 > _2290) || ((_2284 < _2288) || ((_2283 < _2288) || (_2283 > _2290))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2285, cbModelParam._m0[9u].z, fma(_2284, cbModelParam._m0[9u].y, _2283 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2285, cbModelParam._m0[10u].z, fma(_2284, cbModelParam._m0[10u].y, _2283 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2285, cbModelParam._m0[11u].z, fma(_2284, cbModelParam._m0[11u].y, _2283 * cbModelParam._m0[11u].x))), _1716);
            frontier_phi_16_38_ladder = _2430.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2430.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2430.x * cbModelParam._m0[1u].y;
        }
        _1797 = frontier_phi_16_38_ladder_2;
        _1799 = frontier_phi_16_38_ladder_1;
        _1801 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_874, _875, _876), _1716);
        _1797 = _1785.x * cbModelParam._m0[1u].y;
        _1799 = _1785.y * cbModelParam._m0[1u].y;
        _1801 = _1785.z * cbModelParam._m0[1u].y;
    }
    float _1805 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _691);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1805 : min(cbModelParam._m0[25u].w, _1805));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1860 = fma(_938, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930)) + cbModelParam._m0[21u].w;
        float _1864 = fma(_938, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930)) + cbModelParam._m0[22u].w;
        float _1868 = fma(_938, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930)) + cbModelParam._m0[23u].w;
        float _1871 = fma(_876, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _874));
        float _1874 = fma(_876, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _874));
        float _1877 = fma(_876, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _874));
        float _1986;
        if (_1871 > 0.0)
        {
            _1986 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1986 = frontier_phi_28_24_ladder;
        }
        float _2303;
        if (_1874 > 0.0)
        {
            _2303 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2303 = frontier_phi_40_35_ladder;
        }
        float _2641;
        if (_1877 > 0.0)
        {
            _2641 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2641 = frontier_phi_50_47_ladder;
        }
        float _2643 = isnan(_2303) ? _1986 : (isnan(_1986) ? _2303 : min(_1986, _2303));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _1871) + _1860;
        float _2649 = (_2644 * _1874) + _1864;
        float _2650 = (_2644 * _1877) + _1868;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2772 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1806);
            frontier_phi_25_50_ladder = _2772.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2772.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2772.x * cbModelParam._m0[1u].z;
        }
        _1896 = frontier_phi_25_50_ladder_2;
        _1898 = frontier_phi_25_50_ladder_1;
        _1900 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_874, _875, _876), _1806);
        _1896 = _1880.x * cbModelParam._m0[1u].z;
        _1898 = _1880.y * cbModelParam._m0[1u].z;
        _1900 = _1880.z * cbModelParam._m0[1u].z;
    }
    float _1913 = (((_901 * _850) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1896 - _1797)) + _1797);
    float _1915 = (((_901 * _852) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1898 - _1799)) + _1799);
    float _1917 = (((_901 * _853) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1900 - _1801)) + _1801);
    float _1920 = fma(_1917, cbSceneParam._m0[89u].z, fma(_1915, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1917, cbSceneParam._m0[90u].z, fma(_1915, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1917, cbSceneParam._m0[91u].z, fma(_1915, cbSceneParam._m0[91u].y, _1913 * cbSceneParam._m0[91u].x));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1973 = _1960 / _1972;
    float _1974 = _1964 / _1972;
    float _1975 = _1968 / _1972;
    float _2122;
    float _2123;
    float _2124;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2002 = ((uint(_1975 > cbSceneParam._m0[59u].y) + uint(_1975 > cbSceneParam._m0[59u].x)) + uint(_1975 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2003 = _2002 + 43u;
        uint _2011 = _2002 + 44u;
        uint _2019 = _2002 + 45u;
        uint _2027 = _2002 + 46u;
        float _2038 = fma(_1972, cbSceneParam._m0[_2003].w, fma(_1968, cbSceneParam._m0[_2003].z, fma(_1964, cbSceneParam._m0[_2003].y, _1960 * cbSceneParam._m0[_2003].x)));
        float _2042 = fma(_1972, cbSceneParam._m0[_2011].w, fma(_1968, cbSceneParam._m0[_2011].z, fma(_1964, cbSceneParam._m0[_2011].y, _1960 * cbSceneParam._m0[_2011].x)));
        float _2050 = fma(_1972, cbSceneParam._m0[_2027].w, fma(_1968, cbSceneParam._m0[_2027].z, fma(_1964, cbSceneParam._m0[_2027].y, _1960 * cbSceneParam._m0[_2027].x)));
        float _2055 = cbSceneParam._m0[33u].z * _2050;
        float _2057 = cbSceneParam._m0[33u].w * _2050;
        float _2060 = fma(_1972, cbSceneParam._m0[_2019].w, fma(_1968, cbSceneParam._m0[_2019].z, fma(_1964, cbSceneParam._m0[_2019].y, _1960 * cbSceneParam._m0[_2019].x))) / _2050;
        float _2108 = (cbSceneParam._m0[33u].x - sqrt(((_1974 * _1974) + (_1973 * _1973)) + (_1975 * _1975))) * cbSceneParam._m0[33u].y;
        float _4479 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2115 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 + _2038) / _2050, (_2057 + _2042) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 + _2038) / _2050, (_2042 - _2055) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2038 - _2055) / _2050, (_2042 - _2057) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2038 - _2057) / _2050, (_2055 + _2042) / _2050), _2060), 0.0)).x), vec4(0.25)));
        _2122 = 1.0 - (_2115 * cbSceneParam._m0[34u].x);
        _2123 = 1.0 - (_2115 * cbSceneParam._m0[34u].y);
        _2124 = 1.0 - (_2115 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2122 = 1.0;
        _2123 = 1.0;
        _2124 = 1.0;
    }
    float _2188;
    float _2190;
    float _2192;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2176 = fma(_1972, cbSceneParam._m0[63u].w, fma(_1968, cbSceneParam._m0[63u].z, fma(_1964, cbSceneParam._m0[63u].y, _1960 * cbSceneParam._m0[63u].x)));
        float _2177 = fma(_1972, cbSceneParam._m0[60u].w, fma(_1968, cbSceneParam._m0[60u].z, fma(_1964, cbSceneParam._m0[60u].y, _1960 * cbSceneParam._m0[60u].x))) / _2176;
        float _2178 = fma(_1972, cbSceneParam._m0[61u].w, fma(_1968, cbSceneParam._m0[61u].z, fma(_1964, cbSceneParam._m0[61u].y, _1960 * cbSceneParam._m0[61u].x))) / _2176;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2177 >= cbSceneParam._m0[64u].x) && (_2178 >= cbSceneParam._m0[64u].y)) && (_2177 <= cbSceneParam._m0[64u].z)) && (_2178 <= cbSceneParam._m0[64u].w))
        {
            float _2316 = fma(_1972, cbSceneParam._m0[62u].w, fma(_1968, cbSceneParam._m0[62u].z, fma(_1964, cbSceneParam._m0[62u].y, _1960 * cbSceneParam._m0[62u].x))) / _2176;
            float _2320 = isnan(cbSceneParam._m0[41u].w) ? _2316 : (isnan(_2316) ? cbSceneParam._m0[41u].w : max(_2316, cbSceneParam._m0[41u].w));
            float _2363 = (cbSceneParam._m0[33u].x - sqrt(((_1974 * _1974) + (_1973 * _1973)) + (_1975 * _1975))) * cbSceneParam._m0[33u].y;
            float _4495 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
            float _2370 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2177, cbSceneParam._m0[33u].w + _2178), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2177, _2178 - cbSceneParam._m0[33u].z), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2177 - cbSceneParam._m0[33u].z, _2178 - cbSceneParam._m0[33u].w), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2177 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2178), _2320), 0.0)).x), vec4(0.25)));
            float _2374 = 1.0 - (_2370 * cbSceneParam._m0[34u].x);
            float _2375 = 1.0 - (_2370 * cbSceneParam._m0[34u].y);
            float _2376 = 1.0 - (_2370 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
            frontier_phi_37_36_ladder_1 = isnan(_2375) ? _2123 : (isnan(_2123) ? _2375 : min(_2123, _2375));
            frontier_phi_37_36_ladder_2 = isnan(_2374) ? _2122 : (isnan(_2122) ? _2374 : min(_2122, _2374));
        }
        else
        {
            frontier_phi_37_36_ladder = _2124;
            frontier_phi_37_36_ladder_1 = _2123;
            frontier_phi_37_36_ladder_2 = _2122;
        }
        _2188 = frontier_phi_37_36_ladder_2;
        _2190 = frontier_phi_37_36_ladder_1;
        _2192 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2188 = _2122;
        _2190 = _2123;
        _2192 = _2124;
    }
    uvec4 _2197 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2199 = _2197.x * 14u;
    uint _2200 = _2199 + 13u;
    float _2207 = _866 + (-1.0);
    float _2212 = (cbLight._m0[_2200].x * _2207) + 1.0;
    float _2213 = (cbLight._m0[_2200].y * _2207) + 1.0;
    float _2214 = (cbLight._m0[_2200].z * _2207) + 1.0;
    float _2215 = (cbLight._m0[_2200].w * _2207) + 1.0;
    uint _2216 = _2199 + 5u;
    float _2222 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
    uint _2226 = _2199 + 4u;
    float _2235 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2239 = _2199 | 1u;
    float _2250 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_688, _689, _690));
    float _2253 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_688, _689, _690));
    float _4531 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _4542 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2258 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * 0.3183098733425140380859375;
    float _2260 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * 0.3183098733425140380859375;
    float _2267 = ((cbLight._m0[_2216].x * _2222) * _2260) + (((cbLight._m0[_2226].x * _2188) * _2235) * _2258);
    float _2268 = ((_2222 * cbLight._m0[_2216].y) * _2260) + (((cbLight._m0[_2226].y * _2190) * _2235) * _2258);
    float _2269 = ((_2222 * cbLight._m0[_2216].z) * _2260) + (((cbLight._m0[_2226].z * _2192) * _2235) * _2258);
    uvec4 _2273 = floatBitsToUint(cbLight._m0[_2199 + 12u]);
    bool _2275 = _2273.x == 0u;
    float _2377;
    float _2379;
    float _2381;
    if (_2275)
    {
        _2377 = _2267;
        _2379 = _2268;
        _2381 = _2269;
    }
    else
    {
        uint _2385 = _2199 + 6u;
        float _2401 = (dot(vec3(cbLight._m0[_2199 + 2u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4553 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2404 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2377 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2267;
        _2379 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2268;
        _2381 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2269;
    }
    bool _2384 = _2273.y == 0u;
    float _2439;
    float _2441;
    float _2443;
    if (_2384)
    {
        _2439 = _2377;
        _2441 = _2379;
        _2443 = _2381;
    }
    else
    {
        uint _2612 = _2199 + 7u;
        float _2628 = (dot(vec3(cbLight._m0[_2199 + 3u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2629 = _2628 * _2628;
        float _4569 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2630 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2631 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2439 = (((cbLight._m0[_2612].x * 0.3183098733425140380859375) * _2630) * _2631) + _2377;
        _2441 = (((cbLight._m0[_2612].y * 0.3183098733425140380859375) * _2630) * _2631) + _2379;
        _2443 = (((cbLight._m0[_2612].z * 0.3183098733425140380859375) * _2630) * _2631) + _2381;
    }
    uint _2446 = _2199 + 8u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _691) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2199].x + _768;
    float _2462 = cbLight._m0[_2199].y + _769;
    float _2463 = cbLight._m0[_2199].z + _770;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2199].xyz));
    float _4585 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _4596 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2475 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2476 = dot(vec3(_688, _689, _690), vec3(_2468, _2469, _2470));
    float _4607 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2480 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2468, _2469, _2470));
    float _4618 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2484 = _2460 * _2460;
    float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
    float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
    float _2497 = 0.959999978542327880859375 - _847;
    float _2499 = 0.959999978542327880859375 - _848;
    float _2500 = 0.959999978542327880859375 - _849;
    float _2507 = 1.0 - _2460;
    float _2518 = (0.5 / (((_2475 * ((_2474 * _2507) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2507) + _2460) * _2474))) * _2474;
    float _4629 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2520 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
    uint _2534 = _2199 + 9u;
    float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _691) * 0.949999988079071044921875);
    float _2546 = _2545 * _2545;
    float _2547 = cbLight._m0[_2239].x + _768;
    float _2548 = cbLight._m0[_2239].y + _769;
    float _2549 = cbLight._m0[_2239].z + _770;
    float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
    float _2554 = _2553 * _2547;
    float _2555 = _2553 * _2548;
    float _2556 = _2553 * _2549;
    float _2557 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2239].xyz));
    float _4640 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2561 = dot(vec3(_688, _689, _690), vec3(_2554, _2555, _2556));
    float _4651 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2565 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2554, _2555, _2556));
    float _4662 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2569 = _2546 * _2546;
    float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
    float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) * 5.0);
    float _2587 = 1.0 - _2546;
    float _2597 = (0.5 / (((_2475 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2587) + _2546) * _2560))) * _2560;
    float _4673 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2599 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
    float _2609 = (((((_2580 * _2497) + _850) * cbLight._m0[_2534].x) * _2599) * _2222) + ((((cbLight._m0[_2446].x * _2188) * ((_2496 * _2497) + _850)) * _2520) * _2235);
    float _2610 = (((((_2580 * _2499) + _852) * cbLight._m0[_2534].y) * _2599) * _2222) + ((((cbLight._m0[_2446].y * _2190) * ((_2496 * _2499) + _852)) * _2520) * _2235);
    float _2611 = (((((_2580 * _2500) + _853) * cbLight._m0[_2534].z) * _2599) * _2222) + ((((cbLight._m0[_2446].z * _2192) * ((_2496 * _2500) + _853)) * _2520) * _2235);
    float _2667;
    float _2669;
    float _2671;
    if (_2275)
    {
        _2667 = _2609;
        _2669 = _2610;
        _2671 = _2611;
    }
    else
    {
        uint _2673 = _2199 + 2u;
        uint _2677 = _2199 + 10u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _691) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _768;
        float _2694 = cbLight._m0[_2673].y + _769;
        float _2695 = cbLight._m0[_2673].z + _770;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2673].xyz));
        float _4684 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2707 = dot(vec3(_688, _689, _690), vec3(_2700, _2701, _2702));
        float _4695 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4706 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
        float _2733 = 1.0 - _2692;
        float _2743 = (0.5 / (((_2475 * ((_2706 * _2733) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2733) + _2692) * _2706))) * _2706;
        float _4717 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2667 = (((((_2726 * _2497) + _850) * cbLight._m0[_2677].x) * _2745) * _2746) + _2609;
        _2669 = (((((_2726 * _2499) + _852) * cbLight._m0[_2677].y) * _2745) * _2746) + _2610;
        _2671 = (((((_2726 * _2500) + _853) * cbLight._m0[_2677].z) * _2745) * _2746) + _2611;
    }
    float _2777;
    float _2779;
    float _2781;
    if (_2384)
    {
        _2777 = _2667;
        _2779 = _2669;
        _2781 = _2671;
    }
    else
    {
        uint _2788 = _2199 + 3u;
        uint _2792 = _2199 + 11u;
        float _2806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2788].w)) * _691) * 0.949999988079071044921875);
        float _2807 = _2806 * _2806;
        float _2808 = cbLight._m0[_2788].x + _768;
        float _2809 = cbLight._m0[_2788].y + _769;
        float _2810 = cbLight._m0[_2788].z + _770;
        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
        float _2815 = _2814 * _2808;
        float _2816 = _2814 * _2809;
        float _2817 = _2814 * _2810;
        float _2818 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2788].xyz));
        float _4733 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2822 = dot(vec3(_688, _689, _690), vec3(_2815, _2816, _2817));
        float _4744 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2826 = dot(vec3(cbLight._m0[_2788].xyz), vec3(_2815, _2816, _2817));
        float _4755 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2830 = _2807 * _2807;
        float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
        float _2841 = exp2(log2(1.0 - (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) * 5.0);
        float _2848 = 1.0 - _2807;
        float _2858 = (0.5 / (((_2475 * ((_2821 * _2848) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2848) + _2807) * _2821))) * _2821;
        float _4766 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2860 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
        float _2861 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2777 = (((((_2841 * _2497) + _850) * cbLight._m0[_2792].x) * _2860) * _2861) + _2667;
        _2779 = (((((_2841 * _2499) + _852) * cbLight._m0[_2792].y) * _2860) * _2861) + _2669;
        _2781 = (((((_2841 * _2500) + _853) * cbLight._m0[_2792].z) * _2860) * _2861) + _2671;
    }
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    if (_2197.y == 0u)
    {
        uvec4 _2882 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2883 = _2882.x;
        uint _2894 = uint((float(_2882.y) * floor(float(uint(cbSceneParam._m0[85u].y * _789) / _2883))) + floor(float(uint(cbSceneParam._m0[85u].x * _788) / _2883)));
        float _2904 = (log2(_1975 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2905 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        uint _2908 = uint(isnan(14.0) ? _2905 : (isnan(_2905) ? 14.0 : min(_2905, 14.0)));
        uvec4 _2913 = texelFetch(g_lightClusterGridBuffer, int(((_2908 << 2u) + (_2894 << 6u)) >> 2u));
        uint _2914 = _2913.x;
        uint _2915 = _2882.z;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        if (((((1u << ((_2915 >> 4u) & 15u)) + 4294967295u) & _2914) == 0u) || ((_2915 & 240u) == 0u))
        {
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
        }
        else
        {
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            uint _3153 = 0u;
            uint _3162;
            bool _3163;
            for (;;)
            {
                _3162 = texelFetch(g_lightClassification, int((((_2908 << 5u) + (_2894 << 9u)) + (_3153 << 2u)) >> 2u)).x;
                _3163 = _3162 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3163)
                {
                    frontier_phi_71_pred = _3152;
                    frontier_phi_71_pred_1 = _3151;
                    frontier_phi_71_pred_2 = _3150;
                    frontier_phi_71_pred_3 = _3149;
                    frontier_phi_71_pred_4 = _3148;
                    frontier_phi_71_pred_5 = _3147;
                }
                else
                {
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    uint _3298;
                    _3292 = _3147;
                    _3293 = _3148;
                    _3294 = _3149;
                    _3295 = _3150;
                    _3296 = _3151;
                    _3297 = _3152;
                    _3298 = _3162;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    for (;;)
                    {
                        uint _3302 = uint(findLSB(_3298)) + (_3153 << 5u);
                        uint _3299 = (_3298 + 4294967295u) & _3298;
                        uint _3304 = _3302 * 48u;
                        vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3324 = (_3302 * 48u) + 4u;
                        vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3324)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 3u)).x));
                        uint _3343 = (_3302 * 48u) + 8u;
                        vec3 _3354 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x));
                        float _3358 = _3318.x - _1973;
                        float _3359 = _3318.y - _1974;
                        float _3360 = _3318.z - _1975;
                        float _3361 = dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360));
                        float _3364 = inversesqrt(_3361);
                        float _3365 = _3364 * _3358;
                        float _3366 = _3364 * _3359;
                        float _3367 = _3364 * _3360;
                        float _3368 = dot(vec3(_807, _810, _813), vec3(_3365, _3366, _3367));
                        float _3373 = 1.0 - (_3361 * _3318.w);
                        float _4792 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3374 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3375 = sqrt(_3361) * _3337.w;
                        float _3378 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3368) + _3379;
                        float _3385 = _3375 * _3375;
                        float _3389 = ((isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0))) * _3374) / ((_3385 * 0.699999988079071044921875) + 1.0);
                        float _3393 = (-0.0) - _1973;
                        float _3394 = (-0.0) - _1974;
                        float _3395 = (-0.0) - _1975;
                        float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                        float _3400 = _3399 * _3393;
                        float _3401 = _3399 * _3394;
                        float _3402 = _3399 * _3395;
                        float _3409 = exp2(log2(1.0 / ((_3385 * 3.5) + 5.0)) * 0.25);
                        float _3410 = 1.0 - _882;
                        float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                        float _3418 = _3417 * _3417;
                        float _3419 = _3418 * _3418;
                        float _3420 = _3400 + _3365;
                        float _3421 = _3401 + _3366;
                        float _3422 = _3402 + _3367;
                        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                        float _3430 = dot(vec3(_807, _810, _813), vec3(_3400, _3401, _3402));
                        float _4808 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3433 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3434 = dot(vec3(_807, _810, _813), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                        float _4819 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3437 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                        float _3442 = _3378 * _3418;
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3368) + _3443;
                        float _4830 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3447 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3448 = 1.0 - _3418;
                        float _3458 = (0.5 / (((_3447 * ((_3433 * _3448) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3447 * _3448) + _3418) * _3433))) * _3447;
                        float _4841 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3469 = (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0)))) / ((_3441 * _3441) * ((_3385 * 2.1991131305694580078125) + 3.141590118408203125))) * _3374;
                        _3222 = (_3389 * _3337.x) + _3295;
                        _3223 = (_3389 * _3337.y) + _3296;
                        _3224 = (_3389 * _3337.z) + _3297;
                        _3219 = (_3469 * _3354.x) + _3292;
                        _3220 = (_3469 * _3354.y) + _3293;
                        _3221 = (_3469 * _3354.z) + _3294;
                        if (_3299 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3292 = _3219;
                            _3293 = _3220;
                            _3294 = _3221;
                            _3295 = _3222;
                            _3296 = _3223;
                            _3297 = _3224;
                            _3298 = _3299;
                        }
                    }
                    frontier_phi_71_pred = _3224;
                    frontier_phi_71_pred_1 = _3223;
                    frontier_phi_71_pred_2 = _3222;
                    frontier_phi_71_pred_3 = _3221;
                    frontier_phi_71_pred_4 = _3220;
                    frontier_phi_71_pred_5 = _3219;
                }
                _3005 = frontier_phi_71_pred;
                _3003 = frontier_phi_71_pred_1;
                _3001 = frontier_phi_71_pred_2;
                _2999 = frontier_phi_71_pred_3;
                _2997 = frontier_phi_71_pred_4;
                _2995 = frontier_phi_71_pred_5;
                uint _3154 = _3153 + 1u;
                if (_3154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3147 = _2995;
                    _3148 = _2997;
                    _3149 = _2999;
                    _3150 = _3001;
                    _3151 = _3003;
                    _3152 = _3005;
                    _3153 = _3154;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
        }
        uvec4 _3008 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3009 = _3008.z;
        uint _3011 = (_3009 >> 8u) & 15u;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        if (((4294967295u << _3011) & _2914) == 0u)
        {
            _3115 = _2994;
            _3117 = _2996;
            _3119 = _2998;
            _3121 = _3000;
            _3123 = _3002;
            _3125 = _3004;
        }
        else
        {
            float _3140 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
            float _3141 = _3140 * _1973;
            float _3142 = _3140 * _1974;
            float _3143 = _3140 * _1975;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3011 < ((_3009 >> 12u) & 15u))
            {
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3126;
                float _3275 = _2994;
                float _3276 = _2996;
                float _3277 = _2998;
                float _3278 = _3000;
                float _3279 = _3002;
                float _3280 = _3004;
                uint _3281 = _3011;
                uint _3290;
                bool _3291;
                for (;;)
                {
                    _3290 = texelFetch(g_lightClassification, int((((_2908 << 5u) + (_2894 << 9u)) + (_3281 << 2u)) >> 2u)).x;
                    _3291 = _3290 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3291)
                    {
                        frontier_phi_82_pred = _3280;
                        frontier_phi_82_pred_1 = _3279;
                        frontier_phi_82_pred_2 = _3278;
                        frontier_phi_82_pred_3 = _3277;
                        frontier_phi_82_pred_4 = _3276;
                        frontier_phi_82_pred_5 = _3275;
                    }
                    else
                    {
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3496 = _3275;
                        float _3497 = _3276;
                        float _3498 = _3277;
                        float _3499 = _3278;
                        float _3500 = _3279;
                        float _3501 = _3280;
                        uint _3502 = _3290;
                        uint _3503;
                        vec4 _3528;
                        float _3529;
                        vec4 _3544;
                        vec3 _3556;
                        vec4 _3571;
                        vec4 _3587;
                        float _3633;
                        bool _3634;
                        for (;;)
                        {
                            uint _3513 = ((_3281 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3502));
                            _3503 = (_3502 + 4294967295u) & _3502;
                            uint _3515 = _3513 * 40u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3529 = _3528.w;
                            uint _3531 = (_3513 * 40u) + 4u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3513 * 40u) + 8u;
                            _3556 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x));
                            uint _3558 = (_3513 * 40u) + 16u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3574 = (_3513 * 40u) + 20u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3589 = (_3513 * 40u) + 24u;
                            vec4 _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3608 = (_3513 * 40u) + 28u;
                            vec4 _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            _3633 = fma(_1975, _3621.z, fma(_1974, _3621.y, _3621.x * _1973)) + _3621.w;
                            _3634 = !((fma(_1975, _3602.z, fma(_1974, _3602.y, _3602.x * _1973)) + _3602.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3634)
                            {
                                float _3661 = _3528.x - _1973;
                                float _3662 = _3528.y - _1974;
                                float _3663 = _3528.z - _1975;
                                float _3664 = dot(vec3(_3661, _3662, _3663), vec3(_3661, _3662, _3663));
                                float _3667 = inversesqrt(_3664);
                                float _3668 = _3667 * _3661;
                                float _3669 = _3667 * _3662;
                                float _3670 = _3667 * _3663;
                                float _3674 = 1.0 - (_3664 / (_3529 * _3529));
                                float _4852 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3679 = sqrt(_3664) * _3544.w;
                                float _3681 = 1.39999997615814208984375 / (_3679 + 1.39999997615814208984375);
                                float _3682 = _3681 * _3681;
                                float _3685 = ((1.0 - _3682) * dot(vec3(_3668, _3669, _3670), vec3(_807, _810, _813))) + _3682;
                                float _3688 = _3679 * _3679;
                                float _3692 = (fma(_1975, _3571.z, fma(_1974, _3571.y, _3571.x * _1973)) + _3571.w) / _3633;
                                float _3693 = (fma(_1975, _3587.z, fma(_1974, _3587.y, _3587.x * _1973)) + _3587.w) / _3633;
                                float _3697 = 1.0 - dot(vec2(_3692, _3693), vec2(_3692, _3693));
                                float _4868 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3698 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3699 = _3698 * (((isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0))) * _3675) / ((_3688 * 0.699999988079071044921875) + 1.0));
                                float _3711 = exp2(log2(1.0 / ((_3688 * 3.5) + 5.0)) * 0.25);
                                float _3712 = 1.0 - _882;
                                float _3719 = sqrt(1.0 - ((1.0 - (_3712 * _3712)) * (1.0 - (_3711 * _3711))));
                                float _3720 = _3719 * _3719;
                                float _3721 = _3720 * _3720;
                                float _3722 = _3668 - _3141;
                                float _3723 = _3669 - _3142;
                                float _3724 = _3670 - _3143;
                                float _3728 = inversesqrt(dot(vec3(_3722, _3723, _3724), vec3(_3722, _3723, _3724)));
                                float _3732 = dot(vec3(_807, _810, _813), vec3((-0.0) - _3141, (-0.0) - _3142, (-0.0) - _3143));
                                float _4879 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3735 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3736 = dot(vec3(_807, _810, _813), vec3(_3728 * _3722, _3728 * _3723, _3728 * _3724));
                                float _4890 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3739 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3743 = ((_3739 * _3739) * (_3721 + (-1.0))) + 1.0;
                                float _3744 = _3681 * _3720;
                                float _3745 = _3744 * _3744;
                                float _3751 = ((1.0 - _3745) * dot(vec3(_807, _810, _813), vec3(_3668, _3669, _3670))) + _3745;
                                float _4901 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3752 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3753 = 1.0 - _3720;
                                float _3763 = (0.5 / (((_3752 * ((_3735 * _3753) + _3720)) + 9.9999999392252902907785028219223e-09) + (((_3752 * _3753) + _3720) * _3735))) * _3752;
                                float _4912 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3773 = (_3698 * _3675) * (((_3721 * 3.1415927410125732421875) * (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0)))) / ((_3743 * _3743) * ((_3688 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3699 * _3544.z;
                                frontier_phi_88_pred_1 = _3699 * _3544.y;
                                frontier_phi_88_pred_2 = _3699 * _3544.x;
                                frontier_phi_88_pred_3 = _3773 * _3556.z;
                                frontier_phi_88_pred_4 = _3773 * _3556.y;
                                frontier_phi_88_pred_5 = _3773 * _3556.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3782 = frontier_phi_88_pred;
                            _3781 = frontier_phi_88_pred_1;
                            _3780 = frontier_phi_88_pred_2;
                            _3779 = frontier_phi_88_pred_3;
                            _3778 = frontier_phi_88_pred_4;
                            _3777 = frontier_phi_88_pred_5;
                            _3486 = _3780 + _3499;
                            _3487 = _3781 + _3500;
                            _3488 = _3782 + _3501;
                            _3483 = _3777 + _3496;
                            _3484 = _3778 + _3497;
                            _3485 = _3779 + _3498;
                            if (_3503 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3503;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3488;
                        frontier_phi_82_pred_1 = _3487;
                        frontier_phi_82_pred_2 = _3486;
                        frontier_phi_82_pred_3 = _3485;
                        frontier_phi_82_pred_4 = _3484;
                        frontier_phi_82_pred_5 = _3483;
                    }
                    _3126 = frontier_phi_82_pred;
                    _3124 = frontier_phi_82_pred_1;
                    _3122 = frontier_phi_82_pred_2;
                    _3120 = frontier_phi_82_pred_3;
                    _3118 = frontier_phi_82_pred_4;
                    _3116 = frontier_phi_82_pred_5;
                    uint _3282 = _3281 + 1u;
                    if (_3282 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3275 = _3116;
                        _3276 = _3118;
                        _3277 = _3120;
                        _3278 = _3122;
                        _3279 = _3124;
                        _3280 = _3126;
                        _3281 = _3282;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3122;
                frontier_phi_63_64_ladder_1 = _3126;
                frontier_phi_63_64_ladder_2 = _3124;
                frontier_phi_63_64_ladder_3 = _3120;
                frontier_phi_63_64_ladder_4 = _3118;
                frontier_phi_63_64_ladder_5 = _3116;
            }
            else
            {
                frontier_phi_63_64_ladder = _3000;
                frontier_phi_63_64_ladder_1 = _3004;
                frontier_phi_63_64_ladder_2 = _3002;
                frontier_phi_63_64_ladder_3 = _2998;
                frontier_phi_63_64_ladder_4 = _2996;
                frontier_phi_63_64_ladder_5 = _2994;
            }
            _3115 = frontier_phi_63_64_ladder_5;
            _3117 = frontier_phi_63_64_ladder_4;
            _3119 = frontier_phi_63_64_ladder_3;
            _3121 = frontier_phi_63_64_ladder;
            _3123 = frontier_phi_63_64_ladder_2;
            _3125 = frontier_phi_63_64_ladder_1;
        }
        float _3130 = isnan(1.0) ? _866 : (isnan(_866) ? 1.0 : min(_866, 1.0));
        _2927 = (_3130 * _3121) + _2439;
        _2929 = (_3130 * _3123) + _2441;
        _2931 = (_3130 * _3125) + _2443;
        _2933 = ((_3115 * _850) * _3130) + _2777;
        _2935 = ((_3117 * _852) * _3130) + _2779;
        _2937 = ((_3119 * _853) * _3130) + _2781;
    }
    else
    {
        _2927 = _2439;
        _2929 = _2441;
        _2931 = _2443;
        _2933 = _2777;
        _2935 = _2779;
        _2937 = _2781;
    }
    float _4928 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4939 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4950 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _2954 = ((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2927 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _866))) + ((_2933 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2955 = ((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2929 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _866))) + ((_2935 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2956 = ((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2931 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _866))) + ((_2937 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    uint _2957 = _246 + 6u;
    float _2965 = _788 / cbSceneParam._m0[86u].x;
    float _2966 = _789 / cbSceneParam._m0[86u].y;
    vec4 _2980 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, (log2((isnan(cbSceneParam._m0[77u].w) ? _710 : (isnan(_710) ? cbSceneParam._m0[77u].w : min(_710, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2982 = _2980.x;
    float _2983 = _2980.y;
    float _2984 = _2980.z;
    float _2985 = _2980.w;
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    if (_710 > cbSceneParam._m0[78u].w)
    {
        float _3019 = isnan(_710) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _710 : min(cbSceneParam._m0[80u].w, _710));
        float _3020 = _3019 / _710;
        float _3031 = _3020 * _761;
        float _3032 = _762 * _3020;
        float _3033 = (-0.0) - _3032;
        float _3035 = _3020 * _763;
        float _3037 = (cbSceneParam._m0[77u].w * _3033) / _3019;
        float _3038 = _3037 + cbSceneParam._m0[79u].w;
        float _3039 = cbSceneParam._m0[79u].w - _3032;
        float _3045 = sqrt(((_3031 * _3031) + (_3032 * _3032)) + (_3035 * _3035));
        float _3048 = (1.0 - (cbSceneParam._m0[77u].w / _3019)) * _3045;
        float _3053 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3055 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3232;
        if (abs((_3033 - _3037) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3232 = ((((_3038 > 0.0) ? exp2(_3053 * _3038) : (2.0 - exp2(_3055 * _3038))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3048;
        }
        else
        {
            float _3176 = 1.0 / cbSceneParam._m0[80u].x;
            float _3177 = isnan(_3039) ? _3038 : (isnan(_3038) ? _3039 : max(_3038, _3039));
            float _3178 = isnan(_3039) ? _3038 : (isnan(_3038) ? _3039 : min(_3038, _3039));
            float _3187 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : min(_3177, 0.0));
            float _3188 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : min(_3178, 0.0));
            _3232 = ((abs(_3045 / _3033) * cbSceneParam._m0[80u].y) * ((((_3187 - _3188) * 2.0) - ((exp2(_3053 * (isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0)))) - exp2(_3053 * (isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0))))) * _3176)) - ((exp2(_3055 * _3187) - exp2(_3055 * _3188)) * _3176))) + (_3048 * cbSceneParam._m0[80u].z);
        }
        vec4 _3234 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2965, _2966, 1.0), 0.0);
        float _3243 = exp2((_3232 * (-1.44269502162933349609375)) * (1.0 - _3234.w));
        float _3244 = log2(_3243);
        float _3260 = log2(_2985);
        _3057 = (exp2(_3260 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3244 * cbSceneParam._m0[78u].x)) * _3234.x) / cbSceneParam._m0[78u].x)) + _2982;
        _3059 = (exp2(_3260 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3244 * cbSceneParam._m0[78u].y)) * _3234.y) / cbSceneParam._m0[78u].y)) + _2983;
        _3061 = (exp2(_3260 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3244 * cbSceneParam._m0[78u].z)) * _3234.z) / cbSceneParam._m0[78u].z)) + _2984;
        _3063 = _3243 * _2985;
    }
    else
    {
        _3057 = _2982;
        _3059 = _2983;
        _3061 = _2984;
        _3063 = _2985;
    }
    bool _3270;
    vec4 _3073;
    vec4 _3095;
    float _3097;
    float _3101;
    float _3102;
    float _3103;
    float _3104;
    bool _3114;
    for (;;)
    {
        _3073 = cbMatDynParam._m0[0u];
        float _3075 = roundEven(_3073.y);
        bool _3076 = _3075 == 3.0;
        float _3077 = log2(_3063);
        float _3084 = exp2(_3077 * cbSceneParam._m0[78u].x) * _2954;
        float _3085 = exp2(_3077 * cbSceneParam._m0[78u].y) * _2955;
        float _3086 = exp2(_3077 * cbSceneParam._m0[78u].z) * _2956;
        float _3093 = _777 + (-0.5);
        _3095 = cbMtdParam._m0[1u];
        _3097 = _3095.y * _3093;
        float _3100 = (_3075 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3101 = _3100 * (_3076 ? _3084 : (_3084 + (cbSceneParam._m0[72u].w * _3057)));
        _3102 = _3100 * (_3076 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3059)));
        _3103 = _3100 * (_3076 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3061)));
        _3104 = _3093 * 0.999000012874603271484375;
        _3114 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3114)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _3104) < 0.5)
            {
                _3270 = true;
                break;
            }
        }
        uint _3211 = _826 + uint(_3073.w);
        if ((cbInstanceData._m0[_3211].w < 1.0) && ((cbInstanceData._m0[_3211].w + _3104) < 0.5))
        {
            _3270 = true;
            break;
        }
        if ((_3097 + 1.0) < _3095.x)
        {
            _3270 = true;
            break;
        }
        _3270 = false;
        break;
    }
    float _3474;
    if (_3270)
    {
        discard_state = true;
        _3474 = 0.0;
    }
    else
    {
        _3474 = cbInstanceData._m0[_2957].w;
    }
    SV_Target.x = _3101;
    SV_Target.y = _3102;
    SV_Target.z = _3103;
    SV_Target.w = _3474;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2957].w;
    discard_exit();
}


