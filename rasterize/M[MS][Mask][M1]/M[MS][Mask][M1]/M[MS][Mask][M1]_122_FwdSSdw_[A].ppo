#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1528;
float _3930;
float _3931;
float _3932;
float _3933;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _258 + 1u;
    uint _268 = _258 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _368.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3942 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _446 = (_439 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327;
    float _447 = (_439 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328;
    float _448 = (_439 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _368.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3953 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _559 = _557.x;
    float _569 = dot(vec4(_559, _557.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _581 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _368.z) * 2.0) - ((((_559 - _569) * cbMtdParam._m0[23u].w) + _569) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3964 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _595 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_582 * ((_540.x * cbMtdParam._m0[14u].x) - _519)) + _519);
    float _598 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_582 * ((_540.y * cbMtdParam._m0[14u].y) - _520)) + _520);
    float _601 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_582 * ((_540.z * cbMtdParam._m0[14u].z) - _521)) + _521);
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _638 = _636.x;
    float _639 = _636.y;
    float _640 = _636.z;
    float _647 = ((_619.x - _638) * _439) + _638;
    float _648 = ((_619.y - _639) * _439) + _639;
    float _649 = ((_619.z - _640) * _439) + _640;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _672 = ((_661.x - _647) * _512) + _647;
    float _673 = ((_661.y - _648) * _512) + _648;
    float _674 = ((_661.z - _649) * _512) + _649;
    vec4 _686 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _699 = ((_686.z - _674) * _582) + _674;
    float _702 = ((((_686.x - _672) * _582) + _672) * 2.0) + (-1.0);
    float _704 = ((((_686.y - _673) * _582) + _673) * 2.0) + (-1.0);
    float _705 = dot(vec2(_702, _704), vec2(_702, _704));
    float _3975 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _710 = sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _736 = (((_724.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _702;
    float _737 = (((_724.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _704;
    float _740 = fma(_710, _246, fma(_737, _253, _736 * _239));
    float _743 = fma(_710, _247, fma(_737, _254, _736 * _240));
    float _746 = fma(_710, _248, fma(_737, _255, _736 * _241));
    float _750 = inversesqrt(dot(vec3(_740, _743, _746), vec3(_740, _743, _746)));
    vec4 _777 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _779 = _777.x;
    float _780 = 1.0 - _779;
    float _788 = (cbMtdParam._m0[19u].x + dot(vec4(_750 * _740, _750 * _743, _750 * _746, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_779 - _780) * cbMtdParam._m0[24u].z) + _780) * cbMtdParam._m0[21u].z);
    float _3986 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _789 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _796 = (_789 * (cbMtdParam._m0[17u].x - _595)) + _595;
    float _797 = (_789 * (cbMtdParam._m0[17u].y - _598)) + _598;
    float _798 = (_789 * (cbMtdParam._m0[17u].z - _601)) + _601;
    vec4 _824 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _826 = _824.x;
    float _843 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _826) * _439) + _826;
    float _860 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _843) * _512) + _843;
    float _878 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _278) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _279) + cbTextureTilingScale._m0[10u].w)).x - _860) * _582) + _860;
    float _882 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _878) * cbMtdParam._m0[19u].z) + _878;
    float _884 = _882 - (_882 * _789);
    float _888 = (cbMtdParam._m0[19u].w * (_724.z - _699)) + _699;
    vec4 _901 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _908 = (_901.x * 2.0) + (-1.0);
    float _909 = (_901.y * 2.0) + (-1.0);
    float _910 = dot(vec2(_908, _909), vec2(_908, _909));
    float _3997 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _918 = ((_901.z - _888) * _789) + _888;
    float _928 = ((sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) - _710) * _789) + _710;
    float _931 = (((_908 - _736) * _789) + _736) + (cbMtdParam._m0[21u].x * _736);
    float _932 = (((_909 - _737) * _789) + _737) + (cbMtdParam._m0[21u].x * _737);
    float _934 = cbMtdParam._m0[22u].x + _724.w;
    float _937 = fma(_928, _246, fma(_932, _253, _931 * _239));
    float _940 = fma(_928, _247, fma(_932, _254, _931 * _240));
    float _943 = fma(_928, _248, fma(_932, _255, _931 * _241));
    float _947 = inversesqrt(dot(vec3(_937, _940, _943), vec3(_937, _940, _943)));
    float _948 = _947 * _937;
    float _949 = _947 * _940;
    float _950 = _947 * _943;
    float _4008 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _951 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4030 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4041 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4052 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4063 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _956 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _970 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1020 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1010);
    float _1021 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1010);
    float _1022 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1010);
    float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
    float _1027 = _1020 * _1026;
    float _1028 = _1021 * _1026;
    float _1029 = _1022 * _1026;
    vec4 _1034 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1036 = _1034.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1208 = sqrt(((_1020 * _1020) + (_1021 * _1021)) + (_1022 * _1022));
        float _1214 = (cbMatDynParam._m0[5u].x * _1208) + cbMatDynParam._m0[5u].y;
        float _4074 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1219 = (cbMatDynParam._m0[5u].z * _1208) + cbMatDynParam._m0[5u].w;
        float _4085 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) - _1215)) + _1215) < ((_1036 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1047 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1048 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1066 = fma(_950, cbSceneParam._m0[5u].z, fma(_949, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _948));
    float _1069 = fma(_950, cbSceneParam._m0[6u].z, fma(_949, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _948));
    float _1072 = fma(_950, cbSceneParam._m0[7u].z, fma(_949, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _948));
    uint _1085 = _258 + 9u;
    uint _1086 = _1085 + uint(cbMatDynParam._m0[0u].w);
    float _1092 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_1086].x;
    float _1093 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_1086].y;
    float _1094 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1086].z;
    float _4096 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1095 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1098 = 1.0 - _956;
    float _1099 = _1095 * _1098;
    float _1100 = _1096 * _1098;
    float _1101 = _1097 * _1098;
    float _1106 = (_1095 + (-0.039999999105930328369140625)) * _956;
    float _1107 = (_1096 + (-0.039999999105930328369140625)) * _956;
    float _1108 = (_1097 + (-0.039999999105930328369140625)) * _956;
    float _1109 = _1106 + 0.039999999105930328369140625;
    float _1111 = _1107 + 0.039999999105930328369140625;
    float _1112 = _1108 + 0.039999999105930328369140625;
    vec4 _1121 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1047, cbSceneParam._m0[86u].y * _1048));
    float _1125 = ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * TEXCOORD_5.w) * _1121.x;
    float _1126 = dot(vec3(_948, _949, _950), vec3(_1027, _1028, _1029));
    float _1129 = _1126 * 2.0;
    float _1133 = (_1129 * _948) - _1027;
    float _1134 = (_1129 * _949) - _1028;
    float _1135 = (_1129 * _950) - _1029;
    float _1139 = abs(dot(vec3(_1027, _1028, _1029), vec3(_948, _949, _950)));
    float _4129 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1141 = sqrt(_951);
    float _1154 = exp2((_1141 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1141 * 3.0));
    float _1160 = (1.0 - _1154) * ((_1141 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1161 = _1154 * _1141;
    float _1189 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1527;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1252 = fma(_1197, cbModelParam._m0[26u].z, fma(_1193, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1189));
        float _1256 = fma(_1197, cbModelParam._m0[27u].z, fma(_1193, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1189));
        float _1260 = fma(_1197, cbModelParam._m0[28u].z, fma(_1193, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1189));
        float _1285 = _1189 + _948;
        float _1286 = _1193 + _949;
        float _1287 = _1197 + _950;
        float _1297 = fma(_1287, cbModelParam._m0[26u].z, fma(_1286, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1285)) - _1252;
        float _1298 = fma(_1287, cbModelParam._m0[27u].z, fma(_1286, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1285)) - _1256;
        float _1299 = fma(_1287, cbModelParam._m0[28u].z, fma(_1286, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1285)) - _1260;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1252 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1256 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[34u].z) + ((((((_1260 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1355 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1321.x + (-0.5));
        float _1357 = _1355 * (_1321.y + (-0.5));
        float _1358 = _1355 * (_1321.z + (-0.5));
        float _1365 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1328.x + (-0.5));
        float _1367 = _1365 * (_1328.y + (-0.5));
        float _1368 = _1365 * (_1328.z + (-0.5));
        float _1375 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1335.x + (-0.5));
        float _1377 = _1375 * (_1335.y + (-0.5));
        float _1378 = _1375 * (_1335.z + (-0.5));
        float _1385 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1342.x + (-0.5));
        float _1387 = _1385 * (_1342.y + (-0.5));
        float _1388 = _1385 * (_1342.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1409 = (dot(vec3(_948, _949, _950), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1419 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4177 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1421 + 1.0))) + _1426) * _1389;
        float _1436 = _1357 * 0.5;
        float _1437 = _1367 * 0.5;
        float _1438 = _1377 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_948, _949, _950), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4210 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1463 + 1.0))) + _1468) * _1390;
        float _1478 = _1358 * 0.5;
        float _1479 = _1368 * 0.5;
        float _1480 = _1378 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_948, _949, _950), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4243 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1505 + 1.0))) + _1510) * _1391;
        _1527 = _1358;
        _1529 = _1357;
        _1530 = _1356;
        _1531 = _1368;
        _1532 = _1367;
        _1533 = _1366;
        _1534 = _1378;
        _1535 = _1377;
        _1536 = _1376;
        _1537 = _1391;
        _1538 = _1390;
        _1539 = _1389;
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1528;
        _1529 = _1528;
        _1530 = _1528;
        _1531 = _1528;
        _1532 = _1528;
        _1533 = _1528;
        _1534 = _1528;
        _1535 = _1528;
        _1536 = _1528;
        _1537 = _1528;
        _1538 = _1528;
        _1539 = _1528;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1568 = fma(_1197, cbModelParam._m0[30u].z, fma(_1193, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189));
        float _1572 = fma(_1197, cbModelParam._m0[31u].z, fma(_1193, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189));
        float _1576 = fma(_1197, cbModelParam._m0[32u].z, fma(_1193, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189));
        float _1599 = _1189 + _948;
        float _1600 = _1193 + _949;
        float _1601 = _1197 + _950;
        float _1611 = fma(_1601, cbModelParam._m0[30u].z, fma(_1600, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1599)) - _1568;
        float _1612 = fma(_1601, cbModelParam._m0[31u].z, fma(_1600, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1599)) - _1572;
        float _1613 = fma(_1601, cbModelParam._m0[32u].z, fma(_1600, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1599)) - _1576;
        float _1617 = inversesqrt(dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613)));
        float _1630 = ((_1617 * _1611) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1568 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1617 * _1612) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1572 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1632 = ((_1617 * _1613) / cbModelParam._m0[35u].z) + ((((((_1576 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1630, _1631, _1632), 0.0);
        float _1667 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1634.x + (-0.5));
        float _1669 = _1667 * (_1634.y + (-0.5));
        float _1670 = _1667 * (_1634.z + (-0.5));
        float _1677 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1678 = _1677 * (_1641.x + (-0.5));
        float _1679 = _1677 * (_1641.y + (-0.5));
        float _1680 = _1677 * (_1641.z + (-0.5));
        float _1687 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1688 = _1687 * (_1648.x + (-0.5));
        float _1689 = _1687 * (_1648.y + (-0.5));
        float _1690 = _1687 * (_1648.z + (-0.5));
        float _1697 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1698 = _1697 * (_1655.x + (-0.5));
        float _1699 = _1697 * (_1655.y + (-0.5));
        float _1700 = _1697 * (_1655.z + (-0.5));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = _1668 * 0.5;
        float _1705 = _1678 * 0.5;
        float _1706 = _1688 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_948, _949, _950), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4306 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1731 + 1.0))) + _1736) * _1701;
        float _1746 = _1669 * 0.5;
        float _1747 = _1679 * 0.5;
        float _1748 = _1689 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_948, _949, _950), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4339 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1773 + 1.0))) + _1778) * _1702;
        float _1788 = _1670 * 0.5;
        float _1789 = _1680 * 0.5;
        float _1790 = _1690 * 0.5;
        float _1791 = dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790));
        float _1796 = (_1791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1791);
        float _1804 = (dot(vec3(_948, _949, _950), vec3(_1796 * _1788, _1796 * _1789, _1796 * _1790)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1813 = sqrt(((_1789 * _1789) + (_1788 * _1788)) + (_1790 * _1790)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1815 = _1814 * 2.0;
        float _1819 = (1.0 - _1814) / (_1814 + 1.0);
        float _4372 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1829 = ((((1.0 - _1820) * (_1815 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1815 + 1.0))) + _1820) * _1703;
        _1837 = _1670;
        _1838 = _1669;
        _1839 = _1668;
        _1840 = _1680;
        _1841 = _1679;
        _1842 = _1678;
        _1843 = _1690;
        _1844 = _1689;
        _1845 = _1688;
        _1846 = _1703;
        _1847 = _1702;
        _1848 = _1701;
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)));
    }
    else
    {
        _1837 = _1528;
        _1838 = _1528;
        _1839 = _1528;
        _1840 = _1528;
        _1841 = _1528;
        _1842 = _1528;
        _1843 = _1528;
        _1844 = _1528;
        _1845 = _1528;
        _1846 = _1528;
        _1847 = _1528;
        _1848 = _1528;
        _1849 = 0.0;
        _1850 = 0.0;
        _1851 = 0.0;
    }
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1540)) + _1540;
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1541)) + _1541;
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1542)) + _1542;
    float _1884 = fma(_1863, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1861 * cbSceneParam._m0[89u].x));
    float _1887 = fma(_1863, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1861 * cbSceneParam._m0[90u].x));
    float _1890 = fma(_1863, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1861));
    float _1905 = _1133 * 0.5;
    float _1906 = _1134 * 0.5;
    float _1907 = _1135 * 0.5;
    float _1908 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1911 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1914 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1948;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1921 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1527, _1531, _1534, _1537));
        float _1925 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1529, _1532, _1535, _1538));
        float _1929 = dot(vec4(_1905, _1906, _1907, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1936 = dot(vec4(cbModelParam._m0[39u]), vec4(_1905, _1906, _1907, 1.0));
        _1948 = dot(vec3(isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)), isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1936) ? 0.0 : (isnan(0.0) ? _1936 : max(0.0, _1936))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1948 = 1.0;
    }
    float _1959;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1950 = dot(vec4(cbModelParam._m0[40u]), vec4(_1905, _1906, _1907, 1.0));
        _1959 = dot(vec3(isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1950) ? 0.0 : (isnan(0.0) ? _1950 : max(0.0, _1950))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1959 = 1.0;
    }
    float _1963 = (_1959 * cbModelParam._m0[1u].x) + (_1948 * (1.0 - cbModelParam._m0[1u].x));
    float _1973 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _951);
    float _1974 = isnan(_1973) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1973 : min(cbModelParam._m0[25u].z, _1973));
    float _2054;
    float _2056;
    float _2058;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2021 = fma(_1197, cbModelParam._m0[13u].z, fma(_1193, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1189)) + cbModelParam._m0[13u].w;
        float _2025 = fma(_1197, cbModelParam._m0[14u].z, fma(_1193, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1189)) + cbModelParam._m0[14u].w;
        float _2029 = fma(_1197, cbModelParam._m0[15u].z, fma(_1193, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1189)) + cbModelParam._m0[15u].w;
        float _2032 = fma(_1135, cbModelParam._m0[13u].z, fma(_1134, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1133));
        float _2035 = fma(_1135, cbModelParam._m0[14u].z, fma(_1134, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1133));
        float _2038 = fma(_1135, cbModelParam._m0[15u].z, fma(_1134, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1133));
        float _2066;
        if (_2032 > 0.0)
        {
            _2066 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2066 = frontier_phi_17_15_ladder;
        }
        float _2290;
        if (_2035 > 0.0)
        {
            _2290 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2290 = frontier_phi_26_22_ladder;
        }
        float _2547;
        if (_2038 > 0.0)
        {
            _2547 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2547 = frontier_phi_38_33_ladder;
        }
        float _2549 = isnan(_2290) ? _2066 : (isnan(_2066) ? _2290 : min(_2066, _2290));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _2032) + _2021;
        float _2555 = (_2550 * _2035) + _2025;
        float _2556 = (_2550 * _2038) + _2029;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2557;
        float _2561 = _2557 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 > _2561) || ((_2555 < _2559) || ((_2554 < _2559) || (_2554 > _2561))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2556, cbModelParam._m0[9u].z, fma(_2555, cbModelParam._m0[9u].y, _2554 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2556, cbModelParam._m0[10u].z, fma(_2555, cbModelParam._m0[10u].y, _2554 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2556, cbModelParam._m0[11u].z, fma(_2555, cbModelParam._m0[11u].y, _2554 * cbModelParam._m0[11u].x))), _1974);
            frontier_phi_16_38_ladder = _2684.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2684.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2684.x * cbModelParam._m0[1u].y;
        }
        _2054 = frontier_phi_16_38_ladder_2;
        _2056 = frontier_phi_16_38_ladder_1;
        _2058 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2042 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1133, _1134, _1135), _1974);
        _2054 = _2042.x * cbModelParam._m0[1u].y;
        _2056 = _2042.y * cbModelParam._m0[1u].y;
        _2058 = _2042.z * cbModelParam._m0[1u].y;
    }
    float _2062 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _951);
    float _2063 = isnan(_2062) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2062 : min(cbModelParam._m0[25u].w, _2062));
    float _2153;
    float _2155;
    float _2157;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2117 = fma(_1197, cbModelParam._m0[21u].z, fma(_1193, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1189)) + cbModelParam._m0[21u].w;
        float _2121 = fma(_1197, cbModelParam._m0[22u].z, fma(_1193, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1189)) + cbModelParam._m0[22u].w;
        float _2125 = fma(_1197, cbModelParam._m0[23u].z, fma(_1193, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1189)) + cbModelParam._m0[23u].w;
        float _2128 = fma(_1135, cbModelParam._m0[21u].z, fma(_1134, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1133));
        float _2131 = fma(_1135, cbModelParam._m0[22u].z, fma(_1134, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1133));
        float _2134 = fma(_1135, cbModelParam._m0[23u].z, fma(_1134, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1133));
        float _2295;
        if (_2128 > 0.0)
        {
            _2295 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2295 = frontier_phi_28_24_ladder;
        }
        float _2574;
        if (_2131 > 0.0)
        {
            _2574 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2574 = frontier_phi_40_35_ladder;
        }
        float _2787;
        if (_2134 > 0.0)
        {
            _2787 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2787 = frontier_phi_49_46_ladder;
        }
        float _2789 = isnan(_2574) ? _2295 : (isnan(_2295) ? _2574 : min(_2295, _2574));
        float _2790 = isnan(_2787) ? _2789 : (isnan(_2789) ? _2787 : min(_2789, _2787));
        float _2794 = (_2790 * _2128) + _2117;
        float _2795 = (_2790 * _2131) + _2121;
        float _2796 = (_2790 * _2134) + _2125;
        float _2797 = _2790 * 9.9999997473787516355514526367188e-05;
        float _2798 = (-1.0) - _2797;
        float _2800 = _2797 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2796 > _2800) || ((_2796 < _2798) || ((_2795 > _2800) || ((_2795 < _2798) || ((_2794 < _2798) || (_2794 > _2800))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2796, cbModelParam._m0[17u].z, fma(_2795, cbModelParam._m0[17u].y, _2794 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2796, cbModelParam._m0[18u].z, fma(_2795, cbModelParam._m0[18u].y, _2794 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2796, cbModelParam._m0[19u].z, fma(_2795, cbModelParam._m0[19u].y, _2794 * cbModelParam._m0[19u].x))), _2063);
            frontier_phi_25_49_ladder = _2995.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2995.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2995.x * cbModelParam._m0[1u].z;
        }
        _2153 = frontier_phi_25_49_ladder_2;
        _2155 = frontier_phi_25_49_ladder_1;
        _2157 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2137 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1133, _1134, _1135), _2063);
        _2153 = _2137.x * cbModelParam._m0[1u].z;
        _2155 = _2137.y * cbModelParam._m0[1u].z;
        _2157 = _2137.z * cbModelParam._m0[1u].z;
    }
    float _2170 = (((_1160 * _1109) + _1161) * _1125) * ((cbModelParam._m0[1u].w * (_2153 - _2054)) + _2054);
    float _2172 = (((_1160 * _1111) + _1161) * _1125) * ((cbModelParam._m0[1u].w * (_2155 - _2056)) + _2056);
    float _2174 = (((_1160 * _1112) + _1161) * _1125) * ((cbModelParam._m0[1u].w * (_2157 - _2058)) + _2058);
    float _2177 = fma(_2174, cbSceneParam._m0[89u].z, fma(_2172, cbSceneParam._m0[89u].y, _2170 * cbSceneParam._m0[89u].x));
    float _2180 = fma(_2174, cbSceneParam._m0[90u].z, fma(_2172, cbSceneParam._m0[90u].y, _2170 * cbSceneParam._m0[90u].x));
    float _2183 = fma(_2174, cbSceneParam._m0[91u].z, fma(_2172, cbSceneParam._m0[91u].y, _2170 * cbSceneParam._m0[91u].x));
    vec4 _2191 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1047, _1048));
    float _2193 = _2191.w;
    float _2205 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2193);
    float _2206 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2193);
    float _2207 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2193);
    uvec4 _2211 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2213 = _2211.x * 14u;
    uint _2214 = _2213 + 13u;
    float _2221 = _1125 + (-1.0);
    float _2226 = (cbLight._m0[_2214].x * _2221) + 1.0;
    float _2227 = (cbLight._m0[_2214].y * _2221) + 1.0;
    float _2228 = (cbLight._m0[_2214].z * _2221) + 1.0;
    float _2229 = (cbLight._m0[_2214].w * _2221) + 1.0;
    uint _2230 = _2213 + 5u;
    float _2236 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2240 = _2213 + 4u;
    float _2249 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2253 = _2213 | 1u;
    float _2264 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_948, _949, _950));
    float _2267 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_948, _949, _950));
    float _4508 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _4519 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2272 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * 0.3183098733425140380859375;
    float _2274 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * 0.3183098733425140380859375;
    float _2281 = ((cbLight._m0[_2230].x * _2236) * _2274) + (((cbLight._m0[_2240].x * _2205) * _2249) * _2272);
    float _2282 = ((_2236 * cbLight._m0[_2230].y) * _2274) + (((cbLight._m0[_2240].y * _2206) * _2249) * _2272);
    float _2283 = ((_2236 * cbLight._m0[_2230].z) * _2274) + (((cbLight._m0[_2240].z * _2207) * _2249) * _2272);
    uvec4 _2287 = floatBitsToUint(cbLight._m0[_2213 + 12u]);
    bool _2289 = _2287.x == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2289)
    {
        _2300 = _2281;
        _2302 = _2282;
        _2304 = _2283;
    }
    else
    {
        uint _2308 = _2213 + 6u;
        float _2324 = (dot(vec3(cbLight._m0[_2213 + 2u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4530 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2327 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2300 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2281;
        _2302 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2282;
        _2304 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2283;
    }
    bool _2307 = _2287.y == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2307)
    {
        _2345 = _2300;
        _2347 = _2302;
        _2349 = _2304;
    }
    else
    {
        uint _2518 = _2213 + 7u;
        float _2534 = (dot(vec3(cbLight._m0[_2213 + 3u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2535 = _2534 * _2534;
        float _4546 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2536 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2537 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2345 = (((cbLight._m0[_2518].x * 0.3183098733425140380859375) * _2536) * _2537) + _2300;
        _2347 = (((cbLight._m0[_2518].y * 0.3183098733425140380859375) * _2536) * _2537) + _2302;
        _2349 = (((cbLight._m0[_2518].z * 0.3183098733425140380859375) * _2536) * _2537) + _2304;
    }
    uint _2352 = _2213 + 8u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _951) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2213].x + _1027;
    float _2368 = cbLight._m0[_2213].y + _1028;
    float _2369 = cbLight._m0[_2213].z + _1029;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2213].xyz));
    float _4562 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _4573 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _2381 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2382 = dot(vec3(_948, _949, _950), vec3(_2374, _2375, _2376));
    float _4584 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2374, _2375, _2376));
    float _4595 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2366 * _2366;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
    float _2403 = 0.959999978542327880859375 - _1106;
    float _2405 = 0.959999978542327880859375 - _1107;
    float _2406 = 0.959999978542327880859375 - _1108;
    float _2413 = 1.0 - _2366;
    float _2424 = (0.5 / (((_2381 * ((_2380 * _2413) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2413) + _2366) * _2380))) * _2380;
    float _4606 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2426 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    uint _2440 = _2213 + 9u;
    float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _951) * 0.949999988079071044921875);
    float _2452 = _2451 * _2451;
    float _2453 = cbLight._m0[_2253].x + _1027;
    float _2454 = cbLight._m0[_2253].y + _1028;
    float _2455 = cbLight._m0[_2253].z + _1029;
    float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
    float _2460 = _2459 * _2453;
    float _2461 = _2459 * _2454;
    float _2462 = _2459 * _2455;
    float _2463 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2253].xyz));
    float _4617 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2467 = dot(vec3(_948, _949, _950), vec3(_2460, _2461, _2462));
    float _4628 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2471 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2460, _2461, _2462));
    float _4639 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2475 = _2452 * _2452;
    float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
    float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0);
    float _2493 = 1.0 - _2452;
    float _2503 = (0.5 / (((_2381 * ((_2466 * _2493) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2493) + _2452) * _2466))) * _2466;
    float _4650 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2505 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
    float _2515 = (((((_2486 * _2403) + _1109) * cbLight._m0[_2440].x) * _2505) * _2236) + ((((cbLight._m0[_2352].x * _2205) * ((_2402 * _2403) + _1109)) * _2426) * _2249);
    float _2516 = (((((_2486 * _2405) + _1111) * cbLight._m0[_2440].y) * _2505) * _2236) + ((((cbLight._m0[_2352].y * _2206) * ((_2402 * _2405) + _1111)) * _2426) * _2249);
    float _2517 = (((((_2486 * _2406) + _1112) * cbLight._m0[_2440].z) * _2505) * _2236) + ((((cbLight._m0[_2352].z * _2207) * ((_2402 * _2406) + _1112)) * _2426) * _2249);
    float _2579;
    float _2581;
    float _2583;
    if (_2289)
    {
        _2579 = _2515;
        _2581 = _2516;
        _2583 = _2517;
    }
    else
    {
        uint _2585 = _2213 + 2u;
        uint _2589 = _2213 + 10u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _951) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _1027;
        float _2606 = cbLight._m0[_2585].y + _1028;
        float _2607 = cbLight._m0[_2585].z + _1029;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2585].xyz));
        float _4661 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2619 = dot(vec3(_948, _949, _950), vec3(_2612, _2613, _2614));
        float _4672 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4683 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
        float _2645 = 1.0 - _2604;
        float _2655 = (0.5 / (((_2381 * ((_2618 * _2645) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2645) + _2604) * _2618))) * _2618;
        float _4694 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2579 = (((((_2638 * _2403) + _1109) * cbLight._m0[_2589].x) * _2657) * _2658) + _2515;
        _2581 = (((((_2638 * _2405) + _1111) * cbLight._m0[_2589].y) * _2657) * _2658) + _2516;
        _2583 = (((((_2638 * _2406) + _1112) * cbLight._m0[_2589].z) * _2657) * _2658) + _2517;
    }
    float _2693;
    float _2695;
    float _2697;
    if (_2307)
    {
        _2693 = _2579;
        _2695 = _2581;
        _2697 = _2583;
    }
    else
    {
        uint _2704 = _2213 + 3u;
        uint _2708 = _2213 + 11u;
        float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2704].w)) * _951) * 0.949999988079071044921875);
        float _2723 = _2722 * _2722;
        float _2724 = cbLight._m0[_2704].x + _1027;
        float _2725 = cbLight._m0[_2704].y + _1028;
        float _2726 = cbLight._m0[_2704].z + _1029;
        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
        float _2731 = _2730 * _2724;
        float _2732 = _2730 * _2725;
        float _2733 = _2730 * _2726;
        float _2734 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2704].xyz));
        float _4710 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2738 = dot(vec3(_948, _949, _950), vec3(_2731, _2732, _2733));
        float _4721 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2742 = dot(vec3(cbLight._m0[_2704].xyz), vec3(_2731, _2732, _2733));
        float _4732 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2746 = _2723 * _2723;
        float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
        float _2757 = exp2(log2(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) * 5.0);
        float _2764 = 1.0 - _2723;
        float _2774 = (0.5 / (((_2381 * ((_2737 * _2764) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2381 * _2764) + _2723) * _2737))) * _2737;
        float _4743 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2776 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
        float _2777 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2693 = (((((_2757 * _2403) + _1109) * cbLight._m0[_2708].x) * _2776) * _2777) + _2579;
        _2695 = (((((_2757 * _2405) + _1111) * cbLight._m0[_2708].y) * _2776) * _2777) + _2581;
        _2697 = (((((_2757 * _2406) + _1112) * cbLight._m0[_2708].z) * _2776) * _2777) + _2583;
    }
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    if (_2211.y == 0u)
    {
        float _2852 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2852;
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2852;
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2852;
        uvec4 _2867 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2868 = _2867.x;
        uint _2879 = uint((float(_2867.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1048) / _2868))) + floor(float(uint(cbSceneParam._m0[85u].x * _1047) / _2868)));
        float _2889 = (log2(_2855 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2890 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        uint _2893 = uint(isnan(14.0) ? _2890 : (isnan(_2890) ? 14.0 : min(_2890, 14.0)));
        uvec4 _2898 = texelFetch(g_lightClusterGridBuffer, int(((_2893 << 2u) + (_2879 << 6u)) >> 2u));
        uint _2899 = _2898.x;
        uint _2900 = _2867.z;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        if (((((1u << ((_2900 >> 4u) & 15u)) + 4294967295u) & _2899) == 0u) || ((_2900 & 240u) == 0u))
        {
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
        }
        else
        {
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            uint _3159 = 0u;
            uint _3168;
            bool _3169;
            for (;;)
            {
                _3168 = texelFetch(g_lightClassification, int((((_2893 << 5u) + (_2879 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                _3169 = _3168 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3169)
                {
                    frontier_phi_66_pred = _3153;
                    frontier_phi_66_pred_1 = _3158;
                    frontier_phi_66_pred_2 = _3157;
                    frontier_phi_66_pred_3 = _3156;
                    frontier_phi_66_pred_4 = _3155;
                    frontier_phi_66_pred_5 = _3154;
                }
                else
                {
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    uint _3304;
                    _3298 = _3153;
                    _3299 = _3154;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3168;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    for (;;)
                    {
                        uint _3308 = uint(findLSB(_3304)) + (_3159 << 5u);
                        uint _3305 = (_3304 + 4294967295u) & _3304;
                        uint _3310 = _3308 * 48u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3330 = (_3308 * 48u) + 4u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3349 = (_3308 * 48u) + 8u;
                        vec3 _3360 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x));
                        float _3364 = _3324.x - _2853;
                        float _3365 = _3324.y - _2854;
                        float _3366 = _3324.z - _2855;
                        float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                        float _3370 = inversesqrt(_3367);
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3374 = dot(vec3(_1066, _1069, _1072), vec3(_3371, _3372, _3373));
                        float _3379 = 1.0 - (_3367 * _3324.w);
                        float _4769 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3381 = sqrt(_3367) * _3343.w;
                        float _3384 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3374) + _3385;
                        float _3391 = _3381 * _3381;
                        float _3395 = ((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3380) / ((_3391 * 0.699999988079071044921875) + 1.0);
                        float _3399 = (-0.0) - _2853;
                        float _3400 = (-0.0) - _2854;
                        float _3401 = (-0.0) - _2855;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3416 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                        float _3417 = 1.0 - _1141;
                        float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                        float _3425 = _3424 * _3424;
                        float _3426 = _3425 * _3425;
                        float _3427 = _3406 + _3371;
                        float _3428 = _3407 + _3372;
                        float _3429 = _3408 + _3373;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3437 = dot(vec3(_1066, _1069, _1072), vec3(_3406, _3407, _3408));
                        float _4785 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3441 = dot(vec3(_1066, _1069, _1072), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                        float _4796 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                        float _3449 = _3384 * _3425;
                        float _3450 = _3449 * _3449;
                        float _3453 = ((1.0 - _3450) * _3374) + _3450;
                        float _4807 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3454 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3455 = 1.0 - _3425;
                        float _3465 = (0.5 / (((_3454 * ((_3440 * _3455) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3425) * _3440))) * _3454;
                        float _4818 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3476 = (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) / ((_3448 * _3448) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125))) * _3380;
                        _3228 = (_3395 * _3343.x) + _3301;
                        _3229 = (_3395 * _3343.y) + _3302;
                        _3230 = (_3395 * _3343.z) + _3303;
                        _3225 = (_3476 * _3360.x) + _3298;
                        _3226 = (_3476 * _3360.y) + _3299;
                        _3227 = (_3476 * _3360.z) + _3300;
                        if (_3305 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3298 = _3225;
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3305;
                        }
                    }
                    frontier_phi_66_pred = _3225;
                    frontier_phi_66_pred_1 = _3230;
                    frontier_phi_66_pred_2 = _3229;
                    frontier_phi_66_pred_3 = _3228;
                    frontier_phi_66_pred_4 = _3227;
                    frontier_phi_66_pred_5 = _3226;
                }
                _3001 = frontier_phi_66_pred;
                _3011 = frontier_phi_66_pred_1;
                _3009 = frontier_phi_66_pred_2;
                _3007 = frontier_phi_66_pred_3;
                _3005 = frontier_phi_66_pred_4;
                _3003 = frontier_phi_66_pred_5;
                uint _3160 = _3159 + 1u;
                if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3153 = _3001;
                    _3154 = _3003;
                    _3155 = _3005;
                    _3156 = _3007;
                    _3157 = _3009;
                    _3158 = _3011;
                    _3159 = _3160;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
        }
        uvec4 _3014 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3015 = _3014.z;
        uint _3017 = (_3015 >> 8u) & 15u;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        if (((4294967295u << _3017) & _2899) == 0u)
        {
            _3121 = _3000;
            _3123 = _3002;
            _3125 = _3004;
            _3127 = _3006;
            _3129 = _3008;
            _3131 = _3010;
        }
        else
        {
            float _3146 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
            float _3147 = _3146 * _2853;
            float _3148 = _3146 * _2854;
            float _3149 = _3146 * _2855;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3017 < ((_3015 >> 12u) & 15u))
            {
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3281 = _3000;
                float _3282 = _3002;
                float _3283 = _3004;
                float _3284 = _3006;
                float _3285 = _3008;
                float _3286 = _3010;
                uint _3287 = _3017;
                uint _3296;
                bool _3297;
                for (;;)
                {
                    _3296 = texelFetch(g_lightClassification, int((((_2893 << 5u) + (_2879 << 9u)) + (_3287 << 2u)) >> 2u)).x;
                    _3297 = _3296 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3297)
                    {
                        frontier_phi_77_pred = _3286;
                        frontier_phi_77_pred_1 = _3285;
                        frontier_phi_77_pred_2 = _3284;
                        frontier_phi_77_pred_3 = _3283;
                        frontier_phi_77_pred_4 = _3282;
                        frontier_phi_77_pred_5 = _3281;
                    }
                    else
                    {
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3503 = _3281;
                        float _3504 = _3282;
                        float _3505 = _3283;
                        float _3506 = _3284;
                        float _3507 = _3285;
                        float _3508 = _3286;
                        uint _3509 = _3296;
                        uint _3510;
                        vec4 _3535;
                        float _3536;
                        vec4 _3551;
                        vec3 _3563;
                        vec4 _3578;
                        vec4 _3593;
                        float _3639;
                        bool _3640;
                        for (;;)
                        {
                            uint _3520 = ((_3287 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3509));
                            _3510 = (_3509 + 4294967295u) & _3509;
                            uint _3522 = _3520 * 40u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3536 = _3535.w;
                            uint _3538 = (_3520 * 40u) + 4u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3520 * 40u) + 8u;
                            _3563 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x));
                            uint _3565 = (_3520 * 40u) + 16u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3520 * 40u) + 20u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3520 * 40u) + 24u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3614 = (_3520 * 40u) + 28u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            _3639 = fma(_2855, _3627.z, fma(_2854, _3627.y, _3627.x * _2853)) + _3627.w;
                            _3640 = !((fma(_2855, _3608.z, fma(_2854, _3608.y, _3608.x * _2853)) + _3608.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3640)
                            {
                                float _3667 = _3535.x - _2853;
                                float _3668 = _3535.y - _2854;
                                float _3669 = _3535.z - _2855;
                                float _3670 = dot(vec3(_3667, _3668, _3669), vec3(_3667, _3668, _3669));
                                float _3673 = inversesqrt(_3670);
                                float _3674 = _3673 * _3667;
                                float _3675 = _3673 * _3668;
                                float _3676 = _3673 * _3669;
                                float _3680 = 1.0 - (_3670 / (_3536 * _3536));
                                float _4829 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3681 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3685 = sqrt(_3670) * _3551.w;
                                float _3687 = 1.39999997615814208984375 / (_3685 + 1.39999997615814208984375);
                                float _3688 = _3687 * _3687;
                                float _3691 = ((1.0 - _3688) * dot(vec3(_3674, _3675, _3676), vec3(_1066, _1069, _1072))) + _3688;
                                float _3694 = _3685 * _3685;
                                float _3698 = (fma(_2855, _3578.z, fma(_2854, _3578.y, _3578.x * _2853)) + _3578.w) / _3639;
                                float _3699 = (fma(_2855, _3593.z, fma(_2854, _3593.y, _3593.x * _2853)) + _3593.w) / _3639;
                                float _3703 = 1.0 - dot(vec2(_3698, _3699), vec2(_3698, _3699));
                                float _4845 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3705 = _3704 * (((isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0))) * _3681) / ((_3694 * 0.699999988079071044921875) + 1.0));
                                float _3717 = exp2(log2(1.0 / ((_3694 * 3.5) + 5.0)) * 0.25);
                                float _3718 = 1.0 - _1141;
                                float _3725 = sqrt(1.0 - ((1.0 - (_3718 * _3718)) * (1.0 - (_3717 * _3717))));
                                float _3726 = _3725 * _3725;
                                float _3727 = _3726 * _3726;
                                float _3728 = _3674 - _3147;
                                float _3729 = _3675 - _3148;
                                float _3730 = _3676 - _3149;
                                float _3734 = inversesqrt(dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730)));
                                float _3738 = dot(vec3(_1066, _1069, _1072), vec3((-0.0) - _3147, (-0.0) - _3148, (-0.0) - _3149));
                                float _4856 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3742 = dot(vec3(_1066, _1069, _1072), vec3(_3734 * _3728, _3734 * _3729, _3734 * _3730));
                                float _4867 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3749 = ((_3745 * _3745) * (_3727 + (-1.0))) + 1.0;
                                float _3750 = _3687 * _3726;
                                float _3751 = _3750 * _3750;
                                float _3757 = ((1.0 - _3751) * dot(vec3(_1066, _1069, _1072), vec3(_3674, _3675, _3676))) + _3751;
                                float _4878 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3759 = 1.0 - _3726;
                                float _3769 = (0.5 / (((_3758 * ((_3741 * _3759) + _3726)) + 9.9999999392252902907785028219223e-09) + (((_3758 * _3759) + _3726) * _3741))) * _3758;
                                float _4889 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3779 = (_3704 * _3681) * (((_3727 * 3.1415927410125732421875) * (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) / ((_3749 * _3749) * ((_3694 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3705 * _3551.y;
                                frontier_phi_83_pred_1 = _3705 * _3551.x;
                                frontier_phi_83_pred_2 = _3779 * _3563.z;
                                frontier_phi_83_pred_3 = _3779 * _3563.y;
                                frontier_phi_83_pred_4 = _3779 * _3563.x;
                                frontier_phi_83_pred_5 = _3705 * _3551.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3787 = frontier_phi_83_pred;
                            _3786 = frontier_phi_83_pred_1;
                            _3785 = frontier_phi_83_pred_2;
                            _3784 = frontier_phi_83_pred_3;
                            _3783 = frontier_phi_83_pred_4;
                            _3788 = frontier_phi_83_pred_5;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            if (_3510 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3510;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3495;
                        frontier_phi_77_pred_1 = _3494;
                        frontier_phi_77_pred_2 = _3493;
                        frontier_phi_77_pred_3 = _3492;
                        frontier_phi_77_pred_4 = _3491;
                        frontier_phi_77_pred_5 = _3490;
                    }
                    _3132 = frontier_phi_77_pred;
                    _3130 = frontier_phi_77_pred_1;
                    _3128 = frontier_phi_77_pred_2;
                    _3126 = frontier_phi_77_pred_3;
                    _3124 = frontier_phi_77_pred_4;
                    _3122 = frontier_phi_77_pred_5;
                    uint _3288 = _3287 + 1u;
                    if (_3288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3281 = _3122;
                        _3282 = _3124;
                        _3283 = _3126;
                        _3284 = _3128;
                        _3285 = _3130;
                        _3286 = _3132;
                        _3287 = _3288;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3126;
                frontier_phi_58_59_ladder_1 = _3132;
                frontier_phi_58_59_ladder_2 = _3130;
                frontier_phi_58_59_ladder_3 = _3128;
                frontier_phi_58_59_ladder_4 = _3124;
                frontier_phi_58_59_ladder_5 = _3122;
            }
            else
            {
                frontier_phi_58_59_ladder = _3004;
                frontier_phi_58_59_ladder_1 = _3010;
                frontier_phi_58_59_ladder_2 = _3008;
                frontier_phi_58_59_ladder_3 = _3006;
                frontier_phi_58_59_ladder_4 = _3002;
                frontier_phi_58_59_ladder_5 = _3000;
            }
            _3121 = frontier_phi_58_59_ladder_5;
            _3123 = frontier_phi_58_59_ladder_4;
            _3125 = frontier_phi_58_59_ladder;
            _3127 = frontier_phi_58_59_ladder_3;
            _3129 = frontier_phi_58_59_ladder_2;
            _3131 = frontier_phi_58_59_ladder_1;
        }
        float _3136 = isnan(1.0) ? _1125 : (isnan(_1125) ? 1.0 : min(_1125, 1.0));
        _2912 = (_3136 * _3127) + _2345;
        _2914 = (_3136 * _3129) + _2347;
        _2916 = (_3136 * _3131) + _2349;
        _2918 = ((_3121 * _1109) * _3136) + _2693;
        _2920 = ((_3123 * _1111) * _3136) + _2695;
        _2922 = ((_3125 * _1112) * _3136) + _2697;
    }
    else
    {
        _2912 = _2345;
        _2914 = _2347;
        _2916 = _2349;
        _2918 = _2693;
        _2920 = _2695;
        _2922 = _2697;
    }
    float _4905 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _4916 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _4927 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _2939 = ((isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2912 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1125))) + ((_2918 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1963)) * cbPerFrame._m0[3u].x);
    float _2940 = ((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2914 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1125))) + ((_2920 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1963)) * cbPerFrame._m0[3u].x);
    float _2941 = ((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2916 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1125))) + ((_2922 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1963)) * cbPerFrame._m0[3u].x);
    uint _2942 = _258 + 6u;
    float _2950 = _1047 / cbSceneParam._m0[86u].x;
    float _2951 = _1048 / cbSceneParam._m0[86u].y;
    vec4 _2965 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2950, _2951, (log2((isnan(cbSceneParam._m0[77u].w) ? _970 : (isnan(_970) ? cbSceneParam._m0[77u].w : min(_970, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2967 = _2965.x;
    float _2968 = _2965.y;
    float _2969 = _2965.z;
    float _2970 = _2965.w;
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    if (_970 > cbSceneParam._m0[78u].w)
    {
        float _3025 = isnan(_970) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _970 : min(cbSceneParam._m0[80u].w, _970));
        float _3026 = _3025 / _970;
        float _3037 = _3026 * _1020;
        float _3038 = _1021 * _3026;
        float _3039 = (-0.0) - _3038;
        float _3041 = _3026 * _1022;
        float _3043 = (cbSceneParam._m0[77u].w * _3039) / _3025;
        float _3044 = _3043 + cbSceneParam._m0[79u].w;
        float _3045 = cbSceneParam._m0[79u].w - _3038;
        float _3051 = sqrt(((_3037 * _3037) + (_3038 * _3038)) + (_3041 * _3041));
        float _3054 = (1.0 - (cbSceneParam._m0[77u].w / _3025)) * _3051;
        float _3059 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3061 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3238;
        if (abs((_3039 - _3043) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3238 = ((((_3044 > 0.0) ? exp2(_3059 * _3044) : (2.0 - exp2(_3061 * _3044))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3054;
        }
        else
        {
            float _3182 = 1.0 / cbSceneParam._m0[80u].x;
            float _3183 = isnan(_3045) ? _3044 : (isnan(_3044) ? _3045 : max(_3044, _3045));
            float _3184 = isnan(_3045) ? _3044 : (isnan(_3044) ? _3045 : min(_3044, _3045));
            float _3193 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : min(_3183, 0.0));
            float _3194 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : min(_3184, 0.0));
            _3238 = ((abs(_3051 / _3039) * cbSceneParam._m0[80u].y) * ((((_3193 - _3194) * 2.0) - ((exp2(_3059 * (isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0)))) - exp2(_3059 * (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))))) * _3182)) - ((exp2(_3061 * _3193) - exp2(_3061 * _3194)) * _3182))) + (_3054 * cbSceneParam._m0[80u].z);
        }
        vec4 _3240 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2950, _2951, 1.0), 0.0);
        float _3249 = exp2((_3238 * (-1.44269502162933349609375)) * (1.0 - _3240.w));
        float _3250 = log2(_3249);
        float _3266 = log2(_2970);
        _3063 = (exp2(_3266 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].x)) * _3240.x) / cbSceneParam._m0[78u].x)) + _2967;
        _3065 = (exp2(_3266 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].y)) * _3240.y) / cbSceneParam._m0[78u].y)) + _2968;
        _3067 = (exp2(_3266 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3250 * cbSceneParam._m0[78u].z)) * _3240.z) / cbSceneParam._m0[78u].z)) + _2969;
        _3069 = _3249 * _2970;
    }
    else
    {
        _3063 = _2967;
        _3065 = _2968;
        _3067 = _2969;
        _3069 = _2970;
    }
    bool _3276;
    vec4 _3079;
    vec4 _3101;
    float _3103;
    float _3107;
    float _3108;
    float _3109;
    float _3110;
    bool _3120;
    for (;;)
    {
        _3079 = cbMatDynParam._m0[0u];
        float _3081 = roundEven(_3079.y);
        bool _3082 = _3081 == 3.0;
        float _3083 = log2(_3069);
        float _3090 = exp2(_3083 * cbSceneParam._m0[78u].x) * _2939;
        float _3091 = exp2(_3083 * cbSceneParam._m0[78u].y) * _2940;
        float _3092 = exp2(_3083 * cbSceneParam._m0[78u].z) * _2941;
        float _3099 = _1036 + (-0.5);
        _3101 = cbMtdParam._m0[1u];
        _3103 = _3101.y * _3099;
        float _3106 = (_3081 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3107 = _3106 * (_3082 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3063)));
        _3108 = _3106 * (_3082 ? _3091 : (_3091 + (cbSceneParam._m0[72u].w * _3065)));
        _3109 = _3106 * (_3082 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3067)));
        _3110 = _3099 * 0.999000012874603271484375;
        _3120 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3120)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _3110) < 0.5)
            {
                _3276 = true;
                break;
            }
        }
        uint _3217 = _1085 + uint(_3079.w);
        if ((cbInstanceData._m0[_3217].w < 1.0) && ((cbInstanceData._m0[_3217].w + _3110) < 0.5))
        {
            _3276 = true;
            break;
        }
        if ((_3103 + 1.0) < _3101.x)
        {
            _3276 = true;
            break;
        }
        _3276 = false;
        break;
    }
    float _3481;
    if (_3276)
    {
        discard_state = true;
        _3481 = 0.0;
    }
    else
    {
        _3481 = cbInstanceData._m0[_2942].w;
    }
    SV_Target.x = _3107;
    SV_Target.y = _3108;
    SV_Target.z = _3109;
    SV_Target.w = _3481;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2942].w;
    discard_exit();
}


