#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1507;
float _3911;
float _3912;
float _3913;
float _3914;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3923 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3934 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3945 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _374 = _369.x * cbMtdParam._m0[11u].x;
    float _375 = _369.y * cbMtdParam._m0[11u].y;
    float _376 = _369.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[23u].w) + _457) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3956 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _485 = (_343.x * cbMtdParam._m0[9u].x) * ((_475 * ((_395.x * cbMtdParam._m0[12u].x) - _374)) + _374);
    float _486 = (_343.y * cbMtdParam._m0[9u].y) * ((_475 * ((_395.y * cbMtdParam._m0[12u].y) - _375)) + _375);
    float _487 = (_343.z * cbMtdParam._m0[9u].z) * ((_475 * ((_395.z * cbMtdParam._m0[12u].z) - _376)) + _376);
    float _491 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _485;
    float _494 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _486;
    float _497 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _487;
    float _505 = (((_485 - _491) * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) + _491) * 4.55000019073486328125;
    float _507 = (((_486 - _494) * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) + _494) * 4.55000019073486328125;
    float _509 = (((_487 - _497) * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) + _497) * 4.55000019073486328125;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _573 = _571.x;
    float _574 = _571.y;
    float _575 = _571.z;
    float _584 = ((_554.z - _575) * _475) + _575;
    float _587 = ((((_554.x - _573) * _475) + _573) * 2.0) + (-1.0);
    float _588 = ((((_554.y - _574) * _475) + _574) * 2.0) + (-1.0);
    float _589 = dot(vec2(_587, _588), vec2(_587, _588));
    float _3967 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _594 = sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _626 = (_587 + ((((_527.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_614.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _627 = (_588 + ((((_527.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_614.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _630 = fma(_594, _256, fma(_627, _263, _626 * _249));
    float _633 = fma(_594, _257, fma(_627, _264, _626 * _250));
    float _636 = fma(_594, _258, fma(_627, _265, _626 * _251));
    float _640 = inversesqrt(dot(vec3(_630, _633, _636), vec3(_630, _633, _636)));
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _669 = _667.x;
    float _670 = 1.0 - _669;
    float _679 = (cbMtdParam._m0[19u].x + dot(vec4(_640 * _630, _640 * _633, _640 * _636, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_669 - _670) * cbMtdParam._m0[24u].z) + _670) * cbMtdParam._m0[21u].z);
    float _3978 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _682 = (-0.0) - cbMtdParam._m0[24u].x;
    float _684 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _684 : (isnan(_684) ? 1.0 : min(_684, 1.0));
    float _692 = _680 - ((_680 * TEXCOORD_8.x) * _685);
    float _693 = _680 - ((_680 * TEXCOORD_8.y) * _685);
    float _694 = _680 - ((_680 * TEXCOORD_8.z) * _685);
    float _701 = (_692 * (cbMtdParam._m0[17u].x - _505)) + _505;
    float _702 = (_693 * (cbMtdParam._m0[17u].y - _507)) + _507;
    float _703 = (_694 * (cbMtdParam._m0[17u].z - _509)) + _509;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _717 = _715.x;
    float _718 = 1.0 - _717;
    float _744 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_717 - _718) * cbMtdParam._m0[24u].w) + _718) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3999 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _745 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _753 = ((((cbMtdParam._m0[10u].x - _701) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _745) + _701;
    float _754 = ((((cbMtdParam._m0[10u].y - _702) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _745) + _702;
    float _755 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _703)) * _745) + _703;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _781 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _783 = _781.x;
    float _800 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _783) * _475) + _783;
    float _804 = ((_767.x - _800) * cbMtdParam._m0[19u].z) + _800;
    float _806 = _804 - (_804 * _692);
    float _808 = _806 - (_806 * _745);
    float _813 = (((_527.z - _584) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _584;
    float _817 = ((_614.z - _813) * cbMtdParam._m0[19u].w) + _813;
    vec4 _831 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _838 = (_831.x * 2.0) + (-1.0);
    float _839 = (_831.y * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _4010 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _848 = ((_831.z - _817) * _692) + _817;
    float _851 = ((cbMtdParam._m0[23u].x - _848) * _745) + _848;
    vec4 _872 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _878 = (_872.x * 2.0) + (-1.0);
    float _879 = (_872.y * 2.0) + (-1.0);
    float _880 = dot(vec2(_878, _879), vec2(_878, _879));
    float _4021 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _895 = ((sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) - _594) * _694) + _594;
    float _898 = (((_838 - _626) * _692) + _626) + (cbMtdParam._m0[21u].x * _626);
    float _899 = (((_839 - _627) * _693) + _627) + (cbMtdParam._m0[21u].x * _627);
    float _910 = (((_878 - _898) + (_898 * cbMtdParam._m0[22u].z)) * _745) + _898;
    float _911 = (((_879 - _899) + (_899 * cbMtdParam._m0[22u].z)) * _745) + _899;
    float _912 = (_745 * (sqrt(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) - _895)) + _895;
    float _914 = cbMtdParam._m0[22u].x + _614.w;
    float _917 = fma(_912, _256, fma(_911, _263, _910 * _249));
    float _920 = fma(_912, _257, fma(_911, _264, _910 * _250));
    float _923 = fma(_912, _258, fma(_911, _265, _910 * _251));
    float _927 = inversesqrt(dot(vec3(_917, _920, _923), vec3(_917, _920, _923)));
    float _928 = _927 * _917;
    float _929 = _927 * _920;
    float _930 = _927 * _923;
    float _4032 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _931 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4054 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4065 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4076 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4087 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _936 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _950 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1000 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _990);
    float _1001 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _990);
    float _1002 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _990);
    float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
    float _1007 = _1000 * _1006;
    float _1008 = _1001 * _1006;
    float _1009 = _1002 * _1006;
    vec4 _1014 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1016 = _1014.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1188 = sqrt(((_1000 * _1000) + (_1001 * _1001)) + (_1002 * _1002));
        float _1194 = (cbMatDynParam._m0[5u].x * _1188) + cbMatDynParam._m0[5u].y;
        float _4098 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1199 = (cbMatDynParam._m0[5u].z * _1188) + cbMatDynParam._m0[5u].w;
        float _4109 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) - _1195)) + _1195) < ((_1016 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1027 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1028 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1046 = fma(_930, cbSceneParam._m0[5u].z, fma(_929, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _928));
    float _1049 = fma(_930, cbSceneParam._m0[6u].z, fma(_929, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _928));
    float _1052 = fma(_930, cbSceneParam._m0[7u].z, fma(_929, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _928));
    uint _1065 = _287 + 9u;
    uint _1066 = _1065 + uint(cbMatDynParam._m0[0u].w);
    float _1072 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_1066].x;
    float _1073 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * cbInstanceData._m0[_1066].y;
    float _1074 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * cbInstanceData._m0[_1066].z;
    float _4120 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _4131 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _1078 = 1.0 - _936;
    float _1079 = _1075 * _1078;
    float _1080 = _1076 * _1078;
    float _1081 = _1077 * _1078;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _936;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _936;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _936;
    float _1089 = _1086 + 0.039999999105930328369140625;
    float _1091 = _1087 + 0.039999999105930328369140625;
    float _1092 = _1088 + 0.039999999105930328369140625;
    vec4 _1101 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1027, cbSceneParam._m0[86u].y * _1028));
    float _1105 = ((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * TEXCOORD_5.w) * _1101.x;
    float _1106 = dot(vec3(_928, _929, _930), vec3(_1007, _1008, _1009));
    float _1109 = _1106 * 2.0;
    float _1113 = (_1109 * _928) - _1007;
    float _1114 = (_1109 * _929) - _1008;
    float _1115 = (_1109 * _930) - _1009;
    float _1119 = abs(dot(vec3(_1007, _1008, _1009), vec3(_928, _929, _930)));
    float _4153 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1121 = sqrt(_931);
    float _1134 = exp2((_1121 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1121 * 3.0));
    float _1140 = (1.0 - _1134) * ((_1121 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1141 = _1134 * _1121;
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1506;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1231 = fma(_1177, cbModelParam._m0[26u].z, fma(_1173, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1169));
        float _1235 = fma(_1177, cbModelParam._m0[27u].z, fma(_1173, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1169));
        float _1239 = fma(_1177, cbModelParam._m0[28u].z, fma(_1173, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1169));
        float _1264 = _1169 + _928;
        float _1265 = _1173 + _929;
        float _1266 = _1177 + _930;
        float _1276 = fma(_1266, cbModelParam._m0[26u].z, fma(_1265, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1264)) - _1231;
        float _1277 = fma(_1266, cbModelParam._m0[27u].z, fma(_1265, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1264)) - _1235;
        float _1278 = fma(_1266, cbModelParam._m0[28u].z, fma(_1265, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1264)) - _1239;
        float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
        float _1295 = ((_1282 * _1276) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1231 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1282 * _1277) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1235 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1282 * _1278) / cbModelParam._m0[34u].z) + ((((((_1239 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        float _1334 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1300.x + (-0.5));
        float _1336 = _1334 * (_1300.y + (-0.5));
        float _1337 = _1334 * (_1300.z + (-0.5));
        float _1344 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1307.x + (-0.5));
        float _1346 = _1344 * (_1307.y + (-0.5));
        float _1347 = _1344 * (_1307.z + (-0.5));
        float _1354 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1314.x + (-0.5));
        float _1356 = _1354 * (_1314.y + (-0.5));
        float _1357 = _1354 * (_1314.z + (-0.5));
        float _1364 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1321.x + (-0.5));
        float _1366 = _1364 * (_1321.y + (-0.5));
        float _1367 = _1364 * (_1321.z + (-0.5));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = _1335 * 0.5;
        float _1372 = _1345 * 0.5;
        float _1373 = _1355 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1388 = (dot(vec3(_928, _929, _930), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1398 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4201 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1400 + 1.0))) + _1405) * _1368;
        float _1415 = _1336 * 0.5;
        float _1416 = _1346 * 0.5;
        float _1417 = _1356 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_928, _929, _930), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4234 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1442 + 1.0))) + _1447) * _1369;
        float _1457 = _1337 * 0.5;
        float _1458 = _1347 * 0.5;
        float _1459 = _1357 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_928, _929, _930), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4267 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1484 + 1.0))) + _1489) * _1370;
        _1506 = _1337;
        _1508 = _1336;
        _1509 = _1335;
        _1510 = _1347;
        _1511 = _1346;
        _1512 = _1345;
        _1513 = _1357;
        _1514 = _1356;
        _1515 = _1355;
        _1516 = _1370;
        _1517 = _1369;
        _1518 = _1368;
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1520 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1507;
        _1508 = _1507;
        _1509 = _1507;
        _1510 = _1507;
        _1511 = _1507;
        _1512 = _1507;
        _1513 = _1507;
        _1514 = _1507;
        _1515 = _1507;
        _1516 = _1507;
        _1517 = _1507;
        _1518 = _1507;
        _1519 = 0.0;
        _1520 = 0.0;
        _1521 = 0.0;
    }
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1549 = fma(_1177, cbModelParam._m0[30u].z, fma(_1173, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169));
        float _1553 = fma(_1177, cbModelParam._m0[31u].z, fma(_1173, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169));
        float _1557 = fma(_1177, cbModelParam._m0[32u].z, fma(_1173, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169));
        float _1580 = _1169 + _928;
        float _1581 = _1173 + _929;
        float _1582 = _1177 + _930;
        float _1592 = fma(_1582, cbModelParam._m0[30u].z, fma(_1581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1580)) - _1549;
        float _1593 = fma(_1582, cbModelParam._m0[31u].z, fma(_1581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1580)) - _1553;
        float _1594 = fma(_1582, cbModelParam._m0[32u].z, fma(_1581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1580)) - _1557;
        float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
        float _1611 = ((_1598 * _1592) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1549 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1598 * _1593) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1553 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1598 * _1594) / cbModelParam._m0[35u].z) + ((((((_1557 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        float _1648 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1615.x + (-0.5));
        float _1650 = _1648 * (_1615.y + (-0.5));
        float _1651 = _1648 * (_1615.z + (-0.5));
        float _1658 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1622.x + (-0.5));
        float _1660 = _1658 * (_1622.y + (-0.5));
        float _1661 = _1658 * (_1622.z + (-0.5));
        float _1668 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1629.x + (-0.5));
        float _1670 = _1668 * (_1629.y + (-0.5));
        float _1671 = _1668 * (_1629.z + (-0.5));
        float _1678 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1636.x + (-0.5));
        float _1680 = _1678 * (_1636.y + (-0.5));
        float _1681 = _1678 * (_1636.z + (-0.5));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = _1649 * 0.5;
        float _1686 = _1659 * 0.5;
        float _1687 = _1669 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_928, _929, _930), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4330 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1712 + 1.0))) + _1717) * _1682;
        float _1727 = _1650 * 0.5;
        float _1728 = _1660 * 0.5;
        float _1729 = _1670 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_928, _929, _930), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4363 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1754 + 1.0))) + _1759) * _1683;
        float _1769 = _1651 * 0.5;
        float _1770 = _1661 * 0.5;
        float _1771 = _1671 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1785 = (dot(vec3(_928, _929, _930), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4396 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1796 + 1.0))) + _1801) * _1684;
        _1818 = _1651;
        _1819 = _1650;
        _1820 = _1649;
        _1821 = _1661;
        _1822 = _1660;
        _1823 = _1659;
        _1824 = _1671;
        _1825 = _1670;
        _1826 = _1669;
        _1827 = _1684;
        _1828 = _1683;
        _1829 = _1682;
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
    }
    else
    {
        _1818 = _1507;
        _1819 = _1507;
        _1820 = _1507;
        _1821 = _1507;
        _1822 = _1507;
        _1823 = _1507;
        _1824 = _1507;
        _1825 = _1507;
        _1826 = _1507;
        _1827 = _1507;
        _1828 = _1507;
        _1829 = _1507;
        _1830 = 0.0;
        _1831 = 0.0;
        _1832 = 0.0;
    }
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1519)) + _1519;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1520)) + _1520;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1521)) + _1521;
    float _1865 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1842));
    float _1886 = _1113 * 0.5;
    float _1887 = _1114 * 0.5;
    float _1888 = _1115 * 0.5;
    float _1889 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1892 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1895 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1929;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1902 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1506, _1510, _1513, _1516));
        float _1906 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1508, _1511, _1514, _1517));
        float _1910 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1509, _1512, _1515, _1518));
        float _1917 = dot(vec4(cbModelParam._m0[39u]), vec4(_1886, _1887, _1888, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1940;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1931 = dot(vec4(cbModelParam._m0[40u]), vec4(_1886, _1887, _1888, 1.0));
        _1940 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1931) ? 0.0 : (isnan(0.0) ? _1931 : max(0.0, _1931))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1940 = 1.0;
    }
    float _1944 = (_1940 * cbModelParam._m0[1u].x) + (_1929 * (1.0 - cbModelParam._m0[1u].x));
    float _1954 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _931);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1954 : min(cbModelParam._m0[25u].z, _1954));
    float _2036;
    float _2038;
    float _2040;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2003 = fma(_1177, cbModelParam._m0[13u].z, fma(_1173, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1169)) + cbModelParam._m0[13u].w;
        float _2007 = fma(_1177, cbModelParam._m0[14u].z, fma(_1173, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1169)) + cbModelParam._m0[14u].w;
        float _2011 = fma(_1177, cbModelParam._m0[15u].z, fma(_1173, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1169)) + cbModelParam._m0[15u].w;
        float _2014 = fma(_1115, cbModelParam._m0[13u].z, fma(_1114, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1113));
        float _2017 = fma(_1115, cbModelParam._m0[14u].z, fma(_1114, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1113));
        float _2020 = fma(_1115, cbModelParam._m0[15u].z, fma(_1114, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1113));
        float _2048;
        if (_2014 > 0.0)
        {
            _2048 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2048 = frontier_phi_17_15_ladder;
        }
        float _2272;
        if (_2017 > 0.0)
        {
            _2272 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2272 = frontier_phi_26_22_ladder;
        }
        float _2529;
        if (_2020 > 0.0)
        {
            _2529 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2529 = frontier_phi_38_33_ladder;
        }
        float _2531 = isnan(_2272) ? _2048 : (isnan(_2048) ? _2272 : min(_2048, _2272));
        float _2532 = isnan(_2529) ? _2531 : (isnan(_2531) ? _2529 : min(_2531, _2529));
        float _2536 = (_2532 * _2014) + _2003;
        float _2537 = (_2532 * _2017) + _2007;
        float _2538 = (_2532 * _2020) + _2011;
        float _2539 = _2532 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2539;
        float _2543 = _2539 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 > _2543) || ((_2537 < _2541) || ((_2536 < _2541) || (_2536 > _2543))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2538, cbModelParam._m0[9u].z, fma(_2537, cbModelParam._m0[9u].y, _2536 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2538, cbModelParam._m0[10u].z, fma(_2537, cbModelParam._m0[10u].y, _2536 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2538, cbModelParam._m0[11u].z, fma(_2537, cbModelParam._m0[11u].y, _2536 * cbModelParam._m0[11u].x))), _1955);
            frontier_phi_16_38_ladder = _2666.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2666.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2666.x * cbModelParam._m0[1u].y;
        }
        _2036 = frontier_phi_16_38_ladder_2;
        _2038 = frontier_phi_16_38_ladder_1;
        _2040 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1113, _1114, _1115), _1955);
        _2036 = _2024.x * cbModelParam._m0[1u].y;
        _2038 = _2024.y * cbModelParam._m0[1u].y;
        _2040 = _2024.z * cbModelParam._m0[1u].y;
    }
    float _2044 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _931);
    float _2045 = isnan(_2044) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2044 : min(cbModelParam._m0[25u].w, _2044));
    float _2135;
    float _2137;
    float _2139;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2099 = fma(_1177, cbModelParam._m0[21u].z, fma(_1173, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1169)) + cbModelParam._m0[21u].w;
        float _2103 = fma(_1177, cbModelParam._m0[22u].z, fma(_1173, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1169)) + cbModelParam._m0[22u].w;
        float _2107 = fma(_1177, cbModelParam._m0[23u].z, fma(_1173, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1169)) + cbModelParam._m0[23u].w;
        float _2110 = fma(_1115, cbModelParam._m0[21u].z, fma(_1114, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1113));
        float _2113 = fma(_1115, cbModelParam._m0[22u].z, fma(_1114, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1113));
        float _2116 = fma(_1115, cbModelParam._m0[23u].z, fma(_1114, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1113));
        float _2277;
        if (_2110 > 0.0)
        {
            _2277 = abs((1.0 - _2099) / _2110);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2099 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2277 = frontier_phi_28_24_ladder;
        }
        float _2556;
        if (_2113 > 0.0)
        {
            _2556 = abs((1.0 - _2103) / _2113);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2103 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2556 = frontier_phi_40_35_ladder;
        }
        float _2769;
        if (_2116 > 0.0)
        {
            _2769 = abs((1.0 - _2107) / _2116);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2107 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2769 = frontier_phi_49_46_ladder;
        }
        float _2771 = isnan(_2556) ? _2277 : (isnan(_2277) ? _2556 : min(_2277, _2556));
        float _2772 = isnan(_2769) ? _2771 : (isnan(_2771) ? _2769 : min(_2771, _2769));
        float _2776 = (_2772 * _2110) + _2099;
        float _2777 = (_2772 * _2113) + _2103;
        float _2778 = (_2772 * _2116) + _2107;
        float _2779 = _2772 * 9.9999997473787516355514526367188e-05;
        float _2780 = (-1.0) - _2779;
        float _2782 = _2779 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2778 > _2782) || ((_2778 < _2780) || ((_2777 > _2782) || ((_2777 < _2780) || ((_2776 < _2780) || (_2776 > _2782))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2778, cbModelParam._m0[17u].z, fma(_2777, cbModelParam._m0[17u].y, _2776 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2778, cbModelParam._m0[18u].z, fma(_2777, cbModelParam._m0[18u].y, _2776 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2778, cbModelParam._m0[19u].z, fma(_2777, cbModelParam._m0[19u].y, _2776 * cbModelParam._m0[19u].x))), _2045);
            frontier_phi_25_49_ladder = _2977.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2977.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2977.x * cbModelParam._m0[1u].z;
        }
        _2135 = frontier_phi_25_49_ladder_2;
        _2137 = frontier_phi_25_49_ladder_1;
        _2139 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2119 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1113, _1114, _1115), _2045);
        _2135 = _2119.x * cbModelParam._m0[1u].z;
        _2137 = _2119.y * cbModelParam._m0[1u].z;
        _2139 = _2119.z * cbModelParam._m0[1u].z;
    }
    float _2152 = (((_1140 * _1089) + _1141) * _1105) * ((cbModelParam._m0[1u].w * (_2135 - _2036)) + _2036);
    float _2154 = (((_1140 * _1091) + _1141) * _1105) * ((cbModelParam._m0[1u].w * (_2137 - _2038)) + _2038);
    float _2156 = (((_1140 * _1092) + _1141) * _1105) * ((cbModelParam._m0[1u].w * (_2139 - _2040)) + _2040);
    float _2159 = fma(_2156, cbSceneParam._m0[89u].z, fma(_2154, cbSceneParam._m0[89u].y, _2152 * cbSceneParam._m0[89u].x));
    float _2162 = fma(_2156, cbSceneParam._m0[90u].z, fma(_2154, cbSceneParam._m0[90u].y, _2152 * cbSceneParam._m0[90u].x));
    float _2165 = fma(_2156, cbSceneParam._m0[91u].z, fma(_2154, cbSceneParam._m0[91u].y, _2152 * cbSceneParam._m0[91u].x));
    vec4 _2173 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1027, _1028));
    float _2175 = _2173.w;
    float _2187 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2175);
    float _2188 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2175);
    float _2189 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2175);
    uvec4 _2193 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2195 = _2193.x * 14u;
    uint _2196 = _2195 + 13u;
    float _2203 = _1105 + (-1.0);
    float _2208 = (cbLight._m0[_2196].x * _2203) + 1.0;
    float _2209 = (cbLight._m0[_2196].y * _2203) + 1.0;
    float _2210 = (cbLight._m0[_2196].z * _2203) + 1.0;
    float _2211 = (cbLight._m0[_2196].w * _2203) + 1.0;
    uint _2212 = _2195 + 5u;
    float _2218 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
    uint _2222 = _2195 + 4u;
    float _2231 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
    uint _2235 = _2195 | 1u;
    float _2246 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_928, _929, _930));
    float _2249 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_928, _929, _930));
    float _4532 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _4543 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2254 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2256 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * 0.3183098733425140380859375;
    float _2263 = ((cbLight._m0[_2212].x * _2218) * _2256) + (((cbLight._m0[_2222].x * _2187) * _2231) * _2254);
    float _2264 = ((_2218 * cbLight._m0[_2212].y) * _2256) + (((cbLight._m0[_2222].y * _2188) * _2231) * _2254);
    float _2265 = ((_2218 * cbLight._m0[_2212].z) * _2256) + (((cbLight._m0[_2222].z * _2189) * _2231) * _2254);
    uvec4 _2269 = floatBitsToUint(cbLight._m0[_2195 + 12u]);
    bool _2271 = _2269.x == 0u;
    float _2282;
    float _2284;
    float _2286;
    if (_2271)
    {
        _2282 = _2263;
        _2284 = _2264;
        _2286 = _2265;
    }
    else
    {
        uint _2290 = _2195 + 6u;
        float _2306 = (dot(vec3(cbLight._m0[_2195 + 2u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4554 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2309 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2282 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2263;
        _2284 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2264;
        _2286 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2265;
    }
    bool _2289 = _2269.y == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2289)
    {
        _2327 = _2282;
        _2329 = _2284;
        _2331 = _2286;
    }
    else
    {
        uint _2500 = _2195 + 7u;
        float _2516 = (dot(vec3(cbLight._m0[_2195 + 3u].xyz), vec3(_928, _929, _930)) * 0.5) + 0.5;
        float _2517 = _2516 * _2516;
        float _4570 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2518 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2519 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2327 = (((cbLight._m0[_2500].x * 0.3183098733425140380859375) * _2518) * _2519) + _2282;
        _2329 = (((cbLight._m0[_2500].y * 0.3183098733425140380859375) * _2518) * _2519) + _2284;
        _2331 = (((cbLight._m0[_2500].z * 0.3183098733425140380859375) * _2518) * _2519) + _2286;
    }
    uint _2334 = _2195 + 8u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _931) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2195].x + _1007;
    float _2350 = cbLight._m0[_2195].y + _1008;
    float _2351 = cbLight._m0[_2195].z + _1009;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2195].xyz));
    float _4586 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _4597 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _2363 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2364 = dot(vec3(_928, _929, _930), vec3(_2356, _2357, _2358));
    float _4608 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2356, _2357, _2358));
    float _4619 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2348 * _2348;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2384 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
    float _2385 = 0.959999978542327880859375 - _1086;
    float _2387 = 0.959999978542327880859375 - _1087;
    float _2388 = 0.959999978542327880859375 - _1088;
    float _2395 = 1.0 - _2348;
    float _2406 = (0.5 / (((_2363 * ((_2362 * _2395) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2395) + _2348) * _2362))) * _2362;
    float _4630 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2408 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    uint _2422 = _2195 + 9u;
    float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _931) * 0.949999988079071044921875);
    float _2434 = _2433 * _2433;
    float _2435 = cbLight._m0[_2235].x + _1007;
    float _2436 = cbLight._m0[_2235].y + _1008;
    float _2437 = cbLight._m0[_2235].z + _1009;
    float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
    float _2442 = _2441 * _2435;
    float _2443 = _2441 * _2436;
    float _2444 = _2441 * _2437;
    float _2445 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2235].xyz));
    float _4641 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2449 = dot(vec3(_928, _929, _930), vec3(_2442, _2443, _2444));
    float _4652 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2453 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2442, _2443, _2444));
    float _4663 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2457 = _2434 * _2434;
    float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
    float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
    float _2475 = 1.0 - _2434;
    float _2485 = (0.5 / (((_2363 * ((_2448 * _2475) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2475) + _2434) * _2448))) * _2448;
    float _4674 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2487 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
    float _2497 = (((((_2468 * _2385) + _1089) * cbLight._m0[_2422].x) * _2487) * _2218) + ((((cbLight._m0[_2334].x * _2187) * ((_2384 * _2385) + _1089)) * _2408) * _2231);
    float _2498 = (((((_2468 * _2387) + _1091) * cbLight._m0[_2422].y) * _2487) * _2218) + ((((cbLight._m0[_2334].y * _2188) * ((_2384 * _2387) + _1091)) * _2408) * _2231);
    float _2499 = (((((_2468 * _2388) + _1092) * cbLight._m0[_2422].z) * _2487) * _2218) + ((((cbLight._m0[_2334].z * _2189) * ((_2384 * _2388) + _1092)) * _2408) * _2231);
    float _2561;
    float _2563;
    float _2565;
    if (_2271)
    {
        _2561 = _2497;
        _2563 = _2498;
        _2565 = _2499;
    }
    else
    {
        uint _2567 = _2195 + 2u;
        uint _2571 = _2195 + 10u;
        float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2567].w)) * _931) * 0.949999988079071044921875);
        float _2586 = _2585 * _2585;
        float _2587 = cbLight._m0[_2567].x + _1007;
        float _2588 = cbLight._m0[_2567].y + _1008;
        float _2589 = cbLight._m0[_2567].z + _1009;
        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
        float _2594 = _2593 * _2587;
        float _2595 = _2593 * _2588;
        float _2596 = _2593 * _2589;
        float _2597 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2567].xyz));
        float _4685 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2601 = dot(vec3(_928, _929, _930), vec3(_2594, _2595, _2596));
        float _4696 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2605 = dot(vec3(cbLight._m0[_2567].xyz), vec3(_2594, _2595, _2596));
        float _4707 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2609 = _2586 * _2586;
        float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
        float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0);
        float _2627 = 1.0 - _2586;
        float _2637 = (0.5 / (((_2363 * ((_2600 * _2627) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2627) + _2586) * _2600))) * _2600;
        float _4718 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2639 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
        float _2640 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2561 = (((((_2620 * _2385) + _1089) * cbLight._m0[_2571].x) * _2639) * _2640) + _2497;
        _2563 = (((((_2620 * _2387) + _1091) * cbLight._m0[_2571].y) * _2639) * _2640) + _2498;
        _2565 = (((((_2620 * _2388) + _1092) * cbLight._m0[_2571].z) * _2639) * _2640) + _2499;
    }
    float _2675;
    float _2677;
    float _2679;
    if (_2289)
    {
        _2675 = _2561;
        _2677 = _2563;
        _2679 = _2565;
    }
    else
    {
        uint _2686 = _2195 + 3u;
        uint _2690 = _2195 + 11u;
        float _2704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2686].w)) * _931) * 0.949999988079071044921875);
        float _2705 = _2704 * _2704;
        float _2706 = cbLight._m0[_2686].x + _1007;
        float _2707 = cbLight._m0[_2686].y + _1008;
        float _2708 = cbLight._m0[_2686].z + _1009;
        float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
        float _2713 = _2712 * _2706;
        float _2714 = _2712 * _2707;
        float _2715 = _2712 * _2708;
        float _2716 = dot(vec3(_928, _929, _930), vec3(cbLight._m0[_2686].xyz));
        float _4734 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2720 = dot(vec3(_928, _929, _930), vec3(_2713, _2714, _2715));
        float _4745 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2724 = dot(vec3(cbLight._m0[_2686].xyz), vec3(_2713, _2714, _2715));
        float _4756 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2728 = _2705 * _2705;
        float _2732 = ((_2723 * _2723) * (_2728 + (-1.0))) + 1.0;
        float _2739 = exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0);
        float _2746 = 1.0 - _2705;
        float _2756 = (0.5 / (((_2363 * ((_2719 * _2746) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2746) + _2705) * _2719))) * _2719;
        float _4767 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2758 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2728 / ((_2732 * _2732) * 3.141590118408203125));
        float _2759 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2675 = (((((_2739 * _2385) + _1089) * cbLight._m0[_2690].x) * _2758) * _2759) + _2561;
        _2677 = (((((_2739 * _2387) + _1091) * cbLight._m0[_2690].y) * _2758) * _2759) + _2563;
        _2679 = (((((_2739 * _2388) + _1092) * cbLight._m0[_2690].z) * _2758) * _2759) + _2565;
    }
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    if (_2193.y == 0u)
    {
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2835 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2834;
        float _2836 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2834;
        float _2837 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2834;
        uvec4 _2849 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2850 = _2849.x;
        uint _2861 = uint((float(_2849.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1028) / _2850))) + floor(float(uint(cbSceneParam._m0[85u].x * _1027) / _2850)));
        float _2871 = (log2(_2837 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2872 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        uint _2875 = uint(isnan(14.0) ? _2872 : (isnan(_2872) ? 14.0 : min(_2872, 14.0)));
        uvec4 _2880 = texelFetch(g_lightClusterGridBuffer, int(((_2875 << 2u) + (_2861 << 6u)) >> 2u));
        uint _2881 = _2880.x;
        uint _2882 = _2849.z;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        if (((((1u << ((_2882 >> 4u) & 15u)) + 4294967295u) & _2881) == 0u) || ((_2882 & 240u) == 0u))
        {
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
        }
        else
        {
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            uint _3140 = 0u;
            uint _3149;
            bool _3150;
            for (;;)
            {
                _3149 = texelFetch(g_lightClassification, int((((_2875 << 5u) + (_2861 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                _3150 = _3149 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3150)
                {
                    frontier_phi_66_pred = _3134;
                    frontier_phi_66_pred_1 = _3139;
                    frontier_phi_66_pred_2 = _3138;
                    frontier_phi_66_pred_3 = _3137;
                    frontier_phi_66_pred_4 = _3136;
                    frontier_phi_66_pred_5 = _3135;
                }
                else
                {
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    uint _3285;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3149;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    for (;;)
                    {
                        uint _3289 = uint(findLSB(_3285)) + (_3140 << 5u);
                        uint _3286 = (_3285 + 4294967295u) & _3285;
                        uint _3291 = _3289 * 48u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3311 = (_3289 * 48u) + 4u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 3u)).x));
                        uint _3330 = (_3289 * 48u) + 8u;
                        vec3 _3341 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x));
                        float _3345 = _3305.x - _2835;
                        float _3346 = _3305.y - _2836;
                        float _3347 = _3305.z - _2837;
                        float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                        float _3351 = inversesqrt(_3348);
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3355 = dot(vec3(_1046, _1049, _1052), vec3(_3352, _3353, _3354));
                        float _3360 = 1.0 - (_3348 * _3305.w);
                        float _4793 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3362 = sqrt(_3348) * _3324.w;
                        float _3365 = 1.39999997615814208984375 / (_3362 + 1.39999997615814208984375);
                        float _3366 = _3365 * _3365;
                        float _3369 = ((1.0 - _3366) * _3355) + _3366;
                        float _3372 = _3362 * _3362;
                        float _3376 = ((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3361) / ((_3372 * 0.699999988079071044921875) + 1.0);
                        float _3380 = (-0.0) - _2835;
                        float _3381 = (-0.0) - _2836;
                        float _3382 = (-0.0) - _2837;
                        float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3397 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                        float _3398 = 1.0 - _1121;
                        float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                        float _3406 = _3405 * _3405;
                        float _3407 = _3406 * _3406;
                        float _3408 = _3387 + _3352;
                        float _3409 = _3388 + _3353;
                        float _3410 = _3389 + _3354;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3418 = dot(vec3(_1046, _1049, _1052), vec3(_3387, _3388, _3389));
                        float _4809 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3422 = dot(vec3(_1046, _1049, _1052), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                        float _4820 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                        float _3430 = _3365 * _3406;
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3355) + _3431;
                        float _4831 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3436 = 1.0 - _3406;
                        float _3446 = (0.5 / (((_3435 * ((_3421 * _3436) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3406) * _3421))) * _3435;
                        float _4842 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3457 = (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) / ((_3429 * _3429) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125))) * _3361;
                        _3209 = (_3376 * _3324.x) + _3282;
                        _3210 = (_3376 * _3324.y) + _3283;
                        _3211 = (_3376 * _3324.z) + _3284;
                        _3206 = (_3457 * _3341.x) + _3279;
                        _3207 = (_3457 * _3341.y) + _3280;
                        _3208 = (_3457 * _3341.z) + _3281;
                        if (_3286 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3286;
                        }
                    }
                    frontier_phi_66_pred = _3206;
                    frontier_phi_66_pred_1 = _3211;
                    frontier_phi_66_pred_2 = _3210;
                    frontier_phi_66_pred_3 = _3209;
                    frontier_phi_66_pred_4 = _3208;
                    frontier_phi_66_pred_5 = _3207;
                }
                _2983 = frontier_phi_66_pred;
                _2993 = frontier_phi_66_pred_1;
                _2991 = frontier_phi_66_pred_2;
                _2989 = frontier_phi_66_pred_3;
                _2987 = frontier_phi_66_pred_4;
                _2985 = frontier_phi_66_pred_5;
                uint _3141 = _3140 + 1u;
                if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3134 = _2983;
                    _3135 = _2985;
                    _3136 = _2987;
                    _3137 = _2989;
                    _3138 = _2991;
                    _3139 = _2993;
                    _3140 = _3141;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
        }
        uvec4 _2996 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2997 = _2996.z;
        uint _2999 = (_2997 >> 8u) & 15u;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((4294967295u << _2999) & _2881) == 0u)
        {
            _3102 = _2982;
            _3104 = _2984;
            _3106 = _2986;
            _3108 = _2988;
            _3110 = _2990;
            _3112 = _2992;
        }
        else
        {
            float _3127 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
            float _3128 = _3127 * _2835;
            float _3129 = _3127 * _2836;
            float _3130 = _3127 * _2837;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2999 < ((_2997 >> 12u) & 15u))
            {
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3262 = _2982;
                float _3263 = _2984;
                float _3264 = _2986;
                float _3265 = _2988;
                float _3266 = _2990;
                float _3267 = _2992;
                uint _3268 = _2999;
                uint _3277;
                bool _3278;
                for (;;)
                {
                    _3277 = texelFetch(g_lightClassification, int((((_2875 << 5u) + (_2861 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                    _3278 = _3277 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3278)
                    {
                        frontier_phi_77_pred = _3267;
                        frontier_phi_77_pred_1 = _3266;
                        frontier_phi_77_pred_2 = _3265;
                        frontier_phi_77_pred_3 = _3264;
                        frontier_phi_77_pred_4 = _3263;
                        frontier_phi_77_pred_5 = _3262;
                    }
                    else
                    {
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        uint _3490 = _3277;
                        uint _3491;
                        vec4 _3516;
                        float _3517;
                        vec4 _3532;
                        vec3 _3544;
                        vec4 _3559;
                        vec4 _3574;
                        float _3620;
                        bool _3621;
                        for (;;)
                        {
                            uint _3501 = ((_3268 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3490));
                            _3491 = (_3490 + 4294967295u) & _3490;
                            uint _3503 = _3501 * 40u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3517 = _3516.w;
                            uint _3519 = (_3501 * 40u) + 4u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3501 * 40u) + 8u;
                            _3544 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x));
                            uint _3546 = (_3501 * 40u) + 16u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3501 * 40u) + 20u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3501 * 40u) + 24u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3595 = (_3501 * 40u) + 28u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3620 = fma(_2837, _3608.z, fma(_2836, _3608.y, _3608.x * _2835)) + _3608.w;
                            _3621 = !((fma(_2837, _3589.z, fma(_2836, _3589.y, _3589.x * _2835)) + _3589.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3621)
                            {
                                float _3648 = _3516.x - _2835;
                                float _3649 = _3516.y - _2836;
                                float _3650 = _3516.z - _2837;
                                float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                                float _3654 = inversesqrt(_3651);
                                float _3655 = _3654 * _3648;
                                float _3656 = _3654 * _3649;
                                float _3657 = _3654 * _3650;
                                float _3661 = 1.0 - (_3651 / (_3517 * _3517));
                                float _4853 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3666 = sqrt(_3651) * _3532.w;
                                float _3668 = 1.39999997615814208984375 / (_3666 + 1.39999997615814208984375);
                                float _3669 = _3668 * _3668;
                                float _3672 = ((1.0 - _3669) * dot(vec3(_3655, _3656, _3657), vec3(_1046, _1049, _1052))) + _3669;
                                float _3675 = _3666 * _3666;
                                float _3679 = (fma(_2837, _3559.z, fma(_2836, _3559.y, _3559.x * _2835)) + _3559.w) / _3620;
                                float _3680 = (fma(_2837, _3574.z, fma(_2836, _3574.y, _3574.x * _2835)) + _3574.w) / _3620;
                                float _3684 = 1.0 - dot(vec2(_3679, _3680), vec2(_3679, _3680));
                                float _4869 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3686 = _3685 * (((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3662) / ((_3675 * 0.699999988079071044921875) + 1.0));
                                float _3698 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                                float _3699 = 1.0 - _1121;
                                float _3706 = sqrt(1.0 - ((1.0 - (_3699 * _3699)) * (1.0 - (_3698 * _3698))));
                                float _3707 = _3706 * _3706;
                                float _3708 = _3707 * _3707;
                                float _3709 = _3655 - _3128;
                                float _3710 = _3656 - _3129;
                                float _3711 = _3657 - _3130;
                                float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                                float _3719 = dot(vec3(_1046, _1049, _1052), vec3((-0.0) - _3128, (-0.0) - _3129, (-0.0) - _3130));
                                float _4880 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3723 = dot(vec3(_1046, _1049, _1052), vec3(_3715 * _3709, _3715 * _3710, _3715 * _3711));
                                float _4891 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3730 = ((_3726 * _3726) * (_3708 + (-1.0))) + 1.0;
                                float _3731 = _3668 * _3707;
                                float _3732 = _3731 * _3731;
                                float _3738 = ((1.0 - _3732) * dot(vec3(_1046, _1049, _1052), vec3(_3655, _3656, _3657))) + _3732;
                                float _4902 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3740 = 1.0 - _3707;
                                float _3750 = (0.5 / (((_3739 * ((_3722 * _3740) + _3707)) + 9.9999999392252902907785028219223e-09) + (((_3739 * _3740) + _3707) * _3722))) * _3739;
                                float _4913 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3760 = (_3685 * _3662) * (((_3708 * 3.1415927410125732421875) * (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) / ((_3730 * _3730) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3686 * _3532.y;
                                frontier_phi_83_pred_1 = _3686 * _3532.x;
                                frontier_phi_83_pred_2 = _3760 * _3544.z;
                                frontier_phi_83_pred_3 = _3760 * _3544.y;
                                frontier_phi_83_pred_4 = _3760 * _3544.x;
                                frontier_phi_83_pred_5 = _3686 * _3532.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3768 = frontier_phi_83_pred;
                            _3767 = frontier_phi_83_pred_1;
                            _3766 = frontier_phi_83_pred_2;
                            _3765 = frontier_phi_83_pred_3;
                            _3764 = frontier_phi_83_pred_4;
                            _3769 = frontier_phi_83_pred_5;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            if (_3491 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3491;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3476;
                        frontier_phi_77_pred_1 = _3475;
                        frontier_phi_77_pred_2 = _3474;
                        frontier_phi_77_pred_3 = _3473;
                        frontier_phi_77_pred_4 = _3472;
                        frontier_phi_77_pred_5 = _3471;
                    }
                    _3113 = frontier_phi_77_pred;
                    _3111 = frontier_phi_77_pred_1;
                    _3109 = frontier_phi_77_pred_2;
                    _3107 = frontier_phi_77_pred_3;
                    _3105 = frontier_phi_77_pred_4;
                    _3103 = frontier_phi_77_pred_5;
                    uint _3269 = _3268 + 1u;
                    if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3262 = _3103;
                        _3263 = _3105;
                        _3264 = _3107;
                        _3265 = _3109;
                        _3266 = _3111;
                        _3267 = _3113;
                        _3268 = _3269;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3107;
                frontier_phi_58_59_ladder_1 = _3113;
                frontier_phi_58_59_ladder_2 = _3111;
                frontier_phi_58_59_ladder_3 = _3109;
                frontier_phi_58_59_ladder_4 = _3105;
                frontier_phi_58_59_ladder_5 = _3103;
            }
            else
            {
                frontier_phi_58_59_ladder = _2986;
                frontier_phi_58_59_ladder_1 = _2992;
                frontier_phi_58_59_ladder_2 = _2990;
                frontier_phi_58_59_ladder_3 = _2988;
                frontier_phi_58_59_ladder_4 = _2984;
                frontier_phi_58_59_ladder_5 = _2982;
            }
            _3102 = frontier_phi_58_59_ladder_5;
            _3104 = frontier_phi_58_59_ladder_4;
            _3106 = frontier_phi_58_59_ladder;
            _3108 = frontier_phi_58_59_ladder_3;
            _3110 = frontier_phi_58_59_ladder_2;
            _3112 = frontier_phi_58_59_ladder_1;
        }
        float _3117 = isnan(1.0) ? _1105 : (isnan(_1105) ? 1.0 : min(_1105, 1.0));
        _2894 = (_3117 * _3108) + _2327;
        _2896 = (_3117 * _3110) + _2329;
        _2898 = (_3117 * _3112) + _2331;
        _2900 = ((_3102 * _1089) * _3117) + _2675;
        _2902 = ((_3104 * _1091) * _3117) + _2677;
        _2904 = ((_3106 * _1092) * _3117) + _2679;
    }
    else
    {
        _2894 = _2327;
        _2896 = _2329;
        _2898 = _2331;
        _2900 = _2675;
        _2902 = _2677;
        _2904 = _2679;
    }
    float _4929 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _4940 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _4951 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _2921 = ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2894 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1105))) + ((_2900 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    float _2922 = ((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2896 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1105))) + ((_2902 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    float _2923 = ((isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2898 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1105))) + ((_2904 + ((isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    uint _2924 = _287 + 6u;
    float _2932 = _1027 / cbSceneParam._m0[86u].x;
    float _2933 = _1028 / cbSceneParam._m0[86u].y;
    vec4 _2947 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, (log2((isnan(cbSceneParam._m0[77u].w) ? _950 : (isnan(_950) ? cbSceneParam._m0[77u].w : min(_950, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2949 = _2947.x;
    float _2950 = _2947.y;
    float _2951 = _2947.z;
    float _2952 = _2947.w;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    if (_950 > cbSceneParam._m0[78u].w)
    {
        float _3007 = isnan(_950) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _950 : min(cbSceneParam._m0[80u].w, _950));
        float _3008 = _3007 / _950;
        float _3019 = _3008 * _1000;
        float _3020 = _1001 * _3008;
        float _3021 = (-0.0) - _3020;
        float _3022 = _3008 * _1002;
        float _3024 = (cbSceneParam._m0[77u].w * _3021) / _3007;
        float _3025 = _3024 + cbSceneParam._m0[79u].w;
        float _3026 = cbSceneParam._m0[79u].w - _3020;
        float _3032 = sqrt(((_3019 * _3019) + (_3020 * _3020)) + (_3022 * _3022));
        float _3035 = (1.0 - (cbSceneParam._m0[77u].w / _3007)) * _3032;
        float _3040 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3042 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3219;
        if (abs((_3021 - _3024) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3219 = ((((_3025 > 0.0) ? exp2(_3040 * _3025) : (2.0 - exp2(_3042 * _3025))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3035;
        }
        else
        {
            float _3163 = 1.0 / cbSceneParam._m0[80u].x;
            float _3164 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : max(_3025, _3026));
            float _3165 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : min(_3025, _3026));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            float _3175 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : min(_3165, 0.0));
            _3219 = ((abs(_3032 / _3021) * cbSceneParam._m0[80u].y) * ((((_3174 - _3175) * 2.0) - ((exp2(_3040 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0)))) - exp2(_3040 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))))) * _3163)) - ((exp2(_3042 * _3174) - exp2(_3042 * _3175)) * _3163))) + (_3035 * cbSceneParam._m0[80u].z);
        }
        vec4 _3221 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, 1.0), 0.0);
        float _3230 = exp2((_3219 * (-1.44269502162933349609375)) * (1.0 - _3221.w));
        float _3231 = log2(_3230);
        float _3247 = log2(_2952);
        _3044 = (exp2(_3247 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].x)) * _3221.x) / cbSceneParam._m0[78u].x)) + _2949;
        _3046 = (exp2(_3247 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].y)) * _3221.y) / cbSceneParam._m0[78u].y)) + _2950;
        _3048 = (exp2(_3247 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].z)) * _3221.z) / cbSceneParam._m0[78u].z)) + _2951;
        _3050 = _3230 * _2952;
    }
    else
    {
        _3044 = _2949;
        _3046 = _2950;
        _3048 = _2951;
        _3050 = _2952;
    }
    bool _3257;
    vec4 _3060;
    vec4 _3082;
    float _3084;
    float _3088;
    float _3089;
    float _3090;
    float _3091;
    bool _3101;
    for (;;)
    {
        _3060 = cbMatDynParam._m0[0u];
        float _3062 = roundEven(_3060.y);
        bool _3063 = _3062 == 3.0;
        float _3064 = log2(_3050);
        float _3071 = exp2(_3064 * cbSceneParam._m0[78u].x) * _2921;
        float _3072 = exp2(_3064 * cbSceneParam._m0[78u].y) * _2922;
        float _3073 = exp2(_3064 * cbSceneParam._m0[78u].z) * _2923;
        float _3080 = _1016 + (-0.5);
        _3082 = cbMtdParam._m0[1u];
        _3084 = _3082.y * _3080;
        float _3087 = (_3062 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3088 = _3087 * (_3063 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3044)));
        _3089 = _3087 * (_3063 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3046)));
        _3090 = _3087 * (_3063 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3048)));
        _3091 = _3080 * 0.999000012874603271484375;
        _3101 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3101)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3091) < 0.5)
            {
                _3257 = true;
                break;
            }
        }
        uint _3198 = _1065 + uint(_3060.w);
        if ((cbInstanceData._m0[_3198].w < 1.0) && ((cbInstanceData._m0[_3198].w + _3091) < 0.5))
        {
            _3257 = true;
            break;
        }
        if ((_3084 + 1.0) < _3082.x)
        {
            _3257 = true;
            break;
        }
        _3257 = false;
        break;
    }
    float _3462;
    if (_3257)
    {
        discard_state = true;
        _3462 = 0.0;
    }
    else
    {
        _3462 = cbInstanceData._m0[_2924].w;
    }
    SV_Target.x = _3088;
    SV_Target.y = _3089;
    SV_Target.z = _3090;
    SV_Target.w = _3462;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2924].w;
    discard_exit();
}


