#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1382;
float _3788;
float _3789;
float _3790;
float _3791;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3800 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3811 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3822 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _451 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _468 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_439 - _451) * cbMtdParam._m0[23u].w) + _451) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3833 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _476 = (_469 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _477 = (_469 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _478 = (_469 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _495 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _517 = _515.x;
    float _527 = dot(vec4(_517, _515.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _541 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_517 - _527) * cbMtdParam._m0[23u].w) + _527) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3844 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _552 = (_334.x * cbMtdParam._m0[9u].x) * ((_542 * ((_495.x * cbMtdParam._m0[13u].x) - _476)) + _476);
    float _553 = (_334.y * cbMtdParam._m0[9u].y) * ((_542 * ((_495.y * cbMtdParam._m0[13u].y) - _477)) + _477);
    float _554 = (_334.z * cbMtdParam._m0[9u].z) * ((_542 * ((_495.z * cbMtdParam._m0[13u].z) - _478)) + _478);
    float _558 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _552;
    float _561 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _553;
    float _564 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _554;
    float _572 = (((_552 - _558) * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) + _558) * 4.55000019073486328125;
    float _574 = (((_553 - _561) * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) + _561) * 4.55000019073486328125;
    float _576 = (((_554 - _564) * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) + _564) * 4.55000019073486328125;
    vec4 _588 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _628 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _632 = _628.z;
    float _639 = ((_611.x - _630) * _469) + _630;
    float _640 = ((_611.y - _631) * _469) + _631;
    float _641 = ((_611.z - _632) * _469) + _632;
    vec4 _653 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _666 = ((_653.z - _641) * _542) + _641;
    float _669 = ((((_653.x - _639) * _542) + _639) * 2.0) + (-1.0);
    float _670 = ((((_653.y - _640) * _542) + _640) * 2.0) + (-1.0);
    float _671 = dot(vec2(_669, _670), vec2(_669, _670));
    float _3855 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _676 = sqrt(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))));
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _708 = (_669 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_588.x * 2.0) + (-1.0)))) + (((_696.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _709 = (_670 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_588.y * 2.0) + (-1.0)))) + (((_696.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _737 = _735.x;
    float _754 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _737) * _469) + _737;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w));
    float _772 = ((_767.x - _754) * _542) + _754;
    float _776 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _772) * cbMtdParam._m0[19u].z) + _772;
    float _781 = (((_588.z - _666) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _666;
    float _785 = ((_696.z - _781) * cbMtdParam._m0[19u].w) + _781;
    float _787 = cbMtdParam._m0[22u].x + _696.w;
    float _790 = fma(_676, _244 * NORMAL.x, fma(_709, _251 * TANGENT.x, (_237 * _229) * _708));
    float _793 = fma(_676, _244 * NORMAL.y, fma(_709, _251 * TANGENT.y, (_237 * _230) * _708));
    float _796 = fma(_676, _244 * NORMAL.z, fma(_709, _251 * TANGENT.z, (_237 * _231) * _708));
    float _800 = inversesqrt(dot(vec3(_790, _793, _796), vec3(_790, _793, _796)));
    float _801 = _800 * _790;
    float _802 = _800 * _793;
    float _803 = _800 * _796;
    float _3866 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _804 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _3888 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3899 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3910 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3921 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _809 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _823 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _874 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _864);
    float _875 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _864);
    float _876 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _864);
    float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
    float _881 = _874 * _880;
    float _882 = _875 * _880;
    float _883 = _876 * _880;
    vec4 _888 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _890 = _888.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1062 = sqrt(((_874 * _874) + (_875 * _875)) + (_876 * _876));
        float _1068 = (cbMatDynParam._m0[5u].x * _1062) + cbMatDynParam._m0[5u].y;
        float _3932 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1073 = (cbMatDynParam._m0[5u].z * _1062) + cbMatDynParam._m0[5u].w;
        float _3943 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) - _1069)) + _1069) < ((_890 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _901 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _902 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _920 = fma(_803, cbSceneParam._m0[5u].z, fma(_802, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _801));
    float _923 = fma(_803, cbSceneParam._m0[6u].z, fma(_802, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _801));
    float _926 = fma(_803, cbSceneParam._m0[7u].z, fma(_802, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _801));
    uint _939 = _278 + 9u;
    uint _940 = _939 + uint(cbMatDynParam._m0[0u].w);
    float _946 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_940].x;
    float _947 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_940].y;
    float _948 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_940].z;
    float _3954 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _952 = 1.0 - _809;
    float _953 = _949 * _952;
    float _954 = _950 * _952;
    float _955 = _951 * _952;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _809;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _809;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _809;
    float _963 = _960 + 0.039999999105930328369140625;
    float _965 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    vec4 _975 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _901, cbSceneParam._m0[86u].y * _902));
    float _979 = ((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * TEXCOORD_5.w) * _975.x;
    float _980 = dot(vec3(_801, _802, _803), vec3(_881, _882, _883));
    float _983 = _980 * 2.0;
    float _987 = (_983 * _801) - _881;
    float _988 = (_983 * _802) - _882;
    float _989 = (_983 * _803) - _883;
    float _993 = abs(dot(vec3(_881, _882, _883), vec3(_801, _802, _803)));
    float _3987 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _995 = sqrt(_804);
    float _1008 = exp2((_995 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_995 * 3.0));
    float _1014 = (1.0 - _1008) * ((_995 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1015 = _1008 * _995;
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1381;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1106 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1110 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1114 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1139 = _1043 + _801;
        float _1140 = _1047 + _802;
        float _1141 = _1051 + _803;
        float _1151 = fma(_1141, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139)) - _1106;
        float _1152 = fma(_1141, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139)) - _1110;
        float _1153 = fma(_1141, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139)) - _1114;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1106 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1110 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[34u].z) + ((((((_1114 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1209 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1175.x + (-0.5));
        float _1211 = _1209 * (_1175.y + (-0.5));
        float _1212 = _1209 * (_1175.z + (-0.5));
        float _1219 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1182.x + (-0.5));
        float _1221 = _1219 * (_1182.y + (-0.5));
        float _1222 = _1219 * (_1182.z + (-0.5));
        float _1229 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1189.x + (-0.5));
        float _1231 = _1229 * (_1189.y + (-0.5));
        float _1232 = _1229 * (_1189.z + (-0.5));
        float _1239 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1196.x + (-0.5));
        float _1241 = _1239 * (_1196.y + (-0.5));
        float _1242 = _1239 * (_1196.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1263 = (dot(vec3(_801, _802, _803), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1273 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4035 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1275 + 1.0))) + _1280) * _1243;
        float _1290 = _1211 * 0.5;
        float _1291 = _1221 * 0.5;
        float _1292 = _1231 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_801, _802, _803), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4068 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1317 + 1.0))) + _1322) * _1244;
        float _1332 = _1212 * 0.5;
        float _1333 = _1222 * 0.5;
        float _1334 = _1232 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_801, _802, _803), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4101 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1359 + 1.0))) + _1364) * _1245;
        _1381 = _1212;
        _1383 = _1211;
        _1384 = _1210;
        _1385 = _1222;
        _1386 = _1221;
        _1387 = _1220;
        _1388 = _1232;
        _1389 = _1231;
        _1390 = _1230;
        _1391 = _1245;
        _1392 = _1244;
        _1393 = _1243;
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1382;
        _1383 = _1382;
        _1384 = _1382;
        _1385 = _1382;
        _1386 = _1382;
        _1387 = _1382;
        _1388 = _1382;
        _1389 = _1382;
        _1390 = _1382;
        _1391 = _1382;
        _1392 = _1382;
        _1393 = _1382;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1423 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1427 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1431 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1454 = _1043 + _801;
        float _1455 = _1047 + _802;
        float _1456 = _1051 + _803;
        float _1466 = fma(_1456, cbModelParam._m0[30u].z, fma(_1455, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1454)) - _1423;
        float _1467 = fma(_1456, cbModelParam._m0[31u].z, fma(_1455, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1454)) - _1427;
        float _1468 = fma(_1456, cbModelParam._m0[32u].z, fma(_1455, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1454)) - _1431;
        float _1472 = inversesqrt(dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468)));
        float _1485 = ((_1472 * _1466) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1423 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1472 * _1467) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1427 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1472 * _1468) / cbModelParam._m0[35u].z) + ((((((_1431 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        float _1522 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1489.x + (-0.5));
        float _1524 = _1522 * (_1489.y + (-0.5));
        float _1525 = _1522 * (_1489.z + (-0.5));
        float _1532 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1496.x + (-0.5));
        float _1534 = _1532 * (_1496.y + (-0.5));
        float _1535 = _1532 * (_1496.z + (-0.5));
        float _1542 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1503.x + (-0.5));
        float _1544 = _1542 * (_1503.y + (-0.5));
        float _1545 = _1542 * (_1503.z + (-0.5));
        float _1552 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1510.x + (-0.5));
        float _1554 = _1552 * (_1510.y + (-0.5));
        float _1555 = _1552 * (_1510.z + (-0.5));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = _1523 * 0.5;
        float _1560 = _1533 * 0.5;
        float _1561 = _1543 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_801, _802, _803), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4164 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1586 + 1.0))) + _1591) * _1556;
        float _1601 = _1524 * 0.5;
        float _1602 = _1534 * 0.5;
        float _1603 = _1544 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_801, _802, _803), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4197 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1628 + 1.0))) + _1633) * _1557;
        float _1643 = _1525 * 0.5;
        float _1644 = _1535 * 0.5;
        float _1645 = _1545 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_801, _802, _803), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4230 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1670 + 1.0))) + _1675) * _1558;
        _1692 = _1525;
        _1693 = _1524;
        _1694 = _1523;
        _1695 = _1535;
        _1696 = _1534;
        _1697 = _1533;
        _1698 = _1545;
        _1699 = _1544;
        _1700 = _1543;
        _1701 = _1558;
        _1702 = _1557;
        _1703 = _1556;
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
    }
    else
    {
        _1692 = _1382;
        _1693 = _1382;
        _1694 = _1382;
        _1695 = _1382;
        _1696 = _1382;
        _1697 = _1382;
        _1698 = _1382;
        _1699 = _1382;
        _1700 = _1382;
        _1701 = _1382;
        _1702 = _1382;
        _1703 = _1382;
        _1704 = 0.0;
        _1705 = 0.0;
        _1706 = 0.0;
    }
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1394)) + _1394;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1395)) + _1395;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1396)) + _1396;
    float _1739 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1716));
    float _1760 = _987 * 0.5;
    float _1761 = _988 * 0.5;
    float _1762 = _989 * 0.5;
    float _1763 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1766 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1769 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1803;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1776 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1381, _1385, _1388, _1391));
        float _1780 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1784 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1791 = dot(vec4(cbModelParam._m0[39u]), vec4(_1760, _1761, _1762, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1814;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1805 = dot(vec4(cbModelParam._m0[40u]), vec4(_1760, _1761, _1762, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1818 = (_1814 * cbModelParam._m0[1u].x) + (_1803 * (1.0 - cbModelParam._m0[1u].x));
    float _1828 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _804);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1828 : min(cbModelParam._m0[25u].z, _1828));
    float _1911;
    float _1913;
    float _1915;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1878 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1882 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1886 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1889 = fma(_989, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987));
        float _1892 = fma(_989, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987));
        float _1895 = fma(_989, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987));
        float _1923;
        if (_1889 > 0.0)
        {
            _1923 = abs((1.0 - _1878) / _1889);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1878 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1923 = frontier_phi_17_15_ladder;
        }
        float _2147;
        if (_1892 > 0.0)
        {
            _2147 = abs((1.0 - _1882) / _1892);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1882 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2147 = frontier_phi_26_22_ladder;
        }
        float _2404;
        if (_1895 > 0.0)
        {
            _2404 = abs((1.0 - _1886) / _1895);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1886 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2404 = frontier_phi_38_33_ladder;
        }
        float _2406 = isnan(_2147) ? _1923 : (isnan(_1923) ? _2147 : min(_1923, _2147));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1889) + _1878;
        float _2412 = (_2407 * _1892) + _1882;
        float _2413 = (_2407 * _1895) + _1886;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2414;
        float _2418 = _2414 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 > _2418) || ((_2412 < _2416) || ((_2411 < _2416) || (_2411 > _2418))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2413, cbModelParam._m0[9u].z, fma(_2412, cbModelParam._m0[9u].y, _2411 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2413, cbModelParam._m0[10u].z, fma(_2412, cbModelParam._m0[10u].y, _2411 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2413, cbModelParam._m0[11u].z, fma(_2412, cbModelParam._m0[11u].y, _2411 * cbModelParam._m0[11u].x))), _1829);
            frontier_phi_16_38_ladder = _2541.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2541.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2541.x * cbModelParam._m0[1u].y;
        }
        _1911 = frontier_phi_16_38_ladder_2;
        _1913 = frontier_phi_16_38_ladder_1;
        _1915 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1899 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_987, _988, _989), _1829);
        _1911 = _1899.x * cbModelParam._m0[1u].y;
        _1913 = _1899.y * cbModelParam._m0[1u].y;
        _1915 = _1899.z * cbModelParam._m0[1u].y;
    }
    float _1919 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _804);
    float _1920 = isnan(_1919) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1919 : min(cbModelParam._m0[25u].w, _1919));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1974 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1978 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1982 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1985 = fma(_989, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987));
        float _1988 = fma(_989, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987));
        float _1991 = fma(_989, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987));
        float _2152;
        if (_1985 > 0.0)
        {
            _2152 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2152 = frontier_phi_28_24_ladder;
        }
        float _2431;
        if (_1988 > 0.0)
        {
            _2431 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2431 = frontier_phi_40_35_ladder;
        }
        float _2644;
        if (_1991 > 0.0)
        {
            _2644 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2644 = frontier_phi_49_46_ladder;
        }
        float _2646 = isnan(_2431) ? _2152 : (isnan(_2152) ? _2431 : min(_2152, _2431));
        float _2647 = isnan(_2644) ? _2646 : (isnan(_2646) ? _2644 : min(_2646, _2644));
        float _2651 = (_2647 * _1985) + _1974;
        float _2652 = (_2647 * _1988) + _1978;
        float _2653 = (_2647 * _1991) + _1982;
        float _2654 = _2647 * 9.9999997473787516355514526367188e-05;
        float _2655 = (-1.0) - _2654;
        float _2657 = _2654 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2653 > _2657) || ((_2653 < _2655) || ((_2652 > _2657) || ((_2652 < _2655) || ((_2651 < _2655) || (_2651 > _2657))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2653, cbModelParam._m0[17u].z, fma(_2652, cbModelParam._m0[17u].y, _2651 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2653, cbModelParam._m0[18u].z, fma(_2652, cbModelParam._m0[18u].y, _2651 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2653, cbModelParam._m0[19u].z, fma(_2652, cbModelParam._m0[19u].y, _2651 * cbModelParam._m0[19u].x))), _1920);
            frontier_phi_25_49_ladder = _2852.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2852.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2852.x * cbModelParam._m0[1u].z;
        }
        _2010 = frontier_phi_25_49_ladder_2;
        _2012 = frontier_phi_25_49_ladder_1;
        _2014 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_987, _988, _989), _1920);
        _2010 = _1994.x * cbModelParam._m0[1u].z;
        _2012 = _1994.y * cbModelParam._m0[1u].z;
        _2014 = _1994.z * cbModelParam._m0[1u].z;
    }
    float _2027 = (((_1014 * _963) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_2010 - _1911)) + _1911);
    float _2029 = (((_1014 * _965) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_2012 - _1913)) + _1913);
    float _2031 = (((_1014 * _966) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_2014 - _1915)) + _1915);
    float _2034 = fma(_2031, cbSceneParam._m0[89u].z, fma(_2029, cbSceneParam._m0[89u].y, _2027 * cbSceneParam._m0[89u].x));
    float _2037 = fma(_2031, cbSceneParam._m0[90u].z, fma(_2029, cbSceneParam._m0[90u].y, _2027 * cbSceneParam._m0[90u].x));
    float _2040 = fma(_2031, cbSceneParam._m0[91u].z, fma(_2029, cbSceneParam._m0[91u].y, _2027 * cbSceneParam._m0[91u].x));
    vec4 _2048 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_901, _902));
    float _2050 = _2048.w;
    float _2062 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2050);
    float _2063 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2050);
    float _2064 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2050);
    uvec4 _2068 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2070 = _2068.x * 14u;
    uint _2071 = _2070 + 13u;
    float _2078 = _979 + (-1.0);
    float _2083 = (cbLight._m0[_2071].x * _2078) + 1.0;
    float _2084 = (cbLight._m0[_2071].y * _2078) + 1.0;
    float _2085 = (cbLight._m0[_2071].z * _2078) + 1.0;
    float _2086 = (cbLight._m0[_2071].w * _2078) + 1.0;
    uint _2087 = _2070 + 5u;
    float _2093 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
    uint _2097 = _2070 + 4u;
    float _2106 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    uint _2110 = _2070 | 1u;
    float _2121 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_801, _802, _803));
    float _2124 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_801, _802, _803));
    float _4366 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _4377 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2129 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2131 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2138 = ((cbLight._m0[_2087].x * _2093) * _2131) + (((cbLight._m0[_2097].x * _2062) * _2106) * _2129);
    float _2139 = ((_2093 * cbLight._m0[_2087].y) * _2131) + (((cbLight._m0[_2097].y * _2063) * _2106) * _2129);
    float _2140 = ((_2093 * cbLight._m0[_2087].z) * _2131) + (((cbLight._m0[_2097].z * _2064) * _2106) * _2129);
    uvec4 _2144 = floatBitsToUint(cbLight._m0[_2070 + 12u]);
    bool _2146 = _2144.x == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2146)
    {
        _2157 = _2138;
        _2159 = _2139;
        _2161 = _2140;
    }
    else
    {
        uint _2165 = _2070 + 6u;
        float _2181 = (dot(vec3(cbLight._m0[_2070 + 2u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4388 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2184 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2157 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _2138;
        _2159 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _2139;
        _2161 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _2140;
    }
    bool _2164 = _2144.y == 0u;
    float _2202;
    float _2204;
    float _2206;
    if (_2164)
    {
        _2202 = _2157;
        _2204 = _2159;
        _2206 = _2161;
    }
    else
    {
        uint _2375 = _2070 + 7u;
        float _2391 = (dot(vec3(cbLight._m0[_2070 + 3u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4404 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2394 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2202 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2157;
        _2204 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2159;
        _2206 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2161;
    }
    uint _2209 = _2070 + 8u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _804) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_2070].x + _881;
    float _2225 = cbLight._m0[_2070].y + _882;
    float _2226 = cbLight._m0[_2070].z + _883;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2070].xyz));
    float _4420 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _4431 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2238 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2239 = dot(vec3(_801, _802, _803), vec3(_2231, _2232, _2233));
    float _4442 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2231, _2232, _2233));
    float _4453 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2223 * _2223;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2259 = exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0);
    float _2260 = 0.959999978542327880859375 - _960;
    float _2262 = 0.959999978542327880859375 - _961;
    float _2263 = 0.959999978542327880859375 - _962;
    float _2270 = 1.0 - _2223;
    float _2281 = (0.5 / (((_2238 * ((_2237 * _2270) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2270) + _2223) * _2237))) * _2237;
    float _4464 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2283 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    uint _2297 = _2070 + 9u;
    float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _804) * 0.949999988079071044921875);
    float _2309 = _2308 * _2308;
    float _2310 = cbLight._m0[_2110].x + _881;
    float _2311 = cbLight._m0[_2110].y + _882;
    float _2312 = cbLight._m0[_2110].z + _883;
    float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
    float _2317 = _2316 * _2310;
    float _2318 = _2316 * _2311;
    float _2319 = _2316 * _2312;
    float _2320 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2110].xyz));
    float _4475 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2324 = dot(vec3(_801, _802, _803), vec3(_2317, _2318, _2319));
    float _4486 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2328 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2317, _2318, _2319));
    float _4497 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2332 = _2309 * _2309;
    float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
    float _2343 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
    float _2350 = 1.0 - _2309;
    float _2360 = (0.5 / (((_2238 * ((_2323 * _2350) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2350) + _2309) * _2323))) * _2323;
    float _4508 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2362 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
    float _2372 = (((((_2343 * _2260) + _963) * cbLight._m0[_2297].x) * _2362) * _2093) + ((((cbLight._m0[_2209].x * _2062) * ((_2259 * _2260) + _963)) * _2283) * _2106);
    float _2373 = (((((_2343 * _2262) + _965) * cbLight._m0[_2297].y) * _2362) * _2093) + ((((cbLight._m0[_2209].y * _2063) * ((_2259 * _2262) + _965)) * _2283) * _2106);
    float _2374 = (((((_2343 * _2263) + _966) * cbLight._m0[_2297].z) * _2362) * _2093) + ((((cbLight._m0[_2209].z * _2064) * ((_2259 * _2263) + _966)) * _2283) * _2106);
    float _2436;
    float _2438;
    float _2440;
    if (_2146)
    {
        _2436 = _2372;
        _2438 = _2373;
        _2440 = _2374;
    }
    else
    {
        uint _2442 = _2070 + 2u;
        uint _2446 = _2070 + 10u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _804) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _881;
        float _2463 = cbLight._m0[_2442].y + _882;
        float _2464 = cbLight._m0[_2442].z + _883;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2442].xyz));
        float _4519 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2476 = dot(vec3(_801, _802, _803), vec3(_2469, _2470, _2471));
        float _4530 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4541 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2495 = exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0);
        float _2502 = 1.0 - _2461;
        float _2512 = (0.5 / (((_2238 * ((_2475 * _2502) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2502) + _2461) * _2475))) * _2475;
        float _4552 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2514 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2515 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2436 = (((((_2495 * _2260) + _963) * cbLight._m0[_2446].x) * _2514) * _2515) + _2372;
        _2438 = (((((_2495 * _2262) + _965) * cbLight._m0[_2446].y) * _2514) * _2515) + _2373;
        _2440 = (((((_2495 * _2263) + _966) * cbLight._m0[_2446].z) * _2514) * _2515) + _2374;
    }
    float _2550;
    float _2552;
    float _2554;
    if (_2164)
    {
        _2550 = _2436;
        _2552 = _2438;
        _2554 = _2440;
    }
    else
    {
        uint _2561 = _2070 + 3u;
        uint _2565 = _2070 + 11u;
        float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2561].w)) * _804) * 0.949999988079071044921875);
        float _2580 = _2579 * _2579;
        float _2581 = cbLight._m0[_2561].x + _881;
        float _2582 = cbLight._m0[_2561].y + _882;
        float _2583 = cbLight._m0[_2561].z + _883;
        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
        float _2588 = _2587 * _2581;
        float _2589 = _2587 * _2582;
        float _2590 = _2587 * _2583;
        float _2591 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2561].xyz));
        float _4568 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2595 = dot(vec3(_801, _802, _803), vec3(_2588, _2589, _2590));
        float _4579 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2599 = dot(vec3(cbLight._m0[_2561].xyz), vec3(_2588, _2589, _2590));
        float _4590 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2603 = _2580 * _2580;
        float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
        float _2614 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
        float _2621 = 1.0 - _2580;
        float _2631 = (0.5 / (((_2238 * ((_2594 * _2621) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2621) + _2580) * _2594))) * _2594;
        float _4601 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2633 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
        float _2634 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2550 = (((((_2614 * _2260) + _963) * cbLight._m0[_2565].x) * _2633) * _2634) + _2436;
        _2552 = (((((_2614 * _2262) + _965) * cbLight._m0[_2565].y) * _2633) * _2634) + _2438;
        _2554 = (((((_2614 * _2263) + _966) * cbLight._m0[_2565].z) * _2633) * _2634) + _2440;
    }
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_2068.y == 0u)
    {
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2709;
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2709;
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2709;
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.x;
        uint _2736 = uint((float(_2724.y) * floor(float(uint(cbSceneParam._m0[85u].y * _902) / _2725))) + floor(float(uint(cbSceneParam._m0[85u].x * _901) / _2725)));
        float _2746 = (log2(_2712 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2747 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        uint _2750 = uint(isnan(14.0) ? _2747 : (isnan(_2747) ? 14.0 : min(_2747, 14.0)));
        uvec4 _2755 = texelFetch(g_lightClusterGridBuffer, int(((_2750 << 2u) + (_2736 << 6u)) >> 2u));
        uint _2756 = _2755.x;
        uint _2757 = _2724.z;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((((1u << ((_2757 >> 4u) & 15u)) + 4294967295u) & _2756) == 0u) || ((_2757 & 240u) == 0u))
        {
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
        }
        else
        {
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            uint _3016 = 0u;
            uint _3025;
            bool _3026;
            for (;;)
            {
                _3025 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_3016 << 2u)) >> 2u)).x;
                _3026 = _3025 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3026)
                {
                    frontier_phi_66_pred = _3010;
                    frontier_phi_66_pred_1 = _3015;
                    frontier_phi_66_pred_2 = _3014;
                    frontier_phi_66_pred_3 = _3013;
                    frontier_phi_66_pred_4 = _3012;
                    frontier_phi_66_pred_5 = _3011;
                }
                else
                {
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    uint _3161;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3025;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    for (;;)
                    {
                        uint _3165 = uint(findLSB(_3161)) + (_3016 << 5u);
                        uint _3162 = (_3161 + 4294967295u) & _3161;
                        uint _3167 = _3165 * 48u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3187 = (_3165 * 48u) + 4u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3206 = (_3165 * 48u) + 8u;
                        vec3 _3217 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x));
                        float _3221 = _3181.x - _2710;
                        float _3222 = _3181.y - _2711;
                        float _3223 = _3181.z - _2712;
                        float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                        float _3227 = inversesqrt(_3224);
                        float _3228 = _3227 * _3221;
                        float _3229 = _3227 * _3222;
                        float _3230 = _3227 * _3223;
                        float _3231 = dot(vec3(_920, _923, _926), vec3(_3228, _3229, _3230));
                        float _3236 = 1.0 - (_3224 * _3181.w);
                        float _4627 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3237 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3238 = sqrt(_3224) * _3200.w;
                        float _3241 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                        float _3242 = _3241 * _3241;
                        float _3245 = ((1.0 - _3242) * _3231) + _3242;
                        float _3248 = _3238 * _3238;
                        float _3252 = ((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3237) / ((_3248 * 0.699999988079071044921875) + 1.0);
                        float _3256 = (-0.0) - _2710;
                        float _3257 = (-0.0) - _2711;
                        float _3258 = (-0.0) - _2712;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3273 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                        float _3274 = 1.0 - _995;
                        float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                        float _3282 = _3281 * _3281;
                        float _3283 = _3282 * _3282;
                        float _3284 = _3263 + _3228;
                        float _3285 = _3264 + _3229;
                        float _3286 = _3265 + _3230;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3294 = dot(vec3(_920, _923, _926), vec3(_3263, _3264, _3265));
                        float _4643 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3298 = dot(vec3(_920, _923, _926), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                        float _4654 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                        float _3306 = _3241 * _3282;
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3231) + _3307;
                        float _4665 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3312 = 1.0 - _3282;
                        float _3322 = (0.5 / (((_3311 * ((_3297 * _3312) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3282) * _3297))) * _3311;
                        float _4676 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3333 = (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) / ((_3305 * _3305) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125))) * _3237;
                        _3085 = (_3252 * _3200.x) + _3158;
                        _3086 = (_3252 * _3200.y) + _3159;
                        _3087 = (_3252 * _3200.z) + _3160;
                        _3082 = (_3333 * _3217.x) + _3155;
                        _3083 = (_3333 * _3217.y) + _3156;
                        _3084 = (_3333 * _3217.z) + _3157;
                        if (_3162 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3162;
                        }
                    }
                    frontier_phi_66_pred = _3082;
                    frontier_phi_66_pred_1 = _3087;
                    frontier_phi_66_pred_2 = _3086;
                    frontier_phi_66_pred_3 = _3085;
                    frontier_phi_66_pred_4 = _3084;
                    frontier_phi_66_pred_5 = _3083;
                }
                _2858 = frontier_phi_66_pred;
                _2868 = frontier_phi_66_pred_1;
                _2866 = frontier_phi_66_pred_2;
                _2864 = frontier_phi_66_pred_3;
                _2862 = frontier_phi_66_pred_4;
                _2860 = frontier_phi_66_pred_5;
                uint _3017 = _3016 + 1u;
                if (_3017 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3010 = _2858;
                    _3011 = _2860;
                    _3012 = _2862;
                    _3013 = _2864;
                    _3014 = _2866;
                    _3015 = _2868;
                    _3016 = _3017;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
        }
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.z;
        uint _2874 = (_2872 >> 8u) & 15u;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        if (((4294967295u << _2874) & _2756) == 0u)
        {
            _2978 = _2857;
            _2980 = _2859;
            _2982 = _2861;
            _2984 = _2863;
            _2986 = _2865;
            _2988 = _2867;
        }
        else
        {
            float _3003 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
            float _3004 = _3003 * _2710;
            float _3005 = _3003 * _2711;
            float _3006 = _3003 * _2712;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2874 < ((_2872 >> 12u) & 15u))
            {
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _2989;
                float _3138 = _2857;
                float _3139 = _2859;
                float _3140 = _2861;
                float _3141 = _2863;
                float _3142 = _2865;
                float _3143 = _2867;
                uint _3144 = _2874;
                uint _3153;
                bool _3154;
                for (;;)
                {
                    _3153 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                    _3154 = _3153 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3154)
                    {
                        frontier_phi_77_pred = _3143;
                        frontier_phi_77_pred_1 = _3142;
                        frontier_phi_77_pred_2 = _3141;
                        frontier_phi_77_pred_3 = _3140;
                        frontier_phi_77_pred_4 = _3139;
                        frontier_phi_77_pred_5 = _3138;
                    }
                    else
                    {
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        float _3362 = _3140;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        uint _3366 = _3153;
                        uint _3367;
                        vec4 _3392;
                        float _3393;
                        vec4 _3408;
                        vec3 _3420;
                        vec4 _3435;
                        vec4 _3450;
                        float _3497;
                        bool _3498;
                        for (;;)
                        {
                            uint _3377 = ((_3144 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3366));
                            _3367 = (_3366 + 4294967295u) & _3366;
                            uint _3379 = _3377 * 40u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            _3393 = _3392.w;
                            uint _3395 = (_3377 * 40u) + 4u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3410 = (_3377 * 40u) + 8u;
                            _3420 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x));
                            uint _3422 = (_3377 * 40u) + 16u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3377 * 40u) + 20u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3453 = (_3377 * 40u) + 24u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3472 = (_3377 * 40u) + 28u;
                            vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3497 = fma(_2712, _3485.z, fma(_2711, _3485.y, _3485.x * _2710)) + _3485.w;
                            _3498 = !((fma(_2712, _3466.z, fma(_2711, _3466.y, _3466.x * _2710)) + _3466.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3498)
                            {
                                float _3525 = _3392.x - _2710;
                                float _3526 = _3392.y - _2711;
                                float _3527 = _3392.z - _2712;
                                float _3528 = dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527));
                                float _3531 = inversesqrt(_3528);
                                float _3532 = _3531 * _3525;
                                float _3533 = _3531 * _3526;
                                float _3534 = _3531 * _3527;
                                float _3538 = 1.0 - (_3528 / (_3393 * _3393));
                                float _4687 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3543 = sqrt(_3528) * _3408.w;
                                float _3545 = 1.39999997615814208984375 / (_3543 + 1.39999997615814208984375);
                                float _3546 = _3545 * _3545;
                                float _3549 = ((1.0 - _3546) * dot(vec3(_3532, _3533, _3534), vec3(_920, _923, _926))) + _3546;
                                float _3552 = _3543 * _3543;
                                float _3556 = (fma(_2712, _3435.z, fma(_2711, _3435.y, _3435.x * _2710)) + _3435.w) / _3497;
                                float _3557 = (fma(_2712, _3450.z, fma(_2711, _3450.y, _3450.x * _2710)) + _3450.w) / _3497;
                                float _3561 = 1.0 - dot(vec2(_3556, _3557), vec2(_3556, _3557));
                                float _4703 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3563 = _3562 * (((isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0))) * _3539) / ((_3552 * 0.699999988079071044921875) + 1.0));
                                float _3575 = exp2(log2(1.0 / ((_3552 * 3.5) + 5.0)) * 0.25);
                                float _3576 = 1.0 - _995;
                                float _3583 = sqrt(1.0 - ((1.0 - (_3576 * _3576)) * (1.0 - (_3575 * _3575))));
                                float _3584 = _3583 * _3583;
                                float _3585 = _3584 * _3584;
                                float _3586 = _3532 - _3004;
                                float _3587 = _3533 - _3005;
                                float _3588 = _3534 - _3006;
                                float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                                float _3596 = dot(vec3(_920, _923, _926), vec3((-0.0) - _3004, (-0.0) - _3005, (-0.0) - _3006));
                                float _4714 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3600 = dot(vec3(_920, _923, _926), vec3(_3592 * _3586, _3592 * _3587, _3592 * _3588));
                                float _4725 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3607 = ((_3603 * _3603) * (_3585 + (-1.0))) + 1.0;
                                float _3608 = _3545 * _3584;
                                float _3609 = _3608 * _3608;
                                float _3615 = ((1.0 - _3609) * dot(vec3(_920, _923, _926), vec3(_3532, _3533, _3534))) + _3609;
                                float _4736 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3617 = 1.0 - _3584;
                                float _3627 = (0.5 / (((_3616 * ((_3599 * _3617) + _3584)) + 9.9999999392252902907785028219223e-09) + (((_3616 * _3617) + _3584) * _3599))) * _3616;
                                float _4747 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3637 = (_3562 * _3539) * (((_3585 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3607 * _3607) * ((_3552 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3563 * _3408.y;
                                frontier_phi_83_pred_1 = _3563 * _3408.x;
                                frontier_phi_83_pred_2 = _3637 * _3420.z;
                                frontier_phi_83_pred_3 = _3637 * _3420.y;
                                frontier_phi_83_pred_4 = _3637 * _3420.x;
                                frontier_phi_83_pred_5 = _3563 * _3408.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3645 = frontier_phi_83_pred;
                            _3644 = frontier_phi_83_pred_1;
                            _3643 = frontier_phi_83_pred_2;
                            _3642 = frontier_phi_83_pred_3;
                            _3641 = frontier_phi_83_pred_4;
                            _3646 = frontier_phi_83_pred_5;
                            _3350 = _3644 + _3363;
                            _3351 = _3645 + _3364;
                            _3352 = _3646 + _3365;
                            _3347 = _3641 + _3360;
                            _3348 = _3642 + _3361;
                            _3349 = _3643 + _3362;
                            if (_3367 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3367;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3352;
                        frontier_phi_77_pred_1 = _3351;
                        frontier_phi_77_pred_2 = _3350;
                        frontier_phi_77_pred_3 = _3349;
                        frontier_phi_77_pred_4 = _3348;
                        frontier_phi_77_pred_5 = _3347;
                    }
                    _2989 = frontier_phi_77_pred;
                    _2987 = frontier_phi_77_pred_1;
                    _2985 = frontier_phi_77_pred_2;
                    _2983 = frontier_phi_77_pred_3;
                    _2981 = frontier_phi_77_pred_4;
                    _2979 = frontier_phi_77_pred_5;
                    uint _3145 = _3144 + 1u;
                    if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3138 = _2979;
                        _3139 = _2981;
                        _3140 = _2983;
                        _3141 = _2985;
                        _3142 = _2987;
                        _3143 = _2989;
                        _3144 = _3145;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2983;
                frontier_phi_58_59_ladder_1 = _2989;
                frontier_phi_58_59_ladder_2 = _2987;
                frontier_phi_58_59_ladder_3 = _2985;
                frontier_phi_58_59_ladder_4 = _2981;
                frontier_phi_58_59_ladder_5 = _2979;
            }
            else
            {
                frontier_phi_58_59_ladder = _2861;
                frontier_phi_58_59_ladder_1 = _2867;
                frontier_phi_58_59_ladder_2 = _2865;
                frontier_phi_58_59_ladder_3 = _2863;
                frontier_phi_58_59_ladder_4 = _2859;
                frontier_phi_58_59_ladder_5 = _2857;
            }
            _2978 = frontier_phi_58_59_ladder_5;
            _2980 = frontier_phi_58_59_ladder_4;
            _2982 = frontier_phi_58_59_ladder;
            _2984 = frontier_phi_58_59_ladder_3;
            _2986 = frontier_phi_58_59_ladder_2;
            _2988 = frontier_phi_58_59_ladder_1;
        }
        float _2993 = isnan(1.0) ? _979 : (isnan(_979) ? 1.0 : min(_979, 1.0));
        _2769 = (_2993 * _2984) + _2202;
        _2771 = (_2993 * _2986) + _2204;
        _2773 = (_2993 * _2988) + _2206;
        _2775 = ((_2978 * _963) * _2993) + _2550;
        _2777 = ((_2980 * _965) * _2993) + _2552;
        _2779 = ((_2982 * _966) * _2993) + _2554;
    }
    else
    {
        _2769 = _2202;
        _2771 = _2204;
        _2773 = _2206;
        _2775 = _2550;
        _2777 = _2552;
        _2779 = _2554;
    }
    float _4763 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _4774 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4785 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _2796 = ((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2769 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _979))) + ((_2775 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _2797 = ((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2771 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _979))) + ((_2777 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _2798 = ((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2773 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _979))) + ((_2779 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    uint _2799 = _278 + 6u;
    float _2807 = _901 / cbSceneParam._m0[86u].x;
    float _2808 = _902 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _823 : (isnan(_823) ? cbSceneParam._m0[77u].w : min(_823, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_823 > cbSceneParam._m0[78u].w)
    {
        float _2882 = isnan(_823) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _823 : min(cbSceneParam._m0[80u].w, _823));
        float _2883 = _2882 / _823;
        float _2894 = _2883 * _874;
        float _2895 = _875 * _2883;
        float _2896 = (-0.0) - _2895;
        float _2898 = _2883 * _876;
        float _2900 = (cbSceneParam._m0[77u].w * _2896) / _2882;
        float _2901 = _2900 + cbSceneParam._m0[79u].w;
        float _2902 = cbSceneParam._m0[79u].w - _2895;
        float _2908 = sqrt(((_2894 * _2894) + (_2895 * _2895)) + (_2898 * _2898));
        float _2911 = (1.0 - (cbSceneParam._m0[77u].w / _2882)) * _2908;
        float _2916 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2918 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3095;
        if (abs((_2896 - _2900) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3095 = ((((_2901 > 0.0) ? exp2(_2916 * _2901) : (2.0 - exp2(_2918 * _2901))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2911;
        }
        else
        {
            float _3039 = 1.0 / cbSceneParam._m0[80u].x;
            float _3040 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : max(_2901, _2902));
            float _3041 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : min(_2901, _2902));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            float _3051 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : min(_3041, 0.0));
            _3095 = ((abs(_2908 / _2896) * cbSceneParam._m0[80u].y) * ((((_3050 - _3051) * 2.0) - ((exp2(_2916 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0)))) - exp2(_2916 * (isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))))) * _3039)) - ((exp2(_2918 * _3050) - exp2(_2918 * _3051)) * _3039))) + (_2911 * cbSceneParam._m0[80u].z);
        }
        vec4 _3097 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3106 = exp2((_3095 * (-1.44269502162933349609375)) * (1.0 - _3097.w));
        float _3107 = log2(_3106);
        float _3123 = log2(_2827);
        _2920 = (exp2(_3123 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].x)) * _3097.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2922 = (exp2(_3123 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].y)) * _3097.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2924 = (exp2(_3123 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3107 * cbSceneParam._m0[78u].z)) * _3097.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2926 = _3106 * _2827;
    }
    else
    {
        _2920 = _2824;
        _2922 = _2825;
        _2924 = _2826;
        _2926 = _2827;
    }
    bool _3133;
    vec4 _2936;
    vec4 _2958;
    float _2960;
    float _2964;
    float _2965;
    float _2966;
    float _2967;
    bool _2977;
    for (;;)
    {
        _2936 = cbMatDynParam._m0[0u];
        float _2938 = roundEven(_2936.y);
        bool _2939 = _2938 == 3.0;
        float _2940 = log2(_2926);
        float _2947 = exp2(_2940 * cbSceneParam._m0[78u].x) * _2796;
        float _2948 = exp2(_2940 * cbSceneParam._m0[78u].y) * _2797;
        float _2949 = exp2(_2940 * cbSceneParam._m0[78u].z) * _2798;
        float _2956 = _890 + (-0.5);
        _2958 = cbMtdParam._m0[1u];
        _2960 = _2958.y * _2956;
        float _2963 = (_2938 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2964 = _2963 * (_2939 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2920)));
        _2965 = _2963 * (_2939 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2922)));
        _2966 = _2963 * (_2939 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2924)));
        _2967 = _2956 * 0.999000012874603271484375;
        _2977 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2977)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _2967) < 0.5)
            {
                _3133 = true;
                break;
            }
        }
        uint _3074 = _939 + uint(_2936.w);
        if ((cbInstanceData._m0[_3074].w < 1.0) && ((cbInstanceData._m0[_3074].w + _2967) < 0.5))
        {
            _3133 = true;
            break;
        }
        if ((_2960 + 1.0) < _2958.x)
        {
            _3133 = true;
            break;
        }
        _3133 = false;
        break;
    }
    float _3338;
    if (_3133)
    {
        discard_state = true;
        _3338 = 0.0;
    }
    else
    {
        _3338 = cbInstanceData._m0[_2799].w;
    }
    SV_Target.x = _2964;
    SV_Target.y = _2965;
    SV_Target.z = _2966;
    SV_Target.w = _3338;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2799].w;
    discard_exit();
}


