#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1576;
float _4237;
float _4238;
float _4239;
float _4240;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4249 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4260 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4271 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    uint _292 = uint(roundEven(NORMAL.w)) * 13u;
    uint _297 = _292 + 1u;
    uint _301 = _292 + 2u;
    float _310 = sqrt(((cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x)) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x));
    float _311 = _310 * TEXCOORD.z;
    float _312 = _310 * TEXCOORD.w;
    vec4 _325 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _311) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _312) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _354 = _349.x * cbMtdParam._m0[11u].x;
    float _355 = _349.y * cbMtdParam._m0[11u].y;
    float _356 = _349.z * cbMtdParam._m0[11u].z;
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _311) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _312) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _394.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[23u].w) + _443) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4282 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _468 = (_461 * ((_375.x * cbMtdParam._m0[12u].x) - _354)) + _354;
    float _469 = (_461 * ((_375.y * cbMtdParam._m0[12u].y) - _355)) + _355;
    float _470 = (_461 * ((_375.z * cbMtdParam._m0[12u].z) - _356)) + _356;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _311) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _312) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _394.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[23u].w) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4293 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _311) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _312) + cbTextureTilingScale._m0[24u].w));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _581 = _579.x;
    float _591 = dot(vec4(_581, _579.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _603 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _394.z) * 2.0) - ((((_581 - _591) * cbMtdParam._m0[23u].w) + _591) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4304 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _604 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _611 = (_604 * ((_562.x * cbMtdParam._m0[14u].x) - _541)) + _541;
    float _612 = (_604 * ((_562.y * cbMtdParam._m0[14u].y) - _542)) + _542;
    float _613 = (_604 * ((_562.z * cbMtdParam._m0[14u].z) - _543)) + _543;
    float _617 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _325.x) * _611;
    float _620 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _325.y) * _612;
    float _623 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _325.z) * _613;
    float _630 = ((_611 - _617) * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) + _617;
    float _631 = ((_612 - _620) * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) + _620;
    float _632 = ((_613 - _623) * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) + _623;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _311) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _312) + cbTextureTilingScale._m0[20u].w));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _311) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _312) + cbTextureTilingScale._m0[4u].w));
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _691 = _689.x;
    float _692 = _689.y;
    float _693 = _689.z;
    float _700 = ((_672.x - _691) * _461) + _691;
    float _701 = ((_672.y - _692) * _461) + _692;
    float _702 = ((_672.z - _693) * _461) + _693;
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _311) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _312) + cbTextureTilingScale._m0[2u].w));
    float _725 = ((_714.x - _700) * _534) + _700;
    float _726 = ((_714.y - _701) * _534) + _701;
    float _727 = ((_714.z - _702) * _534) + _702;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _311) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _312) + cbTextureTilingScale._m0[23u].w));
    float _752 = ((_739.z - _727) * _604) + _727;
    float _755 = ((((_739.x - _725) * _604) + _725) * 2.0) + (-1.0);
    float _756 = ((((_739.y - _726) * _604) + _726) * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _4315 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _762 = sqrt(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))));
    vec4 _776 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _311) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _312) + cbTextureTilingScale._m0[11u].w));
    float _803 = _801.x;
    float _804 = 1.0 - _803;
    float _819 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_803 - _804) * cbMtdParam._m0[24u].z) + _804) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4326 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _820 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _827 = (_820 * (cbMtdParam._m0[17u].x - _630)) + _630;
    float _828 = (_820 * (cbMtdParam._m0[17u].y - _631)) + _631;
    float _829 = (_820 * (cbMtdParam._m0[17u].z - _632)) + _632;
    vec4 _855 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _857 = _855.x;
    float _875 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _311) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _312) + cbTextureTilingScale._m0[9u].w)).x - _857) * _461) + _857;
    float _892 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _311) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _312) + cbTextureTilingScale._m0[21u].w)).x - _875) * _534) + _875;
    float _910 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _311) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _312) + cbTextureTilingScale._m0[10u].w)).x - _892) * _604) + _892;
    float _914 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _910) * cbMtdParam._m0[19u].z) + _910;
    float _916 = _914 - (_914 * _820);
    float _921 = (((_649.z - _752) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _752;
    float _925 = ((_776.z - _921) * cbMtdParam._m0[19u].w) + _921;
    vec4 _938 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _311) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _312) + cbTextureTilingScale._m0[15u].w));
    float _945 = (_938.x * 2.0) + (-1.0);
    float _946 = (_938.y * 2.0) + (-1.0);
    float _947 = dot(vec2(_945, _946), vec2(_945, _946));
    float _4337 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _955 = (_820 * (_938.z - _925)) + _925;
    float _964 = (_755 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_649.x * 2.0) + (-1.0)))) + (((_776.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _965 = (_756 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_649.y * 2.0) + (-1.0)))) + (((_776.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _977 = (((_945 - _964) + (cbMtdParam._m0[21u].x * _964)) * _820) + _964;
    float _978 = (((_946 - _965) + (cbMtdParam._m0[21u].x * _965)) * _820) + _965;
    float _979 = (_820 * (sqrt(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) - _762)) + _762;
    float _983 = cbMtdParam._m0[22u].x + _776.w;
    float _986 = fma(_979, _258 * NORMAL.x, fma(_978, _265 * TANGENT.x, (_251 * _243) * _977));
    float _989 = fma(_979, _258 * NORMAL.y, fma(_978, _265 * TANGENT.y, (_251 * _244) * _977));
    float _992 = fma(_979, _258 * NORMAL.z, fma(_978, _265 * TANGENT.z, (_251 * _245) * _977));
    float _996 = inversesqrt(dot(vec3(_986, _989, _992), vec3(_986, _989, _992)));
    float _997 = _996 * _986;
    float _998 = _996 * _989;
    float _999 = _996 * _992;
    float _4348 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _1000 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _4359 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4370 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4381 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4392 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4403 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _1005 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _1019 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1069 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1059);
    float _1070 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1059);
    float _1071 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1059);
    float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
    float _1076 = _1069 * _1075;
    float _1077 = _1070 * _1075;
    float _1078 = _1071 * _1075;
    vec4 _1083 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1085 = _1083.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1257 = sqrt(((_1069 * _1069) + (_1070 * _1070)) + (_1071 * _1071));
        float _1263 = (cbMatDynParam._m0[5u].x * _1257) + cbMatDynParam._m0[5u].y;
        float _4414 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1268 = (cbMatDynParam._m0[5u].z * _1257) + cbMatDynParam._m0[5u].w;
        float _4425 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) - _1264)) + _1264) < ((_1085 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1096 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1097 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1115 = fma(_999, cbSceneParam._m0[5u].z, fma(_998, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _997));
    float _1118 = fma(_999, cbSceneParam._m0[6u].z, fma(_998, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _997));
    float _1121 = fma(_999, cbSceneParam._m0[7u].z, fma(_998, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _997));
    uint _1134 = _292 + 9u;
    uint _1135 = _1134 + uint(cbMatDynParam._m0[0u].w);
    float _1141 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * cbInstanceData._m0[_1135].x;
    float _1142 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * cbInstanceData._m0[_1135].y;
    float _1143 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * cbInstanceData._m0[_1135].z;
    float _4436 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _4447 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1145 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _4458 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1146 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _1147 = 1.0 - _1005;
    float _1148 = _1144 * _1147;
    float _1149 = _1145 * _1147;
    float _1150 = _1146 * _1147;
    float _1155 = (_1144 + (-0.039999999105930328369140625)) * _1005;
    float _1156 = (_1145 + (-0.039999999105930328369140625)) * _1005;
    float _1157 = (_1146 + (-0.039999999105930328369140625)) * _1005;
    float _1158 = _1155 + 0.039999999105930328369140625;
    float _1160 = _1156 + 0.039999999105930328369140625;
    float _1161 = _1157 + 0.039999999105930328369140625;
    vec4 _1170 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1096, cbSceneParam._m0[86u].y * _1097));
    float _1174 = ((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * TEXCOORD_5.w) * _1170.x;
    float _1175 = dot(vec3(_997, _998, _999), vec3(_1076, _1077, _1078));
    float _1178 = _1175 * 2.0;
    float _1182 = (_1178 * _997) - _1076;
    float _1183 = (_1178 * _998) - _1077;
    float _1184 = (_1178 * _999) - _1078;
    float _1188 = abs(dot(vec3(_1076, _1077, _1078), vec3(_997, _998, _999)));
    float _4469 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1190 = sqrt(_1000);
    float _1203 = exp2((_1190 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1190 * 3.0));
    float _1209 = (1.0 - _1203) * ((_1190 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1210 = _1203 * _1190;
    float _1238 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1575;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1300 = fma(_1246, cbModelParam._m0[26u].z, fma(_1242, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1238));
        float _1304 = fma(_1246, cbModelParam._m0[27u].z, fma(_1242, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1238));
        float _1308 = fma(_1246, cbModelParam._m0[28u].z, fma(_1242, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1238));
        float _1333 = _1238 + _997;
        float _1334 = _1242 + _998;
        float _1335 = _1246 + _999;
        float _1345 = fma(_1335, cbModelParam._m0[26u].z, fma(_1334, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1333)) - _1300;
        float _1346 = fma(_1335, cbModelParam._m0[27u].z, fma(_1334, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1333)) - _1304;
        float _1347 = fma(_1335, cbModelParam._m0[28u].z, fma(_1334, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1333)) - _1308;
        float _1351 = inversesqrt(dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347)));
        float _1364 = ((_1351 * _1345) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1300 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1351 * _1346) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1304 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1351 * _1347) / cbModelParam._m0[34u].z) + ((((((_1308 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        float _1403 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1369.x + (-0.5));
        float _1405 = _1403 * (_1369.y + (-0.5));
        float _1406 = _1403 * (_1369.z + (-0.5));
        float _1413 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1376.x + (-0.5));
        float _1415 = _1413 * (_1376.y + (-0.5));
        float _1416 = _1413 * (_1376.z + (-0.5));
        float _1423 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1383.x + (-0.5));
        float _1425 = _1423 * (_1383.y + (-0.5));
        float _1426 = _1423 * (_1383.z + (-0.5));
        float _1433 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1390.x + (-0.5));
        float _1435 = _1433 * (_1390.y + (-0.5));
        float _1436 = _1433 * (_1390.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1457 = (dot(vec3(_997, _998, _999), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1467 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4517 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1469 + 1.0))) + _1474) * _1437;
        float _1484 = _1405 * 0.5;
        float _1485 = _1415 * 0.5;
        float _1486 = _1425 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_997, _998, _999), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4528 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4539 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4550 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_1511 + 1.0))) + _1516) * _1438;
        float _1526 = _1406 * 0.5;
        float _1527 = _1416 * 0.5;
        float _1528 = _1426 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_997, _998, _999), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4561 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4572 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4583 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_1553 + 1.0))) + _1558) * _1439;
        _1575 = _1406;
        _1577 = _1405;
        _1578 = _1404;
        _1579 = _1416;
        _1580 = _1415;
        _1581 = _1414;
        _1582 = _1426;
        _1583 = _1425;
        _1584 = _1424;
        _1585 = _1439;
        _1586 = _1438;
        _1587 = _1437;
        _1588 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1590 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
    }
    else
    {
        _1575 = _1576;
        _1577 = _1576;
        _1578 = _1576;
        _1579 = _1576;
        _1580 = _1576;
        _1581 = _1576;
        _1582 = _1576;
        _1583 = _1576;
        _1584 = _1576;
        _1585 = _1576;
        _1586 = _1576;
        _1587 = _1576;
        _1588 = 0.0;
        _1589 = 0.0;
        _1590 = 0.0;
    }
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1616 = fma(_1246, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238));
        float _1620 = fma(_1246, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238));
        float _1624 = fma(_1246, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238));
        float _1647 = _1238 + _997;
        float _1648 = _1242 + _998;
        float _1649 = _1246 + _999;
        float _1659 = fma(_1649, cbModelParam._m0[30u].z, fma(_1648, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1647)) - _1616;
        float _1660 = fma(_1649, cbModelParam._m0[31u].z, fma(_1648, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1647)) - _1620;
        float _1661 = fma(_1649, cbModelParam._m0[32u].z, fma(_1648, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1647)) - _1624;
        float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
        float _1678 = ((_1665 * _1659) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1616 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1679 = ((_1665 * _1660) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1620 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1680 = ((_1665 * _1661) / cbModelParam._m0[35u].z) + ((((((_1624 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1696 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        float _1715 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1682.x + (-0.5));
        float _1717 = _1715 * (_1682.y + (-0.5));
        float _1718 = _1715 * (_1682.z + (-0.5));
        float _1725 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1726 = _1725 * (_1689.x + (-0.5));
        float _1727 = _1725 * (_1689.y + (-0.5));
        float _1728 = _1725 * (_1689.z + (-0.5));
        float _1735 = exp2((_1696.w + (-0.5)) * 20.0) * 2.0;
        float _1736 = _1735 * (_1696.x + (-0.5));
        float _1737 = _1735 * (_1696.y + (-0.5));
        float _1738 = _1735 * (_1696.z + (-0.5));
        float _1745 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = _1745 * (_1703.x + (-0.5));
        float _1747 = _1745 * (_1703.y + (-0.5));
        float _1748 = _1745 * (_1703.z + (-0.5));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1751 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1752 = _1716 * 0.5;
        float _1753 = _1726 * 0.5;
        float _1754 = _1736 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_997, _998, _999), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4624 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4635 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4646 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_1779 + 1.0))) + _1784) * _1749;
        float _1794 = _1717 * 0.5;
        float _1795 = _1727 * 0.5;
        float _1796 = _1737 * 0.5;
        float _1797 = dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796));
        float _1802 = (_1797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1797);
        float _1810 = (dot(vec3(_997, _998, _999), vec3(_1802 * _1794, _1802 * _1795, _1802 * _1796)) + 1.0) * 0.5;
        float _4657 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796)) / (_1750 + 9.9999997473787516355514526367188e-06);
        float _4668 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _1821 = _1820 * 2.0;
        float _1825 = (1.0 - _1820) / (_1820 + 1.0);
        float _4679 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _1835 = ((((1.0 - _1826) * (_1821 + 2.0)) * exp2(log2(isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_1821 + 1.0))) + _1826) * _1750;
        float _1836 = _1718 * 0.5;
        float _1837 = _1728 * 0.5;
        float _1838 = _1738 * 0.5;
        float _1839 = dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838));
        float _1844 = (_1839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1839);
        float _1852 = (dot(vec3(_997, _998, _999), vec3(_1844 * _1836, _1844 * _1837, _1844 * _1838)) + 1.0) * 0.5;
        float _4690 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1861 = sqrt(((_1837 * _1837) + (_1836 * _1836)) + (_1838 * _1838)) / (_1751 + 9.9999997473787516355514526367188e-06);
        float _4701 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _1863 = _1862 * 2.0;
        float _1867 = (1.0 - _1862) / (_1862 + 1.0);
        float _4712 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _1877 = ((((1.0 - _1868) * (_1863 + 2.0)) * exp2(log2(isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_1863 + 1.0))) + _1868) * _1751;
        _1885 = _1718;
        _1886 = _1717;
        _1887 = _1716;
        _1888 = _1728;
        _1889 = _1727;
        _1890 = _1726;
        _1891 = _1738;
        _1892 = _1737;
        _1893 = _1736;
        _1894 = _1751;
        _1895 = _1750;
        _1896 = _1749;
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
        _1898 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)));
        _1899 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)));
    }
    else
    {
        _1885 = _1576;
        _1886 = _1576;
        _1887 = _1576;
        _1888 = _1576;
        _1889 = _1576;
        _1890 = _1576;
        _1891 = _1576;
        _1892 = _1576;
        _1893 = _1576;
        _1894 = _1576;
        _1895 = _1576;
        _1896 = _1576;
        _1897 = 0.0;
        _1898 = 0.0;
        _1899 = 0.0;
    }
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1588)) + _1588;
    float _1910 = (cbModelParam._m0[1u].x * (_1898 - _1589)) + _1589;
    float _1911 = (cbModelParam._m0[1u].x * (_1899 - _1590)) + _1590;
    float _1932 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1935 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1938 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1909));
    float _1953 = _1182 * 0.5;
    float _1954 = _1183 * 0.5;
    float _1955 = _1184 * 0.5;
    float _1956 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1887, _1890, _1893, _1896));
    float _1959 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1886, _1889, _1892, _1895));
    float _1962 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1996;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1969 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1575, _1579, _1582, _1585));
        float _1973 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1577, _1580, _1583, _1586));
        float _1977 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1578, _1581, _1584, _1587));
        float _1984 = dot(vec4(cbModelParam._m0[39u]), vec4(_1953, _1954, _1955, 1.0));
        _1996 = dot(vec3(isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1984) ? 0.0 : (isnan(0.0) ? _1984 : max(0.0, _1984))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1996 = 1.0;
    }
    float _2007;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1998 = dot(vec4(cbModelParam._m0[40u]), vec4(_1953, _1954, _1955, 1.0));
        _2007 = dot(vec3(isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1998) ? 0.0 : (isnan(0.0) ? _1998 : max(0.0, _1998))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2007 = 1.0;
    }
    float _2011 = (_2007 * cbModelParam._m0[1u].x) + (_1996 * (1.0 - cbModelParam._m0[1u].x));
    float _2021 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1000);
    float _2022 = isnan(_2021) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2021 : min(cbModelParam._m0[25u].z, _2021));
    float _2102;
    float _2104;
    float _2106;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2069 = fma(_1246, cbModelParam._m0[13u].z, fma(_1242, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1238)) + cbModelParam._m0[13u].w;
        float _2073 = fma(_1246, cbModelParam._m0[14u].z, fma(_1242, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1238)) + cbModelParam._m0[14u].w;
        float _2077 = fma(_1246, cbModelParam._m0[15u].z, fma(_1242, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1238)) + cbModelParam._m0[15u].w;
        float _2080 = fma(_1184, cbModelParam._m0[13u].z, fma(_1183, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1182));
        float _2083 = fma(_1184, cbModelParam._m0[14u].z, fma(_1183, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1182));
        float _2086 = fma(_1184, cbModelParam._m0[15u].z, fma(_1183, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1182));
        float _2114;
        if (_2080 > 0.0)
        {
            _2114 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2114 = frontier_phi_17_15_ladder;
        }
        float _2286;
        if (_2083 > 0.0)
        {
            _2286 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2286 = frontier_phi_26_22_ladder;
        }
        float _2581;
        if (_2086 > 0.0)
        {
            _2581 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2581 = frontier_phi_38_33_ladder;
        }
        float _2583 = isnan(_2286) ? _2114 : (isnan(_2114) ? _2286 : min(_2114, _2286));
        float _2584 = isnan(_2581) ? _2583 : (isnan(_2583) ? _2581 : min(_2583, _2581));
        float _2588 = (_2584 * _2080) + _2069;
        float _2589 = (_2584 * _2083) + _2073;
        float _2590 = (_2584 * _2086) + _2077;
        float _2591 = _2584 * 9.9999997473787516355514526367188e-05;
        float _2593 = (-1.0) - _2591;
        float _2595 = _2591 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2590 > _2595) || ((_2590 < _2593) || ((_2589 > _2595) || ((_2589 < _2593) || ((_2588 < _2593) || (_2588 > _2595))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2590, cbModelParam._m0[9u].z, fma(_2589, cbModelParam._m0[9u].y, _2588 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2590, cbModelParam._m0[10u].z, fma(_2589, cbModelParam._m0[10u].y, _2588 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2590, cbModelParam._m0[11u].z, fma(_2589, cbModelParam._m0[11u].y, _2588 * cbModelParam._m0[11u].x))), _2022);
            frontier_phi_16_38_ladder = _2735.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2735.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2735.x * cbModelParam._m0[1u].y;
        }
        _2102 = frontier_phi_16_38_ladder_2;
        _2104 = frontier_phi_16_38_ladder_1;
        _2106 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2090 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1182, _1183, _1184), _2022);
        _2102 = _2090.x * cbModelParam._m0[1u].y;
        _2104 = _2090.y * cbModelParam._m0[1u].y;
        _2106 = _2090.z * cbModelParam._m0[1u].y;
    }
    float _2110 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1000);
    float _2111 = isnan(_2110) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2110 : min(cbModelParam._m0[25u].w, _2110));
    float _2201;
    float _2203;
    float _2205;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2165 = fma(_1246, cbModelParam._m0[21u].z, fma(_1242, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1238)) + cbModelParam._m0[21u].w;
        float _2169 = fma(_1246, cbModelParam._m0[22u].z, fma(_1242, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1238)) + cbModelParam._m0[22u].w;
        float _2173 = fma(_1246, cbModelParam._m0[23u].z, fma(_1242, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1238)) + cbModelParam._m0[23u].w;
        float _2176 = fma(_1184, cbModelParam._m0[21u].z, fma(_1183, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1182));
        float _2179 = fma(_1184, cbModelParam._m0[22u].z, fma(_1183, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1182));
        float _2182 = fma(_1184, cbModelParam._m0[23u].z, fma(_1183, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1182));
        float _2291;
        if (_2176 > 0.0)
        {
            _2291 = abs((1.0 - _2165) / _2176);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2176 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2165 + 1.0) / _2176);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2291 = frontier_phi_28_24_ladder;
        }
        float _2608;
        if (_2179 > 0.0)
        {
            _2608 = abs((1.0 - _2169) / _2179);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2179 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2169 + 1.0) / _2179);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2608 = frontier_phi_40_35_ladder;
        }
        float _2946;
        if (_2182 > 0.0)
        {
            _2946 = abs((1.0 - _2173) / _2182);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2173 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2946 = frontier_phi_50_47_ladder;
        }
        float _2948 = isnan(_2608) ? _2291 : (isnan(_2291) ? _2608 : min(_2291, _2608));
        float _2949 = isnan(_2946) ? _2948 : (isnan(_2948) ? _2946 : min(_2948, _2946));
        float _2953 = (_2949 * _2176) + _2165;
        float _2954 = (_2949 * _2179) + _2169;
        float _2955 = (_2949 * _2182) + _2173;
        float _2956 = _2949 * 9.9999997473787516355514526367188e-05;
        float _2957 = (-1.0) - _2956;
        float _2959 = _2956 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2955 > _2959) || ((_2955 < _2957) || ((_2954 > _2959) || ((_2954 < _2957) || ((_2953 < _2957) || (_2953 > _2959))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3077 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2955, cbModelParam._m0[17u].z, fma(_2954, cbModelParam._m0[17u].y, _2953 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2955, cbModelParam._m0[18u].z, fma(_2954, cbModelParam._m0[18u].y, _2953 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2955, cbModelParam._m0[19u].z, fma(_2954, cbModelParam._m0[19u].y, _2953 * cbModelParam._m0[19u].x))), _2111);
            frontier_phi_25_50_ladder = _3077.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3077.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3077.x * cbModelParam._m0[1u].z;
        }
        _2201 = frontier_phi_25_50_ladder_2;
        _2203 = frontier_phi_25_50_ladder_1;
        _2205 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2185 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1182, _1183, _1184), _2111);
        _2201 = _2185.x * cbModelParam._m0[1u].z;
        _2203 = _2185.y * cbModelParam._m0[1u].z;
        _2205 = _2185.z * cbModelParam._m0[1u].z;
    }
    float _2218 = (((_1209 * _1158) + _1210) * _1174) * ((cbModelParam._m0[1u].w * (_2201 - _2102)) + _2102);
    float _2220 = (((_1209 * _1160) + _1210) * _1174) * ((cbModelParam._m0[1u].w * (_2203 - _2104)) + _2104);
    float _2222 = (((_1209 * _1161) + _1210) * _1174) * ((cbModelParam._m0[1u].w * (_2205 - _2106)) + _2106);
    float _2225 = fma(_2222, cbSceneParam._m0[89u].z, fma(_2220, cbSceneParam._m0[89u].y, _2218 * cbSceneParam._m0[89u].x));
    float _2228 = fma(_2222, cbSceneParam._m0[90u].z, fma(_2220, cbSceneParam._m0[90u].y, _2218 * cbSceneParam._m0[90u].x));
    float _2231 = fma(_2222, cbSceneParam._m0[91u].z, fma(_2220, cbSceneParam._m0[91u].y, _2218 * cbSceneParam._m0[91u].x));
    float _2265 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2269 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2273 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2277 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2278 = _2265 / _2277;
    float _2279 = _2269 / _2277;
    float _2280 = _2273 / _2277;
    float _2427;
    float _2428;
    float _2429;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2307 = ((uint(_2280 > cbSceneParam._m0[59u].y) + uint(_2280 > cbSceneParam._m0[59u].x)) + uint(_2280 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2308 = _2307 + 43u;
        uint _2316 = _2307 + 44u;
        uint _2324 = _2307 + 45u;
        uint _2332 = _2307 + 46u;
        float _2343 = fma(_2277, cbSceneParam._m0[_2308].w, fma(_2273, cbSceneParam._m0[_2308].z, fma(_2269, cbSceneParam._m0[_2308].y, _2265 * cbSceneParam._m0[_2308].x)));
        float _2347 = fma(_2277, cbSceneParam._m0[_2316].w, fma(_2273, cbSceneParam._m0[_2316].z, fma(_2269, cbSceneParam._m0[_2316].y, _2265 * cbSceneParam._m0[_2316].x)));
        float _2355 = fma(_2277, cbSceneParam._m0[_2332].w, fma(_2273, cbSceneParam._m0[_2332].z, fma(_2269, cbSceneParam._m0[_2332].y, _2265 * cbSceneParam._m0[_2332].x)));
        float _2360 = cbSceneParam._m0[33u].z * _2355;
        float _2362 = cbSceneParam._m0[33u].w * _2355;
        float _2365 = fma(_2277, cbSceneParam._m0[_2324].w, fma(_2273, cbSceneParam._m0[_2324].z, fma(_2269, cbSceneParam._m0[_2324].y, _2265 * cbSceneParam._m0[_2324].x))) / _2355;
        float _2413 = (cbSceneParam._m0[33u].x - sqrt(((_2279 * _2279) + (_2278 * _2278)) + (_2280 * _2280))) * cbSceneParam._m0[33u].y;
        float _4838 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2420 = (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2360 + _2343) / _2355, (_2362 + _2347) / _2355), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2362 + _2343) / _2355, (_2347 - _2360) / _2355), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2343 - _2360) / _2355, (_2347 - _2362) / _2355), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2343 - _2362) / _2355, (_2360 + _2347) / _2355), _2365), 0.0)).x), vec4(0.25)));
        _2427 = 1.0 - (_2420 * cbSceneParam._m0[34u].x);
        _2428 = 1.0 - (_2420 * cbSceneParam._m0[34u].y);
        _2429 = 1.0 - (_2420 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2427 = 1.0;
        _2428 = 1.0;
        _2429 = 1.0;
    }
    float _2493;
    float _2495;
    float _2497;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2481 = fma(_2277, cbSceneParam._m0[63u].w, fma(_2273, cbSceneParam._m0[63u].z, fma(_2269, cbSceneParam._m0[63u].y, _2265 * cbSceneParam._m0[63u].x)));
        float _2482 = fma(_2277, cbSceneParam._m0[60u].w, fma(_2273, cbSceneParam._m0[60u].z, fma(_2269, cbSceneParam._m0[60u].y, _2265 * cbSceneParam._m0[60u].x))) / _2481;
        float _2483 = fma(_2277, cbSceneParam._m0[61u].w, fma(_2273, cbSceneParam._m0[61u].z, fma(_2269, cbSceneParam._m0[61u].y, _2265 * cbSceneParam._m0[61u].x))) / _2481;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2482 >= cbSceneParam._m0[64u].x) && (_2483 >= cbSceneParam._m0[64u].y)) && (_2482 <= cbSceneParam._m0[64u].z)) && (_2483 <= cbSceneParam._m0[64u].w))
        {
            float _2621 = fma(_2277, cbSceneParam._m0[62u].w, fma(_2273, cbSceneParam._m0[62u].z, fma(_2269, cbSceneParam._m0[62u].y, _2265 * cbSceneParam._m0[62u].x))) / _2481;
            float _2625 = isnan(cbSceneParam._m0[41u].w) ? _2621 : (isnan(_2621) ? cbSceneParam._m0[41u].w : max(_2621, cbSceneParam._m0[41u].w));
            float _2668 = (cbSceneParam._m0[33u].x - sqrt(((_2279 * _2279) + (_2278 * _2278)) + (_2280 * _2280))) * cbSceneParam._m0[33u].y;
            float _4854 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
            float _2675 = (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2482, cbSceneParam._m0[33u].w + _2483), _2625), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2482, _2483 - cbSceneParam._m0[33u].z), _2625), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2482 - cbSceneParam._m0[33u].z, _2483 - cbSceneParam._m0[33u].w), _2625), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2482 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2483), _2625), 0.0)).x), vec4(0.25)));
            float _2679 = 1.0 - (_2675 * cbSceneParam._m0[34u].x);
            float _2680 = 1.0 - (_2675 * cbSceneParam._m0[34u].y);
            float _2681 = 1.0 - (_2675 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2681) ? _2429 : (isnan(_2429) ? _2681 : min(_2429, _2681));
            frontier_phi_37_36_ladder_1 = isnan(_2680) ? _2428 : (isnan(_2428) ? _2680 : min(_2428, _2680));
            frontier_phi_37_36_ladder_2 = isnan(_2679) ? _2427 : (isnan(_2427) ? _2679 : min(_2427, _2679));
        }
        else
        {
            frontier_phi_37_36_ladder = _2429;
            frontier_phi_37_36_ladder_1 = _2428;
            frontier_phi_37_36_ladder_2 = _2427;
        }
        _2493 = frontier_phi_37_36_ladder_2;
        _2495 = frontier_phi_37_36_ladder_1;
        _2497 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2493 = _2427;
        _2495 = _2428;
        _2497 = _2429;
    }
    uvec4 _2502 = floatBitsToUint(cbInstanceData._m0[_292 + 5u]);
    uint _2504 = _2502.x * 14u;
    uint _2505 = _2504 + 13u;
    float _2512 = _1174 + (-1.0);
    float _2517 = (cbLight._m0[_2505].x * _2512) + 1.0;
    float _2518 = (cbLight._m0[_2505].y * _2512) + 1.0;
    float _2519 = (cbLight._m0[_2505].z * _2512) + 1.0;
    float _2520 = (cbLight._m0[_2505].w * _2512) + 1.0;
    uint _2521 = _2504 + 5u;
    float _2527 = isnan(1.0) ? _2518 : (isnan(_2518) ? 1.0 : min(_2518, 1.0));
    uint _2531 = _2504 + 4u;
    float _2540 = isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0));
    uint _2544 = _2504 | 1u;
    float _2555 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_997, _998, _999));
    float _2558 = dot(vec3(cbLight._m0[_2544].xyz), vec3(_997, _998, _999));
    float _4890 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _4901 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2563 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * 0.3183098733425140380859375;
    float _2565 = (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * 0.3183098733425140380859375;
    float _2572 = ((cbLight._m0[_2521].x * _2527) * _2565) + (((cbLight._m0[_2531].x * _2493) * _2540) * _2563);
    float _2573 = ((_2527 * cbLight._m0[_2521].y) * _2565) + (((cbLight._m0[_2531].y * _2495) * _2540) * _2563);
    float _2574 = ((_2527 * cbLight._m0[_2521].z) * _2565) + (((cbLight._m0[_2531].z * _2497) * _2540) * _2563);
    uvec4 _2578 = floatBitsToUint(cbLight._m0[_2504 + 12u]);
    bool _2580 = _2578.x == 0u;
    float _2682;
    float _2684;
    float _2686;
    if (_2580)
    {
        _2682 = _2572;
        _2684 = _2573;
        _2686 = _2574;
    }
    else
    {
        uint _2690 = _2504 + 6u;
        float _2706 = (dot(vec3(cbLight._m0[_2504 + 2u].xyz), vec3(_997, _998, _999)) * 0.5) + 0.5;
        float _2707 = _2706 * _2706;
        float _4912 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2708 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
        float _2709 = isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0));
        _2682 = (((cbLight._m0[_2690].x * 0.3183098733425140380859375) * _2708) * _2709) + _2572;
        _2684 = (((cbLight._m0[_2690].y * 0.3183098733425140380859375) * _2708) * _2709) + _2573;
        _2686 = (((cbLight._m0[_2690].z * 0.3183098733425140380859375) * _2708) * _2709) + _2574;
    }
    bool _2689 = _2578.y == 0u;
    float _2744;
    float _2746;
    float _2748;
    if (_2689)
    {
        _2744 = _2682;
        _2746 = _2684;
        _2748 = _2686;
    }
    else
    {
        uint _2917 = _2504 + 7u;
        float _2933 = (dot(vec3(cbLight._m0[_2504 + 3u].xyz), vec3(_997, _998, _999)) * 0.5) + 0.5;
        float _2934 = _2933 * _2933;
        float _4928 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2935 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
        float _2936 = isnan(1.0) ? _2520 : (isnan(_2520) ? 1.0 : min(_2520, 1.0));
        _2744 = (((cbLight._m0[_2917].x * 0.3183098733425140380859375) * _2935) * _2936) + _2682;
        _2746 = (((cbLight._m0[_2917].y * 0.3183098733425140380859375) * _2935) * _2936) + _2684;
        _2748 = (((cbLight._m0[_2917].z * 0.3183098733425140380859375) * _2935) * _2936) + _2686;
    }
    uint _2751 = _2504 + 8u;
    float _2764 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _1000) * 0.949999988079071044921875);
    float _2765 = _2764 * _2764;
    float _2766 = cbLight._m0[_2504].x + _1076;
    float _2767 = cbLight._m0[_2504].y + _1077;
    float _2768 = cbLight._m0[_2504].z + _1078;
    float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
    float _2773 = _2772 * _2766;
    float _2774 = _2772 * _2767;
    float _2775 = _2772 * _2768;
    float _2776 = dot(vec3(_997, _998, _999), vec3(cbLight._m0[_2504].xyz));
    float _4944 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2779 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
    float _4955 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _2780 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
    float _2781 = dot(vec3(_997, _998, _999), vec3(_2773, _2774, _2775));
    float _4966 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
    float _2784 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
    float _2785 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2773, _2774, _2775));
    float _4977 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
    float _2789 = _2765 * _2765;
    float _2793 = ((_2784 * _2784) * (_2789 + (-1.0))) + 1.0;
    float _2801 = exp2(log2(1.0 - (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) * 5.0);
    float _2802 = 0.959999978542327880859375 - _1155;
    float _2804 = 0.959999978542327880859375 - _1156;
    float _2805 = 0.959999978542327880859375 - _1157;
    float _2812 = 1.0 - _2765;
    float _2823 = (0.5 / (((_2780 * ((_2779 * _2812) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2780 * _2812) + _2765) * _2779))) * _2779;
    float _4988 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2825 = (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * (_2789 / ((_2793 * _2793) * 3.141590118408203125));
    uint _2839 = _2504 + 9u;
    float _2850 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2544].w)) * _1000) * 0.949999988079071044921875);
    float _2851 = _2850 * _2850;
    float _2852 = cbLight._m0[_2544].x + _1076;
    float _2853 = cbLight._m0[_2544].y + _1077;
    float _2854 = cbLight._m0[_2544].z + _1078;
    float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
    float _2859 = _2858 * _2852;
    float _2860 = _2858 * _2853;
    float _2861 = _2858 * _2854;
    float _2862 = dot(vec3(_997, _998, _999), vec3(cbLight._m0[_2544].xyz));
    float _4999 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
    float _2865 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
    float _2866 = dot(vec3(_997, _998, _999), vec3(_2859, _2860, _2861));
    float _5010 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
    float _2869 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
    float _2870 = dot(vec3(cbLight._m0[_2544].xyz), vec3(_2859, _2860, _2861));
    float _5021 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
    float _2874 = _2851 * _2851;
    float _2878 = ((_2869 * _2869) * (_2874 + (-1.0))) + 1.0;
    float _2885 = exp2(log2(1.0 - (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0)))) * 5.0);
    float _2892 = 1.0 - _2851;
    float _2902 = (0.5 / (((_2780 * ((_2865 * _2892) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2780 * _2892) + _2851) * _2865))) * _2865;
    float _5032 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
    float _2904 = (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_2874 / ((_2878 * _2878) * 3.141590118408203125));
    float _2914 = (((((_2885 * _2802) + _1158) * cbLight._m0[_2839].x) * _2904) * _2527) + ((((cbLight._m0[_2751].x * _2493) * ((_2801 * _2802) + _1158)) * _2825) * _2540);
    float _2915 = (((((_2885 * _2804) + _1160) * cbLight._m0[_2839].y) * _2904) * _2527) + ((((cbLight._m0[_2751].y * _2495) * ((_2801 * _2804) + _1160)) * _2825) * _2540);
    float _2916 = (((((_2885 * _2805) + _1161) * cbLight._m0[_2839].z) * _2904) * _2527) + ((((cbLight._m0[_2751].z * _2497) * ((_2801 * _2805) + _1161)) * _2825) * _2540);
    float _2972;
    float _2974;
    float _2976;
    if (_2580)
    {
        _2972 = _2914;
        _2974 = _2915;
        _2976 = _2916;
    }
    else
    {
        uint _2978 = _2504 + 2u;
        uint _2982 = _2504 + 10u;
        float _2996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2978].w)) * _1000) * 0.949999988079071044921875);
        float _2997 = _2996 * _2996;
        float _2998 = cbLight._m0[_2978].x + _1076;
        float _2999 = cbLight._m0[_2978].y + _1077;
        float _3000 = cbLight._m0[_2978].z + _1078;
        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
        float _3005 = _3004 * _2998;
        float _3006 = _3004 * _2999;
        float _3007 = _3004 * _3000;
        float _3008 = dot(vec3(_997, _998, _999), vec3(cbLight._m0[_2978].xyz));
        float _5043 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        float _3011 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
        float _3012 = dot(vec3(_997, _998, _999), vec3(_3005, _3006, _3007));
        float _5054 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        float _3015 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
        float _3016 = dot(vec3(cbLight._m0[_2978].xyz), vec3(_3005, _3006, _3007));
        float _5065 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3020 = _2997 * _2997;
        float _3024 = ((_3015 * _3015) * (_3020 + (-1.0))) + 1.0;
        float _3031 = exp2(log2(1.0 - (isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0)))) * 5.0);
        float _3038 = 1.0 - _2997;
        float _3048 = (0.5 / (((_2780 * ((_3011 * _3038) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_2780 * _3038) + _2997) * _3011))) * _3011;
        float _5076 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3050 = (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0))) * (_3020 / ((_3024 * _3024) * 3.141590118408203125));
        float _3051 = isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0));
        _2972 = (((((_3031 * _2802) + _1158) * cbLight._m0[_2982].x) * _3050) * _3051) + _2914;
        _2974 = (((((_3031 * _2804) + _1160) * cbLight._m0[_2982].y) * _3050) * _3051) + _2915;
        _2976 = (((((_3031 * _2805) + _1161) * cbLight._m0[_2982].z) * _3050) * _3051) + _2916;
    }
    float _3082;
    float _3084;
    float _3086;
    if (_2689)
    {
        _3082 = _2972;
        _3084 = _2974;
        _3086 = _2976;
    }
    else
    {
        uint _3093 = _2504 + 3u;
        uint _3097 = _2504 + 11u;
        float _3111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3093].w)) * _1000) * 0.949999988079071044921875);
        float _3112 = _3111 * _3111;
        float _3113 = cbLight._m0[_3093].x + _1076;
        float _3114 = cbLight._m0[_3093].y + _1077;
        float _3115 = cbLight._m0[_3093].z + _1078;
        float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
        float _3120 = _3119 * _3113;
        float _3121 = _3119 * _3114;
        float _3122 = _3119 * _3115;
        float _3123 = dot(vec3(_997, _998, _999), vec3(cbLight._m0[_3093].xyz));
        float _5092 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
        float _3126 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
        float _3127 = dot(vec3(_997, _998, _999), vec3(_3120, _3121, _3122));
        float _5103 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
        float _3130 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
        float _3131 = dot(vec3(cbLight._m0[_3093].xyz), vec3(_3120, _3121, _3122));
        float _5114 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
        float _3135 = _3112 * _3112;
        float _3139 = ((_3130 * _3130) * (_3135 + (-1.0))) + 1.0;
        float _3146 = exp2(log2(1.0 - (isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0)))) * 5.0);
        float _3153 = 1.0 - _3112;
        float _3163 = (0.5 / (((_2780 * ((_3126 * _3153) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_2780 * _3153) + _3112) * _3126))) * _3126;
        float _5125 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
        float _3165 = (isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0))) * (_3135 / ((_3139 * _3139) * 3.141590118408203125));
        float _3166 = isnan(1.0) ? _2520 : (isnan(_2520) ? 1.0 : min(_2520, 1.0));
        _3082 = (((((_3146 * _2802) + _1158) * cbLight._m0[_3097].x) * _3165) * _3166) + _2972;
        _3084 = (((((_3146 * _2804) + _1160) * cbLight._m0[_3097].y) * _3165) * _3166) + _2974;
        _3086 = (((((_3146 * _2805) + _1161) * cbLight._m0[_3097].z) * _3165) * _3166) + _2976;
    }
    float _3232;
    float _3234;
    float _3236;
    float _3238;
    float _3240;
    float _3242;
    if (_2502.y == 0u)
    {
        uvec4 _3187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3188 = _3187.x;
        uint _3199 = uint((float(_3187.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1097) / _3188))) + floor(float(uint(cbSceneParam._m0[85u].x * _1096) / _3188)));
        float _3209 = (log2(_2280 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3210 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
        uint _3213 = uint(isnan(14.0) ? _3210 : (isnan(_3210) ? 14.0 : min(_3210, 14.0)));
        uvec4 _3218 = texelFetch(g_lightClusterGridBuffer, int(((_3213 << 2u) + (_3199 << 6u)) >> 2u));
        uint _3219 = _3218.x;
        uint _3220 = _3187.z;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        if (((((1u << ((_3220 >> 4u) & 15u)) + 4294967295u) & _3219) == 0u) || ((_3220 & 240u) == 0u))
        {
            _3299 = 0.0;
            _3301 = 0.0;
            _3303 = 0.0;
            _3305 = 0.0;
            _3307 = 0.0;
            _3309 = 0.0;
        }
        else
        {
            float _3300;
            float _3302;
            float _3304;
            float _3306;
            float _3308;
            float _3310;
            float _3452 = 0.0;
            float _3453 = 0.0;
            float _3454 = 0.0;
            float _3455 = 0.0;
            float _3456 = 0.0;
            float _3457 = 0.0;
            uint _3458 = 0u;
            uint _3467;
            bool _3468;
            for (;;)
            {
                _3467 = texelFetch(g_lightClassification, int((((_3213 << 5u) + (_3199 << 9u)) + (_3458 << 2u)) >> 2u)).x;
                _3468 = _3467 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3468)
                {
                    frontier_phi_71_pred = _3457;
                    frontier_phi_71_pred_1 = _3456;
                    frontier_phi_71_pred_2 = _3455;
                    frontier_phi_71_pred_3 = _3454;
                    frontier_phi_71_pred_4 = _3453;
                    frontier_phi_71_pred_5 = _3452;
                }
                else
                {
                    float _3597;
                    float _3598;
                    float _3599;
                    float _3600;
                    float _3601;
                    float _3602;
                    uint _3603;
                    _3597 = _3452;
                    _3598 = _3453;
                    _3599 = _3454;
                    _3600 = _3455;
                    _3601 = _3456;
                    _3602 = _3457;
                    _3603 = _3467;
                    float _3524;
                    float _3525;
                    float _3526;
                    float _3527;
                    float _3528;
                    float _3529;
                    for (;;)
                    {
                        uint _3607 = uint(findLSB(_3603)) + (_3458 << 5u);
                        uint _3604 = (_3603 + 4294967295u) & _3603;
                        uint _3609 = _3607 * 48u;
                        vec4 _3623 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3609)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 3u)).x));
                        uint _3629 = (_3607 * 48u) + 4u;
                        vec4 _3642 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3629)).x, texelFetch(g_PointLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3629 + 3u)).x));
                        uint _3648 = (_3607 * 48u) + 8u;
                        vec3 _3659 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3648)).x, texelFetch(g_PointLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3648 + 2u)).x));
                        float _3663 = _3623.x - _2278;
                        float _3664 = _3623.y - _2279;
                        float _3665 = _3623.z - _2280;
                        float _3666 = dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665));
                        float _3669 = inversesqrt(_3666);
                        float _3670 = _3669 * _3663;
                        float _3671 = _3669 * _3664;
                        float _3672 = _3669 * _3665;
                        float _3673 = dot(vec3(_1115, _1118, _1121), vec3(_3670, _3671, _3672));
                        float _3678 = 1.0 - (_3666 * _3623.w);
                        float _5151 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                        float _3679 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
                        float _3680 = sqrt(_3666) * _3642.w;
                        float _3683 = 1.39999997615814208984375 / (_3680 + 1.39999997615814208984375);
                        float _3684 = _3683 * _3683;
                        float _3687 = ((1.0 - _3684) * _3673) + _3684;
                        float _3690 = _3680 * _3680;
                        float _3694 = ((isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0))) * _3679) / ((_3690 * 0.699999988079071044921875) + 1.0);
                        float _3698 = (-0.0) - _2278;
                        float _3699 = (-0.0) - _2279;
                        float _3700 = (-0.0) - _2280;
                        float _3704 = inversesqrt(dot(vec3(_3698, _3699, _3700), vec3(_3698, _3699, _3700)));
                        float _3705 = _3704 * _3698;
                        float _3706 = _3704 * _3699;
                        float _3707 = _3704 * _3700;
                        float _3714 = exp2(log2(1.0 / ((_3690 * 3.5) + 5.0)) * 0.25);
                        float _3715 = 1.0 - _1190;
                        float _3722 = sqrt(1.0 - ((1.0 - (_3715 * _3715)) * (1.0 - (_3714 * _3714))));
                        float _3723 = _3722 * _3722;
                        float _3724 = _3723 * _3723;
                        float _3725 = _3705 + _3670;
                        float _3726 = _3706 + _3671;
                        float _3727 = _3707 + _3672;
                        float _3731 = inversesqrt(dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727)));
                        float _3735 = dot(vec3(_1115, _1118, _1121), vec3(_3705, _3706, _3707));
                        float _5167 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                        float _3738 = isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0));
                        float _3739 = dot(vec3(_1115, _1118, _1121), vec3(_3731 * _3725, _3731 * _3726, _3731 * _3727));
                        float _5178 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                        float _3742 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
                        float _3746 = ((_3742 * _3742) * (_3724 + (-1.0))) + 1.0;
                        float _3747 = _3683 * _3723;
                        float _3748 = _3747 * _3747;
                        float _3751 = ((1.0 - _3748) * _3673) + _3748;
                        float _5189 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                        float _3752 = isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0));
                        float _3753 = 1.0 - _3723;
                        float _3763 = (0.5 / (((_3752 * ((_3738 * _3753) + _3723)) + 9.9999999392252902907785028219223e-09) + (((_3752 * _3753) + _3723) * _3738))) * _3752;
                        float _5200 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                        float _3774 = (((_3724 * 3.1415927410125732421875) * (isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0)))) / ((_3746 * _3746) * ((_3690 * 2.1991131305694580078125) + 3.141590118408203125))) * _3679;
                        _3527 = (_3694 * _3642.x) + _3600;
                        _3528 = (_3694 * _3642.y) + _3601;
                        _3529 = (_3694 * _3642.z) + _3602;
                        _3524 = (_3774 * _3659.x) + _3597;
                        _3525 = (_3774 * _3659.y) + _3598;
                        _3526 = (_3774 * _3659.z) + _3599;
                        if (_3604 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3597 = _3524;
                            _3598 = _3525;
                            _3599 = _3526;
                            _3600 = _3527;
                            _3601 = _3528;
                            _3602 = _3529;
                            _3603 = _3604;
                        }
                    }
                    frontier_phi_71_pred = _3529;
                    frontier_phi_71_pred_1 = _3528;
                    frontier_phi_71_pred_2 = _3527;
                    frontier_phi_71_pred_3 = _3526;
                    frontier_phi_71_pred_4 = _3525;
                    frontier_phi_71_pred_5 = _3524;
                }
                _3310 = frontier_phi_71_pred;
                _3308 = frontier_phi_71_pred_1;
                _3306 = frontier_phi_71_pred_2;
                _3304 = frontier_phi_71_pred_3;
                _3302 = frontier_phi_71_pred_4;
                _3300 = frontier_phi_71_pred_5;
                uint _3459 = _3458 + 1u;
                if (_3459 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3452 = _3300;
                    _3453 = _3302;
                    _3454 = _3304;
                    _3455 = _3306;
                    _3456 = _3308;
                    _3457 = _3310;
                    _3458 = _3459;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3299 = _3300;
            _3301 = _3302;
            _3303 = _3304;
            _3305 = _3306;
            _3307 = _3308;
            _3309 = _3310;
        }
        uvec4 _3313 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3314 = _3313.z;
        uint _3316 = (_3314 >> 8u) & 15u;
        float _3420;
        float _3422;
        float _3424;
        float _3426;
        float _3428;
        float _3430;
        if (((4294967295u << _3316) & _3219) == 0u)
        {
            _3420 = _3299;
            _3422 = _3301;
            _3424 = _3303;
            _3426 = _3305;
            _3428 = _3307;
            _3430 = _3309;
        }
        else
        {
            float _3445 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
            float _3446 = _3445 * _2278;
            float _3447 = _3445 * _2279;
            float _3448 = _3445 * _2280;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3316 < ((_3314 >> 12u) & 15u))
            {
                float _3421;
                float _3423;
                float _3425;
                float _3427;
                float _3429;
                float _3431;
                float _3580 = _3299;
                float _3581 = _3301;
                float _3582 = _3303;
                float _3583 = _3305;
                float _3584 = _3307;
                float _3585 = _3309;
                uint _3586 = _3316;
                uint _3595;
                bool _3596;
                for (;;)
                {
                    _3595 = texelFetch(g_lightClassification, int((((_3213 << 5u) + (_3199 << 9u)) + (_3586 << 2u)) >> 2u)).x;
                    _3596 = _3595 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3596)
                    {
                        frontier_phi_82_pred = _3585;
                        frontier_phi_82_pred_1 = _3584;
                        frontier_phi_82_pred_2 = _3583;
                        frontier_phi_82_pred_3 = _3582;
                        frontier_phi_82_pred_4 = _3581;
                        frontier_phi_82_pred_5 = _3580;
                    }
                    else
                    {
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _4081;
                        float _4082;
                        float _4083;
                        float _4084;
                        float _4085;
                        float _4086;
                        float _3801 = _3580;
                        float _3802 = _3581;
                        float _3803 = _3582;
                        float _3804 = _3583;
                        float _3805 = _3584;
                        float _3806 = _3585;
                        uint _3807 = _3595;
                        uint _3808;
                        vec4 _3833;
                        float _3834;
                        vec4 _3849;
                        vec3 _3861;
                        vec4 _3876;
                        vec4 _3891;
                        float _3937;
                        bool _3938;
                        for (;;)
                        {
                            uint _3818 = ((_3586 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3807));
                            _3808 = (_3807 + 4294967295u) & _3807;
                            uint _3820 = _3818 * 40u;
                            _3833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 3u)).x));
                            _3834 = _3833.w;
                            uint _3836 = (_3818 * 40u) + 4u;
                            _3849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 3u)).x));
                            uint _3851 = (_3818 * 40u) + 8u;
                            _3861 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 2u)).x));
                            uint _3863 = (_3818 * 40u) + 16u;
                            _3876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 3u)).x));
                            uint _3878 = (_3818 * 40u) + 20u;
                            _3891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 3u)).x));
                            uint _3893 = (_3818 * 40u) + 24u;
                            vec4 _3906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3893 + 3u)).x));
                            uint _3912 = (_3818 * 40u) + 28u;
                            vec4 _3925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3912 + 3u)).x));
                            _3937 = fma(_2280, _3925.z, fma(_2279, _3925.y, _3925.x * _2278)) + _3925.w;
                            _3938 = !((fma(_2280, _3906.z, fma(_2279, _3906.y, _3906.x * _2278)) + _3906.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3938)
                            {
                                float _3965 = _3833.x - _2278;
                                float _3966 = _3833.y - _2279;
                                float _3967 = _3833.z - _2280;
                                float _3968 = dot(vec3(_3965, _3966, _3967), vec3(_3965, _3966, _3967));
                                float _3971 = inversesqrt(_3968);
                                float _3972 = _3971 * _3965;
                                float _3973 = _3971 * _3966;
                                float _3974 = _3971 * _3967;
                                float _3978 = 1.0 - (_3968 / (_3834 * _3834));
                                float _5211 = isnan(0.0) ? _3978 : (isnan(_3978) ? 0.0 : max(_3978, 0.0));
                                float _3979 = isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0));
                                float _3983 = sqrt(_3968) * _3849.w;
                                float _3985 = 1.39999997615814208984375 / (_3983 + 1.39999997615814208984375);
                                float _3986 = _3985 * _3985;
                                float _3989 = ((1.0 - _3986) * dot(vec3(_3972, _3973, _3974), vec3(_1115, _1118, _1121))) + _3986;
                                float _3992 = _3983 * _3983;
                                float _3996 = (fma(_2280, _3876.z, fma(_2279, _3876.y, _3876.x * _2278)) + _3876.w) / _3937;
                                float _3997 = (fma(_2280, _3891.z, fma(_2279, _3891.y, _3891.x * _2278)) + _3891.w) / _3937;
                                float _4001 = 1.0 - dot(vec2(_3996, _3997), vec2(_3996, _3997));
                                float _5227 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4002 = isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0));
                                float _4003 = _4002 * (((isnan(0.0) ? _3989 : (isnan(_3989) ? 0.0 : max(_3989, 0.0))) * _3979) / ((_3992 * 0.699999988079071044921875) + 1.0));
                                float _4015 = exp2(log2(1.0 / ((_3992 * 3.5) + 5.0)) * 0.25);
                                float _4016 = 1.0 - _1190;
                                float _4023 = sqrt(1.0 - ((1.0 - (_4016 * _4016)) * (1.0 - (_4015 * _4015))));
                                float _4024 = _4023 * _4023;
                                float _4025 = _4024 * _4024;
                                float _4026 = _3972 - _3446;
                                float _4027 = _3973 - _3447;
                                float _4028 = _3974 - _3448;
                                float _4032 = inversesqrt(dot(vec3(_4026, _4027, _4028), vec3(_4026, _4027, _4028)));
                                float _4036 = dot(vec3(_1115, _1118, _1121), vec3((-0.0) - _3446, (-0.0) - _3447, (-0.0) - _3448));
                                float _5238 = isnan(0.0) ? _4036 : (isnan(_4036) ? 0.0 : max(_4036, 0.0));
                                float _4039 = isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0));
                                float _4040 = dot(vec3(_1115, _1118, _1121), vec3(_4032 * _4026, _4032 * _4027, _4032 * _4028));
                                float _5249 = isnan(0.0) ? _4040 : (isnan(_4040) ? 0.0 : max(_4040, 0.0));
                                float _4043 = isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0));
                                float _4047 = ((_4043 * _4043) * (_4025 + (-1.0))) + 1.0;
                                float _4048 = _3985 * _4024;
                                float _4049 = _4048 * _4048;
                                float _4055 = ((1.0 - _4049) * dot(vec3(_1115, _1118, _1121), vec3(_3972, _3973, _3974))) + _4049;
                                float _5260 = isnan(0.0) ? _4055 : (isnan(_4055) ? 0.0 : max(_4055, 0.0));
                                float _4056 = isnan(1.0) ? _5260 : (isnan(_5260) ? 1.0 : min(_5260, 1.0));
                                float _4057 = 1.0 - _4024;
                                float _4067 = (0.5 / (((_4056 * ((_4039 * _4057) + _4024)) + 9.9999999392252902907785028219223e-09) + (((_4056 * _4057) + _4024) * _4039))) * _4056;
                                float _5271 = isnan(0.0) ? _4067 : (isnan(_4067) ? 0.0 : max(_4067, 0.0));
                                float _4077 = (_4002 * _3979) * (((_4025 * 3.1415927410125732421875) * (isnan(1.0) ? _5271 : (isnan(_5271) ? 1.0 : min(_5271, 1.0)))) / ((_4047 * _4047) * ((_3992 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4003 * _3849.z;
                                frontier_phi_88_pred_1 = _4003 * _3849.y;
                                frontier_phi_88_pred_2 = _4003 * _3849.x;
                                frontier_phi_88_pred_3 = _4077 * _3861.z;
                                frontier_phi_88_pred_4 = _4077 * _3861.y;
                                frontier_phi_88_pred_5 = _4077 * _3861.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4086 = frontier_phi_88_pred;
                            _4085 = frontier_phi_88_pred_1;
                            _4084 = frontier_phi_88_pred_2;
                            _4083 = frontier_phi_88_pred_3;
                            _4082 = frontier_phi_88_pred_4;
                            _4081 = frontier_phi_88_pred_5;
                            _3791 = _4084 + _3804;
                            _3792 = _4085 + _3805;
                            _3793 = _4086 + _3806;
                            _3788 = _4081 + _3801;
                            _3789 = _4082 + _3802;
                            _3790 = _4083 + _3803;
                            if (_3808 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3801 = _3788;
                                _3802 = _3789;
                                _3803 = _3790;
                                _3804 = _3791;
                                _3805 = _3792;
                                _3806 = _3793;
                                _3807 = _3808;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3793;
                        frontier_phi_82_pred_1 = _3792;
                        frontier_phi_82_pred_2 = _3791;
                        frontier_phi_82_pred_3 = _3790;
                        frontier_phi_82_pred_4 = _3789;
                        frontier_phi_82_pred_5 = _3788;
                    }
                    _3431 = frontier_phi_82_pred;
                    _3429 = frontier_phi_82_pred_1;
                    _3427 = frontier_phi_82_pred_2;
                    _3425 = frontier_phi_82_pred_3;
                    _3423 = frontier_phi_82_pred_4;
                    _3421 = frontier_phi_82_pred_5;
                    uint _3587 = _3586 + 1u;
                    if (_3587 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3580 = _3421;
                        _3581 = _3423;
                        _3582 = _3425;
                        _3583 = _3427;
                        _3584 = _3429;
                        _3585 = _3431;
                        _3586 = _3587;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3427;
                frontier_phi_63_64_ladder_1 = _3431;
                frontier_phi_63_64_ladder_2 = _3429;
                frontier_phi_63_64_ladder_3 = _3425;
                frontier_phi_63_64_ladder_4 = _3423;
                frontier_phi_63_64_ladder_5 = _3421;
            }
            else
            {
                frontier_phi_63_64_ladder = _3305;
                frontier_phi_63_64_ladder_1 = _3309;
                frontier_phi_63_64_ladder_2 = _3307;
                frontier_phi_63_64_ladder_3 = _3303;
                frontier_phi_63_64_ladder_4 = _3301;
                frontier_phi_63_64_ladder_5 = _3299;
            }
            _3420 = frontier_phi_63_64_ladder_5;
            _3422 = frontier_phi_63_64_ladder_4;
            _3424 = frontier_phi_63_64_ladder_3;
            _3426 = frontier_phi_63_64_ladder;
            _3428 = frontier_phi_63_64_ladder_2;
            _3430 = frontier_phi_63_64_ladder_1;
        }
        float _3435 = isnan(1.0) ? _1174 : (isnan(_1174) ? 1.0 : min(_1174, 1.0));
        _3232 = (_3435 * _3426) + _2744;
        _3234 = (_3435 * _3428) + _2746;
        _3236 = (_3435 * _3430) + _2748;
        _3238 = ((_3420 * _1158) * _3435) + _3082;
        _3240 = ((_3422 * _1160) * _3435) + _3084;
        _3242 = ((_3424 * _1161) * _3435) + _3086;
    }
    else
    {
        _3232 = _2744;
        _3234 = _2746;
        _3236 = _2748;
        _3238 = _3082;
        _3240 = _3084;
        _3242 = _3086;
    }
    float _5287 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _5298 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _5309 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _3259 = ((isnan(1.0) ? _5287 : (isnan(_5287) ? 1.0 : min(_5287, 1.0))) * (_3232 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1174))) + ((_3238 + ((isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0))) * _2011)) * cbPerFrame._m0[3u].x);
    float _3260 = ((isnan(1.0) ? _5298 : (isnan(_5298) ? 1.0 : min(_5298, 1.0))) * (_3234 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1174))) + ((_3240 + ((isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0))) * _2011)) * cbPerFrame._m0[3u].x);
    float _3261 = ((isnan(1.0) ? _5309 : (isnan(_5309) ? 1.0 : min(_5309, 1.0))) * (_3236 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1174))) + ((_3242 + ((isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0))) * _2011)) * cbPerFrame._m0[3u].x);
    uint _3262 = _292 + 6u;
    float _3270 = _1096 / cbSceneParam._m0[86u].x;
    float _3271 = _1097 / cbSceneParam._m0[86u].y;
    vec4 _3285 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3270, _3271, (log2((isnan(cbSceneParam._m0[77u].w) ? _1019 : (isnan(_1019) ? cbSceneParam._m0[77u].w : min(_1019, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3287 = _3285.x;
    float _3288 = _3285.y;
    float _3289 = _3285.z;
    float _3290 = _3285.w;
    float _3362;
    float _3364;
    float _3366;
    float _3368;
    if (_1019 > cbSceneParam._m0[78u].w)
    {
        float _3324 = isnan(_1019) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1019 : min(cbSceneParam._m0[80u].w, _1019));
        float _3325 = _3324 / _1019;
        float _3336 = _3325 * _1069;
        float _3337 = _1070 * _3325;
        float _3338 = (-0.0) - _3337;
        float _3340 = _3325 * _1071;
        float _3342 = (cbSceneParam._m0[77u].w * _3338) / _3324;
        float _3343 = _3342 + cbSceneParam._m0[79u].w;
        float _3344 = cbSceneParam._m0[79u].w - _3337;
        float _3350 = sqrt(((_3336 * _3336) + (_3337 * _3337)) + (_3340 * _3340));
        float _3353 = (1.0 - (cbSceneParam._m0[77u].w / _3324)) * _3350;
        float _3358 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3360 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3537;
        if (abs((_3338 - _3342) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3537 = ((((_3343 > 0.0) ? exp2(_3358 * _3343) : (2.0 - exp2(_3360 * _3343))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3353;
        }
        else
        {
            float _3481 = 1.0 / cbSceneParam._m0[80u].x;
            float _3482 = isnan(_3344) ? _3343 : (isnan(_3343) ? _3344 : max(_3343, _3344));
            float _3483 = isnan(_3344) ? _3343 : (isnan(_3343) ? _3344 : min(_3343, _3344));
            float _3492 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : min(_3482, 0.0));
            float _3493 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : min(_3483, 0.0));
            _3537 = ((abs(_3350 / _3338) * cbSceneParam._m0[80u].y) * ((((_3492 - _3493) * 2.0) - ((exp2(_3358 * (isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0)))) - exp2(_3358 * (isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0))))) * _3481)) - ((exp2(_3360 * _3492) - exp2(_3360 * _3493)) * _3481))) + (_3353 * cbSceneParam._m0[80u].z);
        }
        vec4 _3539 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3270, _3271, 1.0), 0.0);
        float _3548 = exp2((_3537 * (-1.44269502162933349609375)) * (1.0 - _3539.w));
        float _3549 = log2(_3548);
        float _3565 = log2(_3290);
        _3362 = (exp2(_3565 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3549 * cbSceneParam._m0[78u].x)) * _3539.x) / cbSceneParam._m0[78u].x)) + _3287;
        _3364 = (exp2(_3565 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3549 * cbSceneParam._m0[78u].y)) * _3539.y) / cbSceneParam._m0[78u].y)) + _3288;
        _3366 = (exp2(_3565 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3549 * cbSceneParam._m0[78u].z)) * _3539.z) / cbSceneParam._m0[78u].z)) + _3289;
        _3368 = _3548 * _3290;
    }
    else
    {
        _3362 = _3287;
        _3364 = _3288;
        _3366 = _3289;
        _3368 = _3290;
    }
    bool _3575;
    vec4 _3378;
    vec4 _3400;
    float _3402;
    float _3406;
    float _3407;
    float _3408;
    float _3409;
    bool _3419;
    for (;;)
    {
        _3378 = cbMatDynParam._m0[0u];
        float _3380 = roundEven(_3378.y);
        bool _3381 = _3380 == 3.0;
        float _3382 = log2(_3368);
        float _3389 = exp2(_3382 * cbSceneParam._m0[78u].x) * _3259;
        float _3390 = exp2(_3382 * cbSceneParam._m0[78u].y) * _3260;
        float _3391 = exp2(_3382 * cbSceneParam._m0[78u].z) * _3261;
        float _3398 = _1085 + (-0.5);
        _3400 = cbMtdParam._m0[1u];
        _3402 = _3400.y * _3398;
        float _3405 = (_3380 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3406 = _3405 * (_3381 ? _3389 : (_3389 + (cbSceneParam._m0[72u].w * _3362)));
        _3407 = _3405 * (_3381 ? _3390 : (_3390 + (cbSceneParam._m0[72u].w * _3364)));
        _3408 = _3405 * (_3381 ? _3391 : (_3391 + (cbSceneParam._m0[72u].w * _3366)));
        _3409 = _3398 * 0.999000012874603271484375;
        _3419 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3419)
        {
            if ((cbInstanceData._m0[_292 + 7u].x + _3409) < 0.5)
            {
                _3575 = true;
                break;
            }
        }
        uint _3516 = _1134 + uint(_3378.w);
        if ((cbInstanceData._m0[_3516].w < 1.0) && ((cbInstanceData._m0[_3516].w + _3409) < 0.5))
        {
            _3575 = true;
            break;
        }
        if ((_3402 + 1.0) < _3400.x)
        {
            _3575 = true;
            break;
        }
        _3575 = false;
        break;
    }
    float _3779;
    if (_3575)
    {
        discard_state = true;
        _3779 = 0.0;
    }
    else
    {
        _3779 = cbInstanceData._m0[_3262].w;
    }
    SV_Target.x = _3406;
    SV_Target.y = _3407;
    SV_Target.z = _3408;
    SV_Target.w = _3779;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3262].w;
    discard_exit();
}


