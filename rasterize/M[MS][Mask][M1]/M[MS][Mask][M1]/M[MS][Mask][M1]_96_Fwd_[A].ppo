#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1524;
float _3901;
float _3902;
float _3903;
float _3904;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _349.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3913 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _424 = (_417 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _425 = (_417 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _426 = (_417 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _349.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3924 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _566 = ((_538.x - _557) * _417) + _557;
    float _567 = ((_538.y - _558) * _417) + _558;
    float _568 = ((_538.z - _559) * _417) + _559;
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _593 = ((_580.z - _568) * _490) + _568;
    float _596 = ((((_580.x - _566) * _490) + _566) * 2.0) + (-1.0);
    float _598 = ((((_580.y - _567) * _490) + _567) * 2.0) + (-1.0);
    float _599 = dot(vec2(_596, _598), vec2(_596, _598));
    float _3935 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _630 = (((_618.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _596;
    float _631 = (((_618.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _634 = fma(_604, _251, fma(_631, _258, _630 * _244));
    float _637 = fma(_604, _252, fma(_631, _259, _630 * _245));
    float _640 = fma(_604, _253, fma(_631, _260, _630 * _246));
    float _644 = inversesqrt(dot(vec3(_634, _637, _640), vec3(_634, _637, _640)));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _673 = _671.x;
    float _674 = 1.0 - _673;
    float _683 = (cbMtdParam._m0[19u].x + dot(vec4(_644 * _634, _644 * _637, _644 * _640, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_673 - _674) * cbMtdParam._m0[24u].z) + _674) * cbMtdParam._m0[21u].z);
    float _3946 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _684 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _686 = (-0.0) - cbMtdParam._m0[24u].x;
    float _688 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
    float _696 = _684 - ((_684 * TEXCOORD_8.x) * _689);
    float _697 = _684 - ((_684 * TEXCOORD_8.y) * _689);
    float _698 = _684 - ((_684 * TEXCOORD_8.z) * _689);
    float _705 = (_696 * ((_518.x * cbMtdParam._m0[18u].x) - _497)) + _497;
    float _706 = (_697 * ((_518.y * cbMtdParam._m0[18u].y) - _498)) + _498;
    float _707 = (_698 * ((_518.z * cbMtdParam._m0[18u].z) - _499)) + _499;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _721 = _719.x;
    float _722 = 1.0 - _721;
    float _748 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_721 - _722) * cbMtdParam._m0[24u].w) + _722) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3967 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _749 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _757 = ((((cbMtdParam._m0[10u].x - _705) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _749) + _705;
    float _758 = ((((cbMtdParam._m0[10u].y - _706) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _749) + _706;
    float _759 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _707)) * _749) + _707;
    vec4 _785 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _787 = _785.x;
    float _805 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _787) * _417) + _787;
    float _822 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _805) * _490) + _805;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _822) * cbMtdParam._m0[19u].z) + _822;
    float _828 = _826 - (_826 * _696);
    float _830 = _828 - (_828 * _749);
    float _834 = (cbMtdParam._m0[19u].w * (_618.z - _593)) + _593;
    vec4 _848 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _855 = (_848.x * 2.0) + (-1.0);
    float _856 = (_848.y * 2.0) + (-1.0);
    float _857 = dot(vec2(_855, _856), vec2(_855, _856));
    float _3978 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _865 = ((_848.z - _834) * _696) + _834;
    float _868 = ((cbMtdParam._m0[23u].x - _865) * _749) + _865;
    vec4 _887 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _893 = (_887.x * 2.0) + (-1.0);
    float _894 = (_887.y * 2.0) + (-1.0);
    float _895 = dot(vec2(_893, _894), vec2(_893, _894));
    float _3989 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _910 = ((sqrt(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) - _604) * _698) + _604;
    float _913 = (((_855 - _630) * _696) + _630) + (cbMtdParam._m0[21u].x * _630);
    float _914 = (((_856 - _631) * _697) + _631) + (cbMtdParam._m0[21u].x * _631);
    float _925 = (((_893 - _913) + (_913 * cbMtdParam._m0[22u].z)) * _749) + _913;
    float _926 = (((_894 - _914) + (_914 * cbMtdParam._m0[22u].z)) * _749) + _914;
    float _927 = (_749 * (sqrt(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) - _910)) + _910;
    float _931 = cbMtdParam._m0[22u].x + _618.w;
    float _934 = fma(_927, _251, fma(_926, _258, _925 * _244));
    float _937 = fma(_927, _252, fma(_926, _259, _925 * _245));
    float _940 = fma(_927, _253, fma(_926, _260, _925 * _246));
    float _944 = inversesqrt(dot(vec3(_934, _937, _940), vec3(_934, _937, _940)));
    float _945 = _944 * _934;
    float _946 = _944 * _937;
    float _947 = _944 * _940;
    float _4000 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _948 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4022 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4033 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4044 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4055 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _953 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _967 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1017 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1007);
    float _1018 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1007);
    float _1019 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1007);
    float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
    float _1024 = _1017 * _1023;
    float _1025 = _1018 * _1023;
    float _1026 = _1019 * _1023;
    vec4 _1031 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1033 = _1031.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1205 = sqrt(((_1017 * _1017) + (_1018 * _1018)) + (_1019 * _1019));
        float _1211 = (cbMatDynParam._m0[5u].x * _1205) + cbMatDynParam._m0[5u].y;
        float _4066 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1216 = (cbMatDynParam._m0[5u].z * _1205) + cbMatDynParam._m0[5u].w;
        float _4077 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) - _1212)) + _1212) < ((_1033 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1044 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1045 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1063 = fma(_947, cbSceneParam._m0[5u].z, fma(_946, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _945));
    float _1066 = fma(_947, cbSceneParam._m0[6u].z, fma(_946, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _945));
    float _1069 = fma(_947, cbSceneParam._m0[7u].z, fma(_946, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _945));
    uint _1082 = _263 + 9u;
    uint _1083 = _1082 + uint(cbMatDynParam._m0[0u].w);
    float _1089 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_1083].x;
    float _1090 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_1083].y;
    float _1091 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_1083].z;
    float _4088 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _1095 = 1.0 - _953;
    float _1096 = _1092 * _1095;
    float _1097 = _1093 * _1095;
    float _1098 = _1094 * _1095;
    float _1103 = (_1092 + (-0.039999999105930328369140625)) * _953;
    float _1104 = (_1093 + (-0.039999999105930328369140625)) * _953;
    float _1105 = (_1094 + (-0.039999999105930328369140625)) * _953;
    float _1106 = _1103 + 0.039999999105930328369140625;
    float _1108 = _1104 + 0.039999999105930328369140625;
    float _1109 = _1105 + 0.039999999105930328369140625;
    vec4 _1118 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1044, cbSceneParam._m0[86u].y * _1045));
    float _1122 = ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * TEXCOORD_5.w) * _1118.x;
    float _1123 = dot(vec3(_945, _946, _947), vec3(_1024, _1025, _1026));
    float _1126 = _1123 * 2.0;
    float _1130 = (_1126 * _945) - _1024;
    float _1131 = (_1126 * _946) - _1025;
    float _1132 = (_1126 * _947) - _1026;
    float _1136 = abs(dot(vec3(_1024, _1025, _1026), vec3(_945, _946, _947)));
    float _4121 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1138 = sqrt(_948);
    float _1151 = exp2((_1138 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1138 * 3.0));
    float _1157 = (1.0 - _1151) * ((_1138 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1158 = _1151 * _1138;
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1523;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1248 = fma(_1194, cbModelParam._m0[26u].z, fma(_1190, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186));
        float _1252 = fma(_1194, cbModelParam._m0[27u].z, fma(_1190, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186));
        float _1256 = fma(_1194, cbModelParam._m0[28u].z, fma(_1190, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186));
        float _1281 = _1186 + _945;
        float _1282 = _1190 + _946;
        float _1283 = _1194 + _947;
        float _1293 = fma(_1283, cbModelParam._m0[26u].z, fma(_1282, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1281)) - _1248;
        float _1294 = fma(_1283, cbModelParam._m0[27u].z, fma(_1282, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1281)) - _1252;
        float _1295 = fma(_1283, cbModelParam._m0[28u].z, fma(_1282, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1281)) - _1256;
        float _1299 = inversesqrt(dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295)));
        float _1312 = ((_1299 * _1293) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1248 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1299 * _1294) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1252 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1299 * _1295) / cbModelParam._m0[34u].z) + ((((((_1256 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        float _1351 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1317.x + (-0.5));
        float _1353 = _1351 * (_1317.y + (-0.5));
        float _1354 = _1351 * (_1317.z + (-0.5));
        float _1361 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1324.x + (-0.5));
        float _1363 = _1361 * (_1324.y + (-0.5));
        float _1364 = _1361 * (_1324.z + (-0.5));
        float _1371 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1331.x + (-0.5));
        float _1373 = _1371 * (_1331.y + (-0.5));
        float _1374 = _1371 * (_1331.z + (-0.5));
        float _1381 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1338.x + (-0.5));
        float _1383 = _1381 * (_1338.y + (-0.5));
        float _1384 = _1381 * (_1338.z + (-0.5));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = _1352 * 0.5;
        float _1389 = _1362 * 0.5;
        float _1390 = _1372 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1405 = (dot(vec3(_945, _946, _947), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1415 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4169 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1417 + 1.0))) + _1422) * _1385;
        float _1432 = _1353 * 0.5;
        float _1433 = _1363 * 0.5;
        float _1434 = _1373 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_945, _946, _947), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4202 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1459 + 1.0))) + _1464) * _1386;
        float _1474 = _1354 * 0.5;
        float _1475 = _1364 * 0.5;
        float _1476 = _1374 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_945, _946, _947), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4235 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1501 + 1.0))) + _1506) * _1387;
        _1523 = _1354;
        _1525 = _1353;
        _1526 = _1352;
        _1527 = _1364;
        _1528 = _1363;
        _1529 = _1362;
        _1530 = _1374;
        _1531 = _1373;
        _1532 = _1372;
        _1533 = _1387;
        _1534 = _1386;
        _1535 = _1385;
        _1536 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1537 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1538 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
    }
    else
    {
        _1523 = _1524;
        _1525 = _1524;
        _1526 = _1524;
        _1527 = _1524;
        _1528 = _1524;
        _1529 = _1524;
        _1530 = _1524;
        _1531 = _1524;
        _1532 = _1524;
        _1533 = _1524;
        _1534 = _1524;
        _1535 = _1524;
        _1536 = 0.0;
        _1537 = 0.0;
        _1538 = 0.0;
    }
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1565 = fma(_1194, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186));
        float _1569 = fma(_1194, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186));
        float _1573 = fma(_1194, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186));
        float _1596 = _1186 + _945;
        float _1597 = _1190 + _946;
        float _1598 = _1194 + _947;
        float _1608 = fma(_1598, cbModelParam._m0[30u].z, fma(_1597, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1596)) - _1565;
        float _1609 = fma(_1598, cbModelParam._m0[31u].z, fma(_1597, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1596)) - _1569;
        float _1610 = fma(_1598, cbModelParam._m0[32u].z, fma(_1597, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1596)) - _1573;
        float _1614 = inversesqrt(dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610)));
        float _1627 = ((_1614 * _1608) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1565 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1628 = ((_1614 * _1609) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1569 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1629 = ((_1614 * _1610) / cbModelParam._m0[35u].z) + ((((((_1573 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1627, _1628, _1629), 0.0);
        float _1664 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1631.x + (-0.5));
        float _1666 = _1664 * (_1631.y + (-0.5));
        float _1667 = _1664 * (_1631.z + (-0.5));
        float _1674 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1638.x + (-0.5));
        float _1676 = _1674 * (_1638.y + (-0.5));
        float _1677 = _1674 * (_1638.z + (-0.5));
        float _1684 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1645.x + (-0.5));
        float _1686 = _1684 * (_1645.y + (-0.5));
        float _1687 = _1684 * (_1645.z + (-0.5));
        float _1694 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = _1694 * (_1652.x + (-0.5));
        float _1696 = _1694 * (_1652.y + (-0.5));
        float _1697 = _1694 * (_1652.z + (-0.5));
        float _1698 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1699 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = _1665 * 0.5;
        float _1702 = _1675 * 0.5;
        float _1703 = _1685 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_945, _946, _947), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1698 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4298 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1728 + 1.0))) + _1733) * _1698;
        float _1743 = _1666 * 0.5;
        float _1744 = _1676 * 0.5;
        float _1745 = _1686 * 0.5;
        float _1746 = dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745));
        float _1751 = (_1746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1746);
        float _1759 = (dot(vec3(_945, _946, _947), vec3(_1751 * _1743, _1751 * _1744, _1751 * _1745)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1768 = sqrt(((_1744 * _1744) + (_1743 * _1743)) + (_1745 * _1745)) / (_1699 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1770 = _1769 * 2.0;
        float _1774 = (1.0 - _1769) / (_1769 + 1.0);
        float _4331 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1784 = ((((1.0 - _1775) * (_1770 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1770 + 1.0))) + _1775) * _1699;
        float _1785 = _1667 * 0.5;
        float _1786 = _1677 * 0.5;
        float _1787 = _1687 * 0.5;
        float _1788 = dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787));
        float _1793 = (_1788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1788);
        float _1801 = (dot(vec3(_945, _946, _947), vec3(_1793 * _1785, _1793 * _1786, _1793 * _1787)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1810 = sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1812 = _1811 * 2.0;
        float _1816 = (1.0 - _1811) / (_1811 + 1.0);
        float _4364 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1826 = ((((1.0 - _1817) * (_1812 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1812 + 1.0))) + _1817) * _1700;
        _1834 = _1667;
        _1835 = _1666;
        _1836 = _1665;
        _1837 = _1677;
        _1838 = _1676;
        _1839 = _1675;
        _1840 = _1687;
        _1841 = _1686;
        _1842 = _1685;
        _1843 = _1700;
        _1844 = _1699;
        _1845 = _1698;
        _1846 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
        _1847 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)));
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)));
    }
    else
    {
        _1834 = _1524;
        _1835 = _1524;
        _1836 = _1524;
        _1837 = _1524;
        _1838 = _1524;
        _1839 = _1524;
        _1840 = _1524;
        _1841 = _1524;
        _1842 = _1524;
        _1843 = _1524;
        _1844 = _1524;
        _1845 = _1524;
        _1846 = 0.0;
        _1847 = 0.0;
        _1848 = 0.0;
    }
    float _1858 = (cbModelParam._m0[1u].x * (_1846 - _1536)) + _1536;
    float _1859 = (cbModelParam._m0[1u].x * (_1847 - _1537)) + _1537;
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1538)) + _1538;
    float _1881 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1858 * cbSceneParam._m0[89u].x));
    float _1884 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1858 * cbSceneParam._m0[90u].x));
    float _1887 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1858));
    float _1902 = _1130 * 0.5;
    float _1903 = _1131 * 0.5;
    float _1904 = _1132 * 0.5;
    float _1905 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1908 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1835, _1838, _1841, _1844));
    float _1911 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1834, _1837, _1840, _1843));
    float _1945;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1918 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1523, _1527, _1530, _1533));
        float _1922 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1525, _1528, _1531, _1534));
        float _1926 = dot(vec4(_1902, _1903, _1904, 1.0), vec4(_1526, _1529, _1532, _1535));
        float _1933 = dot(vec4(cbModelParam._m0[39u]), vec4(_1902, _1903, _1904, 1.0));
        _1945 = dot(vec3(isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1933) ? 0.0 : (isnan(0.0) ? _1933 : max(0.0, _1933))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1945 = 1.0;
    }
    float _1956;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1947 = dot(vec4(cbModelParam._m0[40u]), vec4(_1902, _1903, _1904, 1.0));
        _1956 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1947) ? 0.0 : (isnan(0.0) ? _1947 : max(0.0, _1947))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1956 = 1.0;
    }
    float _1960 = (_1956 * cbModelParam._m0[1u].x) + (_1945 * (1.0 - cbModelParam._m0[1u].x));
    float _1970 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _948);
    float _1971 = isnan(_1970) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1970 : min(cbModelParam._m0[25u].z, _1970));
    float _2051;
    float _2053;
    float _2055;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2018 = fma(_1194, cbModelParam._m0[13u].z, fma(_1190, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1186)) + cbModelParam._m0[13u].w;
        float _2022 = fma(_1194, cbModelParam._m0[14u].z, fma(_1190, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1186)) + cbModelParam._m0[14u].w;
        float _2026 = fma(_1194, cbModelParam._m0[15u].z, fma(_1190, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1186)) + cbModelParam._m0[15u].w;
        float _2029 = fma(_1132, cbModelParam._m0[13u].z, fma(_1131, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1130));
        float _2032 = fma(_1132, cbModelParam._m0[14u].z, fma(_1131, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1130));
        float _2035 = fma(_1132, cbModelParam._m0[15u].z, fma(_1131, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1130));
        float _2063;
        if (_2029 > 0.0)
        {
            _2063 = abs((1.0 - _2018) / _2029);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2018 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2063 = frontier_phi_17_15_ladder;
        }
        float _2265;
        if (_2032 > 0.0)
        {
            _2265 = abs((1.0 - _2022) / _2032);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2022 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2265 = frontier_phi_26_22_ladder;
        }
        float _2519;
        if (_2035 > 0.0)
        {
            _2519 = abs((1.0 - _2026) / _2035);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2026 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2519 = frontier_phi_38_33_ladder;
        }
        float _2521 = isnan(_2265) ? _2063 : (isnan(_2063) ? _2265 : min(_2063, _2265));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _2029) + _2018;
        float _2527 = (_2522 * _2032) + _2022;
        float _2528 = (_2522 * _2035) + _2026;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2529;
        float _2533 = _2529 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 > _2533) || ((_2527 < _2531) || ((_2526 < _2531) || (_2526 > _2533))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2528, cbModelParam._m0[9u].z, fma(_2527, cbModelParam._m0[9u].y, _2526 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2528, cbModelParam._m0[10u].z, fma(_2527, cbModelParam._m0[10u].y, _2526 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2528, cbModelParam._m0[11u].z, fma(_2527, cbModelParam._m0[11u].y, _2526 * cbModelParam._m0[11u].x))), _1971);
            frontier_phi_16_38_ladder = _2656.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2656.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2656.x * cbModelParam._m0[1u].y;
        }
        _2051 = frontier_phi_16_38_ladder_2;
        _2053 = frontier_phi_16_38_ladder_1;
        _2055 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1130, _1131, _1132), _1971);
        _2051 = _2039.x * cbModelParam._m0[1u].y;
        _2053 = _2039.y * cbModelParam._m0[1u].y;
        _2055 = _2039.z * cbModelParam._m0[1u].y;
    }
    float _2059 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _948);
    float _2060 = isnan(_2059) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2059 : min(cbModelParam._m0[25u].w, _2059));
    float _2149;
    float _2151;
    float _2153;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2113 = fma(_1194, cbModelParam._m0[21u].z, fma(_1190, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1186)) + cbModelParam._m0[21u].w;
        float _2117 = fma(_1194, cbModelParam._m0[22u].z, fma(_1190, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1186)) + cbModelParam._m0[22u].w;
        float _2121 = fma(_1194, cbModelParam._m0[23u].z, fma(_1190, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1186)) + cbModelParam._m0[23u].w;
        float _2124 = fma(_1132, cbModelParam._m0[21u].z, fma(_1131, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1130));
        float _2127 = fma(_1132, cbModelParam._m0[22u].z, fma(_1131, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1130));
        float _2130 = fma(_1132, cbModelParam._m0[23u].z, fma(_1131, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1130));
        float _2270;
        if (_2124 > 0.0)
        {
            _2270 = abs((1.0 - _2113) / _2124);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2113 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2270 = frontier_phi_28_24_ladder;
        }
        float _2546;
        if (_2127 > 0.0)
        {
            _2546 = abs((1.0 - _2117) / _2127);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2117 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2546 = frontier_phi_40_35_ladder;
        }
        float _2759;
        if (_2130 > 0.0)
        {
            _2759 = abs((1.0 - _2121) / _2130);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2121 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2759 = frontier_phi_49_46_ladder;
        }
        float _2761 = isnan(_2546) ? _2270 : (isnan(_2270) ? _2546 : min(_2270, _2546));
        float _2762 = isnan(_2759) ? _2761 : (isnan(_2761) ? _2759 : min(_2761, _2759));
        float _2766 = (_2762 * _2124) + _2113;
        float _2767 = (_2762 * _2127) + _2117;
        float _2768 = (_2762 * _2130) + _2121;
        float _2769 = _2762 * 9.9999997473787516355514526367188e-05;
        float _2770 = (-1.0) - _2769;
        float _2772 = _2769 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2768 > _2772) || ((_2768 < _2770) || ((_2767 > _2772) || ((_2767 < _2770) || ((_2766 < _2770) || (_2766 > _2772))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2768, cbModelParam._m0[17u].z, fma(_2767, cbModelParam._m0[17u].y, _2766 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2768, cbModelParam._m0[18u].z, fma(_2767, cbModelParam._m0[18u].y, _2766 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2768, cbModelParam._m0[19u].z, fma(_2767, cbModelParam._m0[19u].y, _2766 * cbModelParam._m0[19u].x))), _2060);
            frontier_phi_25_49_ladder = _2967.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2967.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2967.x * cbModelParam._m0[1u].z;
        }
        _2149 = frontier_phi_25_49_ladder_2;
        _2151 = frontier_phi_25_49_ladder_1;
        _2153 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2133 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1130, _1131, _1132), _2060);
        _2149 = _2133.x * cbModelParam._m0[1u].z;
        _2151 = _2133.y * cbModelParam._m0[1u].z;
        _2153 = _2133.z * cbModelParam._m0[1u].z;
    }
    float _2166 = (((_1157 * _1106) + _1158) * _1122) * ((cbModelParam._m0[1u].w * (_2149 - _2051)) + _2051);
    float _2168 = (((_1157 * _1108) + _1158) * _1122) * ((cbModelParam._m0[1u].w * (_2151 - _2053)) + _2053);
    float _2170 = (((_1157 * _1109) + _1158) * _1122) * ((cbModelParam._m0[1u].w * (_2153 - _2055)) + _2055);
    float _2173 = fma(_2170, cbSceneParam._m0[89u].z, fma(_2168, cbSceneParam._m0[89u].y, _2166 * cbSceneParam._m0[89u].x));
    float _2176 = fma(_2170, cbSceneParam._m0[90u].z, fma(_2168, cbSceneParam._m0[90u].y, _2166 * cbSceneParam._m0[90u].x));
    float _2179 = fma(_2170, cbSceneParam._m0[91u].z, fma(_2168, cbSceneParam._m0[91u].y, _2166 * cbSceneParam._m0[91u].x));
    uvec4 _2189 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2191 = _2189.x * 14u;
    uint _2192 = _2191 + 13u;
    float _2199 = _1122 + (-1.0);
    float _2204 = (cbLight._m0[_2192].x * _2199) + 1.0;
    float _2205 = (cbLight._m0[_2192].y * _2199) + 1.0;
    float _2206 = (cbLight._m0[_2192].z * _2199) + 1.0;
    float _2207 = (cbLight._m0[_2192].w * _2199) + 1.0;
    uint _2208 = _2191 + 5u;
    float _2214 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2218 = _2191 + 4u;
    float _2224 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2228 = _2191 | 1u;
    float _2239 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_945, _946, _947));
    float _2242 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_945, _946, _947));
    float _4500 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _4511 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2247 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2249 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 0.3183098733425140380859375;
    float _2256 = ((cbLight._m0[_2208].x * _2214) * _2249) + ((cbLight._m0[_2218].x * _2224) * _2247);
    float _2257 = ((_2214 * cbLight._m0[_2208].y) * _2249) + ((_2224 * cbLight._m0[_2218].y) * _2247);
    float _2258 = ((_2214 * cbLight._m0[_2208].z) * _2249) + ((_2224 * cbLight._m0[_2218].z) * _2247);
    uvec4 _2262 = floatBitsToUint(cbLight._m0[_2191 + 12u]);
    bool _2264 = _2262.x == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2264)
    {
        _2275 = _2256;
        _2277 = _2257;
        _2279 = _2258;
    }
    else
    {
        uint _2283 = _2191 + 6u;
        float _2299 = (dot(vec3(cbLight._m0[_2191 + 2u].xyz), vec3(_945, _946, _947)) * 0.5) + 0.5;
        float _2300 = _2299 * _2299;
        float _4522 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2301 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2302 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2275 = (((cbLight._m0[_2283].x * 0.3183098733425140380859375) * _2301) * _2302) + _2256;
        _2277 = (((cbLight._m0[_2283].y * 0.3183098733425140380859375) * _2301) * _2302) + _2257;
        _2279 = (((cbLight._m0[_2283].z * 0.3183098733425140380859375) * _2301) * _2302) + _2258;
    }
    bool _2282 = _2262.y == 0u;
    float _2320;
    float _2322;
    float _2324;
    if (_2282)
    {
        _2320 = _2275;
        _2322 = _2277;
        _2324 = _2279;
    }
    else
    {
        uint _2490 = _2191 + 7u;
        float _2506 = (dot(vec3(cbLight._m0[_2191 + 3u].xyz), vec3(_945, _946, _947)) * 0.5) + 0.5;
        float _2507 = _2506 * _2506;
        float _4538 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2508 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2509 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2320 = (((cbLight._m0[_2490].x * 0.3183098733425140380859375) * _2508) * _2509) + _2275;
        _2322 = (((cbLight._m0[_2490].y * 0.3183098733425140380859375) * _2508) * _2509) + _2277;
        _2324 = (((cbLight._m0[_2490].z * 0.3183098733425140380859375) * _2508) * _2509) + _2279;
    }
    uint _2327 = _2191 + 8u;
    float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _948) * 0.949999988079071044921875);
    float _2341 = _2340 * _2340;
    float _2342 = cbLight._m0[_2191].x + _1024;
    float _2343 = cbLight._m0[_2191].y + _1025;
    float _2344 = cbLight._m0[_2191].z + _1026;
    float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
    float _2349 = _2348 * _2342;
    float _2350 = _2348 * _2343;
    float _2351 = _2348 * _2344;
    float _2352 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2191].xyz));
    float _4554 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _4565 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _2356 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2357 = dot(vec3(_945, _946, _947), vec3(_2349, _2350, _2351));
    float _4576 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2361 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2349, _2350, _2351));
    float _4587 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = _2341 * _2341;
    float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
    float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
    float _2378 = 0.959999978542327880859375 - _1103;
    float _2380 = 0.959999978542327880859375 - _1104;
    float _2381 = 0.959999978542327880859375 - _1105;
    float _2388 = 1.0 - _2341;
    float _2399 = (0.5 / (((_2356 * ((_2355 * _2388) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2388) + _2341) * _2355))) * _2355;
    float _4598 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
    uint _2412 = _2191 + 9u;
    float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _948) * 0.949999988079071044921875);
    float _2424 = _2423 * _2423;
    float _2425 = cbLight._m0[_2228].x + _1024;
    float _2426 = cbLight._m0[_2228].y + _1025;
    float _2427 = cbLight._m0[_2228].z + _1026;
    float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
    float _2432 = _2431 * _2425;
    float _2433 = _2431 * _2426;
    float _2434 = _2431 * _2427;
    float _2435 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2228].xyz));
    float _4609 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2439 = dot(vec3(_945, _946, _947), vec3(_2432, _2433, _2434));
    float _4620 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2443 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2432, _2433, _2434));
    float _4631 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2447 = _2424 * _2424;
    float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
    float _2458 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
    float _2465 = 1.0 - _2424;
    float _2475 = (0.5 / (((_2356 * ((_2438 * _2465) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2465) + _2424) * _2438))) * _2438;
    float _4642 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2477 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
    float _2487 = (((((_2458 * _2378) + _1106) * cbLight._m0[_2412].x) * _2477) * _2214) + (((((_2377 * _2378) + _1106) * cbLight._m0[_2327].x) * _2401) * _2224);
    float _2488 = (((((_2458 * _2380) + _1108) * cbLight._m0[_2412].y) * _2477) * _2214) + (((((_2377 * _2380) + _1108) * cbLight._m0[_2327].y) * _2401) * _2224);
    float _2489 = (((((_2458 * _2381) + _1109) * cbLight._m0[_2412].z) * _2477) * _2214) + (((((_2377 * _2381) + _1109) * cbLight._m0[_2327].z) * _2401) * _2224);
    float _2551;
    float _2553;
    float _2555;
    if (_2264)
    {
        _2551 = _2487;
        _2553 = _2488;
        _2555 = _2489;
    }
    else
    {
        uint _2557 = _2191 + 2u;
        uint _2561 = _2191 + 10u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _948) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _1024;
        float _2578 = cbLight._m0[_2557].y + _1025;
        float _2579 = cbLight._m0[_2557].z + _1026;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2557].xyz));
        float _4653 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2591 = dot(vec3(_945, _946, _947), vec3(_2584, _2585, _2586));
        float _4664 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4675 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
        float _2617 = 1.0 - _2576;
        float _2627 = (0.5 / (((_2356 * ((_2590 * _2617) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2617) + _2576) * _2590))) * _2590;
        float _4686 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2551 = (((((_2610 * _2378) + _1106) * cbLight._m0[_2561].x) * _2629) * _2630) + _2487;
        _2553 = (((((_2610 * _2380) + _1108) * cbLight._m0[_2561].y) * _2629) * _2630) + _2488;
        _2555 = (((((_2610 * _2381) + _1109) * cbLight._m0[_2561].z) * _2629) * _2630) + _2489;
    }
    float _2665;
    float _2667;
    float _2669;
    if (_2282)
    {
        _2665 = _2551;
        _2667 = _2553;
        _2669 = _2555;
    }
    else
    {
        uint _2676 = _2191 + 3u;
        uint _2680 = _2191 + 11u;
        float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2676].w)) * _948) * 0.949999988079071044921875);
        float _2695 = _2694 * _2694;
        float _2696 = cbLight._m0[_2676].x + _1024;
        float _2697 = cbLight._m0[_2676].y + _1025;
        float _2698 = cbLight._m0[_2676].z + _1026;
        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
        float _2703 = _2702 * _2696;
        float _2704 = _2702 * _2697;
        float _2705 = _2702 * _2698;
        float _2706 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2676].xyz));
        float _4702 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2710 = dot(vec3(_945, _946, _947), vec3(_2703, _2704, _2705));
        float _4713 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2714 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_2703, _2704, _2705));
        float _4724 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2718 = _2695 * _2695;
        float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
        float _2729 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
        float _2736 = 1.0 - _2695;
        float _2746 = (0.5 / (((_2356 * ((_2709 * _2736) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2736) + _2695) * _2709))) * _2709;
        float _4735 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2748 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
        float _2749 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2665 = (((((_2729 * _2378) + _1106) * cbLight._m0[_2680].x) * _2748) * _2749) + _2551;
        _2667 = (((((_2729 * _2380) + _1108) * cbLight._m0[_2680].y) * _2748) * _2749) + _2553;
        _2669 = (((((_2729 * _2381) + _1109) * cbLight._m0[_2680].z) * _2748) * _2749) + _2555;
    }
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    if (_2189.y == 0u)
    {
        float _2824 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2825 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2824;
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2824;
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2824;
        uvec4 _2839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2840 = _2839.x;
        uint _2851 = uint((float(_2839.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1045) / _2840))) + floor(float(uint(cbSceneParam._m0[85u].x * _1044) / _2840)));
        float _2861 = (log2(_2827 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2862 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        uint _2865 = uint(isnan(14.0) ? _2862 : (isnan(_2862) ? 14.0 : min(_2862, 14.0)));
        uvec4 _2870 = texelFetch(g_lightClusterGridBuffer, int(((_2865 << 2u) + (_2851 << 6u)) >> 2u));
        uint _2871 = _2870.x;
        uint _2872 = _2839.z;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((((1u << ((_2872 >> 4u) & 15u)) + 4294967295u) & _2871) == 0u) || ((_2872 & 240u) == 0u))
        {
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
        }
        else
        {
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _3124 = 0.0;
            float _3125 = 0.0;
            float _3126 = 0.0;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            uint _3130 = 0u;
            uint _3139;
            bool _3140;
            for (;;)
            {
                _3139 = texelFetch(g_lightClassification, int((((_2865 << 5u) + (_2851 << 9u)) + (_3130 << 2u)) >> 2u)).x;
                _3140 = _3139 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3140)
                {
                    frontier_phi_66_pred = _3124;
                    frontier_phi_66_pred_1 = _3129;
                    frontier_phi_66_pred_2 = _3128;
                    frontier_phi_66_pred_3 = _3127;
                    frontier_phi_66_pred_4 = _3126;
                    frontier_phi_66_pred_5 = _3125;
                }
                else
                {
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    uint _3275;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3126;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3139;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    for (;;)
                    {
                        uint _3279 = uint(findLSB(_3275)) + (_3130 << 5u);
                        uint _3276 = (_3275 + 4294967295u) & _3275;
                        uint _3281 = _3279 * 48u;
                        vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 3u)).x));
                        uint _3301 = (_3279 * 48u) + 4u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 3u)).x));
                        uint _3320 = (_3279 * 48u) + 8u;
                        vec3 _3331 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x));
                        float _3335 = _3295.x - _2825;
                        float _3336 = _3295.y - _2826;
                        float _3337 = _3295.z - _2827;
                        float _3338 = dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337));
                        float _3341 = inversesqrt(_3338);
                        float _3342 = _3341 * _3335;
                        float _3343 = _3341 * _3336;
                        float _3344 = _3341 * _3337;
                        float _3345 = dot(vec3(_1063, _1066, _1069), vec3(_3342, _3343, _3344));
                        float _3350 = 1.0 - (_3338 * _3295.w);
                        float _4761 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3351 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3352 = sqrt(_3338) * _3314.w;
                        float _3355 = 1.39999997615814208984375 / (_3352 + 1.39999997615814208984375);
                        float _3356 = _3355 * _3355;
                        float _3359 = ((1.0 - _3356) * _3345) + _3356;
                        float _3362 = _3352 * _3352;
                        float _3366 = ((isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0))) * _3351) / ((_3362 * 0.699999988079071044921875) + 1.0);
                        float _3370 = (-0.0) - _2825;
                        float _3371 = (-0.0) - _2826;
                        float _3372 = (-0.0) - _2827;
                        float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                        float _3377 = _3376 * _3370;
                        float _3378 = _3376 * _3371;
                        float _3379 = _3376 * _3372;
                        float _3387 = exp2(log2(1.0 / ((_3362 * 3.5) + 5.0)) * 0.25);
                        float _3388 = 1.0 - _1138;
                        float _3395 = sqrt(1.0 - ((1.0 - (_3388 * _3388)) * (1.0 - (_3387 * _3387))));
                        float _3396 = _3395 * _3395;
                        float _3397 = _3396 * _3396;
                        float _3398 = _3377 + _3342;
                        float _3399 = _3378 + _3343;
                        float _3400 = _3379 + _3344;
                        float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                        float _3408 = dot(vec3(_1063, _1066, _1069), vec3(_3377, _3378, _3379));
                        float _4777 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3411 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3412 = dot(vec3(_1063, _1066, _1069), vec3(_3404 * _3398, _3404 * _3399, _3404 * _3400));
                        float _4788 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3415 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3419 = ((_3415 * _3415) * (_3397 + (-1.0))) + 1.0;
                        float _3420 = _3355 * _3396;
                        float _3421 = _3420 * _3420;
                        float _3424 = ((1.0 - _3421) * _3345) + _3421;
                        float _4799 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3426 = 1.0 - _3396;
                        float _3436 = (0.5 / (((_3425 * ((_3411 * _3426) + _3396)) + 9.9999999392252902907785028219223e-09) + (((_3425 * _3426) + _3396) * _3411))) * _3425;
                        float _4810 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3447 = (((_3397 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3419 * _3419) * ((_3362 * 2.1991131305694580078125) + 3.141590118408203125))) * _3351;
                        _3199 = (_3366 * _3314.x) + _3272;
                        _3200 = (_3366 * _3314.y) + _3273;
                        _3201 = (_3366 * _3314.z) + _3274;
                        _3196 = (_3447 * _3331.x) + _3269;
                        _3197 = (_3447 * _3331.y) + _3270;
                        _3198 = (_3447 * _3331.z) + _3271;
                        if (_3276 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3198;
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3276;
                        }
                    }
                    frontier_phi_66_pred = _3196;
                    frontier_phi_66_pred_1 = _3201;
                    frontier_phi_66_pred_2 = _3200;
                    frontier_phi_66_pred_3 = _3199;
                    frontier_phi_66_pred_4 = _3198;
                    frontier_phi_66_pred_5 = _3197;
                }
                _2973 = frontier_phi_66_pred;
                _2983 = frontier_phi_66_pred_1;
                _2981 = frontier_phi_66_pred_2;
                _2979 = frontier_phi_66_pred_3;
                _2977 = frontier_phi_66_pred_4;
                _2975 = frontier_phi_66_pred_5;
                uint _3131 = _3130 + 1u;
                if (_3131 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3124 = _2973;
                    _3125 = _2975;
                    _3126 = _2977;
                    _3127 = _2979;
                    _3128 = _2981;
                    _3129 = _2983;
                    _3130 = _3131;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
        }
        uvec4 _2986 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2987 = _2986.z;
        uint _2989 = (_2987 >> 8u) & 15u;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        if (((4294967295u << _2989) & _2871) == 0u)
        {
            _3092 = _2972;
            _3094 = _2974;
            _3096 = _2976;
            _3098 = _2978;
            _3100 = _2980;
            _3102 = _2982;
        }
        else
        {
            float _3117 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
            float _3118 = _3117 * _2825;
            float _3119 = _3117 * _2826;
            float _3120 = _3117 * _2827;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2989 < ((_2987 >> 12u) & 15u))
            {
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3101;
                float _3103;
                float _3252 = _2972;
                float _3253 = _2974;
                float _3254 = _2976;
                float _3255 = _2978;
                float _3256 = _2980;
                float _3257 = _2982;
                uint _3258 = _2989;
                uint _3267;
                bool _3268;
                for (;;)
                {
                    _3267 = texelFetch(g_lightClassification, int((((_2865 << 5u) + (_2851 << 9u)) + (_3258 << 2u)) >> 2u)).x;
                    _3268 = _3267 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3268)
                    {
                        frontier_phi_77_pred = _3257;
                        frontier_phi_77_pred_1 = _3256;
                        frontier_phi_77_pred_2 = _3255;
                        frontier_phi_77_pred_3 = _3254;
                        frontier_phi_77_pred_4 = _3253;
                        frontier_phi_77_pred_5 = _3252;
                    }
                    else
                    {
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3474 = _3252;
                        float _3475 = _3253;
                        float _3476 = _3254;
                        float _3477 = _3255;
                        float _3478 = _3256;
                        float _3479 = _3257;
                        uint _3480 = _3267;
                        uint _3481;
                        vec4 _3506;
                        float _3507;
                        vec4 _3522;
                        vec3 _3534;
                        vec4 _3549;
                        vec4 _3564;
                        float _3610;
                        bool _3611;
                        for (;;)
                        {
                            uint _3491 = ((_3258 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3480));
                            _3481 = (_3480 + 4294967295u) & _3480;
                            uint _3493 = _3491 * 40u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            _3507 = _3506.w;
                            uint _3509 = (_3491 * 40u) + 4u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3491 * 40u) + 8u;
                            _3534 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x));
                            uint _3536 = (_3491 * 40u) + 16u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3551 = (_3491 * 40u) + 20u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3491 * 40u) + 24u;
                            vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3585 = (_3491 * 40u) + 28u;
                            vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            _3610 = fma(_2827, _3598.z, fma(_2826, _3598.y, _3598.x * _2825)) + _3598.w;
                            _3611 = !((fma(_2827, _3579.z, fma(_2826, _3579.y, _3579.x * _2825)) + _3579.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3611)
                            {
                                float _3638 = _3506.x - _2825;
                                float _3639 = _3506.y - _2826;
                                float _3640 = _3506.z - _2827;
                                float _3641 = dot(vec3(_3638, _3639, _3640), vec3(_3638, _3639, _3640));
                                float _3644 = inversesqrt(_3641);
                                float _3645 = _3644 * _3638;
                                float _3646 = _3644 * _3639;
                                float _3647 = _3644 * _3640;
                                float _3651 = 1.0 - (_3641 / (_3507 * _3507));
                                float _4821 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3656 = sqrt(_3641) * _3522.w;
                                float _3658 = 1.39999997615814208984375 / (_3656 + 1.39999997615814208984375);
                                float _3659 = _3658 * _3658;
                                float _3662 = ((1.0 - _3659) * dot(vec3(_3645, _3646, _3647), vec3(_1063, _1066, _1069))) + _3659;
                                float _3665 = _3656 * _3656;
                                float _3669 = (fma(_2827, _3549.z, fma(_2826, _3549.y, _3549.x * _2825)) + _3549.w) / _3610;
                                float _3670 = (fma(_2827, _3564.z, fma(_2826, _3564.y, _3564.x * _2825)) + _3564.w) / _3610;
                                float _3674 = 1.0 - dot(vec2(_3669, _3670), vec2(_3669, _3670));
                                float _4837 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3676 = _3675 * (((isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0))) * _3652) / ((_3665 * 0.699999988079071044921875) + 1.0));
                                float _3688 = exp2(log2(1.0 / ((_3665 * 3.5) + 5.0)) * 0.25);
                                float _3689 = 1.0 - _1138;
                                float _3696 = sqrt(1.0 - ((1.0 - (_3689 * _3689)) * (1.0 - (_3688 * _3688))));
                                float _3697 = _3696 * _3696;
                                float _3698 = _3697 * _3697;
                                float _3699 = _3645 - _3118;
                                float _3700 = _3646 - _3119;
                                float _3701 = _3647 - _3120;
                                float _3705 = inversesqrt(dot(vec3(_3699, _3700, _3701), vec3(_3699, _3700, _3701)));
                                float _3709 = dot(vec3(_1063, _1066, _1069), vec3((-0.0) - _3118, (-0.0) - _3119, (-0.0) - _3120));
                                float _4848 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3712 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3713 = dot(vec3(_1063, _1066, _1069), vec3(_3705 * _3699, _3705 * _3700, _3705 * _3701));
                                float _4859 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3716 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3720 = ((_3716 * _3716) * (_3698 + (-1.0))) + 1.0;
                                float _3721 = _3658 * _3697;
                                float _3722 = _3721 * _3721;
                                float _3728 = ((1.0 - _3722) * dot(vec3(_1063, _1066, _1069), vec3(_3645, _3646, _3647))) + _3722;
                                float _4870 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3730 = 1.0 - _3697;
                                float _3740 = (0.5 / (((_3729 * ((_3712 * _3730) + _3697)) + 9.9999999392252902907785028219223e-09) + (((_3729 * _3730) + _3697) * _3712))) * _3729;
                                float _4881 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3750 = (_3675 * _3652) * (((_3698 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3720 * _3720) * ((_3665 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3676 * _3522.y;
                                frontier_phi_83_pred_1 = _3676 * _3522.x;
                                frontier_phi_83_pred_2 = _3750 * _3534.z;
                                frontier_phi_83_pred_3 = _3750 * _3534.y;
                                frontier_phi_83_pred_4 = _3750 * _3534.x;
                                frontier_phi_83_pred_5 = _3676 * _3522.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3758 = frontier_phi_83_pred;
                            _3757 = frontier_phi_83_pred_1;
                            _3756 = frontier_phi_83_pred_2;
                            _3755 = frontier_phi_83_pred_3;
                            _3754 = frontier_phi_83_pred_4;
                            _3759 = frontier_phi_83_pred_5;
                            _3464 = _3757 + _3477;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3461 = _3754 + _3474;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            if (_3481 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3481;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3466;
                        frontier_phi_77_pred_1 = _3465;
                        frontier_phi_77_pred_2 = _3464;
                        frontier_phi_77_pred_3 = _3463;
                        frontier_phi_77_pred_4 = _3462;
                        frontier_phi_77_pred_5 = _3461;
                    }
                    _3103 = frontier_phi_77_pred;
                    _3101 = frontier_phi_77_pred_1;
                    _3099 = frontier_phi_77_pred_2;
                    _3097 = frontier_phi_77_pred_3;
                    _3095 = frontier_phi_77_pred_4;
                    _3093 = frontier_phi_77_pred_5;
                    uint _3259 = _3258 + 1u;
                    if (_3259 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3252 = _3093;
                        _3253 = _3095;
                        _3254 = _3097;
                        _3255 = _3099;
                        _3256 = _3101;
                        _3257 = _3103;
                        _3258 = _3259;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3097;
                frontier_phi_58_59_ladder_1 = _3103;
                frontier_phi_58_59_ladder_2 = _3101;
                frontier_phi_58_59_ladder_3 = _3099;
                frontier_phi_58_59_ladder_4 = _3095;
                frontier_phi_58_59_ladder_5 = _3093;
            }
            else
            {
                frontier_phi_58_59_ladder = _2976;
                frontier_phi_58_59_ladder_1 = _2982;
                frontier_phi_58_59_ladder_2 = _2980;
                frontier_phi_58_59_ladder_3 = _2978;
                frontier_phi_58_59_ladder_4 = _2974;
                frontier_phi_58_59_ladder_5 = _2972;
            }
            _3092 = frontier_phi_58_59_ladder_5;
            _3094 = frontier_phi_58_59_ladder_4;
            _3096 = frontier_phi_58_59_ladder;
            _3098 = frontier_phi_58_59_ladder_3;
            _3100 = frontier_phi_58_59_ladder_2;
            _3102 = frontier_phi_58_59_ladder_1;
        }
        float _3107 = isnan(1.0) ? _1122 : (isnan(_1122) ? 1.0 : min(_1122, 1.0));
        _2884 = (_3107 * _3098) + _2320;
        _2886 = (_3107 * _3100) + _2322;
        _2888 = (_3107 * _3102) + _2324;
        _2890 = ((_3092 * _1106) * _3107) + _2665;
        _2892 = ((_3094 * _1108) * _3107) + _2667;
        _2894 = ((_3096 * _1109) * _3107) + _2669;
    }
    else
    {
        _2884 = _2320;
        _2886 = _2322;
        _2888 = _2324;
        _2890 = _2665;
        _2892 = _2667;
        _2894 = _2669;
    }
    float _4897 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _4908 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _4919 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _2911 = ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2884 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1122))) + ((_2890 + ((isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0))) * _1960)) * cbPerFrame._m0[3u].x);
    float _2912 = ((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2886 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1122))) + ((_2892 + ((isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) * _1960)) * cbPerFrame._m0[3u].x);
    float _2913 = ((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2888 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1122))) + ((_2894 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1960)) * cbPerFrame._m0[3u].x);
    uint _2914 = _263 + 6u;
    float _2922 = _1044 / cbSceneParam._m0[86u].x;
    float _2923 = _1045 / cbSceneParam._m0[86u].y;
    vec4 _2937 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, (log2((isnan(cbSceneParam._m0[77u].w) ? _967 : (isnan(_967) ? cbSceneParam._m0[77u].w : min(_967, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2939 = _2937.x;
    float _2940 = _2937.y;
    float _2941 = _2937.z;
    float _2942 = _2937.w;
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    if (_967 > cbSceneParam._m0[78u].w)
    {
        float _2997 = isnan(_967) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _967 : min(cbSceneParam._m0[80u].w, _967));
        float _2998 = _2997 / _967;
        float _3009 = _2998 * _1017;
        float _3010 = _1018 * _2998;
        float _3011 = (-0.0) - _3010;
        float _3012 = _2998 * _1019;
        float _3014 = (cbSceneParam._m0[77u].w * _3011) / _2997;
        float _3015 = _3014 + cbSceneParam._m0[79u].w;
        float _3016 = cbSceneParam._m0[79u].w - _3010;
        float _3022 = sqrt(((_3009 * _3009) + (_3010 * _3010)) + (_3012 * _3012));
        float _3025 = (1.0 - (cbSceneParam._m0[77u].w / _2997)) * _3022;
        float _3030 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3032 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3209;
        if (abs((_3011 - _3014) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3209 = ((((_3015 > 0.0) ? exp2(_3030 * _3015) : (2.0 - exp2(_3032 * _3015))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3025;
        }
        else
        {
            float _3153 = 1.0 / cbSceneParam._m0[80u].x;
            float _3154 = isnan(_3016) ? _3015 : (isnan(_3015) ? _3016 : max(_3015, _3016));
            float _3155 = isnan(_3016) ? _3015 : (isnan(_3015) ? _3016 : min(_3015, _3016));
            float _3164 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : min(_3154, 0.0));
            float _3165 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : min(_3155, 0.0));
            _3209 = ((abs(_3022 / _3011) * cbSceneParam._m0[80u].y) * ((((_3164 - _3165) * 2.0) - ((exp2(_3030 * (isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0)))) - exp2(_3030 * (isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))))) * _3153)) - ((exp2(_3032 * _3164) - exp2(_3032 * _3165)) * _3153))) + (_3025 * cbSceneParam._m0[80u].z);
        }
        vec4 _3211 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, 1.0), 0.0);
        float _3220 = exp2((_3209 * (-1.44269502162933349609375)) * (1.0 - _3211.w));
        float _3221 = log2(_3220);
        float _3237 = log2(_2942);
        _3034 = (exp2(_3237 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].x)) * _3211.x) / cbSceneParam._m0[78u].x)) + _2939;
        _3036 = (exp2(_3237 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].y)) * _3211.y) / cbSceneParam._m0[78u].y)) + _2940;
        _3038 = (exp2(_3237 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3221 * cbSceneParam._m0[78u].z)) * _3211.z) / cbSceneParam._m0[78u].z)) + _2941;
        _3040 = _3220 * _2942;
    }
    else
    {
        _3034 = _2939;
        _3036 = _2940;
        _3038 = _2941;
        _3040 = _2942;
    }
    bool _3247;
    vec4 _3050;
    vec4 _3072;
    float _3074;
    float _3078;
    float _3079;
    float _3080;
    float _3081;
    bool _3091;
    for (;;)
    {
        _3050 = cbMatDynParam._m0[0u];
        float _3052 = roundEven(_3050.y);
        bool _3053 = _3052 == 3.0;
        float _3054 = log2(_3040);
        float _3061 = exp2(_3054 * cbSceneParam._m0[78u].x) * _2911;
        float _3062 = exp2(_3054 * cbSceneParam._m0[78u].y) * _2912;
        float _3063 = exp2(_3054 * cbSceneParam._m0[78u].z) * _2913;
        float _3070 = _1033 + (-0.5);
        _3072 = cbMtdParam._m0[1u];
        _3074 = _3072.y * _3070;
        float _3077 = (_3052 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3078 = _3077 * (_3053 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3034)));
        _3079 = _3077 * (_3053 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3036)));
        _3080 = _3077 * (_3053 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3038)));
        _3081 = _3070 * 0.999000012874603271484375;
        _3091 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3091)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3081) < 0.5)
            {
                _3247 = true;
                break;
            }
        }
        uint _3188 = _1082 + uint(_3050.w);
        if ((cbInstanceData._m0[_3188].w < 1.0) && ((cbInstanceData._m0[_3188].w + _3081) < 0.5))
        {
            _3247 = true;
            break;
        }
        if ((_3074 + 1.0) < _3072.x)
        {
            _3247 = true;
            break;
        }
        _3247 = false;
        break;
    }
    float _3452;
    if (_3247)
    {
        discard_state = true;
        _3452 = 0.0;
    }
    else
    {
        _3452 = cbInstanceData._m0[_2914].w;
    }
    SV_Target.x = _3078;
    SV_Target.y = _3079;
    SV_Target.z = _3080;
    SV_Target.w = _3452;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2914].w;
    discard_exit();
}


