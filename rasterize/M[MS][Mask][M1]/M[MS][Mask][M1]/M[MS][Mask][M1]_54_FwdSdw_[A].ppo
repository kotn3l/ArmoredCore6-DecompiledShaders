#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1384;
float _4049;
float _4050;
float _4051;
float _4052;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4061 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4072 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4083 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _453 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _470 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_441 - _453) * cbMtdParam._m0[23u].w) + _453) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4094 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _478 = (_471 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _479 = (_471 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _480 = (_471 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _519 = _517.x;
    float _529 = dot(vec4(_519, _517.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _543 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_519 - _529) * cbMtdParam._m0[23u].w) + _529) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4105 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _554 = (_336.x * cbMtdParam._m0[9u].x) * ((_544 * ((_497.x * cbMtdParam._m0[13u].x) - _478)) + _478);
    float _555 = (_336.y * cbMtdParam._m0[9u].y) * ((_544 * ((_497.y * cbMtdParam._m0[13u].y) - _479)) + _479);
    float _556 = (_336.z * cbMtdParam._m0[9u].z) * ((_544 * ((_497.z * cbMtdParam._m0[13u].z) - _480)) + _480);
    float _560 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _554;
    float _563 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _555;
    float _566 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _556;
    float _574 = (((_554 - _560) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) + _560) * 4.55000019073486328125;
    float _576 = (((_555 - _563) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) + _563) * 4.55000019073486328125;
    float _578 = (((_556 - _566) * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) + _566) * 4.55000019073486328125;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _632 = _630.x;
    float _633 = _630.y;
    float _634 = _630.z;
    float _641 = ((_613.x - _632) * _471) + _632;
    float _642 = ((_613.y - _633) * _471) + _633;
    float _643 = ((_613.z - _634) * _471) + _634;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _668 = ((_655.z - _643) * _544) + _643;
    float _671 = ((((_655.x - _641) * _544) + _641) * 2.0) + (-1.0);
    float _672 = ((((_655.y - _642) * _544) + _642) * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _4116 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _678 = sqrt(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _710 = (_671 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_590.x * 2.0) + (-1.0)))) + (((_698.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _711 = (_672 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_590.y * 2.0) + (-1.0)))) + (((_698.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _739 = _737.x;
    float _756 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _739) * _471) + _739;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w));
    float _774 = ((_769.x - _756) * _544) + _756;
    float _778 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _774) * cbMtdParam._m0[19u].z) + _774;
    float _783 = (((_590.z - _668) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _668;
    float _787 = ((_698.z - _783) * cbMtdParam._m0[19u].w) + _783;
    float _789 = cbMtdParam._m0[22u].x + _698.w;
    float _792 = fma(_678, _246 * NORMAL.x, fma(_711, _253 * TANGENT.x, (_239 * _231) * _710));
    float _795 = fma(_678, _246 * NORMAL.y, fma(_711, _253 * TANGENT.y, (_239 * _232) * _710));
    float _798 = fma(_678, _246 * NORMAL.z, fma(_711, _253 * TANGENT.z, (_239 * _233) * _710));
    float _802 = inversesqrt(dot(vec3(_792, _795, _798), vec3(_792, _795, _798)));
    float _803 = _802 * _792;
    float _804 = _802 * _795;
    float _805 = _802 * _798;
    float _4127 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _806 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4149 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4160 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4171 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _4182 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _811 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _825 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _876 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _866);
    float _877 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _866);
    float _878 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _866);
    float _882 = inversesqrt(dot(vec3(_876, _877, _878), vec3(_876, _877, _878)));
    float _883 = _876 * _882;
    float _884 = _877 * _882;
    float _885 = _878 * _882;
    vec4 _890 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _892 = _890.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1064 = sqrt(((_876 * _876) + (_877 * _877)) + (_878 * _878));
        float _1070 = (cbMatDynParam._m0[5u].x * _1064) + cbMatDynParam._m0[5u].y;
        float _4193 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1075 = (cbMatDynParam._m0[5u].z * _1064) + cbMatDynParam._m0[5u].w;
        float _4204 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) - _1071)) + _1071) < ((_892 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _903 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _904 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _922 = fma(_805, cbSceneParam._m0[5u].z, fma(_804, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _803));
    float _925 = fma(_805, cbSceneParam._m0[6u].z, fma(_804, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _803));
    float _928 = fma(_805, cbSceneParam._m0[7u].z, fma(_804, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _803));
    uint _941 = _280 + 9u;
    uint _942 = _941 + uint(cbMatDynParam._m0[0u].w);
    float _948 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_942].x;
    float _949 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * cbInstanceData._m0[_942].y;
    float _950 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * cbInstanceData._m0[_942].z;
    float _4215 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _4226 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _954 = 1.0 - _811;
    float _955 = _951 * _954;
    float _956 = _952 * _954;
    float _957 = _953 * _954;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _811;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _811;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _811;
    float _965 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    float _968 = _964 + 0.039999999105930328369140625;
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _903, cbSceneParam._m0[86u].y * _904));
    float _981 = ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * TEXCOORD_5.w) * _977.x;
    float _982 = dot(vec3(_803, _804, _805), vec3(_883, _884, _885));
    float _985 = _982 * 2.0;
    float _989 = (_985 * _803) - _883;
    float _990 = (_985 * _804) - _884;
    float _991 = (_985 * _805) - _885;
    float _995 = abs(dot(vec3(_883, _884, _885), vec3(_803, _804, _805)));
    float _4248 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _997 = sqrt(_806);
    float _1010 = exp2((_997 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_997 * 3.0));
    float _1016 = (1.0 - _1010) * ((_997 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1017 = _1010 * _997;
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1383;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1108 = fma(_1053, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045));
        float _1112 = fma(_1053, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045));
        float _1116 = fma(_1053, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045));
        float _1141 = _1045 + _803;
        float _1142 = _1049 + _804;
        float _1143 = _1053 + _805;
        float _1153 = fma(_1143, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141)) - _1108;
        float _1154 = fma(_1143, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141)) - _1112;
        float _1155 = fma(_1143, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141)) - _1116;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1108 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1112 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[34u].z) + ((((((_1116 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1211 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1177.x + (-0.5));
        float _1213 = _1211 * (_1177.y + (-0.5));
        float _1214 = _1211 * (_1177.z + (-0.5));
        float _1221 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1184.x + (-0.5));
        float _1223 = _1221 * (_1184.y + (-0.5));
        float _1224 = _1221 * (_1184.z + (-0.5));
        float _1231 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1191.x + (-0.5));
        float _1233 = _1231 * (_1191.y + (-0.5));
        float _1234 = _1231 * (_1191.z + (-0.5));
        float _1241 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1198.x + (-0.5));
        float _1243 = _1241 * (_1198.y + (-0.5));
        float _1244 = _1241 * (_1198.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1265 = (dot(vec3(_803, _804, _805), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1275 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4296 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1277 + 1.0))) + _1282) * _1245;
        float _1292 = _1213 * 0.5;
        float _1293 = _1223 * 0.5;
        float _1294 = _1233 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_803, _804, _805), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4329 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1319 + 1.0))) + _1324) * _1246;
        float _1334 = _1214 * 0.5;
        float _1335 = _1224 * 0.5;
        float _1336 = _1234 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_803, _804, _805), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4362 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1361 + 1.0))) + _1366) * _1247;
        _1383 = _1214;
        _1385 = _1213;
        _1386 = _1212;
        _1387 = _1224;
        _1388 = _1223;
        _1389 = _1222;
        _1390 = _1234;
        _1391 = _1233;
        _1392 = _1232;
        _1393 = _1247;
        _1394 = _1246;
        _1395 = _1245;
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1384;
        _1385 = _1384;
        _1386 = _1384;
        _1387 = _1384;
        _1388 = _1384;
        _1389 = _1384;
        _1390 = _1384;
        _1391 = _1384;
        _1392 = _1384;
        _1393 = _1384;
        _1394 = _1384;
        _1395 = _1384;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1425 = fma(_1053, cbModelParam._m0[30u].z, fma(_1049, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045));
        float _1429 = fma(_1053, cbModelParam._m0[31u].z, fma(_1049, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045));
        float _1433 = fma(_1053, cbModelParam._m0[32u].z, fma(_1049, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045));
        float _1456 = _1045 + _803;
        float _1457 = _1049 + _804;
        float _1458 = _1053 + _805;
        float _1468 = fma(_1458, cbModelParam._m0[30u].z, fma(_1457, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1456)) - _1425;
        float _1469 = fma(_1458, cbModelParam._m0[31u].z, fma(_1457, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1456)) - _1429;
        float _1470 = fma(_1458, cbModelParam._m0[32u].z, fma(_1457, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1456)) - _1433;
        float _1474 = inversesqrt(dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470)));
        float _1487 = ((_1474 * _1468) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1425 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1474 * _1469) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1429 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1474 * _1470) / cbModelParam._m0[35u].z) + ((((((_1433 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        float _1524 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1491.x + (-0.5));
        float _1526 = _1524 * (_1491.y + (-0.5));
        float _1527 = _1524 * (_1491.z + (-0.5));
        float _1534 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1498.x + (-0.5));
        float _1536 = _1534 * (_1498.y + (-0.5));
        float _1537 = _1534 * (_1498.z + (-0.5));
        float _1544 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1505.x + (-0.5));
        float _1546 = _1544 * (_1505.y + (-0.5));
        float _1547 = _1544 * (_1505.z + (-0.5));
        float _1554 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1512.x + (-0.5));
        float _1556 = _1554 * (_1512.y + (-0.5));
        float _1557 = _1554 * (_1512.z + (-0.5));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = _1525 * 0.5;
        float _1562 = _1535 * 0.5;
        float _1563 = _1545 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_803, _804, _805), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4425 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1588 + 1.0))) + _1593) * _1558;
        float _1603 = _1526 * 0.5;
        float _1604 = _1536 * 0.5;
        float _1605 = _1546 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_803, _804, _805), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4458 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1630 + 1.0))) + _1635) * _1559;
        float _1645 = _1527 * 0.5;
        float _1646 = _1537 * 0.5;
        float _1647 = _1547 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_803, _804, _805), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4469 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4480 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4491 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_1672 + 1.0))) + _1677) * _1560;
        _1694 = _1527;
        _1695 = _1526;
        _1696 = _1525;
        _1697 = _1537;
        _1698 = _1536;
        _1699 = _1535;
        _1700 = _1547;
        _1701 = _1546;
        _1702 = _1545;
        _1703 = _1560;
        _1704 = _1559;
        _1705 = _1558;
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
    }
    else
    {
        _1694 = _1384;
        _1695 = _1384;
        _1696 = _1384;
        _1697 = _1384;
        _1698 = _1384;
        _1699 = _1384;
        _1700 = _1384;
        _1701 = _1384;
        _1702 = _1384;
        _1703 = _1384;
        _1704 = _1384;
        _1705 = _1384;
        _1706 = 0.0;
        _1707 = 0.0;
        _1708 = 0.0;
    }
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1396)) + _1396;
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1397)) + _1397;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1398)) + _1398;
    float _1741 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1718));
    float _1762 = _989 * 0.5;
    float _1763 = _990 * 0.5;
    float _1764 = _991 * 0.5;
    float _1765 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1768 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1771 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1805;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1778 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1383, _1387, _1390, _1393));
        float _1782 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1786 = dot(vec4(_1762, _1763, _1764, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1793 = dot(vec4(cbModelParam._m0[39u]), vec4(_1762, _1763, _1764, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1793) ? 0.0 : (isnan(0.0) ? _1793 : max(0.0, _1793))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1816;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1807 = dot(vec4(cbModelParam._m0[40u]), vec4(_1762, _1763, _1764, 1.0));
        _1816 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1807) ? 0.0 : (isnan(0.0) ? _1807 : max(0.0, _1807))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1816 = 1.0;
    }
    float _1820 = (_1816 * cbModelParam._m0[1u].x) + (_1805 * (1.0 - cbModelParam._m0[1u].x));
    float _1830 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _806);
    float _1831 = isnan(_1830) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1830 : min(cbModelParam._m0[25u].z, _1830));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1880 = fma(_1053, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1045)) + cbModelParam._m0[13u].w;
        float _1884 = fma(_1053, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1045)) + cbModelParam._m0[14u].w;
        float _1888 = fma(_1053, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1045)) + cbModelParam._m0[15u].w;
        float _1891 = fma(_991, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989));
        float _1894 = fma(_991, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989));
        float _1897 = fma(_991, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989));
        float _1925;
        if (_1891 > 0.0)
        {
            _1925 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1925 = frontier_phi_17_15_ladder;
        }
        float _2097;
        if (_1894 > 0.0)
        {
            _2097 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2097 = frontier_phi_26_22_ladder;
        }
        float _2392;
        if (_1897 > 0.0)
        {
            _2392 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2392 = frontier_phi_38_33_ladder;
        }
        float _2394 = isnan(_2097) ? _1925 : (isnan(_1925) ? _2097 : min(_1925, _2097));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1891) + _1880;
        float _2400 = (_2395 * _1894) + _1884;
        float _2401 = (_2395 * _1897) + _1888;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2402;
        float _2406 = _2402 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 > _2406) || ((_2400 < _2404) || ((_2399 < _2404) || (_2399 > _2406))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2401, cbModelParam._m0[9u].z, fma(_2400, cbModelParam._m0[9u].y, _2399 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2401, cbModelParam._m0[10u].z, fma(_2400, cbModelParam._m0[10u].y, _2399 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2401, cbModelParam._m0[11u].z, fma(_2400, cbModelParam._m0[11u].y, _2399 * cbModelParam._m0[11u].x))), _1831);
            frontier_phi_16_38_ladder = _2546.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2546.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2546.x * cbModelParam._m0[1u].y;
        }
        _1913 = frontier_phi_16_38_ladder_2;
        _1915 = frontier_phi_16_38_ladder_1;
        _1917 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_989, _990, _991), _1831);
        _1913 = _1901.x * cbModelParam._m0[1u].y;
        _1915 = _1901.y * cbModelParam._m0[1u].y;
        _1917 = _1901.z * cbModelParam._m0[1u].y;
    }
    float _1921 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _806);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1921 : min(cbModelParam._m0[25u].w, _1921));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1976 = fma(_1053, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1045)) + cbModelParam._m0[21u].w;
        float _1980 = fma(_1053, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1045)) + cbModelParam._m0[22u].w;
        float _1984 = fma(_1053, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1045)) + cbModelParam._m0[23u].w;
        float _1987 = fma(_991, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989));
        float _1990 = fma(_991, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989));
        float _1993 = fma(_991, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989));
        float _2102;
        if (_1987 > 0.0)
        {
            _2102 = abs((1.0 - _1976) / _1987);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1976 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2102 = frontier_phi_28_24_ladder;
        }
        float _2419;
        if (_1990 > 0.0)
        {
            _2419 = abs((1.0 - _1980) / _1990);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1980 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2419 = frontier_phi_40_35_ladder;
        }
        float _2757;
        if (_1993 > 0.0)
        {
            _2757 = abs((1.0 - _1984) / _1993);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1984 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2757 = frontier_phi_50_47_ladder;
        }
        float _2759 = isnan(_2419) ? _2102 : (isnan(_2102) ? _2419 : min(_2102, _2419));
        float _2760 = isnan(_2757) ? _2759 : (isnan(_2759) ? _2757 : min(_2759, _2757));
        float _2764 = (_2760 * _1987) + _1976;
        float _2765 = (_2760 * _1990) + _1980;
        float _2766 = (_2760 * _1993) + _1984;
        float _2767 = _2760 * 9.9999997473787516355514526367188e-05;
        float _2768 = (-1.0) - _2767;
        float _2770 = _2767 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2766 > _2770) || ((_2766 < _2768) || ((_2765 > _2770) || ((_2765 < _2768) || ((_2764 < _2768) || (_2764 > _2770))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2766, cbModelParam._m0[17u].z, fma(_2765, cbModelParam._m0[17u].y, _2764 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2766, cbModelParam._m0[18u].z, fma(_2765, cbModelParam._m0[18u].y, _2764 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2766, cbModelParam._m0[19u].z, fma(_2765, cbModelParam._m0[19u].y, _2764 * cbModelParam._m0[19u].x))), _1922);
            frontier_phi_25_50_ladder = _2888.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2888.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2888.x * cbModelParam._m0[1u].z;
        }
        _2012 = frontier_phi_25_50_ladder_2;
        _2014 = frontier_phi_25_50_ladder_1;
        _2016 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_989, _990, _991), _1922);
        _2012 = _1996.x * cbModelParam._m0[1u].z;
        _2014 = _1996.y * cbModelParam._m0[1u].z;
        _2016 = _1996.z * cbModelParam._m0[1u].z;
    }
    float _2029 = (((_1016 * _965) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_2012 - _1913)) + _1913);
    float _2031 = (((_1016 * _967) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_2014 - _1915)) + _1915);
    float _2033 = (((_1016 * _968) + _1017) * _981) * ((cbModelParam._m0[1u].w * (_2016 - _1917)) + _1917);
    float _2036 = fma(_2033, cbSceneParam._m0[89u].z, fma(_2031, cbSceneParam._m0[89u].y, _2029 * cbSceneParam._m0[89u].x));
    float _2039 = fma(_2033, cbSceneParam._m0[90u].z, fma(_2031, cbSceneParam._m0[90u].y, _2029 * cbSceneParam._m0[90u].x));
    float _2042 = fma(_2033, cbSceneParam._m0[91u].z, fma(_2031, cbSceneParam._m0[91u].y, _2029 * cbSceneParam._m0[91u].x));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2088 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2089 = _2076 / _2088;
    float _2090 = _2080 / _2088;
    float _2091 = _2084 / _2088;
    float _2238;
    float _2239;
    float _2240;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2118 = ((uint(_2091 > cbSceneParam._m0[59u].y) + uint(_2091 > cbSceneParam._m0[59u].x)) + uint(_2091 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2119 = _2118 + 43u;
        uint _2127 = _2118 + 44u;
        uint _2135 = _2118 + 45u;
        uint _2143 = _2118 + 46u;
        float _2154 = fma(_2088, cbSceneParam._m0[_2119].w, fma(_2084, cbSceneParam._m0[_2119].z, fma(_2080, cbSceneParam._m0[_2119].y, _2076 * cbSceneParam._m0[_2119].x)));
        float _2158 = fma(_2088, cbSceneParam._m0[_2127].w, fma(_2084, cbSceneParam._m0[_2127].z, fma(_2080, cbSceneParam._m0[_2127].y, _2076 * cbSceneParam._m0[_2127].x)));
        float _2166 = fma(_2088, cbSceneParam._m0[_2143].w, fma(_2084, cbSceneParam._m0[_2143].z, fma(_2080, cbSceneParam._m0[_2143].y, _2076 * cbSceneParam._m0[_2143].x)));
        float _2171 = cbSceneParam._m0[33u].z * _2166;
        float _2173 = cbSceneParam._m0[33u].w * _2166;
        float _2176 = fma(_2088, cbSceneParam._m0[_2135].w, fma(_2084, cbSceneParam._m0[_2135].z, fma(_2080, cbSceneParam._m0[_2135].y, _2076 * cbSceneParam._m0[_2135].x))) / _2166;
        float _2224 = (cbSceneParam._m0[33u].x - sqrt(((_2090 * _2090) + (_2089 * _2089)) + (_2091 * _2091))) * cbSceneParam._m0[33u].y;
        float _4617 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2231 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 + _2154) / _2166, (_2173 + _2158) / _2166), _2176), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 + _2154) / _2166, (_2158 - _2171) / _2166), _2176), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 - _2171) / _2166, (_2158 - _2173) / _2166), _2176), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 - _2173) / _2166, (_2171 + _2158) / _2166), _2176), 0.0)).x), vec4(0.25)));
        _2238 = 1.0 - (_2231 * cbSceneParam._m0[34u].x);
        _2239 = 1.0 - (_2231 * cbSceneParam._m0[34u].y);
        _2240 = 1.0 - (_2231 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2238 = 1.0;
        _2239 = 1.0;
        _2240 = 1.0;
    }
    float _2304;
    float _2306;
    float _2308;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2292 = fma(_2088, cbSceneParam._m0[63u].w, fma(_2084, cbSceneParam._m0[63u].z, fma(_2080, cbSceneParam._m0[63u].y, _2076 * cbSceneParam._m0[63u].x)));
        float _2293 = fma(_2088, cbSceneParam._m0[60u].w, fma(_2084, cbSceneParam._m0[60u].z, fma(_2080, cbSceneParam._m0[60u].y, _2076 * cbSceneParam._m0[60u].x))) / _2292;
        float _2294 = fma(_2088, cbSceneParam._m0[61u].w, fma(_2084, cbSceneParam._m0[61u].z, fma(_2080, cbSceneParam._m0[61u].y, _2076 * cbSceneParam._m0[61u].x))) / _2292;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2293 >= cbSceneParam._m0[64u].x) && (_2294 >= cbSceneParam._m0[64u].y)) && (_2293 <= cbSceneParam._m0[64u].z)) && (_2294 <= cbSceneParam._m0[64u].w))
        {
            float _2432 = fma(_2088, cbSceneParam._m0[62u].w, fma(_2084, cbSceneParam._m0[62u].z, fma(_2080, cbSceneParam._m0[62u].y, _2076 * cbSceneParam._m0[62u].x))) / _2292;
            float _2436 = isnan(cbSceneParam._m0[41u].w) ? _2432 : (isnan(_2432) ? cbSceneParam._m0[41u].w : max(_2432, cbSceneParam._m0[41u].w));
            float _2479 = (cbSceneParam._m0[33u].x - sqrt(((_2090 * _2090) + (_2089 * _2089)) + (_2091 * _2091))) * cbSceneParam._m0[33u].y;
            float _4633 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
            float _2486 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2293, cbSceneParam._m0[33u].w + _2294), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2293, _2294 - cbSceneParam._m0[33u].z), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2293 - cbSceneParam._m0[33u].z, _2294 - cbSceneParam._m0[33u].w), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2293 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2294), _2436), 0.0)).x), vec4(0.25)));
            float _2490 = 1.0 - (_2486 * cbSceneParam._m0[34u].x);
            float _2491 = 1.0 - (_2486 * cbSceneParam._m0[34u].y);
            float _2492 = 1.0 - (_2486 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2492) ? _2240 : (isnan(_2240) ? _2492 : min(_2240, _2492));
            frontier_phi_37_36_ladder_1 = isnan(_2491) ? _2239 : (isnan(_2239) ? _2491 : min(_2239, _2491));
            frontier_phi_37_36_ladder_2 = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
        }
        else
        {
            frontier_phi_37_36_ladder = _2240;
            frontier_phi_37_36_ladder_1 = _2239;
            frontier_phi_37_36_ladder_2 = _2238;
        }
        _2304 = frontier_phi_37_36_ladder_2;
        _2306 = frontier_phi_37_36_ladder_1;
        _2308 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2304 = _2238;
        _2306 = _2239;
        _2308 = _2240;
    }
    uvec4 _2313 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2315 = _2313.x * 14u;
    uint _2316 = _2315 + 13u;
    float _2323 = _981 + (-1.0);
    float _2328 = (cbLight._m0[_2316].x * _2323) + 1.0;
    float _2329 = (cbLight._m0[_2316].y * _2323) + 1.0;
    float _2330 = (cbLight._m0[_2316].z * _2323) + 1.0;
    float _2331 = (cbLight._m0[_2316].w * _2323) + 1.0;
    uint _2332 = _2315 + 5u;
    float _2338 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
    uint _2342 = _2315 + 4u;
    float _2351 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2355 = _2315 | 1u;
    float _2366 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_803, _804, _805));
    float _2369 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_803, _804, _805));
    float _4669 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _4680 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2374 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * 0.3183098733425140380859375;
    float _2376 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * 0.3183098733425140380859375;
    float _2383 = ((cbLight._m0[_2332].x * _2338) * _2376) + (((cbLight._m0[_2342].x * _2304) * _2351) * _2374);
    float _2384 = ((_2338 * cbLight._m0[_2332].y) * _2376) + (((cbLight._m0[_2342].y * _2306) * _2351) * _2374);
    float _2385 = ((_2338 * cbLight._m0[_2332].z) * _2376) + (((cbLight._m0[_2342].z * _2308) * _2351) * _2374);
    uvec4 _2389 = floatBitsToUint(cbLight._m0[_2315 + 12u]);
    bool _2391 = _2389.x == 0u;
    float _2493;
    float _2495;
    float _2497;
    if (_2391)
    {
        _2493 = _2383;
        _2495 = _2384;
        _2497 = _2385;
    }
    else
    {
        uint _2501 = _2315 + 6u;
        float _2517 = (dot(vec3(cbLight._m0[_2315 + 2u].xyz), vec3(_803, _804, _805)) * 0.5) + 0.5;
        float _2518 = _2517 * _2517;
        float _4691 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2519 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2520 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2493 = (((cbLight._m0[_2501].x * 0.3183098733425140380859375) * _2519) * _2520) + _2383;
        _2495 = (((cbLight._m0[_2501].y * 0.3183098733425140380859375) * _2519) * _2520) + _2384;
        _2497 = (((cbLight._m0[_2501].z * 0.3183098733425140380859375) * _2519) * _2520) + _2385;
    }
    bool _2500 = _2389.y == 0u;
    float _2555;
    float _2557;
    float _2559;
    if (_2500)
    {
        _2555 = _2493;
        _2557 = _2495;
        _2559 = _2497;
    }
    else
    {
        uint _2728 = _2315 + 7u;
        float _2744 = (dot(vec3(cbLight._m0[_2315 + 3u].xyz), vec3(_803, _804, _805)) * 0.5) + 0.5;
        float _2745 = _2744 * _2744;
        float _4707 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2746 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2747 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2555 = (((cbLight._m0[_2728].x * 0.3183098733425140380859375) * _2746) * _2747) + _2493;
        _2557 = (((cbLight._m0[_2728].y * 0.3183098733425140380859375) * _2746) * _2747) + _2495;
        _2559 = (((cbLight._m0[_2728].z * 0.3183098733425140380859375) * _2746) * _2747) + _2497;
    }
    uint _2562 = _2315 + 8u;
    float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _806) * 0.949999988079071044921875);
    float _2576 = _2575 * _2575;
    float _2577 = cbLight._m0[_2315].x + _883;
    float _2578 = cbLight._m0[_2315].y + _884;
    float _2579 = cbLight._m0[_2315].z + _885;
    float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
    float _2584 = _2583 * _2577;
    float _2585 = _2583 * _2578;
    float _2586 = _2583 * _2579;
    float _2587 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2315].xyz));
    float _4723 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _4734 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _2591 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2592 = dot(vec3(_803, _804, _805), vec3(_2584, _2585, _2586));
    float _4745 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2596 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2584, _2585, _2586));
    float _4756 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2600 = _2576 * _2576;
    float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
    float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0);
    float _2613 = 0.959999978542327880859375 - _962;
    float _2615 = 0.959999978542327880859375 - _963;
    float _2616 = 0.959999978542327880859375 - _964;
    float _2623 = 1.0 - _2576;
    float _2634 = (0.5 / (((_2591 * ((_2590 * _2623) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2623) + _2576) * _2590))) * _2590;
    float _4767 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2636 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
    uint _2650 = _2315 + 9u;
    float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _806) * 0.949999988079071044921875);
    float _2662 = _2661 * _2661;
    float _2663 = cbLight._m0[_2355].x + _883;
    float _2664 = cbLight._m0[_2355].y + _884;
    float _2665 = cbLight._m0[_2355].z + _885;
    float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
    float _2670 = _2669 * _2663;
    float _2671 = _2669 * _2664;
    float _2672 = _2669 * _2665;
    float _2673 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2355].xyz));
    float _4778 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2676 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
    float _2677 = dot(vec3(_803, _804, _805), vec3(_2670, _2671, _2672));
    float _4789 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
    float _2681 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2670, _2671, _2672));
    float _4800 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2685 = _2662 * _2662;
    float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
    float _2696 = exp2(log2(1.0 - (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) * 5.0);
    float _2703 = 1.0 - _2662;
    float _2713 = (0.5 / (((_2591 * ((_2676 * _2703) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2703) + _2662) * _2676))) * _2676;
    float _4811 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2715 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
    float _2725 = (((((_2696 * _2613) + _965) * cbLight._m0[_2650].x) * _2715) * _2338) + ((((cbLight._m0[_2562].x * _2304) * ((_2612 * _2613) + _965)) * _2636) * _2351);
    float _2726 = (((((_2696 * _2615) + _967) * cbLight._m0[_2650].y) * _2715) * _2338) + ((((cbLight._m0[_2562].y * _2306) * ((_2612 * _2615) + _967)) * _2636) * _2351);
    float _2727 = (((((_2696 * _2616) + _968) * cbLight._m0[_2650].z) * _2715) * _2338) + ((((cbLight._m0[_2562].z * _2308) * ((_2612 * _2616) + _968)) * _2636) * _2351);
    float _2783;
    float _2785;
    float _2787;
    if (_2391)
    {
        _2783 = _2725;
        _2785 = _2726;
        _2787 = _2727;
    }
    else
    {
        uint _2789 = _2315 + 2u;
        uint _2793 = _2315 + 10u;
        float _2807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2789].w)) * _806) * 0.949999988079071044921875);
        float _2808 = _2807 * _2807;
        float _2809 = cbLight._m0[_2789].x + _883;
        float _2810 = cbLight._m0[_2789].y + _884;
        float _2811 = cbLight._m0[_2789].z + _885;
        float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
        float _2816 = _2815 * _2809;
        float _2817 = _2815 * _2810;
        float _2818 = _2815 * _2811;
        float _2819 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2789].xyz));
        float _4822 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2823 = dot(vec3(_803, _804, _805), vec3(_2816, _2817, _2818));
        float _4833 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2826 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2827 = dot(vec3(cbLight._m0[_2789].xyz), vec3(_2816, _2817, _2818));
        float _4844 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2831 = _2808 * _2808;
        float _2835 = ((_2826 * _2826) * (_2831 + (-1.0))) + 1.0;
        float _2842 = exp2(log2(1.0 - (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) * 5.0);
        float _2849 = 1.0 - _2808;
        float _2859 = (0.5 / (((_2591 * ((_2822 * _2849) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2849) + _2808) * _2822))) * _2822;
        float _4855 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2861 = (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2831 / ((_2835 * _2835) * 3.141590118408203125));
        float _2862 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2783 = (((((_2842 * _2613) + _965) * cbLight._m0[_2793].x) * _2861) * _2862) + _2725;
        _2785 = (((((_2842 * _2615) + _967) * cbLight._m0[_2793].y) * _2861) * _2862) + _2726;
        _2787 = (((((_2842 * _2616) + _968) * cbLight._m0[_2793].z) * _2861) * _2862) + _2727;
    }
    float _2893;
    float _2895;
    float _2897;
    if (_2500)
    {
        _2893 = _2783;
        _2895 = _2785;
        _2897 = _2787;
    }
    else
    {
        uint _2904 = _2315 + 3u;
        uint _2908 = _2315 + 11u;
        float _2922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2904].w)) * _806) * 0.949999988079071044921875);
        float _2923 = _2922 * _2922;
        float _2924 = cbLight._m0[_2904].x + _883;
        float _2925 = cbLight._m0[_2904].y + _884;
        float _2926 = cbLight._m0[_2904].z + _885;
        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
        float _2931 = _2930 * _2924;
        float _2932 = _2930 * _2925;
        float _2933 = _2930 * _2926;
        float _2934 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2904].xyz));
        float _4871 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2938 = dot(vec3(_803, _804, _805), vec3(_2931, _2932, _2933));
        float _4882 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
        float _2942 = dot(vec3(cbLight._m0[_2904].xyz), vec3(_2931, _2932, _2933));
        float _4893 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2946 = _2923 * _2923;
        float _2950 = ((_2941 * _2941) * (_2946 + (-1.0))) + 1.0;
        float _2957 = exp2(log2(1.0 - (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) * 5.0);
        float _2964 = 1.0 - _2923;
        float _2974 = (0.5 / (((_2591 * ((_2937 * _2964) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2964) + _2923) * _2937))) * _2937;
        float _4904 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2976 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2946 / ((_2950 * _2950) * 3.141590118408203125));
        float _2977 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2893 = (((((_2957 * _2613) + _965) * cbLight._m0[_2908].x) * _2976) * _2977) + _2783;
        _2895 = (((((_2957 * _2615) + _967) * cbLight._m0[_2908].y) * _2976) * _2977) + _2785;
        _2897 = (((((_2957 * _2616) + _968) * cbLight._m0[_2908].z) * _2976) * _2977) + _2787;
    }
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_2313.y == 0u)
    {
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.x;
        uint _3010 = uint((float(_2998.y) * floor(float(uint(cbSceneParam._m0[85u].y * _904) / _2999))) + floor(float(uint(cbSceneParam._m0[85u].x * _903) / _2999)));
        float _3020 = (log2(_2091 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3021 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        uint _3024 = uint(isnan(14.0) ? _3021 : (isnan(_3021) ? 14.0 : min(_3021, 14.0)));
        uvec4 _3029 = texelFetch(g_lightClusterGridBuffer, int(((_3024 << 2u) + (_3010 << 6u)) >> 2u));
        uint _3030 = _3029.x;
        uint _3031 = _2998.z;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        if (((((1u << ((_3031 >> 4u) & 15u)) + 4294967295u) & _3030) == 0u) || ((_3031 & 240u) == 0u))
        {
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
        }
        else
        {
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            uint _3269 = 0u;
            uint _3278;
            bool _3279;
            for (;;)
            {
                _3278 = texelFetch(g_lightClassification, int((((_3024 << 5u) + (_3010 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                _3279 = _3278 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3279)
                {
                    frontier_phi_71_pred = _3268;
                    frontier_phi_71_pred_1 = _3267;
                    frontier_phi_71_pred_2 = _3266;
                    frontier_phi_71_pred_3 = _3265;
                    frontier_phi_71_pred_4 = _3264;
                    frontier_phi_71_pred_5 = _3263;
                }
                else
                {
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    uint _3414;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3268;
                    _3414 = _3278;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    for (;;)
                    {
                        uint _3418 = uint(findLSB(_3414)) + (_3269 << 5u);
                        uint _3415 = (_3414 + 4294967295u) & _3414;
                        uint _3420 = _3418 * 48u;
                        vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3420)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 3u)).x));
                        uint _3440 = (_3418 * 48u) + 4u;
                        vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 3u)).x));
                        uint _3459 = (_3418 * 48u) + 8u;
                        vec3 _3470 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3459)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 2u)).x));
                        float _3474 = _3434.x - _2089;
                        float _3475 = _3434.y - _2090;
                        float _3476 = _3434.z - _2091;
                        float _3477 = dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476));
                        float _3480 = inversesqrt(_3477);
                        float _3481 = _3480 * _3474;
                        float _3482 = _3480 * _3475;
                        float _3483 = _3480 * _3476;
                        float _3484 = dot(vec3(_922, _925, _928), vec3(_3481, _3482, _3483));
                        float _3489 = 1.0 - (_3477 * _3434.w);
                        float _4930 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3490 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3491 = sqrt(_3477) * _3453.w;
                        float _3494 = 1.39999997615814208984375 / (_3491 + 1.39999997615814208984375);
                        float _3495 = _3494 * _3494;
                        float _3498 = ((1.0 - _3495) * _3484) + _3495;
                        float _3501 = _3491 * _3491;
                        float _3505 = ((isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0))) * _3490) / ((_3501 * 0.699999988079071044921875) + 1.0);
                        float _3509 = (-0.0) - _2089;
                        float _3510 = (-0.0) - _2090;
                        float _3511 = (-0.0) - _2091;
                        float _3515 = inversesqrt(dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511)));
                        float _3516 = _3515 * _3509;
                        float _3517 = _3515 * _3510;
                        float _3518 = _3515 * _3511;
                        float _3525 = exp2(log2(1.0 / ((_3501 * 3.5) + 5.0)) * 0.25);
                        float _3526 = 1.0 - _997;
                        float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                        float _3534 = _3533 * _3533;
                        float _3535 = _3534 * _3534;
                        float _3536 = _3516 + _3481;
                        float _3537 = _3517 + _3482;
                        float _3538 = _3518 + _3483;
                        float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                        float _3546 = dot(vec3(_922, _925, _928), vec3(_3516, _3517, _3518));
                        float _4946 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3549 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3550 = dot(vec3(_922, _925, _928), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                        float _4957 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3553 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                        float _3558 = _3494 * _3534;
                        float _3559 = _3558 * _3558;
                        float _3562 = ((1.0 - _3559) * _3484) + _3559;
                        float _4968 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3563 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                        float _3564 = 1.0 - _3534;
                        float _3574 = (0.5 / (((_3563 * ((_3549 * _3564) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3534) * _3549))) * _3563;
                        float _4979 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3585 = (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0)))) / ((_3557 * _3557) * ((_3501 * 2.1991131305694580078125) + 3.141590118408203125))) * _3490;
                        _3338 = (_3505 * _3453.x) + _3411;
                        _3339 = (_3505 * _3453.y) + _3412;
                        _3340 = (_3505 * _3453.z) + _3413;
                        _3335 = (_3585 * _3470.x) + _3408;
                        _3336 = (_3585 * _3470.y) + _3409;
                        _3337 = (_3585 * _3470.z) + _3410;
                        if (_3415 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3340;
                            _3414 = _3415;
                        }
                    }
                    frontier_phi_71_pred = _3340;
                    frontier_phi_71_pred_1 = _3339;
                    frontier_phi_71_pred_2 = _3338;
                    frontier_phi_71_pred_3 = _3337;
                    frontier_phi_71_pred_4 = _3336;
                    frontier_phi_71_pred_5 = _3335;
                }
                _3121 = frontier_phi_71_pred;
                _3119 = frontier_phi_71_pred_1;
                _3117 = frontier_phi_71_pred_2;
                _3115 = frontier_phi_71_pred_3;
                _3113 = frontier_phi_71_pred_4;
                _3111 = frontier_phi_71_pred_5;
                uint _3270 = _3269 + 1u;
                if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3263 = _3111;
                    _3264 = _3113;
                    _3265 = _3115;
                    _3266 = _3117;
                    _3267 = _3119;
                    _3268 = _3121;
                    _3269 = _3270;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
        }
        uvec4 _3124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3125 = _3124.z;
        uint _3127 = (_3125 >> 8u) & 15u;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        if (((4294967295u << _3127) & _3030) == 0u)
        {
            _3231 = _3110;
            _3233 = _3112;
            _3235 = _3114;
            _3237 = _3116;
            _3239 = _3118;
            _3241 = _3120;
        }
        else
        {
            float _3256 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
            float _3257 = _3256 * _2089;
            float _3258 = _3256 * _2090;
            float _3259 = _3256 * _2091;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3127 < ((_3125 >> 12u) & 15u))
            {
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3242;
                float _3391 = _3110;
                float _3392 = _3112;
                float _3393 = _3114;
                float _3394 = _3116;
                float _3395 = _3118;
                float _3396 = _3120;
                uint _3397 = _3127;
                uint _3406;
                bool _3407;
                for (;;)
                {
                    _3406 = texelFetch(g_lightClassification, int((((_3024 << 5u) + (_3010 << 9u)) + (_3397 << 2u)) >> 2u)).x;
                    _3407 = _3406 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3407)
                    {
                        frontier_phi_82_pred = _3396;
                        frontier_phi_82_pred_1 = _3395;
                        frontier_phi_82_pred_2 = _3394;
                        frontier_phi_82_pred_3 = _3393;
                        frontier_phi_82_pred_4 = _3392;
                        frontier_phi_82_pred_5 = _3391;
                    }
                    else
                    {
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3612 = _3391;
                        float _3613 = _3392;
                        float _3614 = _3393;
                        float _3615 = _3394;
                        float _3616 = _3395;
                        float _3617 = _3396;
                        uint _3618 = _3406;
                        uint _3619;
                        vec4 _3644;
                        float _3645;
                        vec4 _3660;
                        vec3 _3672;
                        vec4 _3687;
                        vec4 _3702;
                        float _3749;
                        bool _3750;
                        for (;;)
                        {
                            uint _3629 = ((_3397 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3618));
                            _3619 = (_3618 + 4294967295u) & _3618;
                            uint _3631 = _3629 * 40u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            _3645 = _3644.w;
                            uint _3647 = (_3629 * 40u) + 4u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3629 * 40u) + 8u;
                            _3672 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x));
                            uint _3674 = (_3629 * 40u) + 16u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3689 = (_3629 * 40u) + 20u;
                            _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3705 = (_3629 * 40u) + 24u;
                            vec4 _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3724 = (_3629 * 40u) + 28u;
                            vec4 _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            _3749 = fma(_2091, _3737.z, fma(_2090, _3737.y, _3737.x * _2089)) + _3737.w;
                            _3750 = !((fma(_2091, _3718.z, fma(_2090, _3718.y, _3718.x * _2089)) + _3718.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3750)
                            {
                                float _3777 = _3644.x - _2089;
                                float _3778 = _3644.y - _2090;
                                float _3779 = _3644.z - _2091;
                                float _3780 = dot(vec3(_3777, _3778, _3779), vec3(_3777, _3778, _3779));
                                float _3783 = inversesqrt(_3780);
                                float _3784 = _3783 * _3777;
                                float _3785 = _3783 * _3778;
                                float _3786 = _3783 * _3779;
                                float _3790 = 1.0 - (_3780 / (_3645 * _3645));
                                float _4990 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3791 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3795 = sqrt(_3780) * _3660.w;
                                float _3797 = 1.39999997615814208984375 / (_3795 + 1.39999997615814208984375);
                                float _3798 = _3797 * _3797;
                                float _3801 = ((1.0 - _3798) * dot(vec3(_3784, _3785, _3786), vec3(_922, _925, _928))) + _3798;
                                float _3804 = _3795 * _3795;
                                float _3808 = (fma(_2091, _3687.z, fma(_2090, _3687.y, _3687.x * _2089)) + _3687.w) / _3749;
                                float _3809 = (fma(_2091, _3702.z, fma(_2090, _3702.y, _3702.x * _2089)) + _3702.w) / _3749;
                                float _3813 = 1.0 - dot(vec2(_3808, _3809), vec2(_3808, _3809));
                                float _5006 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3815 = _3814 * (((isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0))) * _3791) / ((_3804 * 0.699999988079071044921875) + 1.0));
                                float _3827 = exp2(log2(1.0 / ((_3804 * 3.5) + 5.0)) * 0.25);
                                float _3828 = 1.0 - _997;
                                float _3835 = sqrt(1.0 - ((1.0 - (_3828 * _3828)) * (1.0 - (_3827 * _3827))));
                                float _3836 = _3835 * _3835;
                                float _3837 = _3836 * _3836;
                                float _3838 = _3784 - _3257;
                                float _3839 = _3785 - _3258;
                                float _3840 = _3786 - _3259;
                                float _3844 = inversesqrt(dot(vec3(_3838, _3839, _3840), vec3(_3838, _3839, _3840)));
                                float _3848 = dot(vec3(_922, _925, _928), vec3((-0.0) - _3257, (-0.0) - _3258, (-0.0) - _3259));
                                float _5017 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3851 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3852 = dot(vec3(_922, _925, _928), vec3(_3844 * _3838, _3844 * _3839, _3844 * _3840));
                                float _5028 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3855 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3859 = ((_3855 * _3855) * (_3837 + (-1.0))) + 1.0;
                                float _3860 = _3797 * _3836;
                                float _3861 = _3860 * _3860;
                                float _3867 = ((1.0 - _3861) * dot(vec3(_922, _925, _928), vec3(_3784, _3785, _3786))) + _3861;
                                float _5039 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                                float _3869 = 1.0 - _3836;
                                float _3879 = (0.5 / (((_3868 * ((_3851 * _3869) + _3836)) + 9.9999999392252902907785028219223e-09) + (((_3868 * _3869) + _3836) * _3851))) * _3868;
                                float _5050 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3889 = (_3814 * _3791) * (((_3837 * 3.1415927410125732421875) * (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0)))) / ((_3859 * _3859) * ((_3804 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3815 * _3660.z;
                                frontier_phi_88_pred_1 = _3815 * _3660.y;
                                frontier_phi_88_pred_2 = _3815 * _3660.x;
                                frontier_phi_88_pred_3 = _3889 * _3672.z;
                                frontier_phi_88_pred_4 = _3889 * _3672.y;
                                frontier_phi_88_pred_5 = _3889 * _3672.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3898 = frontier_phi_88_pred;
                            _3897 = frontier_phi_88_pred_1;
                            _3896 = frontier_phi_88_pred_2;
                            _3895 = frontier_phi_88_pred_3;
                            _3894 = frontier_phi_88_pred_4;
                            _3893 = frontier_phi_88_pred_5;
                            _3602 = _3896 + _3615;
                            _3603 = _3897 + _3616;
                            _3604 = _3898 + _3617;
                            _3599 = _3893 + _3612;
                            _3600 = _3894 + _3613;
                            _3601 = _3895 + _3614;
                            if (_3619 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3619;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3604;
                        frontier_phi_82_pred_1 = _3603;
                        frontier_phi_82_pred_2 = _3602;
                        frontier_phi_82_pred_3 = _3601;
                        frontier_phi_82_pred_4 = _3600;
                        frontier_phi_82_pred_5 = _3599;
                    }
                    _3242 = frontier_phi_82_pred;
                    _3240 = frontier_phi_82_pred_1;
                    _3238 = frontier_phi_82_pred_2;
                    _3236 = frontier_phi_82_pred_3;
                    _3234 = frontier_phi_82_pred_4;
                    _3232 = frontier_phi_82_pred_5;
                    uint _3398 = _3397 + 1u;
                    if (_3398 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3391 = _3232;
                        _3392 = _3234;
                        _3393 = _3236;
                        _3394 = _3238;
                        _3395 = _3240;
                        _3396 = _3242;
                        _3397 = _3398;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3238;
                frontier_phi_63_64_ladder_1 = _3242;
                frontier_phi_63_64_ladder_2 = _3240;
                frontier_phi_63_64_ladder_3 = _3236;
                frontier_phi_63_64_ladder_4 = _3234;
                frontier_phi_63_64_ladder_5 = _3232;
            }
            else
            {
                frontier_phi_63_64_ladder = _3116;
                frontier_phi_63_64_ladder_1 = _3120;
                frontier_phi_63_64_ladder_2 = _3118;
                frontier_phi_63_64_ladder_3 = _3114;
                frontier_phi_63_64_ladder_4 = _3112;
                frontier_phi_63_64_ladder_5 = _3110;
            }
            _3231 = frontier_phi_63_64_ladder_5;
            _3233 = frontier_phi_63_64_ladder_4;
            _3235 = frontier_phi_63_64_ladder_3;
            _3237 = frontier_phi_63_64_ladder;
            _3239 = frontier_phi_63_64_ladder_2;
            _3241 = frontier_phi_63_64_ladder_1;
        }
        float _3246 = isnan(1.0) ? _981 : (isnan(_981) ? 1.0 : min(_981, 1.0));
        _3043 = (_3246 * _3237) + _2555;
        _3045 = (_3246 * _3239) + _2557;
        _3047 = (_3246 * _3241) + _2559;
        _3049 = ((_3231 * _965) * _3246) + _2893;
        _3051 = ((_3233 * _967) * _3246) + _2895;
        _3053 = ((_3235 * _968) * _3246) + _2897;
    }
    else
    {
        _3043 = _2555;
        _3045 = _2557;
        _3047 = _2559;
        _3049 = _2893;
        _3051 = _2895;
        _3053 = _2897;
    }
    float _5066 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _5077 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _5088 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _3070 = ((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3043 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _981))) + ((_3049 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1820)) * cbPerFrame._m0[3u].x);
    float _3071 = ((isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3045 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _981))) + ((_3051 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1820)) * cbPerFrame._m0[3u].x);
    float _3072 = ((isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0))) * (_3047 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _981))) + ((_3053 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1820)) * cbPerFrame._m0[3u].x);
    uint _3073 = _280 + 6u;
    float _3081 = _903 / cbSceneParam._m0[86u].x;
    float _3082 = _904 / cbSceneParam._m0[86u].y;
    vec4 _3096 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3081, _3082, (log2((isnan(cbSceneParam._m0[77u].w) ? _825 : (isnan(_825) ? cbSceneParam._m0[77u].w : min(_825, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3098 = _3096.x;
    float _3099 = _3096.y;
    float _3100 = _3096.z;
    float _3101 = _3096.w;
    float _3173;
    float _3175;
    float _3177;
    float _3179;
    if (_825 > cbSceneParam._m0[78u].w)
    {
        float _3135 = isnan(_825) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _825 : min(cbSceneParam._m0[80u].w, _825));
        float _3136 = _3135 / _825;
        float _3147 = _3136 * _876;
        float _3148 = _877 * _3136;
        float _3149 = (-0.0) - _3148;
        float _3151 = _3136 * _878;
        float _3153 = (cbSceneParam._m0[77u].w * _3149) / _3135;
        float _3154 = _3153 + cbSceneParam._m0[79u].w;
        float _3155 = cbSceneParam._m0[79u].w - _3148;
        float _3161 = sqrt(((_3147 * _3147) + (_3148 * _3148)) + (_3151 * _3151));
        float _3164 = (1.0 - (cbSceneParam._m0[77u].w / _3135)) * _3161;
        float _3169 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3171 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3348;
        if (abs((_3149 - _3153) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3348 = ((((_3154 > 0.0) ? exp2(_3169 * _3154) : (2.0 - exp2(_3171 * _3154))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3164;
        }
        else
        {
            float _3292 = 1.0 / cbSceneParam._m0[80u].x;
            float _3293 = isnan(_3155) ? _3154 : (isnan(_3154) ? _3155 : max(_3154, _3155));
            float _3294 = isnan(_3155) ? _3154 : (isnan(_3154) ? _3155 : min(_3154, _3155));
            float _3303 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : min(_3293, 0.0));
            float _3304 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : min(_3294, 0.0));
            _3348 = ((abs(_3161 / _3149) * cbSceneParam._m0[80u].y) * ((((_3303 - _3304) * 2.0) - ((exp2(_3169 * (isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0)))) - exp2(_3169 * (isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))))) * _3292)) - ((exp2(_3171 * _3303) - exp2(_3171 * _3304)) * _3292))) + (_3164 * cbSceneParam._m0[80u].z);
        }
        vec4 _3350 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3081, _3082, 1.0), 0.0);
        float _3359 = exp2((_3348 * (-1.44269502162933349609375)) * (1.0 - _3350.w));
        float _3360 = log2(_3359);
        float _3376 = log2(_3101);
        _3173 = (exp2(_3376 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3360 * cbSceneParam._m0[78u].x)) * _3350.x) / cbSceneParam._m0[78u].x)) + _3098;
        _3175 = (exp2(_3376 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3360 * cbSceneParam._m0[78u].y)) * _3350.y) / cbSceneParam._m0[78u].y)) + _3099;
        _3177 = (exp2(_3376 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3360 * cbSceneParam._m0[78u].z)) * _3350.z) / cbSceneParam._m0[78u].z)) + _3100;
        _3179 = _3359 * _3101;
    }
    else
    {
        _3173 = _3098;
        _3175 = _3099;
        _3177 = _3100;
        _3179 = _3101;
    }
    bool _3386;
    vec4 _3189;
    vec4 _3211;
    float _3213;
    float _3217;
    float _3218;
    float _3219;
    float _3220;
    bool _3230;
    for (;;)
    {
        _3189 = cbMatDynParam._m0[0u];
        float _3191 = roundEven(_3189.y);
        bool _3192 = _3191 == 3.0;
        float _3193 = log2(_3179);
        float _3200 = exp2(_3193 * cbSceneParam._m0[78u].x) * _3070;
        float _3201 = exp2(_3193 * cbSceneParam._m0[78u].y) * _3071;
        float _3202 = exp2(_3193 * cbSceneParam._m0[78u].z) * _3072;
        float _3209 = _892 + (-0.5);
        _3211 = cbMtdParam._m0[1u];
        _3213 = _3211.y * _3209;
        float _3216 = (_3191 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3217 = _3216 * (_3192 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3173)));
        _3218 = _3216 * (_3192 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3175)));
        _3219 = _3216 * (_3192 ? _3202 : (_3202 + (cbSceneParam._m0[72u].w * _3177)));
        _3220 = _3209 * 0.999000012874603271484375;
        _3230 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3230)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3220) < 0.5)
            {
                _3386 = true;
                break;
            }
        }
        uint _3327 = _941 + uint(_3189.w);
        if ((cbInstanceData._m0[_3327].w < 1.0) && ((cbInstanceData._m0[_3327].w + _3220) < 0.5))
        {
            _3386 = true;
            break;
        }
        if ((_3213 + 1.0) < _3211.x)
        {
            _3386 = true;
            break;
        }
        _3386 = false;
        break;
    }
    float _3590;
    if (_3386)
    {
        discard_state = true;
        _3590 = 0.0;
    }
    else
    {
        _3590 = cbInstanceData._m0[_3073].w;
    }
    SV_Target.x = _3217;
    SV_Target.y = _3218;
    SV_Target.z = _3219;
    SV_Target.w = _3590;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3073].w;
    discard_exit();
}


