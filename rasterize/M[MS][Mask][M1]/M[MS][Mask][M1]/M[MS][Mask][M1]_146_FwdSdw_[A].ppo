#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1653;
float _4312;
float _4313;
float _4314;
float _4315;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _247 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _248 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _249 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _255 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _256 = _255 * _247;
    float _257 = _255 * _248;
    float _258 = _255 * _249;
    float _262 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = _262 * NORMAL.x;
    float _264 = _262 * NORMAL.y;
    float _265 = _262 * NORMAL.z;
    float _269 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = _269 * TANGENT.x;
    float _271 = _269 * TANGENT.y;
    float _272 = _269 * TANGENT.z;
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _315.x * cbMtdParam._m0[11u].x;
    float _322 = _315.y * cbMtdParam._m0[11u].y;
    float _323 = _315.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _361.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[23u].w) + _414) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4324 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _439 = (_432 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _440 = (_432 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _441 = (_432 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _294) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _295) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _361.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[23u].w) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4335 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _512 = (_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439;
    float _513 = (_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440;
    float _514 = (_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _294) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _295) + cbTextureTilingScale._m0[24u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _552 = _550.x;
    float _562 = dot(vec4(_552, _550.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _574 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _361.z) * 2.0) - ((((_552 - _562) * cbMtdParam._m0[23u].w) + _562) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4346 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _582 = (_575 * ((_533.x * cbMtdParam._m0[14u].x) - _512)) + _512;
    float _583 = (_575 * ((_533.y * cbMtdParam._m0[14u].y) - _513)) + _513;
    float _584 = (_575 * ((_533.z * cbMtdParam._m0[14u].z) - _514)) + _514;
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _294) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _295) + cbTextureTilingScale._m0[14u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _641 = _639.x;
    float _642 = _639.y;
    float _643 = _639.z;
    float _650 = ((_622.x - _641) * _432) + _641;
    float _651 = ((_622.y - _642) * _432) + _642;
    float _652 = ((_622.z - _643) * _432) + _643;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _294) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _295) + cbTextureTilingScale._m0[2u].w));
    float _675 = ((_664.x - _650) * _505) + _650;
    float _676 = ((_664.y - _651) * _505) + _651;
    float _677 = ((_664.z - _652) * _505) + _652;
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _294) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _295) + cbTextureTilingScale._m0[23u].w));
    float _702 = ((_689.z - _677) * _575) + _677;
    float _705 = ((((_689.x - _675) * _575) + _675) * 2.0) + (-1.0);
    float _707 = ((((_689.y - _676) * _575) + _676) * 2.0) + (-1.0);
    float _708 = dot(vec2(_705, _707), vec2(_705, _707));
    float _4357 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _713 = sqrt(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _739 = (((_727.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _705;
    float _740 = (((_727.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _707;
    float _743 = fma(_713, _263, fma(_740, _270, _739 * _256));
    float _746 = fma(_713, _264, fma(_740, _271, _739 * _257));
    float _749 = fma(_713, _265, fma(_740, _272, _739 * _258));
    float _753 = inversesqrt(dot(vec3(_743, _746, _749), vec3(_743, _746, _749)));
    vec4 _780 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _782 = _780.x;
    float _783 = 1.0 - _782;
    float _791 = (cbMtdParam._m0[19u].x + dot(vec4(_753 * _743, _753 * _746, _753 * _749, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_782 - _783) * cbMtdParam._m0[24u].z) + _783) * cbMtdParam._m0[21u].z);
    float _4368 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _792 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _794 = (-0.0) - cbMtdParam._m0[24u].x;
    float _796 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
    float _804 = _792 - ((_792 * TEXCOORD_8.x) * _797);
    float _805 = _792 - ((_792 * TEXCOORD_8.y) * _797);
    float _806 = _792 - ((_792 * TEXCOORD_8.z) * _797);
    float _813 = (_804 * ((_602.x * cbMtdParam._m0[18u].x) - _582)) + _582;
    float _814 = (_805 * ((_602.y * cbMtdParam._m0[18u].y) - _583)) + _583;
    float _815 = (_806 * ((_602.z * cbMtdParam._m0[18u].z) - _584)) + _584;
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _829 = _827.x;
    float _830 = 1.0 - _829;
    float _856 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_829 - _830) * cbMtdParam._m0[24u].w) + _830) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4389 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _857 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _865 = ((((cbMtdParam._m0[10u].x - _813) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _857) + _813;
    float _866 = ((((cbMtdParam._m0[10u].y - _814) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _857) + _814;
    float _867 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _815)) * _857) + _815;
    vec4 _893 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _895 = _893.x;
    float _913 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _895) * _432) + _895;
    float _930 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _294) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _295) + cbTextureTilingScale._m0[21u].w)).x - _913) * _505) + _913;
    float _947 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _294) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _295) + cbTextureTilingScale._m0[10u].w)).x - _930) * _575) + _930;
    float _951 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _947) * cbMtdParam._m0[19u].z) + _947;
    float _953 = _951 - (_951 * _804);
    float _955 = _953 - (_953 * _857);
    float _959 = (cbMtdParam._m0[19u].w * (_727.z - _702)) + _702;
    vec4 _975 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _982 = (_975.x * 2.0) + (-1.0);
    float _983 = (_975.y * 2.0) + (-1.0);
    float _984 = dot(vec2(_982, _983), vec2(_982, _983));
    float _4400 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _992 = ((_975.z - _959) * _804) + _959;
    float _995 = ((cbMtdParam._m0[23u].x - _992) * _857) + _992;
    vec4 _1018 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1024 = (_1018.x * 2.0) + (-1.0);
    float _1025 = (_1018.y * 2.0) + (-1.0);
    float _1026 = dot(vec2(_1024, _1025), vec2(_1024, _1025));
    float _4411 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1041 = ((sqrt(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) - _713) * _806) + _713;
    float _1044 = (((_982 - _739) * _804) + _739) + (cbMtdParam._m0[21u].x * _739);
    float _1045 = (((_983 - _740) * _805) + _740) + (cbMtdParam._m0[21u].x * _740);
    float _1056 = (((_1024 - _1044) + (_1044 * cbMtdParam._m0[22u].z)) * _857) + _1044;
    float _1057 = (((_1025 - _1045) + (_1045 * cbMtdParam._m0[22u].z)) * _857) + _1045;
    float _1058 = (_857 * (sqrt(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) - _1041)) + _1041;
    float _1060 = cbMtdParam._m0[22u].x + _727.w;
    float _1063 = fma(_1058, _263, fma(_1057, _270, _1056 * _256));
    float _1066 = fma(_1058, _264, fma(_1057, _271, _1056 * _257));
    float _1069 = fma(_1058, _265, fma(_1057, _272, _1056 * _258));
    float _1073 = inversesqrt(dot(vec3(_1063, _1066, _1069), vec3(_1063, _1066, _1069)));
    float _1074 = _1073 * _1063;
    float _1075 = _1073 * _1066;
    float _1076 = _1073 * _1069;
    float _4422 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _1077 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _4433 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _4444 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4455 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4466 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4477 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _1082 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _1096 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1146 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1136);
    float _1147 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1136);
    float _1148 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1136);
    float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
    float _1153 = _1146 * _1152;
    float _1154 = _1147 * _1152;
    float _1155 = _1148 * _1152;
    vec4 _1160 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1162 = _1160.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1334 = sqrt(((_1146 * _1146) + (_1147 * _1147)) + (_1148 * _1148));
        float _1340 = (cbMatDynParam._m0[5u].x * _1334) + cbMatDynParam._m0[5u].y;
        float _4488 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1345 = (cbMatDynParam._m0[5u].z * _1334) + cbMatDynParam._m0[5u].w;
        float _4499 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) - _1341)) + _1341) < ((_1162 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1173 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1174 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1192 = fma(_1076, cbSceneParam._m0[5u].z, fma(_1075, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1074));
    float _1195 = fma(_1076, cbSceneParam._m0[6u].z, fma(_1075, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1074));
    float _1198 = fma(_1076, cbSceneParam._m0[7u].z, fma(_1075, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1074));
    uint _1211 = _275 + 9u;
    uint _1212 = _1211 + uint(cbMatDynParam._m0[0u].w);
    float _1218 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * cbInstanceData._m0[_1212].x;
    float _1219 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * cbInstanceData._m0[_1212].y;
    float _1220 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * cbInstanceData._m0[_1212].z;
    float _4510 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1221 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _4521 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _1222 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _4532 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1223 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _1224 = 1.0 - _1082;
    float _1225 = _1221 * _1224;
    float _1226 = _1222 * _1224;
    float _1227 = _1223 * _1224;
    float _1232 = (_1221 + (-0.039999999105930328369140625)) * _1082;
    float _1233 = (_1222 + (-0.039999999105930328369140625)) * _1082;
    float _1234 = (_1223 + (-0.039999999105930328369140625)) * _1082;
    float _1235 = _1232 + 0.039999999105930328369140625;
    float _1237 = _1233 + 0.039999999105930328369140625;
    float _1238 = _1234 + 0.039999999105930328369140625;
    vec4 _1247 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1173, cbSceneParam._m0[86u].y * _1174));
    float _1251 = ((isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * TEXCOORD_5.w) * _1247.x;
    float _1252 = dot(vec3(_1074, _1075, _1076), vec3(_1153, _1154, _1155));
    float _1255 = _1252 * 2.0;
    float _1259 = (_1255 * _1074) - _1153;
    float _1260 = (_1255 * _1075) - _1154;
    float _1261 = (_1255 * _1076) - _1155;
    float _1265 = abs(dot(vec3(_1153, _1154, _1155), vec3(_1074, _1075, _1076)));
    float _4543 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _1267 = sqrt(_1077);
    float _1280 = exp2((_1267 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1267 * 3.0));
    float _1286 = (1.0 - _1280) * ((_1267 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1287 = _1280 * _1267;
    float _1315 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1319 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1323 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1652;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1377 = fma(_1323, cbModelParam._m0[26u].z, fma(_1319, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1315));
        float _1381 = fma(_1323, cbModelParam._m0[27u].z, fma(_1319, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1315));
        float _1385 = fma(_1323, cbModelParam._m0[28u].z, fma(_1319, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1315));
        float _1410 = _1315 + _1074;
        float _1411 = _1319 + _1075;
        float _1412 = _1323 + _1076;
        float _1422 = fma(_1412, cbModelParam._m0[26u].z, fma(_1411, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1410)) - _1377;
        float _1423 = fma(_1412, cbModelParam._m0[27u].z, fma(_1411, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1410)) - _1381;
        float _1424 = fma(_1412, cbModelParam._m0[28u].z, fma(_1411, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1410)) - _1385;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1377 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1381 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[34u].z) + ((((((_1385 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1480 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1446.x + (-0.5));
        float _1482 = _1480 * (_1446.y + (-0.5));
        float _1483 = _1480 * (_1446.z + (-0.5));
        float _1490 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1453.x + (-0.5));
        float _1492 = _1490 * (_1453.y + (-0.5));
        float _1493 = _1490 * (_1453.z + (-0.5));
        float _1500 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1460.x + (-0.5));
        float _1502 = _1500 * (_1460.y + (-0.5));
        float _1503 = _1500 * (_1460.z + (-0.5));
        float _1510 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1467.x + (-0.5));
        float _1512 = _1510 * (_1467.y + (-0.5));
        float _1513 = _1510 * (_1467.z + (-0.5));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = _1481 * 0.5;
        float _1518 = _1491 * 0.5;
        float _1519 = _1501 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1534 = (dot(vec3(_1074, _1075, _1076), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4569 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1544 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4580 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4591 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_1546 + 1.0))) + _1551) * _1514;
        float _1561 = _1482 * 0.5;
        float _1562 = _1492 * 0.5;
        float _1563 = _1502 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_1074, _1075, _1076), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4602 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4613 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4624 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_1588 + 1.0))) + _1593) * _1515;
        float _1603 = _1483 * 0.5;
        float _1604 = _1493 * 0.5;
        float _1605 = _1503 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_1074, _1075, _1076), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4635 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4646 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4657 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_1630 + 1.0))) + _1635) * _1516;
        _1652 = _1483;
        _1654 = _1482;
        _1655 = _1481;
        _1656 = _1493;
        _1657 = _1492;
        _1658 = _1491;
        _1659 = _1503;
        _1660 = _1502;
        _1661 = _1501;
        _1662 = _1516;
        _1663 = _1515;
        _1664 = _1514;
        _1665 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1666 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1667 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
    }
    else
    {
        _1652 = _1653;
        _1654 = _1653;
        _1655 = _1653;
        _1656 = _1653;
        _1657 = _1653;
        _1658 = _1653;
        _1659 = _1653;
        _1660 = _1653;
        _1661 = _1653;
        _1662 = _1653;
        _1663 = _1653;
        _1664 = _1653;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1693 = fma(_1323, cbModelParam._m0[30u].z, fma(_1319, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315));
        float _1697 = fma(_1323, cbModelParam._m0[31u].z, fma(_1319, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315));
        float _1701 = fma(_1323, cbModelParam._m0[32u].z, fma(_1319, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315));
        float _1724 = _1315 + _1074;
        float _1725 = _1319 + _1075;
        float _1726 = _1323 + _1076;
        float _1736 = fma(_1726, cbModelParam._m0[30u].z, fma(_1725, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1724)) - _1693;
        float _1737 = fma(_1726, cbModelParam._m0[31u].z, fma(_1725, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1724)) - _1697;
        float _1738 = fma(_1726, cbModelParam._m0[32u].z, fma(_1725, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1724)) - _1701;
        float _1742 = inversesqrt(dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738)));
        float _1755 = ((_1742 * _1736) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1693 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1756 = ((_1742 * _1737) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1697 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1757 = ((_1742 * _1738) / cbModelParam._m0[35u].z) + ((((((_1701 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1759 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        vec4 _1766 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        vec4 _1773 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        vec4 _1780 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        float _1792 = exp2((_1759.w + (-0.5)) * 20.0) * 2.0;
        float _1793 = _1792 * (_1759.x + (-0.5));
        float _1794 = _1792 * (_1759.y + (-0.5));
        float _1795 = _1792 * (_1759.z + (-0.5));
        float _1802 = exp2((_1766.w + (-0.5)) * 20.0) * 2.0;
        float _1803 = _1802 * (_1766.x + (-0.5));
        float _1804 = _1802 * (_1766.y + (-0.5));
        float _1805 = _1802 * (_1766.z + (-0.5));
        float _1812 = exp2((_1773.w + (-0.5)) * 20.0) * 2.0;
        float _1813 = _1812 * (_1773.x + (-0.5));
        float _1814 = _1812 * (_1773.y + (-0.5));
        float _1815 = _1812 * (_1773.z + (-0.5));
        float _1822 = exp2((_1780.w + (-0.5)) * 20.0) * 2.0;
        float _1823 = _1822 * (_1780.x + (-0.5));
        float _1824 = _1822 * (_1780.y + (-0.5));
        float _1825 = _1822 * (_1780.z + (-0.5));
        float _1826 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1827 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1828 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1829 = _1793 * 0.5;
        float _1830 = _1803 * 0.5;
        float _1831 = _1813 * 0.5;
        float _1832 = dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831));
        float _1837 = (_1832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1832);
        float _1845 = (dot(vec3(_1074, _1075, _1076), vec3(_1837 * _1829, _1837 * _1830, _1837 * _1831)) + 1.0) * 0.5;
        float _4698 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1854 = sqrt(((_1830 * _1830) + (_1829 * _1829)) + (_1831 * _1831)) / (_1826 + 9.9999997473787516355514526367188e-06);
        float _4709 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _1856 = _1855 * 2.0;
        float _1860 = (1.0 - _1855) / (_1855 + 1.0);
        float _4720 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _1870 = ((((1.0 - _1861) * (_1856 + 2.0)) * exp2(log2(isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_1856 + 1.0))) + _1861) * _1826;
        float _1871 = _1794 * 0.5;
        float _1872 = _1804 * 0.5;
        float _1873 = _1814 * 0.5;
        float _1874 = dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873));
        float _1879 = (_1874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1874);
        float _1887 = (dot(vec3(_1074, _1075, _1076), vec3(_1879 * _1871, _1879 * _1872, _1879 * _1873)) + 1.0) * 0.5;
        float _4731 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1896 = sqrt(((_1872 * _1872) + (_1871 * _1871)) + (_1873 * _1873)) / (_1827 + 9.9999997473787516355514526367188e-06);
        float _4742 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _1898 = _1897 * 2.0;
        float _1902 = (1.0 - _1897) / (_1897 + 1.0);
        float _4753 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _1912 = ((((1.0 - _1903) * (_1898 + 2.0)) * exp2(log2(isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_1898 + 1.0))) + _1903) * _1827;
        float _1913 = _1795 * 0.5;
        float _1914 = _1805 * 0.5;
        float _1915 = _1815 * 0.5;
        float _1916 = dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915));
        float _1921 = (_1916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1916);
        float _1929 = (dot(vec3(_1074, _1075, _1076), vec3(_1921 * _1913, _1921 * _1914, _1921 * _1915)) + 1.0) * 0.5;
        float _4764 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1938 = sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915)) / (_1828 + 9.9999997473787516355514526367188e-06);
        float _4775 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1939 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _1940 = _1939 * 2.0;
        float _1944 = (1.0 - _1939) / (_1939 + 1.0);
        float _4786 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _1954 = ((((1.0 - _1945) * (_1940 + 2.0)) * exp2(log2(isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_1940 + 1.0))) + _1945) * _1828;
        _1962 = _1795;
        _1963 = _1794;
        _1964 = _1793;
        _1965 = _1805;
        _1966 = _1804;
        _1967 = _1803;
        _1968 = _1815;
        _1969 = _1814;
        _1970 = _1813;
        _1971 = _1828;
        _1972 = _1827;
        _1973 = _1826;
        _1974 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)));
        _1975 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)));
        _1976 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)));
    }
    else
    {
        _1962 = _1653;
        _1963 = _1653;
        _1964 = _1653;
        _1965 = _1653;
        _1966 = _1653;
        _1967 = _1653;
        _1968 = _1653;
        _1969 = _1653;
        _1970 = _1653;
        _1971 = _1653;
        _1972 = _1653;
        _1973 = _1653;
        _1974 = 0.0;
        _1975 = 0.0;
        _1976 = 0.0;
    }
    float _1986 = (cbModelParam._m0[1u].x * (_1974 - _1665)) + _1665;
    float _1987 = (cbModelParam._m0[1u].x * (_1975 - _1666)) + _1666;
    float _1988 = (cbModelParam._m0[1u].x * (_1976 - _1667)) + _1667;
    float _2009 = fma(_1988, cbSceneParam._m0[89u].z, fma(_1987, cbSceneParam._m0[89u].y, _1986 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_1988, cbSceneParam._m0[90u].z, fma(_1987, cbSceneParam._m0[90u].y, _1986 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_1988, cbSceneParam._m0[91u].z, fma(_1987, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1986));
    float _2030 = _1259 * 0.5;
    float _2031 = _1260 * 0.5;
    float _2032 = _1261 * 0.5;
    float _2033 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1964, _1967, _1970, _1973));
    float _2036 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1963, _1966, _1969, _1972));
    float _2039 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1962, _1965, _1968, _1971));
    float _2073;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2046 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1652, _1656, _1659, _1662));
        float _2050 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1654, _1657, _1660, _1663));
        float _2054 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1655, _1658, _1661, _1664));
        float _2061 = dot(vec4(cbModelParam._m0[39u]), vec4(_2030, _2031, _2032, 1.0));
        _2073 = dot(vec3(isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0)), isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0)), isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2061) ? 0.0 : (isnan(0.0) ? _2061 : max(0.0, _2061))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2073 = 1.0;
    }
    float _2084;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2075 = dot(vec4(cbModelParam._m0[40u]), vec4(_2030, _2031, _2032, 1.0));
        _2084 = dot(vec3(isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0)), isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0)), isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2075) ? 0.0 : (isnan(0.0) ? _2075 : max(0.0, _2075))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2084 = 1.0;
    }
    float _2088 = (_2084 * cbModelParam._m0[1u].x) + (_2073 * (1.0 - cbModelParam._m0[1u].x));
    float _2098 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1077);
    float _2099 = isnan(_2098) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2098 : min(cbModelParam._m0[25u].z, _2098));
    float _2179;
    float _2181;
    float _2183;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2146 = fma(_1323, cbModelParam._m0[13u].z, fma(_1319, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1315)) + cbModelParam._m0[13u].w;
        float _2150 = fma(_1323, cbModelParam._m0[14u].z, fma(_1319, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1315)) + cbModelParam._m0[14u].w;
        float _2154 = fma(_1323, cbModelParam._m0[15u].z, fma(_1319, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1315)) + cbModelParam._m0[15u].w;
        float _2157 = fma(_1261, cbModelParam._m0[13u].z, fma(_1260, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1259));
        float _2160 = fma(_1261, cbModelParam._m0[14u].z, fma(_1260, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1259));
        float _2163 = fma(_1261, cbModelParam._m0[15u].z, fma(_1260, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1259));
        float _2191;
        if (_2157 > 0.0)
        {
            _2191 = abs((1.0 - _2146) / _2157);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2146 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2191 = frontier_phi_17_15_ladder;
        }
        float _2362;
        if (_2160 > 0.0)
        {
            _2362 = abs((1.0 - _2150) / _2160);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2150 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2362 = frontier_phi_26_22_ladder;
        }
        float _2657;
        if (_2163 > 0.0)
        {
            _2657 = abs((1.0 - _2154) / _2163);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2154 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2657 = frontier_phi_38_33_ladder;
        }
        float _2659 = isnan(_2362) ? _2191 : (isnan(_2191) ? _2362 : min(_2191, _2362));
        float _2660 = isnan(_2657) ? _2659 : (isnan(_2659) ? _2657 : min(_2659, _2657));
        float _2664 = (_2660 * _2157) + _2146;
        float _2665 = (_2660 * _2160) + _2150;
        float _2666 = (_2660 * _2163) + _2154;
        float _2667 = _2660 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2667;
        float _2671 = _2667 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 > _2671) || ((_2665 < _2669) || ((_2664 < _2669) || (_2664 > _2671))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2666, cbModelParam._m0[9u].z, fma(_2665, cbModelParam._m0[9u].y, _2664 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2666, cbModelParam._m0[10u].z, fma(_2665, cbModelParam._m0[10u].y, _2664 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2666, cbModelParam._m0[11u].z, fma(_2665, cbModelParam._m0[11u].y, _2664 * cbModelParam._m0[11u].x))), _2099);
            frontier_phi_16_38_ladder = _2811.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2811.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2811.x * cbModelParam._m0[1u].y;
        }
        _2179 = frontier_phi_16_38_ladder_2;
        _2181 = frontier_phi_16_38_ladder_1;
        _2183 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1259, _1260, _1261), _2099);
        _2179 = _2167.x * cbModelParam._m0[1u].y;
        _2181 = _2167.y * cbModelParam._m0[1u].y;
        _2183 = _2167.z * cbModelParam._m0[1u].y;
    }
    float _2187 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1077);
    float _2188 = isnan(_2187) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2187 : min(cbModelParam._m0[25u].w, _2187));
    float _2277;
    float _2279;
    float _2281;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2241 = fma(_1323, cbModelParam._m0[21u].z, fma(_1319, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1315)) + cbModelParam._m0[21u].w;
        float _2245 = fma(_1323, cbModelParam._m0[22u].z, fma(_1319, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1315)) + cbModelParam._m0[22u].w;
        float _2249 = fma(_1323, cbModelParam._m0[23u].z, fma(_1319, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1315)) + cbModelParam._m0[23u].w;
        float _2252 = fma(_1261, cbModelParam._m0[21u].z, fma(_1260, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1259));
        float _2255 = fma(_1261, cbModelParam._m0[22u].z, fma(_1260, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1259));
        float _2258 = fma(_1261, cbModelParam._m0[23u].z, fma(_1260, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1259));
        float _2367;
        if (_2252 > 0.0)
        {
            _2367 = abs((1.0 - _2241) / _2252);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2252 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2241 + 1.0) / _2252);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2367 = frontier_phi_28_24_ladder;
        }
        float _2684;
        if (_2255 > 0.0)
        {
            _2684 = abs((1.0 - _2245) / _2255);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2255 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2245 + 1.0) / _2255);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2684 = frontier_phi_40_35_ladder;
        }
        float _3022;
        if (_2258 > 0.0)
        {
            _3022 = abs((1.0 - _2249) / _2258);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2258 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2249 + 1.0) / _2258);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3022 = frontier_phi_50_47_ladder;
        }
        float _3024 = isnan(_2684) ? _2367 : (isnan(_2367) ? _2684 : min(_2367, _2684));
        float _3025 = isnan(_3022) ? _3024 : (isnan(_3024) ? _3022 : min(_3024, _3022));
        float _3029 = (_3025 * _2252) + _2241;
        float _3030 = (_3025 * _2255) + _2245;
        float _3031 = (_3025 * _2258) + _2249;
        float _3032 = _3025 * 9.9999997473787516355514526367188e-05;
        float _3033 = (-1.0) - _3032;
        float _3035 = _3032 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3031 > _3035) || ((_3031 < _3033) || ((_3030 > _3035) || ((_3030 < _3033) || ((_3029 < _3033) || (_3029 > _3035))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3153 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3031, cbModelParam._m0[17u].z, fma(_3030, cbModelParam._m0[17u].y, _3029 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3031, cbModelParam._m0[18u].z, fma(_3030, cbModelParam._m0[18u].y, _3029 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3031, cbModelParam._m0[19u].z, fma(_3030, cbModelParam._m0[19u].y, _3029 * cbModelParam._m0[19u].x))), _2188);
            frontier_phi_25_50_ladder = _3153.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3153.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3153.x * cbModelParam._m0[1u].z;
        }
        _2277 = frontier_phi_25_50_ladder_2;
        _2279 = frontier_phi_25_50_ladder_1;
        _2281 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2261 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1259, _1260, _1261), _2188);
        _2277 = _2261.x * cbModelParam._m0[1u].z;
        _2279 = _2261.y * cbModelParam._m0[1u].z;
        _2281 = _2261.z * cbModelParam._m0[1u].z;
    }
    float _2294 = (((_1286 * _1235) + _1287) * _1251) * ((cbModelParam._m0[1u].w * (_2277 - _2179)) + _2179);
    float _2296 = (((_1286 * _1237) + _1287) * _1251) * ((cbModelParam._m0[1u].w * (_2279 - _2181)) + _2181);
    float _2298 = (((_1286 * _1238) + _1287) * _1251) * ((cbModelParam._m0[1u].w * (_2281 - _2183)) + _2183);
    float _2301 = fma(_2298, cbSceneParam._m0[89u].z, fma(_2296, cbSceneParam._m0[89u].y, _2294 * cbSceneParam._m0[89u].x));
    float _2304 = fma(_2298, cbSceneParam._m0[90u].z, fma(_2296, cbSceneParam._m0[90u].y, _2294 * cbSceneParam._m0[90u].x));
    float _2307 = fma(_2298, cbSceneParam._m0[91u].z, fma(_2296, cbSceneParam._m0[91u].y, _2294 * cbSceneParam._m0[91u].x));
    float _2341 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2345 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2349 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2353 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2354 = _2341 / _2353;
    float _2355 = _2345 / _2353;
    float _2356 = _2349 / _2353;
    float _2503;
    float _2504;
    float _2505;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2383 = ((uint(_2356 > cbSceneParam._m0[59u].y) + uint(_2356 > cbSceneParam._m0[59u].x)) + uint(_2356 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2384 = _2383 + 43u;
        uint _2392 = _2383 + 44u;
        uint _2400 = _2383 + 45u;
        uint _2408 = _2383 + 46u;
        float _2419 = fma(_2353, cbSceneParam._m0[_2384].w, fma(_2349, cbSceneParam._m0[_2384].z, fma(_2345, cbSceneParam._m0[_2384].y, _2341 * cbSceneParam._m0[_2384].x)));
        float _2423 = fma(_2353, cbSceneParam._m0[_2392].w, fma(_2349, cbSceneParam._m0[_2392].z, fma(_2345, cbSceneParam._m0[_2392].y, _2341 * cbSceneParam._m0[_2392].x)));
        float _2431 = fma(_2353, cbSceneParam._m0[_2408].w, fma(_2349, cbSceneParam._m0[_2408].z, fma(_2345, cbSceneParam._m0[_2408].y, _2341 * cbSceneParam._m0[_2408].x)));
        float _2436 = cbSceneParam._m0[33u].z * _2431;
        float _2438 = cbSceneParam._m0[33u].w * _2431;
        float _2441 = fma(_2353, cbSceneParam._m0[_2400].w, fma(_2349, cbSceneParam._m0[_2400].z, fma(_2345, cbSceneParam._m0[_2400].y, _2341 * cbSceneParam._m0[_2400].x))) / _2431;
        float _2489 = (cbSceneParam._m0[33u].x - sqrt(((_2355 * _2355) + (_2354 * _2354)) + (_2356 * _2356))) * cbSceneParam._m0[33u].y;
        float _4912 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2496 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2436 + _2419) / _2431, (_2438 + _2423) / _2431), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2438 + _2419) / _2431, (_2423 - _2436) / _2431), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2419 - _2436) / _2431, (_2423 - _2438) / _2431), _2441), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2419 - _2438) / _2431, (_2436 + _2423) / _2431), _2441), 0.0)).x), vec4(0.25)));
        _2503 = 1.0 - (_2496 * cbSceneParam._m0[34u].x);
        _2504 = 1.0 - (_2496 * cbSceneParam._m0[34u].y);
        _2505 = 1.0 - (_2496 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2503 = 1.0;
        _2504 = 1.0;
        _2505 = 1.0;
    }
    float _2569;
    float _2571;
    float _2573;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2557 = fma(_2353, cbSceneParam._m0[63u].w, fma(_2349, cbSceneParam._m0[63u].z, fma(_2345, cbSceneParam._m0[63u].y, _2341 * cbSceneParam._m0[63u].x)));
        float _2558 = fma(_2353, cbSceneParam._m0[60u].w, fma(_2349, cbSceneParam._m0[60u].z, fma(_2345, cbSceneParam._m0[60u].y, _2341 * cbSceneParam._m0[60u].x))) / _2557;
        float _2559 = fma(_2353, cbSceneParam._m0[61u].w, fma(_2349, cbSceneParam._m0[61u].z, fma(_2345, cbSceneParam._m0[61u].y, _2341 * cbSceneParam._m0[61u].x))) / _2557;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2558 >= cbSceneParam._m0[64u].x) && (_2559 >= cbSceneParam._m0[64u].y)) && (_2558 <= cbSceneParam._m0[64u].z)) && (_2559 <= cbSceneParam._m0[64u].w))
        {
            float _2697 = fma(_2353, cbSceneParam._m0[62u].w, fma(_2349, cbSceneParam._m0[62u].z, fma(_2345, cbSceneParam._m0[62u].y, _2341 * cbSceneParam._m0[62u].x))) / _2557;
            float _2701 = isnan(cbSceneParam._m0[41u].w) ? _2697 : (isnan(_2697) ? cbSceneParam._m0[41u].w : max(_2697, cbSceneParam._m0[41u].w));
            float _2744 = (cbSceneParam._m0[33u].x - sqrt(((_2355 * _2355) + (_2354 * _2354)) + (_2356 * _2356))) * cbSceneParam._m0[33u].y;
            float _4928 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
            float _2751 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2558, cbSceneParam._m0[33u].w + _2559), _2701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2558, _2559 - cbSceneParam._m0[33u].z), _2701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2558 - cbSceneParam._m0[33u].z, _2559 - cbSceneParam._m0[33u].w), _2701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2558 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2559), _2701), 0.0)).x), vec4(0.25)));
            float _2755 = 1.0 - (_2751 * cbSceneParam._m0[34u].x);
            float _2756 = 1.0 - (_2751 * cbSceneParam._m0[34u].y);
            float _2757 = 1.0 - (_2751 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2757) ? _2505 : (isnan(_2505) ? _2757 : min(_2505, _2757));
            frontier_phi_37_36_ladder_1 = isnan(_2756) ? _2504 : (isnan(_2504) ? _2756 : min(_2504, _2756));
            frontier_phi_37_36_ladder_2 = isnan(_2755) ? _2503 : (isnan(_2503) ? _2755 : min(_2503, _2755));
        }
        else
        {
            frontier_phi_37_36_ladder = _2505;
            frontier_phi_37_36_ladder_1 = _2504;
            frontier_phi_37_36_ladder_2 = _2503;
        }
        _2569 = frontier_phi_37_36_ladder_2;
        _2571 = frontier_phi_37_36_ladder_1;
        _2573 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2569 = _2503;
        _2571 = _2504;
        _2573 = _2505;
    }
    uvec4 _2578 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2580 = _2578.x * 14u;
    uint _2581 = _2580 + 13u;
    float _2588 = _1251 + (-1.0);
    float _2593 = (cbLight._m0[_2581].x * _2588) + 1.0;
    float _2594 = (cbLight._m0[_2581].y * _2588) + 1.0;
    float _2595 = (cbLight._m0[_2581].z * _2588) + 1.0;
    float _2596 = (cbLight._m0[_2581].w * _2588) + 1.0;
    uint _2597 = _2580 + 5u;
    float _2603 = isnan(1.0) ? _2594 : (isnan(_2594) ? 1.0 : min(_2594, 1.0));
    uint _2607 = _2580 + 4u;
    float _2616 = isnan(1.0) ? _2593 : (isnan(_2593) ? 1.0 : min(_2593, 1.0));
    uint _2620 = _2580 | 1u;
    float _2631 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_1074, _1075, _1076));
    float _2634 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_1074, _1075, _1076));
    float _4964 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _4975 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2639 = (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * 0.3183098733425140380859375;
    float _2641 = (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * 0.3183098733425140380859375;
    float _2648 = ((cbLight._m0[_2597].x * _2603) * _2641) + (((cbLight._m0[_2607].x * _2569) * _2616) * _2639);
    float _2649 = ((_2603 * cbLight._m0[_2597].y) * _2641) + (((cbLight._m0[_2607].y * _2571) * _2616) * _2639);
    float _2650 = ((_2603 * cbLight._m0[_2597].z) * _2641) + (((cbLight._m0[_2607].z * _2573) * _2616) * _2639);
    uvec4 _2654 = floatBitsToUint(cbLight._m0[_2580 + 12u]);
    bool _2656 = _2654.x == 0u;
    float _2758;
    float _2760;
    float _2762;
    if (_2656)
    {
        _2758 = _2648;
        _2760 = _2649;
        _2762 = _2650;
    }
    else
    {
        uint _2766 = _2580 + 6u;
        float _2782 = (dot(vec3(cbLight._m0[_2580 + 2u].xyz), vec3(_1074, _1075, _1076)) * 0.5) + 0.5;
        float _2783 = _2782 * _2782;
        float _4986 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2784 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
        float _2785 = isnan(1.0) ? _2595 : (isnan(_2595) ? 1.0 : min(_2595, 1.0));
        _2758 = (((cbLight._m0[_2766].x * 0.3183098733425140380859375) * _2784) * _2785) + _2648;
        _2760 = (((cbLight._m0[_2766].y * 0.3183098733425140380859375) * _2784) * _2785) + _2649;
        _2762 = (((cbLight._m0[_2766].z * 0.3183098733425140380859375) * _2784) * _2785) + _2650;
    }
    bool _2765 = _2654.y == 0u;
    float _2820;
    float _2822;
    float _2824;
    if (_2765)
    {
        _2820 = _2758;
        _2822 = _2760;
        _2824 = _2762;
    }
    else
    {
        uint _2993 = _2580 + 7u;
        float _3009 = (dot(vec3(cbLight._m0[_2580 + 3u].xyz), vec3(_1074, _1075, _1076)) * 0.5) + 0.5;
        float _3010 = _3009 * _3009;
        float _5002 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3011 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
        float _3012 = isnan(1.0) ? _2596 : (isnan(_2596) ? 1.0 : min(_2596, 1.0));
        _2820 = (((cbLight._m0[_2993].x * 0.3183098733425140380859375) * _3011) * _3012) + _2758;
        _2822 = (((cbLight._m0[_2993].y * 0.3183098733425140380859375) * _3011) * _3012) + _2760;
        _2824 = (((cbLight._m0[_2993].z * 0.3183098733425140380859375) * _3011) * _3012) + _2762;
    }
    uint _2827 = _2580 + 8u;
    float _2840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _1077) * 0.949999988079071044921875);
    float _2841 = _2840 * _2840;
    float _2842 = cbLight._m0[_2580].x + _1153;
    float _2843 = cbLight._m0[_2580].y + _1154;
    float _2844 = cbLight._m0[_2580].z + _1155;
    float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
    float _2849 = _2848 * _2842;
    float _2850 = _2848 * _2843;
    float _2851 = _2848 * _2844;
    float _2852 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_2580].xyz));
    float _5018 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
    float _2855 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
    float _5029 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
    float _2856 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
    float _2857 = dot(vec3(_1074, _1075, _1076), vec3(_2849, _2850, _2851));
    float _5040 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
    float _2860 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
    float _2861 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2849, _2850, _2851));
    float _5051 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
    float _2865 = _2841 * _2841;
    float _2869 = ((_2860 * _2860) * (_2865 + (-1.0))) + 1.0;
    float _2877 = exp2(log2(1.0 - (isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0)))) * 5.0);
    float _2878 = 0.959999978542327880859375 - _1232;
    float _2880 = 0.959999978542327880859375 - _1233;
    float _2881 = 0.959999978542327880859375 - _1234;
    float _2888 = 1.0 - _2841;
    float _2899 = (0.5 / (((_2856 * ((_2855 * _2888) + _2841)) + 9.9999999392252902907785028219223e-09) + (((_2856 * _2888) + _2841) * _2855))) * _2855;
    float _5062 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
    float _2901 = (isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0))) * (_2865 / ((_2869 * _2869) * 3.141590118408203125));
    uint _2915 = _2580 + 9u;
    float _2926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _1077) * 0.949999988079071044921875);
    float _2927 = _2926 * _2926;
    float _2928 = cbLight._m0[_2620].x + _1153;
    float _2929 = cbLight._m0[_2620].y + _1154;
    float _2930 = cbLight._m0[_2620].z + _1155;
    float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
    float _2935 = _2934 * _2928;
    float _2936 = _2934 * _2929;
    float _2937 = _2934 * _2930;
    float _2938 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_2620].xyz));
    float _5073 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
    float _2941 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
    float _2942 = dot(vec3(_1074, _1075, _1076), vec3(_2935, _2936, _2937));
    float _5084 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
    float _2945 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
    float _2946 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2935, _2936, _2937));
    float _5095 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
    float _2950 = _2927 * _2927;
    float _2954 = ((_2945 * _2945) * (_2950 + (-1.0))) + 1.0;
    float _2961 = exp2(log2(1.0 - (isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0)))) * 5.0);
    float _2968 = 1.0 - _2927;
    float _2978 = (0.5 / (((_2856 * ((_2941 * _2968) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2856 * _2968) + _2927) * _2941))) * _2941;
    float _5106 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
    float _2980 = (isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0))) * (_2950 / ((_2954 * _2954) * 3.141590118408203125));
    float _2990 = (((((_2961 * _2878) + _1235) * cbLight._m0[_2915].x) * _2980) * _2603) + ((((cbLight._m0[_2827].x * _2569) * ((_2877 * _2878) + _1235)) * _2901) * _2616);
    float _2991 = (((((_2961 * _2880) + _1237) * cbLight._m0[_2915].y) * _2980) * _2603) + ((((cbLight._m0[_2827].y * _2571) * ((_2877 * _2880) + _1237)) * _2901) * _2616);
    float _2992 = (((((_2961 * _2881) + _1238) * cbLight._m0[_2915].z) * _2980) * _2603) + ((((cbLight._m0[_2827].z * _2573) * ((_2877 * _2881) + _1238)) * _2901) * _2616);
    float _3048;
    float _3050;
    float _3052;
    if (_2656)
    {
        _3048 = _2990;
        _3050 = _2991;
        _3052 = _2992;
    }
    else
    {
        uint _3054 = _2580 + 2u;
        uint _3058 = _2580 + 10u;
        float _3072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3054].w)) * _1077) * 0.949999988079071044921875);
        float _3073 = _3072 * _3072;
        float _3074 = cbLight._m0[_3054].x + _1153;
        float _3075 = cbLight._m0[_3054].y + _1154;
        float _3076 = cbLight._m0[_3054].z + _1155;
        float _3080 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
        float _3081 = _3080 * _3074;
        float _3082 = _3080 * _3075;
        float _3083 = _3080 * _3076;
        float _3084 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_3054].xyz));
        float _5117 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
        float _3087 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
        float _3088 = dot(vec3(_1074, _1075, _1076), vec3(_3081, _3082, _3083));
        float _5128 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
        float _3091 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
        float _3092 = dot(vec3(cbLight._m0[_3054].xyz), vec3(_3081, _3082, _3083));
        float _5139 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
        float _3096 = _3073 * _3073;
        float _3100 = ((_3091 * _3091) * (_3096 + (-1.0))) + 1.0;
        float _3107 = exp2(log2(1.0 - (isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0)))) * 5.0);
        float _3114 = 1.0 - _3073;
        float _3124 = (0.5 / (((_2856 * ((_3087 * _3114) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_2856 * _3114) + _3073) * _3087))) * _3087;
        float _5150 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
        float _3126 = (isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0))) * (_3096 / ((_3100 * _3100) * 3.141590118408203125));
        float _3127 = isnan(1.0) ? _2595 : (isnan(_2595) ? 1.0 : min(_2595, 1.0));
        _3048 = (((((_3107 * _2878) + _1235) * cbLight._m0[_3058].x) * _3126) * _3127) + _2990;
        _3050 = (((((_3107 * _2880) + _1237) * cbLight._m0[_3058].y) * _3126) * _3127) + _2991;
        _3052 = (((((_3107 * _2881) + _1238) * cbLight._m0[_3058].z) * _3126) * _3127) + _2992;
    }
    float _3158;
    float _3160;
    float _3162;
    if (_2765)
    {
        _3158 = _3048;
        _3160 = _3050;
        _3162 = _3052;
    }
    else
    {
        uint _3169 = _2580 + 3u;
        uint _3173 = _2580 + 11u;
        float _3187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3169].w)) * _1077) * 0.949999988079071044921875);
        float _3188 = _3187 * _3187;
        float _3189 = cbLight._m0[_3169].x + _1153;
        float _3190 = cbLight._m0[_3169].y + _1154;
        float _3191 = cbLight._m0[_3169].z + _1155;
        float _3195 = inversesqrt(dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191)));
        float _3196 = _3195 * _3189;
        float _3197 = _3195 * _3190;
        float _3198 = _3195 * _3191;
        float _3199 = dot(vec3(_1074, _1075, _1076), vec3(cbLight._m0[_3169].xyz));
        float _5166 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
        float _3202 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
        float _3203 = dot(vec3(_1074, _1075, _1076), vec3(_3196, _3197, _3198));
        float _5177 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
        float _3206 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
        float _3207 = dot(vec3(cbLight._m0[_3169].xyz), vec3(_3196, _3197, _3198));
        float _5188 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
        float _3211 = _3188 * _3188;
        float _3215 = ((_3206 * _3206) * (_3211 + (-1.0))) + 1.0;
        float _3222 = exp2(log2(1.0 - (isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0)))) * 5.0);
        float _3229 = 1.0 - _3188;
        float _3239 = (0.5 / (((_2856 * ((_3202 * _3229) + _3188)) + 9.9999999392252902907785028219223e-09) + (((_2856 * _3229) + _3188) * _3202))) * _3202;
        float _5199 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
        float _3241 = (isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0))) * (_3211 / ((_3215 * _3215) * 3.141590118408203125));
        float _3242 = isnan(1.0) ? _2596 : (isnan(_2596) ? 1.0 : min(_2596, 1.0));
        _3158 = (((((_3222 * _2878) + _1235) * cbLight._m0[_3173].x) * _3241) * _3242) + _3048;
        _3160 = (((((_3222 * _2880) + _1237) * cbLight._m0[_3173].y) * _3241) * _3242) + _3050;
        _3162 = (((((_3222 * _2881) + _1238) * cbLight._m0[_3173].z) * _3241) * _3242) + _3052;
    }
    float _3308;
    float _3310;
    float _3312;
    float _3314;
    float _3316;
    float _3318;
    if (_2578.y == 0u)
    {
        uvec4 _3263 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3264 = _3263.x;
        uint _3275 = uint((float(_3263.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1174) / _3264))) + floor(float(uint(cbSceneParam._m0[85u].x * _1173) / _3264)));
        float _3285 = (log2(_2356 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3286 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
        uint _3289 = uint(isnan(14.0) ? _3286 : (isnan(_3286) ? 14.0 : min(_3286, 14.0)));
        uvec4 _3294 = texelFetch(g_lightClusterGridBuffer, int(((_3289 << 2u) + (_3275 << 6u)) >> 2u));
        uint _3295 = _3294.x;
        uint _3296 = _3263.z;
        float _3375;
        float _3377;
        float _3379;
        float _3381;
        float _3383;
        float _3385;
        if (((((1u << ((_3296 >> 4u) & 15u)) + 4294967295u) & _3295) == 0u) || ((_3296 & 240u) == 0u))
        {
            _3375 = 0.0;
            _3377 = 0.0;
            _3379 = 0.0;
            _3381 = 0.0;
            _3383 = 0.0;
            _3385 = 0.0;
        }
        else
        {
            float _3376;
            float _3378;
            float _3380;
            float _3382;
            float _3384;
            float _3386;
            float _3527 = 0.0;
            float _3528 = 0.0;
            float _3529 = 0.0;
            float _3530 = 0.0;
            float _3531 = 0.0;
            float _3532 = 0.0;
            uint _3533 = 0u;
            uint _3542;
            bool _3543;
            for (;;)
            {
                _3542 = texelFetch(g_lightClassification, int((((_3289 << 5u) + (_3275 << 9u)) + (_3533 << 2u)) >> 2u)).x;
                _3543 = _3542 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3543)
                {
                    frontier_phi_71_pred = _3532;
                    frontier_phi_71_pred_1 = _3531;
                    frontier_phi_71_pred_2 = _3530;
                    frontier_phi_71_pred_3 = _3529;
                    frontier_phi_71_pred_4 = _3528;
                    frontier_phi_71_pred_5 = _3527;
                }
                else
                {
                    float _3672;
                    float _3673;
                    float _3674;
                    float _3675;
                    float _3676;
                    float _3677;
                    uint _3678;
                    _3672 = _3527;
                    _3673 = _3528;
                    _3674 = _3529;
                    _3675 = _3530;
                    _3676 = _3531;
                    _3677 = _3532;
                    _3678 = _3542;
                    float _3599;
                    float _3600;
                    float _3601;
                    float _3602;
                    float _3603;
                    float _3604;
                    for (;;)
                    {
                        uint _3682 = uint(findLSB(_3678)) + (_3533 << 5u);
                        uint _3679 = (_3678 + 4294967295u) & _3678;
                        uint _3684 = _3682 * 48u;
                        vec4 _3698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3684)).x, texelFetch(g_PointLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3684 + 3u)).x));
                        uint _3704 = (_3682 * 48u) + 4u;
                        vec4 _3717 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3704)).x, texelFetch(g_PointLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3704 + 3u)).x));
                        uint _3723 = (_3682 * 48u) + 8u;
                        vec3 _3734 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3723)).x, texelFetch(g_PointLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3723 + 2u)).x));
                        float _3738 = _3698.x - _2354;
                        float _3739 = _3698.y - _2355;
                        float _3740 = _3698.z - _2356;
                        float _3741 = dot(vec3(_3738, _3739, _3740), vec3(_3738, _3739, _3740));
                        float _3744 = inversesqrt(_3741);
                        float _3745 = _3744 * _3738;
                        float _3746 = _3744 * _3739;
                        float _3747 = _3744 * _3740;
                        float _3748 = dot(vec3(_1192, _1195, _1198), vec3(_3745, _3746, _3747));
                        float _3753 = 1.0 - (_3741 * _3698.w);
                        float _5225 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                        float _3754 = isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0));
                        float _3755 = sqrt(_3741) * _3717.w;
                        float _3758 = 1.39999997615814208984375 / (_3755 + 1.39999997615814208984375);
                        float _3759 = _3758 * _3758;
                        float _3762 = ((1.0 - _3759) * _3748) + _3759;
                        float _3765 = _3755 * _3755;
                        float _3769 = ((isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0))) * _3754) / ((_3765 * 0.699999988079071044921875) + 1.0);
                        float _3773 = (-0.0) - _2354;
                        float _3774 = (-0.0) - _2355;
                        float _3775 = (-0.0) - _2356;
                        float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                        float _3780 = _3779 * _3773;
                        float _3781 = _3779 * _3774;
                        float _3782 = _3779 * _3775;
                        float _3789 = exp2(log2(1.0 / ((_3765 * 3.5) + 5.0)) * 0.25);
                        float _3790 = 1.0 - _1267;
                        float _3797 = sqrt(1.0 - ((1.0 - (_3790 * _3790)) * (1.0 - (_3789 * _3789))));
                        float _3798 = _3797 * _3797;
                        float _3799 = _3798 * _3798;
                        float _3800 = _3780 + _3745;
                        float _3801 = _3781 + _3746;
                        float _3802 = _3782 + _3747;
                        float _3806 = inversesqrt(dot(vec3(_3800, _3801, _3802), vec3(_3800, _3801, _3802)));
                        float _3810 = dot(vec3(_1192, _1195, _1198), vec3(_3780, _3781, _3782));
                        float _5241 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                        float _3813 = isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0));
                        float _3814 = dot(vec3(_1192, _1195, _1198), vec3(_3806 * _3800, _3806 * _3801, _3806 * _3802));
                        float _5252 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                        float _3817 = isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0));
                        float _3821 = ((_3817 * _3817) * (_3799 + (-1.0))) + 1.0;
                        float _3822 = _3758 * _3798;
                        float _3823 = _3822 * _3822;
                        float _3826 = ((1.0 - _3823) * _3748) + _3823;
                        float _5263 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                        float _3827 = isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0));
                        float _3828 = 1.0 - _3798;
                        float _3838 = (0.5 / (((_3827 * ((_3813 * _3828) + _3798)) + 9.9999999392252902907785028219223e-09) + (((_3827 * _3828) + _3798) * _3813))) * _3827;
                        float _5274 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                        float _3849 = (((_3799 * 3.1415927410125732421875) * (isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0)))) / ((_3821 * _3821) * ((_3765 * 2.1991131305694580078125) + 3.141590118408203125))) * _3754;
                        _3602 = (_3769 * _3717.x) + _3675;
                        _3603 = (_3769 * _3717.y) + _3676;
                        _3604 = (_3769 * _3717.z) + _3677;
                        _3599 = (_3849 * _3734.x) + _3672;
                        _3600 = (_3849 * _3734.y) + _3673;
                        _3601 = (_3849 * _3734.z) + _3674;
                        if (_3679 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3672 = _3599;
                            _3673 = _3600;
                            _3674 = _3601;
                            _3675 = _3602;
                            _3676 = _3603;
                            _3677 = _3604;
                            _3678 = _3679;
                        }
                    }
                    frontier_phi_71_pred = _3604;
                    frontier_phi_71_pred_1 = _3603;
                    frontier_phi_71_pred_2 = _3602;
                    frontier_phi_71_pred_3 = _3601;
                    frontier_phi_71_pred_4 = _3600;
                    frontier_phi_71_pred_5 = _3599;
                }
                _3386 = frontier_phi_71_pred;
                _3384 = frontier_phi_71_pred_1;
                _3382 = frontier_phi_71_pred_2;
                _3380 = frontier_phi_71_pred_3;
                _3378 = frontier_phi_71_pred_4;
                _3376 = frontier_phi_71_pred_5;
                uint _3534 = _3533 + 1u;
                if (_3534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3527 = _3376;
                    _3528 = _3378;
                    _3529 = _3380;
                    _3530 = _3382;
                    _3531 = _3384;
                    _3532 = _3386;
                    _3533 = _3534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3375 = _3376;
            _3377 = _3378;
            _3379 = _3380;
            _3381 = _3382;
            _3383 = _3384;
            _3385 = _3386;
        }
        uvec4 _3389 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3390 = _3389.z;
        uint _3392 = (_3390 >> 8u) & 15u;
        float _3495;
        float _3497;
        float _3499;
        float _3501;
        float _3503;
        float _3505;
        if (((4294967295u << _3392) & _3295) == 0u)
        {
            _3495 = _3375;
            _3497 = _3377;
            _3499 = _3379;
            _3501 = _3381;
            _3503 = _3383;
            _3505 = _3385;
        }
        else
        {
            float _3520 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
            float _3521 = _3520 * _2354;
            float _3522 = _3520 * _2355;
            float _3523 = _3520 * _2356;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3392 < ((_3390 >> 12u) & 15u))
            {
                float _3496;
                float _3498;
                float _3500;
                float _3502;
                float _3504;
                float _3506;
                float _3655 = _3375;
                float _3656 = _3377;
                float _3657 = _3379;
                float _3658 = _3381;
                float _3659 = _3383;
                float _3660 = _3385;
                uint _3661 = _3392;
                uint _3670;
                bool _3671;
                for (;;)
                {
                    _3670 = texelFetch(g_lightClassification, int((((_3289 << 5u) + (_3275 << 9u)) + (_3661 << 2u)) >> 2u)).x;
                    _3671 = _3670 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3671)
                    {
                        frontier_phi_82_pred = _3660;
                        frontier_phi_82_pred_1 = _3659;
                        frontier_phi_82_pred_2 = _3658;
                        frontier_phi_82_pred_3 = _3657;
                        frontier_phi_82_pred_4 = _3656;
                        frontier_phi_82_pred_5 = _3655;
                    }
                    else
                    {
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _4156;
                        float _4157;
                        float _4158;
                        float _4159;
                        float _4160;
                        float _4161;
                        float _3876 = _3655;
                        float _3877 = _3656;
                        float _3878 = _3657;
                        float _3879 = _3658;
                        float _3880 = _3659;
                        float _3881 = _3660;
                        uint _3882 = _3670;
                        uint _3883;
                        vec4 _3908;
                        float _3909;
                        vec4 _3924;
                        vec3 _3936;
                        vec4 _3951;
                        vec4 _3966;
                        float _4012;
                        bool _4013;
                        for (;;)
                        {
                            uint _3893 = ((_3661 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3882));
                            _3883 = (_3882 + 4294967295u) & _3882;
                            uint _3895 = _3893 * 40u;
                            _3908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 3u)).x));
                            _3909 = _3908.w;
                            uint _3911 = (_3893 * 40u) + 4u;
                            _3924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 3u)).x));
                            uint _3926 = (_3893 * 40u) + 8u;
                            _3936 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3926 + 2u)).x));
                            uint _3938 = (_3893 * 40u) + 16u;
                            _3951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3938 + 3u)).x));
                            uint _3953 = (_3893 * 40u) + 20u;
                            _3966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3953 + 3u)).x));
                            uint _3968 = (_3893 * 40u) + 24u;
                            vec4 _3981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3968 + 3u)).x));
                            uint _3987 = (_3893 * 40u) + 28u;
                            vec4 _4000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3987 + 3u)).x));
                            _4012 = fma(_2356, _4000.z, fma(_2355, _4000.y, _4000.x * _2354)) + _4000.w;
                            _4013 = !((fma(_2356, _3981.z, fma(_2355, _3981.y, _3981.x * _2354)) + _3981.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4013)
                            {
                                float _4040 = _3908.x - _2354;
                                float _4041 = _3908.y - _2355;
                                float _4042 = _3908.z - _2356;
                                float _4043 = dot(vec3(_4040, _4041, _4042), vec3(_4040, _4041, _4042));
                                float _4046 = inversesqrt(_4043);
                                float _4047 = _4046 * _4040;
                                float _4048 = _4046 * _4041;
                                float _4049 = _4046 * _4042;
                                float _4053 = 1.0 - (_4043 / (_3909 * _3909));
                                float _5285 = isnan(0.0) ? _4053 : (isnan(_4053) ? 0.0 : max(_4053, 0.0));
                                float _4054 = isnan(1.0) ? _5285 : (isnan(_5285) ? 1.0 : min(_5285, 1.0));
                                float _4058 = sqrt(_4043) * _3924.w;
                                float _4060 = 1.39999997615814208984375 / (_4058 + 1.39999997615814208984375);
                                float _4061 = _4060 * _4060;
                                float _4064 = ((1.0 - _4061) * dot(vec3(_4047, _4048, _4049), vec3(_1192, _1195, _1198))) + _4061;
                                float _4067 = _4058 * _4058;
                                float _4071 = (fma(_2356, _3951.z, fma(_2355, _3951.y, _3951.x * _2354)) + _3951.w) / _4012;
                                float _4072 = (fma(_2356, _3966.z, fma(_2355, _3966.y, _3966.x * _2354)) + _3966.w) / _4012;
                                float _4076 = 1.0 - dot(vec2(_4071, _4072), vec2(_4071, _4072));
                                float _5301 = isnan(0.0) ? _4076 : (isnan(_4076) ? 0.0 : max(_4076, 0.0));
                                float _4077 = isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0));
                                float _4078 = _4077 * (((isnan(0.0) ? _4064 : (isnan(_4064) ? 0.0 : max(_4064, 0.0))) * _4054) / ((_4067 * 0.699999988079071044921875) + 1.0));
                                float _4090 = exp2(log2(1.0 / ((_4067 * 3.5) + 5.0)) * 0.25);
                                float _4091 = 1.0 - _1267;
                                float _4098 = sqrt(1.0 - ((1.0 - (_4091 * _4091)) * (1.0 - (_4090 * _4090))));
                                float _4099 = _4098 * _4098;
                                float _4100 = _4099 * _4099;
                                float _4101 = _4047 - _3521;
                                float _4102 = _4048 - _3522;
                                float _4103 = _4049 - _3523;
                                float _4107 = inversesqrt(dot(vec3(_4101, _4102, _4103), vec3(_4101, _4102, _4103)));
                                float _4111 = dot(vec3(_1192, _1195, _1198), vec3((-0.0) - _3521, (-0.0) - _3522, (-0.0) - _3523));
                                float _5312 = isnan(0.0) ? _4111 : (isnan(_4111) ? 0.0 : max(_4111, 0.0));
                                float _4114 = isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0));
                                float _4115 = dot(vec3(_1192, _1195, _1198), vec3(_4107 * _4101, _4107 * _4102, _4107 * _4103));
                                float _5323 = isnan(0.0) ? _4115 : (isnan(_4115) ? 0.0 : max(_4115, 0.0));
                                float _4118 = isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0));
                                float _4122 = ((_4118 * _4118) * (_4100 + (-1.0))) + 1.0;
                                float _4123 = _4060 * _4099;
                                float _4124 = _4123 * _4123;
                                float _4130 = ((1.0 - _4124) * dot(vec3(_1192, _1195, _1198), vec3(_4047, _4048, _4049))) + _4124;
                                float _5334 = isnan(0.0) ? _4130 : (isnan(_4130) ? 0.0 : max(_4130, 0.0));
                                float _4131 = isnan(1.0) ? _5334 : (isnan(_5334) ? 1.0 : min(_5334, 1.0));
                                float _4132 = 1.0 - _4099;
                                float _4142 = (0.5 / (((_4131 * ((_4114 * _4132) + _4099)) + 9.9999999392252902907785028219223e-09) + (((_4131 * _4132) + _4099) * _4114))) * _4131;
                                float _5345 = isnan(0.0) ? _4142 : (isnan(_4142) ? 0.0 : max(_4142, 0.0));
                                float _4152 = (_4077 * _4054) * (((_4100 * 3.1415927410125732421875) * (isnan(1.0) ? _5345 : (isnan(_5345) ? 1.0 : min(_5345, 1.0)))) / ((_4122 * _4122) * ((_4067 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4078 * _3924.z;
                                frontier_phi_88_pred_1 = _4078 * _3924.y;
                                frontier_phi_88_pred_2 = _4078 * _3924.x;
                                frontier_phi_88_pred_3 = _4152 * _3936.z;
                                frontier_phi_88_pred_4 = _4152 * _3936.y;
                                frontier_phi_88_pred_5 = _4152 * _3936.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4161 = frontier_phi_88_pred;
                            _4160 = frontier_phi_88_pred_1;
                            _4159 = frontier_phi_88_pred_2;
                            _4158 = frontier_phi_88_pred_3;
                            _4157 = frontier_phi_88_pred_4;
                            _4156 = frontier_phi_88_pred_5;
                            _3866 = _4159 + _3879;
                            _3867 = _4160 + _3880;
                            _3868 = _4161 + _3881;
                            _3863 = _4156 + _3876;
                            _3864 = _4157 + _3877;
                            _3865 = _4158 + _3878;
                            if (_3883 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3876 = _3863;
                                _3877 = _3864;
                                _3878 = _3865;
                                _3879 = _3866;
                                _3880 = _3867;
                                _3881 = _3868;
                                _3882 = _3883;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3868;
                        frontier_phi_82_pred_1 = _3867;
                        frontier_phi_82_pred_2 = _3866;
                        frontier_phi_82_pred_3 = _3865;
                        frontier_phi_82_pred_4 = _3864;
                        frontier_phi_82_pred_5 = _3863;
                    }
                    _3506 = frontier_phi_82_pred;
                    _3504 = frontier_phi_82_pred_1;
                    _3502 = frontier_phi_82_pred_2;
                    _3500 = frontier_phi_82_pred_3;
                    _3498 = frontier_phi_82_pred_4;
                    _3496 = frontier_phi_82_pred_5;
                    uint _3662 = _3661 + 1u;
                    if (_3662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3655 = _3496;
                        _3656 = _3498;
                        _3657 = _3500;
                        _3658 = _3502;
                        _3659 = _3504;
                        _3660 = _3506;
                        _3661 = _3662;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3502;
                frontier_phi_63_64_ladder_1 = _3506;
                frontier_phi_63_64_ladder_2 = _3504;
                frontier_phi_63_64_ladder_3 = _3500;
                frontier_phi_63_64_ladder_4 = _3498;
                frontier_phi_63_64_ladder_5 = _3496;
            }
            else
            {
                frontier_phi_63_64_ladder = _3381;
                frontier_phi_63_64_ladder_1 = _3385;
                frontier_phi_63_64_ladder_2 = _3383;
                frontier_phi_63_64_ladder_3 = _3379;
                frontier_phi_63_64_ladder_4 = _3377;
                frontier_phi_63_64_ladder_5 = _3375;
            }
            _3495 = frontier_phi_63_64_ladder_5;
            _3497 = frontier_phi_63_64_ladder_4;
            _3499 = frontier_phi_63_64_ladder_3;
            _3501 = frontier_phi_63_64_ladder;
            _3503 = frontier_phi_63_64_ladder_2;
            _3505 = frontier_phi_63_64_ladder_1;
        }
        float _3510 = isnan(1.0) ? _1251 : (isnan(_1251) ? 1.0 : min(_1251, 1.0));
        _3308 = (_3510 * _3501) + _2820;
        _3310 = (_3510 * _3503) + _2822;
        _3312 = (_3510 * _3505) + _2824;
        _3314 = ((_3495 * _1235) * _3510) + _3158;
        _3316 = ((_3497 * _1237) * _3510) + _3160;
        _3318 = ((_3499 * _1238) * _3510) + _3162;
    }
    else
    {
        _3308 = _2820;
        _3310 = _2822;
        _3312 = _2824;
        _3314 = _3158;
        _3316 = _3160;
        _3318 = _3162;
    }
    float _5361 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _5372 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _5383 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _3335 = ((isnan(1.0) ? _5361 : (isnan(_5361) ? 1.0 : min(_5361, 1.0))) * (_3308 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1251))) + ((_3314 + ((isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0))) * _2088)) * cbPerFrame._m0[3u].x);
    float _3336 = ((isnan(1.0) ? _5372 : (isnan(_5372) ? 1.0 : min(_5372, 1.0))) * (_3310 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1251))) + ((_3316 + ((isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0))) * _2088)) * cbPerFrame._m0[3u].x);
    float _3337 = ((isnan(1.0) ? _5383 : (isnan(_5383) ? 1.0 : min(_5383, 1.0))) * (_3312 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1251))) + ((_3318 + ((isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0))) * _2088)) * cbPerFrame._m0[3u].x);
    uint _3338 = _275 + 6u;
    float _3346 = _1173 / cbSceneParam._m0[86u].x;
    float _3347 = _1174 / cbSceneParam._m0[86u].y;
    vec4 _3361 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3346, _3347, (log2((isnan(cbSceneParam._m0[77u].w) ? _1096 : (isnan(_1096) ? cbSceneParam._m0[77u].w : min(_1096, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3363 = _3361.x;
    float _3364 = _3361.y;
    float _3365 = _3361.z;
    float _3366 = _3361.w;
    float _3437;
    float _3439;
    float _3441;
    float _3443;
    if (_1096 > cbSceneParam._m0[78u].w)
    {
        float _3400 = isnan(_1096) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1096 : min(cbSceneParam._m0[80u].w, _1096));
        float _3401 = _3400 / _1096;
        float _3412 = _3401 * _1146;
        float _3413 = _1147 * _3401;
        float _3414 = (-0.0) - _3413;
        float _3415 = _3401 * _1148;
        float _3417 = (cbSceneParam._m0[77u].w * _3414) / _3400;
        float _3418 = _3417 + cbSceneParam._m0[79u].w;
        float _3419 = cbSceneParam._m0[79u].w - _3413;
        float _3425 = sqrt(((_3412 * _3412) + (_3413 * _3413)) + (_3415 * _3415));
        float _3428 = (1.0 - (cbSceneParam._m0[77u].w / _3400)) * _3425;
        float _3433 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3435 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3612;
        if (abs((_3414 - _3417) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3612 = ((((_3418 > 0.0) ? exp2(_3433 * _3418) : (2.0 - exp2(_3435 * _3418))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3428;
        }
        else
        {
            float _3556 = 1.0 / cbSceneParam._m0[80u].x;
            float _3557 = isnan(_3419) ? _3418 : (isnan(_3418) ? _3419 : max(_3418, _3419));
            float _3558 = isnan(_3419) ? _3418 : (isnan(_3418) ? _3419 : min(_3418, _3419));
            float _3567 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : min(_3557, 0.0));
            float _3568 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : min(_3558, 0.0));
            _3612 = ((abs(_3425 / _3414) * cbSceneParam._m0[80u].y) * ((((_3567 - _3568) * 2.0) - ((exp2(_3433 * (isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0)))) - exp2(_3433 * (isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0))))) * _3556)) - ((exp2(_3435 * _3567) - exp2(_3435 * _3568)) * _3556))) + (_3428 * cbSceneParam._m0[80u].z);
        }
        vec4 _3614 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3346, _3347, 1.0), 0.0);
        float _3623 = exp2((_3612 * (-1.44269502162933349609375)) * (1.0 - _3614.w));
        float _3624 = log2(_3623);
        float _3640 = log2(_3366);
        _3437 = (exp2(_3640 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3624 * cbSceneParam._m0[78u].x)) * _3614.x) / cbSceneParam._m0[78u].x)) + _3363;
        _3439 = (exp2(_3640 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3624 * cbSceneParam._m0[78u].y)) * _3614.y) / cbSceneParam._m0[78u].y)) + _3364;
        _3441 = (exp2(_3640 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3624 * cbSceneParam._m0[78u].z)) * _3614.z) / cbSceneParam._m0[78u].z)) + _3365;
        _3443 = _3623 * _3366;
    }
    else
    {
        _3437 = _3363;
        _3439 = _3364;
        _3441 = _3365;
        _3443 = _3366;
    }
    bool _3650;
    vec4 _3453;
    vec4 _3475;
    float _3477;
    float _3481;
    float _3482;
    float _3483;
    float _3484;
    bool _3494;
    for (;;)
    {
        _3453 = cbMatDynParam._m0[0u];
        float _3455 = roundEven(_3453.y);
        bool _3456 = _3455 == 3.0;
        float _3457 = log2(_3443);
        float _3464 = exp2(_3457 * cbSceneParam._m0[78u].x) * _3335;
        float _3465 = exp2(_3457 * cbSceneParam._m0[78u].y) * _3336;
        float _3466 = exp2(_3457 * cbSceneParam._m0[78u].z) * _3337;
        float _3473 = _1162 + (-0.5);
        _3475 = cbMtdParam._m0[1u];
        _3477 = _3475.y * _3473;
        float _3480 = (_3455 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3481 = _3480 * (_3456 ? _3464 : (_3464 + (cbSceneParam._m0[72u].w * _3437)));
        _3482 = _3480 * (_3456 ? _3465 : (_3465 + (cbSceneParam._m0[72u].w * _3439)));
        _3483 = _3480 * (_3456 ? _3466 : (_3466 + (cbSceneParam._m0[72u].w * _3441)));
        _3484 = _3473 * 0.999000012874603271484375;
        _3494 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3494)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _3484) < 0.5)
            {
                _3650 = true;
                break;
            }
        }
        uint _3591 = _1211 + uint(_3453.w);
        if ((cbInstanceData._m0[_3591].w < 1.0) && ((cbInstanceData._m0[_3591].w + _3484) < 0.5))
        {
            _3650 = true;
            break;
        }
        if ((_3477 + 1.0) < _3475.x)
        {
            _3650 = true;
            break;
        }
        _3650 = false;
        break;
    }
    float _3854;
    if (_3650)
    {
        discard_state = true;
        _3854 = 0.0;
    }
    else
    {
        _3854 = cbInstanceData._m0[_3338].w;
    }
    SV_Target.x = _3481;
    SV_Target.y = _3482;
    SV_Target.z = _3483;
    SV_Target.w = _3854;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3338].w;
    discard_exit();
}


