#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1622;
float _4024;
float _4025;
float _4026;
float _4027;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4036 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4047 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4058 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    uint _290 = uint(roundEven(NORMAL.w)) * 13u;
    uint _295 = _290 + 1u;
    uint _299 = _290 + 2u;
    float _308 = sqrt(((cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x)) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x));
    float _309 = _308 * TEXCOORD.z;
    float _310 = _308 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _309) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _310) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _377 = _372.x * cbMtdParam._m0[11u].x;
    float _378 = _372.y * cbMtdParam._m0[11u].y;
    float _379 = _372.z * cbMtdParam._m0[11u].z;
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _309) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _310) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _417.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4069 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _491 = (_484 * ((_398.x * cbMtdParam._m0[12u].x) - _377)) + _377;
    float _492 = (_484 * ((_398.y * cbMtdParam._m0[12u].y) - _378)) + _378;
    float _493 = (_484 * ((_398.z * cbMtdParam._m0[12u].z) - _379)) + _379;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _309) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _310) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _417.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4080 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _564 = (_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491;
    float _565 = (_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492;
    float _566 = (_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _309) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _310) + cbTextureTilingScale._m0[24u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _604 = _602.x;
    float _614 = dot(vec4(_604, _602.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _626 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _417.z) * 2.0) - ((((_604 - _614) * cbMtdParam._m0[23u].w) + _614) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4091 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _637 = (_346.x * cbMtdParam._m0[9u].x) * ((_627 * ((_585.x * cbMtdParam._m0[14u].x) - _564)) + _564);
    float _638 = (_346.y * cbMtdParam._m0[9u].y) * ((_627 * ((_585.y * cbMtdParam._m0[14u].y) - _565)) + _565);
    float _639 = (_346.z * cbMtdParam._m0[9u].z) * ((_627 * ((_585.z * cbMtdParam._m0[14u].z) - _566)) + _566);
    float _643 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _323.x) * _637;
    float _646 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _323.y) * _638;
    float _649 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _323.z) * _639;
    float _657 = (((_637 - _643) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) + _643) * 4.55000019073486328125;
    float _659 = (((_638 - _646) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) + _646) * 4.55000019073486328125;
    float _661 = (((_639 - _649) * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) + _649) * 4.55000019073486328125;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _309) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _310) + cbTextureTilingScale._m0[20u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _309) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _310) + cbTextureTilingScale._m0[4u].w));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = _720.x;
    float _723 = _720.y;
    float _724 = _720.z;
    float _731 = ((_703.x - _722) * _484) + _722;
    float _732 = ((_703.y - _723) * _484) + _723;
    float _733 = ((_703.z - _724) * _484) + _724;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _309) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _310) + cbTextureTilingScale._m0[2u].w));
    float _756 = ((_745.x - _731) * _557) + _731;
    float _757 = ((_745.y - _732) * _557) + _732;
    float _758 = ((_745.z - _733) * _557) + _733;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _309) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _310) + cbTextureTilingScale._m0[23u].w));
    float _783 = ((_770.z - _758) * _627) + _758;
    float _786 = ((((_770.x - _756) * _627) + _756) * 2.0) + (-1.0);
    float _787 = ((((_770.y - _757) * _627) + _757) * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _4102 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))));
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _823 = (_786 + ((((_678.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_811.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _824 = (_787 + ((((_678.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_811.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _827 = fma(_793, _257, fma(_824, _264, _823 * _250));
    float _830 = fma(_793, _258, fma(_824, _265, _823 * _251));
    float _833 = fma(_793, _259, fma(_824, _266, _823 * _252));
    float _837 = inversesqrt(dot(vec3(_827, _830, _833), vec3(_827, _830, _833)));
    vec4 _864 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _309) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _310) + cbTextureTilingScale._m0[11u].w));
    float _866 = _864.x;
    float _867 = 1.0 - _866;
    float _875 = (cbMtdParam._m0[19u].x + dot(vec4(_837 * _827, _837 * _830, _837 * _833, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_866 - _867) * cbMtdParam._m0[24u].z) + _867) * cbMtdParam._m0[21u].z);
    float _4113 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _876 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _883 = (_876 * (cbMtdParam._m0[17u].x - _657)) + _657;
    float _884 = (_876 * (cbMtdParam._m0[17u].y - _659)) + _659;
    float _885 = (_876 * (cbMtdParam._m0[17u].z - _661)) + _661;
    vec4 _911 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _913 = _911.x;
    float _930 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w)).x - _913) * _484) + _913;
    float _947 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _309) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _310) + cbTextureTilingScale._m0[21u].w)).x - _930) * _557) + _930;
    float _965 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w)).x - _947) * _627) + _947;
    float _969 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _965) * cbMtdParam._m0[19u].z) + _965;
    float _971 = _969 - (_969 * _876);
    float _976 = (((_678.z - _783) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _783;
    float _980 = ((_811.z - _976) * cbMtdParam._m0[19u].w) + _976;
    vec4 _993 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _309) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _310) + cbTextureTilingScale._m0[15u].w));
    float _1000 = (_993.x * 2.0) + (-1.0);
    float _1001 = (_993.y * 2.0) + (-1.0);
    float _1002 = dot(vec2(_1000, _1001), vec2(_1000, _1001));
    float _4124 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1010 = ((_993.z - _980) * _876) + _980;
    float _1020 = ((sqrt(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) - _793) * _876) + _793;
    float _1023 = (((_1000 - _823) * _876) + _823) + (cbMtdParam._m0[21u].x * _823);
    float _1024 = (((_1001 - _824) * _876) + _824) + (cbMtdParam._m0[21u].x * _824);
    float _1028 = cbMtdParam._m0[22u].x + _811.w;
    float _1031 = fma(_1020, _257, fma(_1024, _264, _1023 * _250));
    float _1034 = fma(_1020, _258, fma(_1024, _265, _1023 * _251));
    float _1037 = fma(_1020, _259, fma(_1024, _266, _1023 * _252));
    float _1041 = inversesqrt(dot(vec3(_1031, _1034, _1037), vec3(_1031, _1034, _1037)));
    float _1042 = _1041 * _1031;
    float _1043 = _1041 * _1034;
    float _1044 = _1041 * _1037;
    float _4135 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1045 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _4157 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4168 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4179 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4190 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _1050 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _1064 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1114 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1104);
    float _1115 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1104);
    float _1116 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1104);
    float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
    float _1121 = _1114 * _1120;
    float _1122 = _1115 * _1120;
    float _1123 = _1116 * _1120;
    vec4 _1128 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1130 = _1128.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1302 = sqrt(((_1114 * _1114) + (_1115 * _1115)) + (_1116 * _1116));
        float _1308 = (cbMatDynParam._m0[5u].x * _1302) + cbMatDynParam._m0[5u].y;
        float _4201 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1313 = (cbMatDynParam._m0[5u].z * _1302) + cbMatDynParam._m0[5u].w;
        float _4212 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) - _1309)) + _1309) < ((_1130 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1141 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1142 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1160 = fma(_1044, cbSceneParam._m0[5u].z, fma(_1043, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1042));
    float _1163 = fma(_1044, cbSceneParam._m0[6u].z, fma(_1043, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1042));
    float _1166 = fma(_1044, cbSceneParam._m0[7u].z, fma(_1043, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1042));
    uint _1179 = _290 + 9u;
    uint _1180 = _1179 + uint(cbMatDynParam._m0[0u].w);
    float _1186 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_1180].x;
    float _1187 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * cbInstanceData._m0[_1180].y;
    float _1188 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_1180].z;
    float _4223 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1190 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _1192 = 1.0 - _1050;
    float _1193 = _1189 * _1192;
    float _1194 = _1190 * _1192;
    float _1195 = _1191 * _1192;
    float _1200 = (_1189 + (-0.039999999105930328369140625)) * _1050;
    float _1201 = (_1190 + (-0.039999999105930328369140625)) * _1050;
    float _1202 = (_1191 + (-0.039999999105930328369140625)) * _1050;
    float _1203 = _1200 + 0.039999999105930328369140625;
    float _1205 = _1201 + 0.039999999105930328369140625;
    float _1206 = _1202 + 0.039999999105930328369140625;
    vec4 _1215 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1141, cbSceneParam._m0[86u].y * _1142));
    float _1219 = ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * TEXCOORD_5.w) * _1215.x;
    float _1220 = dot(vec3(_1042, _1043, _1044), vec3(_1121, _1122, _1123));
    float _1223 = _1220 * 2.0;
    float _1227 = (_1223 * _1042) - _1121;
    float _1228 = (_1223 * _1043) - _1122;
    float _1229 = (_1223 * _1044) - _1123;
    float _1233 = abs(dot(vec3(_1121, _1122, _1123), vec3(_1042, _1043, _1044)));
    float _4256 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1235 = sqrt(_1045);
    float _1248 = exp2((_1235 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1235 * 3.0));
    float _1254 = (1.0 - _1248) * ((_1235 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1255 = _1248 * _1235;
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1287 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1291 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1621;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1346 = fma(_1291, cbModelParam._m0[26u].z, fma(_1287, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1283));
        float _1350 = fma(_1291, cbModelParam._m0[27u].z, fma(_1287, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1283));
        float _1354 = fma(_1291, cbModelParam._m0[28u].z, fma(_1287, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1283));
        float _1379 = _1283 + _1042;
        float _1380 = _1287 + _1043;
        float _1381 = _1291 + _1044;
        float _1391 = fma(_1381, cbModelParam._m0[26u].z, fma(_1380, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1379)) - _1346;
        float _1392 = fma(_1381, cbModelParam._m0[27u].z, fma(_1380, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1379)) - _1350;
        float _1393 = fma(_1381, cbModelParam._m0[28u].z, fma(_1380, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1379)) - _1354;
        float _1397 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
        float _1410 = ((_1397 * _1391) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1346 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1397 * _1392) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1350 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1397 * _1393) / cbModelParam._m0[34u].z) + ((((((_1354 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        float _1449 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1415.x + (-0.5));
        float _1451 = _1449 * (_1415.y + (-0.5));
        float _1452 = _1449 * (_1415.z + (-0.5));
        float _1459 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1422.x + (-0.5));
        float _1461 = _1459 * (_1422.y + (-0.5));
        float _1462 = _1459 * (_1422.z + (-0.5));
        float _1469 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1429.x + (-0.5));
        float _1471 = _1469 * (_1429.y + (-0.5));
        float _1472 = _1469 * (_1429.z + (-0.5));
        float _1479 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1436.x + (-0.5));
        float _1481 = _1479 * (_1436.y + (-0.5));
        float _1482 = _1479 * (_1436.z + (-0.5));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = _1450 * 0.5;
        float _1487 = _1460 * 0.5;
        float _1488 = _1470 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1503 = (dot(vec3(_1042, _1043, _1044), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1513 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4304 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1515 + 1.0))) + _1520) * _1483;
        float _1530 = _1451 * 0.5;
        float _1531 = _1461 * 0.5;
        float _1532 = _1471 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_1042, _1043, _1044), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4337 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1557 + 1.0))) + _1562) * _1484;
        float _1572 = _1452 * 0.5;
        float _1573 = _1462 * 0.5;
        float _1574 = _1472 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_1042, _1043, _1044), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4370 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1599 + 1.0))) + _1604) * _1485;
        _1621 = _1452;
        _1623 = _1451;
        _1624 = _1450;
        _1625 = _1462;
        _1626 = _1461;
        _1627 = _1460;
        _1628 = _1472;
        _1629 = _1471;
        _1630 = _1470;
        _1631 = _1485;
        _1632 = _1484;
        _1633 = _1483;
        _1634 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1635 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1636 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
    }
    else
    {
        _1621 = _1622;
        _1623 = _1622;
        _1624 = _1622;
        _1625 = _1622;
        _1626 = _1622;
        _1627 = _1622;
        _1628 = _1622;
        _1629 = _1622;
        _1630 = _1622;
        _1631 = _1622;
        _1632 = _1622;
        _1633 = _1622;
        _1634 = 0.0;
        _1635 = 0.0;
        _1636 = 0.0;
    }
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1662 = fma(_1291, cbModelParam._m0[30u].z, fma(_1287, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1283));
        float _1666 = fma(_1291, cbModelParam._m0[31u].z, fma(_1287, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1283));
        float _1670 = fma(_1291, cbModelParam._m0[32u].z, fma(_1287, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1283));
        float _1693 = _1283 + _1042;
        float _1694 = _1287 + _1043;
        float _1695 = _1291 + _1044;
        float _1705 = fma(_1695, cbModelParam._m0[30u].z, fma(_1694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1693)) - _1662;
        float _1706 = fma(_1695, cbModelParam._m0[31u].z, fma(_1694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1693)) - _1666;
        float _1707 = fma(_1695, cbModelParam._m0[32u].z, fma(_1694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1693)) - _1670;
        float _1711 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
        float _1724 = ((_1711 * _1705) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1662 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1725 = ((_1711 * _1706) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1666 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1726 = ((_1711 * _1707) / cbModelParam._m0[35u].z) + ((((((_1670 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1728 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        vec4 _1735 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        vec4 _1742 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        vec4 _1749 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        float _1761 = exp2((_1728.w + (-0.5)) * 20.0) * 2.0;
        float _1762 = _1761 * (_1728.x + (-0.5));
        float _1763 = _1761 * (_1728.y + (-0.5));
        float _1764 = _1761 * (_1728.z + (-0.5));
        float _1771 = exp2((_1735.w + (-0.5)) * 20.0) * 2.0;
        float _1772 = _1771 * (_1735.x + (-0.5));
        float _1773 = _1771 * (_1735.y + (-0.5));
        float _1774 = _1771 * (_1735.z + (-0.5));
        float _1781 = exp2((_1742.w + (-0.5)) * 20.0) * 2.0;
        float _1782 = _1781 * (_1742.x + (-0.5));
        float _1783 = _1781 * (_1742.y + (-0.5));
        float _1784 = _1781 * (_1742.z + (-0.5));
        float _1791 = exp2((_1749.w + (-0.5)) * 20.0) * 2.0;
        float _1792 = _1791 * (_1749.x + (-0.5));
        float _1793 = _1791 * (_1749.y + (-0.5));
        float _1794 = _1791 * (_1749.z + (-0.5));
        float _1795 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1796 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1797 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1798 = _1762 * 0.5;
        float _1799 = _1772 * 0.5;
        float _1800 = _1782 * 0.5;
        float _1801 = dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800));
        float _1806 = (_1801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1801);
        float _1814 = (dot(vec3(_1042, _1043, _1044), vec3(_1806 * _1798, _1806 * _1799, _1806 * _1800)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1823 = sqrt(((_1799 * _1799) + (_1798 * _1798)) + (_1800 * _1800)) / (_1795 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1825 = _1824 * 2.0;
        float _1829 = (1.0 - _1824) / (_1824 + 1.0);
        float _4433 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1839 = ((((1.0 - _1830) * (_1825 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1825 + 1.0))) + _1830) * _1795;
        float _1840 = _1763 * 0.5;
        float _1841 = _1773 * 0.5;
        float _1842 = _1783 * 0.5;
        float _1843 = dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842));
        float _1848 = (_1843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1843);
        float _1856 = (dot(vec3(_1042, _1043, _1044), vec3(_1848 * _1840, _1848 * _1841, _1848 * _1842)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842)) / (_1796 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1867 = _1866 * 2.0;
        float _1871 = (1.0 - _1866) / (_1866 + 1.0);
        float _4466 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1881 = ((((1.0 - _1872) * (_1867 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1867 + 1.0))) + _1872) * _1796;
        float _1882 = _1764 * 0.5;
        float _1883 = _1774 * 0.5;
        float _1884 = _1784 * 0.5;
        float _1885 = dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884));
        float _1890 = (_1885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1885);
        float _1898 = (dot(vec3(_1042, _1043, _1044), vec3(_1890 * _1882, _1890 * _1883, _1890 * _1884)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1907 = sqrt(((_1883 * _1883) + (_1882 * _1882)) + (_1884 * _1884)) / (_1797 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1909 = _1908 * 2.0;
        float _1913 = (1.0 - _1908) / (_1908 + 1.0);
        float _4499 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1923 = ((((1.0 - _1914) * (_1909 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1909 + 1.0))) + _1914) * _1797;
        _1931 = _1764;
        _1932 = _1763;
        _1933 = _1762;
        _1934 = _1774;
        _1935 = _1773;
        _1936 = _1772;
        _1937 = _1784;
        _1938 = _1783;
        _1939 = _1782;
        _1940 = _1797;
        _1941 = _1796;
        _1942 = _1795;
        _1943 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)));
        _1944 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)));
        _1945 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)));
    }
    else
    {
        _1931 = _1622;
        _1932 = _1622;
        _1933 = _1622;
        _1934 = _1622;
        _1935 = _1622;
        _1936 = _1622;
        _1937 = _1622;
        _1938 = _1622;
        _1939 = _1622;
        _1940 = _1622;
        _1941 = _1622;
        _1942 = _1622;
        _1943 = 0.0;
        _1944 = 0.0;
        _1945 = 0.0;
    }
    float _1955 = (cbModelParam._m0[1u].x * (_1943 - _1634)) + _1634;
    float _1956 = (cbModelParam._m0[1u].x * (_1944 - _1635)) + _1635;
    float _1957 = (cbModelParam._m0[1u].x * (_1945 - _1636)) + _1636;
    float _1978 = fma(_1957, cbSceneParam._m0[89u].z, fma(_1956, cbSceneParam._m0[89u].y, _1955 * cbSceneParam._m0[89u].x));
    float _1981 = fma(_1957, cbSceneParam._m0[90u].z, fma(_1956, cbSceneParam._m0[90u].y, _1955 * cbSceneParam._m0[90u].x));
    float _1984 = fma(_1957, cbSceneParam._m0[91u].z, fma(_1956, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1955));
    float _1999 = _1227 * 0.5;
    float _2000 = _1228 * 0.5;
    float _2001 = _1229 * 0.5;
    float _2002 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1933, _1936, _1939, _1942));
    float _2005 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1932, _1935, _1938, _1941));
    float _2008 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1931, _1934, _1937, _1940));
    float _2042;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2015 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1621, _1625, _1628, _1631));
        float _2019 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1623, _1626, _1629, _1632));
        float _2023 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1624, _1627, _1630, _1633));
        float _2030 = dot(vec4(cbModelParam._m0[39u]), vec4(_1999, _2000, _2001, 1.0));
        _2042 = dot(vec3(isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0)), isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0)), isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2030) ? 0.0 : (isnan(0.0) ? _2030 : max(0.0, _2030))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2042 = 1.0;
    }
    float _2053;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2044 = dot(vec4(cbModelParam._m0[40u]), vec4(_1999, _2000, _2001, 1.0));
        _2053 = dot(vec3(isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)), isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)), isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2044) ? 0.0 : (isnan(0.0) ? _2044 : max(0.0, _2044))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2053 = 1.0;
    }
    float _2057 = (_2053 * cbModelParam._m0[1u].x) + (_2042 * (1.0 - cbModelParam._m0[1u].x));
    float _2067 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1045);
    float _2068 = isnan(_2067) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2067 : min(cbModelParam._m0[25u].z, _2067));
    float _2148;
    float _2150;
    float _2152;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2115 = fma(_1291, cbModelParam._m0[13u].z, fma(_1287, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1283)) + cbModelParam._m0[13u].w;
        float _2119 = fma(_1291, cbModelParam._m0[14u].z, fma(_1287, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1283)) + cbModelParam._m0[14u].w;
        float _2123 = fma(_1291, cbModelParam._m0[15u].z, fma(_1287, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1283)) + cbModelParam._m0[15u].w;
        float _2126 = fma(_1229, cbModelParam._m0[13u].z, fma(_1228, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1227));
        float _2129 = fma(_1229, cbModelParam._m0[14u].z, fma(_1228, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1227));
        float _2132 = fma(_1229, cbModelParam._m0[15u].z, fma(_1228, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1227));
        float _2160;
        if (_2126 > 0.0)
        {
            _2160 = abs((1.0 - _2115) / _2126);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2115 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2160 = frontier_phi_17_15_ladder;
        }
        float _2384;
        if (_2129 > 0.0)
        {
            _2384 = abs((1.0 - _2119) / _2129);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2119 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2384 = frontier_phi_26_22_ladder;
        }
        float _2641;
        if (_2132 > 0.0)
        {
            _2641 = abs((1.0 - _2123) / _2132);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2123 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2641 = frontier_phi_38_33_ladder;
        }
        float _2643 = isnan(_2384) ? _2160 : (isnan(_2160) ? _2384 : min(_2160, _2384));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _2126) + _2115;
        float _2649 = (_2644 * _2129) + _2119;
        float _2650 = (_2644 * _2132) + _2123;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2653 = (-1.0) - _2651;
        float _2655 = _2651 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2650 > _2655) || ((_2650 < _2653) || ((_2649 > _2655) || ((_2649 < _2653) || ((_2648 < _2653) || (_2648 > _2655))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2778 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2650, cbModelParam._m0[9u].z, fma(_2649, cbModelParam._m0[9u].y, _2648 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2650, cbModelParam._m0[10u].z, fma(_2649, cbModelParam._m0[10u].y, _2648 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2650, cbModelParam._m0[11u].z, fma(_2649, cbModelParam._m0[11u].y, _2648 * cbModelParam._m0[11u].x))), _2068);
            frontier_phi_16_38_ladder = _2778.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2778.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2778.x * cbModelParam._m0[1u].y;
        }
        _2148 = frontier_phi_16_38_ladder_2;
        _2150 = frontier_phi_16_38_ladder_1;
        _2152 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2136 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1227, _1228, _1229), _2068);
        _2148 = _2136.x * cbModelParam._m0[1u].y;
        _2150 = _2136.y * cbModelParam._m0[1u].y;
        _2152 = _2136.z * cbModelParam._m0[1u].y;
    }
    float _2156 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1045);
    float _2157 = isnan(_2156) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2156 : min(cbModelParam._m0[25u].w, _2156));
    float _2247;
    float _2249;
    float _2251;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2211 = fma(_1291, cbModelParam._m0[21u].z, fma(_1287, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1283)) + cbModelParam._m0[21u].w;
        float _2215 = fma(_1291, cbModelParam._m0[22u].z, fma(_1287, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1283)) + cbModelParam._m0[22u].w;
        float _2219 = fma(_1291, cbModelParam._m0[23u].z, fma(_1287, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1283)) + cbModelParam._m0[23u].w;
        float _2222 = fma(_1229, cbModelParam._m0[21u].z, fma(_1228, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1227));
        float _2225 = fma(_1229, cbModelParam._m0[22u].z, fma(_1228, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1227));
        float _2228 = fma(_1229, cbModelParam._m0[23u].z, fma(_1228, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1227));
        float _2389;
        if (_2222 > 0.0)
        {
            _2389 = abs((1.0 - _2211) / _2222);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2222 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2211 + 1.0) / _2222);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2389 = frontier_phi_28_24_ladder;
        }
        float _2668;
        if (_2225 > 0.0)
        {
            _2668 = abs((1.0 - _2215) / _2225);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2225 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2215 + 1.0) / _2225);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2668 = frontier_phi_40_35_ladder;
        }
        float _2881;
        if (_2228 > 0.0)
        {
            _2881 = abs((1.0 - _2219) / _2228);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2228 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2219 + 1.0) / _2228);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2881 = frontier_phi_49_46_ladder;
        }
        float _2883 = isnan(_2668) ? _2389 : (isnan(_2389) ? _2668 : min(_2389, _2668));
        float _2884 = isnan(_2881) ? _2883 : (isnan(_2883) ? _2881 : min(_2883, _2881));
        float _2888 = (_2884 * _2222) + _2211;
        float _2889 = (_2884 * _2225) + _2215;
        float _2890 = (_2884 * _2228) + _2219;
        float _2891 = _2884 * 9.9999997473787516355514526367188e-05;
        float _2892 = (-1.0) - _2891;
        float _2894 = _2891 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2890 > _2894) || ((_2890 < _2892) || ((_2889 > _2894) || ((_2889 < _2892) || ((_2888 < _2892) || (_2888 > _2894))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2890, cbModelParam._m0[17u].z, fma(_2889, cbModelParam._m0[17u].y, _2888 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2890, cbModelParam._m0[18u].z, fma(_2889, cbModelParam._m0[18u].y, _2888 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2890, cbModelParam._m0[19u].z, fma(_2889, cbModelParam._m0[19u].y, _2888 * cbModelParam._m0[19u].x))), _2157);
            frontier_phi_25_49_ladder = _3089.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3089.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3089.x * cbModelParam._m0[1u].z;
        }
        _2247 = frontier_phi_25_49_ladder_2;
        _2249 = frontier_phi_25_49_ladder_1;
        _2251 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2231 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1227, _1228, _1229), _2157);
        _2247 = _2231.x * cbModelParam._m0[1u].z;
        _2249 = _2231.y * cbModelParam._m0[1u].z;
        _2251 = _2231.z * cbModelParam._m0[1u].z;
    }
    float _2264 = (((_1254 * _1203) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2247 - _2148)) + _2148);
    float _2266 = (((_1254 * _1205) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2249 - _2150)) + _2150);
    float _2268 = (((_1254 * _1206) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2251 - _2152)) + _2152);
    float _2271 = fma(_2268, cbSceneParam._m0[89u].z, fma(_2266, cbSceneParam._m0[89u].y, _2264 * cbSceneParam._m0[89u].x));
    float _2274 = fma(_2268, cbSceneParam._m0[90u].z, fma(_2266, cbSceneParam._m0[90u].y, _2264 * cbSceneParam._m0[90u].x));
    float _2277 = fma(_2268, cbSceneParam._m0[91u].z, fma(_2266, cbSceneParam._m0[91u].y, _2264 * cbSceneParam._m0[91u].x));
    vec4 _2285 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1141, _1142));
    float _2287 = _2285.w;
    float _2299 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2287);
    float _2300 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2287);
    float _2301 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2287);
    uvec4 _2305 = floatBitsToUint(cbInstanceData._m0[_290 + 5u]);
    uint _2307 = _2305.x * 14u;
    uint _2308 = _2307 + 13u;
    float _2315 = _1219 + (-1.0);
    float _2320 = (cbLight._m0[_2308].x * _2315) + 1.0;
    float _2321 = (cbLight._m0[_2308].y * _2315) + 1.0;
    float _2322 = (cbLight._m0[_2308].z * _2315) + 1.0;
    float _2323 = (cbLight._m0[_2308].w * _2315) + 1.0;
    uint _2324 = _2307 + 5u;
    float _2330 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
    uint _2334 = _2307 + 4u;
    float _2343 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2347 = _2307 | 1u;
    float _2358 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_1042, _1043, _1044));
    float _2361 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_1042, _1043, _1044));
    float _4635 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _4646 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2366 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * 0.3183098733425140380859375;
    float _2368 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * 0.3183098733425140380859375;
    float _2375 = ((cbLight._m0[_2324].x * _2330) * _2368) + (((cbLight._m0[_2334].x * _2299) * _2343) * _2366);
    float _2376 = ((_2330 * cbLight._m0[_2324].y) * _2368) + (((cbLight._m0[_2334].y * _2300) * _2343) * _2366);
    float _2377 = ((_2330 * cbLight._m0[_2324].z) * _2368) + (((cbLight._m0[_2334].z * _2301) * _2343) * _2366);
    uvec4 _2381 = floatBitsToUint(cbLight._m0[_2307 + 12u]);
    bool _2383 = _2381.x == 0u;
    float _2394;
    float _2396;
    float _2398;
    if (_2383)
    {
        _2394 = _2375;
        _2396 = _2376;
        _2398 = _2377;
    }
    else
    {
        uint _2402 = _2307 + 6u;
        float _2418 = (dot(vec3(cbLight._m0[_2307 + 2u].xyz), vec3(_1042, _1043, _1044)) * 0.5) + 0.5;
        float _2419 = _2418 * _2418;
        float _4657 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2420 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2421 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2394 = (((cbLight._m0[_2402].x * 0.3183098733425140380859375) * _2420) * _2421) + _2375;
        _2396 = (((cbLight._m0[_2402].y * 0.3183098733425140380859375) * _2420) * _2421) + _2376;
        _2398 = (((cbLight._m0[_2402].z * 0.3183098733425140380859375) * _2420) * _2421) + _2377;
    }
    bool _2401 = _2381.y == 0u;
    float _2439;
    float _2441;
    float _2443;
    if (_2401)
    {
        _2439 = _2394;
        _2441 = _2396;
        _2443 = _2398;
    }
    else
    {
        uint _2612 = _2307 + 7u;
        float _2628 = (dot(vec3(cbLight._m0[_2307 + 3u].xyz), vec3(_1042, _1043, _1044)) * 0.5) + 0.5;
        float _2629 = _2628 * _2628;
        float _4673 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2630 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2631 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2439 = (((cbLight._m0[_2612].x * 0.3183098733425140380859375) * _2630) * _2631) + _2394;
        _2441 = (((cbLight._m0[_2612].y * 0.3183098733425140380859375) * _2630) * _2631) + _2396;
        _2443 = (((cbLight._m0[_2612].z * 0.3183098733425140380859375) * _2630) * _2631) + _2398;
    }
    uint _2446 = _2307 + 8u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _1045) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2307].x + _1121;
    float _2462 = cbLight._m0[_2307].y + _1122;
    float _2463 = cbLight._m0[_2307].z + _1123;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2307].xyz));
    float _4689 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _4700 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _2475 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _2476 = dot(vec3(_1042, _1043, _1044), vec3(_2468, _2469, _2470));
    float _4711 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _2480 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2468, _2469, _2470));
    float _4722 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2484 = _2460 * _2460;
    float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
    float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
    float _2497 = 0.959999978542327880859375 - _1200;
    float _2499 = 0.959999978542327880859375 - _1201;
    float _2500 = 0.959999978542327880859375 - _1202;
    float _2507 = 1.0 - _2460;
    float _2518 = (0.5 / (((_2475 * ((_2474 * _2507) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2507) + _2460) * _2474))) * _2474;
    float _4733 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2520 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
    uint _2534 = _2307 + 9u;
    float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _1045) * 0.949999988079071044921875);
    float _2546 = _2545 * _2545;
    float _2547 = cbLight._m0[_2347].x + _1121;
    float _2548 = cbLight._m0[_2347].y + _1122;
    float _2549 = cbLight._m0[_2347].z + _1123;
    float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
    float _2554 = _2553 * _2547;
    float _2555 = _2553 * _2548;
    float _2556 = _2553 * _2549;
    float _2557 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2347].xyz));
    float _4744 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2561 = dot(vec3(_1042, _1043, _1044), vec3(_2554, _2555, _2556));
    float _4755 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _2565 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2554, _2555, _2556));
    float _4766 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2569 = _2546 * _2546;
    float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
    float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
    float _2587 = 1.0 - _2546;
    float _2597 = (0.5 / (((_2475 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2587) + _2546) * _2560))) * _2560;
    float _4777 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2599 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
    float _2609 = (((((_2580 * _2497) + _1203) * cbLight._m0[_2534].x) * _2599) * _2330) + ((((cbLight._m0[_2446].x * _2299) * ((_2496 * _2497) + _1203)) * _2520) * _2343);
    float _2610 = (((((_2580 * _2499) + _1205) * cbLight._m0[_2534].y) * _2599) * _2330) + ((((cbLight._m0[_2446].y * _2300) * ((_2496 * _2499) + _1205)) * _2520) * _2343);
    float _2611 = (((((_2580 * _2500) + _1206) * cbLight._m0[_2534].z) * _2599) * _2330) + ((((cbLight._m0[_2446].z * _2301) * ((_2496 * _2500) + _1206)) * _2520) * _2343);
    float _2673;
    float _2675;
    float _2677;
    if (_2383)
    {
        _2673 = _2609;
        _2675 = _2610;
        _2677 = _2611;
    }
    else
    {
        uint _2679 = _2307 + 2u;
        uint _2683 = _2307 + 10u;
        float _2697 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2679].w)) * _1045) * 0.949999988079071044921875);
        float _2698 = _2697 * _2697;
        float _2699 = cbLight._m0[_2679].x + _1121;
        float _2700 = cbLight._m0[_2679].y + _1122;
        float _2701 = cbLight._m0[_2679].z + _1123;
        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
        float _2706 = _2705 * _2699;
        float _2707 = _2705 * _2700;
        float _2708 = _2705 * _2701;
        float _2709 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2679].xyz));
        float _4788 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2712 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2713 = dot(vec3(_1042, _1043, _1044), vec3(_2706, _2707, _2708));
        float _4799 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2717 = dot(vec3(cbLight._m0[_2679].xyz), vec3(_2706, _2707, _2708));
        float _4810 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2721 = _2698 * _2698;
        float _2725 = ((_2716 * _2716) * (_2721 + (-1.0))) + 1.0;
        float _2732 = exp2(log2(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) * 5.0);
        float _2739 = 1.0 - _2698;
        float _2749 = (0.5 / (((_2475 * ((_2712 * _2739) + _2698)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2739) + _2698) * _2712))) * _2712;
        float _4821 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2751 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2721 / ((_2725 * _2725) * 3.141590118408203125));
        float _2752 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2673 = (((((_2732 * _2497) + _1203) * cbLight._m0[_2683].x) * _2751) * _2752) + _2609;
        _2675 = (((((_2732 * _2499) + _1205) * cbLight._m0[_2683].y) * _2751) * _2752) + _2610;
        _2677 = (((((_2732 * _2500) + _1206) * cbLight._m0[_2683].z) * _2751) * _2752) + _2611;
    }
    float _2787;
    float _2789;
    float _2791;
    if (_2401)
    {
        _2787 = _2673;
        _2789 = _2675;
        _2791 = _2677;
    }
    else
    {
        uint _2798 = _2307 + 3u;
        uint _2802 = _2307 + 11u;
        float _2816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2798].w)) * _1045) * 0.949999988079071044921875);
        float _2817 = _2816 * _2816;
        float _2818 = cbLight._m0[_2798].x + _1121;
        float _2819 = cbLight._m0[_2798].y + _1122;
        float _2820 = cbLight._m0[_2798].z + _1123;
        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
        float _2825 = _2824 * _2818;
        float _2826 = _2824 * _2819;
        float _2827 = _2824 * _2820;
        float _2828 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2798].xyz));
        float _4837 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2831 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2832 = dot(vec3(_1042, _1043, _1044), vec3(_2825, _2826, _2827));
        float _4848 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
        float _2836 = dot(vec3(cbLight._m0[_2798].xyz), vec3(_2825, _2826, _2827));
        float _4859 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2840 = _2817 * _2817;
        float _2844 = ((_2835 * _2835) * (_2840 + (-1.0))) + 1.0;
        float _2851 = exp2(log2(1.0 - (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) * 5.0);
        float _2858 = 1.0 - _2817;
        float _2868 = (0.5 / (((_2475 * ((_2831 * _2858) + _2817)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2858) + _2817) * _2831))) * _2831;
        float _4870 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2870 = (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2840 / ((_2844 * _2844) * 3.141590118408203125));
        float _2871 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2787 = (((((_2851 * _2497) + _1203) * cbLight._m0[_2802].x) * _2870) * _2871) + _2673;
        _2789 = (((((_2851 * _2499) + _1205) * cbLight._m0[_2802].y) * _2870) * _2871) + _2675;
        _2791 = (((((_2851 * _2500) + _1206) * cbLight._m0[_2802].z) * _2870) * _2871) + _2677;
    }
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    if (_2305.y == 0u)
    {
        float _2946 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2947 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2946;
        float _2948 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2946;
        float _2949 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2946;
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.x;
        uint _2973 = uint((float(_2961.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1142) / _2962))) + floor(float(uint(cbSceneParam._m0[85u].x * _1141) / _2962)));
        float _2983 = (log2(_2949 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2984 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        uint _2987 = uint(isnan(14.0) ? _2984 : (isnan(_2984) ? 14.0 : min(_2984, 14.0)));
        uvec4 _2992 = texelFetch(g_lightClusterGridBuffer, int(((_2987 << 2u) + (_2973 << 6u)) >> 2u));
        uint _2993 = _2992.x;
        uint _2994 = _2961.z;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        if (((((1u << ((_2994 >> 4u) & 15u)) + 4294967295u) & _2993) == 0u) || ((_2994 & 240u) == 0u))
        {
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
        }
        else
        {
            float _3095;
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3105;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            uint _3253 = 0u;
            uint _3262;
            bool _3263;
            for (;;)
            {
                _3262 = texelFetch(g_lightClassification, int((((_2987 << 5u) + (_2973 << 9u)) + (_3253 << 2u)) >> 2u)).x;
                _3263 = _3262 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3263)
                {
                    frontier_phi_66_pred = _3247;
                    frontier_phi_66_pred_1 = _3252;
                    frontier_phi_66_pred_2 = _3251;
                    frontier_phi_66_pred_3 = _3250;
                    frontier_phi_66_pred_4 = _3249;
                    frontier_phi_66_pred_5 = _3248;
                }
                else
                {
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    uint _3398;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3262;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    for (;;)
                    {
                        uint _3402 = uint(findLSB(_3398)) + (_3253 << 5u);
                        uint _3399 = (_3398 + 4294967295u) & _3398;
                        uint _3404 = _3402 * 48u;
                        vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3404)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 3u)).x));
                        uint _3424 = (_3402 * 48u) + 4u;
                        vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 3u)).x));
                        uint _3443 = (_3402 * 48u) + 8u;
                        vec3 _3454 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3443)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 2u)).x));
                        float _3458 = _3418.x - _2947;
                        float _3459 = _3418.y - _2948;
                        float _3460 = _3418.z - _2949;
                        float _3461 = dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460));
                        float _3464 = inversesqrt(_3461);
                        float _3465 = _3464 * _3458;
                        float _3466 = _3464 * _3459;
                        float _3467 = _3464 * _3460;
                        float _3468 = dot(vec3(_1160, _1163, _1166), vec3(_3465, _3466, _3467));
                        float _3473 = 1.0 - (_3461 * _3418.w);
                        float _4896 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3474 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                        float _3475 = sqrt(_3461) * _3437.w;
                        float _3478 = 1.39999997615814208984375 / (_3475 + 1.39999997615814208984375);
                        float _3479 = _3478 * _3478;
                        float _3482 = ((1.0 - _3479) * _3468) + _3479;
                        float _3485 = _3475 * _3475;
                        float _3489 = ((isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))) * _3474) / ((_3485 * 0.699999988079071044921875) + 1.0);
                        float _3493 = (-0.0) - _2947;
                        float _3494 = (-0.0) - _2948;
                        float _3495 = (-0.0) - _2949;
                        float _3499 = inversesqrt(dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495)));
                        float _3500 = _3499 * _3493;
                        float _3501 = _3499 * _3494;
                        float _3502 = _3499 * _3495;
                        float _3510 = exp2(log2(1.0 / ((_3485 * 3.5) + 5.0)) * 0.25);
                        float _3511 = 1.0 - _1235;
                        float _3518 = sqrt(1.0 - ((1.0 - (_3511 * _3511)) * (1.0 - (_3510 * _3510))));
                        float _3519 = _3518 * _3518;
                        float _3520 = _3519 * _3519;
                        float _3521 = _3500 + _3465;
                        float _3522 = _3501 + _3466;
                        float _3523 = _3502 + _3467;
                        float _3527 = inversesqrt(dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523)));
                        float _3531 = dot(vec3(_1160, _1163, _1166), vec3(_3500, _3501, _3502));
                        float _4912 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3534 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3535 = dot(vec3(_1160, _1163, _1166), vec3(_3527 * _3521, _3527 * _3522, _3527 * _3523));
                        float _4923 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3538 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3542 = ((_3538 * _3538) * (_3520 + (-1.0))) + 1.0;
                        float _3543 = _3478 * _3519;
                        float _3544 = _3543 * _3543;
                        float _3547 = ((1.0 - _3544) * _3468) + _3544;
                        float _4934 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3548 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                        float _3549 = 1.0 - _3519;
                        float _3559 = (0.5 / (((_3548 * ((_3534 * _3549) + _3519)) + 9.9999999392252902907785028219223e-09) + (((_3548 * _3549) + _3519) * _3534))) * _3548;
                        float _4945 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3570 = (((_3520 * 3.1415927410125732421875) * (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) / ((_3542 * _3542) * ((_3485 * 2.1991131305694580078125) + 3.141590118408203125))) * _3474;
                        _3322 = (_3489 * _3437.x) + _3395;
                        _3323 = (_3489 * _3437.y) + _3396;
                        _3324 = (_3489 * _3437.z) + _3397;
                        _3319 = (_3570 * _3454.x) + _3392;
                        _3320 = (_3570 * _3454.y) + _3393;
                        _3321 = (_3570 * _3454.z) + _3394;
                        if (_3399 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3399;
                        }
                    }
                    frontier_phi_66_pred = _3319;
                    frontier_phi_66_pred_1 = _3324;
                    frontier_phi_66_pred_2 = _3323;
                    frontier_phi_66_pred_3 = _3322;
                    frontier_phi_66_pred_4 = _3321;
                    frontier_phi_66_pred_5 = _3320;
                }
                _3095 = frontier_phi_66_pred;
                _3105 = frontier_phi_66_pred_1;
                _3103 = frontier_phi_66_pred_2;
                _3101 = frontier_phi_66_pred_3;
                _3099 = frontier_phi_66_pred_4;
                _3097 = frontier_phi_66_pred_5;
                uint _3254 = _3253 + 1u;
                if (_3254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3247 = _3095;
                    _3248 = _3097;
                    _3249 = _3099;
                    _3250 = _3101;
                    _3251 = _3103;
                    _3252 = _3105;
                    _3253 = _3254;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
        }
        uvec4 _3108 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3109 = _3108.z;
        uint _3111 = (_3109 >> 8u) & 15u;
        float _3215;
        float _3217;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        if (((4294967295u << _3111) & _2993) == 0u)
        {
            _3215 = _3094;
            _3217 = _3096;
            _3219 = _3098;
            _3221 = _3100;
            _3223 = _3102;
            _3225 = _3104;
        }
        else
        {
            float _3240 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
            float _3241 = _3240 * _2947;
            float _3242 = _3240 * _2948;
            float _3243 = _3240 * _2949;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3111 < ((_3109 >> 12u) & 15u))
            {
                float _3216;
                float _3218;
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3375 = _3094;
                float _3376 = _3096;
                float _3377 = _3098;
                float _3378 = _3100;
                float _3379 = _3102;
                float _3380 = _3104;
                uint _3381 = _3111;
                uint _3390;
                bool _3391;
                for (;;)
                {
                    _3390 = texelFetch(g_lightClassification, int((((_2987 << 5u) + (_2973 << 9u)) + (_3381 << 2u)) >> 2u)).x;
                    _3391 = _3390 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3391)
                    {
                        frontier_phi_77_pred = _3380;
                        frontier_phi_77_pred_1 = _3379;
                        frontier_phi_77_pred_2 = _3378;
                        frontier_phi_77_pred_3 = _3377;
                        frontier_phi_77_pred_4 = _3376;
                        frontier_phi_77_pred_5 = _3375;
                    }
                    else
                    {
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3877;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3597 = _3375;
                        float _3598 = _3376;
                        float _3599 = _3377;
                        float _3600 = _3378;
                        float _3601 = _3379;
                        float _3602 = _3380;
                        uint _3603 = _3390;
                        uint _3604;
                        vec4 _3629;
                        float _3630;
                        vec4 _3645;
                        vec3 _3657;
                        vec4 _3672;
                        vec4 _3687;
                        float _3733;
                        bool _3734;
                        for (;;)
                        {
                            uint _3614 = ((_3381 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3603));
                            _3604 = (_3603 + 4294967295u) & _3603;
                            uint _3616 = _3614 * 40u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            _3630 = _3629.w;
                            uint _3632 = (_3614 * 40u) + 4u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3614 * 40u) + 8u;
                            _3657 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x));
                            uint _3659 = (_3614 * 40u) + 16u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3674 = (_3614 * 40u) + 20u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3689 = (_3614 * 40u) + 24u;
                            vec4 _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3708 = (_3614 * 40u) + 28u;
                            vec4 _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            _3733 = fma(_2949, _3721.z, fma(_2948, _3721.y, _3721.x * _2947)) + _3721.w;
                            _3734 = !((fma(_2949, _3702.z, fma(_2948, _3702.y, _3702.x * _2947)) + _3702.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3734)
                            {
                                float _3761 = _3629.x - _2947;
                                float _3762 = _3629.y - _2948;
                                float _3763 = _3629.z - _2949;
                                float _3764 = dot(vec3(_3761, _3762, _3763), vec3(_3761, _3762, _3763));
                                float _3767 = inversesqrt(_3764);
                                float _3768 = _3767 * _3761;
                                float _3769 = _3767 * _3762;
                                float _3770 = _3767 * _3763;
                                float _3774 = 1.0 - (_3764 / (_3630 * _3630));
                                float _4956 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3775 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3779 = sqrt(_3764) * _3645.w;
                                float _3781 = 1.39999997615814208984375 / (_3779 + 1.39999997615814208984375);
                                float _3782 = _3781 * _3781;
                                float _3785 = ((1.0 - _3782) * dot(vec3(_3768, _3769, _3770), vec3(_1160, _1163, _1166))) + _3782;
                                float _3788 = _3779 * _3779;
                                float _3792 = (fma(_2949, _3672.z, fma(_2948, _3672.y, _3672.x * _2947)) + _3672.w) / _3733;
                                float _3793 = (fma(_2949, _3687.z, fma(_2948, _3687.y, _3687.x * _2947)) + _3687.w) / _3733;
                                float _3797 = 1.0 - dot(vec2(_3792, _3793), vec2(_3792, _3793));
                                float _4972 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3798 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3799 = _3798 * (((isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0))) * _3775) / ((_3788 * 0.699999988079071044921875) + 1.0));
                                float _3811 = exp2(log2(1.0 / ((_3788 * 3.5) + 5.0)) * 0.25);
                                float _3812 = 1.0 - _1235;
                                float _3819 = sqrt(1.0 - ((1.0 - (_3812 * _3812)) * (1.0 - (_3811 * _3811))));
                                float _3820 = _3819 * _3819;
                                float _3821 = _3820 * _3820;
                                float _3822 = _3768 - _3241;
                                float _3823 = _3769 - _3242;
                                float _3824 = _3770 - _3243;
                                float _3828 = inversesqrt(dot(vec3(_3822, _3823, _3824), vec3(_3822, _3823, _3824)));
                                float _3832 = dot(vec3(_1160, _1163, _1166), vec3((-0.0) - _3241, (-0.0) - _3242, (-0.0) - _3243));
                                float _4983 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3835 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3836 = dot(vec3(_1160, _1163, _1166), vec3(_3828 * _3822, _3828 * _3823, _3828 * _3824));
                                float _4994 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3839 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3843 = ((_3839 * _3839) * (_3821 + (-1.0))) + 1.0;
                                float _3844 = _3781 * _3820;
                                float _3845 = _3844 * _3844;
                                float _3851 = ((1.0 - _3845) * dot(vec3(_1160, _1163, _1166), vec3(_3768, _3769, _3770))) + _3845;
                                float _5005 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                                float _3853 = 1.0 - _3820;
                                float _3863 = (0.5 / (((_3852 * ((_3835 * _3853) + _3820)) + 9.9999999392252902907785028219223e-09) + (((_3852 * _3853) + _3820) * _3835))) * _3852;
                                float _5016 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3873 = (_3798 * _3775) * (((_3821 * 3.1415927410125732421875) * (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0)))) / ((_3843 * _3843) * ((_3788 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3799 * _3645.y;
                                frontier_phi_83_pred_1 = _3799 * _3645.x;
                                frontier_phi_83_pred_2 = _3873 * _3657.z;
                                frontier_phi_83_pred_3 = _3873 * _3657.y;
                                frontier_phi_83_pred_4 = _3873 * _3657.x;
                                frontier_phi_83_pred_5 = _3799 * _3645.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3881 = frontier_phi_83_pred;
                            _3880 = frontier_phi_83_pred_1;
                            _3879 = frontier_phi_83_pred_2;
                            _3878 = frontier_phi_83_pred_3;
                            _3877 = frontier_phi_83_pred_4;
                            _3882 = frontier_phi_83_pred_5;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            _3584 = _3877 + _3597;
                            _3585 = _3878 + _3598;
                            _3586 = _3879 + _3599;
                            if (_3604 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3604;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3589;
                        frontier_phi_77_pred_1 = _3588;
                        frontier_phi_77_pred_2 = _3587;
                        frontier_phi_77_pred_3 = _3586;
                        frontier_phi_77_pred_4 = _3585;
                        frontier_phi_77_pred_5 = _3584;
                    }
                    _3226 = frontier_phi_77_pred;
                    _3224 = frontier_phi_77_pred_1;
                    _3222 = frontier_phi_77_pred_2;
                    _3220 = frontier_phi_77_pred_3;
                    _3218 = frontier_phi_77_pred_4;
                    _3216 = frontier_phi_77_pred_5;
                    uint _3382 = _3381 + 1u;
                    if (_3382 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3375 = _3216;
                        _3376 = _3218;
                        _3377 = _3220;
                        _3378 = _3222;
                        _3379 = _3224;
                        _3380 = _3226;
                        _3381 = _3382;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3220;
                frontier_phi_58_59_ladder_1 = _3226;
                frontier_phi_58_59_ladder_2 = _3224;
                frontier_phi_58_59_ladder_3 = _3222;
                frontier_phi_58_59_ladder_4 = _3218;
                frontier_phi_58_59_ladder_5 = _3216;
            }
            else
            {
                frontier_phi_58_59_ladder = _3098;
                frontier_phi_58_59_ladder_1 = _3104;
                frontier_phi_58_59_ladder_2 = _3102;
                frontier_phi_58_59_ladder_3 = _3100;
                frontier_phi_58_59_ladder_4 = _3096;
                frontier_phi_58_59_ladder_5 = _3094;
            }
            _3215 = frontier_phi_58_59_ladder_5;
            _3217 = frontier_phi_58_59_ladder_4;
            _3219 = frontier_phi_58_59_ladder;
            _3221 = frontier_phi_58_59_ladder_3;
            _3223 = frontier_phi_58_59_ladder_2;
            _3225 = frontier_phi_58_59_ladder_1;
        }
        float _3230 = isnan(1.0) ? _1219 : (isnan(_1219) ? 1.0 : min(_1219, 1.0));
        _3006 = (_3230 * _3221) + _2439;
        _3008 = (_3230 * _3223) + _2441;
        _3010 = (_3230 * _3225) + _2443;
        _3012 = ((_3215 * _1203) * _3230) + _2787;
        _3014 = ((_3217 * _1205) * _3230) + _2789;
        _3016 = ((_3219 * _1206) * _3230) + _2791;
    }
    else
    {
        _3006 = _2439;
        _3008 = _2441;
        _3010 = _2443;
        _3012 = _2787;
        _3014 = _2789;
        _3016 = _2791;
    }
    float _5032 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _5043 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _5054 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _3033 = ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_3006 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1219))) + ((_3012 + ((isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0))) * _2057)) * cbPerFrame._m0[3u].x);
    float _3034 = ((isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_3008 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1219))) + ((_3014 + ((isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0))) * _2057)) * cbPerFrame._m0[3u].x);
    float _3035 = ((isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0))) * (_3010 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1219))) + ((_3016 + ((isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))) * _2057)) * cbPerFrame._m0[3u].x);
    uint _3036 = _290 + 6u;
    float _3044 = _1141 / cbSceneParam._m0[86u].x;
    float _3045 = _1142 / cbSceneParam._m0[86u].y;
    vec4 _3059 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3044, _3045, (log2((isnan(cbSceneParam._m0[77u].w) ? _1064 : (isnan(_1064) ? cbSceneParam._m0[77u].w : min(_1064, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3061 = _3059.x;
    float _3062 = _3059.y;
    float _3063 = _3059.z;
    float _3064 = _3059.w;
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    if (_1064 > cbSceneParam._m0[78u].w)
    {
        float _3119 = isnan(_1064) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1064 : min(cbSceneParam._m0[80u].w, _1064));
        float _3120 = _3119 / _1064;
        float _3131 = _3120 * _1114;
        float _3132 = _1115 * _3120;
        float _3133 = (-0.0) - _3132;
        float _3135 = _3120 * _1116;
        float _3137 = (cbSceneParam._m0[77u].w * _3133) / _3119;
        float _3138 = _3137 + cbSceneParam._m0[79u].w;
        float _3139 = cbSceneParam._m0[79u].w - _3132;
        float _3145 = sqrt(((_3131 * _3131) + (_3132 * _3132)) + (_3135 * _3135));
        float _3148 = (1.0 - (cbSceneParam._m0[77u].w / _3119)) * _3145;
        float _3153 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3155 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3332;
        if (abs((_3133 - _3137) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3332 = ((((_3138 > 0.0) ? exp2(_3153 * _3138) : (2.0 - exp2(_3155 * _3138))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3148;
        }
        else
        {
            float _3276 = 1.0 / cbSceneParam._m0[80u].x;
            float _3277 = isnan(_3139) ? _3138 : (isnan(_3138) ? _3139 : max(_3138, _3139));
            float _3278 = isnan(_3139) ? _3138 : (isnan(_3138) ? _3139 : min(_3138, _3139));
            float _3287 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : min(_3277, 0.0));
            float _3288 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : min(_3278, 0.0));
            _3332 = ((abs(_3145 / _3133) * cbSceneParam._m0[80u].y) * ((((_3287 - _3288) * 2.0) - ((exp2(_3153 * (isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0)))) - exp2(_3153 * (isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0))))) * _3276)) - ((exp2(_3155 * _3287) - exp2(_3155 * _3288)) * _3276))) + (_3148 * cbSceneParam._m0[80u].z);
        }
        vec4 _3334 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3044, _3045, 1.0), 0.0);
        float _3343 = exp2((_3332 * (-1.44269502162933349609375)) * (1.0 - _3334.w));
        float _3344 = log2(_3343);
        float _3360 = log2(_3064);
        _3157 = (exp2(_3360 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].x)) * _3334.x) / cbSceneParam._m0[78u].x)) + _3061;
        _3159 = (exp2(_3360 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].y)) * _3334.y) / cbSceneParam._m0[78u].y)) + _3062;
        _3161 = (exp2(_3360 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].z)) * _3334.z) / cbSceneParam._m0[78u].z)) + _3063;
        _3163 = _3343 * _3064;
    }
    else
    {
        _3157 = _3061;
        _3159 = _3062;
        _3161 = _3063;
        _3163 = _3064;
    }
    bool _3370;
    vec4 _3173;
    vec4 _3195;
    float _3197;
    float _3201;
    float _3202;
    float _3203;
    float _3204;
    bool _3214;
    for (;;)
    {
        _3173 = cbMatDynParam._m0[0u];
        float _3175 = roundEven(_3173.y);
        bool _3176 = _3175 == 3.0;
        float _3177 = log2(_3163);
        float _3184 = exp2(_3177 * cbSceneParam._m0[78u].x) * _3033;
        float _3185 = exp2(_3177 * cbSceneParam._m0[78u].y) * _3034;
        float _3186 = exp2(_3177 * cbSceneParam._m0[78u].z) * _3035;
        float _3193 = _1130 + (-0.5);
        _3195 = cbMtdParam._m0[1u];
        _3197 = _3195.y * _3193;
        float _3200 = (_3175 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3201 = _3200 * (_3176 ? _3184 : (_3184 + (cbSceneParam._m0[72u].w * _3157)));
        _3202 = _3200 * (_3176 ? _3185 : (_3185 + (cbSceneParam._m0[72u].w * _3159)));
        _3203 = _3200 * (_3176 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3161)));
        _3204 = _3193 * 0.999000012874603271484375;
        _3214 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3214)
        {
            if ((cbInstanceData._m0[_290 + 7u].x + _3204) < 0.5)
            {
                _3370 = true;
                break;
            }
        }
        uint _3311 = _1179 + uint(_3173.w);
        if ((cbInstanceData._m0[_3311].w < 1.0) && ((cbInstanceData._m0[_3311].w + _3204) < 0.5))
        {
            _3370 = true;
            break;
        }
        if ((_3197 + 1.0) < _3195.x)
        {
            _3370 = true;
            break;
        }
        _3370 = false;
        break;
    }
    float _3575;
    if (_3370)
    {
        discard_state = true;
        _3575 = 0.0;
    }
    else
    {
        _3575 = cbInstanceData._m0[_3036].w;
    }
    SV_Target.x = _3201;
    SV_Target.y = _3202;
    SV_Target.z = _3203;
    SV_Target.w = _3575;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3036].w;
    discard_exit();
}


