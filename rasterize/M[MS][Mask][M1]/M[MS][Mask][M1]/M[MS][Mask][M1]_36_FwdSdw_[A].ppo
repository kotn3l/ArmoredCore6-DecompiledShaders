#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1377;
float _4040;
float _4041;
float _4042;
float _4043;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _301.x * cbMtdParam._m0[11u].x;
    float _308 = _301.y * cbMtdParam._m0[11u].y;
    float _309 = _301.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _382 = _380.x;
    float _394 = dot(vec4(_382, _380.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _411 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_382 - _394) * cbMtdParam._m0[23u].w) + _394) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4052 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _419 = (_412 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307;
    float _420 = (_412 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308;
    float _421 = (_412 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309;
    vec4 _440 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _460 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _477 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    float _481 = _477.z;
    float _490 = ((_460.z - _481) * _412) + _481;
    float _493 = ((((_460.x - _479) * _412) + _479) * 2.0) + (-1.0);
    float _495 = ((((_460.y - _480) * _412) + _480) * 2.0) + (-1.0);
    float _496 = dot(vec2(_493, _495), vec2(_493, _495));
    float _4063 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _544 = _542.x;
    float _545 = 1.0 - _544;
    float _554 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _557 = ((isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : min(_554, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _566 = (_557 - ((((((_544 - _545) * cbMtdParam._m0[24u].z) + _545) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _557))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4084 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _574 = (_567 * ((_440.x * cbMtdParam._m0[18u].x) - _419)) + _419;
    float _575 = (_567 * ((_440.y * cbMtdParam._m0[18u].y) - _420)) + _420;
    float _576 = (_567 * ((_440.z * cbMtdParam._m0[18u].z) - _421)) + _421;
    vec4 _588 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _590 = _588.x;
    float _591 = 1.0 - _590;
    float _616 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_590 - _591) * cbMtdParam._m0[24u].w) + _591) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4095 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _625 = ((((cbMtdParam._m0[10u].x - _574) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _617) + _574;
    float _626 = ((((cbMtdParam._m0[10u].y - _575) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _617) + _575;
    float _627 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _576)) * _617) + _576;
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _655 = _653.x;
    float _673 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _655) * _412) + _655;
    float _677 = ((_639.x - _673) * cbMtdParam._m0[19u].z) + _673;
    float _679 = _677 - (_677 * _567);
    float _681 = _679 - (_679 * _617);
    float _685 = (cbMtdParam._m0[19u].w * (_517.z - _490)) + _490;
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _706 = (_699.x * 2.0) + (-1.0);
    float _707 = (_699.y * 2.0) + (-1.0);
    float _708 = dot(vec2(_706, _707), vec2(_706, _707));
    float _4106 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _716 = (_567 * (_699.z - _685)) + _685;
    float _719 = ((cbMtdParam._m0[23u].x - _716) * _617) + _716;
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _744 = (_738.x * 2.0) + (-1.0);
    float _745 = (_738.y * 2.0) + (-1.0);
    float _746 = dot(vec2(_744, _745), vec2(_744, _745));
    float _4117 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _754 = (((_517.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _493;
    float _755 = (((_517.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _495;
    float _767 = (((_706 - _754) + (cbMtdParam._m0[21u].x * _754)) * _567) + _754;
    float _768 = (((_707 - _755) + (cbMtdParam._m0[21u].x * _755)) * _567) + _755;
    float _769 = (_567 * (sqrt(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) - _501)) + _501;
    float _780 = (((_744 - _767) + (_767 * cbMtdParam._m0[22u].z)) * _617) + _767;
    float _781 = (((_745 - _768) + (_768 * cbMtdParam._m0[22u].z)) * _617) + _768;
    float _782 = ((sqrt(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) - _769) * _617) + _769;
    float _784 = cbMtdParam._m0[22u].x + _517.w;
    float _787 = fma(_782, _248 * NORMAL.x, fma(_781, _255 * TANGENT.x, (_241 * _233) * _780));
    float _790 = fma(_782, _248 * NORMAL.y, fma(_781, _255 * TANGENT.y, (_241 * _234) * _780));
    float _793 = fma(_782, _248 * NORMAL.z, fma(_781, _255 * TANGENT.z, (_241 * _235) * _780));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _4128 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _801 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4150 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4161 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4172 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4183 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _806 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _820 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _870 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _860);
    float _871 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _860);
    float _872 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _860);
    float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
    float _877 = _870 * _876;
    float _878 = _871 * _876;
    float _879 = _872 * _876;
    vec4 _884 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _886 = _884.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1058 = sqrt(((_870 * _870) + (_871 * _871)) + (_872 * _872));
        float _1064 = (cbMatDynParam._m0[5u].x * _1058) + cbMatDynParam._m0[5u].y;
        float _4194 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1069 = (cbMatDynParam._m0[5u].z * _1058) + cbMatDynParam._m0[5u].w;
        float _4205 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) - _1065)) + _1065) < ((_886 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _897 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _898 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _916 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _919 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _922 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _935 = _261 + 9u;
    uint _936 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * cbInstanceData._m0[_936].z;
    float _4216 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _4227 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _948 = 1.0 - _806;
    float _949 = _945 * _948;
    float _950 = _946 * _948;
    float _951 = _947 * _948;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _806;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _806;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _806;
    float _959 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    vec4 _971 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _897, cbSceneParam._m0[86u].y * _898));
    float _975 = ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * TEXCOORD_5.w) * _971.x;
    float _976 = dot(vec3(_798, _799, _800), vec3(_877, _878, _879));
    float _979 = _976 * 2.0;
    float _983 = (_979 * _798) - _877;
    float _984 = (_979 * _799) - _878;
    float _985 = (_979 * _800) - _879;
    float _989 = abs(dot(vec3(_877, _878, _879), vec3(_798, _799, _800)));
    float _4249 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _991 = sqrt(_801);
    float _1004 = exp2((_991 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_991 * 3.0));
    float _1010 = (1.0 - _1004) * ((_991 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1011 = _1004 * _991;
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1376;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1101 = fma(_1047, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039));
        float _1105 = fma(_1047, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039));
        float _1109 = fma(_1047, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039));
        float _1134 = _1039 + _798;
        float _1135 = _1043 + _799;
        float _1136 = _1047 + _800;
        float _1146 = fma(_1136, cbModelParam._m0[26u].z, fma(_1135, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1134)) - _1101;
        float _1147 = fma(_1136, cbModelParam._m0[27u].z, fma(_1135, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1134)) - _1105;
        float _1148 = fma(_1136, cbModelParam._m0[28u].z, fma(_1135, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1134)) - _1109;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1101 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1105 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[34u].z) + ((((((_1109 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1204 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1170.x + (-0.5));
        float _1206 = _1204 * (_1170.y + (-0.5));
        float _1207 = _1204 * (_1170.z + (-0.5));
        float _1214 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1177.x + (-0.5));
        float _1216 = _1214 * (_1177.y + (-0.5));
        float _1217 = _1214 * (_1177.z + (-0.5));
        float _1224 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1184.x + (-0.5));
        float _1226 = _1224 * (_1184.y + (-0.5));
        float _1227 = _1224 * (_1184.z + (-0.5));
        float _1234 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1191.x + (-0.5));
        float _1236 = _1234 * (_1191.y + (-0.5));
        float _1237 = _1234 * (_1191.z + (-0.5));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = _1205 * 0.5;
        float _1242 = _1215 * 0.5;
        float _1243 = _1225 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1258 = (dot(vec3(_798, _799, _800), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1268 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4297 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1270 + 1.0))) + _1275) * _1238;
        float _1285 = _1206 * 0.5;
        float _1286 = _1216 * 0.5;
        float _1287 = _1226 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_798, _799, _800), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4330 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1312 + 1.0))) + _1317) * _1239;
        float _1327 = _1207 * 0.5;
        float _1328 = _1217 * 0.5;
        float _1329 = _1227 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_798, _799, _800), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4363 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1354 + 1.0))) + _1359) * _1240;
        _1376 = _1207;
        _1378 = _1206;
        _1379 = _1205;
        _1380 = _1217;
        _1381 = _1216;
        _1382 = _1215;
        _1383 = _1227;
        _1384 = _1226;
        _1385 = _1225;
        _1386 = _1240;
        _1387 = _1239;
        _1388 = _1238;
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
    }
    else
    {
        _1376 = _1377;
        _1378 = _1377;
        _1379 = _1377;
        _1380 = _1377;
        _1381 = _1377;
        _1382 = _1377;
        _1383 = _1377;
        _1384 = _1377;
        _1385 = _1377;
        _1386 = _1377;
        _1387 = _1377;
        _1388 = _1377;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1047, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039));
        float _1423 = fma(_1047, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039));
        float _1427 = fma(_1047, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039));
        float _1450 = _1039 + _798;
        float _1451 = _1043 + _799;
        float _1452 = _1047 + _800;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_798, _799, _800), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4426 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_798, _799, _800), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4459 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_798, _799, _800), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4492 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1377;
        _1689 = _1377;
        _1690 = _1377;
        _1691 = _1377;
        _1692 = _1377;
        _1693 = _1377;
        _1694 = _1377;
        _1695 = _1377;
        _1696 = _1377;
        _1697 = _1377;
        _1698 = _1377;
        _1699 = _1377;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1389)) + _1389;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1390)) + _1390;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1391)) + _1391;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _983 * 0.5;
    float _1757 = _984 * 0.5;
    float _1758 = _985 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1376, _1380, _1383, _1386));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1801 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1814 = (_1810 * cbModelParam._m0[1u].x) + (_1799 * (1.0 - cbModelParam._m0[1u].x));
    float _1824 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1824 : min(cbModelParam._m0[25u].z, _1824));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1047, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1047, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1047, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_985, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983));
        float _1886 = fma(_985, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983));
        float _1889 = fma(_985, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1917 = frontier_phi_17_15_ladder;
        }
        float _2088;
        if (_1886 > 0.0)
        {
            _2088 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2088 = frontier_phi_26_22_ladder;
        }
        float _2383;
        if (_1889 > 0.0)
        {
            _2383 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2383 = frontier_phi_38_33_ladder;
        }
        float _2385 = isnan(_2088) ? _1917 : (isnan(_1917) ? _2088 : min(_1917, _2088));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1883) + _1872;
        float _2391 = (_2386 * _1886) + _1876;
        float _2392 = (_2386 * _1889) + _1880;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2393;
        float _2397 = _2393 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 > _2397) || ((_2391 < _2395) || ((_2390 < _2395) || (_2390 > _2397))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2392, cbModelParam._m0[9u].z, fma(_2391, cbModelParam._m0[9u].y, _2390 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2392, cbModelParam._m0[10u].z, fma(_2391, cbModelParam._m0[10u].y, _2390 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2392, cbModelParam._m0[11u].z, fma(_2391, cbModelParam._m0[11u].y, _2390 * cbModelParam._m0[11u].x))), _1825);
            frontier_phi_16_38_ladder = _2537.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2537.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_16_38_ladder_2;
        _1907 = frontier_phi_16_38_ladder_1;
        _1909 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_983, _984, _985), _1825);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2003;
    float _2005;
    float _2007;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1967 = fma(_1047, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039)) + cbModelParam._m0[21u].w;
        float _1971 = fma(_1047, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039)) + cbModelParam._m0[22u].w;
        float _1975 = fma(_1047, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039)) + cbModelParam._m0[23u].w;
        float _1978 = fma(_985, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983));
        float _1981 = fma(_985, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983));
        float _1984 = fma(_985, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983));
        float _2093;
        if (_1978 > 0.0)
        {
            _2093 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2093 = frontier_phi_28_24_ladder;
        }
        float _2410;
        if (_1981 > 0.0)
        {
            _2410 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2410 = frontier_phi_40_35_ladder;
        }
        float _2748;
        if (_1984 > 0.0)
        {
            _2748 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2748 = frontier_phi_50_47_ladder;
        }
        float _2750 = isnan(_2410) ? _2093 : (isnan(_2093) ? _2410 : min(_2093, _2410));
        float _2751 = isnan(_2748) ? _2750 : (isnan(_2750) ? _2748 : min(_2750, _2748));
        float _2755 = (_2751 * _1978) + _1967;
        float _2756 = (_2751 * _1981) + _1971;
        float _2757 = (_2751 * _1984) + _1975;
        float _2758 = _2751 * 9.9999997473787516355514526367188e-05;
        float _2759 = (-1.0) - _2758;
        float _2761 = _2758 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2757 > _2761) || ((_2757 < _2759) || ((_2756 > _2761) || ((_2756 < _2759) || ((_2755 < _2759) || (_2755 > _2761))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2757, cbModelParam._m0[17u].z, fma(_2756, cbModelParam._m0[17u].y, _2755 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2757, cbModelParam._m0[18u].z, fma(_2756, cbModelParam._m0[18u].y, _2755 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2757, cbModelParam._m0[19u].z, fma(_2756, cbModelParam._m0[19u].y, _2755 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_25_50_ladder = _2879.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2879.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2879.x * cbModelParam._m0[1u].z;
        }
        _2003 = frontier_phi_25_50_ladder_2;
        _2005 = frontier_phi_25_50_ladder_1;
        _2007 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_983, _984, _985), _1914);
        _2003 = _1987.x * cbModelParam._m0[1u].z;
        _2005 = _1987.y * cbModelParam._m0[1u].z;
        _2007 = _1987.z * cbModelParam._m0[1u].z;
    }
    float _2020 = (((_1010 * _959) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2022 = (((_1010 * _961) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2024 = (((_1010 * _962) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_2007 - _1909)) + _1909);
    float _2027 = fma(_2024, cbSceneParam._m0[89u].z, fma(_2022, cbSceneParam._m0[89u].y, _2020 * cbSceneParam._m0[89u].x));
    float _2030 = fma(_2024, cbSceneParam._m0[90u].z, fma(_2022, cbSceneParam._m0[90u].y, _2020 * cbSceneParam._m0[90u].x));
    float _2033 = fma(_2024, cbSceneParam._m0[91u].z, fma(_2022, cbSceneParam._m0[91u].y, _2020 * cbSceneParam._m0[91u].x));
    float _2067 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2080 = _2067 / _2079;
    float _2081 = _2071 / _2079;
    float _2082 = _2075 / _2079;
    float _2229;
    float _2230;
    float _2231;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2109 = ((uint(_2082 > cbSceneParam._m0[59u].y) + uint(_2082 > cbSceneParam._m0[59u].x)) + uint(_2082 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2110 = _2109 + 43u;
        uint _2118 = _2109 + 44u;
        uint _2126 = _2109 + 45u;
        uint _2134 = _2109 + 46u;
        float _2145 = fma(_2079, cbSceneParam._m0[_2110].w, fma(_2075, cbSceneParam._m0[_2110].z, fma(_2071, cbSceneParam._m0[_2110].y, _2067 * cbSceneParam._m0[_2110].x)));
        float _2149 = fma(_2079, cbSceneParam._m0[_2118].w, fma(_2075, cbSceneParam._m0[_2118].z, fma(_2071, cbSceneParam._m0[_2118].y, _2067 * cbSceneParam._m0[_2118].x)));
        float _2157 = fma(_2079, cbSceneParam._m0[_2134].w, fma(_2075, cbSceneParam._m0[_2134].z, fma(_2071, cbSceneParam._m0[_2134].y, _2067 * cbSceneParam._m0[_2134].x)));
        float _2162 = cbSceneParam._m0[33u].z * _2157;
        float _2164 = cbSceneParam._m0[33u].w * _2157;
        float _2167 = fma(_2079, cbSceneParam._m0[_2126].w, fma(_2075, cbSceneParam._m0[_2126].z, fma(_2071, cbSceneParam._m0[_2126].y, _2067 * cbSceneParam._m0[_2126].x))) / _2157;
        float _2215 = (cbSceneParam._m0[33u].x - sqrt(((_2081 * _2081) + (_2080 * _2080)) + (_2082 * _2082))) * cbSceneParam._m0[33u].y;
        float _4618 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2222 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 + _2145) / _2157, (_2164 + _2149) / _2157), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2164 + _2145) / _2157, (_2149 - _2162) / _2157), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 - _2162) / _2157, (_2149 - _2164) / _2157), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 - _2164) / _2157, (_2162 + _2149) / _2157), _2167), 0.0)).x), vec4(0.25)));
        _2229 = 1.0 - (_2222 * cbSceneParam._m0[34u].x);
        _2230 = 1.0 - (_2222 * cbSceneParam._m0[34u].y);
        _2231 = 1.0 - (_2222 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2229 = 1.0;
        _2230 = 1.0;
        _2231 = 1.0;
    }
    float _2295;
    float _2297;
    float _2299;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2283 = fma(_2079, cbSceneParam._m0[63u].w, fma(_2075, cbSceneParam._m0[63u].z, fma(_2071, cbSceneParam._m0[63u].y, _2067 * cbSceneParam._m0[63u].x)));
        float _2284 = fma(_2079, cbSceneParam._m0[60u].w, fma(_2075, cbSceneParam._m0[60u].z, fma(_2071, cbSceneParam._m0[60u].y, _2067 * cbSceneParam._m0[60u].x))) / _2283;
        float _2285 = fma(_2079, cbSceneParam._m0[61u].w, fma(_2075, cbSceneParam._m0[61u].z, fma(_2071, cbSceneParam._m0[61u].y, _2067 * cbSceneParam._m0[61u].x))) / _2283;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2284 >= cbSceneParam._m0[64u].x) && (_2285 >= cbSceneParam._m0[64u].y)) && (_2284 <= cbSceneParam._m0[64u].z)) && (_2285 <= cbSceneParam._m0[64u].w))
        {
            float _2423 = fma(_2079, cbSceneParam._m0[62u].w, fma(_2075, cbSceneParam._m0[62u].z, fma(_2071, cbSceneParam._m0[62u].y, _2067 * cbSceneParam._m0[62u].x))) / _2283;
            float _2427 = isnan(cbSceneParam._m0[41u].w) ? _2423 : (isnan(_2423) ? cbSceneParam._m0[41u].w : max(_2423, cbSceneParam._m0[41u].w));
            float _2470 = (cbSceneParam._m0[33u].x - sqrt(((_2081 * _2081) + (_2080 * _2080)) + (_2082 * _2082))) * cbSceneParam._m0[33u].y;
            float _4634 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
            float _2477 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2284, cbSceneParam._m0[33u].w + _2285), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2284, _2285 - cbSceneParam._m0[33u].z), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2284 - cbSceneParam._m0[33u].z, _2285 - cbSceneParam._m0[33u].w), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2284 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2285), _2427), 0.0)).x), vec4(0.25)));
            float _2481 = 1.0 - (_2477 * cbSceneParam._m0[34u].x);
            float _2482 = 1.0 - (_2477 * cbSceneParam._m0[34u].y);
            float _2483 = 1.0 - (_2477 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2483) ? _2231 : (isnan(_2231) ? _2483 : min(_2231, _2483));
            frontier_phi_37_36_ladder_1 = isnan(_2482) ? _2230 : (isnan(_2230) ? _2482 : min(_2230, _2482));
            frontier_phi_37_36_ladder_2 = isnan(_2481) ? _2229 : (isnan(_2229) ? _2481 : min(_2229, _2481));
        }
        else
        {
            frontier_phi_37_36_ladder = _2231;
            frontier_phi_37_36_ladder_1 = _2230;
            frontier_phi_37_36_ladder_2 = _2229;
        }
        _2295 = frontier_phi_37_36_ladder_2;
        _2297 = frontier_phi_37_36_ladder_1;
        _2299 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2295 = _2229;
        _2297 = _2230;
        _2299 = _2231;
    }
    uvec4 _2304 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2306 = _2304.x * 14u;
    uint _2307 = _2306 + 13u;
    float _2314 = _975 + (-1.0);
    float _2319 = (cbLight._m0[_2307].x * _2314) + 1.0;
    float _2320 = (cbLight._m0[_2307].y * _2314) + 1.0;
    float _2321 = (cbLight._m0[_2307].z * _2314) + 1.0;
    float _2322 = (cbLight._m0[_2307].w * _2314) + 1.0;
    uint _2323 = _2306 + 5u;
    float _2329 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2333 = _2306 + 4u;
    float _2342 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
    uint _2346 = _2306 | 1u;
    float _2357 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_798, _799, _800));
    float _2360 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_798, _799, _800));
    float _4670 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _4681 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2365 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * 0.3183098733425140380859375;
    float _2367 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * 0.3183098733425140380859375;
    float _2374 = ((cbLight._m0[_2323].x * _2329) * _2367) + (((cbLight._m0[_2333].x * _2295) * _2342) * _2365);
    float _2375 = ((_2329 * cbLight._m0[_2323].y) * _2367) + (((cbLight._m0[_2333].y * _2297) * _2342) * _2365);
    float _2376 = ((_2329 * cbLight._m0[_2323].z) * _2367) + (((cbLight._m0[_2333].z * _2299) * _2342) * _2365);
    uvec4 _2380 = floatBitsToUint(cbLight._m0[_2306 + 12u]);
    bool _2382 = _2380.x == 0u;
    float _2484;
    float _2486;
    float _2488;
    if (_2382)
    {
        _2484 = _2374;
        _2486 = _2375;
        _2488 = _2376;
    }
    else
    {
        uint _2492 = _2306 + 6u;
        float _2508 = (dot(vec3(cbLight._m0[_2306 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4692 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2511 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2484 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2374;
        _2486 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2375;
        _2488 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2376;
    }
    bool _2491 = _2380.y == 0u;
    float _2546;
    float _2548;
    float _2550;
    if (_2491)
    {
        _2546 = _2484;
        _2548 = _2486;
        _2550 = _2488;
    }
    else
    {
        uint _2719 = _2306 + 7u;
        float _2735 = (dot(vec3(cbLight._m0[_2306 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2736 = _2735 * _2735;
        float _4708 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2737 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2738 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2546 = (((cbLight._m0[_2719].x * 0.3183098733425140380859375) * _2737) * _2738) + _2484;
        _2548 = (((cbLight._m0[_2719].y * 0.3183098733425140380859375) * _2737) * _2738) + _2486;
        _2550 = (((cbLight._m0[_2719].z * 0.3183098733425140380859375) * _2737) * _2738) + _2488;
    }
    uint _2553 = _2306 + 8u;
    float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _801) * 0.949999988079071044921875);
    float _2567 = _2566 * _2566;
    float _2568 = cbLight._m0[_2306].x + _877;
    float _2569 = cbLight._m0[_2306].y + _878;
    float _2570 = cbLight._m0[_2306].z + _879;
    float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
    float _2575 = _2574 * _2568;
    float _2576 = _2574 * _2569;
    float _2577 = _2574 * _2570;
    float _2578 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2306].xyz));
    float _4724 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _4735 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2582 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2583 = dot(vec3(_798, _799, _800), vec3(_2575, _2576, _2577));
    float _4746 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2587 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2575, _2576, _2577));
    float _4757 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2591 = _2567 * _2567;
    float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
    float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
    float _2604 = 0.959999978542327880859375 - _956;
    float _2606 = 0.959999978542327880859375 - _957;
    float _2607 = 0.959999978542327880859375 - _958;
    float _2614 = 1.0 - _2567;
    float _2625 = (0.5 / (((_2582 * ((_2581 * _2614) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2614) + _2567) * _2581))) * _2581;
    float _4768 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
    uint _2641 = _2306 + 9u;
    float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _801) * 0.949999988079071044921875);
    float _2653 = _2652 * _2652;
    float _2654 = cbLight._m0[_2346].x + _877;
    float _2655 = cbLight._m0[_2346].y + _878;
    float _2656 = cbLight._m0[_2346].z + _879;
    float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
    float _2661 = _2660 * _2654;
    float _2662 = _2660 * _2655;
    float _2663 = _2660 * _2656;
    float _2664 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2346].xyz));
    float _4779 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2668 = dot(vec3(_798, _799, _800), vec3(_2661, _2662, _2663));
    float _4790 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _2672 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2661, _2662, _2663));
    float _4801 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2676 = _2653 * _2653;
    float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
    float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0);
    float _2694 = 1.0 - _2653;
    float _2704 = (0.5 / (((_2582 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2694) + _2653) * _2667))) * _2667;
    float _4812 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2706 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
    float _2716 = (((((_2687 * _2604) + _959) * cbLight._m0[_2641].x) * _2706) * _2329) + ((((cbLight._m0[_2553].x * _2295) * ((_2603 * _2604) + _959)) * _2627) * _2342);
    float _2717 = (((((_2687 * _2606) + _961) * cbLight._m0[_2641].y) * _2706) * _2329) + ((((cbLight._m0[_2553].y * _2297) * ((_2603 * _2606) + _961)) * _2627) * _2342);
    float _2718 = (((((_2687 * _2607) + _962) * cbLight._m0[_2641].z) * _2706) * _2329) + ((((cbLight._m0[_2553].z * _2299) * ((_2603 * _2607) + _962)) * _2627) * _2342);
    float _2774;
    float _2776;
    float _2778;
    if (_2382)
    {
        _2774 = _2716;
        _2776 = _2717;
        _2778 = _2718;
    }
    else
    {
        uint _2780 = _2306 + 2u;
        uint _2784 = _2306 + 10u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _801) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _877;
        float _2801 = cbLight._m0[_2780].y + _878;
        float _2802 = cbLight._m0[_2780].z + _879;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2780].xyz));
        float _4823 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2814 = dot(vec3(_798, _799, _800), vec3(_2807, _2808, _2809));
        float _4834 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4845 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) * 5.0);
        float _2840 = 1.0 - _2799;
        float _2850 = (0.5 / (((_2582 * ((_2813 * _2840) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2840) + _2799) * _2813))) * _2813;
        float _4856 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2852 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2853 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2774 = (((((_2833 * _2604) + _959) * cbLight._m0[_2784].x) * _2852) * _2853) + _2716;
        _2776 = (((((_2833 * _2606) + _961) * cbLight._m0[_2784].y) * _2852) * _2853) + _2717;
        _2778 = (((((_2833 * _2607) + _962) * cbLight._m0[_2784].z) * _2852) * _2853) + _2718;
    }
    float _2884;
    float _2886;
    float _2888;
    if (_2491)
    {
        _2884 = _2774;
        _2886 = _2776;
        _2888 = _2778;
    }
    else
    {
        uint _2895 = _2306 + 3u;
        uint _2899 = _2306 + 11u;
        float _2913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2895].w)) * _801) * 0.949999988079071044921875);
        float _2914 = _2913 * _2913;
        float _2915 = cbLight._m0[_2895].x + _877;
        float _2916 = cbLight._m0[_2895].y + _878;
        float _2917 = cbLight._m0[_2895].z + _879;
        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
        float _2922 = _2921 * _2915;
        float _2923 = _2921 * _2916;
        float _2924 = _2921 * _2917;
        float _2925 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2895].xyz));
        float _4872 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2929 = dot(vec3(_798, _799, _800), vec3(_2922, _2923, _2924));
        float _4883 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
        float _2933 = dot(vec3(cbLight._m0[_2895].xyz), vec3(_2922, _2923, _2924));
        float _4894 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2937 = _2914 * _2914;
        float _2941 = ((_2932 * _2932) * (_2937 + (-1.0))) + 1.0;
        float _2948 = exp2(log2(1.0 - (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) * 5.0);
        float _2955 = 1.0 - _2914;
        float _2965 = (0.5 / (((_2582 * ((_2928 * _2955) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2955) + _2914) * _2928))) * _2928;
        float _4905 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2967 = (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2937 / ((_2941 * _2941) * 3.141590118408203125));
        float _2968 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2884 = (((((_2948 * _2604) + _959) * cbLight._m0[_2899].x) * _2967) * _2968) + _2774;
        _2886 = (((((_2948 * _2606) + _961) * cbLight._m0[_2899].y) * _2967) * _2968) + _2776;
        _2888 = (((((_2948 * _2607) + _962) * cbLight._m0[_2899].z) * _2967) * _2968) + _2778;
    }
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    if (_2304.y == 0u)
    {
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.x;
        uint _3001 = uint((float(_2989.y) * floor(float(uint(cbSceneParam._m0[85u].y * _898) / _2990))) + floor(float(uint(cbSceneParam._m0[85u].x * _897) / _2990)));
        float _3011 = (log2(_2082 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3012 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        uint _3015 = uint(isnan(14.0) ? _3012 : (isnan(_3012) ? 14.0 : min(_3012, 14.0)));
        uvec4 _3020 = texelFetch(g_lightClusterGridBuffer, int(((_3015 << 2u) + (_3001 << 6u)) >> 2u));
        uint _3021 = _3020.x;
        uint _3022 = _2989.z;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        if (((((1u << ((_3022 >> 4u) & 15u)) + 4294967295u) & _3021) == 0u) || ((_3022 & 240u) == 0u))
        {
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
        }
        else
        {
            float _3102;
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3112;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            uint _3260 = 0u;
            uint _3269;
            bool _3270;
            for (;;)
            {
                _3269 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3260 << 2u)) >> 2u)).x;
                _3270 = _3269 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3270)
                {
                    frontier_phi_71_pred = _3259;
                    frontier_phi_71_pred_1 = _3258;
                    frontier_phi_71_pred_2 = _3257;
                    frontier_phi_71_pred_3 = _3256;
                    frontier_phi_71_pred_4 = _3255;
                    frontier_phi_71_pred_5 = _3254;
                }
                else
                {
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    uint _3405;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3269;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    for (;;)
                    {
                        uint _3409 = uint(findLSB(_3405)) + (_3260 << 5u);
                        uint _3406 = (_3405 + 4294967295u) & _3405;
                        uint _3411 = _3409 * 48u;
                        vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3411)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 3u)).x));
                        uint _3431 = (_3409 * 48u) + 4u;
                        vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 3u)).x));
                        uint _3450 = (_3409 * 48u) + 8u;
                        vec3 _3461 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3450)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 2u)).x));
                        float _3465 = _3425.x - _2080;
                        float _3466 = _3425.y - _2081;
                        float _3467 = _3425.z - _2082;
                        float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                        float _3471 = inversesqrt(_3468);
                        float _3472 = _3471 * _3465;
                        float _3473 = _3471 * _3466;
                        float _3474 = _3471 * _3467;
                        float _3475 = dot(vec3(_916, _919, _922), vec3(_3472, _3473, _3474));
                        float _3480 = 1.0 - (_3468 * _3425.w);
                        float _4931 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3481 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3482 = sqrt(_3468) * _3444.w;
                        float _3485 = 1.39999997615814208984375 / (_3482 + 1.39999997615814208984375);
                        float _3486 = _3485 * _3485;
                        float _3489 = ((1.0 - _3486) * _3475) + _3486;
                        float _3492 = _3482 * _3482;
                        float _3496 = ((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3481) / ((_3492 * 0.699999988079071044921875) + 1.0);
                        float _3500 = (-0.0) - _2080;
                        float _3501 = (-0.0) - _2081;
                        float _3502 = (-0.0) - _2082;
                        float _3506 = inversesqrt(dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502)));
                        float _3507 = _3506 * _3500;
                        float _3508 = _3506 * _3501;
                        float _3509 = _3506 * _3502;
                        float _3516 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                        float _3517 = 1.0 - _991;
                        float _3524 = sqrt(1.0 - ((1.0 - (_3517 * _3517)) * (1.0 - (_3516 * _3516))));
                        float _3525 = _3524 * _3524;
                        float _3526 = _3525 * _3525;
                        float _3527 = _3507 + _3472;
                        float _3528 = _3508 + _3473;
                        float _3529 = _3509 + _3474;
                        float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                        float _3537 = dot(vec3(_916, _919, _922), vec3(_3507, _3508, _3509));
                        float _4947 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3540 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3541 = dot(vec3(_916, _919, _922), vec3(_3533 * _3527, _3533 * _3528, _3533 * _3529));
                        float _4958 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3548 = ((_3544 * _3544) * (_3526 + (-1.0))) + 1.0;
                        float _3549 = _3485 * _3525;
                        float _3550 = _3549 * _3549;
                        float _3553 = ((1.0 - _3550) * _3475) + _3550;
                        float _4969 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3554 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3555 = 1.0 - _3525;
                        float _3565 = (0.5 / (((_3554 * ((_3540 * _3555) + _3525)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3525) * _3540))) * _3554;
                        float _4980 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3576 = (((_3526 * 3.1415927410125732421875) * (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) / ((_3548 * _3548) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125))) * _3481;
                        _3329 = (_3496 * _3444.x) + _3402;
                        _3330 = (_3496 * _3444.y) + _3403;
                        _3331 = (_3496 * _3444.z) + _3404;
                        _3326 = (_3576 * _3461.x) + _3399;
                        _3327 = (_3576 * _3461.y) + _3400;
                        _3328 = (_3576 * _3461.z) + _3401;
                        if (_3406 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3406;
                        }
                    }
                    frontier_phi_71_pred = _3331;
                    frontier_phi_71_pred_1 = _3330;
                    frontier_phi_71_pred_2 = _3329;
                    frontier_phi_71_pred_3 = _3328;
                    frontier_phi_71_pred_4 = _3327;
                    frontier_phi_71_pred_5 = _3326;
                }
                _3112 = frontier_phi_71_pred;
                _3110 = frontier_phi_71_pred_1;
                _3108 = frontier_phi_71_pred_2;
                _3106 = frontier_phi_71_pred_3;
                _3104 = frontier_phi_71_pred_4;
                _3102 = frontier_phi_71_pred_5;
                uint _3261 = _3260 + 1u;
                if (_3261 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3254 = _3102;
                    _3255 = _3104;
                    _3256 = _3106;
                    _3257 = _3108;
                    _3258 = _3110;
                    _3259 = _3112;
                    _3260 = _3261;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
        }
        uvec4 _3115 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3116 = _3115.z;
        uint _3118 = (_3116 >> 8u) & 15u;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        if (((4294967295u << _3118) & _3021) == 0u)
        {
            _3222 = _3101;
            _3224 = _3103;
            _3226 = _3105;
            _3228 = _3107;
            _3230 = _3109;
            _3232 = _3111;
        }
        else
        {
            float _3247 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
            float _3248 = _3247 * _2080;
            float _3249 = _3247 * _2081;
            float _3250 = _3247 * _2082;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3118 < ((_3116 >> 12u) & 15u))
            {
                float _3223;
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3382 = _3101;
                float _3383 = _3103;
                float _3384 = _3105;
                float _3385 = _3107;
                float _3386 = _3109;
                float _3387 = _3111;
                uint _3388 = _3118;
                uint _3397;
                bool _3398;
                for (;;)
                {
                    _3397 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3388 << 2u)) >> 2u)).x;
                    _3398 = _3397 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3398)
                    {
                        frontier_phi_82_pred = _3387;
                        frontier_phi_82_pred_1 = _3386;
                        frontier_phi_82_pred_2 = _3385;
                        frontier_phi_82_pred_3 = _3384;
                        frontier_phi_82_pred_4 = _3383;
                        frontier_phi_82_pred_5 = _3382;
                    }
                    else
                    {
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3603 = _3382;
                        float _3604 = _3383;
                        float _3605 = _3384;
                        float _3606 = _3385;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        uint _3609 = _3397;
                        uint _3610;
                        vec4 _3635;
                        float _3636;
                        vec4 _3651;
                        vec3 _3663;
                        vec4 _3678;
                        vec4 _3694;
                        float _3740;
                        bool _3741;
                        for (;;)
                        {
                            uint _3620 = ((_3388 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3609));
                            _3610 = (_3609 + 4294967295u) & _3609;
                            uint _3622 = _3620 * 40u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            _3636 = _3635.w;
                            uint _3638 = (_3620 * 40u) + 4u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3620 * 40u) + 8u;
                            _3663 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x));
                            uint _3665 = (_3620 * 40u) + 16u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3681 = (_3620 * 40u) + 20u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3620 * 40u) + 24u;
                            vec4 _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3715 = (_3620 * 40u) + 28u;
                            vec4 _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            _3740 = fma(_2082, _3728.z, fma(_2081, _3728.y, _3728.x * _2080)) + _3728.w;
                            _3741 = !((fma(_2082, _3709.z, fma(_2081, _3709.y, _3709.x * _2080)) + _3709.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3741)
                            {
                                float _3768 = _3635.x - _2080;
                                float _3769 = _3635.y - _2081;
                                float _3770 = _3635.z - _2082;
                                float _3771 = dot(vec3(_3768, _3769, _3770), vec3(_3768, _3769, _3770));
                                float _3774 = inversesqrt(_3771);
                                float _3775 = _3774 * _3768;
                                float _3776 = _3774 * _3769;
                                float _3777 = _3774 * _3770;
                                float _3781 = 1.0 - (_3771 / (_3636 * _3636));
                                float _4991 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3786 = sqrt(_3771) * _3651.w;
                                float _3788 = 1.39999997615814208984375 / (_3786 + 1.39999997615814208984375);
                                float _3789 = _3788 * _3788;
                                float _3792 = ((1.0 - _3789) * dot(vec3(_3775, _3776, _3777), vec3(_916, _919, _922))) + _3789;
                                float _3795 = _3786 * _3786;
                                float _3799 = (fma(_2082, _3678.z, fma(_2081, _3678.y, _3678.x * _2080)) + _3678.w) / _3740;
                                float _3800 = (fma(_2082, _3694.z, fma(_2081, _3694.y, _3694.x * _2080)) + _3694.w) / _3740;
                                float _3804 = 1.0 - dot(vec2(_3799, _3800), vec2(_3799, _3800));
                                float _5007 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3806 = _3805 * (((isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0))) * _3782) / ((_3795 * 0.699999988079071044921875) + 1.0));
                                float _3818 = exp2(log2(1.0 / ((_3795 * 3.5) + 5.0)) * 0.25);
                                float _3819 = 1.0 - _991;
                                float _3826 = sqrt(1.0 - ((1.0 - (_3819 * _3819)) * (1.0 - (_3818 * _3818))));
                                float _3827 = _3826 * _3826;
                                float _3828 = _3827 * _3827;
                                float _3829 = _3775 - _3248;
                                float _3830 = _3776 - _3249;
                                float _3831 = _3777 - _3250;
                                float _3835 = inversesqrt(dot(vec3(_3829, _3830, _3831), vec3(_3829, _3830, _3831)));
                                float _3839 = dot(vec3(_916, _919, _922), vec3((-0.0) - _3248, (-0.0) - _3249, (-0.0) - _3250));
                                float _5018 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3842 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3843 = dot(vec3(_916, _919, _922), vec3(_3835 * _3829, _3835 * _3830, _3835 * _3831));
                                float _5029 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3850 = ((_3846 * _3846) * (_3828 + (-1.0))) + 1.0;
                                float _3851 = _3788 * _3827;
                                float _3852 = _3851 * _3851;
                                float _3858 = ((1.0 - _3852) * dot(vec3(_916, _919, _922), vec3(_3775, _3776, _3777))) + _3852;
                                float _5040 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3859 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3860 = 1.0 - _3827;
                                float _3870 = (0.5 / (((_3859 * ((_3842 * _3860) + _3827)) + 9.9999999392252902907785028219223e-09) + (((_3859 * _3860) + _3827) * _3842))) * _3859;
                                float _5051 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3880 = (_3805 * _3782) * (((_3828 * 3.1415927410125732421875) * (isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0)))) / ((_3850 * _3850) * ((_3795 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3806 * _3651.z;
                                frontier_phi_88_pred_1 = _3806 * _3651.y;
                                frontier_phi_88_pred_2 = _3806 * _3651.x;
                                frontier_phi_88_pred_3 = _3880 * _3663.z;
                                frontier_phi_88_pred_4 = _3880 * _3663.y;
                                frontier_phi_88_pred_5 = _3880 * _3663.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3889 = frontier_phi_88_pred;
                            _3888 = frontier_phi_88_pred_1;
                            _3887 = frontier_phi_88_pred_2;
                            _3886 = frontier_phi_88_pred_3;
                            _3885 = frontier_phi_88_pred_4;
                            _3884 = frontier_phi_88_pred_5;
                            _3593 = _3887 + _3606;
                            _3594 = _3888 + _3607;
                            _3595 = _3889 + _3608;
                            _3590 = _3884 + _3603;
                            _3591 = _3885 + _3604;
                            _3592 = _3886 + _3605;
                            if (_3610 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3610;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3595;
                        frontier_phi_82_pred_1 = _3594;
                        frontier_phi_82_pred_2 = _3593;
                        frontier_phi_82_pred_3 = _3592;
                        frontier_phi_82_pred_4 = _3591;
                        frontier_phi_82_pred_5 = _3590;
                    }
                    _3233 = frontier_phi_82_pred;
                    _3231 = frontier_phi_82_pred_1;
                    _3229 = frontier_phi_82_pred_2;
                    _3227 = frontier_phi_82_pred_3;
                    _3225 = frontier_phi_82_pred_4;
                    _3223 = frontier_phi_82_pred_5;
                    uint _3389 = _3388 + 1u;
                    if (_3389 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3382 = _3223;
                        _3383 = _3225;
                        _3384 = _3227;
                        _3385 = _3229;
                        _3386 = _3231;
                        _3387 = _3233;
                        _3388 = _3389;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3229;
                frontier_phi_63_64_ladder_1 = _3233;
                frontier_phi_63_64_ladder_2 = _3231;
                frontier_phi_63_64_ladder_3 = _3227;
                frontier_phi_63_64_ladder_4 = _3225;
                frontier_phi_63_64_ladder_5 = _3223;
            }
            else
            {
                frontier_phi_63_64_ladder = _3107;
                frontier_phi_63_64_ladder_1 = _3111;
                frontier_phi_63_64_ladder_2 = _3109;
                frontier_phi_63_64_ladder_3 = _3105;
                frontier_phi_63_64_ladder_4 = _3103;
                frontier_phi_63_64_ladder_5 = _3101;
            }
            _3222 = frontier_phi_63_64_ladder_5;
            _3224 = frontier_phi_63_64_ladder_4;
            _3226 = frontier_phi_63_64_ladder_3;
            _3228 = frontier_phi_63_64_ladder;
            _3230 = frontier_phi_63_64_ladder_2;
            _3232 = frontier_phi_63_64_ladder_1;
        }
        float _3237 = isnan(1.0) ? _975 : (isnan(_975) ? 1.0 : min(_975, 1.0));
        _3034 = (_3237 * _3228) + _2546;
        _3036 = (_3237 * _3230) + _2548;
        _3038 = (_3237 * _3232) + _2550;
        _3040 = ((_3222 * _959) * _3237) + _2884;
        _3042 = ((_3224 * _961) * _3237) + _2886;
        _3044 = ((_3226 * _962) * _3237) + _2888;
    }
    else
    {
        _3034 = _2546;
        _3036 = _2548;
        _3038 = _2550;
        _3040 = _2884;
        _3042 = _2886;
        _3044 = _2888;
    }
    float _5067 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _5078 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _5089 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _3061 = ((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3034 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _975))) + ((_3040 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _3062 = ((isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3036 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _975))) + ((_3042 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _3063 = ((isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3038 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _975))) + ((_3044 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    uint _3064 = _261 + 6u;
    float _3072 = _897 / cbSceneParam._m0[86u].x;
    float _3073 = _898 / cbSceneParam._m0[86u].y;
    vec4 _3087 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3072, _3073, (log2((isnan(cbSceneParam._m0[77u].w) ? _820 : (isnan(_820) ? cbSceneParam._m0[77u].w : min(_820, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3089 = _3087.x;
    float _3090 = _3087.y;
    float _3091 = _3087.z;
    float _3092 = _3087.w;
    float _3164;
    float _3166;
    float _3168;
    float _3170;
    if (_820 > cbSceneParam._m0[78u].w)
    {
        float _3126 = isnan(_820) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _820 : min(cbSceneParam._m0[80u].w, _820));
        float _3127 = _3126 / _820;
        float _3138 = _3127 * _870;
        float _3139 = _871 * _3127;
        float _3140 = (-0.0) - _3139;
        float _3142 = _3127 * _872;
        float _3144 = (cbSceneParam._m0[77u].w * _3140) / _3126;
        float _3145 = _3144 + cbSceneParam._m0[79u].w;
        float _3146 = cbSceneParam._m0[79u].w - _3139;
        float _3152 = sqrt(((_3138 * _3138) + (_3139 * _3139)) + (_3142 * _3142));
        float _3155 = (1.0 - (cbSceneParam._m0[77u].w / _3126)) * _3152;
        float _3160 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3162 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3339;
        if (abs((_3140 - _3144) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3339 = ((((_3145 > 0.0) ? exp2(_3160 * _3145) : (2.0 - exp2(_3162 * _3145))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3155;
        }
        else
        {
            float _3283 = 1.0 / cbSceneParam._m0[80u].x;
            float _3284 = isnan(_3146) ? _3145 : (isnan(_3145) ? _3146 : max(_3145, _3146));
            float _3285 = isnan(_3146) ? _3145 : (isnan(_3145) ? _3146 : min(_3145, _3146));
            float _3294 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : min(_3284, 0.0));
            float _3295 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : min(_3285, 0.0));
            _3339 = ((abs(_3152 / _3140) * cbSceneParam._m0[80u].y) * ((((_3294 - _3295) * 2.0) - ((exp2(_3160 * (isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0)))) - exp2(_3160 * (isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))))) * _3283)) - ((exp2(_3162 * _3294) - exp2(_3162 * _3295)) * _3283))) + (_3155 * cbSceneParam._m0[80u].z);
        }
        vec4 _3341 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3072, _3073, 1.0), 0.0);
        float _3350 = exp2((_3339 * (-1.44269502162933349609375)) * (1.0 - _3341.w));
        float _3351 = log2(_3350);
        float _3367 = log2(_3092);
        _3164 = (exp2(_3367 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].x)) * _3341.x) / cbSceneParam._m0[78u].x)) + _3089;
        _3166 = (exp2(_3367 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].y)) * _3341.y) / cbSceneParam._m0[78u].y)) + _3090;
        _3168 = (exp2(_3367 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3351 * cbSceneParam._m0[78u].z)) * _3341.z) / cbSceneParam._m0[78u].z)) + _3091;
        _3170 = _3350 * _3092;
    }
    else
    {
        _3164 = _3089;
        _3166 = _3090;
        _3168 = _3091;
        _3170 = _3092;
    }
    bool _3377;
    vec4 _3180;
    vec4 _3202;
    float _3204;
    float _3208;
    float _3209;
    float _3210;
    float _3211;
    bool _3221;
    for (;;)
    {
        _3180 = cbMatDynParam._m0[0u];
        float _3182 = roundEven(_3180.y);
        bool _3183 = _3182 == 3.0;
        float _3184 = log2(_3170);
        float _3191 = exp2(_3184 * cbSceneParam._m0[78u].x) * _3061;
        float _3192 = exp2(_3184 * cbSceneParam._m0[78u].y) * _3062;
        float _3193 = exp2(_3184 * cbSceneParam._m0[78u].z) * _3063;
        float _3200 = _886 + (-0.5);
        _3202 = cbMtdParam._m0[1u];
        _3204 = _3202.y * _3200;
        float _3207 = (_3182 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3208 = _3207 * (_3183 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3164)));
        _3209 = _3207 * (_3183 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3166)));
        _3210 = _3207 * (_3183 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3168)));
        _3211 = _3200 * 0.999000012874603271484375;
        _3221 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3221)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3211) < 0.5)
            {
                _3377 = true;
                break;
            }
        }
        uint _3318 = _935 + uint(_3180.w);
        if ((cbInstanceData._m0[_3318].w < 1.0) && ((cbInstanceData._m0[_3318].w + _3211) < 0.5))
        {
            _3377 = true;
            break;
        }
        if ((_3204 + 1.0) < _3202.x)
        {
            _3377 = true;
            break;
        }
        _3377 = false;
        break;
    }
    float _3581;
    if (_3377)
    {
        discard_state = true;
        _3581 = 0.0;
    }
    else
    {
        _3581 = cbInstanceData._m0[_3064].w;
    }
    SV_Target.x = _3208;
    SV_Target.y = _3209;
    SV_Target.z = _3210;
    SV_Target.w = _3581;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3064].w;
    discard_exit();
}


