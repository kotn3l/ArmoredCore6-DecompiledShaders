#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1446;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3794 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3805 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3816 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[23u].w) + _426) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3827 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _451 = (_444 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _452 = (_444 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _453 = (_444 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _492 = _490.x;
    float _502 = dot(vec4(_492, _490.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _516 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_492 - _502) * cbMtdParam._m0[23u].w) + _502) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3838 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _524 = (_517 * ((_470.x * cbMtdParam._m0[13u].x) - _451)) + _451;
    float _525 = (_517 * ((_470.y * cbMtdParam._m0[13u].y) - _452)) + _452;
    float _526 = (_517 * ((_470.z * cbMtdParam._m0[13u].z) - _453)) + _453;
    float _530 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _524;
    float _533 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _525;
    float _536 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _526;
    float _543 = ((_524 - _530) * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) + _530;
    float _544 = ((_525 - _533) * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) + _533;
    float _545 = ((_526 - _536) * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) + _536;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _297) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _298) + cbTextureTilingScale._m0[14u].w));
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _627 = _625.x;
    float _628 = _625.y;
    float _629 = _625.z;
    float _636 = ((_608.x - _627) * _444) + _627;
    float _637 = ((_608.y - _628) * _444) + _628;
    float _638 = ((_608.z - _629) * _444) + _629;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _663 = ((_650.z - _638) * _517) + _638;
    float _666 = ((((_650.x - _636) * _517) + _636) * 2.0) + (-1.0);
    float _667 = ((((_650.y - _637) * _517) + _637) * 2.0) + (-1.0);
    float _668 = dot(vec2(_666, _667), vec2(_666, _667));
    float _3849 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _673 = sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _703 = (_666 + ((((_583.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_691.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _704 = (_667 + ((((_583.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_691.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _707 = fma(_673, _245, fma(_704, _252, _703 * _238));
    float _710 = fma(_673, _246, fma(_704, _253, _703 * _239));
    float _713 = fma(_673, _247, fma(_704, _254, _703 * _240));
    float _717 = inversesqrt(dot(vec3(_707, _710, _713), vec3(_707, _710, _713)));
    vec4 _744 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _746 = _744.x;
    float _747 = 1.0 - _746;
    float _756 = (cbMtdParam._m0[19u].x + dot(vec4(_717 * _707, _717 * _710, _717 * _713, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_746 - _747) * cbMtdParam._m0[24u].z) + _747) * cbMtdParam._m0[21u].z);
    float _3860 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _757 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _764 = (_757 * ((_564.x * cbMtdParam._m0[18u].x) - _543)) + _543;
    float _765 = (_757 * ((_564.y * cbMtdParam._m0[18u].y) - _544)) + _544;
    float _766 = (_757 * ((_564.z * cbMtdParam._m0[18u].z) - _545)) + _545;
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _794 = _792.x;
    float _812 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _794) * _444) + _794;
    float _829 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w)).x - _812) * _517) + _812;
    float _833 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _829) * cbMtdParam._m0[19u].z) + _829;
    float _835 = _833 - (_833 * _757);
    float _840 = (((_583.z - _663) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _663;
    float _844 = ((_691.z - _840) * cbMtdParam._m0[19u].w) + _840;
    vec4 _857 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _864 = (_857.x * 2.0) + (-1.0);
    float _865 = (_857.y * 2.0) + (-1.0);
    float _866 = dot(vec2(_864, _865), vec2(_864, _865));
    float _3871 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _874 = ((_857.z - _844) * _757) + _844;
    float _884 = ((sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) - _673) * _757) + _673;
    float _887 = (((_864 - _703) * _757) + _703) + (cbMtdParam._m0[21u].x * _703);
    float _888 = (((_865 - _704) * _757) + _704) + (cbMtdParam._m0[21u].x * _704);
    float _892 = cbMtdParam._m0[22u].x + _691.w;
    float _895 = fma(_884, _245, fma(_888, _252, _887 * _238));
    float _898 = fma(_884, _246, fma(_888, _253, _887 * _239));
    float _901 = fma(_884, _247, fma(_888, _254, _887 * _240));
    float _905 = inversesqrt(dot(vec3(_895, _898, _901), vec3(_895, _898, _901)));
    float _906 = _905 * _895;
    float _907 = _905 * _898;
    float _908 = _905 * _901;
    float _3882 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _909 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _3904 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _3915 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _3926 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _3937 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _914 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _928 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _979 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _969);
    float _980 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _969);
    float _981 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _969);
    float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
    float _986 = _979 * _985;
    float _987 = _980 * _985;
    float _988 = _981 * _985;
    float _994 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _995 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1013 = fma(_908, cbSceneParam._m0[5u].z, fma(_907, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _906));
    float _1016 = fma(_908, cbSceneParam._m0[6u].z, fma(_907, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _906));
    float _1019 = fma(_908, cbSceneParam._m0[7u].z, fma(_907, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _906));
    uint _1033 = (_278 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1039 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_1033].x;
    float _1040 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_1033].y;
    float _1041 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_1033].z;
    float _3948 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _1045 = 1.0 - _914;
    float _1046 = _1042 * _1045;
    float _1047 = _1043 * _1045;
    float _1048 = _1044 * _1045;
    float _1053 = (_1042 + (-0.039999999105930328369140625)) * _914;
    float _1054 = (_1043 + (-0.039999999105930328369140625)) * _914;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _914;
    float _1056 = _1053 + 0.039999999105930328369140625;
    float _1058 = _1054 + 0.039999999105930328369140625;
    float _1059 = _1055 + 0.039999999105930328369140625;
    vec4 _1068 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _994, cbSceneParam._m0[86u].y * _995));
    float _1072 = ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * TEXCOORD_5.w) * _1068.x;
    float _1073 = dot(vec3(_906, _907, _908), vec3(_986, _987, _988));
    float _1076 = _1073 * 2.0;
    float _1080 = (_1076 * _906) - _986;
    float _1081 = (_1076 * _907) - _987;
    float _1082 = (_1076 * _908) - _988;
    float _1086 = abs(dot(vec3(_986, _987, _988), vec3(_906, _907, _908)));
    float _3981 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1088 = sqrt(_909);
    float _1101 = exp2((_1088 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1088 * 3.0));
    float _1107 = (1.0 - _1101) * ((_1088 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1108 = _1101 * _1088;
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1445;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1170 = fma(_1144, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136));
        float _1174 = fma(_1144, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136));
        float _1178 = fma(_1144, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136));
        float _1203 = _1136 + _906;
        float _1204 = _1140 + _907;
        float _1205 = _1144 + _908;
        float _1215 = fma(_1205, cbModelParam._m0[26u].z, fma(_1204, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1203)) - _1170;
        float _1216 = fma(_1205, cbModelParam._m0[27u].z, fma(_1204, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1203)) - _1174;
        float _1217 = fma(_1205, cbModelParam._m0[28u].z, fma(_1204, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1203)) - _1178;
        float _1221 = inversesqrt(dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217)));
        float _1234 = ((_1221 * _1215) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1170 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1221 * _1216) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1174 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1221 * _1217) / cbModelParam._m0[34u].z) + ((((((_1178 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        float _1273 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1239.x + (-0.5));
        float _1275 = _1273 * (_1239.y + (-0.5));
        float _1276 = _1273 * (_1239.z + (-0.5));
        float _1283 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1246.x + (-0.5));
        float _1285 = _1283 * (_1246.y + (-0.5));
        float _1286 = _1283 * (_1246.z + (-0.5));
        float _1293 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1253.x + (-0.5));
        float _1295 = _1293 * (_1253.y + (-0.5));
        float _1296 = _1293 * (_1253.z + (-0.5));
        float _1303 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1260.x + (-0.5));
        float _1305 = _1303 * (_1260.y + (-0.5));
        float _1306 = _1303 * (_1260.z + (-0.5));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = _1274 * 0.5;
        float _1311 = _1284 * 0.5;
        float _1312 = _1294 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1327 = (dot(vec3(_906, _907, _908), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1337 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4029 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1339 + 1.0))) + _1344) * _1307;
        float _1354 = _1275 * 0.5;
        float _1355 = _1285 * 0.5;
        float _1356 = _1295 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_906, _907, _908), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4062 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1381 + 1.0))) + _1386) * _1308;
        float _1396 = _1276 * 0.5;
        float _1397 = _1286 * 0.5;
        float _1398 = _1296 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_906, _907, _908), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4095 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1423 + 1.0))) + _1428) * _1309;
        _1445 = _1276;
        _1447 = _1275;
        _1448 = _1274;
        _1449 = _1286;
        _1450 = _1285;
        _1451 = _1284;
        _1452 = _1296;
        _1453 = _1295;
        _1454 = _1294;
        _1455 = _1309;
        _1456 = _1308;
        _1457 = _1307;
        _1458 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1459 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1460 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
    }
    else
    {
        _1445 = _1446;
        _1447 = _1446;
        _1448 = _1446;
        _1449 = _1446;
        _1450 = _1446;
        _1451 = _1446;
        _1452 = _1446;
        _1453 = _1446;
        _1454 = _1446;
        _1455 = _1446;
        _1456 = _1446;
        _1457 = _1446;
        _1458 = 0.0;
        _1459 = 0.0;
        _1460 = 0.0;
    }
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1484 = fma(_1144, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136));
        float _1488 = fma(_1144, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136));
        float _1492 = fma(_1144, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136));
        float _1515 = _1136 + _906;
        float _1516 = _1140 + _907;
        float _1517 = _1144 + _908;
        float _1527 = fma(_1517, cbModelParam._m0[30u].z, fma(_1516, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1515)) - _1484;
        float _1528 = fma(_1517, cbModelParam._m0[31u].z, fma(_1516, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1515)) - _1488;
        float _1529 = fma(_1517, cbModelParam._m0[32u].z, fma(_1516, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1515)) - _1492;
        float _1533 = inversesqrt(dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529)));
        float _1546 = ((_1533 * _1527) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1484 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1547 = ((_1533 * _1528) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1488 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1548 = ((_1533 * _1529) / cbModelParam._m0[35u].z) + ((((((_1492 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1546, _1547, _1548), 0.0);
        float _1583 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1550.x + (-0.5));
        float _1585 = _1583 * (_1550.y + (-0.5));
        float _1586 = _1583 * (_1550.z + (-0.5));
        float _1593 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1557.x + (-0.5));
        float _1595 = _1593 * (_1557.y + (-0.5));
        float _1596 = _1593 * (_1557.z + (-0.5));
        float _1603 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1564.x + (-0.5));
        float _1605 = _1603 * (_1564.y + (-0.5));
        float _1606 = _1603 * (_1564.z + (-0.5));
        float _1613 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1571.x + (-0.5));
        float _1615 = _1613 * (_1571.y + (-0.5));
        float _1616 = _1613 * (_1571.z + (-0.5));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = _1584 * 0.5;
        float _1621 = _1594 * 0.5;
        float _1622 = _1604 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_906, _907, _908), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4158 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1647 + 1.0))) + _1652) * _1617;
        float _1662 = _1585 * 0.5;
        float _1663 = _1595 * 0.5;
        float _1664 = _1605 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_906, _907, _908), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4191 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1689 + 1.0))) + _1694) * _1618;
        float _1704 = _1586 * 0.5;
        float _1705 = _1596 * 0.5;
        float _1706 = _1606 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_906, _907, _908), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4224 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1731 + 1.0))) + _1736) * _1619;
        _1753 = _1586;
        _1754 = _1585;
        _1755 = _1584;
        _1756 = _1596;
        _1757 = _1595;
        _1758 = _1594;
        _1759 = _1606;
        _1760 = _1605;
        _1761 = _1604;
        _1762 = _1619;
        _1763 = _1618;
        _1764 = _1617;
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
    }
    else
    {
        _1753 = _1446;
        _1754 = _1446;
        _1755 = _1446;
        _1756 = _1446;
        _1757 = _1446;
        _1758 = _1446;
        _1759 = _1446;
        _1760 = _1446;
        _1761 = _1446;
        _1762 = _1446;
        _1763 = _1446;
        _1764 = _1446;
        _1765 = 0.0;
        _1766 = 0.0;
        _1767 = 0.0;
    }
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1458)) + _1458;
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1459)) + _1459;
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1460)) + _1460;
    float _1800 = fma(_1779, cbSceneParam._m0[89u].z, fma(_1778, cbSceneParam._m0[89u].y, _1777 * cbSceneParam._m0[89u].x));
    float _1803 = fma(_1779, cbSceneParam._m0[90u].z, fma(_1778, cbSceneParam._m0[90u].y, _1777 * cbSceneParam._m0[90u].x));
    float _1806 = fma(_1779, cbSceneParam._m0[91u].z, fma(_1778, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1777));
    float _1821 = _1080 * 0.5;
    float _1822 = _1081 * 0.5;
    float _1823 = _1082 * 0.5;
    float _1824 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1827 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1830 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1864;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1837 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1445, _1449, _1452, _1455));
        float _1841 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1447, _1450, _1453, _1456));
        float _1845 = dot(vec4(_1821, _1822, _1823, 1.0), vec4(_1448, _1451, _1454, _1457));
        float _1852 = dot(vec4(cbModelParam._m0[39u]), vec4(_1821, _1822, _1823, 1.0));
        _1864 = dot(vec3(isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1864 = 1.0;
    }
    float _1875;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1866 = dot(vec4(cbModelParam._m0[40u]), vec4(_1821, _1822, _1823, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1866) ? 0.0 : (isnan(0.0) ? _1866 : max(0.0, _1866))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1879 = (_1875 * cbModelParam._m0[1u].x) + (_1864 * (1.0 - cbModelParam._m0[1u].x));
    float _1889 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _909);
    float _1890 = isnan(_1889) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1889 : min(cbModelParam._m0[25u].z, _1889));
    float _1970;
    float _1972;
    float _1974;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1937 = fma(_1144, cbModelParam._m0[13u].z, fma(_1140, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136)) + cbModelParam._m0[13u].w;
        float _1941 = fma(_1144, cbModelParam._m0[14u].z, fma(_1140, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136)) + cbModelParam._m0[14u].w;
        float _1945 = fma(_1144, cbModelParam._m0[15u].z, fma(_1140, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136)) + cbModelParam._m0[15u].w;
        float _1948 = fma(_1082, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1080));
        float _1951 = fma(_1082, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1080));
        float _1954 = fma(_1082, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1080));
        float _1982;
        if (_1948 > 0.0)
        {
            _1982 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1982 = frontier_phi_14_12_ladder;
        }
        float _2205;
        if (_1951 > 0.0)
        {
            _2205 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2205 = frontier_phi_23_19_ladder;
        }
        float _2462;
        if (_1954 > 0.0)
        {
            _2462 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2462 = frontier_phi_35_30_ladder;
        }
        float _2464 = isnan(_2205) ? _1982 : (isnan(_1982) ? _2205 : min(_1982, _2205));
        float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
        float _2469 = (_2465 * _1948) + _1937;
        float _2470 = (_2465 * _1951) + _1941;
        float _2471 = (_2465 * _1954) + _1945;
        float _2472 = _2465 * 9.9999997473787516355514526367188e-05;
        float _2474 = (-1.0) - _2472;
        float _2476 = _2472 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2471 > _2476) || ((_2471 < _2474) || ((_2470 > _2476) || ((_2470 < _2474) || ((_2469 < _2474) || (_2469 > _2476))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2471, cbModelParam._m0[9u].z, fma(_2470, cbModelParam._m0[9u].y, _2469 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2471, cbModelParam._m0[10u].z, fma(_2470, cbModelParam._m0[10u].y, _2469 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2471, cbModelParam._m0[11u].z, fma(_2470, cbModelParam._m0[11u].y, _2469 * cbModelParam._m0[11u].x))), _1890);
            frontier_phi_13_35_ladder = _2599.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2599.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2599.x * cbModelParam._m0[1u].y;
        }
        _1970 = frontier_phi_13_35_ladder_2;
        _1972 = frontier_phi_13_35_ladder_1;
        _1974 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1958 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1080, _1081, _1082), _1890);
        _1970 = _1958.x * cbModelParam._m0[1u].y;
        _1972 = _1958.y * cbModelParam._m0[1u].y;
        _1974 = _1958.z * cbModelParam._m0[1u].y;
    }
    float _1978 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _909);
    float _1979 = isnan(_1978) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1978 : min(cbModelParam._m0[25u].w, _1978));
    float _2068;
    float _2070;
    float _2072;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2032 = fma(_1144, cbModelParam._m0[21u].z, fma(_1140, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136)) + cbModelParam._m0[21u].w;
        float _2036 = fma(_1144, cbModelParam._m0[22u].z, fma(_1140, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136)) + cbModelParam._m0[22u].w;
        float _2040 = fma(_1144, cbModelParam._m0[23u].z, fma(_1140, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136)) + cbModelParam._m0[23u].w;
        float _2043 = fma(_1082, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1080));
        float _2046 = fma(_1082, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1080));
        float _2049 = fma(_1082, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1080));
        float _2210;
        if (_2043 > 0.0)
        {
            _2210 = abs((1.0 - _2032) / _2043);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2032 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2210 = frontier_phi_25_21_ladder;
        }
        float _2489;
        if (_2046 > 0.0)
        {
            _2489 = abs((1.0 - _2036) / _2046);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2036 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2489 = frontier_phi_37_32_ladder;
        }
        float _2702;
        if (_2049 > 0.0)
        {
            _2702 = abs((1.0 - _2040) / _2049);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2040 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2702 = frontier_phi_46_43_ladder;
        }
        float _2704 = isnan(_2489) ? _2210 : (isnan(_2210) ? _2489 : min(_2210, _2489));
        float _2705 = isnan(_2702) ? _2704 : (isnan(_2704) ? _2702 : min(_2704, _2702));
        float _2709 = (_2705 * _2043) + _2032;
        float _2710 = (_2705 * _2046) + _2036;
        float _2711 = (_2705 * _2049) + _2040;
        float _2712 = _2705 * 9.9999997473787516355514526367188e-05;
        float _2713 = (-1.0) - _2712;
        float _2715 = _2712 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2711 > _2715) || ((_2711 < _2713) || ((_2710 > _2715) || ((_2710 < _2713) || ((_2709 < _2713) || (_2709 > _2715))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2711, cbModelParam._m0[17u].z, fma(_2710, cbModelParam._m0[17u].y, _2709 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2711, cbModelParam._m0[18u].z, fma(_2710, cbModelParam._m0[18u].y, _2709 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2711, cbModelParam._m0[19u].z, fma(_2710, cbModelParam._m0[19u].y, _2709 * cbModelParam._m0[19u].x))), _1979);
            frontier_phi_22_46_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _2068 = frontier_phi_22_46_ladder_2;
        _2070 = frontier_phi_22_46_ladder_1;
        _2072 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2052 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1080, _1081, _1082), _1979);
        _2068 = _2052.x * cbModelParam._m0[1u].z;
        _2070 = _2052.y * cbModelParam._m0[1u].z;
        _2072 = _2052.z * cbModelParam._m0[1u].z;
    }
    float _2085 = (((_1107 * _1056) + _1108) * _1072) * ((cbModelParam._m0[1u].w * (_2068 - _1970)) + _1970);
    float _2087 = (((_1107 * _1058) + _1108) * _1072) * ((cbModelParam._m0[1u].w * (_2070 - _1972)) + _1972);
    float _2089 = (((_1107 * _1059) + _1108) * _1072) * ((cbModelParam._m0[1u].w * (_2072 - _1974)) + _1974);
    float _2092 = fma(_2089, cbSceneParam._m0[89u].z, fma(_2087, cbSceneParam._m0[89u].y, _2085 * cbSceneParam._m0[89u].x));
    float _2095 = fma(_2089, cbSceneParam._m0[90u].z, fma(_2087, cbSceneParam._m0[90u].y, _2085 * cbSceneParam._m0[90u].x));
    float _2098 = fma(_2089, cbSceneParam._m0[91u].z, fma(_2087, cbSceneParam._m0[91u].y, _2085 * cbSceneParam._m0[91u].x));
    vec4 _2106 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_994, _995));
    float _2108 = _2106.w;
    float _2120 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2108);
    float _2121 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2108);
    float _2122 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2108);
    uvec4 _2126 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2128 = _2126.x * 14u;
    uint _2129 = _2128 + 13u;
    float _2136 = _1072 + (-1.0);
    float _2141 = (cbLight._m0[_2129].x * _2136) + 1.0;
    float _2142 = (cbLight._m0[_2129].y * _2136) + 1.0;
    float _2143 = (cbLight._m0[_2129].z * _2136) + 1.0;
    float _2144 = (cbLight._m0[_2129].w * _2136) + 1.0;
    uint _2145 = _2128 + 5u;
    float _2151 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2155 = _2128 + 4u;
    float _2164 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2168 = _2128 | 1u;
    float _2179 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_906, _907, _908));
    float _2182 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_906, _907, _908));
    float _4360 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _4371 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2187 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2189 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2196 = ((cbLight._m0[_2145].x * _2151) * _2189) + (((cbLight._m0[_2155].x * _2120) * _2164) * _2187);
    float _2197 = ((_2151 * cbLight._m0[_2145].y) * _2189) + (((cbLight._m0[_2155].y * _2121) * _2164) * _2187);
    float _2198 = ((_2151 * cbLight._m0[_2145].z) * _2189) + (((cbLight._m0[_2155].z * _2122) * _2164) * _2187);
    uvec4 _2202 = floatBitsToUint(cbLight._m0[_2128 + 12u]);
    bool _2204 = _2202.x == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2204)
    {
        _2215 = _2196;
        _2217 = _2197;
        _2219 = _2198;
    }
    else
    {
        uint _2223 = _2128 + 6u;
        float _2239 = (dot(vec3(cbLight._m0[_2128 + 2u].xyz), vec3(_906, _907, _908)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4382 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2242 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2215 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2196;
        _2217 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2197;
        _2219 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2198;
    }
    bool _2222 = _2202.y == 0u;
    float _2260;
    float _2262;
    float _2264;
    if (_2222)
    {
        _2260 = _2215;
        _2262 = _2217;
        _2264 = _2219;
    }
    else
    {
        uint _2433 = _2128 + 7u;
        float _2449 = (dot(vec3(cbLight._m0[_2128 + 3u].xyz), vec3(_906, _907, _908)) * 0.5) + 0.5;
        float _2450 = _2449 * _2449;
        float _4398 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2451 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2452 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2260 = (((cbLight._m0[_2433].x * 0.3183098733425140380859375) * _2451) * _2452) + _2215;
        _2262 = (((cbLight._m0[_2433].y * 0.3183098733425140380859375) * _2451) * _2452) + _2217;
        _2264 = (((cbLight._m0[_2433].z * 0.3183098733425140380859375) * _2451) * _2452) + _2219;
    }
    uint _2267 = _2128 + 8u;
    float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _909) * 0.949999988079071044921875);
    float _2281 = _2280 * _2280;
    float _2282 = cbLight._m0[_2128].x + _986;
    float _2283 = cbLight._m0[_2128].y + _987;
    float _2284 = cbLight._m0[_2128].z + _988;
    float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
    float _2289 = _2288 * _2282;
    float _2290 = _2288 * _2283;
    float _2291 = _2288 * _2284;
    float _2292 = dot(vec3(_906, _907, _908), vec3(cbLight._m0[_2128].xyz));
    float _4414 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _4425 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _2296 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2297 = dot(vec3(_906, _907, _908), vec3(_2289, _2290, _2291));
    float _4436 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2301 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2289, _2290, _2291));
    float _4447 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2305 = _2281 * _2281;
    float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
    float _2317 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
    float _2318 = 0.959999978542327880859375 - _1053;
    float _2320 = 0.959999978542327880859375 - _1054;
    float _2321 = 0.959999978542327880859375 - _1055;
    float _2328 = 1.0 - _2281;
    float _2339 = (0.5 / (((_2296 * ((_2295 * _2328) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2328) + _2281) * _2295))) * _2295;
    float _4458 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
    uint _2355 = _2128 + 9u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _909) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2168].x + _986;
    float _2369 = cbLight._m0[_2168].y + _987;
    float _2370 = cbLight._m0[_2168].z + _988;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_906, _907, _908), vec3(cbLight._m0[_2168].xyz));
    float _4469 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2382 = dot(vec3(_906, _907, _908), vec3(_2375, _2376, _2377));
    float _4480 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2386 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2375, _2376, _2377));
    float _4491 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2390 = _2367 * _2367;
    float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
    float _2401 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
    float _2408 = 1.0 - _2367;
    float _2418 = (0.5 / (((_2296 * ((_2381 * _2408) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2408) + _2367) * _2381))) * _2381;
    float _4502 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
    float _2430 = (((((_2401 * _2318) + _1056) * cbLight._m0[_2355].x) * _2420) * _2151) + ((((cbLight._m0[_2267].x * _2120) * ((_2317 * _2318) + _1056)) * _2341) * _2164);
    float _2431 = (((((_2401 * _2320) + _1058) * cbLight._m0[_2355].y) * _2420) * _2151) + ((((cbLight._m0[_2267].y * _2121) * ((_2317 * _2320) + _1058)) * _2341) * _2164);
    float _2432 = (((((_2401 * _2321) + _1059) * cbLight._m0[_2355].z) * _2420) * _2151) + ((((cbLight._m0[_2267].z * _2122) * ((_2317 * _2321) + _1059)) * _2341) * _2164);
    float _2494;
    float _2496;
    float _2498;
    if (_2204)
    {
        _2494 = _2430;
        _2496 = _2431;
        _2498 = _2432;
    }
    else
    {
        uint _2500 = _2128 + 2u;
        uint _2504 = _2128 + 10u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _909) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _986;
        float _2521 = cbLight._m0[_2500].y + _987;
        float _2522 = cbLight._m0[_2500].z + _988;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_906, _907, _908), vec3(cbLight._m0[_2500].xyz));
        float _4513 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2534 = dot(vec3(_906, _907, _908), vec3(_2527, _2528, _2529));
        float _4524 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4535 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
        float _2560 = 1.0 - _2519;
        float _2570 = (0.5 / (((_2296 * ((_2533 * _2560) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2560) + _2519) * _2533))) * _2533;
        float _4546 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2494 = (((((_2553 * _2318) + _1056) * cbLight._m0[_2504].x) * _2572) * _2573) + _2430;
        _2496 = (((((_2553 * _2320) + _1058) * cbLight._m0[_2504].y) * _2572) * _2573) + _2431;
        _2498 = (((((_2553 * _2321) + _1059) * cbLight._m0[_2504].z) * _2572) * _2573) + _2432;
    }
    float _2608;
    float _2610;
    float _2612;
    if (_2222)
    {
        _2608 = _2494;
        _2610 = _2496;
        _2612 = _2498;
    }
    else
    {
        uint _2619 = _2128 + 3u;
        uint _2623 = _2128 + 11u;
        float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2619].w)) * _909) * 0.949999988079071044921875);
        float _2638 = _2637 * _2637;
        float _2639 = cbLight._m0[_2619].x + _986;
        float _2640 = cbLight._m0[_2619].y + _987;
        float _2641 = cbLight._m0[_2619].z + _988;
        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
        float _2646 = _2645 * _2639;
        float _2647 = _2645 * _2640;
        float _2648 = _2645 * _2641;
        float _2649 = dot(vec3(_906, _907, _908), vec3(cbLight._m0[_2619].xyz));
        float _4562 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2653 = dot(vec3(_906, _907, _908), vec3(_2646, _2647, _2648));
        float _4573 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2657 = dot(vec3(cbLight._m0[_2619].xyz), vec3(_2646, _2647, _2648));
        float _4584 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2661 = _2638 * _2638;
        float _2665 = ((_2656 * _2656) * (_2661 + (-1.0))) + 1.0;
        float _2672 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
        float _2679 = 1.0 - _2638;
        float _2689 = (0.5 / (((_2296 * ((_2652 * _2679) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2296 * _2679) + _2638) * _2652))) * _2652;
        float _4595 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2691 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2661 / ((_2665 * _2665) * 3.141590118408203125));
        float _2692 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2608 = (((((_2672 * _2318) + _1056) * cbLight._m0[_2623].x) * _2691) * _2692) + _2494;
        _2610 = (((((_2672 * _2320) + _1058) * cbLight._m0[_2623].y) * _2691) * _2692) + _2496;
        _2612 = (((((_2672 * _2321) + _1059) * cbLight._m0[_2623].z) * _2691) * _2692) + _2498;
    }
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    if (_2126.y == 0u)
    {
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2768 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2767;
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2767;
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2767;
        uvec4 _2782 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2783 = _2782.x;
        uint _2794 = uint((float(_2782.y) * floor(float(uint(cbSceneParam._m0[85u].y * _995) / _2783))) + floor(float(uint(cbSceneParam._m0[85u].x * _994) / _2783)));
        float _2804 = (log2(_2770 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2805 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        uint _2808 = uint(isnan(14.0) ? _2805 : (isnan(_2805) ? 14.0 : min(_2805, 14.0)));
        uvec4 _2813 = texelFetch(g_lightClusterGridBuffer, int(((_2808 << 2u) + (_2794 << 6u)) >> 2u));
        uint _2814 = _2813.x;
        uint _2815 = _2782.z;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((((1u << ((_2815 >> 4u) & 15u)) + 4294967295u) & _2814) == 0u) || ((_2815 & 240u) == 0u))
        {
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
        }
        else
        {
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            uint _3066 = 0u;
            uint _3075;
            bool _3076;
            for (;;)
            {
                _3075 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                _3076 = _3075 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3076)
                {
                    frontier_phi_61_pred = _3060;
                    frontier_phi_61_pred_1 = _3065;
                    frontier_phi_61_pred_2 = _3064;
                    frontier_phi_61_pred_3 = _3063;
                    frontier_phi_61_pred_4 = _3062;
                    frontier_phi_61_pred_5 = _3061;
                }
                else
                {
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    uint _3190;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3075;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    for (;;)
                    {
                        uint _3194 = uint(findLSB(_3190)) + (_3066 << 5u);
                        uint _3191 = (_3190 + 4294967295u) & _3190;
                        uint _3196 = _3194 * 48u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3216 = (_3194 * 48u) + 4u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 3u)).x));
                        uint _3235 = (_3194 * 48u) + 8u;
                        vec3 _3246 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x));
                        float _3250 = _3210.x - _2768;
                        float _3251 = _3210.y - _2769;
                        float _3252 = _3210.z - _2770;
                        float _3253 = dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252));
                        float _3256 = inversesqrt(_3253);
                        float _3257 = _3256 * _3250;
                        float _3258 = _3256 * _3251;
                        float _3259 = _3256 * _3252;
                        float _3260 = dot(vec3(_1013, _1016, _1019), vec3(_3257, _3258, _3259));
                        float _3265 = 1.0 - (_3253 * _3210.w);
                        float _4621 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3267 = sqrt(_3253) * _3229.w;
                        float _3270 = 1.39999997615814208984375 / (_3267 + 1.39999997615814208984375);
                        float _3271 = _3270 * _3270;
                        float _3274 = ((1.0 - _3271) * _3260) + _3271;
                        float _3277 = _3267 * _3267;
                        float _3281 = ((isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))) * _3266) / ((_3277 * 0.699999988079071044921875) + 1.0);
                        float _3285 = (-0.0) - _2768;
                        float _3286 = (-0.0) - _2769;
                        float _3287 = (-0.0) - _2770;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3292 = _3291 * _3285;
                        float _3293 = _3291 * _3286;
                        float _3294 = _3291 * _3287;
                        float _3302 = exp2(log2(1.0 / ((_3277 * 3.5) + 5.0)) * 0.25);
                        float _3303 = 1.0 - _1088;
                        float _3310 = sqrt(1.0 - ((1.0 - (_3303 * _3303)) * (1.0 - (_3302 * _3302))));
                        float _3311 = _3310 * _3310;
                        float _3312 = _3311 * _3311;
                        float _3313 = _3292 + _3257;
                        float _3314 = _3293 + _3258;
                        float _3315 = _3294 + _3259;
                        float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                        float _3323 = dot(vec3(_1013, _1016, _1019), vec3(_3292, _3293, _3294));
                        float _4637 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3326 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3327 = dot(vec3(_1013, _1016, _1019), vec3(_3319 * _3313, _3319 * _3314, _3319 * _3315));
                        float _4648 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3330 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3334 = ((_3330 * _3330) * (_3312 + (-1.0))) + 1.0;
                        float _3335 = _3270 * _3311;
                        float _3336 = _3335 * _3335;
                        float _3339 = ((1.0 - _3336) * _3260) + _3336;
                        float _4659 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3340 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3341 = 1.0 - _3311;
                        float _3351 = (0.5 / (((_3340 * ((_3326 * _3341) + _3311)) + 9.9999999392252902907785028219223e-09) + (((_3340 * _3341) + _3311) * _3326))) * _3340;
                        float _4670 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3362 = (((_3312 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3334 * _3334) * ((_3277 * 2.1991131305694580078125) + 3.141590118408203125))) * _3266;
                        _3119 = (_3281 * _3229.x) + _3187;
                        _3120 = (_3281 * _3229.y) + _3188;
                        _3121 = (_3281 * _3229.z) + _3189;
                        _3116 = (_3362 * _3246.x) + _3184;
                        _3117 = (_3362 * _3246.y) + _3185;
                        _3118 = (_3362 * _3246.z) + _3186;
                        if (_3191 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3191;
                        }
                    }
                    frontier_phi_61_pred = _3116;
                    frontier_phi_61_pred_1 = _3121;
                    frontier_phi_61_pred_2 = _3120;
                    frontier_phi_61_pred_3 = _3119;
                    frontier_phi_61_pred_4 = _3118;
                    frontier_phi_61_pred_5 = _3117;
                }
                _2916 = frontier_phi_61_pred;
                _2926 = frontier_phi_61_pred_1;
                _2924 = frontier_phi_61_pred_2;
                _2922 = frontier_phi_61_pred_3;
                _2920 = frontier_phi_61_pred_4;
                _2918 = frontier_phi_61_pred_5;
                uint _3067 = _3066 + 1u;
                if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3060 = _2916;
                    _3061 = _2918;
                    _3062 = _2920;
                    _3063 = _2922;
                    _3064 = _2924;
                    _3065 = _2926;
                    _3066 = _3067;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
        }
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.z;
        uint _2932 = (_2930 >> 8u) & 15u;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        if (((4294967295u << _2932) & _2814) == 0u)
        {
            _3028 = _2915;
            _3030 = _2917;
            _3032 = _2919;
            _3034 = _2921;
            _3036 = _2923;
            _3038 = _2925;
        }
        else
        {
            float _3053 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
            float _3054 = _3053 * _2768;
            float _3055 = _3053 * _2769;
            float _3056 = _3053 * _2770;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2932 < ((_2930 >> 12u) & 15u))
            {
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3167 = _2915;
                float _3168 = _2917;
                float _3169 = _2919;
                float _3170 = _2921;
                float _3171 = _2923;
                float _3172 = _2925;
                uint _3173 = _2932;
                uint _3182;
                bool _3183;
                for (;;)
                {
                    _3182 = texelFetch(g_lightClassification, int((((_2808 << 5u) + (_2794 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                    _3183 = _3182 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3183)
                    {
                        frontier_phi_67_pred = _3170;
                        frontier_phi_67_pred_1 = _3171;
                        frontier_phi_67_pred_2 = _3172;
                        frontier_phi_67_pred_3 = _3169;
                        frontier_phi_67_pred_4 = _3168;
                        frontier_phi_67_pred_5 = _3167;
                    }
                    else
                    {
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3380 = _3167;
                        float _3381 = _3168;
                        float _3382 = _3169;
                        float _3383 = _3170;
                        float _3384 = _3171;
                        float _3385 = _3172;
                        uint _3386 = _3182;
                        uint _3387;
                        vec4 _3412;
                        float _3413;
                        vec4 _3428;
                        vec3 _3440;
                        vec4 _3455;
                        vec4 _3470;
                        float _3516;
                        bool _3517;
                        for (;;)
                        {
                            uint _3397 = ((_3173 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3386));
                            _3387 = (_3386 + 4294967295u) & _3386;
                            uint _3399 = _3397 * 40u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            _3413 = _3412.w;
                            uint _3415 = (_3397 * 40u) + 4u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3397 * 40u) + 8u;
                            _3440 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x));
                            uint _3442 = (_3397 * 40u) + 16u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3397 * 40u) + 20u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3397 * 40u) + 24u;
                            vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3491 = (_3397 * 40u) + 28u;
                            vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            _3516 = fma(_2770, _3504.z, fma(_2769, _3504.y, _3504.x * _2768)) + _3504.w;
                            _3517 = !((fma(_2770, _3485.z, fma(_2769, _3485.y, _3485.x * _2768)) + _3485.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3517)
                            {
                                float _3544 = _3412.x - _2768;
                                float _3545 = _3412.y - _2769;
                                float _3546 = _3412.z - _2770;
                                float _3547 = dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546));
                                float _3550 = inversesqrt(_3547);
                                float _3551 = _3550 * _3544;
                                float _3552 = _3550 * _3545;
                                float _3553 = _3550 * _3546;
                                float _3557 = 1.0 - (_3547 / (_3413 * _3413));
                                float _4681 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3562 = sqrt(_3547) * _3428.w;
                                float _3564 = 1.39999997615814208984375 / (_3562 + 1.39999997615814208984375);
                                float _3565 = _3564 * _3564;
                                float _3568 = ((1.0 - _3565) * dot(vec3(_3551, _3552, _3553), vec3(_1013, _1016, _1019))) + _3565;
                                float _3571 = _3562 * _3562;
                                float _3575 = (fma(_2770, _3455.z, fma(_2769, _3455.y, _3455.x * _2768)) + _3455.w) / _3516;
                                float _3576 = (fma(_2770, _3470.z, fma(_2769, _3470.y, _3470.x * _2768)) + _3470.w) / _3516;
                                float _3580 = 1.0 - dot(vec2(_3575, _3576), vec2(_3575, _3576));
                                float _4697 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3582 = _3581 * (((isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0))) * _3558) / ((_3571 * 0.699999988079071044921875) + 1.0));
                                float _3594 = exp2(log2(1.0 / ((_3571 * 3.5) + 5.0)) * 0.25);
                                float _3595 = 1.0 - _1088;
                                float _3602 = sqrt(1.0 - ((1.0 - (_3595 * _3595)) * (1.0 - (_3594 * _3594))));
                                float _3603 = _3602 * _3602;
                                float _3604 = _3603 * _3603;
                                float _3605 = _3551 - _3054;
                                float _3606 = _3552 - _3055;
                                float _3607 = _3553 - _3056;
                                float _3611 = inversesqrt(dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607)));
                                float _3615 = dot(vec3(_1013, _1016, _1019), vec3((-0.0) - _3054, (-0.0) - _3055, (-0.0) - _3056));
                                float _4708 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3619 = dot(vec3(_1013, _1016, _1019), vec3(_3611 * _3605, _3611 * _3606, _3611 * _3607));
                                float _4719 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3622 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3626 = ((_3622 * _3622) * (_3604 + (-1.0))) + 1.0;
                                float _3627 = _3564 * _3603;
                                float _3628 = _3627 * _3627;
                                float _3634 = ((1.0 - _3628) * dot(vec3(_1013, _1016, _1019), vec3(_3551, _3552, _3553))) + _3628;
                                float _4730 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3636 = 1.0 - _3603;
                                float _3646 = (0.5 / (((_3635 * ((_3618 * _3636) + _3603)) + 9.9999999392252902907785028219223e-09) + (((_3635 * _3636) + _3603) * _3618))) * _3635;
                                float _4741 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3656 = (_3581 * _3558) * (((_3604 * 3.1415927410125732421875) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) / ((_3626 * _3626) * ((_3571 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3656 * _3440.x;
                                frontier_phi_73_pred_1 = _3656 * _3440.y;
                                frontier_phi_73_pred_2 = _3582 * _3428.z;
                                frontier_phi_73_pred_3 = _3582 * _3428.y;
                                frontier_phi_73_pred_4 = _3582 * _3428.x;
                                frontier_phi_73_pred_5 = _3656 * _3440.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3660 = frontier_phi_73_pred;
                            _3661 = frontier_phi_73_pred_1;
                            _3665 = frontier_phi_73_pred_2;
                            _3664 = frontier_phi_73_pred_3;
                            _3663 = frontier_phi_73_pred_4;
                            _3662 = frontier_phi_73_pred_5;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3369 = _3662 + _3382;
                            if (_3387 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3387;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3370;
                        frontier_phi_67_pred_1 = _3371;
                        frontier_phi_67_pred_2 = _3372;
                        frontier_phi_67_pred_3 = _3369;
                        frontier_phi_67_pred_4 = _3368;
                        frontier_phi_67_pred_5 = _3367;
                    }
                    _3035 = frontier_phi_67_pred;
                    _3037 = frontier_phi_67_pred_1;
                    _3039 = frontier_phi_67_pred_2;
                    _3033 = frontier_phi_67_pred_3;
                    _3031 = frontier_phi_67_pred_4;
                    _3029 = frontier_phi_67_pred_5;
                    uint _3174 = _3173 + 1u;
                    if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3167 = _3029;
                        _3168 = _3031;
                        _3169 = _3033;
                        _3170 = _3035;
                        _3171 = _3037;
                        _3172 = _3039;
                        _3173 = _3174;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3037;
                frontier_phi_55_56_ladder_1 = _3039;
                frontier_phi_55_56_ladder_2 = _3035;
                frontier_phi_55_56_ladder_3 = _3033;
                frontier_phi_55_56_ladder_4 = _3031;
                frontier_phi_55_56_ladder_5 = _3029;
            }
            else
            {
                frontier_phi_55_56_ladder = _2923;
                frontier_phi_55_56_ladder_1 = _2925;
                frontier_phi_55_56_ladder_2 = _2921;
                frontier_phi_55_56_ladder_3 = _2919;
                frontier_phi_55_56_ladder_4 = _2917;
                frontier_phi_55_56_ladder_5 = _2915;
            }
            _3028 = frontier_phi_55_56_ladder_5;
            _3030 = frontier_phi_55_56_ladder_4;
            _3032 = frontier_phi_55_56_ladder_3;
            _3034 = frontier_phi_55_56_ladder_2;
            _3036 = frontier_phi_55_56_ladder;
            _3038 = frontier_phi_55_56_ladder_1;
        }
        float _3043 = isnan(1.0) ? _1072 : (isnan(_1072) ? 1.0 : min(_1072, 1.0));
        _2827 = (_3043 * _3034) + _2260;
        _2829 = (_3043 * _3036) + _2262;
        _2831 = (_3043 * _3038) + _2264;
        _2833 = ((_3028 * _1056) * _3043) + _2608;
        _2835 = ((_3030 * _1058) * _3043) + _2610;
        _2837 = ((_3032 * _1059) * _3043) + _2612;
    }
    else
    {
        _2827 = _2260;
        _2829 = _2262;
        _2831 = _2264;
        _2833 = _2608;
        _2835 = _2610;
        _2837 = _2612;
    }
    float _4757 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _4768 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _4779 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    uint _2857 = _278 + 6u;
    float _2865 = _994 / cbSceneParam._m0[86u].x;
    float _2866 = _995 / cbSceneParam._m0[86u].y;
    vec4 _2880 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, (log2((isnan(cbSceneParam._m0[77u].w) ? _928 : (isnan(_928) ? cbSceneParam._m0[77u].w : min(_928, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2882 = _2880.x;
    float _2883 = _2880.y;
    float _2884 = _2880.z;
    float _2885 = _2880.w;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    if (_928 > cbSceneParam._m0[78u].w)
    {
        float _2940 = isnan(_928) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _928 : min(cbSceneParam._m0[80u].w, _928));
        float _2941 = _2940 / _928;
        float _2952 = _2941 * _979;
        float _2953 = _980 * _2941;
        float _2954 = (-0.0) - _2953;
        float _2956 = _2941 * _981;
        float _2958 = (cbSceneParam._m0[77u].w * _2954) / _2940;
        float _2959 = _2958 + cbSceneParam._m0[79u].w;
        float _2960 = cbSceneParam._m0[79u].w - _2953;
        float _2966 = sqrt(((_2952 * _2952) + (_2953 * _2953)) + (_2956 * _2956));
        float _2969 = (1.0 - (cbSceneParam._m0[77u].w / _2940)) * _2966;
        float _2974 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2976 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3129;
        if (abs((_2954 - _2958) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3129 = ((((_2959 > 0.0) ? exp2(_2974 * _2959) : (2.0 - exp2(_2976 * _2959))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2969;
        }
        else
        {
            float _3089 = 1.0 / cbSceneParam._m0[80u].x;
            float _3090 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : max(_2959, _2960));
            float _3091 = isnan(_2960) ? _2959 : (isnan(_2959) ? _2960 : min(_2959, _2960));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            _3129 = ((abs(_2966 / _2954) * cbSceneParam._m0[80u].y) * ((((_3100 - _3101) * 2.0) - ((exp2(_2974 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0)))) - exp2(_2974 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))))) * _3089)) - ((exp2(_2976 * _3100) - exp2(_2976 * _3101)) * _3089))) + (_2969 * cbSceneParam._m0[80u].z);
        }
        vec4 _3131 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, 1.0), 0.0);
        float _3140 = exp2((_3129 * (-1.44269502162933349609375)) * (1.0 - _3131.w));
        float _3141 = log2(_3140);
        float _3157 = log2(_2885);
        _2978 = (exp2(_3157 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].x)) * _3131.x) / cbSceneParam._m0[78u].x)) + _2882;
        _2980 = (exp2(_3157 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].y)) * _3131.y) / cbSceneParam._m0[78u].y)) + _2883;
        _2982 = (exp2(_3157 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].z)) * _3131.z) / cbSceneParam._m0[78u].z)) + _2884;
        _2984 = _3140 * _2885;
    }
    else
    {
        _2978 = _2882;
        _2980 = _2883;
        _2982 = _2884;
        _2984 = _2885;
    }
    float _2996 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2997 = _2996 == 3.0;
    float _2998 = log2(_2984);
    float _3005 = exp2(_2998 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2827 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1072))) + ((_2833 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1879)) * cbPerFrame._m0[3u].x));
    float _3006 = exp2(_2998 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2829 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1072))) + ((_2835 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1879)) * cbPerFrame._m0[3u].x));
    float _3007 = exp2(_2998 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2831 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1072))) + ((_2837 + ((isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))) * _1879)) * cbPerFrame._m0[3u].x));
    float _3016 = (_2996 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3016 * (_2997 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.y = _3016 * (_2997 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2980)));
    SV_Target.z = _3016 * (_2997 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2982)));
    SV_Target.w = cbInstanceData._m0[_2857].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2857].w;
}


