#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1436;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3763 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3774 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3785 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _370 = _365.x * cbMtdParam._m0[11u].x;
    float _371 = _365.y * cbMtdParam._m0[11u].y;
    float _372 = _365.z * cbMtdParam._m0[11u].z;
    vec4 _391 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _453 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _470 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_441 - _453) * cbMtdParam._m0[23u].w) + _453) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3796 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _481 = (_339.x * cbMtdParam._m0[9u].x) * ((_471 * ((_391.x * cbMtdParam._m0[12u].x) - _370)) + _370);
    float _482 = (_339.y * cbMtdParam._m0[9u].y) * ((_471 * ((_391.y * cbMtdParam._m0[12u].y) - _371)) + _371);
    float _483 = (_339.z * cbMtdParam._m0[9u].z) * ((_471 * ((_391.z * cbMtdParam._m0[12u].z) - _372)) + _372);
    float _487 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _481;
    float _490 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _482;
    float _493 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _483;
    float _501 = (((_481 - _487) * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) + _487) * 4.55000019073486328125;
    float _503 = (((_482 - _490) * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) + _490) * 4.55000019073486328125;
    float _505 = (((_483 - _493) * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) + _493) * 4.55000019073486328125;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _567 = _565.x;
    float _568 = _565.y;
    float _569 = _565.z;
    float _578 = ((_548.z - _569) * _471) + _569;
    float _581 = ((((_548.x - _567) * _471) + _567) * 2.0) + (-1.0);
    float _582 = ((((_548.y - _568) * _471) + _568) * 2.0) + (-1.0);
    float _583 = dot(vec2(_581, _582), vec2(_581, _582));
    float _3807 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _588 = sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _631 = _629.x;
    float _632 = 1.0 - _631;
    float _641 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _644 = ((isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : min(_641, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _653 = (_644 - ((((((_631 - _632) * cbMtdParam._m0[24u].z) + _632) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _644))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3828 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _654 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _661 = (_654 * (cbMtdParam._m0[17u].x - _501)) + _501;
    float _662 = (_654 * (cbMtdParam._m0[17u].y - _503)) + _503;
    float _663 = (_654 * (cbMtdParam._m0[17u].z - _505)) + _505;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _677 = _675.x;
    float _678 = 1.0 - _677;
    float _703 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_677 - _678) * cbMtdParam._m0[24u].w) + _678) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3839 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _704 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _712 = ((((cbMtdParam._m0[10u].x - _661) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _704) + _661;
    float _713 = ((((cbMtdParam._m0[10u].y - _662) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _704) + _662;
    float _714 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _663)) * _704) + _663;
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _742 = _740.x;
    float _759 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _742) * _471) + _742;
    float _763 = ((_726.x - _759) * cbMtdParam._m0[19u].z) + _759;
    float _765 = _763 - (_763 * _654);
    float _767 = _765 - (_765 * _704);
    float _772 = (((_523.z - _578) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _578;
    float _776 = ((_604.z - _772) * cbMtdParam._m0[19u].w) + _772;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _797 = (_790.x * 2.0) + (-1.0);
    float _798 = (_790.y * 2.0) + (-1.0);
    float _799 = dot(vec2(_797, _798), vec2(_797, _798));
    float _3850 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _807 = (_654 * (_790.z - _776)) + _776;
    float _810 = ((cbMtdParam._m0[23u].x - _807) * _704) + _807;
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _835 = (_829.x * 2.0) + (-1.0);
    float _836 = (_829.y * 2.0) + (-1.0);
    float _837 = dot(vec2(_835, _836), vec2(_835, _836));
    float _3861 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _851 = (_581 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_523.x * 2.0) + (-1.0)))) + (((_604.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _852 = (_582 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_523.y * 2.0) + (-1.0)))) + (((_604.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _864 = (((_797 - _851) + (cbMtdParam._m0[21u].x * _851)) * _654) + _851;
    float _865 = (((_798 - _852) + (cbMtdParam._m0[21u].x * _852)) * _654) + _852;
    float _866 = (_654 * (sqrt(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) - _588)) + _588;
    float _877 = (((_835 - _864) + (_864 * cbMtdParam._m0[22u].z)) * _704) + _864;
    float _878 = (((_836 - _865) + (_865 * cbMtdParam._m0[22u].z)) * _704) + _865;
    float _879 = ((sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) - _866) * _704) + _866;
    float _883 = cbMtdParam._m0[22u].x + _604.w;
    float _886 = fma(_879, _251 * NORMAL.x, fma(_878, _258 * TANGENT.x, (_244 * _236) * _877));
    float _889 = fma(_879, _251 * NORMAL.y, fma(_878, _258 * TANGENT.y, (_244 * _237) * _877));
    float _892 = fma(_879, _251 * NORMAL.z, fma(_878, _258 * TANGENT.z, (_244 * _238) * _877));
    float _896 = inversesqrt(dot(vec3(_886, _889, _892), vec3(_886, _889, _892)));
    float _897 = _896 * _886;
    float _898 = _896 * _889;
    float _899 = _896 * _892;
    float _3872 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _900 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _3894 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _3905 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3916 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _3927 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _905 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _919 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _969 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _959);
    float _970 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _959);
    float _971 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _959);
    float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
    float _976 = _969 * _975;
    float _977 = _970 * _975;
    float _978 = _971 * _975;
    float _984 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _985 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1003 = fma(_899, cbSceneParam._m0[5u].z, fma(_898, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _897));
    float _1006 = fma(_899, cbSceneParam._m0[6u].z, fma(_898, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _897));
    float _1009 = fma(_899, cbSceneParam._m0[7u].z, fma(_898, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _897));
    uint _1023 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1029 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_1023].x;
    float _1030 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_1023].y;
    float _1031 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_1023].z;
    float _3938 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1032 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _1035 = 1.0 - _905;
    float _1036 = _1032 * _1035;
    float _1037 = _1033 * _1035;
    float _1038 = _1034 * _1035;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _905;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _905;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _905;
    float _1046 = _1043 + 0.039999999105930328369140625;
    float _1048 = _1044 + 0.039999999105930328369140625;
    float _1049 = _1045 + 0.039999999105930328369140625;
    vec4 _1058 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _984, cbSceneParam._m0[86u].y * _985));
    float _1062 = ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * TEXCOORD_5.w) * _1058.x;
    float _1063 = dot(vec3(_897, _898, _899), vec3(_976, _977, _978));
    float _1066 = _1063 * 2.0;
    float _1070 = (_1066 * _897) - _976;
    float _1071 = (_1066 * _898) - _977;
    float _1072 = (_1066 * _899) - _978;
    float _1076 = abs(dot(vec3(_976, _977, _978), vec3(_897, _898, _899)));
    float _3971 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1078 = sqrt(_900);
    float _1091 = exp2((_1078 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1078 * 3.0));
    float _1097 = (1.0 - _1091) * ((_1078 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1098 = _1091 * _1078;
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1130 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1435;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1160 = fma(_1134, cbModelParam._m0[26u].z, fma(_1130, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1126));
        float _1164 = fma(_1134, cbModelParam._m0[27u].z, fma(_1130, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1126));
        float _1168 = fma(_1134, cbModelParam._m0[28u].z, fma(_1130, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1126));
        float _1193 = _1126 + _897;
        float _1194 = _1130 + _898;
        float _1195 = _1134 + _899;
        float _1205 = fma(_1195, cbModelParam._m0[26u].z, fma(_1194, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1193)) - _1160;
        float _1206 = fma(_1195, cbModelParam._m0[27u].z, fma(_1194, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1193)) - _1164;
        float _1207 = fma(_1195, cbModelParam._m0[28u].z, fma(_1194, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1193)) - _1168;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1160 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1164 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[34u].z) + ((((((_1168 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1263 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1229.x + (-0.5));
        float _1265 = _1263 * (_1229.y + (-0.5));
        float _1266 = _1263 * (_1229.z + (-0.5));
        float _1273 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1236.x + (-0.5));
        float _1275 = _1273 * (_1236.y + (-0.5));
        float _1276 = _1273 * (_1236.z + (-0.5));
        float _1283 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1243.x + (-0.5));
        float _1285 = _1283 * (_1243.y + (-0.5));
        float _1286 = _1283 * (_1243.z + (-0.5));
        float _1293 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1250.x + (-0.5));
        float _1295 = _1293 * (_1250.y + (-0.5));
        float _1296 = _1293 * (_1250.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1317 = (dot(vec3(_897, _898, _899), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1327 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4019 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1329 + 1.0))) + _1334) * _1297;
        float _1344 = _1265 * 0.5;
        float _1345 = _1275 * 0.5;
        float _1346 = _1285 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_897, _898, _899), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4052 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1371 + 1.0))) + _1376) * _1298;
        float _1386 = _1266 * 0.5;
        float _1387 = _1276 * 0.5;
        float _1388 = _1286 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_897, _898, _899), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4085 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1413 + 1.0))) + _1418) * _1299;
        _1435 = _1266;
        _1437 = _1265;
        _1438 = _1264;
        _1439 = _1276;
        _1440 = _1275;
        _1441 = _1274;
        _1442 = _1286;
        _1443 = _1285;
        _1444 = _1284;
        _1445 = _1299;
        _1446 = _1298;
        _1447 = _1297;
        _1448 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1449 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1436;
        _1437 = _1436;
        _1438 = _1436;
        _1439 = _1436;
        _1440 = _1436;
        _1441 = _1436;
        _1442 = _1436;
        _1443 = _1436;
        _1444 = _1436;
        _1445 = _1436;
        _1446 = _1436;
        _1447 = _1436;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1475 = fma(_1134, cbModelParam._m0[30u].z, fma(_1130, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1126));
        float _1479 = fma(_1134, cbModelParam._m0[31u].z, fma(_1130, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1126));
        float _1483 = fma(_1134, cbModelParam._m0[32u].z, fma(_1130, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1126));
        float _1506 = _1126 + _897;
        float _1507 = _1130 + _898;
        float _1508 = _1134 + _899;
        float _1518 = fma(_1508, cbModelParam._m0[30u].z, fma(_1507, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1506)) - _1475;
        float _1519 = fma(_1508, cbModelParam._m0[31u].z, fma(_1507, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1506)) - _1479;
        float _1520 = fma(_1508, cbModelParam._m0[32u].z, fma(_1507, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1506)) - _1483;
        float _1524 = inversesqrt(dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520)));
        float _1537 = ((_1524 * _1518) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1475 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1524 * _1519) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1479 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1524 * _1520) / cbModelParam._m0[35u].z) + ((((((_1483 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1537, _1538, _1539), 0.0);
        float _1574 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1541.x + (-0.5));
        float _1576 = _1574 * (_1541.y + (-0.5));
        float _1577 = _1574 * (_1541.z + (-0.5));
        float _1584 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1548.x + (-0.5));
        float _1586 = _1584 * (_1548.y + (-0.5));
        float _1587 = _1584 * (_1548.z + (-0.5));
        float _1594 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1555.x + (-0.5));
        float _1596 = _1594 * (_1555.y + (-0.5));
        float _1597 = _1594 * (_1555.z + (-0.5));
        float _1604 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1562.x + (-0.5));
        float _1606 = _1604 * (_1562.y + (-0.5));
        float _1607 = _1604 * (_1562.z + (-0.5));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = _1575 * 0.5;
        float _1612 = _1585 * 0.5;
        float _1613 = _1595 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_897, _898, _899), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4148 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1638 + 1.0))) + _1643) * _1608;
        float _1653 = _1576 * 0.5;
        float _1654 = _1586 * 0.5;
        float _1655 = _1596 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_897, _898, _899), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4181 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1680 + 1.0))) + _1685) * _1609;
        float _1695 = _1577 * 0.5;
        float _1696 = _1587 * 0.5;
        float _1697 = _1597 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_897, _898, _899), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4214 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1722 + 1.0))) + _1727) * _1610;
        _1744 = _1577;
        _1745 = _1576;
        _1746 = _1575;
        _1747 = _1587;
        _1748 = _1586;
        _1749 = _1585;
        _1750 = _1597;
        _1751 = _1596;
        _1752 = _1595;
        _1753 = _1610;
        _1754 = _1609;
        _1755 = _1608;
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1758 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
    }
    else
    {
        _1744 = _1436;
        _1745 = _1436;
        _1746 = _1436;
        _1747 = _1436;
        _1748 = _1436;
        _1749 = _1436;
        _1750 = _1436;
        _1751 = _1436;
        _1752 = _1436;
        _1753 = _1436;
        _1754 = _1436;
        _1755 = _1436;
        _1756 = 0.0;
        _1757 = 0.0;
        _1758 = 0.0;
    }
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1448)) + _1448;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1449)) + _1449;
    float _1770 = (cbModelParam._m0[1u].x * (_1758 - _1450)) + _1450;
    float _1791 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1768));
    float _1812 = _1070 * 0.5;
    float _1813 = _1071 * 0.5;
    float _1814 = _1072 * 0.5;
    float _1815 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1746, _1749, _1752, _1755));
    float _1818 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1821 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1855;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1828 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1435, _1439, _1442, _1445));
        float _1832 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1437, _1440, _1443, _1446));
        float _1836 = dot(vec4(_1812, _1813, _1814, 1.0), vec4(_1438, _1441, _1444, _1447));
        float _1843 = dot(vec4(cbModelParam._m0[39u]), vec4(_1812, _1813, _1814, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1866;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1857 = dot(vec4(cbModelParam._m0[40u]), vec4(_1812, _1813, _1814, 1.0));
        _1866 = dot(vec3(isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1857) ? 0.0 : (isnan(0.0) ? _1857 : max(0.0, _1857))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1866 = 1.0;
    }
    float _1870 = (_1866 * cbModelParam._m0[1u].x) + (_1855 * (1.0 - cbModelParam._m0[1u].x));
    float _1880 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _900);
    float _1881 = isnan(_1880) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1880 : min(cbModelParam._m0[25u].z, _1880));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1929 = fma(_1134, cbModelParam._m0[13u].z, fma(_1130, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1126)) + cbModelParam._m0[13u].w;
        float _1933 = fma(_1134, cbModelParam._m0[14u].z, fma(_1130, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1126)) + cbModelParam._m0[14u].w;
        float _1937 = fma(_1134, cbModelParam._m0[15u].z, fma(_1130, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1126)) + cbModelParam._m0[15u].w;
        float _1940 = fma(_1072, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070));
        float _1943 = fma(_1072, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070));
        float _1946 = fma(_1072, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070));
        float _1974;
        if (_1940 > 0.0)
        {
            _1974 = abs((1.0 - _1929) / _1940);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1929 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1974 = frontier_phi_14_12_ladder;
        }
        float _2177;
        if (_1943 > 0.0)
        {
            _2177 = abs((1.0 - _1933) / _1943);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1933 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2177 = frontier_phi_23_19_ladder;
        }
        float _2431;
        if (_1946 > 0.0)
        {
            _2431 = abs((1.0 - _1937) / _1946);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1937 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2431 = frontier_phi_35_30_ladder;
        }
        float _2433 = isnan(_2177) ? _1974 : (isnan(_1974) ? _2177 : min(_1974, _2177));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1940) + _1929;
        float _2439 = (_2434 * _1943) + _1933;
        float _2440 = (_2434 * _1946) + _1937;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2443 = (-1.0) - _2441;
        float _2445 = _2441 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2440 > _2445) || ((_2440 < _2443) || ((_2439 > _2445) || ((_2439 < _2443) || ((_2438 < _2443) || (_2438 > _2445))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2440, cbModelParam._m0[9u].z, fma(_2439, cbModelParam._m0[9u].y, _2438 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2440, cbModelParam._m0[10u].z, fma(_2439, cbModelParam._m0[10u].y, _2438 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2440, cbModelParam._m0[11u].z, fma(_2439, cbModelParam._m0[11u].y, _2438 * cbModelParam._m0[11u].x))), _1881);
            frontier_phi_13_35_ladder = _2568.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2568.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2568.x * cbModelParam._m0[1u].y;
        }
        _1962 = frontier_phi_13_35_ladder_2;
        _1964 = frontier_phi_13_35_ladder_1;
        _1966 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1070, _1071, _1072), _1881);
        _1962 = _1950.x * cbModelParam._m0[1u].y;
        _1964 = _1950.y * cbModelParam._m0[1u].y;
        _1966 = _1950.z * cbModelParam._m0[1u].y;
    }
    float _1970 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _900);
    float _1971 = isnan(_1970) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1970 : min(cbModelParam._m0[25u].w, _1970));
    float _2061;
    float _2063;
    float _2065;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2025 = fma(_1134, cbModelParam._m0[21u].z, fma(_1130, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1126)) + cbModelParam._m0[21u].w;
        float _2029 = fma(_1134, cbModelParam._m0[22u].z, fma(_1130, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1126)) + cbModelParam._m0[22u].w;
        float _2033 = fma(_1134, cbModelParam._m0[23u].z, fma(_1130, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1126)) + cbModelParam._m0[23u].w;
        float _2036 = fma(_1072, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070));
        float _2039 = fma(_1072, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070));
        float _2042 = fma(_1072, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070));
        float _2182;
        if (_2036 > 0.0)
        {
            _2182 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2182 = frontier_phi_25_21_ladder;
        }
        float _2458;
        if (_2039 > 0.0)
        {
            _2458 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2458 = frontier_phi_37_32_ladder;
        }
        float _2671;
        if (_2042 > 0.0)
        {
            _2671 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2671 = frontier_phi_46_43_ladder;
        }
        float _2673 = isnan(_2458) ? _2182 : (isnan(_2182) ? _2458 : min(_2182, _2458));
        float _2674 = isnan(_2671) ? _2673 : (isnan(_2673) ? _2671 : min(_2673, _2671));
        float _2678 = (_2674 * _2036) + _2025;
        float _2679 = (_2674 * _2039) + _2029;
        float _2680 = (_2674 * _2042) + _2033;
        float _2681 = _2674 * 9.9999997473787516355514526367188e-05;
        float _2682 = (-1.0) - _2681;
        float _2684 = _2681 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2680 > _2684) || ((_2680 < _2682) || ((_2679 > _2684) || ((_2679 < _2682) || ((_2678 < _2682) || (_2678 > _2684))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2680, cbModelParam._m0[17u].z, fma(_2679, cbModelParam._m0[17u].y, _2678 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2680, cbModelParam._m0[18u].z, fma(_2679, cbModelParam._m0[18u].y, _2678 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2680, cbModelParam._m0[19u].z, fma(_2679, cbModelParam._m0[19u].y, _2678 * cbModelParam._m0[19u].x))), _1971);
            frontier_phi_22_46_ladder = _2879.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2879.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2879.x * cbModelParam._m0[1u].z;
        }
        _2061 = frontier_phi_22_46_ladder_2;
        _2063 = frontier_phi_22_46_ladder_1;
        _2065 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2045 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1070, _1071, _1072), _1971);
        _2061 = _2045.x * cbModelParam._m0[1u].z;
        _2063 = _2045.y * cbModelParam._m0[1u].z;
        _2065 = _2045.z * cbModelParam._m0[1u].z;
    }
    float _2078 = (((_1097 * _1046) + _1098) * _1062) * ((cbModelParam._m0[1u].w * (_2061 - _1962)) + _1962);
    float _2080 = (((_1097 * _1048) + _1098) * _1062) * ((cbModelParam._m0[1u].w * (_2063 - _1964)) + _1964);
    float _2082 = (((_1097 * _1049) + _1098) * _1062) * ((cbModelParam._m0[1u].w * (_2065 - _1966)) + _1966);
    float _2085 = fma(_2082, cbSceneParam._m0[89u].z, fma(_2080, cbSceneParam._m0[89u].y, _2078 * cbSceneParam._m0[89u].x));
    float _2088 = fma(_2082, cbSceneParam._m0[90u].z, fma(_2080, cbSceneParam._m0[90u].y, _2078 * cbSceneParam._m0[90u].x));
    float _2091 = fma(_2082, cbSceneParam._m0[91u].z, fma(_2080, cbSceneParam._m0[91u].y, _2078 * cbSceneParam._m0[91u].x));
    uvec4 _2101 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2103 = _2101.x * 14u;
    uint _2104 = _2103 + 13u;
    float _2111 = _1062 + (-1.0);
    float _2116 = (cbLight._m0[_2104].x * _2111) + 1.0;
    float _2117 = (cbLight._m0[_2104].y * _2111) + 1.0;
    float _2118 = (cbLight._m0[_2104].z * _2111) + 1.0;
    float _2119 = (cbLight._m0[_2104].w * _2111) + 1.0;
    uint _2120 = _2103 + 5u;
    float _2126 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
    uint _2130 = _2103 + 4u;
    float _2136 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2140 = _2103 | 1u;
    float _2151 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_897, _898, _899));
    float _2154 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_897, _898, _899));
    float _4350 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _4361 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2159 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2161 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2168 = ((cbLight._m0[_2120].x * _2126) * _2161) + ((cbLight._m0[_2130].x * _2136) * _2159);
    float _2169 = ((_2126 * cbLight._m0[_2120].y) * _2161) + ((_2136 * cbLight._m0[_2130].y) * _2159);
    float _2170 = ((_2126 * cbLight._m0[_2120].z) * _2161) + ((_2136 * cbLight._m0[_2130].z) * _2159);
    uvec4 _2174 = floatBitsToUint(cbLight._m0[_2103 + 12u]);
    bool _2176 = _2174.x == 0u;
    float _2187;
    float _2189;
    float _2191;
    if (_2176)
    {
        _2187 = _2168;
        _2189 = _2169;
        _2191 = _2170;
    }
    else
    {
        uint _2195 = _2103 + 6u;
        float _2211 = (dot(vec3(cbLight._m0[_2103 + 2u].xyz), vec3(_897, _898, _899)) * 0.5) + 0.5;
        float _2212 = _2211 * _2211;
        float _4372 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2213 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2214 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2187 = (((cbLight._m0[_2195].x * 0.3183098733425140380859375) * _2213) * _2214) + _2168;
        _2189 = (((cbLight._m0[_2195].y * 0.3183098733425140380859375) * _2213) * _2214) + _2169;
        _2191 = (((cbLight._m0[_2195].z * 0.3183098733425140380859375) * _2213) * _2214) + _2170;
    }
    bool _2194 = _2174.y == 0u;
    float _2232;
    float _2234;
    float _2236;
    if (_2194)
    {
        _2232 = _2187;
        _2234 = _2189;
        _2236 = _2191;
    }
    else
    {
        uint _2402 = _2103 + 7u;
        float _2418 = (dot(vec3(cbLight._m0[_2103 + 3u].xyz), vec3(_897, _898, _899)) * 0.5) + 0.5;
        float _2419 = _2418 * _2418;
        float _4388 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2420 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2421 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2232 = (((cbLight._m0[_2402].x * 0.3183098733425140380859375) * _2420) * _2421) + _2187;
        _2234 = (((cbLight._m0[_2402].y * 0.3183098733425140380859375) * _2420) * _2421) + _2189;
        _2236 = (((cbLight._m0[_2402].z * 0.3183098733425140380859375) * _2420) * _2421) + _2191;
    }
    uint _2239 = _2103 + 8u;
    float _2252 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _900) * 0.949999988079071044921875);
    float _2253 = _2252 * _2252;
    float _2254 = cbLight._m0[_2103].x + _976;
    float _2255 = cbLight._m0[_2103].y + _977;
    float _2256 = cbLight._m0[_2103].z + _978;
    float _2260 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
    float _2261 = _2260 * _2254;
    float _2262 = _2260 * _2255;
    float _2263 = _2260 * _2256;
    float _2264 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2103].xyz));
    float _4404 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _4415 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _2268 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2269 = dot(vec3(_897, _898, _899), vec3(_2261, _2262, _2263));
    float _4426 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2273 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2261, _2262, _2263));
    float _4437 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2277 = _2253 * _2253;
    float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
    float _2289 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
    float _2290 = 0.959999978542327880859375 - _1043;
    float _2292 = 0.959999978542327880859375 - _1044;
    float _2293 = 0.959999978542327880859375 - _1045;
    float _2300 = 1.0 - _2253;
    float _2311 = (0.5 / (((_2268 * ((_2267 * _2300) + _2253)) + 9.9999999392252902907785028219223e-09) + (((_2268 * _2300) + _2253) * _2267))) * _2267;
    float _4448 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2313 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
    uint _2324 = _2103 + 9u;
    float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _900) * 0.949999988079071044921875);
    float _2336 = _2335 * _2335;
    float _2337 = cbLight._m0[_2140].x + _976;
    float _2338 = cbLight._m0[_2140].y + _977;
    float _2339 = cbLight._m0[_2140].z + _978;
    float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
    float _2344 = _2343 * _2337;
    float _2345 = _2343 * _2338;
    float _2346 = _2343 * _2339;
    float _2347 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2140].xyz));
    float _4459 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2351 = dot(vec3(_897, _898, _899), vec3(_2344, _2345, _2346));
    float _4470 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2344, _2345, _2346));
    float _4481 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2336 * _2336;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2370 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2377 = 1.0 - _2336;
    float _2387 = (0.5 / (((_2268 * ((_2350 * _2377) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2268 * _2377) + _2336) * _2350))) * _2350;
    float _4492 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2389 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    float _2399 = (((((_2370 * _2290) + _1046) * cbLight._m0[_2324].x) * _2389) * _2126) + (((((_2289 * _2290) + _1046) * cbLight._m0[_2239].x) * _2313) * _2136);
    float _2400 = (((((_2370 * _2292) + _1048) * cbLight._m0[_2324].y) * _2389) * _2126) + (((((_2289 * _2292) + _1048) * cbLight._m0[_2239].y) * _2313) * _2136);
    float _2401 = (((((_2370 * _2293) + _1049) * cbLight._m0[_2324].z) * _2389) * _2126) + (((((_2289 * _2293) + _1049) * cbLight._m0[_2239].z) * _2313) * _2136);
    float _2463;
    float _2465;
    float _2467;
    if (_2176)
    {
        _2463 = _2399;
        _2465 = _2400;
        _2467 = _2401;
    }
    else
    {
        uint _2469 = _2103 + 2u;
        uint _2473 = _2103 + 10u;
        float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _900) * 0.949999988079071044921875);
        float _2488 = _2487 * _2487;
        float _2489 = cbLight._m0[_2469].x + _976;
        float _2490 = cbLight._m0[_2469].y + _977;
        float _2491 = cbLight._m0[_2469].z + _978;
        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
        float _2496 = _2495 * _2489;
        float _2497 = _2495 * _2490;
        float _2498 = _2495 * _2491;
        float _2499 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2469].xyz));
        float _4503 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2503 = dot(vec3(_897, _898, _899), vec3(_2496, _2497, _2498));
        float _4514 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2507 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2496, _2497, _2498));
        float _4525 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2511 = _2488 * _2488;
        float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
        float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
        float _2529 = 1.0 - _2488;
        float _2539 = (0.5 / (((_2268 * ((_2502 * _2529) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2268 * _2529) + _2488) * _2502))) * _2502;
        float _4536 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2541 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
        float _2542 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2463 = (((((_2522 * _2290) + _1046) * cbLight._m0[_2473].x) * _2541) * _2542) + _2399;
        _2465 = (((((_2522 * _2292) + _1048) * cbLight._m0[_2473].y) * _2541) * _2542) + _2400;
        _2467 = (((((_2522 * _2293) + _1049) * cbLight._m0[_2473].z) * _2541) * _2542) + _2401;
    }
    float _2577;
    float _2579;
    float _2581;
    if (_2194)
    {
        _2577 = _2463;
        _2579 = _2465;
        _2581 = _2467;
    }
    else
    {
        uint _2588 = _2103 + 3u;
        uint _2592 = _2103 + 11u;
        float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2588].w)) * _900) * 0.949999988079071044921875);
        float _2607 = _2606 * _2606;
        float _2608 = cbLight._m0[_2588].x + _976;
        float _2609 = cbLight._m0[_2588].y + _977;
        float _2610 = cbLight._m0[_2588].z + _978;
        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
        float _2615 = _2614 * _2608;
        float _2616 = _2614 * _2609;
        float _2617 = _2614 * _2610;
        float _2618 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2588].xyz));
        float _4552 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2622 = dot(vec3(_897, _898, _899), vec3(_2615, _2616, _2617));
        float _4563 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2626 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_2615, _2616, _2617));
        float _4574 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2630 = _2607 * _2607;
        float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
        float _2641 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
        float _2648 = 1.0 - _2607;
        float _2658 = (0.5 / (((_2268 * ((_2621 * _2648) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2268 * _2648) + _2607) * _2621))) * _2621;
        float _4585 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2660 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
        float _2661 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
        _2577 = (((((_2641 * _2290) + _1046) * cbLight._m0[_2592].x) * _2660) * _2661) + _2463;
        _2579 = (((((_2641 * _2292) + _1048) * cbLight._m0[_2592].y) * _2660) * _2661) + _2465;
        _2581 = (((((_2641 * _2293) + _1049) * cbLight._m0[_2592].z) * _2660) * _2661) + _2467;
    }
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    if (_2101.y == 0u)
    {
        float _2736 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2737 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2736;
        float _2738 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2736;
        float _2739 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2736;
        uvec4 _2751 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2752 = _2751.x;
        uint _2763 = uint((float(_2751.y) * floor(float(uint(cbSceneParam._m0[85u].y * _985) / _2752))) + floor(float(uint(cbSceneParam._m0[85u].x * _984) / _2752)));
        float _2773 = (log2(_2739 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2774 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        uint _2777 = uint(isnan(14.0) ? _2774 : (isnan(_2774) ? 14.0 : min(_2774, 14.0)));
        uvec4 _2782 = texelFetch(g_lightClusterGridBuffer, int(((_2777 << 2u) + (_2763 << 6u)) >> 2u));
        uint _2783 = _2782.x;
        uint _2784 = _2751.z;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        if (((((1u << ((_2784 >> 4u) & 15u)) + 4294967295u) & _2783) == 0u) || ((_2784 & 240u) == 0u))
        {
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
        }
        else
        {
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            uint _3035 = 0u;
            uint _3044;
            bool _3045;
            for (;;)
            {
                _3044 = texelFetch(g_lightClassification, int((((_2777 << 5u) + (_2763 << 9u)) + (_3035 << 2u)) >> 2u)).x;
                _3045 = _3044 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3045)
                {
                    frontier_phi_61_pred = _3029;
                    frontier_phi_61_pred_1 = _3034;
                    frontier_phi_61_pred_2 = _3033;
                    frontier_phi_61_pred_3 = _3032;
                    frontier_phi_61_pred_4 = _3031;
                    frontier_phi_61_pred_5 = _3030;
                }
                else
                {
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    uint _3159;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3044;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    for (;;)
                    {
                        uint _3163 = uint(findLSB(_3159)) + (_3035 << 5u);
                        uint _3160 = (_3159 + 4294967295u) & _3159;
                        uint _3165 = _3163 * 48u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3185 = (_3163 * 48u) + 4u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3204 = (_3163 * 48u) + 8u;
                        vec3 _3215 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x));
                        float _3219 = _3179.x - _2737;
                        float _3220 = _3179.y - _2738;
                        float _3221 = _3179.z - _2739;
                        float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                        float _3225 = inversesqrt(_3222);
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3229 = dot(vec3(_1003, _1006, _1009), vec3(_3226, _3227, _3228));
                        float _3234 = 1.0 - (_3222 * _3179.w);
                        float _4611 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3236 = sqrt(_3222) * _3198.w;
                        float _3239 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3229) + _3240;
                        float _3246 = _3236 * _3236;
                        float _3250 = ((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3235) / ((_3246 * 0.699999988079071044921875) + 1.0);
                        float _3254 = (-0.0) - _2737;
                        float _3255 = (-0.0) - _2738;
                        float _3256 = (-0.0) - _2739;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3271 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                        float _3272 = 1.0 - _1078;
                        float _3279 = sqrt(1.0 - ((1.0 - (_3272 * _3272)) * (1.0 - (_3271 * _3271))));
                        float _3280 = _3279 * _3279;
                        float _3281 = _3280 * _3280;
                        float _3282 = _3261 + _3226;
                        float _3283 = _3262 + _3227;
                        float _3284 = _3263 + _3228;
                        float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                        float _3292 = dot(vec3(_1003, _1006, _1009), vec3(_3261, _3262, _3263));
                        float _4627 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3295 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3296 = dot(vec3(_1003, _1006, _1009), vec3(_3288 * _3282, _3288 * _3283, _3288 * _3284));
                        float _4638 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3299 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3303 = ((_3299 * _3299) * (_3281 + (-1.0))) + 1.0;
                        float _3304 = _3239 * _3280;
                        float _3305 = _3304 * _3304;
                        float _3308 = ((1.0 - _3305) * _3229) + _3305;
                        float _4649 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3310 = 1.0 - _3280;
                        float _3320 = (0.5 / (((_3309 * ((_3295 * _3310) + _3280)) + 9.9999999392252902907785028219223e-09) + (((_3309 * _3310) + _3280) * _3295))) * _3309;
                        float _4660 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3331 = (((_3281 * 3.1415927410125732421875) * (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) / ((_3303 * _3303) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125))) * _3235;
                        _3088 = (_3250 * _3198.x) + _3156;
                        _3089 = (_3250 * _3198.y) + _3157;
                        _3090 = (_3250 * _3198.z) + _3158;
                        _3085 = (_3331 * _3215.x) + _3153;
                        _3086 = (_3331 * _3215.y) + _3154;
                        _3087 = (_3331 * _3215.z) + _3155;
                        if (_3160 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3160;
                        }
                    }
                    frontier_phi_61_pred = _3085;
                    frontier_phi_61_pred_1 = _3090;
                    frontier_phi_61_pred_2 = _3089;
                    frontier_phi_61_pred_3 = _3088;
                    frontier_phi_61_pred_4 = _3087;
                    frontier_phi_61_pred_5 = _3086;
                }
                _2885 = frontier_phi_61_pred;
                _2895 = frontier_phi_61_pred_1;
                _2893 = frontier_phi_61_pred_2;
                _2891 = frontier_phi_61_pred_3;
                _2889 = frontier_phi_61_pred_4;
                _2887 = frontier_phi_61_pred_5;
                uint _3036 = _3035 + 1u;
                if (_3036 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3029 = _2885;
                    _3030 = _2887;
                    _3031 = _2889;
                    _3032 = _2891;
                    _3033 = _2893;
                    _3034 = _2895;
                    _3035 = _3036;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
        }
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.z;
        uint _2901 = (_2899 >> 8u) & 15u;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        if (((4294967295u << _2901) & _2783) == 0u)
        {
            _2997 = _2884;
            _2999 = _2886;
            _3001 = _2888;
            _3003 = _2890;
            _3005 = _2892;
            _3007 = _2894;
        }
        else
        {
            float _3022 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
            float _3023 = _3022 * _2737;
            float _3024 = _3022 * _2738;
            float _3025 = _3022 * _2739;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2901 < ((_2899 >> 12u) & 15u))
            {
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3136 = _2884;
                float _3137 = _2886;
                float _3138 = _2888;
                float _3139 = _2890;
                float _3140 = _2892;
                float _3141 = _2894;
                uint _3142 = _2901;
                uint _3151;
                bool _3152;
                for (;;)
                {
                    _3151 = texelFetch(g_lightClassification, int((((_2777 << 5u) + (_2763 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                    _3152 = _3151 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3152)
                    {
                        frontier_phi_67_pred = _3139;
                        frontier_phi_67_pred_1 = _3140;
                        frontier_phi_67_pred_2 = _3141;
                        frontier_phi_67_pred_3 = _3138;
                        frontier_phi_67_pred_4 = _3137;
                        frontier_phi_67_pred_5 = _3136;
                    }
                    else
                    {
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3349 = _3136;
                        float _3350 = _3137;
                        float _3351 = _3138;
                        float _3352 = _3139;
                        float _3353 = _3140;
                        float _3354 = _3141;
                        uint _3355 = _3151;
                        uint _3356;
                        vec4 _3381;
                        float _3382;
                        vec4 _3397;
                        vec3 _3409;
                        vec4 _3424;
                        vec4 _3439;
                        float _3485;
                        bool _3486;
                        for (;;)
                        {
                            uint _3366 = ((_3142 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3355));
                            _3356 = (_3355 + 4294967295u) & _3355;
                            uint _3368 = _3366 * 40u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3382 = _3381.w;
                            uint _3384 = (_3366 * 40u) + 4u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3366 * 40u) + 8u;
                            _3409 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x));
                            uint _3411 = (_3366 * 40u) + 16u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3366 * 40u) + 20u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3366 * 40u) + 24u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3460 = (_3366 * 40u) + 28u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3485 = fma(_2739, _3473.z, fma(_2738, _3473.y, _3473.x * _2737)) + _3473.w;
                            _3486 = !((fma(_2739, _3454.z, fma(_2738, _3454.y, _3454.x * _2737)) + _3454.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3486)
                            {
                                float _3513 = _3381.x - _2737;
                                float _3514 = _3381.y - _2738;
                                float _3515 = _3381.z - _2739;
                                float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                                float _3519 = inversesqrt(_3516);
                                float _3520 = _3519 * _3513;
                                float _3521 = _3519 * _3514;
                                float _3522 = _3519 * _3515;
                                float _3526 = 1.0 - (_3516 / (_3382 * _3382));
                                float _4671 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3531 = sqrt(_3516) * _3397.w;
                                float _3533 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                                float _3534 = _3533 * _3533;
                                float _3537 = ((1.0 - _3534) * dot(vec3(_3520, _3521, _3522), vec3(_1003, _1006, _1009))) + _3534;
                                float _3540 = _3531 * _3531;
                                float _3544 = (fma(_2739, _3424.z, fma(_2738, _3424.y, _3424.x * _2737)) + _3424.w) / _3485;
                                float _3545 = (fma(_2739, _3439.z, fma(_2738, _3439.y, _3439.x * _2737)) + _3439.w) / _3485;
                                float _3549 = 1.0 - dot(vec2(_3544, _3545), vec2(_3544, _3545));
                                float _4687 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3551 = _3550 * (((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3527) / ((_3540 * 0.699999988079071044921875) + 1.0));
                                float _3563 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                                float _3564 = 1.0 - _1078;
                                float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                                float _3572 = _3571 * _3571;
                                float _3573 = _3572 * _3572;
                                float _3574 = _3520 - _3023;
                                float _3575 = _3521 - _3024;
                                float _3576 = _3522 - _3025;
                                float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                                float _3584 = dot(vec3(_1003, _1006, _1009), vec3((-0.0) - _3023, (-0.0) - _3024, (-0.0) - _3025));
                                float _4698 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3588 = dot(vec3(_1003, _1006, _1009), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                                float _4709 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                                float _3596 = _3533 * _3572;
                                float _3597 = _3596 * _3596;
                                float _3603 = ((1.0 - _3597) * dot(vec3(_1003, _1006, _1009), vec3(_3520, _3521, _3522))) + _3597;
                                float _4720 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3605 = 1.0 - _3572;
                                float _3615 = (0.5 / (((_3604 * ((_3587 * _3605) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3572) * _3587))) * _3604;
                                float _4731 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3625 = (_3550 * _3527) * (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) / ((_3595 * _3595) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3625 * _3409.x;
                                frontier_phi_73_pred_1 = _3625 * _3409.y;
                                frontier_phi_73_pred_2 = _3551 * _3397.z;
                                frontier_phi_73_pred_3 = _3551 * _3397.y;
                                frontier_phi_73_pred_4 = _3551 * _3397.x;
                                frontier_phi_73_pred_5 = _3625 * _3409.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3629 = frontier_phi_73_pred;
                            _3630 = frontier_phi_73_pred_1;
                            _3634 = frontier_phi_73_pred_2;
                            _3633 = frontier_phi_73_pred_3;
                            _3632 = frontier_phi_73_pred_4;
                            _3631 = frontier_phi_73_pred_5;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            if (_3356 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3356;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3339;
                        frontier_phi_67_pred_1 = _3340;
                        frontier_phi_67_pred_2 = _3341;
                        frontier_phi_67_pred_3 = _3338;
                        frontier_phi_67_pred_4 = _3337;
                        frontier_phi_67_pred_5 = _3336;
                    }
                    _3004 = frontier_phi_67_pred;
                    _3006 = frontier_phi_67_pred_1;
                    _3008 = frontier_phi_67_pred_2;
                    _3002 = frontier_phi_67_pred_3;
                    _3000 = frontier_phi_67_pred_4;
                    _2998 = frontier_phi_67_pred_5;
                    uint _3143 = _3142 + 1u;
                    if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3136 = _2998;
                        _3137 = _3000;
                        _3138 = _3002;
                        _3139 = _3004;
                        _3140 = _3006;
                        _3141 = _3008;
                        _3142 = _3143;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3006;
                frontier_phi_55_56_ladder_1 = _3008;
                frontier_phi_55_56_ladder_2 = _3004;
                frontier_phi_55_56_ladder_3 = _3002;
                frontier_phi_55_56_ladder_4 = _3000;
                frontier_phi_55_56_ladder_5 = _2998;
            }
            else
            {
                frontier_phi_55_56_ladder = _2892;
                frontier_phi_55_56_ladder_1 = _2894;
                frontier_phi_55_56_ladder_2 = _2890;
                frontier_phi_55_56_ladder_3 = _2888;
                frontier_phi_55_56_ladder_4 = _2886;
                frontier_phi_55_56_ladder_5 = _2884;
            }
            _2997 = frontier_phi_55_56_ladder_5;
            _2999 = frontier_phi_55_56_ladder_4;
            _3001 = frontier_phi_55_56_ladder_3;
            _3003 = frontier_phi_55_56_ladder_2;
            _3005 = frontier_phi_55_56_ladder;
            _3007 = frontier_phi_55_56_ladder_1;
        }
        float _3012 = isnan(1.0) ? _1062 : (isnan(_1062) ? 1.0 : min(_1062, 1.0));
        _2796 = (_3012 * _3003) + _2232;
        _2798 = (_3012 * _3005) + _2234;
        _2800 = (_3012 * _3007) + _2236;
        _2802 = ((_2997 * _1046) * _3012) + _2577;
        _2804 = ((_2999 * _1048) * _3012) + _2579;
        _2806 = ((_3001 * _1049) * _3012) + _2581;
    }
    else
    {
        _2796 = _2232;
        _2798 = _2234;
        _2800 = _2236;
        _2802 = _2577;
        _2804 = _2579;
        _2806 = _2581;
    }
    float _4747 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4758 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4769 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    uint _2826 = _283 + 6u;
    float _2834 = _984 / cbSceneParam._m0[86u].x;
    float _2835 = _985 / cbSceneParam._m0[86u].y;
    vec4 _2849 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, (log2((isnan(cbSceneParam._m0[77u].w) ? _919 : (isnan(_919) ? cbSceneParam._m0[77u].w : min(_919, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2851 = _2849.x;
    float _2852 = _2849.y;
    float _2853 = _2849.z;
    float _2854 = _2849.w;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_919 > cbSceneParam._m0[78u].w)
    {
        float _2909 = isnan(_919) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _919 : min(cbSceneParam._m0[80u].w, _919));
        float _2910 = _2909 / _919;
        float _2921 = _2910 * _969;
        float _2922 = _970 * _2910;
        float _2923 = (-0.0) - _2922;
        float _2925 = _2910 * _971;
        float _2927 = (cbSceneParam._m0[77u].w * _2923) / _2909;
        float _2928 = _2927 + cbSceneParam._m0[79u].w;
        float _2929 = cbSceneParam._m0[79u].w - _2922;
        float _2935 = sqrt(((_2921 * _2921) + (_2922 * _2922)) + (_2925 * _2925));
        float _2938 = (1.0 - (cbSceneParam._m0[77u].w / _2909)) * _2935;
        float _2943 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2945 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3098;
        if (abs((_2923 - _2927) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3098 = ((((_2928 > 0.0) ? exp2(_2943 * _2928) : (2.0 - exp2(_2945 * _2928))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2938;
        }
        else
        {
            float _3058 = 1.0 / cbSceneParam._m0[80u].x;
            float _3059 = isnan(_2929) ? _2928 : (isnan(_2928) ? _2929 : max(_2928, _2929));
            float _3060 = isnan(_2929) ? _2928 : (isnan(_2928) ? _2929 : min(_2928, _2929));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            float _3070 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : min(_3060, 0.0));
            _3098 = ((abs(_2935 / _2923) * cbSceneParam._m0[80u].y) * ((((_3069 - _3070) * 2.0) - ((exp2(_2943 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0)))) - exp2(_2943 * (isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))))) * _3058)) - ((exp2(_2945 * _3069) - exp2(_2945 * _3070)) * _3058))) + (_2938 * cbSceneParam._m0[80u].z);
        }
        vec4 _3100 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, 1.0), 0.0);
        float _3109 = exp2((_3098 * (-1.44269502162933349609375)) * (1.0 - _3100.w));
        float _3110 = log2(_3109);
        float _3126 = log2(_2854);
        _2947 = (exp2(_3126 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].x)) * _3100.x) / cbSceneParam._m0[78u].x)) + _2851;
        _2949 = (exp2(_3126 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].y)) * _3100.y) / cbSceneParam._m0[78u].y)) + _2852;
        _2951 = (exp2(_3126 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].z)) * _3100.z) / cbSceneParam._m0[78u].z)) + _2853;
        _2953 = _3109 * _2854;
    }
    else
    {
        _2947 = _2851;
        _2949 = _2852;
        _2951 = _2853;
        _2953 = _2854;
    }
    float _2965 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2966 = _2965 == 3.0;
    float _2967 = log2(_2953);
    float _2974 = exp2(_2967 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2796 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1062))) + ((_2802 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _2975 = exp2(_2967 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2798 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1062))) + ((_2804 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _2976 = exp2(_2967 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2800 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1062))) + ((_2806 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1870)) * cbPerFrame._m0[3u].x));
    float _2985 = (_2965 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2985 * (_2966 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2947)));
    SV_Target.y = _2985 * (_2966 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2949)));
    SV_Target.z = _2985 * (_2966 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2951)));
    SV_Target.w = cbInstanceData._m0[_2826].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2826].w;
}


