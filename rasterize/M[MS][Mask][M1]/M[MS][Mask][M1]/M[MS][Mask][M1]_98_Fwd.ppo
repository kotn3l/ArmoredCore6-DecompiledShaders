#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1573;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3896 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3907 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3918 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[23u].w) + _437) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3929 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _462 = (_455 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _463 = (_455 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _464 = (_455 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[23u].w) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3940 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    float _541 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _535;
    float _544 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _536;
    float _547 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _537;
    float _554 = ((_535 - _541) * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) + _541;
    float _555 = ((_536 - _544) * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) + _544;
    float _556 = ((_537 - _547) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) + _547;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _638 = _636.x;
    float _639 = _636.y;
    float _640 = _636.z;
    float _647 = ((_619.x - _638) * _455) + _638;
    float _648 = ((_619.y - _639) * _455) + _639;
    float _649 = ((_619.z - _640) * _455) + _640;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _674 = ((_661.z - _649) * _528) + _649;
    float _677 = ((((_661.x - _647) * _528) + _647) * 2.0) + (-1.0);
    float _678 = ((((_661.y - _648) * _528) + _648) * 2.0) + (-1.0);
    float _679 = dot(vec2(_677, _678), vec2(_677, _678));
    float _3951 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _684 = sqrt(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _714 = (_677 + ((((_594.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_702.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _715 = (_678 + ((((_594.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_702.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _718 = fma(_684, _258, fma(_715, _265, _714 * _251));
    float _721 = fma(_684, _259, fma(_715, _266, _714 * _252));
    float _724 = fma(_684, _260, fma(_715, _267, _714 * _253));
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _757 = _755.x;
    float _758 = 1.0 - _757;
    float _767 = (cbMtdParam._m0[19u].x + dot(vec4(_728 * _718, _728 * _721, _728 * _724, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_757 - _758) * cbMtdParam._m0[24u].z) + _758) * cbMtdParam._m0[21u].z);
    float _3962 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _768 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _770 = (-0.0) - cbMtdParam._m0[24u].x;
    float _772 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _772 : (isnan(_772) ? 1.0 : min(_772, 1.0));
    float _780 = _768 - ((_768 * TEXCOORD_8.x) * _773);
    float _781 = _768 - ((_768 * TEXCOORD_8.y) * _773);
    float _782 = _768 - ((_768 * TEXCOORD_8.z) * _773);
    float _789 = (_780 * ((_575.x * cbMtdParam._m0[18u].x) - _554)) + _554;
    float _790 = (_781 * ((_575.y * cbMtdParam._m0[18u].y) - _555)) + _555;
    float _791 = (_782 * ((_575.z * cbMtdParam._m0[18u].z) - _556)) + _556;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _805 = _803.x;
    float _806 = 1.0 - _805;
    float _832 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_805 - _806) * cbMtdParam._m0[24u].w) + _806) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3983 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _833 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _841 = ((((cbMtdParam._m0[10u].x - _789) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _833) + _789;
    float _842 = ((((cbMtdParam._m0[10u].y - _790) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _833) + _790;
    float _843 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _791)) * _833) + _791;
    vec4 _869 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _871 = _869.x;
    float _889 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _871) * _455) + _871;
    float _906 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _308) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _309) + cbTextureTilingScale._m0[21u].w)).x - _889) * _528) + _889;
    float _910 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _906) * cbMtdParam._m0[19u].z) + _906;
    float _912 = _910 - (_910 * _780);
    float _914 = _912 - (_912 * _833);
    float _919 = (((_594.z - _674) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _674;
    float _923 = ((_702.z - _919) * cbMtdParam._m0[19u].w) + _919;
    vec4 _937 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _944 = (_937.x * 2.0) + (-1.0);
    float _945 = (_937.y * 2.0) + (-1.0);
    float _946 = dot(vec2(_944, _945), vec2(_944, _945));
    float _3994 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _954 = ((_937.z - _923) * _780) + _923;
    float _957 = ((cbMtdParam._m0[23u].x - _954) * _833) + _954;
    vec4 _978 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _984 = (_978.x * 2.0) + (-1.0);
    float _985 = (_978.y * 2.0) + (-1.0);
    float _986 = dot(vec2(_984, _985), vec2(_984, _985));
    float _4005 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _1001 = ((sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) - _684) * _782) + _684;
    float _1004 = (((_944 - _714) * _780) + _714) + (cbMtdParam._m0[21u].x * _714);
    float _1005 = (((_945 - _715) * _781) + _715) + (cbMtdParam._m0[21u].x * _715);
    float _1016 = (((_984 - _1004) + (_1004 * cbMtdParam._m0[22u].z)) * _833) + _1004;
    float _1017 = (((_985 - _1005) + (_1005 * cbMtdParam._m0[22u].z)) * _833) + _1005;
    float _1018 = (_833 * (sqrt(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) - _1001)) + _1001;
    float _1020 = cbMtdParam._m0[22u].x + _702.w;
    float _1023 = fma(_1018, _258, fma(_1017, _265, _1016 * _251));
    float _1026 = fma(_1018, _259, fma(_1017, _266, _1016 * _252));
    float _1029 = fma(_1018, _260, fma(_1017, _267, _1016 * _253));
    float _1033 = inversesqrt(dot(vec3(_1023, _1026, _1029), vec3(_1023, _1026, _1029)));
    float _1034 = _1033 * _1023;
    float _1035 = _1033 * _1026;
    float _1036 = _1033 * _1029;
    float _4016 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _1037 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _4038 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4049 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4060 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4071 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _1042 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1056 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1106 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1096);
    float _1107 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1096);
    float _1108 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1096);
    float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
    float _1113 = _1106 * _1112;
    float _1114 = _1107 * _1112;
    float _1115 = _1108 * _1112;
    float _1121 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1122 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1140 = fma(_1036, cbSceneParam._m0[5u].z, fma(_1035, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1034));
    float _1143 = fma(_1036, cbSceneParam._m0[6u].z, fma(_1035, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1034));
    float _1146 = fma(_1036, cbSceneParam._m0[7u].z, fma(_1035, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1034));
    uint _1160 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1166 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_1160].x;
    float _1167 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_1160].y;
    float _1168 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_1160].z;
    float _4082 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1169 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1170 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1171 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _1172 = 1.0 - _1042;
    float _1173 = _1169 * _1172;
    float _1174 = _1170 * _1172;
    float _1175 = _1171 * _1172;
    float _1180 = (_1169 + (-0.039999999105930328369140625)) * _1042;
    float _1181 = (_1170 + (-0.039999999105930328369140625)) * _1042;
    float _1182 = (_1171 + (-0.039999999105930328369140625)) * _1042;
    float _1183 = _1180 + 0.039999999105930328369140625;
    float _1185 = _1181 + 0.039999999105930328369140625;
    float _1186 = _1182 + 0.039999999105930328369140625;
    vec4 _1195 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1121, cbSceneParam._m0[86u].y * _1122));
    float _1199 = ((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * TEXCOORD_5.w) * _1195.x;
    float _1200 = dot(vec3(_1034, _1035, _1036), vec3(_1113, _1114, _1115));
    float _1203 = _1200 * 2.0;
    float _1207 = (_1203 * _1034) - _1113;
    float _1208 = (_1203 * _1035) - _1114;
    float _1209 = (_1203 * _1036) - _1115;
    float _1213 = abs(dot(vec3(_1113, _1114, _1115), vec3(_1034, _1035, _1036)));
    float _4115 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1215 = sqrt(_1037);
    float _1228 = exp2((_1215 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1215 * 3.0));
    float _1234 = (1.0 - _1228) * ((_1215 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1235 = _1228 * _1215;
    float _1263 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1267 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1572;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1297 = fma(_1271, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1263));
        float _1301 = fma(_1271, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1263));
        float _1305 = fma(_1271, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1263));
        float _1330 = _1263 + _1034;
        float _1331 = _1267 + _1035;
        float _1332 = _1271 + _1036;
        float _1342 = fma(_1332, cbModelParam._m0[26u].z, fma(_1331, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1330)) - _1297;
        float _1343 = fma(_1332, cbModelParam._m0[27u].z, fma(_1331, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1330)) - _1301;
        float _1344 = fma(_1332, cbModelParam._m0[28u].z, fma(_1331, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1330)) - _1305;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1297 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1301 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[34u].z) + ((((((_1305 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1400 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1366.x + (-0.5));
        float _1402 = _1400 * (_1366.y + (-0.5));
        float _1403 = _1400 * (_1366.z + (-0.5));
        float _1410 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1373.x + (-0.5));
        float _1412 = _1410 * (_1373.y + (-0.5));
        float _1413 = _1410 * (_1373.z + (-0.5));
        float _1420 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1380.x + (-0.5));
        float _1422 = _1420 * (_1380.y + (-0.5));
        float _1423 = _1420 * (_1380.z + (-0.5));
        float _1430 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1387.x + (-0.5));
        float _1432 = _1430 * (_1387.y + (-0.5));
        float _1433 = _1430 * (_1387.z + (-0.5));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = _1401 * 0.5;
        float _1438 = _1411 * 0.5;
        float _1439 = _1421 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1454 = (dot(vec3(_1034, _1035, _1036), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1464 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4163 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1466 + 1.0))) + _1471) * _1434;
        float _1481 = _1402 * 0.5;
        float _1482 = _1412 * 0.5;
        float _1483 = _1422 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_1034, _1035, _1036), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4196 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1508 + 1.0))) + _1513) * _1435;
        float _1523 = _1403 * 0.5;
        float _1524 = _1413 * 0.5;
        float _1525 = _1423 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_1034, _1035, _1036), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4229 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1550 + 1.0))) + _1555) * _1436;
        _1572 = _1403;
        _1574 = _1402;
        _1575 = _1401;
        _1576 = _1413;
        _1577 = _1412;
        _1578 = _1411;
        _1579 = _1423;
        _1580 = _1422;
        _1581 = _1421;
        _1582 = _1436;
        _1583 = _1435;
        _1584 = _1434;
        _1585 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1586 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1587 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
    }
    else
    {
        _1572 = _1573;
        _1574 = _1573;
        _1575 = _1573;
        _1576 = _1573;
        _1577 = _1573;
        _1578 = _1573;
        _1579 = _1573;
        _1580 = _1573;
        _1581 = _1573;
        _1582 = _1573;
        _1583 = _1573;
        _1584 = _1573;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1611 = fma(_1271, cbModelParam._m0[30u].z, fma(_1267, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1263));
        float _1615 = fma(_1271, cbModelParam._m0[31u].z, fma(_1267, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1263));
        float _1619 = fma(_1271, cbModelParam._m0[32u].z, fma(_1267, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1263));
        float _1642 = _1263 + _1034;
        float _1643 = _1267 + _1035;
        float _1644 = _1271 + _1036;
        float _1654 = fma(_1644, cbModelParam._m0[30u].z, fma(_1643, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1642)) - _1611;
        float _1655 = fma(_1644, cbModelParam._m0[31u].z, fma(_1643, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1642)) - _1615;
        float _1656 = fma(_1644, cbModelParam._m0[32u].z, fma(_1643, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1642)) - _1619;
        float _1660 = inversesqrt(dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656)));
        float _1673 = ((_1660 * _1654) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1611 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1674 = ((_1660 * _1655) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1615 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1675 = ((_1660 * _1656) / cbModelParam._m0[35u].z) + ((((((_1619 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1673, _1674, _1675), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1673, _1674, _1675), 0.0);
        vec4 _1691 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1673, _1674, _1675), 0.0);
        vec4 _1698 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1673, _1674, _1675), 0.0);
        float _1710 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1711 = _1710 * (_1677.x + (-0.5));
        float _1712 = _1710 * (_1677.y + (-0.5));
        float _1713 = _1710 * (_1677.z + (-0.5));
        float _1720 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1721 = _1720 * (_1684.x + (-0.5));
        float _1722 = _1720 * (_1684.y + (-0.5));
        float _1723 = _1720 * (_1684.z + (-0.5));
        float _1730 = exp2((_1691.w + (-0.5)) * 20.0) * 2.0;
        float _1731 = _1730 * (_1691.x + (-0.5));
        float _1732 = _1730 * (_1691.y + (-0.5));
        float _1733 = _1730 * (_1691.z + (-0.5));
        float _1740 = exp2((_1698.w + (-0.5)) * 20.0) * 2.0;
        float _1741 = _1740 * (_1698.x + (-0.5));
        float _1742 = _1740 * (_1698.y + (-0.5));
        float _1743 = _1740 * (_1698.z + (-0.5));
        float _1744 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1745 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1746 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1747 = _1711 * 0.5;
        float _1748 = _1721 * 0.5;
        float _1749 = _1731 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_1034, _1035, _1036), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1744 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4292 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1774 + 1.0))) + _1779) * _1744;
        float _1789 = _1712 * 0.5;
        float _1790 = _1722 * 0.5;
        float _1791 = _1732 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1805 = (dot(vec3(_1034, _1035, _1036), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1745 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1816 = _1815 * 2.0;
        float _1820 = (1.0 - _1815) / (_1815 + 1.0);
        float _4325 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1830 = ((((1.0 - _1821) * (_1816 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1816 + 1.0))) + _1821) * _1745;
        float _1831 = _1713 * 0.5;
        float _1832 = _1723 * 0.5;
        float _1833 = _1733 * 0.5;
        float _1834 = dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833));
        float _1839 = (_1834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1834);
        float _1847 = (dot(vec3(_1034, _1035, _1036), vec3(_1839 * _1831, _1839 * _1832, _1839 * _1833)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1856 = sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833)) / (_1746 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1858 = _1857 * 2.0;
        float _1862 = (1.0 - _1857) / (_1857 + 1.0);
        float _4358 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1872 = ((((1.0 - _1863) * (_1858 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1858 + 1.0))) + _1863) * _1746;
        _1880 = _1713;
        _1881 = _1712;
        _1882 = _1711;
        _1883 = _1723;
        _1884 = _1722;
        _1885 = _1721;
        _1886 = _1733;
        _1887 = _1732;
        _1888 = _1731;
        _1889 = _1746;
        _1890 = _1745;
        _1891 = _1744;
        _1892 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
        _1893 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)));
        _1894 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)));
    }
    else
    {
        _1880 = _1573;
        _1881 = _1573;
        _1882 = _1573;
        _1883 = _1573;
        _1884 = _1573;
        _1885 = _1573;
        _1886 = _1573;
        _1887 = _1573;
        _1888 = _1573;
        _1889 = _1573;
        _1890 = _1573;
        _1891 = _1573;
        _1892 = 0.0;
        _1893 = 0.0;
        _1894 = 0.0;
    }
    float _1904 = (cbModelParam._m0[1u].x * (_1892 - _1585)) + _1585;
    float _1905 = (cbModelParam._m0[1u].x * (_1893 - _1586)) + _1586;
    float _1906 = (cbModelParam._m0[1u].x * (_1894 - _1587)) + _1587;
    float _1927 = fma(_1906, cbSceneParam._m0[89u].z, fma(_1905, cbSceneParam._m0[89u].y, _1904 * cbSceneParam._m0[89u].x));
    float _1930 = fma(_1906, cbSceneParam._m0[90u].z, fma(_1905, cbSceneParam._m0[90u].y, _1904 * cbSceneParam._m0[90u].x));
    float _1933 = fma(_1906, cbSceneParam._m0[91u].z, fma(_1905, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1904));
    float _1948 = _1207 * 0.5;
    float _1949 = _1208 * 0.5;
    float _1950 = _1209 * 0.5;
    float _1951 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1882, _1885, _1888, _1891));
    float _1954 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1881, _1884, _1887, _1890));
    float _1957 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1880, _1883, _1886, _1889));
    float _1991;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1964 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1572, _1576, _1579, _1582));
        float _1968 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1574, _1577, _1580, _1583));
        float _1972 = dot(vec4(_1948, _1949, _1950, 1.0), vec4(_1575, _1578, _1581, _1584));
        float _1979 = dot(vec4(cbModelParam._m0[39u]), vec4(_1948, _1949, _1950, 1.0));
        _1991 = dot(vec3(isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0)), isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0)), isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1979) ? 0.0 : (isnan(0.0) ? _1979 : max(0.0, _1979))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1991 = 1.0;
    }
    float _2002;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1993 = dot(vec4(cbModelParam._m0[40u]), vec4(_1948, _1949, _1950, 1.0));
        _2002 = dot(vec3(isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)), isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1993) ? 0.0 : (isnan(0.0) ? _1993 : max(0.0, _1993))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2002 = 1.0;
    }
    float _2006 = (_2002 * cbModelParam._m0[1u].x) + (_1991 * (1.0 - cbModelParam._m0[1u].x));
    float _2016 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1037);
    float _2017 = isnan(_2016) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2016 : min(cbModelParam._m0[25u].z, _2016));
    float _2097;
    float _2099;
    float _2101;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2064 = fma(_1271, cbModelParam._m0[13u].z, fma(_1267, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1263)) + cbModelParam._m0[13u].w;
        float _2068 = fma(_1271, cbModelParam._m0[14u].z, fma(_1267, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1263)) + cbModelParam._m0[14u].w;
        float _2072 = fma(_1271, cbModelParam._m0[15u].z, fma(_1267, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1263)) + cbModelParam._m0[15u].w;
        float _2075 = fma(_1209, cbModelParam._m0[13u].z, fma(_1208, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1207));
        float _2078 = fma(_1209, cbModelParam._m0[14u].z, fma(_1208, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1207));
        float _2081 = fma(_1209, cbModelParam._m0[15u].z, fma(_1208, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1207));
        float _2109;
        if (_2075 > 0.0)
        {
            _2109 = abs((1.0 - _2064) / _2075);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2064 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2109 = frontier_phi_14_12_ladder;
        }
        float _2311;
        if (_2078 > 0.0)
        {
            _2311 = abs((1.0 - _2068) / _2078);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2068 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2311 = frontier_phi_23_19_ladder;
        }
        float _2565;
        if (_2081 > 0.0)
        {
            _2565 = abs((1.0 - _2072) / _2081);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2072 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2565 = frontier_phi_35_30_ladder;
        }
        float _2567 = isnan(_2311) ? _2109 : (isnan(_2109) ? _2311 : min(_2109, _2311));
        float _2568 = isnan(_2565) ? _2567 : (isnan(_2567) ? _2565 : min(_2567, _2565));
        float _2572 = (_2568 * _2075) + _2064;
        float _2573 = (_2568 * _2078) + _2068;
        float _2574 = (_2568 * _2081) + _2072;
        float _2575 = _2568 * 9.9999997473787516355514526367188e-05;
        float _2577 = (-1.0) - _2575;
        float _2579 = _2575 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2574 > _2579) || ((_2574 < _2577) || ((_2573 > _2579) || ((_2573 < _2577) || ((_2572 < _2577) || (_2572 > _2579))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2702 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2574, cbModelParam._m0[9u].z, fma(_2573, cbModelParam._m0[9u].y, _2572 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2574, cbModelParam._m0[10u].z, fma(_2573, cbModelParam._m0[10u].y, _2572 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2574, cbModelParam._m0[11u].z, fma(_2573, cbModelParam._m0[11u].y, _2572 * cbModelParam._m0[11u].x))), _2017);
            frontier_phi_13_35_ladder = _2702.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2702.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2702.x * cbModelParam._m0[1u].y;
        }
        _2097 = frontier_phi_13_35_ladder_2;
        _2099 = frontier_phi_13_35_ladder_1;
        _2101 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2085 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1207, _1208, _1209), _2017);
        _2097 = _2085.x * cbModelParam._m0[1u].y;
        _2099 = _2085.y * cbModelParam._m0[1u].y;
        _2101 = _2085.z * cbModelParam._m0[1u].y;
    }
    float _2105 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1037);
    float _2106 = isnan(_2105) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2105 : min(cbModelParam._m0[25u].w, _2105));
    float _2195;
    float _2197;
    float _2199;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2159 = fma(_1271, cbModelParam._m0[21u].z, fma(_1267, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1263)) + cbModelParam._m0[21u].w;
        float _2163 = fma(_1271, cbModelParam._m0[22u].z, fma(_1267, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1263)) + cbModelParam._m0[22u].w;
        float _2167 = fma(_1271, cbModelParam._m0[23u].z, fma(_1267, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1263)) + cbModelParam._m0[23u].w;
        float _2170 = fma(_1209, cbModelParam._m0[21u].z, fma(_1208, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1207));
        float _2173 = fma(_1209, cbModelParam._m0[22u].z, fma(_1208, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1207));
        float _2176 = fma(_1209, cbModelParam._m0[23u].z, fma(_1208, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1207));
        float _2316;
        if (_2170 > 0.0)
        {
            _2316 = abs((1.0 - _2159) / _2170);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2170 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2159 + 1.0) / _2170);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2316 = frontier_phi_25_21_ladder;
        }
        float _2592;
        if (_2173 > 0.0)
        {
            _2592 = abs((1.0 - _2163) / _2173);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2173 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2163 + 1.0) / _2173);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2592 = frontier_phi_37_32_ladder;
        }
        float _2805;
        if (_2176 > 0.0)
        {
            _2805 = abs((1.0 - _2167) / _2176);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2176 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2167 + 1.0) / _2176);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2805 = frontier_phi_46_43_ladder;
        }
        float _2807 = isnan(_2592) ? _2316 : (isnan(_2316) ? _2592 : min(_2316, _2592));
        float _2808 = isnan(_2805) ? _2807 : (isnan(_2807) ? _2805 : min(_2807, _2805));
        float _2812 = (_2808 * _2170) + _2159;
        float _2813 = (_2808 * _2173) + _2163;
        float _2814 = (_2808 * _2176) + _2167;
        float _2815 = _2808 * 9.9999997473787516355514526367188e-05;
        float _2816 = (-1.0) - _2815;
        float _2818 = _2815 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2814 > _2818) || ((_2814 < _2816) || ((_2813 > _2818) || ((_2813 < _2816) || ((_2812 < _2816) || (_2812 > _2818))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2814, cbModelParam._m0[17u].z, fma(_2813, cbModelParam._m0[17u].y, _2812 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2814, cbModelParam._m0[18u].z, fma(_2813, cbModelParam._m0[18u].y, _2812 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2814, cbModelParam._m0[19u].z, fma(_2813, cbModelParam._m0[19u].y, _2812 * cbModelParam._m0[19u].x))), _2106);
            frontier_phi_22_46_ladder = _3013.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3013.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3013.x * cbModelParam._m0[1u].z;
        }
        _2195 = frontier_phi_22_46_ladder_2;
        _2197 = frontier_phi_22_46_ladder_1;
        _2199 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2179 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1207, _1208, _1209), _2106);
        _2195 = _2179.x * cbModelParam._m0[1u].z;
        _2197 = _2179.y * cbModelParam._m0[1u].z;
        _2199 = _2179.z * cbModelParam._m0[1u].z;
    }
    float _2212 = (((_1234 * _1183) + _1235) * _1199) * ((cbModelParam._m0[1u].w * (_2195 - _2097)) + _2097);
    float _2214 = (((_1234 * _1185) + _1235) * _1199) * ((cbModelParam._m0[1u].w * (_2197 - _2099)) + _2099);
    float _2216 = (((_1234 * _1186) + _1235) * _1199) * ((cbModelParam._m0[1u].w * (_2199 - _2101)) + _2101);
    float _2219 = fma(_2216, cbSceneParam._m0[89u].z, fma(_2214, cbSceneParam._m0[89u].y, _2212 * cbSceneParam._m0[89u].x));
    float _2222 = fma(_2216, cbSceneParam._m0[90u].z, fma(_2214, cbSceneParam._m0[90u].y, _2212 * cbSceneParam._m0[90u].x));
    float _2225 = fma(_2216, cbSceneParam._m0[91u].z, fma(_2214, cbSceneParam._m0[91u].y, _2212 * cbSceneParam._m0[91u].x));
    uvec4 _2235 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2237 = _2235.x * 14u;
    uint _2238 = _2237 + 13u;
    float _2245 = _1199 + (-1.0);
    float _2250 = (cbLight._m0[_2238].x * _2245) + 1.0;
    float _2251 = (cbLight._m0[_2238].y * _2245) + 1.0;
    float _2252 = (cbLight._m0[_2238].z * _2245) + 1.0;
    float _2253 = (cbLight._m0[_2238].w * _2245) + 1.0;
    uint _2254 = _2237 + 5u;
    float _2260 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2264 = _2237 + 4u;
    float _2270 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
    uint _2274 = _2237 | 1u;
    float _2285 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_1034, _1035, _1036));
    float _2288 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_1034, _1035, _1036));
    float _4494 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _4505 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2293 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * 0.3183098733425140380859375;
    float _2295 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * 0.3183098733425140380859375;
    float _2302 = ((cbLight._m0[_2254].x * _2260) * _2295) + ((cbLight._m0[_2264].x * _2270) * _2293);
    float _2303 = ((_2260 * cbLight._m0[_2254].y) * _2295) + ((_2270 * cbLight._m0[_2264].y) * _2293);
    float _2304 = ((_2260 * cbLight._m0[_2254].z) * _2295) + ((_2270 * cbLight._m0[_2264].z) * _2293);
    uvec4 _2308 = floatBitsToUint(cbLight._m0[_2237 + 12u]);
    bool _2310 = _2308.x == 0u;
    float _2321;
    float _2323;
    float _2325;
    if (_2310)
    {
        _2321 = _2302;
        _2323 = _2303;
        _2325 = _2304;
    }
    else
    {
        uint _2329 = _2237 + 6u;
        float _2345 = (dot(vec3(cbLight._m0[_2237 + 2u].xyz), vec3(_1034, _1035, _1036)) * 0.5) + 0.5;
        float _2346 = _2345 * _2345;
        float _4516 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2347 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2348 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2321 = (((cbLight._m0[_2329].x * 0.3183098733425140380859375) * _2347) * _2348) + _2302;
        _2323 = (((cbLight._m0[_2329].y * 0.3183098733425140380859375) * _2347) * _2348) + _2303;
        _2325 = (((cbLight._m0[_2329].z * 0.3183098733425140380859375) * _2347) * _2348) + _2304;
    }
    bool _2328 = _2308.y == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2328)
    {
        _2366 = _2321;
        _2368 = _2323;
        _2370 = _2325;
    }
    else
    {
        uint _2536 = _2237 + 7u;
        float _2552 = (dot(vec3(cbLight._m0[_2237 + 3u].xyz), vec3(_1034, _1035, _1036)) * 0.5) + 0.5;
        float _2553 = _2552 * _2552;
        float _4532 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2554 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2555 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2366 = (((cbLight._m0[_2536].x * 0.3183098733425140380859375) * _2554) * _2555) + _2321;
        _2368 = (((cbLight._m0[_2536].y * 0.3183098733425140380859375) * _2554) * _2555) + _2323;
        _2370 = (((cbLight._m0[_2536].z * 0.3183098733425140380859375) * _2554) * _2555) + _2325;
    }
    uint _2373 = _2237 + 8u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _1037) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2237].x + _1113;
    float _2389 = cbLight._m0[_2237].y + _1114;
    float _2390 = cbLight._m0[_2237].z + _1115;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_2237].xyz));
    float _4548 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _4559 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _2402 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2403 = dot(vec3(_1034, _1035, _1036), vec3(_2395, _2396, _2397));
    float _4570 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2395, _2396, _2397));
    float _4581 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2387 * _2387;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2423 = exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0);
    float _2424 = 0.959999978542327880859375 - _1180;
    float _2426 = 0.959999978542327880859375 - _1181;
    float _2427 = 0.959999978542327880859375 - _1182;
    float _2434 = 1.0 - _2387;
    float _2445 = (0.5 / (((_2402 * ((_2401 * _2434) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2434) + _2387) * _2401))) * _2401;
    float _4592 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    uint _2458 = _2237 + 9u;
    float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _1037) * 0.949999988079071044921875);
    float _2470 = _2469 * _2469;
    float _2471 = cbLight._m0[_2274].x + _1113;
    float _2472 = cbLight._m0[_2274].y + _1114;
    float _2473 = cbLight._m0[_2274].z + _1115;
    float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
    float _2478 = _2477 * _2471;
    float _2479 = _2477 * _2472;
    float _2480 = _2477 * _2473;
    float _2481 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_2274].xyz));
    float _4603 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2485 = dot(vec3(_1034, _1035, _1036), vec3(_2478, _2479, _2480));
    float _4614 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2489 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2478, _2479, _2480));
    float _4625 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2493 = _2470 * _2470;
    float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
    float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
    float _2511 = 1.0 - _2470;
    float _2521 = (0.5 / (((_2402 * ((_2484 * _2511) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2511) + _2470) * _2484))) * _2484;
    float _4636 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2523 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
    float _2533 = (((((_2504 * _2424) + _1183) * cbLight._m0[_2458].x) * _2523) * _2260) + (((((_2423 * _2424) + _1183) * cbLight._m0[_2373].x) * _2447) * _2270);
    float _2534 = (((((_2504 * _2426) + _1185) * cbLight._m0[_2458].y) * _2523) * _2260) + (((((_2423 * _2426) + _1185) * cbLight._m0[_2373].y) * _2447) * _2270);
    float _2535 = (((((_2504 * _2427) + _1186) * cbLight._m0[_2458].z) * _2523) * _2260) + (((((_2423 * _2427) + _1186) * cbLight._m0[_2373].z) * _2447) * _2270);
    float _2597;
    float _2599;
    float _2601;
    if (_2310)
    {
        _2597 = _2533;
        _2599 = _2534;
        _2601 = _2535;
    }
    else
    {
        uint _2603 = _2237 + 2u;
        uint _2607 = _2237 + 10u;
        float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2603].w)) * _1037) * 0.949999988079071044921875);
        float _2622 = _2621 * _2621;
        float _2623 = cbLight._m0[_2603].x + _1113;
        float _2624 = cbLight._m0[_2603].y + _1114;
        float _2625 = cbLight._m0[_2603].z + _1115;
        float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
        float _2630 = _2629 * _2623;
        float _2631 = _2629 * _2624;
        float _2632 = _2629 * _2625;
        float _2633 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_2603].xyz));
        float _4647 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2637 = dot(vec3(_1034, _1035, _1036), vec3(_2630, _2631, _2632));
        float _4658 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2641 = dot(vec3(cbLight._m0[_2603].xyz), vec3(_2630, _2631, _2632));
        float _4669 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2645 = _2622 * _2622;
        float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
        float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
        float _2663 = 1.0 - _2622;
        float _2673 = (0.5 / (((_2402 * ((_2636 * _2663) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2663) + _2622) * _2636))) * _2636;
        float _4680 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2675 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
        float _2676 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2597 = (((((_2656 * _2424) + _1183) * cbLight._m0[_2607].x) * _2675) * _2676) + _2533;
        _2599 = (((((_2656 * _2426) + _1185) * cbLight._m0[_2607].y) * _2675) * _2676) + _2534;
        _2601 = (((((_2656 * _2427) + _1186) * cbLight._m0[_2607].z) * _2675) * _2676) + _2535;
    }
    float _2711;
    float _2713;
    float _2715;
    if (_2328)
    {
        _2711 = _2597;
        _2713 = _2599;
        _2715 = _2601;
    }
    else
    {
        uint _2722 = _2237 + 3u;
        uint _2726 = _2237 + 11u;
        float _2740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2722].w)) * _1037) * 0.949999988079071044921875);
        float _2741 = _2740 * _2740;
        float _2742 = cbLight._m0[_2722].x + _1113;
        float _2743 = cbLight._m0[_2722].y + _1114;
        float _2744 = cbLight._m0[_2722].z + _1115;
        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
        float _2749 = _2748 * _2742;
        float _2750 = _2748 * _2743;
        float _2751 = _2748 * _2744;
        float _2752 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_2722].xyz));
        float _4696 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2756 = dot(vec3(_1034, _1035, _1036), vec3(_2749, _2750, _2751));
        float _4707 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2760 = dot(vec3(cbLight._m0[_2722].xyz), vec3(_2749, _2750, _2751));
        float _4718 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2764 = _2741 * _2741;
        float _2768 = ((_2759 * _2759) * (_2764 + (-1.0))) + 1.0;
        float _2775 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
        float _2782 = 1.0 - _2741;
        float _2792 = (0.5 / (((_2402 * ((_2755 * _2782) + _2741)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2782) + _2741) * _2755))) * _2755;
        float _4729 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2794 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2764 / ((_2768 * _2768) * 3.141590118408203125));
        float _2795 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2711 = (((((_2775 * _2424) + _1183) * cbLight._m0[_2726].x) * _2794) * _2795) + _2597;
        _2713 = (((((_2775 * _2426) + _1185) * cbLight._m0[_2726].y) * _2794) * _2795) + _2599;
        _2715 = (((((_2775 * _2427) + _1186) * cbLight._m0[_2726].z) * _2794) * _2795) + _2601;
    }
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    if (_2235.y == 0u)
    {
        float _2870 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2871 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2870;
        float _2872 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2870;
        float _2873 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2870;
        uvec4 _2885 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2886 = _2885.x;
        uint _2897 = uint((float(_2885.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1122) / _2886))) + floor(float(uint(cbSceneParam._m0[85u].x * _1121) / _2886)));
        float _2907 = (log2(_2873 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2908 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        uint _2911 = uint(isnan(14.0) ? _2908 : (isnan(_2908) ? 14.0 : min(_2908, 14.0)));
        uvec4 _2916 = texelFetch(g_lightClusterGridBuffer, int(((_2911 << 2u) + (_2897 << 6u)) >> 2u));
        uint _2917 = _2916.x;
        uint _2918 = _2885.z;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        if (((((1u << ((_2918 >> 4u) & 15u)) + 4294967295u) & _2917) == 0u) || ((_2918 & 240u) == 0u))
        {
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
        }
        else
        {
            float _3019;
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            uint _3168 = 0u;
            uint _3177;
            bool _3178;
            for (;;)
            {
                _3177 = texelFetch(g_lightClassification, int((((_2911 << 5u) + (_2897 << 9u)) + (_3168 << 2u)) >> 2u)).x;
                _3178 = _3177 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3178)
                {
                    frontier_phi_61_pred = _3162;
                    frontier_phi_61_pred_1 = _3167;
                    frontier_phi_61_pred_2 = _3166;
                    frontier_phi_61_pred_3 = _3165;
                    frontier_phi_61_pred_4 = _3164;
                    frontier_phi_61_pred_5 = _3163;
                }
                else
                {
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    uint _3292;
                    _3286 = _3162;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3177;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    for (;;)
                    {
                        uint _3296 = uint(findLSB(_3292)) + (_3168 << 5u);
                        uint _3293 = (_3292 + 4294967295u) & _3292;
                        uint _3298 = _3296 * 48u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 3u)).x));
                        uint _3318 = (_3296 * 48u) + 4u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3337 = (_3296 * 48u) + 8u;
                        vec3 _3348 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x));
                        float _3352 = _3312.x - _2871;
                        float _3353 = _3312.y - _2872;
                        float _3354 = _3312.z - _2873;
                        float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                        float _3358 = inversesqrt(_3355);
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3362 = dot(vec3(_1140, _1143, _1146), vec3(_3359, _3360, _3361));
                        float _3367 = 1.0 - (_3355 * _3312.w);
                        float _4755 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3369 = sqrt(_3355) * _3331.w;
                        float _3372 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3362) + _3373;
                        float _3379 = _3369 * _3369;
                        float _3383 = ((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3368) / ((_3379 * 0.699999988079071044921875) + 1.0);
                        float _3387 = (-0.0) - _2871;
                        float _3388 = (-0.0) - _2872;
                        float _3389 = (-0.0) - _2873;
                        float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3404 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                        float _3405 = 1.0 - _1215;
                        float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                        float _3413 = _3412 * _3412;
                        float _3414 = _3413 * _3413;
                        float _3415 = _3394 + _3359;
                        float _3416 = _3395 + _3360;
                        float _3417 = _3396 + _3361;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3425 = dot(vec3(_1140, _1143, _1146), vec3(_3394, _3395, _3396));
                        float _4771 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3429 = dot(vec3(_1140, _1143, _1146), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                        float _4782 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                        float _3437 = _3372 * _3413;
                        float _3438 = _3437 * _3437;
                        float _3441 = ((1.0 - _3438) * _3362) + _3438;
                        float _4793 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3443 = 1.0 - _3413;
                        float _3453 = (0.5 / (((_3442 * ((_3428 * _3443) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3413) * _3428))) * _3442;
                        float _4804 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3464 = (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) / ((_3436 * _3436) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125))) * _3368;
                        _3221 = (_3383 * _3331.x) + _3289;
                        _3222 = (_3383 * _3331.y) + _3290;
                        _3223 = (_3383 * _3331.z) + _3291;
                        _3218 = (_3464 * _3348.x) + _3286;
                        _3219 = (_3464 * _3348.y) + _3287;
                        _3220 = (_3464 * _3348.z) + _3288;
                        if (_3293 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3286 = _3218;
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3293;
                        }
                    }
                    frontier_phi_61_pred = _3218;
                    frontier_phi_61_pred_1 = _3223;
                    frontier_phi_61_pred_2 = _3222;
                    frontier_phi_61_pred_3 = _3221;
                    frontier_phi_61_pred_4 = _3220;
                    frontier_phi_61_pred_5 = _3219;
                }
                _3019 = frontier_phi_61_pred;
                _3029 = frontier_phi_61_pred_1;
                _3027 = frontier_phi_61_pred_2;
                _3025 = frontier_phi_61_pred_3;
                _3023 = frontier_phi_61_pred_4;
                _3021 = frontier_phi_61_pred_5;
                uint _3169 = _3168 + 1u;
                if (_3169 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3162 = _3019;
                    _3163 = _3021;
                    _3164 = _3023;
                    _3165 = _3025;
                    _3166 = _3027;
                    _3167 = _3029;
                    _3168 = _3169;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
        }
        uvec4 _3032 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3033 = _3032.z;
        uint _3035 = (_3033 >> 8u) & 15u;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        if (((4294967295u << _3035) & _2917) == 0u)
        {
            _3130 = _3018;
            _3132 = _3020;
            _3134 = _3022;
            _3136 = _3024;
            _3138 = _3026;
            _3140 = _3028;
        }
        else
        {
            float _3155 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
            float _3156 = _3155 * _2871;
            float _3157 = _3155 * _2872;
            float _3158 = _3155 * _2873;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3035 < ((_3033 >> 12u) & 15u))
            {
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3269 = _3018;
                float _3270 = _3020;
                float _3271 = _3022;
                float _3272 = _3024;
                float _3273 = _3026;
                float _3274 = _3028;
                uint _3275 = _3035;
                uint _3284;
                bool _3285;
                for (;;)
                {
                    _3284 = texelFetch(g_lightClassification, int((((_2911 << 5u) + (_2897 << 9u)) + (_3275 << 2u)) >> 2u)).x;
                    _3285 = _3284 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3285)
                    {
                        frontier_phi_67_pred = _3272;
                        frontier_phi_67_pred_1 = _3273;
                        frontier_phi_67_pred_2 = _3274;
                        frontier_phi_67_pred_3 = _3271;
                        frontier_phi_67_pred_4 = _3270;
                        frontier_phi_67_pred_5 = _3269;
                    }
                    else
                    {
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3482 = _3269;
                        float _3483 = _3270;
                        float _3484 = _3271;
                        float _3485 = _3272;
                        float _3486 = _3273;
                        float _3487 = _3274;
                        uint _3488 = _3284;
                        uint _3489;
                        vec4 _3514;
                        float _3515;
                        vec4 _3530;
                        vec3 _3542;
                        vec4 _3557;
                        vec4 _3572;
                        float _3618;
                        bool _3619;
                        for (;;)
                        {
                            uint _3499 = ((_3275 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3488));
                            _3489 = (_3488 + 4294967295u) & _3488;
                            uint _3501 = _3499 * 40u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3515 = _3514.w;
                            uint _3517 = (_3499 * 40u) + 4u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3499 * 40u) + 8u;
                            _3542 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x));
                            uint _3544 = (_3499 * 40u) + 16u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3499 * 40u) + 20u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3499 * 40u) + 24u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3593 = (_3499 * 40u) + 28u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            _3618 = fma(_2873, _3606.z, fma(_2872, _3606.y, _3606.x * _2871)) + _3606.w;
                            _3619 = !((fma(_2873, _3587.z, fma(_2872, _3587.y, _3587.x * _2871)) + _3587.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3619)
                            {
                                float _3646 = _3514.x - _2871;
                                float _3647 = _3514.y - _2872;
                                float _3648 = _3514.z - _2873;
                                float _3649 = dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648));
                                float _3652 = inversesqrt(_3649);
                                float _3653 = _3652 * _3646;
                                float _3654 = _3652 * _3647;
                                float _3655 = _3652 * _3648;
                                float _3659 = 1.0 - (_3649 / (_3515 * _3515));
                                float _4815 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3664 = sqrt(_3649) * _3530.w;
                                float _3666 = 1.39999997615814208984375 / (_3664 + 1.39999997615814208984375);
                                float _3667 = _3666 * _3666;
                                float _3670 = ((1.0 - _3667) * dot(vec3(_3653, _3654, _3655), vec3(_1140, _1143, _1146))) + _3667;
                                float _3673 = _3664 * _3664;
                                float _3677 = (fma(_2873, _3557.z, fma(_2872, _3557.y, _3557.x * _2871)) + _3557.w) / _3618;
                                float _3678 = (fma(_2873, _3572.z, fma(_2872, _3572.y, _3572.x * _2871)) + _3572.w) / _3618;
                                float _3682 = 1.0 - dot(vec2(_3677, _3678), vec2(_3677, _3678));
                                float _4831 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3684 = _3683 * (((isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0))) * _3660) / ((_3673 * 0.699999988079071044921875) + 1.0));
                                float _3696 = exp2(log2(1.0 / ((_3673 * 3.5) + 5.0)) * 0.25);
                                float _3697 = 1.0 - _1215;
                                float _3704 = sqrt(1.0 - ((1.0 - (_3697 * _3697)) * (1.0 - (_3696 * _3696))));
                                float _3705 = _3704 * _3704;
                                float _3706 = _3705 * _3705;
                                float _3707 = _3653 - _3156;
                                float _3708 = _3654 - _3157;
                                float _3709 = _3655 - _3158;
                                float _3713 = inversesqrt(dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709)));
                                float _3717 = dot(vec3(_1140, _1143, _1146), vec3((-0.0) - _3156, (-0.0) - _3157, (-0.0) - _3158));
                                float _4842 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3721 = dot(vec3(_1140, _1143, _1146), vec3(_3713 * _3707, _3713 * _3708, _3713 * _3709));
                                float _4853 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3728 = ((_3724 * _3724) * (_3706 + (-1.0))) + 1.0;
                                float _3729 = _3666 * _3705;
                                float _3730 = _3729 * _3729;
                                float _3736 = ((1.0 - _3730) * dot(vec3(_1140, _1143, _1146), vec3(_3653, _3654, _3655))) + _3730;
                                float _4864 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3738 = 1.0 - _3705;
                                float _3748 = (0.5 / (((_3737 * ((_3720 * _3738) + _3705)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3705) * _3720))) * _3737;
                                float _4875 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3758 = (_3683 * _3660) * (((_3706 * 3.1415927410125732421875) * (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) / ((_3728 * _3728) * ((_3673 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3758 * _3542.x;
                                frontier_phi_73_pred_1 = _3758 * _3542.y;
                                frontier_phi_73_pred_2 = _3684 * _3530.z;
                                frontier_phi_73_pred_3 = _3684 * _3530.y;
                                frontier_phi_73_pred_4 = _3684 * _3530.x;
                                frontier_phi_73_pred_5 = _3758 * _3542.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3762 = frontier_phi_73_pred;
                            _3763 = frontier_phi_73_pred_1;
                            _3767 = frontier_phi_73_pred_2;
                            _3766 = frontier_phi_73_pred_3;
                            _3765 = frontier_phi_73_pred_4;
                            _3764 = frontier_phi_73_pred_5;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            if (_3489 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3489;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3472;
                        frontier_phi_67_pred_1 = _3473;
                        frontier_phi_67_pred_2 = _3474;
                        frontier_phi_67_pred_3 = _3471;
                        frontier_phi_67_pred_4 = _3470;
                        frontier_phi_67_pred_5 = _3469;
                    }
                    _3137 = frontier_phi_67_pred;
                    _3139 = frontier_phi_67_pred_1;
                    _3141 = frontier_phi_67_pred_2;
                    _3135 = frontier_phi_67_pred_3;
                    _3133 = frontier_phi_67_pred_4;
                    _3131 = frontier_phi_67_pred_5;
                    uint _3276 = _3275 + 1u;
                    if (_3276 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3269 = _3131;
                        _3270 = _3133;
                        _3271 = _3135;
                        _3272 = _3137;
                        _3273 = _3139;
                        _3274 = _3141;
                        _3275 = _3276;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3139;
                frontier_phi_55_56_ladder_1 = _3141;
                frontier_phi_55_56_ladder_2 = _3137;
                frontier_phi_55_56_ladder_3 = _3135;
                frontier_phi_55_56_ladder_4 = _3133;
                frontier_phi_55_56_ladder_5 = _3131;
            }
            else
            {
                frontier_phi_55_56_ladder = _3026;
                frontier_phi_55_56_ladder_1 = _3028;
                frontier_phi_55_56_ladder_2 = _3024;
                frontier_phi_55_56_ladder_3 = _3022;
                frontier_phi_55_56_ladder_4 = _3020;
                frontier_phi_55_56_ladder_5 = _3018;
            }
            _3130 = frontier_phi_55_56_ladder_5;
            _3132 = frontier_phi_55_56_ladder_4;
            _3134 = frontier_phi_55_56_ladder_3;
            _3136 = frontier_phi_55_56_ladder_2;
            _3138 = frontier_phi_55_56_ladder;
            _3140 = frontier_phi_55_56_ladder_1;
        }
        float _3145 = isnan(1.0) ? _1199 : (isnan(_1199) ? 1.0 : min(_1199, 1.0));
        _2930 = (_3145 * _3136) + _2366;
        _2932 = (_3145 * _3138) + _2368;
        _2934 = (_3145 * _3140) + _2370;
        _2936 = ((_3130 * _1183) * _3145) + _2711;
        _2938 = ((_3132 * _1185) * _3145) + _2713;
        _2940 = ((_3134 * _1186) * _3145) + _2715;
    }
    else
    {
        _2930 = _2366;
        _2932 = _2368;
        _2934 = _2370;
        _2936 = _2711;
        _2938 = _2713;
        _2940 = _2715;
    }
    float _4891 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _4902 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _4913 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    uint _2960 = _289 + 6u;
    float _2968 = _1121 / cbSceneParam._m0[86u].x;
    float _2969 = _1122 / cbSceneParam._m0[86u].y;
    vec4 _2983 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2968, _2969, (log2((isnan(cbSceneParam._m0[77u].w) ? _1056 : (isnan(_1056) ? cbSceneParam._m0[77u].w : min(_1056, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2985 = _2983.x;
    float _2986 = _2983.y;
    float _2987 = _2983.z;
    float _2988 = _2983.w;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    if (_1056 > cbSceneParam._m0[78u].w)
    {
        float _3043 = isnan(_1056) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1056 : min(cbSceneParam._m0[80u].w, _1056));
        float _3044 = _3043 / _1056;
        float _3055 = _3044 * _1106;
        float _3056 = _1107 * _3044;
        float _3057 = (-0.0) - _3056;
        float _3058 = _3044 * _1108;
        float _3060 = (cbSceneParam._m0[77u].w * _3057) / _3043;
        float _3061 = _3060 + cbSceneParam._m0[79u].w;
        float _3062 = cbSceneParam._m0[79u].w - _3056;
        float _3068 = sqrt(((_3055 * _3055) + (_3056 * _3056)) + (_3058 * _3058));
        float _3071 = (1.0 - (cbSceneParam._m0[77u].w / _3043)) * _3068;
        float _3076 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3078 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3231;
        if (abs((_3057 - _3060) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3231 = ((((_3061 > 0.0) ? exp2(_3076 * _3061) : (2.0 - exp2(_3078 * _3061))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3071;
        }
        else
        {
            float _3191 = 1.0 / cbSceneParam._m0[80u].x;
            float _3192 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : max(_3061, _3062));
            float _3193 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : min(_3061, _3062));
            float _3202 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : min(_3192, 0.0));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            _3231 = ((abs(_3068 / _3057) * cbSceneParam._m0[80u].y) * ((((_3202 - _3203) * 2.0) - ((exp2(_3076 * (isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0)))) - exp2(_3076 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))))) * _3191)) - ((exp2(_3078 * _3202) - exp2(_3078 * _3203)) * _3191))) + (_3071 * cbSceneParam._m0[80u].z);
        }
        vec4 _3233 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2968, _2969, 1.0), 0.0);
        float _3242 = exp2((_3231 * (-1.44269502162933349609375)) * (1.0 - _3233.w));
        float _3243 = log2(_3242);
        float _3259 = log2(_2988);
        _3080 = (exp2(_3259 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].x)) * _3233.x) / cbSceneParam._m0[78u].x)) + _2985;
        _3082 = (exp2(_3259 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].y)) * _3233.y) / cbSceneParam._m0[78u].y)) + _2986;
        _3084 = (exp2(_3259 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].z)) * _3233.z) / cbSceneParam._m0[78u].z)) + _2987;
        _3086 = _3242 * _2988;
    }
    else
    {
        _3080 = _2985;
        _3082 = _2986;
        _3084 = _2987;
        _3086 = _2988;
    }
    float _3098 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3099 = _3098 == 3.0;
    float _3100 = log2(_3086);
    float _3107 = exp2(_3100 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2930 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1199))) + ((_2936 + ((isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0))) * _2006)) * cbPerFrame._m0[3u].x));
    float _3108 = exp2(_3100 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2932 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1199))) + ((_2938 + ((isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0))) * _2006)) * cbPerFrame._m0[3u].x));
    float _3109 = exp2(_3100 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2934 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1199))) + ((_2940 + ((isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0))) * _2006)) * cbPerFrame._m0[3u].x));
    float _3118 = (_3098 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3118 * (_3099 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3080)));
    SV_Target.y = _3118 * (_3099 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3082)));
    SV_Target.z = _3118 * (_3099 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3084)));
    SV_Target.w = cbInstanceData._m0[_2960].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2960].w;
}


