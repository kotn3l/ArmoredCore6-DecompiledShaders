#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1361;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _406 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _356.x) * 2.0) - ((((_394 - _406) * cbMtdParam._m0[23u].w) + _406) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3711 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _431 = (_424 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _432 = (_424 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _433 = (_424 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _472 = _470.x;
    float _482 = dot(vec4(_472, _470.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _496 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _356.y) * 2.0) - ((((_472 - _482) * cbMtdParam._m0[23u].w) + _482) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3722 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _510 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_497 * ((_450.x * cbMtdParam._m0[13u].x) - _431)) + _431);
    float _513 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_497 * ((_450.y * cbMtdParam._m0[13u].y) - _432)) + _432);
    float _516 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_497 * ((_450.z * cbMtdParam._m0[13u].z) - _433)) + _433);
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _555 = _551.z;
    float _562 = ((_534.x - _553) * _424) + _553;
    float _563 = ((_534.y - _554) * _424) + _554;
    float _564 = ((_534.z - _555) * _424) + _555;
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _589 = ((_576.z - _564) * _497) + _564;
    float _592 = ((((_576.x - _562) * _497) + _562) * 2.0) + (-1.0);
    float _594 = ((((_576.y - _563) * _497) + _563) * 2.0) + (-1.0);
    float _595 = dot(vec2(_592, _594), vec2(_592, _594));
    float _3733 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _600 = sqrt(1.0 - (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _626 = (((_614.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _592;
    float _627 = (((_614.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _594;
    float _630 = fma(_600, _234, fma(_627, _241, _626 * _227));
    float _633 = fma(_600, _235, fma(_627, _242, _626 * _228));
    float _636 = fma(_600, _236, fma(_627, _243, _626 * _229));
    float _640 = inversesqrt(dot(vec3(_630, _633, _636), vec3(_630, _633, _636)));
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _669 = _667.x;
    float _670 = 1.0 - _669;
    float _679 = (cbMtdParam._m0[19u].x + dot(vec4(_640 * _630, _640 * _633, _640 * _636, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_669 - _670) * cbMtdParam._m0[24u].z) + _670) * cbMtdParam._m0[21u].z);
    float _3744 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _687 = (_680 * (cbMtdParam._m0[17u].x - _510)) + _510;
    float _688 = (_680 * (cbMtdParam._m0[17u].y - _513)) + _513;
    float _689 = (_680 * (cbMtdParam._m0[17u].z - _516)) + _516;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _717 = _715.x;
    float _734 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _717) * _424) + _717;
    float _751 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w)).x - _734) * _497) + _734;
    float _755 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _751) * cbMtdParam._m0[19u].z) + _751;
    float _757 = _755 - (_755 * _680);
    float _761 = (cbMtdParam._m0[19u].w * (_614.z - _589)) + _589;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _781 = (_774.x * 2.0) + (-1.0);
    float _782 = (_774.y * 2.0) + (-1.0);
    float _783 = dot(vec2(_781, _782), vec2(_781, _782));
    float _3755 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _791 = ((_774.z - _761) * _680) + _761;
    float _801 = ((sqrt(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) - _600) * _680) + _600;
    float _804 = (((_781 - _626) * _680) + _626) + (cbMtdParam._m0[21u].x * _626);
    float _805 = (((_782 - _627) * _680) + _627) + (cbMtdParam._m0[21u].x * _627);
    float _807 = cbMtdParam._m0[22u].x + _614.w;
    float _810 = fma(_801, _234, fma(_805, _241, _804 * _227));
    float _813 = fma(_801, _235, fma(_805, _242, _804 * _228));
    float _816 = fma(_801, _236, fma(_805, _243, _804 * _229));
    float _820 = inversesqrt(dot(vec3(_810, _813, _816), vec3(_810, _813, _816)));
    float _821 = _820 * _810;
    float _822 = _820 * _813;
    float _823 = _820 * _816;
    float _3766 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _824 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _3788 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3799 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3810 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3821 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _829 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _843 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _894 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _884);
    float _895 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _884);
    float _896 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _884);
    float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
    float _901 = _894 * _900;
    float _902 = _895 * _900;
    float _903 = _896 * _900;
    float _909 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _910 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _928 = fma(_823, cbSceneParam._m0[5u].z, fma(_822, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _821));
    float _931 = fma(_823, cbSceneParam._m0[6u].z, fma(_822, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _821));
    float _934 = fma(_823, cbSceneParam._m0[7u].z, fma(_822, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _821));
    uint _948 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _954 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_948].x;
    float _955 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * cbInstanceData._m0[_948].y;
    float _956 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * cbInstanceData._m0[_948].z;
    float _3832 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _960 = 1.0 - _829;
    float _961 = _957 * _960;
    float _962 = _958 * _960;
    float _963 = _959 * _960;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _829;
    float _969 = (_958 + (-0.039999999105930328369140625)) * _829;
    float _970 = (_959 + (-0.039999999105930328369140625)) * _829;
    float _971 = _968 + 0.039999999105930328369140625;
    float _973 = _969 + 0.039999999105930328369140625;
    float _974 = _970 + 0.039999999105930328369140625;
    vec4 _983 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _909, cbSceneParam._m0[86u].y * _910));
    float _987 = ((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * TEXCOORD_5.w) * _983.x;
    float _988 = dot(vec3(_821, _822, _823), vec3(_901, _902, _903));
    float _991 = _988 * 2.0;
    float _995 = (_991 * _821) - _901;
    float _996 = (_991 * _822) - _902;
    float _997 = (_991 * _823) - _903;
    float _1001 = abs(dot(vec3(_901, _902, _903), vec3(_821, _822, _823)));
    float _3865 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1003 = sqrt(_824);
    float _1016 = exp2((_1003 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1003 * 3.0));
    float _1022 = (1.0 - _1016) * ((_1003 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1023 = _1016 * _1003;
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1360;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1085 = fma(_1059, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051));
        float _1089 = fma(_1059, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051));
        float _1093 = fma(_1059, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051));
        float _1118 = _1051 + _821;
        float _1119 = _1055 + _822;
        float _1120 = _1059 + _823;
        float _1130 = fma(_1120, cbModelParam._m0[26u].z, fma(_1119, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1118)) - _1085;
        float _1131 = fma(_1120, cbModelParam._m0[27u].z, fma(_1119, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1118)) - _1089;
        float _1132 = fma(_1120, cbModelParam._m0[28u].z, fma(_1119, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1118)) - _1093;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1085 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1089 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[34u].z) + ((((((_1093 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1188 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1154.x + (-0.5));
        float _1190 = _1188 * (_1154.y + (-0.5));
        float _1191 = _1188 * (_1154.z + (-0.5));
        float _1198 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1161.x + (-0.5));
        float _1200 = _1198 * (_1161.y + (-0.5));
        float _1201 = _1198 * (_1161.z + (-0.5));
        float _1208 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1168.x + (-0.5));
        float _1210 = _1208 * (_1168.y + (-0.5));
        float _1211 = _1208 * (_1168.z + (-0.5));
        float _1218 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1175.x + (-0.5));
        float _1220 = _1218 * (_1175.y + (-0.5));
        float _1221 = _1218 * (_1175.z + (-0.5));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = _1189 * 0.5;
        float _1226 = _1199 * 0.5;
        float _1227 = _1209 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1242 = (dot(vec3(_821, _822, _823), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1252 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3913 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1254 + 1.0))) + _1259) * _1222;
        float _1269 = _1190 * 0.5;
        float _1270 = _1200 * 0.5;
        float _1271 = _1210 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_821, _822, _823), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3946 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1296 + 1.0))) + _1301) * _1223;
        float _1311 = _1191 * 0.5;
        float _1312 = _1201 * 0.5;
        float _1313 = _1211 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_821, _822, _823), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3979 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1338 + 1.0))) + _1343) * _1224;
        _1360 = _1191;
        _1362 = _1190;
        _1363 = _1189;
        _1364 = _1201;
        _1365 = _1200;
        _1366 = _1199;
        _1367 = _1211;
        _1368 = _1210;
        _1369 = _1209;
        _1370 = _1224;
        _1371 = _1223;
        _1372 = _1222;
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
    }
    else
    {
        _1360 = _1361;
        _1362 = _1361;
        _1363 = _1361;
        _1364 = _1361;
        _1365 = _1361;
        _1366 = _1361;
        _1367 = _1361;
        _1368 = _1361;
        _1369 = _1361;
        _1370 = _1361;
        _1371 = _1361;
        _1372 = _1361;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1399 = fma(_1059, cbModelParam._m0[30u].z, fma(_1055, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051));
        float _1403 = fma(_1059, cbModelParam._m0[31u].z, fma(_1055, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051));
        float _1407 = fma(_1059, cbModelParam._m0[32u].z, fma(_1055, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051));
        float _1430 = _1051 + _821;
        float _1431 = _1055 + _822;
        float _1432 = _1059 + _823;
        float _1442 = fma(_1432, cbModelParam._m0[30u].z, fma(_1431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1430)) - _1399;
        float _1443 = fma(_1432, cbModelParam._m0[31u].z, fma(_1431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1430)) - _1403;
        float _1444 = fma(_1432, cbModelParam._m0[32u].z, fma(_1431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1430)) - _1407;
        float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
        float _1461 = ((_1448 * _1442) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1399 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1448 * _1443) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1403 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1448 * _1444) / cbModelParam._m0[35u].z) + ((((((_1407 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        float _1498 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1465.x + (-0.5));
        float _1500 = _1498 * (_1465.y + (-0.5));
        float _1501 = _1498 * (_1465.z + (-0.5));
        float _1508 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1472.x + (-0.5));
        float _1510 = _1508 * (_1472.y + (-0.5));
        float _1511 = _1508 * (_1472.z + (-0.5));
        float _1518 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1479.x + (-0.5));
        float _1520 = _1518 * (_1479.y + (-0.5));
        float _1521 = _1518 * (_1479.z + (-0.5));
        float _1528 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1486.x + (-0.5));
        float _1530 = _1528 * (_1486.y + (-0.5));
        float _1531 = _1528 * (_1486.z + (-0.5));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = _1499 * 0.5;
        float _1536 = _1509 * 0.5;
        float _1537 = _1519 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_821, _822, _823), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4042 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1562 + 1.0))) + _1567) * _1532;
        float _1577 = _1500 * 0.5;
        float _1578 = _1510 * 0.5;
        float _1579 = _1520 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_821, _822, _823), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4075 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1604 + 1.0))) + _1609) * _1533;
        float _1619 = _1501 * 0.5;
        float _1620 = _1511 * 0.5;
        float _1621 = _1521 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_821, _822, _823), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4108 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1646 + 1.0))) + _1651) * _1534;
        _1668 = _1501;
        _1669 = _1500;
        _1670 = _1499;
        _1671 = _1511;
        _1672 = _1510;
        _1673 = _1509;
        _1674 = _1521;
        _1675 = _1520;
        _1676 = _1519;
        _1677 = _1534;
        _1678 = _1533;
        _1679 = _1532;
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
    }
    else
    {
        _1668 = _1361;
        _1669 = _1361;
        _1670 = _1361;
        _1671 = _1361;
        _1672 = _1361;
        _1673 = _1361;
        _1674 = _1361;
        _1675 = _1361;
        _1676 = _1361;
        _1677 = _1361;
        _1678 = _1361;
        _1679 = _1361;
        _1680 = 0.0;
        _1681 = 0.0;
        _1682 = 0.0;
    }
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1373)) + _1373;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1374)) + _1374;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1375)) + _1375;
    float _1715 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1692));
    float _1736 = _995 * 0.5;
    float _1737 = _996 * 0.5;
    float _1738 = _997 * 0.5;
    float _1739 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1742 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1745 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1779;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1752 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1360, _1364, _1367, _1370));
        float _1756 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1760 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1767 = dot(vec4(cbModelParam._m0[39u]), vec4(_1736, _1737, _1738, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1790;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1781 = dot(vec4(cbModelParam._m0[40u]), vec4(_1736, _1737, _1738, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1781) ? 0.0 : (isnan(0.0) ? _1781 : max(0.0, _1781))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1794 = (_1790 * cbModelParam._m0[1u].x) + (_1779 * (1.0 - cbModelParam._m0[1u].x));
    float _1804 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1804 : min(cbModelParam._m0[25u].z, _1804));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1853 = fma(_1059, cbModelParam._m0[13u].z, fma(_1055, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1051)) + cbModelParam._m0[13u].w;
        float _1857 = fma(_1059, cbModelParam._m0[14u].z, fma(_1055, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1051)) + cbModelParam._m0[14u].w;
        float _1861 = fma(_1059, cbModelParam._m0[15u].z, fma(_1055, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1051)) + cbModelParam._m0[15u].w;
        float _1864 = fma(_997, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995));
        float _1867 = fma(_997, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995));
        float _1870 = fma(_997, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995));
        float _1898;
        if (_1864 > 0.0)
        {
            _1898 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1898 = frontier_phi_14_12_ladder;
        }
        float _2122;
        if (_1867 > 0.0)
        {
            _2122 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2122 = frontier_phi_23_19_ladder;
        }
        float _2379;
        if (_1870 > 0.0)
        {
            _2379 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2379 = frontier_phi_35_30_ladder;
        }
        float _2381 = isnan(_2122) ? _1898 : (isnan(_1898) ? _2122 : min(_1898, _2122));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1864) + _1853;
        float _2387 = (_2382 * _1867) + _1857;
        float _2388 = (_2382 * _1870) + _1861;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2389;
        float _2393 = _2389 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 > _2393) || ((_2387 < _2391) || ((_2386 < _2391) || (_2386 > _2393))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1805);
            frontier_phi_13_35_ladder = _2516.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2516.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2516.x * cbModelParam._m0[1u].y;
        }
        _1886 = frontier_phi_13_35_ladder_2;
        _1888 = frontier_phi_13_35_ladder_1;
        _1890 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_995, _996, _997), _1805);
        _1886 = _1874.x * cbModelParam._m0[1u].y;
        _1888 = _1874.y * cbModelParam._m0[1u].y;
        _1890 = _1874.z * cbModelParam._m0[1u].y;
    }
    float _1894 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1894 : min(cbModelParam._m0[25u].w, _1894));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1949 = fma(_1059, cbModelParam._m0[21u].z, fma(_1055, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1051)) + cbModelParam._m0[21u].w;
        float _1953 = fma(_1059, cbModelParam._m0[22u].z, fma(_1055, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1051)) + cbModelParam._m0[22u].w;
        float _1957 = fma(_1059, cbModelParam._m0[23u].z, fma(_1055, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1051)) + cbModelParam._m0[23u].w;
        float _1960 = fma(_997, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995));
        float _1963 = fma(_997, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995));
        float _1966 = fma(_997, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995));
        float _2127;
        if (_1960 > 0.0)
        {
            _2127 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2127 = frontier_phi_25_21_ladder;
        }
        float _2406;
        if (_1963 > 0.0)
        {
            _2406 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2406 = frontier_phi_37_32_ladder;
        }
        float _2619;
        if (_1966 > 0.0)
        {
            _2619 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2619 = frontier_phi_46_43_ladder;
        }
        float _2621 = isnan(_2406) ? _2127 : (isnan(_2127) ? _2406 : min(_2127, _2406));
        float _2622 = isnan(_2619) ? _2621 : (isnan(_2621) ? _2619 : min(_2621, _2619));
        float _2626 = (_2622 * _1960) + _1949;
        float _2627 = (_2622 * _1963) + _1953;
        float _2628 = (_2622 * _1966) + _1957;
        float _2629 = _2622 * 9.9999997473787516355514526367188e-05;
        float _2630 = (-1.0) - _2629;
        float _2632 = _2629 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2628 > _2632) || ((_2628 < _2630) || ((_2627 > _2632) || ((_2627 < _2630) || ((_2626 < _2630) || (_2626 > _2632))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2628, cbModelParam._m0[17u].z, fma(_2627, cbModelParam._m0[17u].y, _2626 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2628, cbModelParam._m0[18u].z, fma(_2627, cbModelParam._m0[18u].y, _2626 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2628, cbModelParam._m0[19u].z, fma(_2627, cbModelParam._m0[19u].y, _2626 * cbModelParam._m0[19u].x))), _1895);
            frontier_phi_22_46_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _1985 = frontier_phi_22_46_ladder_2;
        _1987 = frontier_phi_22_46_ladder_1;
        _1989 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_995, _996, _997), _1895);
        _1985 = _1969.x * cbModelParam._m0[1u].z;
        _1987 = _1969.y * cbModelParam._m0[1u].z;
        _1989 = _1969.z * cbModelParam._m0[1u].z;
    }
    float _2002 = (((_1022 * _971) + _1023) * _987) * ((cbModelParam._m0[1u].w * (_1985 - _1886)) + _1886);
    float _2004 = (((_1022 * _973) + _1023) * _987) * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2006 = (((_1022 * _974) + _1023) * _987) * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2009 = fma(_2006, cbSceneParam._m0[89u].z, fma(_2004, cbSceneParam._m0[89u].y, _2002 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_2006, cbSceneParam._m0[90u].z, fma(_2004, cbSceneParam._m0[90u].y, _2002 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_2006, cbSceneParam._m0[91u].z, fma(_2004, cbSceneParam._m0[91u].y, _2002 * cbSceneParam._m0[91u].x));
    vec4 _2023 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_909, _910));
    float _2025 = _2023.w;
    float _2037 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2025);
    float _2038 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2025);
    float _2039 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2025);
    uvec4 _2043 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2045 = _2043.x * 14u;
    uint _2046 = _2045 + 13u;
    float _2053 = _987 + (-1.0);
    float _2058 = (cbLight._m0[_2046].x * _2053) + 1.0;
    float _2059 = (cbLight._m0[_2046].y * _2053) + 1.0;
    float _2060 = (cbLight._m0[_2046].z * _2053) + 1.0;
    float _2061 = (cbLight._m0[_2046].w * _2053) + 1.0;
    uint _2062 = _2045 + 5u;
    float _2068 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2072 = _2045 + 4u;
    float _2081 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2085 = _2045 | 1u;
    float _2096 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_821, _822, _823));
    float _2099 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_821, _822, _823));
    float _4244 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _4255 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2104 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2106 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2113 = ((cbLight._m0[_2062].x * _2068) * _2106) + (((cbLight._m0[_2072].x * _2037) * _2081) * _2104);
    float _2114 = ((_2068 * cbLight._m0[_2062].y) * _2106) + (((cbLight._m0[_2072].y * _2038) * _2081) * _2104);
    float _2115 = ((_2068 * cbLight._m0[_2062].z) * _2106) + (((cbLight._m0[_2072].z * _2039) * _2081) * _2104);
    uvec4 _2119 = floatBitsToUint(cbLight._m0[_2045 + 12u]);
    bool _2121 = _2119.x == 0u;
    float _2132;
    float _2134;
    float _2136;
    if (_2121)
    {
        _2132 = _2113;
        _2134 = _2114;
        _2136 = _2115;
    }
    else
    {
        uint _2140 = _2045 + 6u;
        float _2156 = (dot(vec3(cbLight._m0[_2045 + 2u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2157 = _2156 * _2156;
        float _4266 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2158 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2159 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2132 = (((cbLight._m0[_2140].x * 0.3183098733425140380859375) * _2158) * _2159) + _2113;
        _2134 = (((cbLight._m0[_2140].y * 0.3183098733425140380859375) * _2158) * _2159) + _2114;
        _2136 = (((cbLight._m0[_2140].z * 0.3183098733425140380859375) * _2158) * _2159) + _2115;
    }
    bool _2139 = _2119.y == 0u;
    float _2177;
    float _2179;
    float _2181;
    if (_2139)
    {
        _2177 = _2132;
        _2179 = _2134;
        _2181 = _2136;
    }
    else
    {
        uint _2350 = _2045 + 7u;
        float _2366 = (dot(vec3(cbLight._m0[_2045 + 3u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2367 = _2366 * _2366;
        float _4282 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2368 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2369 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2177 = (((cbLight._m0[_2350].x * 0.3183098733425140380859375) * _2368) * _2369) + _2132;
        _2179 = (((cbLight._m0[_2350].y * 0.3183098733425140380859375) * _2368) * _2369) + _2134;
        _2181 = (((cbLight._m0[_2350].z * 0.3183098733425140380859375) * _2368) * _2369) + _2136;
    }
    uint _2184 = _2045 + 8u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _824) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_2045].x + _901;
    float _2200 = cbLight._m0[_2045].y + _902;
    float _2201 = cbLight._m0[_2045].z + _903;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2045].xyz));
    float _4298 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _4309 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _2213 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2214 = dot(vec3(_821, _822, _823), vec3(_2206, _2207, _2208));
    float _4320 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2218 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2206, _2207, _2208));
    float _4331 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2222 = _2198 * _2198;
    float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
    float _2234 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
    float _2235 = 0.959999978542327880859375 - _968;
    float _2237 = 0.959999978542327880859375 - _969;
    float _2238 = 0.959999978542327880859375 - _970;
    float _2245 = 1.0 - _2198;
    float _2256 = (0.5 / (((_2213 * ((_2212 * _2245) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2245) + _2198) * _2212))) * _2212;
    float _4342 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
    uint _2272 = _2045 + 9u;
    float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _824) * 0.949999988079071044921875);
    float _2284 = _2283 * _2283;
    float _2285 = cbLight._m0[_2085].x + _901;
    float _2286 = cbLight._m0[_2085].y + _902;
    float _2287 = cbLight._m0[_2085].z + _903;
    float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
    float _2292 = _2291 * _2285;
    float _2293 = _2291 * _2286;
    float _2294 = _2291 * _2287;
    float _2295 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2085].xyz));
    float _4353 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2299 = dot(vec3(_821, _822, _823), vec3(_2292, _2293, _2294));
    float _4364 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2303 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2292, _2293, _2294));
    float _4375 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2307 = _2284 * _2284;
    float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
    float _2318 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
    float _2325 = 1.0 - _2284;
    float _2335 = (0.5 / (((_2213 * ((_2298 * _2325) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2325) + _2284) * _2298))) * _2298;
    float _4386 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2337 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
    float _2347 = (((((_2318 * _2235) + _971) * cbLight._m0[_2272].x) * _2337) * _2068) + ((((cbLight._m0[_2184].x * _2037) * ((_2234 * _2235) + _971)) * _2258) * _2081);
    float _2348 = (((((_2318 * _2237) + _973) * cbLight._m0[_2272].y) * _2337) * _2068) + ((((cbLight._m0[_2184].y * _2038) * ((_2234 * _2237) + _973)) * _2258) * _2081);
    float _2349 = (((((_2318 * _2238) + _974) * cbLight._m0[_2272].z) * _2337) * _2068) + ((((cbLight._m0[_2184].z * _2039) * ((_2234 * _2238) + _974)) * _2258) * _2081);
    float _2411;
    float _2413;
    float _2415;
    if (_2121)
    {
        _2411 = _2347;
        _2413 = _2348;
        _2415 = _2349;
    }
    else
    {
        uint _2417 = _2045 + 2u;
        uint _2421 = _2045 + 10u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _824) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _901;
        float _2438 = cbLight._m0[_2417].y + _902;
        float _2439 = cbLight._m0[_2417].z + _903;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2417].xyz));
        float _4397 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2451 = dot(vec3(_821, _822, _823), vec3(_2444, _2445, _2446));
        float _4408 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4419 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
        float _2477 = 1.0 - _2436;
        float _2487 = (0.5 / (((_2213 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2477) + _2436) * _2450))) * _2450;
        float _4430 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2489 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2490 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2411 = (((((_2470 * _2235) + _971) * cbLight._m0[_2421].x) * _2489) * _2490) + _2347;
        _2413 = (((((_2470 * _2237) + _973) * cbLight._m0[_2421].y) * _2489) * _2490) + _2348;
        _2415 = (((((_2470 * _2238) + _974) * cbLight._m0[_2421].z) * _2489) * _2490) + _2349;
    }
    float _2525;
    float _2527;
    float _2529;
    if (_2139)
    {
        _2525 = _2411;
        _2527 = _2413;
        _2529 = _2415;
    }
    else
    {
        uint _2536 = _2045 + 3u;
        uint _2540 = _2045 + 11u;
        float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _824) * 0.949999988079071044921875);
        float _2555 = _2554 * _2554;
        float _2556 = cbLight._m0[_2536].x + _901;
        float _2557 = cbLight._m0[_2536].y + _902;
        float _2558 = cbLight._m0[_2536].z + _903;
        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
        float _2563 = _2562 * _2556;
        float _2564 = _2562 * _2557;
        float _2565 = _2562 * _2558;
        float _2566 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2536].xyz));
        float _4446 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2570 = dot(vec3(_821, _822, _823), vec3(_2563, _2564, _2565));
        float _4457 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2574 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2563, _2564, _2565));
        float _4468 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2578 = _2555 * _2555;
        float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
        float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
        float _2596 = 1.0 - _2555;
        float _2606 = (0.5 / (((_2213 * ((_2569 * _2596) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2596) + _2555) * _2569))) * _2569;
        float _4479 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2608 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
        float _2609 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2525 = (((((_2589 * _2235) + _971) * cbLight._m0[_2540].x) * _2608) * _2609) + _2411;
        _2527 = (((((_2589 * _2237) + _973) * cbLight._m0[_2540].y) * _2608) * _2609) + _2413;
        _2529 = (((((_2589 * _2238) + _974) * cbLight._m0[_2540].z) * _2608) * _2609) + _2415;
    }
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_2043.y == 0u)
    {
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2684;
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2684;
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2684;
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.x;
        uint _2711 = uint((float(_2699.y) * floor(float(uint(cbSceneParam._m0[85u].y * _910) / _2700))) + floor(float(uint(cbSceneParam._m0[85u].x * _909) / _2700)));
        float _2721 = (log2(_2687 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2722 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        uint _2725 = uint(isnan(14.0) ? _2722 : (isnan(_2722) ? 14.0 : min(_2722, 14.0)));
        uvec4 _2730 = texelFetch(g_lightClusterGridBuffer, int(((_2725 << 2u) + (_2711 << 6u)) >> 2u));
        uint _2731 = _2730.x;
        uint _2732 = _2699.z;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((((1u << ((_2732 >> 4u) & 15u)) + 4294967295u) & _2731) == 0u) || ((_2732 & 240u) == 0u))
        {
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
        }
        else
        {
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            uint _2983 = 0u;
            uint _2992;
            bool _2993;
            for (;;)
            {
                _2992 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                _2993 = _2992 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2993)
                {
                    frontier_phi_61_pred = _2977;
                    frontier_phi_61_pred_1 = _2982;
                    frontier_phi_61_pred_2 = _2981;
                    frontier_phi_61_pred_3 = _2980;
                    frontier_phi_61_pred_4 = _2979;
                    frontier_phi_61_pred_5 = _2978;
                }
                else
                {
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    uint _3107;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2992;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    for (;;)
                    {
                        uint _3111 = uint(findLSB(_3107)) + (_2983 << 5u);
                        uint _3108 = (_3107 + 4294967295u) & _3107;
                        uint _3113 = _3111 * 48u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3133 = (_3111 * 48u) + 4u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3152 = (_3111 * 48u) + 8u;
                        vec3 _3163 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x));
                        float _3167 = _3127.x - _2685;
                        float _3168 = _3127.y - _2686;
                        float _3169 = _3127.z - _2687;
                        float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                        float _3173 = inversesqrt(_3170);
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3177 = dot(vec3(_928, _931, _934), vec3(_3174, _3175, _3176));
                        float _3182 = 1.0 - (_3170 * _3127.w);
                        float _4505 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3184 = sqrt(_3170) * _3146.w;
                        float _3187 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3177) + _3188;
                        float _3194 = _3184 * _3184;
                        float _3198 = ((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3183) / ((_3194 * 0.699999988079071044921875) + 1.0);
                        float _3202 = (-0.0) - _2685;
                        float _3203 = (-0.0) - _2686;
                        float _3204 = (-0.0) - _2687;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3219 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                        float _3220 = 1.0 - _1003;
                        float _3227 = sqrt(1.0 - ((1.0 - (_3220 * _3220)) * (1.0 - (_3219 * _3219))));
                        float _3228 = _3227 * _3227;
                        float _3229 = _3228 * _3228;
                        float _3230 = _3209 + _3174;
                        float _3231 = _3210 + _3175;
                        float _3232 = _3211 + _3176;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3240 = dot(vec3(_928, _931, _934), vec3(_3209, _3210, _3211));
                        float _4521 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3244 = dot(vec3(_928, _931, _934), vec3(_3236 * _3230, _3236 * _3231, _3236 * _3232));
                        float _4532 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3251 = ((_3247 * _3247) * (_3229 + (-1.0))) + 1.0;
                        float _3252 = _3187 * _3228;
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3177) + _3253;
                        float _4543 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3257 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3258 = 1.0 - _3228;
                        float _3268 = (0.5 / (((_3257 * ((_3243 * _3258) + _3228)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3228) * _3243))) * _3257;
                        float _4554 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3279 = (((_3229 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3251 * _3251) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125))) * _3183;
                        _3036 = (_3198 * _3146.x) + _3104;
                        _3037 = (_3198 * _3146.y) + _3105;
                        _3038 = (_3198 * _3146.z) + _3106;
                        _3033 = (_3279 * _3163.x) + _3101;
                        _3034 = (_3279 * _3163.y) + _3102;
                        _3035 = (_3279 * _3163.z) + _3103;
                        if (_3108 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3108;
                        }
                    }
                    frontier_phi_61_pred = _3033;
                    frontier_phi_61_pred_1 = _3038;
                    frontier_phi_61_pred_2 = _3037;
                    frontier_phi_61_pred_3 = _3036;
                    frontier_phi_61_pred_4 = _3035;
                    frontier_phi_61_pred_5 = _3034;
                }
                _2833 = frontier_phi_61_pred;
                _2843 = frontier_phi_61_pred_1;
                _2841 = frontier_phi_61_pred_2;
                _2839 = frontier_phi_61_pred_3;
                _2837 = frontier_phi_61_pred_4;
                _2835 = frontier_phi_61_pred_5;
                uint _2984 = _2983 + 1u;
                if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2977 = _2833;
                    _2978 = _2835;
                    _2979 = _2837;
                    _2980 = _2839;
                    _2981 = _2841;
                    _2982 = _2843;
                    _2983 = _2984;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
        }
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.z;
        uint _2849 = (_2847 >> 8u) & 15u;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        if (((4294967295u << _2849) & _2731) == 0u)
        {
            _2945 = _2832;
            _2947 = _2834;
            _2949 = _2836;
            _2951 = _2838;
            _2953 = _2840;
            _2955 = _2842;
        }
        else
        {
            float _2970 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
            float _2971 = _2970 * _2685;
            float _2972 = _2970 * _2686;
            float _2973 = _2970 * _2687;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2849 < ((_2847 >> 12u) & 15u))
            {
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _3084 = _2832;
                float _3085 = _2834;
                float _3086 = _2836;
                float _3087 = _2838;
                float _3088 = _2840;
                float _3089 = _2842;
                uint _3090 = _2849;
                uint _3099;
                bool _3100;
                for (;;)
                {
                    _3099 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                    _3100 = _3099 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3100)
                    {
                        frontier_phi_67_pred = _3087;
                        frontier_phi_67_pred_1 = _3088;
                        frontier_phi_67_pred_2 = _3089;
                        frontier_phi_67_pred_3 = _3086;
                        frontier_phi_67_pred_4 = _3085;
                        frontier_phi_67_pred_5 = _3084;
                    }
                    else
                    {
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3297 = _3084;
                        float _3298 = _3085;
                        float _3299 = _3086;
                        float _3300 = _3087;
                        float _3301 = _3088;
                        float _3302 = _3089;
                        uint _3303 = _3099;
                        uint _3304;
                        vec4 _3329;
                        float _3330;
                        vec4 _3345;
                        vec3 _3357;
                        vec4 _3372;
                        vec4 _3387;
                        float _3433;
                        bool _3434;
                        for (;;)
                        {
                            uint _3314 = ((_3090 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3303));
                            _3304 = (_3303 + 4294967295u) & _3303;
                            uint _3316 = _3314 * 40u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3330 = _3329.w;
                            uint _3332 = (_3314 * 40u) + 4u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3314 * 40u) + 8u;
                            _3357 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x));
                            uint _3359 = (_3314 * 40u) + 16u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3314 * 40u) + 20u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3314 * 40u) + 24u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3408 = (_3314 * 40u) + 28u;
                            vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            _3433 = fma(_2687, _3421.z, fma(_2686, _3421.y, _3421.x * _2685)) + _3421.w;
                            _3434 = !((fma(_2687, _3402.z, fma(_2686, _3402.y, _3402.x * _2685)) + _3402.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3434)
                            {
                                float _3461 = _3329.x - _2685;
                                float _3462 = _3329.y - _2686;
                                float _3463 = _3329.z - _2687;
                                float _3464 = dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463));
                                float _3467 = inversesqrt(_3464);
                                float _3468 = _3467 * _3461;
                                float _3469 = _3467 * _3462;
                                float _3470 = _3467 * _3463;
                                float _3474 = 1.0 - (_3464 / (_3330 * _3330));
                                float _4565 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3479 = sqrt(_3464) * _3345.w;
                                float _3481 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                                float _3482 = _3481 * _3481;
                                float _3485 = ((1.0 - _3482) * dot(vec3(_3468, _3469, _3470), vec3(_928, _931, _934))) + _3482;
                                float _3488 = _3479 * _3479;
                                float _3492 = (fma(_2687, _3372.z, fma(_2686, _3372.y, _3372.x * _2685)) + _3372.w) / _3433;
                                float _3493 = (fma(_2687, _3387.z, fma(_2686, _3387.y, _3387.x * _2685)) + _3387.w) / _3433;
                                float _3497 = 1.0 - dot(vec2(_3492, _3493), vec2(_3492, _3493));
                                float _4581 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3499 = _3498 * (((isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0))) * _3475) / ((_3488 * 0.699999988079071044921875) + 1.0));
                                float _3511 = exp2(log2(1.0 / ((_3488 * 3.5) + 5.0)) * 0.25);
                                float _3512 = 1.0 - _1003;
                                float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                                float _3520 = _3519 * _3519;
                                float _3521 = _3520 * _3520;
                                float _3522 = _3468 - _2971;
                                float _3523 = _3469 - _2972;
                                float _3524 = _3470 - _2973;
                                float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                                float _3532 = dot(vec3(_928, _931, _934), vec3((-0.0) - _2971, (-0.0) - _2972, (-0.0) - _2973));
                                float _4592 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3536 = dot(vec3(_928, _931, _934), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                                float _4603 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                                float _3544 = _3481 * _3520;
                                float _3545 = _3544 * _3544;
                                float _3551 = ((1.0 - _3545) * dot(vec3(_928, _931, _934), vec3(_3468, _3469, _3470))) + _3545;
                                float _4614 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3553 = 1.0 - _3520;
                                float _3563 = (0.5 / (((_3552 * ((_3535 * _3553) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3520) * _3535))) * _3552;
                                float _4625 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3573 = (_3498 * _3475) * (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) / ((_3543 * _3543) * ((_3488 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3573 * _3357.x;
                                frontier_phi_73_pred_1 = _3573 * _3357.y;
                                frontier_phi_73_pred_2 = _3499 * _3345.z;
                                frontier_phi_73_pred_3 = _3499 * _3345.y;
                                frontier_phi_73_pred_4 = _3499 * _3345.x;
                                frontier_phi_73_pred_5 = _3573 * _3357.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3577 = frontier_phi_73_pred;
                            _3578 = frontier_phi_73_pred_1;
                            _3582 = frontier_phi_73_pred_2;
                            _3581 = frontier_phi_73_pred_3;
                            _3580 = frontier_phi_73_pred_4;
                            _3579 = frontier_phi_73_pred_5;
                            _3287 = _3580 + _3300;
                            _3288 = _3581 + _3301;
                            _3289 = _3582 + _3302;
                            _3284 = _3577 + _3297;
                            _3285 = _3578 + _3298;
                            _3286 = _3579 + _3299;
                            if (_3304 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3304;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3287;
                        frontier_phi_67_pred_1 = _3288;
                        frontier_phi_67_pred_2 = _3289;
                        frontier_phi_67_pred_3 = _3286;
                        frontier_phi_67_pred_4 = _3285;
                        frontier_phi_67_pred_5 = _3284;
                    }
                    _2952 = frontier_phi_67_pred;
                    _2954 = frontier_phi_67_pred_1;
                    _2956 = frontier_phi_67_pred_2;
                    _2950 = frontier_phi_67_pred_3;
                    _2948 = frontier_phi_67_pred_4;
                    _2946 = frontier_phi_67_pred_5;
                    uint _3091 = _3090 + 1u;
                    if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3084 = _2946;
                        _3085 = _2948;
                        _3086 = _2950;
                        _3087 = _2952;
                        _3088 = _2954;
                        _3089 = _2956;
                        _3090 = _3091;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2954;
                frontier_phi_55_56_ladder_1 = _2956;
                frontier_phi_55_56_ladder_2 = _2952;
                frontier_phi_55_56_ladder_3 = _2950;
                frontier_phi_55_56_ladder_4 = _2948;
                frontier_phi_55_56_ladder_5 = _2946;
            }
            else
            {
                frontier_phi_55_56_ladder = _2840;
                frontier_phi_55_56_ladder_1 = _2842;
                frontier_phi_55_56_ladder_2 = _2838;
                frontier_phi_55_56_ladder_3 = _2836;
                frontier_phi_55_56_ladder_4 = _2834;
                frontier_phi_55_56_ladder_5 = _2832;
            }
            _2945 = frontier_phi_55_56_ladder_5;
            _2947 = frontier_phi_55_56_ladder_4;
            _2949 = frontier_phi_55_56_ladder_3;
            _2951 = frontier_phi_55_56_ladder_2;
            _2953 = frontier_phi_55_56_ladder;
            _2955 = frontier_phi_55_56_ladder_1;
        }
        float _2960 = isnan(1.0) ? _987 : (isnan(_987) ? 1.0 : min(_987, 1.0));
        _2744 = (_2960 * _2951) + _2177;
        _2746 = (_2960 * _2953) + _2179;
        _2748 = (_2960 * _2955) + _2181;
        _2750 = ((_2945 * _971) * _2960) + _2525;
        _2752 = ((_2947 * _973) * _2960) + _2527;
        _2754 = ((_2949 * _974) * _2960) + _2529;
    }
    else
    {
        _2744 = _2177;
        _2746 = _2179;
        _2748 = _2181;
        _2750 = _2525;
        _2752 = _2527;
        _2754 = _2529;
    }
    float _4641 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4652 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4663 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    uint _2774 = _246 + 6u;
    float _2782 = _909 / cbSceneParam._m0[86u].x;
    float _2783 = _910 / cbSceneParam._m0[86u].y;
    vec4 _2797 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, (log2((isnan(cbSceneParam._m0[77u].w) ? _843 : (isnan(_843) ? cbSceneParam._m0[77u].w : min(_843, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2799 = _2797.x;
    float _2800 = _2797.y;
    float _2801 = _2797.z;
    float _2802 = _2797.w;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_843 > cbSceneParam._m0[78u].w)
    {
        float _2857 = isnan(_843) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _843 : min(cbSceneParam._m0[80u].w, _843));
        float _2858 = _2857 / _843;
        float _2869 = _2858 * _894;
        float _2870 = _895 * _2858;
        float _2871 = (-0.0) - _2870;
        float _2873 = _2858 * _896;
        float _2875 = (cbSceneParam._m0[77u].w * _2871) / _2857;
        float _2876 = _2875 + cbSceneParam._m0[79u].w;
        float _2877 = cbSceneParam._m0[79u].w - _2870;
        float _2883 = sqrt(((_2869 * _2869) + (_2870 * _2870)) + (_2873 * _2873));
        float _2886 = (1.0 - (cbSceneParam._m0[77u].w / _2857)) * _2883;
        float _2891 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2893 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3046;
        if (abs((_2871 - _2875) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3046 = ((((_2876 > 0.0) ? exp2(_2891 * _2876) : (2.0 - exp2(_2893 * _2876))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2886;
        }
        else
        {
            float _3006 = 1.0 / cbSceneParam._m0[80u].x;
            float _3007 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : max(_2876, _2877));
            float _3008 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : min(_2876, _2877));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            float _3018 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : min(_3008, 0.0));
            _3046 = ((abs(_2883 / _2871) * cbSceneParam._m0[80u].y) * ((((_3017 - _3018) * 2.0) - ((exp2(_2891 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0)))) - exp2(_2891 * (isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))))) * _3006)) - ((exp2(_2893 * _3017) - exp2(_2893 * _3018)) * _3006))) + (_2886 * cbSceneParam._m0[80u].z);
        }
        vec4 _3048 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, 1.0), 0.0);
        float _3057 = exp2((_3046 * (-1.44269502162933349609375)) * (1.0 - _3048.w));
        float _3058 = log2(_3057);
        float _3074 = log2(_2802);
        _2895 = (exp2(_3074 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].x)) * _3048.x) / cbSceneParam._m0[78u].x)) + _2799;
        _2897 = (exp2(_3074 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].y)) * _3048.y) / cbSceneParam._m0[78u].y)) + _2800;
        _2899 = (exp2(_3074 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].z)) * _3048.z) / cbSceneParam._m0[78u].z)) + _2801;
        _2901 = _3057 * _2802;
    }
    else
    {
        _2895 = _2799;
        _2897 = _2800;
        _2899 = _2801;
        _2901 = _2802;
    }
    float _2913 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2914 = _2913 == 3.0;
    float _2915 = log2(_2901);
    float _2922 = exp2(_2915 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2744 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _987))) + ((_2750 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _2923 = exp2(_2915 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2746 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _987))) + ((_2752 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _2924 = exp2(_2915 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2748 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _987))) + ((_2754 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1794)) * cbPerFrame._m0[3u].x));
    float _2933 = (_2913 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2933 * (_2914 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2895)));
    SV_Target.y = _2933 * (_2914 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2897)));
    SV_Target.z = _2933 * (_2914 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2899)));
    SV_Target.w = cbInstanceData._m0[_2774].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2774].w;
}


