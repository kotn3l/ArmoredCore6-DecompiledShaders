#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1606;
float _4008;
float _4009;
float _4010;
float _4011;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4020 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4031 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4042 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    uint _292 = uint(roundEven(NORMAL.w)) * 13u;
    uint _297 = _292 + 1u;
    uint _301 = _292 + 2u;
    float _310 = sqrt(((cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x)) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x));
    float _311 = _310 * TEXCOORD.z;
    float _312 = _310 * TEXCOORD.w;
    vec4 _325 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _311) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _312) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _379 = _374.x * cbMtdParam._m0[11u].x;
    float _380 = _374.y * cbMtdParam._m0[11u].y;
    float _381 = _374.z * cbMtdParam._m0[11u].z;
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _311) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _312) + cbTextureTilingScale._m0[5u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _419.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4053 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _493 = (_486 * ((_400.x * cbMtdParam._m0[12u].x) - _379)) + _379;
    float _494 = (_486 * ((_400.y * cbMtdParam._m0[12u].y) - _380)) + _380;
    float _495 = (_486 * ((_400.z * cbMtdParam._m0[12u].z) - _381)) + _381;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _311) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _312) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _419.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4064 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _566 = (_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493;
    float _567 = (_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494;
    float _568 = (_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _311) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _312) + cbTextureTilingScale._m0[24u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _606 = _604.x;
    float _616 = dot(vec4(_606, _604.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _628 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _419.z) * 2.0) - ((((_606 - _616) * cbMtdParam._m0[23u].w) + _616) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4075 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _639 = (_348.x * cbMtdParam._m0[9u].x) * ((_629 * ((_587.x * cbMtdParam._m0[14u].x) - _566)) + _566);
    float _640 = (_348.y * cbMtdParam._m0[9u].y) * ((_629 * ((_587.y * cbMtdParam._m0[14u].y) - _567)) + _567);
    float _641 = (_348.z * cbMtdParam._m0[9u].z) * ((_629 * ((_587.z * cbMtdParam._m0[14u].z) - _568)) + _568);
    float _645 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _325.x) * _639;
    float _648 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _325.y) * _640;
    float _651 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _325.z) * _641;
    float _659 = (((_639 - _645) * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) + _645) * 4.55000019073486328125;
    float _661 = (((_640 - _648) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) + _648) * 4.55000019073486328125;
    float _663 = (((_641 - _651) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) + _651) * 4.55000019073486328125;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _311) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _312) + cbTextureTilingScale._m0[20u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _311) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _312) + cbTextureTilingScale._m0[4u].w));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = _720.x;
    float _723 = _720.y;
    float _724 = _720.z;
    float _731 = ((_703.x - _722) * _486) + _722;
    float _732 = ((_703.y - _723) * _486) + _723;
    float _733 = ((_703.z - _724) * _486) + _724;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _311) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _312) + cbTextureTilingScale._m0[2u].w));
    float _756 = ((_745.x - _731) * _559) + _731;
    float _757 = ((_745.y - _732) * _559) + _732;
    float _758 = ((_745.z - _733) * _559) + _733;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _311) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _312) + cbTextureTilingScale._m0[23u].w));
    float _783 = ((_770.z - _758) * _629) + _758;
    float _786 = ((((_770.x - _756) * _629) + _756) * 2.0) + (-1.0);
    float _787 = ((((_770.y - _757) * _629) + _757) * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _4086 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))));
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _832 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _311) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _312) + cbTextureTilingScale._m0[11u].w));
    float _834 = _832.x;
    float _835 = 1.0 - _834;
    float _850 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_834 - _835) * cbMtdParam._m0[24u].z) + _835) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4097 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _851 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _858 = (_851 * (cbMtdParam._m0[17u].x - _659)) + _659;
    float _859 = (_851 * (cbMtdParam._m0[17u].y - _661)) + _661;
    float _860 = (_851 * (cbMtdParam._m0[17u].z - _663)) + _663;
    vec4 _886 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _888 = _886.x;
    float _905 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _311) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _312) + cbTextureTilingScale._m0[9u].w)).x - _888) * _486) + _888;
    float _922 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _311) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _312) + cbTextureTilingScale._m0[21u].w)).x - _905) * _559) + _905;
    float _940 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _311) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _312) + cbTextureTilingScale._m0[10u].w)).x - _922) * _629) + _922;
    float _944 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _940) * cbMtdParam._m0[19u].z) + _940;
    float _946 = _944 - (_944 * _851);
    float _951 = (((_680.z - _783) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _783;
    float _955 = ((_807.z - _951) * cbMtdParam._m0[19u].w) + _951;
    vec4 _968 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _311) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _312) + cbTextureTilingScale._m0[15u].w));
    float _975 = (_968.x * 2.0) + (-1.0);
    float _976 = (_968.y * 2.0) + (-1.0);
    float _977 = dot(vec2(_975, _976), vec2(_975, _976));
    float _4108 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _985 = (_851 * (_968.z - _955)) + _955;
    float _994 = (_786 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_680.x * 2.0) + (-1.0)))) + (((_807.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _995 = (_787 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_680.y * 2.0) + (-1.0)))) + (((_807.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1007 = (((_975 - _994) + (cbMtdParam._m0[21u].x * _994)) * _851) + _994;
    float _1008 = (((_976 - _995) + (cbMtdParam._m0[21u].x * _995)) * _851) + _995;
    float _1009 = (_851 * (sqrt(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) - _793)) + _793;
    float _1013 = cbMtdParam._m0[22u].x + _807.w;
    float _1016 = fma(_1009, _258 * NORMAL.x, fma(_1008, _265 * TANGENT.x, (_251 * _243) * _1007));
    float _1019 = fma(_1009, _258 * NORMAL.y, fma(_1008, _265 * TANGENT.y, (_251 * _244) * _1007));
    float _1022 = fma(_1009, _258 * NORMAL.z, fma(_1008, _265 * TANGENT.z, (_251 * _245) * _1007));
    float _1026 = inversesqrt(dot(vec3(_1016, _1019, _1022), vec3(_1016, _1019, _1022)));
    float _1027 = _1026 * _1016;
    float _1028 = _1026 * _1019;
    float _1029 = _1026 * _1022;
    float _4119 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _1030 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4141 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4152 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4163 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4174 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _1035 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _1049 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1099 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1089);
    float _1100 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1089);
    float _1101 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1089);
    float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
    float _1106 = _1099 * _1105;
    float _1107 = _1100 * _1105;
    float _1108 = _1101 * _1105;
    vec4 _1113 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1115 = _1113.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1287 = sqrt(((_1099 * _1099) + (_1100 * _1100)) + (_1101 * _1101));
        float _1293 = (cbMatDynParam._m0[5u].x * _1287) + cbMatDynParam._m0[5u].y;
        float _4185 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1298 = (cbMatDynParam._m0[5u].z * _1287) + cbMatDynParam._m0[5u].w;
        float _4196 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) - _1294)) + _1294) < ((_1115 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1126 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1127 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1145 = fma(_1029, cbSceneParam._m0[5u].z, fma(_1028, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1027));
    float _1148 = fma(_1029, cbSceneParam._m0[6u].z, fma(_1028, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1027));
    float _1151 = fma(_1029, cbSceneParam._m0[7u].z, fma(_1028, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1027));
    uint _1164 = _292 + 9u;
    uint _1165 = _1164 + uint(cbMatDynParam._m0[0u].w);
    float _1171 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * cbInstanceData._m0[_1165].x;
    float _1172 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_1165].y;
    float _1173 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_1165].z;
    float _4207 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1174 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1175 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1176 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _1177 = 1.0 - _1035;
    float _1178 = _1174 * _1177;
    float _1179 = _1175 * _1177;
    float _1180 = _1176 * _1177;
    float _1185 = (_1174 + (-0.039999999105930328369140625)) * _1035;
    float _1186 = (_1175 + (-0.039999999105930328369140625)) * _1035;
    float _1187 = (_1176 + (-0.039999999105930328369140625)) * _1035;
    float _1188 = _1185 + 0.039999999105930328369140625;
    float _1190 = _1186 + 0.039999999105930328369140625;
    float _1191 = _1187 + 0.039999999105930328369140625;
    vec4 _1200 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1126, cbSceneParam._m0[86u].y * _1127));
    float _1204 = ((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * TEXCOORD_5.w) * _1200.x;
    float _1205 = dot(vec3(_1027, _1028, _1029), vec3(_1106, _1107, _1108));
    float _1208 = _1205 * 2.0;
    float _1212 = (_1208 * _1027) - _1106;
    float _1213 = (_1208 * _1028) - _1107;
    float _1214 = (_1208 * _1029) - _1108;
    float _1218 = abs(dot(vec3(_1106, _1107, _1108), vec3(_1027, _1028, _1029)));
    float _4240 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1220 = sqrt(_1030);
    float _1233 = exp2((_1220 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1220 * 3.0));
    float _1239 = (1.0 - _1233) * ((_1220 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1240 = _1233 * _1220;
    float _1268 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1272 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1276 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1605;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1330 = fma(_1276, cbModelParam._m0[26u].z, fma(_1272, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1268));
        float _1334 = fma(_1276, cbModelParam._m0[27u].z, fma(_1272, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1268));
        float _1338 = fma(_1276, cbModelParam._m0[28u].z, fma(_1272, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1268));
        float _1363 = _1268 + _1027;
        float _1364 = _1272 + _1028;
        float _1365 = _1276 + _1029;
        float _1375 = fma(_1365, cbModelParam._m0[26u].z, fma(_1364, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1363)) - _1330;
        float _1376 = fma(_1365, cbModelParam._m0[27u].z, fma(_1364, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1363)) - _1334;
        float _1377 = fma(_1365, cbModelParam._m0[28u].z, fma(_1364, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1363)) - _1338;
        float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
        float _1394 = ((_1381 * _1375) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1330 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1381 * _1376) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1334 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1381 * _1377) / cbModelParam._m0[34u].z) + ((((((_1338 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1394, _1395, _1396), 0.0);
        float _1433 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1399.x + (-0.5));
        float _1435 = _1433 * (_1399.y + (-0.5));
        float _1436 = _1433 * (_1399.z + (-0.5));
        float _1443 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1406.x + (-0.5));
        float _1445 = _1443 * (_1406.y + (-0.5));
        float _1446 = _1443 * (_1406.z + (-0.5));
        float _1453 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1413.x + (-0.5));
        float _1455 = _1453 * (_1413.y + (-0.5));
        float _1456 = _1453 * (_1413.z + (-0.5));
        float _1463 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1420.x + (-0.5));
        float _1465 = _1463 * (_1420.y + (-0.5));
        float _1466 = _1463 * (_1420.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1487 = (dot(vec3(_1027, _1028, _1029), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1497 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4288 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1499 + 1.0))) + _1504) * _1467;
        float _1514 = _1435 * 0.5;
        float _1515 = _1445 * 0.5;
        float _1516 = _1455 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_1027, _1028, _1029), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4321 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1541 + 1.0))) + _1546) * _1468;
        float _1556 = _1436 * 0.5;
        float _1557 = _1446 * 0.5;
        float _1558 = _1456 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_1027, _1028, _1029), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4354 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1583 + 1.0))) + _1588) * _1469;
        _1605 = _1436;
        _1607 = _1435;
        _1608 = _1434;
        _1609 = _1446;
        _1610 = _1445;
        _1611 = _1444;
        _1612 = _1456;
        _1613 = _1455;
        _1614 = _1454;
        _1615 = _1469;
        _1616 = _1468;
        _1617 = _1467;
        _1618 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1619 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1620 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    }
    else
    {
        _1605 = _1606;
        _1607 = _1606;
        _1608 = _1606;
        _1609 = _1606;
        _1610 = _1606;
        _1611 = _1606;
        _1612 = _1606;
        _1613 = _1606;
        _1614 = _1606;
        _1615 = _1606;
        _1616 = _1606;
        _1617 = _1606;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1646 = fma(_1276, cbModelParam._m0[30u].z, fma(_1272, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1268));
        float _1650 = fma(_1276, cbModelParam._m0[31u].z, fma(_1272, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1268));
        float _1654 = fma(_1276, cbModelParam._m0[32u].z, fma(_1272, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1268));
        float _1677 = _1268 + _1027;
        float _1678 = _1272 + _1028;
        float _1679 = _1276 + _1029;
        float _1689 = fma(_1679, cbModelParam._m0[30u].z, fma(_1678, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1677)) - _1646;
        float _1690 = fma(_1679, cbModelParam._m0[31u].z, fma(_1678, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1677)) - _1650;
        float _1691 = fma(_1679, cbModelParam._m0[32u].z, fma(_1678, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1677)) - _1654;
        float _1695 = inversesqrt(dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691)));
        float _1708 = ((_1695 * _1689) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1646 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1709 = ((_1695 * _1690) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1650 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1710 = ((_1695 * _1691) / cbModelParam._m0[35u].z) + ((((((_1654 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1712 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1708, _1709, _1710), 0.0);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1708, _1709, _1710), 0.0);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1708, _1709, _1710), 0.0);
        vec4 _1733 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1708, _1709, _1710), 0.0);
        float _1745 = exp2((_1712.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = _1745 * (_1712.x + (-0.5));
        float _1747 = _1745 * (_1712.y + (-0.5));
        float _1748 = _1745 * (_1712.z + (-0.5));
        float _1755 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1756 = _1755 * (_1719.x + (-0.5));
        float _1757 = _1755 * (_1719.y + (-0.5));
        float _1758 = _1755 * (_1719.z + (-0.5));
        float _1765 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1766 = _1765 * (_1726.x + (-0.5));
        float _1767 = _1765 * (_1726.y + (-0.5));
        float _1768 = _1765 * (_1726.z + (-0.5));
        float _1775 = exp2((_1733.w + (-0.5)) * 20.0) * 2.0;
        float _1776 = _1775 * (_1733.x + (-0.5));
        float _1777 = _1775 * (_1733.y + (-0.5));
        float _1778 = _1775 * (_1733.z + (-0.5));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1781 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1782 = _1746 * 0.5;
        float _1783 = _1756 * 0.5;
        float _1784 = _1766 * 0.5;
        float _1785 = dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784));
        float _1790 = (_1785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1785);
        float _1798 = (dot(vec3(_1027, _1028, _1029), vec3(_1790 * _1782, _1790 * _1783, _1790 * _1784)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1807 = sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1809 = _1808 * 2.0;
        float _1813 = (1.0 - _1808) / (_1808 + 1.0);
        float _4417 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1823 = ((((1.0 - _1814) * (_1809 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1809 + 1.0))) + _1814) * _1779;
        float _1824 = _1747 * 0.5;
        float _1825 = _1757 * 0.5;
        float _1826 = _1767 * 0.5;
        float _1827 = dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826));
        float _1832 = (_1827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1827);
        float _1840 = (dot(vec3(_1027, _1028, _1029), vec3(_1832 * _1824, _1832 * _1825, _1832 * _1826)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826)) / (_1780 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1851 = _1850 * 2.0;
        float _1855 = (1.0 - _1850) / (_1850 + 1.0);
        float _4450 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1865 = ((((1.0 - _1856) * (_1851 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1851 + 1.0))) + _1856) * _1780;
        float _1866 = _1748 * 0.5;
        float _1867 = _1758 * 0.5;
        float _1868 = _1768 * 0.5;
        float _1869 = dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868));
        float _1874 = (_1869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1869);
        float _1882 = (dot(vec3(_1027, _1028, _1029), vec3(_1874 * _1866, _1874 * _1867, _1874 * _1868)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1891 = sqrt(((_1867 * _1867) + (_1866 * _1866)) + (_1868 * _1868)) / (_1781 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1893 = _1892 * 2.0;
        float _1897 = (1.0 - _1892) / (_1892 + 1.0);
        float _4483 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1907 = ((((1.0 - _1898) * (_1893 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1893 + 1.0))) + _1898) * _1781;
        _1915 = _1748;
        _1916 = _1747;
        _1917 = _1746;
        _1918 = _1758;
        _1919 = _1757;
        _1920 = _1756;
        _1921 = _1768;
        _1922 = _1767;
        _1923 = _1766;
        _1924 = _1781;
        _1925 = _1780;
        _1926 = _1779;
        _1927 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)));
        _1928 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
        _1929 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)));
    }
    else
    {
        _1915 = _1606;
        _1916 = _1606;
        _1917 = _1606;
        _1918 = _1606;
        _1919 = _1606;
        _1920 = _1606;
        _1921 = _1606;
        _1922 = _1606;
        _1923 = _1606;
        _1924 = _1606;
        _1925 = _1606;
        _1926 = _1606;
        _1927 = 0.0;
        _1928 = 0.0;
        _1929 = 0.0;
    }
    float _1939 = (cbModelParam._m0[1u].x * (_1927 - _1618)) + _1618;
    float _1940 = (cbModelParam._m0[1u].x * (_1928 - _1619)) + _1619;
    float _1941 = (cbModelParam._m0[1u].x * (_1929 - _1620)) + _1620;
    float _1962 = fma(_1941, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1965 = fma(_1941, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1968 = fma(_1941, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1939));
    float _1983 = _1212 * 0.5;
    float _1984 = _1213 * 0.5;
    float _1985 = _1214 * 0.5;
    float _1986 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1917, _1920, _1923, _1926));
    float _1989 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1916, _1919, _1922, _1925));
    float _1992 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1915, _1918, _1921, _1924));
    float _2026;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1999 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1605, _1609, _1612, _1615));
        float _2003 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1607, _1610, _1613, _1616));
        float _2007 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1608, _1611, _1614, _1617));
        float _2014 = dot(vec4(cbModelParam._m0[39u]), vec4(_1983, _1984, _1985, 1.0));
        _2026 = dot(vec3(isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)), isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)), isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2014) ? 0.0 : (isnan(0.0) ? _2014 : max(0.0, _2014))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2026 = 1.0;
    }
    float _2037;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2028 = dot(vec4(cbModelParam._m0[40u]), vec4(_1983, _1984, _1985, 1.0));
        _2037 = dot(vec3(isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0)), isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0)), isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2028) ? 0.0 : (isnan(0.0) ? _2028 : max(0.0, _2028))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2037 = 1.0;
    }
    float _2041 = (_2037 * cbModelParam._m0[1u].x) + (_2026 * (1.0 - cbModelParam._m0[1u].x));
    float _2051 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1030);
    float _2052 = isnan(_2051) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2051 : min(cbModelParam._m0[25u].z, _2051));
    float _2132;
    float _2134;
    float _2136;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2099 = fma(_1276, cbModelParam._m0[13u].z, fma(_1272, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1268)) + cbModelParam._m0[13u].w;
        float _2103 = fma(_1276, cbModelParam._m0[14u].z, fma(_1272, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1268)) + cbModelParam._m0[14u].w;
        float _2107 = fma(_1276, cbModelParam._m0[15u].z, fma(_1272, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1268)) + cbModelParam._m0[15u].w;
        float _2110 = fma(_1214, cbModelParam._m0[13u].z, fma(_1213, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1212));
        float _2113 = fma(_1214, cbModelParam._m0[14u].z, fma(_1213, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1212));
        float _2116 = fma(_1214, cbModelParam._m0[15u].z, fma(_1213, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1212));
        float _2144;
        if (_2110 > 0.0)
        {
            _2144 = abs((1.0 - _2099) / _2110);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2099 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2144 = frontier_phi_17_15_ladder;
        }
        float _2368;
        if (_2113 > 0.0)
        {
            _2368 = abs((1.0 - _2103) / _2113);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2103 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2368 = frontier_phi_26_22_ladder;
        }
        float _2625;
        if (_2116 > 0.0)
        {
            _2625 = abs((1.0 - _2107) / _2116);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2107 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2625 = frontier_phi_38_33_ladder;
        }
        float _2627 = isnan(_2368) ? _2144 : (isnan(_2144) ? _2368 : min(_2144, _2368));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _2110) + _2099;
        float _2633 = (_2628 * _2113) + _2103;
        float _2634 = (_2628 * _2116) + _2107;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2635;
        float _2639 = _2635 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 > _2639) || ((_2633 < _2637) || ((_2632 < _2637) || (_2632 > _2639))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2634, cbModelParam._m0[9u].z, fma(_2633, cbModelParam._m0[9u].y, _2632 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2634, cbModelParam._m0[10u].z, fma(_2633, cbModelParam._m0[10u].y, _2632 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2634, cbModelParam._m0[11u].z, fma(_2633, cbModelParam._m0[11u].y, _2632 * cbModelParam._m0[11u].x))), _2052);
            frontier_phi_16_38_ladder = _2762.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2762.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2762.x * cbModelParam._m0[1u].y;
        }
        _2132 = frontier_phi_16_38_ladder_2;
        _2134 = frontier_phi_16_38_ladder_1;
        _2136 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2120 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1212, _1213, _1214), _2052);
        _2132 = _2120.x * cbModelParam._m0[1u].y;
        _2134 = _2120.y * cbModelParam._m0[1u].y;
        _2136 = _2120.z * cbModelParam._m0[1u].y;
    }
    float _2140 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1030);
    float _2141 = isnan(_2140) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2140 : min(cbModelParam._m0[25u].w, _2140));
    float _2231;
    float _2233;
    float _2235;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2195 = fma(_1276, cbModelParam._m0[21u].z, fma(_1272, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1268)) + cbModelParam._m0[21u].w;
        float _2199 = fma(_1276, cbModelParam._m0[22u].z, fma(_1272, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1268)) + cbModelParam._m0[22u].w;
        float _2203 = fma(_1276, cbModelParam._m0[23u].z, fma(_1272, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1268)) + cbModelParam._m0[23u].w;
        float _2206 = fma(_1214, cbModelParam._m0[21u].z, fma(_1213, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1212));
        float _2209 = fma(_1214, cbModelParam._m0[22u].z, fma(_1213, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1212));
        float _2212 = fma(_1214, cbModelParam._m0[23u].z, fma(_1213, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1212));
        float _2373;
        if (_2206 > 0.0)
        {
            _2373 = abs((1.0 - _2195) / _2206);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2195 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2373 = frontier_phi_28_24_ladder;
        }
        float _2652;
        if (_2209 > 0.0)
        {
            _2652 = abs((1.0 - _2199) / _2209);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2199 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2652 = frontier_phi_40_35_ladder;
        }
        float _2865;
        if (_2212 > 0.0)
        {
            _2865 = abs((1.0 - _2203) / _2212);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2212 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2203 + 1.0) / _2212);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2865 = frontier_phi_49_46_ladder;
        }
        float _2867 = isnan(_2652) ? _2373 : (isnan(_2373) ? _2652 : min(_2373, _2652));
        float _2868 = isnan(_2865) ? _2867 : (isnan(_2867) ? _2865 : min(_2867, _2865));
        float _2872 = (_2868 * _2206) + _2195;
        float _2873 = (_2868 * _2209) + _2199;
        float _2874 = (_2868 * _2212) + _2203;
        float _2875 = _2868 * 9.9999997473787516355514526367188e-05;
        float _2876 = (-1.0) - _2875;
        float _2878 = _2875 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2874 > _2878) || ((_2874 < _2876) || ((_2873 > _2878) || ((_2873 < _2876) || ((_2872 < _2876) || (_2872 > _2878))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2874, cbModelParam._m0[17u].z, fma(_2873, cbModelParam._m0[17u].y, _2872 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2874, cbModelParam._m0[18u].z, fma(_2873, cbModelParam._m0[18u].y, _2872 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2874, cbModelParam._m0[19u].z, fma(_2873, cbModelParam._m0[19u].y, _2872 * cbModelParam._m0[19u].x))), _2141);
            frontier_phi_25_49_ladder = _3073.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3073.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3073.x * cbModelParam._m0[1u].z;
        }
        _2231 = frontier_phi_25_49_ladder_2;
        _2233 = frontier_phi_25_49_ladder_1;
        _2235 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2215 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1212, _1213, _1214), _2141);
        _2231 = _2215.x * cbModelParam._m0[1u].z;
        _2233 = _2215.y * cbModelParam._m0[1u].z;
        _2235 = _2215.z * cbModelParam._m0[1u].z;
    }
    float _2248 = (((_1239 * _1188) + _1240) * _1204) * ((cbModelParam._m0[1u].w * (_2231 - _2132)) + _2132);
    float _2250 = (((_1239 * _1190) + _1240) * _1204) * ((cbModelParam._m0[1u].w * (_2233 - _2134)) + _2134);
    float _2252 = (((_1239 * _1191) + _1240) * _1204) * ((cbModelParam._m0[1u].w * (_2235 - _2136)) + _2136);
    float _2255 = fma(_2252, cbSceneParam._m0[89u].z, fma(_2250, cbSceneParam._m0[89u].y, _2248 * cbSceneParam._m0[89u].x));
    float _2258 = fma(_2252, cbSceneParam._m0[90u].z, fma(_2250, cbSceneParam._m0[90u].y, _2248 * cbSceneParam._m0[90u].x));
    float _2261 = fma(_2252, cbSceneParam._m0[91u].z, fma(_2250, cbSceneParam._m0[91u].y, _2248 * cbSceneParam._m0[91u].x));
    vec4 _2269 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1126, _1127));
    float _2271 = _2269.w;
    float _2283 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2271);
    float _2284 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2271);
    float _2285 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2271);
    uvec4 _2289 = floatBitsToUint(cbInstanceData._m0[_292 + 5u]);
    uint _2291 = _2289.x * 14u;
    uint _2292 = _2291 + 13u;
    float _2299 = _1204 + (-1.0);
    float _2304 = (cbLight._m0[_2292].x * _2299) + 1.0;
    float _2305 = (cbLight._m0[_2292].y * _2299) + 1.0;
    float _2306 = (cbLight._m0[_2292].z * _2299) + 1.0;
    float _2307 = (cbLight._m0[_2292].w * _2299) + 1.0;
    uint _2308 = _2291 + 5u;
    float _2314 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2318 = _2291 + 4u;
    float _2327 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2331 = _2291 | 1u;
    float _2342 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_1027, _1028, _1029));
    float _2345 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_1027, _1028, _1029));
    float _4619 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _4630 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2350 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * 0.3183098733425140380859375;
    float _2352 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * 0.3183098733425140380859375;
    float _2359 = ((cbLight._m0[_2308].x * _2314) * _2352) + (((cbLight._m0[_2318].x * _2283) * _2327) * _2350);
    float _2360 = ((_2314 * cbLight._m0[_2308].y) * _2352) + (((cbLight._m0[_2318].y * _2284) * _2327) * _2350);
    float _2361 = ((_2314 * cbLight._m0[_2308].z) * _2352) + (((cbLight._m0[_2318].z * _2285) * _2327) * _2350);
    uvec4 _2365 = floatBitsToUint(cbLight._m0[_2291 + 12u]);
    bool _2367 = _2365.x == 0u;
    float _2378;
    float _2380;
    float _2382;
    if (_2367)
    {
        _2378 = _2359;
        _2380 = _2360;
        _2382 = _2361;
    }
    else
    {
        uint _2386 = _2291 + 6u;
        float _2402 = (dot(vec3(cbLight._m0[_2291 + 2u].xyz), vec3(_1027, _1028, _1029)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4641 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2405 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2378 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2359;
        _2380 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2360;
        _2382 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2361;
    }
    bool _2385 = _2365.y == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2385)
    {
        _2423 = _2378;
        _2425 = _2380;
        _2427 = _2382;
    }
    else
    {
        uint _2596 = _2291 + 7u;
        float _2612 = (dot(vec3(cbLight._m0[_2291 + 3u].xyz), vec3(_1027, _1028, _1029)) * 0.5) + 0.5;
        float _2613 = _2612 * _2612;
        float _4657 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2614 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2615 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2423 = (((cbLight._m0[_2596].x * 0.3183098733425140380859375) * _2614) * _2615) + _2378;
        _2425 = (((cbLight._m0[_2596].y * 0.3183098733425140380859375) * _2614) * _2615) + _2380;
        _2427 = (((cbLight._m0[_2596].z * 0.3183098733425140380859375) * _2614) * _2615) + _2382;
    }
    uint _2430 = _2291 + 8u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _1030) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2291].x + _1106;
    float _2446 = cbLight._m0[_2291].y + _1107;
    float _2447 = cbLight._m0[_2291].z + _1108;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2291].xyz));
    float _4673 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _4684 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _2459 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _2460 = dot(vec3(_1027, _1028, _1029), vec3(_2452, _2453, _2454));
    float _4695 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2452, _2453, _2454));
    float _4706 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2444 * _2444;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
    float _2481 = 0.959999978542327880859375 - _1185;
    float _2483 = 0.959999978542327880859375 - _1186;
    float _2484 = 0.959999978542327880859375 - _1187;
    float _2491 = 1.0 - _2444;
    float _2502 = (0.5 / (((_2459 * ((_2458 * _2491) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2491) + _2444) * _2458))) * _2458;
    float _4717 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    uint _2518 = _2291 + 9u;
    float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _1030) * 0.949999988079071044921875);
    float _2530 = _2529 * _2529;
    float _2531 = cbLight._m0[_2331].x + _1106;
    float _2532 = cbLight._m0[_2331].y + _1107;
    float _2533 = cbLight._m0[_2331].z + _1108;
    float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
    float _2538 = _2537 * _2531;
    float _2539 = _2537 * _2532;
    float _2540 = _2537 * _2533;
    float _2541 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2331].xyz));
    float _4728 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2545 = dot(vec3(_1027, _1028, _1029), vec3(_2538, _2539, _2540));
    float _4739 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2549 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2538, _2539, _2540));
    float _4750 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2553 = _2530 * _2530;
    float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
    float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0);
    float _2571 = 1.0 - _2530;
    float _2581 = (0.5 / (((_2459 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2571) + _2530) * _2544))) * _2544;
    float _4761 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2583 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
    float _2593 = (((((_2564 * _2481) + _1188) * cbLight._m0[_2518].x) * _2583) * _2314) + ((((cbLight._m0[_2430].x * _2283) * ((_2480 * _2481) + _1188)) * _2504) * _2327);
    float _2594 = (((((_2564 * _2483) + _1190) * cbLight._m0[_2518].y) * _2583) * _2314) + ((((cbLight._m0[_2430].y * _2284) * ((_2480 * _2483) + _1190)) * _2504) * _2327);
    float _2595 = (((((_2564 * _2484) + _1191) * cbLight._m0[_2518].z) * _2583) * _2314) + ((((cbLight._m0[_2430].z * _2285) * ((_2480 * _2484) + _1191)) * _2504) * _2327);
    float _2657;
    float _2659;
    float _2661;
    if (_2367)
    {
        _2657 = _2593;
        _2659 = _2594;
        _2661 = _2595;
    }
    else
    {
        uint _2663 = _2291 + 2u;
        uint _2667 = _2291 + 10u;
        float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2663].w)) * _1030) * 0.949999988079071044921875);
        float _2682 = _2681 * _2681;
        float _2683 = cbLight._m0[_2663].x + _1106;
        float _2684 = cbLight._m0[_2663].y + _1107;
        float _2685 = cbLight._m0[_2663].z + _1108;
        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
        float _2690 = _2689 * _2683;
        float _2691 = _2689 * _2684;
        float _2692 = _2689 * _2685;
        float _2693 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2663].xyz));
        float _4772 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _2697 = dot(vec3(_1027, _1028, _1029), vec3(_2690, _2691, _2692));
        float _4783 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2701 = dot(vec3(cbLight._m0[_2663].xyz), vec3(_2690, _2691, _2692));
        float _4794 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2705 = _2682 * _2682;
        float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
        float _2716 = exp2(log2(1.0 - (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) * 5.0);
        float _2723 = 1.0 - _2682;
        float _2733 = (0.5 / (((_2459 * ((_2696 * _2723) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2723) + _2682) * _2696))) * _2696;
        float _4805 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2657 = (((((_2716 * _2481) + _1188) * cbLight._m0[_2667].x) * _2735) * _2736) + _2593;
        _2659 = (((((_2716 * _2483) + _1190) * cbLight._m0[_2667].y) * _2735) * _2736) + _2594;
        _2661 = (((((_2716 * _2484) + _1191) * cbLight._m0[_2667].z) * _2735) * _2736) + _2595;
    }
    float _2771;
    float _2773;
    float _2775;
    if (_2385)
    {
        _2771 = _2657;
        _2773 = _2659;
        _2775 = _2661;
    }
    else
    {
        uint _2782 = _2291 + 3u;
        uint _2786 = _2291 + 11u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _1030) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _1106;
        float _2803 = cbLight._m0[_2782].y + _1107;
        float _2804 = cbLight._m0[_2782].z + _1108;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_1027, _1028, _1029), vec3(cbLight._m0[_2782].xyz));
        float _4821 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2816 = dot(vec3(_1027, _1028, _1029), vec3(_2809, _2810, _2811));
        float _4832 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4843 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2835 = exp2(log2(1.0 - (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) * 5.0);
        float _2842 = 1.0 - _2801;
        float _2852 = (0.5 / (((_2459 * ((_2815 * _2842) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2842) + _2801) * _2815))) * _2815;
        float _4854 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2854 = (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2855 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2771 = (((((_2835 * _2481) + _1188) * cbLight._m0[_2786].x) * _2854) * _2855) + _2657;
        _2773 = (((((_2835 * _2483) + _1190) * cbLight._m0[_2786].y) * _2854) * _2855) + _2659;
        _2775 = (((((_2835 * _2484) + _1191) * cbLight._m0[_2786].z) * _2854) * _2855) + _2661;
    }
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_2289.y == 0u)
    {
        float _2930 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2931 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2930;
        float _2932 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2930;
        float _2933 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2930;
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.x;
        uint _2957 = uint((float(_2945.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1127) / _2946))) + floor(float(uint(cbSceneParam._m0[85u].x * _1126) / _2946)));
        float _2967 = (log2(_2933 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2968 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        uint _2971 = uint(isnan(14.0) ? _2968 : (isnan(_2968) ? 14.0 : min(_2968, 14.0)));
        uvec4 _2976 = texelFetch(g_lightClusterGridBuffer, int(((_2971 << 2u) + (_2957 << 6u)) >> 2u));
        uint _2977 = _2976.x;
        uint _2978 = _2945.z;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((((1u << ((_2978 >> 4u) & 15u)) + 4294967295u) & _2977) == 0u) || ((_2978 & 240u) == 0u))
        {
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
            _3088 = 0.0;
        }
        else
        {
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3089;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            uint _3237 = 0u;
            uint _3246;
            bool _3247;
            for (;;)
            {
                _3246 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                _3247 = _3246 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3247)
                {
                    frontier_phi_66_pred = _3231;
                    frontier_phi_66_pred_1 = _3236;
                    frontier_phi_66_pred_2 = _3235;
                    frontier_phi_66_pred_3 = _3234;
                    frontier_phi_66_pred_4 = _3233;
                    frontier_phi_66_pred_5 = _3232;
                }
                else
                {
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    uint _3382;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3246;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    for (;;)
                    {
                        uint _3386 = uint(findLSB(_3382)) + (_3237 << 5u);
                        uint _3383 = (_3382 + 4294967295u) & _3382;
                        uint _3388 = _3386 * 48u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3408 = (_3386 * 48u) + 4u;
                        vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 3u)).x));
                        uint _3427 = (_3386 * 48u) + 8u;
                        vec3 _3438 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3427)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3427 + 2u)).x));
                        float _3442 = _3402.x - _2931;
                        float _3443 = _3402.y - _2932;
                        float _3444 = _3402.z - _2933;
                        float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                        float _3448 = inversesqrt(_3445);
                        float _3449 = _3448 * _3442;
                        float _3450 = _3448 * _3443;
                        float _3451 = _3448 * _3444;
                        float _3452 = dot(vec3(_1145, _1148, _1151), vec3(_3449, _3450, _3451));
                        float _3457 = 1.0 - (_3445 * _3402.w);
                        float _4880 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3458 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                        float _3459 = sqrt(_3445) * _3421.w;
                        float _3462 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                        float _3463 = _3462 * _3462;
                        float _3466 = ((1.0 - _3463) * _3452) + _3463;
                        float _3469 = _3459 * _3459;
                        float _3473 = ((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3458) / ((_3469 * 0.699999988079071044921875) + 1.0);
                        float _3477 = (-0.0) - _2931;
                        float _3478 = (-0.0) - _2932;
                        float _3479 = (-0.0) - _2933;
                        float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                        float _3484 = _3483 * _3477;
                        float _3485 = _3483 * _3478;
                        float _3486 = _3483 * _3479;
                        float _3494 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                        float _3495 = 1.0 - _1220;
                        float _3502 = sqrt(1.0 - ((1.0 - (_3495 * _3495)) * (1.0 - (_3494 * _3494))));
                        float _3503 = _3502 * _3502;
                        float _3504 = _3503 * _3503;
                        float _3505 = _3484 + _3449;
                        float _3506 = _3485 + _3450;
                        float _3507 = _3486 + _3451;
                        float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                        float _3515 = dot(vec3(_1145, _1148, _1151), vec3(_3484, _3485, _3486));
                        float _4896 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                        float _3519 = dot(vec3(_1145, _1148, _1151), vec3(_3511 * _3505, _3511 * _3506, _3511 * _3507));
                        float _4907 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3522 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3526 = ((_3522 * _3522) * (_3504 + (-1.0))) + 1.0;
                        float _3527 = _3462 * _3503;
                        float _3528 = _3527 * _3527;
                        float _3531 = ((1.0 - _3528) * _3452) + _3528;
                        float _4918 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3532 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3533 = 1.0 - _3503;
                        float _3543 = (0.5 / (((_3532 * ((_3518 * _3533) + _3503)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3503) * _3518))) * _3532;
                        float _4929 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3554 = (((_3504 * 3.1415927410125732421875) * (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0)))) / ((_3526 * _3526) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125))) * _3458;
                        _3306 = (_3473 * _3421.x) + _3379;
                        _3307 = (_3473 * _3421.y) + _3380;
                        _3308 = (_3473 * _3421.z) + _3381;
                        _3303 = (_3554 * _3438.x) + _3376;
                        _3304 = (_3554 * _3438.y) + _3377;
                        _3305 = (_3554 * _3438.z) + _3378;
                        if (_3383 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3383;
                        }
                    }
                    frontier_phi_66_pred = _3303;
                    frontier_phi_66_pred_1 = _3308;
                    frontier_phi_66_pred_2 = _3307;
                    frontier_phi_66_pred_3 = _3306;
                    frontier_phi_66_pred_4 = _3305;
                    frontier_phi_66_pred_5 = _3304;
                }
                _3079 = frontier_phi_66_pred;
                _3089 = frontier_phi_66_pred_1;
                _3087 = frontier_phi_66_pred_2;
                _3085 = frontier_phi_66_pred_3;
                _3083 = frontier_phi_66_pred_4;
                _3081 = frontier_phi_66_pred_5;
                uint _3238 = _3237 + 1u;
                if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3231 = _3079;
                    _3232 = _3081;
                    _3233 = _3083;
                    _3234 = _3085;
                    _3235 = _3087;
                    _3236 = _3089;
                    _3237 = _3238;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
            _3088 = _3089;
        }
        uvec4 _3092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3093 = _3092.z;
        uint _3095 = (_3093 >> 8u) & 15u;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        if (((4294967295u << _3095) & _2977) == 0u)
        {
            _3199 = _3078;
            _3201 = _3080;
            _3203 = _3082;
            _3205 = _3084;
            _3207 = _3086;
            _3209 = _3088;
        }
        else
        {
            float _3224 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
            float _3225 = _3224 * _2931;
            float _3226 = _3224 * _2932;
            float _3227 = _3224 * _2933;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3095 < ((_3093 >> 12u) & 15u))
            {
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3359 = _3078;
                float _3360 = _3080;
                float _3361 = _3082;
                float _3362 = _3084;
                float _3363 = _3086;
                float _3364 = _3088;
                uint _3365 = _3095;
                uint _3374;
                bool _3375;
                for (;;)
                {
                    _3374 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3365 << 2u)) >> 2u)).x;
                    _3375 = _3374 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3375)
                    {
                        frontier_phi_77_pred = _3364;
                        frontier_phi_77_pred_1 = _3363;
                        frontier_phi_77_pred_2 = _3362;
                        frontier_phi_77_pred_3 = _3361;
                        frontier_phi_77_pred_4 = _3360;
                        frontier_phi_77_pred_5 = _3359;
                    }
                    else
                    {
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3581 = _3359;
                        float _3582 = _3360;
                        float _3583 = _3361;
                        float _3584 = _3362;
                        float _3585 = _3363;
                        float _3586 = _3364;
                        uint _3587 = _3374;
                        uint _3588;
                        vec4 _3613;
                        float _3614;
                        vec4 _3629;
                        vec3 _3641;
                        vec4 _3656;
                        vec4 _3671;
                        float _3717;
                        bool _3718;
                        for (;;)
                        {
                            uint _3598 = ((_3365 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3587));
                            _3588 = (_3587 + 4294967295u) & _3587;
                            uint _3600 = _3598 * 40u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3614 = _3613.w;
                            uint _3616 = (_3598 * 40u) + 4u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3598 * 40u) + 8u;
                            _3641 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x));
                            uint _3643 = (_3598 * 40u) + 16u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3598 * 40u) + 20u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3598 * 40u) + 24u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3692 = (_3598 * 40u) + 28u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3717 = fma(_2933, _3705.z, fma(_2932, _3705.y, _3705.x * _2931)) + _3705.w;
                            _3718 = !((fma(_2933, _3686.z, fma(_2932, _3686.y, _3686.x * _2931)) + _3686.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3718)
                            {
                                float _3745 = _3613.x - _2931;
                                float _3746 = _3613.y - _2932;
                                float _3747 = _3613.z - _2933;
                                float _3748 = dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747));
                                float _3751 = inversesqrt(_3748);
                                float _3752 = _3751 * _3745;
                                float _3753 = _3751 * _3746;
                                float _3754 = _3751 * _3747;
                                float _3758 = 1.0 - (_3748 / (_3614 * _3614));
                                float _4940 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                                float _3763 = sqrt(_3748) * _3629.w;
                                float _3765 = 1.39999997615814208984375 / (_3763 + 1.39999997615814208984375);
                                float _3766 = _3765 * _3765;
                                float _3769 = ((1.0 - _3766) * dot(vec3(_3752, _3753, _3754), vec3(_1145, _1148, _1151))) + _3766;
                                float _3772 = _3763 * _3763;
                                float _3776 = (fma(_2933, _3656.z, fma(_2932, _3656.y, _3656.x * _2931)) + _3656.w) / _3717;
                                float _3777 = (fma(_2933, _3671.z, fma(_2932, _3671.y, _3671.x * _2931)) + _3671.w) / _3717;
                                float _3781 = 1.0 - dot(vec2(_3776, _3777), vec2(_3776, _3777));
                                float _4956 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3783 = _3782 * (((isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0))) * _3759) / ((_3772 * 0.699999988079071044921875) + 1.0));
                                float _3795 = exp2(log2(1.0 / ((_3772 * 3.5) + 5.0)) * 0.25);
                                float _3796 = 1.0 - _1220;
                                float _3803 = sqrt(1.0 - ((1.0 - (_3796 * _3796)) * (1.0 - (_3795 * _3795))));
                                float _3804 = _3803 * _3803;
                                float _3805 = _3804 * _3804;
                                float _3806 = _3752 - _3225;
                                float _3807 = _3753 - _3226;
                                float _3808 = _3754 - _3227;
                                float _3812 = inversesqrt(dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808)));
                                float _3816 = dot(vec3(_1145, _1148, _1151), vec3((-0.0) - _3225, (-0.0) - _3226, (-0.0) - _3227));
                                float _4967 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3820 = dot(vec3(_1145, _1148, _1151), vec3(_3812 * _3806, _3812 * _3807, _3812 * _3808));
                                float _4978 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3827 = ((_3823 * _3823) * (_3805 + (-1.0))) + 1.0;
                                float _3828 = _3765 * _3804;
                                float _3829 = _3828 * _3828;
                                float _3835 = ((1.0 - _3829) * dot(vec3(_1145, _1148, _1151), vec3(_3752, _3753, _3754))) + _3829;
                                float _4989 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3837 = 1.0 - _3804;
                                float _3847 = (0.5 / (((_3836 * ((_3819 * _3837) + _3804)) + 9.9999999392252902907785028219223e-09) + (((_3836 * _3837) + _3804) * _3819))) * _3836;
                                float _5000 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3857 = (_3782 * _3759) * (((_3805 * 3.1415927410125732421875) * (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0)))) / ((_3827 * _3827) * ((_3772 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3783 * _3629.y;
                                frontier_phi_83_pred_1 = _3783 * _3629.x;
                                frontier_phi_83_pred_2 = _3857 * _3641.z;
                                frontier_phi_83_pred_3 = _3857 * _3641.y;
                                frontier_phi_83_pred_4 = _3857 * _3641.x;
                                frontier_phi_83_pred_5 = _3783 * _3629.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3865 = frontier_phi_83_pred;
                            _3864 = frontier_phi_83_pred_1;
                            _3863 = frontier_phi_83_pred_2;
                            _3862 = frontier_phi_83_pred_3;
                            _3861 = frontier_phi_83_pred_4;
                            _3866 = frontier_phi_83_pred_5;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            if (_3588 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3588;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3573;
                        frontier_phi_77_pred_1 = _3572;
                        frontier_phi_77_pred_2 = _3571;
                        frontier_phi_77_pred_3 = _3570;
                        frontier_phi_77_pred_4 = _3569;
                        frontier_phi_77_pred_5 = _3568;
                    }
                    _3210 = frontier_phi_77_pred;
                    _3208 = frontier_phi_77_pred_1;
                    _3206 = frontier_phi_77_pred_2;
                    _3204 = frontier_phi_77_pred_3;
                    _3202 = frontier_phi_77_pred_4;
                    _3200 = frontier_phi_77_pred_5;
                    uint _3366 = _3365 + 1u;
                    if (_3366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3359 = _3200;
                        _3360 = _3202;
                        _3361 = _3204;
                        _3362 = _3206;
                        _3363 = _3208;
                        _3364 = _3210;
                        _3365 = _3366;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3204;
                frontier_phi_58_59_ladder_1 = _3210;
                frontier_phi_58_59_ladder_2 = _3208;
                frontier_phi_58_59_ladder_3 = _3206;
                frontier_phi_58_59_ladder_4 = _3202;
                frontier_phi_58_59_ladder_5 = _3200;
            }
            else
            {
                frontier_phi_58_59_ladder = _3082;
                frontier_phi_58_59_ladder_1 = _3088;
                frontier_phi_58_59_ladder_2 = _3086;
                frontier_phi_58_59_ladder_3 = _3084;
                frontier_phi_58_59_ladder_4 = _3080;
                frontier_phi_58_59_ladder_5 = _3078;
            }
            _3199 = frontier_phi_58_59_ladder_5;
            _3201 = frontier_phi_58_59_ladder_4;
            _3203 = frontier_phi_58_59_ladder;
            _3205 = frontier_phi_58_59_ladder_3;
            _3207 = frontier_phi_58_59_ladder_2;
            _3209 = frontier_phi_58_59_ladder_1;
        }
        float _3214 = isnan(1.0) ? _1204 : (isnan(_1204) ? 1.0 : min(_1204, 1.0));
        _2990 = (_3214 * _3205) + _2423;
        _2992 = (_3214 * _3207) + _2425;
        _2994 = (_3214 * _3209) + _2427;
        _2996 = ((_3199 * _1188) * _3214) + _2771;
        _2998 = ((_3201 * _1190) * _3214) + _2773;
        _3000 = ((_3203 * _1191) * _3214) + _2775;
    }
    else
    {
        _2990 = _2423;
        _2992 = _2425;
        _2994 = _2427;
        _2996 = _2771;
        _2998 = _2773;
        _3000 = _2775;
    }
    float _5016 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _5027 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _5038 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _3017 = ((isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0))) * (_2990 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1204))) + ((_2996 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _2041)) * cbPerFrame._m0[3u].x);
    float _3018 = ((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_2992 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1204))) + ((_2998 + ((isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))) * _2041)) * cbPerFrame._m0[3u].x);
    float _3019 = ((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_2994 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1204))) + ((_3000 + ((isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0))) * _2041)) * cbPerFrame._m0[3u].x);
    uint _3020 = _292 + 6u;
    float _3028 = _1126 / cbSceneParam._m0[86u].x;
    float _3029 = _1127 / cbSceneParam._m0[86u].y;
    vec4 _3043 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, (log2((isnan(cbSceneParam._m0[77u].w) ? _1049 : (isnan(_1049) ? cbSceneParam._m0[77u].w : min(_1049, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3045 = _3043.x;
    float _3046 = _3043.y;
    float _3047 = _3043.z;
    float _3048 = _3043.w;
    float _3141;
    float _3143;
    float _3145;
    float _3147;
    if (_1049 > cbSceneParam._m0[78u].w)
    {
        float _3103 = isnan(_1049) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1049 : min(cbSceneParam._m0[80u].w, _1049));
        float _3104 = _3103 / _1049;
        float _3115 = _3104 * _1099;
        float _3116 = _1100 * _3104;
        float _3117 = (-0.0) - _3116;
        float _3119 = _3104 * _1101;
        float _3121 = (cbSceneParam._m0[77u].w * _3117) / _3103;
        float _3122 = _3121 + cbSceneParam._m0[79u].w;
        float _3123 = cbSceneParam._m0[79u].w - _3116;
        float _3129 = sqrt(((_3115 * _3115) + (_3116 * _3116)) + (_3119 * _3119));
        float _3132 = (1.0 - (cbSceneParam._m0[77u].w / _3103)) * _3129;
        float _3137 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3139 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3316;
        if (abs((_3117 - _3121) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3316 = ((((_3122 > 0.0) ? exp2(_3137 * _3122) : (2.0 - exp2(_3139 * _3122))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3132;
        }
        else
        {
            float _3260 = 1.0 / cbSceneParam._m0[80u].x;
            float _3261 = isnan(_3123) ? _3122 : (isnan(_3122) ? _3123 : max(_3122, _3123));
            float _3262 = isnan(_3123) ? _3122 : (isnan(_3122) ? _3123 : min(_3122, _3123));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            float _3272 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : min(_3262, 0.0));
            _3316 = ((abs(_3129 / _3117) * cbSceneParam._m0[80u].y) * ((((_3271 - _3272) * 2.0) - ((exp2(_3137 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0)))) - exp2(_3137 * (isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))))) * _3260)) - ((exp2(_3139 * _3271) - exp2(_3139 * _3272)) * _3260))) + (_3132 * cbSceneParam._m0[80u].z);
        }
        vec4 _3318 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, 1.0), 0.0);
        float _3327 = exp2((_3316 * (-1.44269502162933349609375)) * (1.0 - _3318.w));
        float _3328 = log2(_3327);
        float _3344 = log2(_3048);
        _3141 = (exp2(_3344 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].x)) * _3318.x) / cbSceneParam._m0[78u].x)) + _3045;
        _3143 = (exp2(_3344 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].y)) * _3318.y) / cbSceneParam._m0[78u].y)) + _3046;
        _3145 = (exp2(_3344 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3328 * cbSceneParam._m0[78u].z)) * _3318.z) / cbSceneParam._m0[78u].z)) + _3047;
        _3147 = _3327 * _3048;
    }
    else
    {
        _3141 = _3045;
        _3143 = _3046;
        _3145 = _3047;
        _3147 = _3048;
    }
    bool _3354;
    vec4 _3157;
    vec4 _3179;
    float _3181;
    float _3185;
    float _3186;
    float _3187;
    float _3188;
    bool _3198;
    for (;;)
    {
        _3157 = cbMatDynParam._m0[0u];
        float _3159 = roundEven(_3157.y);
        bool _3160 = _3159 == 3.0;
        float _3161 = log2(_3147);
        float _3168 = exp2(_3161 * cbSceneParam._m0[78u].x) * _3017;
        float _3169 = exp2(_3161 * cbSceneParam._m0[78u].y) * _3018;
        float _3170 = exp2(_3161 * cbSceneParam._m0[78u].z) * _3019;
        float _3177 = _1115 + (-0.5);
        _3179 = cbMtdParam._m0[1u];
        _3181 = _3179.y * _3177;
        float _3184 = (_3159 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3185 = _3184 * (_3160 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3141)));
        _3186 = _3184 * (_3160 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3143)));
        _3187 = _3184 * (_3160 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3145)));
        _3188 = _3177 * 0.999000012874603271484375;
        _3198 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3198)
        {
            if ((cbInstanceData._m0[_292 + 7u].x + _3188) < 0.5)
            {
                _3354 = true;
                break;
            }
        }
        uint _3295 = _1164 + uint(_3157.w);
        if ((cbInstanceData._m0[_3295].w < 1.0) && ((cbInstanceData._m0[_3295].w + _3188) < 0.5))
        {
            _3354 = true;
            break;
        }
        if ((_3181 + 1.0) < _3179.x)
        {
            _3354 = true;
            break;
        }
        _3354 = false;
        break;
    }
    float _3559;
    if (_3354)
    {
        discard_state = true;
        _3559 = 0.0;
    }
    else
    {
        _3559 = cbInstanceData._m0[_3020].w;
    }
    SV_Target.x = _3185;
    SV_Target.y = _3186;
    SV_Target.z = _3187;
    SV_Target.w = _3559;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3020].w;
    discard_exit();
}


