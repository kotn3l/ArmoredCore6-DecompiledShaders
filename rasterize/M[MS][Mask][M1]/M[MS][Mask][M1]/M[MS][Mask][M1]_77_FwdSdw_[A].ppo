#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1536;
float _4198;
float _4199;
float _4200;
float _4201;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[23u].w) + _425) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4210 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _450 = (_443 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _451 = (_443 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _452 = (_443 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[23u].w) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4221 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _529 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450);
    float _532 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451);
    float _535 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452);
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _574 = _570.z;
    float _581 = ((_553.x - _572) * _443) + _572;
    float _582 = ((_553.y - _573) * _443) + _573;
    float _583 = ((_553.z - _574) * _443) + _574;
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _608 = ((_595.z - _583) * _516) + _583;
    float _611 = ((((_595.x - _581) * _516) + _581) * 2.0) + (-1.0);
    float _613 = ((((_595.y - _582) * _516) + _582) * 2.0) + (-1.0);
    float _614 = dot(vec2(_611, _613), vec2(_611, _613));
    float _4232 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _619 = sqrt(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _645 = (((_633.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _611;
    float _646 = (((_633.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _613;
    float _649 = fma(_619, _255, fma(_646, _262, _645 * _248));
    float _652 = fma(_619, _256, fma(_646, _263, _645 * _249));
    float _655 = fma(_619, _257, fma(_646, _264, _645 * _250));
    float _659 = inversesqrt(dot(vec3(_649, _652, _655), vec3(_649, _652, _655)));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _688 = _686.x;
    float _689 = 1.0 - _688;
    float _698 = (cbMtdParam._m0[19u].x + dot(vec4(_659 * _649, _659 * _652, _659 * _655, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_688 - _689) * cbMtdParam._m0[24u].z) + _689) * cbMtdParam._m0[21u].z);
    float _4243 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _701 = (-0.0) - cbMtdParam._m0[24u].x;
    float _703 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _703 : (isnan(_703) ? 1.0 : min(_703, 1.0));
    float _711 = _699 - ((_699 * TEXCOORD_8.x) * _704);
    float _712 = _699 - ((_699 * TEXCOORD_8.y) * _704);
    float _713 = _699 - ((_699 * TEXCOORD_8.z) * _704);
    float _720 = (_711 * (cbMtdParam._m0[17u].x - _529)) + _529;
    float _721 = (_712 * (cbMtdParam._m0[17u].y - _532)) + _532;
    float _722 = (_713 * (cbMtdParam._m0[17u].z - _535)) + _535;
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _736 = _734.x;
    float _737 = 1.0 - _736;
    float _763 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_736 - _737) * cbMtdParam._m0[24u].w) + _737) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4264 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _764 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _772 = ((((cbMtdParam._m0[10u].x - _720) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _764) + _720;
    float _773 = ((((cbMtdParam._m0[10u].y - _721) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _764) + _721;
    float _774 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _722)) * _764) + _722;
    vec4 _800 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _802 = _800.x;
    float _819 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _802) * _443) + _802;
    float _836 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _819) * _516) + _819;
    float _840 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _836) * cbMtdParam._m0[19u].z) + _836;
    float _842 = _840 - (_840 * _711);
    float _844 = _842 - (_842 * _764);
    float _848 = (cbMtdParam._m0[19u].w * (_633.z - _608)) + _608;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _869 = (_862.x * 2.0) + (-1.0);
    float _870 = (_862.y * 2.0) + (-1.0);
    float _871 = dot(vec2(_869, _870), vec2(_869, _870));
    float _4275 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _879 = ((_862.z - _848) * _711) + _848;
    float _882 = ((cbMtdParam._m0[23u].x - _879) * _764) + _879;
    vec4 _901 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _907 = (_901.x * 2.0) + (-1.0);
    float _908 = (_901.y * 2.0) + (-1.0);
    float _909 = dot(vec2(_907, _908), vec2(_907, _908));
    float _4286 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _924 = ((sqrt(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) - _619) * _713) + _619;
    float _927 = (((_869 - _645) * _711) + _645) + (cbMtdParam._m0[21u].x * _645);
    float _928 = (((_870 - _646) * _712) + _646) + (cbMtdParam._m0[21u].x * _646);
    float _939 = (((_907 - _927) + (_927 * cbMtdParam._m0[22u].z)) * _764) + _927;
    float _940 = (((_908 - _928) + (_928 * cbMtdParam._m0[22u].z)) * _764) + _928;
    float _941 = (_764 * (sqrt(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) - _924)) + _924;
    float _943 = cbMtdParam._m0[22u].x + _633.w;
    float _946 = fma(_941, _255, fma(_940, _262, _939 * _248));
    float _949 = fma(_941, _256, fma(_940, _263, _939 * _249));
    float _952 = fma(_941, _257, fma(_940, _264, _939 * _250));
    float _956 = inversesqrt(dot(vec3(_946, _949, _952), vec3(_946, _949, _952)));
    float _957 = _956 * _946;
    float _958 = _956 * _949;
    float _959 = _956 * _952;
    float _4297 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _960 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _4308 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4319 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4330 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4341 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4352 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _965 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _979 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1029 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1019);
    float _1030 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1019);
    float _1031 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1019);
    float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
    float _1036 = _1029 * _1035;
    float _1037 = _1030 * _1035;
    float _1038 = _1031 * _1035;
    vec4 _1043 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1045 = _1043.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1217 = sqrt(((_1029 * _1029) + (_1030 * _1030)) + (_1031 * _1031));
        float _1223 = (cbMatDynParam._m0[5u].x * _1217) + cbMatDynParam._m0[5u].y;
        float _4363 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1228 = (cbMatDynParam._m0[5u].z * _1217) + cbMatDynParam._m0[5u].w;
        float _4374 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) - _1224)) + _1224) < ((_1045 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1056 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1057 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1075 = fma(_959, cbSceneParam._m0[5u].z, fma(_958, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _957));
    float _1078 = fma(_959, cbSceneParam._m0[6u].z, fma(_958, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _957));
    float _1081 = fma(_959, cbSceneParam._m0[7u].z, fma(_958, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _957));
    uint _1094 = _267 + 9u;
    uint _1095 = _1094 + uint(cbMatDynParam._m0[0u].w);
    float _1101 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * cbInstanceData._m0[_1095].x;
    float _1102 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * cbInstanceData._m0[_1095].y;
    float _1103 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * cbInstanceData._m0[_1095].z;
    float _4385 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _4396 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _4407 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _1107 = 1.0 - _965;
    float _1108 = _1104 * _1107;
    float _1109 = _1105 * _1107;
    float _1110 = _1106 * _1107;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _965;
    float _1116 = (_1105 + (-0.039999999105930328369140625)) * _965;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _965;
    float _1118 = _1115 + 0.039999999105930328369140625;
    float _1120 = _1116 + 0.039999999105930328369140625;
    float _1121 = _1117 + 0.039999999105930328369140625;
    vec4 _1130 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1056, cbSceneParam._m0[86u].y * _1057));
    float _1134 = ((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * TEXCOORD_5.w) * _1130.x;
    float _1135 = dot(vec3(_957, _958, _959), vec3(_1036, _1037, _1038));
    float _1138 = _1135 * 2.0;
    float _1142 = (_1138 * _957) - _1036;
    float _1143 = (_1138 * _958) - _1037;
    float _1144 = (_1138 * _959) - _1038;
    float _1148 = abs(dot(vec3(_1036, _1037, _1038), vec3(_957, _958, _959)));
    float _4418 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1150 = sqrt(_960);
    float _1163 = exp2((_1150 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1150 * 3.0));
    float _1169 = (1.0 - _1163) * ((_1150 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1170 = _1163 * _1150;
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1206 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1535;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1260 = fma(_1206, cbModelParam._m0[26u].z, fma(_1202, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1198));
        float _1264 = fma(_1206, cbModelParam._m0[27u].z, fma(_1202, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1198));
        float _1268 = fma(_1206, cbModelParam._m0[28u].z, fma(_1202, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1198));
        float _1293 = _1198 + _957;
        float _1294 = _1202 + _958;
        float _1295 = _1206 + _959;
        float _1305 = fma(_1295, cbModelParam._m0[26u].z, fma(_1294, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1293)) - _1260;
        float _1306 = fma(_1295, cbModelParam._m0[27u].z, fma(_1294, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1293)) - _1264;
        float _1307 = fma(_1295, cbModelParam._m0[28u].z, fma(_1294, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1293)) - _1268;
        float _1311 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
        float _1324 = ((_1311 * _1305) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1260 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1311 * _1306) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1264 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1311 * _1307) / cbModelParam._m0[34u].z) + ((((((_1268 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        float _1363 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1329.x + (-0.5));
        float _1365 = _1363 * (_1329.y + (-0.5));
        float _1366 = _1363 * (_1329.z + (-0.5));
        float _1373 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1336.x + (-0.5));
        float _1375 = _1373 * (_1336.y + (-0.5));
        float _1376 = _1373 * (_1336.z + (-0.5));
        float _1383 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1343.x + (-0.5));
        float _1385 = _1383 * (_1343.y + (-0.5));
        float _1386 = _1383 * (_1343.z + (-0.5));
        float _1393 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1350.x + (-0.5));
        float _1395 = _1393 * (_1350.y + (-0.5));
        float _1396 = _1393 * (_1350.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1417 = (dot(vec3(_957, _958, _959), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1427 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4466 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1429 + 1.0))) + _1434) * _1397;
        float _1444 = _1365 * 0.5;
        float _1445 = _1375 * 0.5;
        float _1446 = _1385 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_957, _958, _959), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4499 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1471 + 1.0))) + _1476) * _1398;
        float _1486 = _1366 * 0.5;
        float _1487 = _1376 * 0.5;
        float _1488 = _1386 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_957, _958, _959), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4510 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4521 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4532 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_1513 + 1.0))) + _1518) * _1399;
        _1535 = _1366;
        _1537 = _1365;
        _1538 = _1364;
        _1539 = _1376;
        _1540 = _1375;
        _1541 = _1374;
        _1542 = _1386;
        _1543 = _1385;
        _1544 = _1384;
        _1545 = _1399;
        _1546 = _1398;
        _1547 = _1397;
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1549 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1550 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
    }
    else
    {
        _1535 = _1536;
        _1537 = _1536;
        _1538 = _1536;
        _1539 = _1536;
        _1540 = _1536;
        _1541 = _1536;
        _1542 = _1536;
        _1543 = _1536;
        _1544 = _1536;
        _1545 = _1536;
        _1546 = _1536;
        _1547 = _1536;
        _1548 = 0.0;
        _1549 = 0.0;
        _1550 = 0.0;
    }
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1577 = fma(_1206, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198));
        float _1581 = fma(_1206, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198));
        float _1585 = fma(_1206, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198));
        float _1608 = _1198 + _957;
        float _1609 = _1202 + _958;
        float _1610 = _1206 + _959;
        float _1620 = fma(_1610, cbModelParam._m0[30u].z, fma(_1609, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1608)) - _1577;
        float _1621 = fma(_1610, cbModelParam._m0[31u].z, fma(_1609, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1608)) - _1581;
        float _1622 = fma(_1610, cbModelParam._m0[32u].z, fma(_1609, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1608)) - _1585;
        float _1626 = inversesqrt(dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622)));
        float _1639 = ((_1626 * _1620) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1577 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1640 = ((_1626 * _1621) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1581 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1641 = ((_1626 * _1622) / cbModelParam._m0[35u].z) + ((((((_1585 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1639, _1640, _1641), 0.0);
        float _1676 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1643.x + (-0.5));
        float _1678 = _1676 * (_1643.y + (-0.5));
        float _1679 = _1676 * (_1643.z + (-0.5));
        float _1686 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1650.x + (-0.5));
        float _1688 = _1686 * (_1650.y + (-0.5));
        float _1689 = _1686 * (_1650.z + (-0.5));
        float _1696 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1657.x + (-0.5));
        float _1698 = _1696 * (_1657.y + (-0.5));
        float _1699 = _1696 * (_1657.z + (-0.5));
        float _1706 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1664.x + (-0.5));
        float _1708 = _1706 * (_1664.y + (-0.5));
        float _1709 = _1706 * (_1664.z + (-0.5));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1712 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1713 = _1677 * 0.5;
        float _1714 = _1687 * 0.5;
        float _1715 = _1697 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_957, _958, _959), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4573 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4584 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4595 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_1740 + 1.0))) + _1745) * _1710;
        float _1755 = _1678 * 0.5;
        float _1756 = _1688 * 0.5;
        float _1757 = _1698 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_957, _958, _959), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4606 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1711 + 9.9999997473787516355514526367188e-06);
        float _4617 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4628 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_1782 + 1.0))) + _1787) * _1711;
        float _1797 = _1679 * 0.5;
        float _1798 = _1689 * 0.5;
        float _1799 = _1699 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_957, _958, _959), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4639 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1712 + 9.9999997473787516355514526367188e-06);
        float _4650 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4661 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_1824 + 1.0))) + _1829) * _1712;
        _1846 = _1679;
        _1847 = _1678;
        _1848 = _1677;
        _1849 = _1689;
        _1850 = _1688;
        _1851 = _1687;
        _1852 = _1699;
        _1853 = _1698;
        _1854 = _1697;
        _1855 = _1712;
        _1856 = _1711;
        _1857 = _1710;
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
        _1859 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
        _1860 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
    }
    else
    {
        _1846 = _1536;
        _1847 = _1536;
        _1848 = _1536;
        _1849 = _1536;
        _1850 = _1536;
        _1851 = _1536;
        _1852 = _1536;
        _1853 = _1536;
        _1854 = _1536;
        _1855 = _1536;
        _1856 = _1536;
        _1857 = _1536;
        _1858 = 0.0;
        _1859 = 0.0;
        _1860 = 0.0;
    }
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1548)) + _1548;
    float _1871 = (cbModelParam._m0[1u].x * (_1859 - _1549)) + _1549;
    float _1872 = (cbModelParam._m0[1u].x * (_1860 - _1550)) + _1550;
    float _1893 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1870));
    float _1914 = _1142 * 0.5;
    float _1915 = _1143 * 0.5;
    float _1916 = _1144 * 0.5;
    float _1917 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1848, _1851, _1854, _1857));
    float _1920 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1847, _1850, _1853, _1856));
    float _1923 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1957;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1930 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1535, _1539, _1542, _1545));
        float _1934 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1537, _1540, _1543, _1546));
        float _1938 = dot(vec4(_1914, _1915, _1916, 1.0), vec4(_1538, _1541, _1544, _1547));
        float _1945 = dot(vec4(cbModelParam._m0[39u]), vec4(_1914, _1915, _1916, 1.0));
        _1957 = dot(vec3(isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1945) ? 0.0 : (isnan(0.0) ? _1945 : max(0.0, _1945))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1957 = 1.0;
    }
    float _1968;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1959 = dot(vec4(cbModelParam._m0[40u]), vec4(_1914, _1915, _1916, 1.0));
        _1968 = dot(vec3(isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1959) ? 0.0 : (isnan(0.0) ? _1959 : max(0.0, _1959))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1968 = 1.0;
    }
    float _1972 = (_1968 * cbModelParam._m0[1u].x) + (_1957 * (1.0 - cbModelParam._m0[1u].x));
    float _1982 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _960);
    float _1983 = isnan(_1982) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1982 : min(cbModelParam._m0[25u].z, _1982));
    float _2064;
    float _2066;
    float _2068;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2031 = fma(_1206, cbModelParam._m0[13u].z, fma(_1202, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1198)) + cbModelParam._m0[13u].w;
        float _2035 = fma(_1206, cbModelParam._m0[14u].z, fma(_1202, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1198)) + cbModelParam._m0[14u].w;
        float _2039 = fma(_1206, cbModelParam._m0[15u].z, fma(_1202, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1198)) + cbModelParam._m0[15u].w;
        float _2042 = fma(_1144, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1142));
        float _2045 = fma(_1144, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1142));
        float _2048 = fma(_1144, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1142));
        float _2076;
        if (_2042 > 0.0)
        {
            _2076 = abs((1.0 - _2031) / _2042);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2031 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2076 = frontier_phi_17_15_ladder;
        }
        float _2248;
        if (_2045 > 0.0)
        {
            _2248 = abs((1.0 - _2035) / _2045);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2035 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2248 = frontier_phi_26_22_ladder;
        }
        float _2543;
        if (_2048 > 0.0)
        {
            _2543 = abs((1.0 - _2039) / _2048);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2039 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2543 = frontier_phi_38_33_ladder;
        }
        float _2545 = isnan(_2248) ? _2076 : (isnan(_2076) ? _2248 : min(_2076, _2248));
        float _2546 = isnan(_2543) ? _2545 : (isnan(_2545) ? _2543 : min(_2545, _2543));
        float _2550 = (_2546 * _2042) + _2031;
        float _2551 = (_2546 * _2045) + _2035;
        float _2552 = (_2546 * _2048) + _2039;
        float _2553 = _2546 * 9.9999997473787516355514526367188e-05;
        float _2555 = (-1.0) - _2553;
        float _2557 = _2553 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2552 > _2557) || ((_2552 < _2555) || ((_2551 > _2557) || ((_2551 < _2555) || ((_2550 < _2555) || (_2550 > _2557))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2697 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2552, cbModelParam._m0[9u].z, fma(_2551, cbModelParam._m0[9u].y, _2550 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2552, cbModelParam._m0[10u].z, fma(_2551, cbModelParam._m0[10u].y, _2550 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2552, cbModelParam._m0[11u].z, fma(_2551, cbModelParam._m0[11u].y, _2550 * cbModelParam._m0[11u].x))), _1983);
            frontier_phi_16_38_ladder = _2697.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2697.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2697.x * cbModelParam._m0[1u].y;
        }
        _2064 = frontier_phi_16_38_ladder_2;
        _2066 = frontier_phi_16_38_ladder_1;
        _2068 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2052 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1142, _1143, _1144), _1983);
        _2064 = _2052.x * cbModelParam._m0[1u].y;
        _2066 = _2052.y * cbModelParam._m0[1u].y;
        _2068 = _2052.z * cbModelParam._m0[1u].y;
    }
    float _2072 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _960);
    float _2073 = isnan(_2072) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2072 : min(cbModelParam._m0[25u].w, _2072));
    float _2163;
    float _2165;
    float _2167;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2127 = fma(_1206, cbModelParam._m0[21u].z, fma(_1202, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1198)) + cbModelParam._m0[21u].w;
        float _2131 = fma(_1206, cbModelParam._m0[22u].z, fma(_1202, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1198)) + cbModelParam._m0[22u].w;
        float _2135 = fma(_1206, cbModelParam._m0[23u].z, fma(_1202, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1198)) + cbModelParam._m0[23u].w;
        float _2138 = fma(_1144, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1142));
        float _2141 = fma(_1144, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1142));
        float _2144 = fma(_1144, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1142));
        float _2253;
        if (_2138 > 0.0)
        {
            _2253 = abs((1.0 - _2127) / _2138);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2127 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2253 = frontier_phi_28_24_ladder;
        }
        float _2570;
        if (_2141 > 0.0)
        {
            _2570 = abs((1.0 - _2131) / _2141);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2141 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2131 + 1.0) / _2141);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2570 = frontier_phi_40_35_ladder;
        }
        float _2908;
        if (_2144 > 0.0)
        {
            _2908 = abs((1.0 - _2135) / _2144);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2144 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2135 + 1.0) / _2144);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2908 = frontier_phi_50_47_ladder;
        }
        float _2910 = isnan(_2570) ? _2253 : (isnan(_2253) ? _2570 : min(_2253, _2570));
        float _2911 = isnan(_2908) ? _2910 : (isnan(_2910) ? _2908 : min(_2910, _2908));
        float _2915 = (_2911 * _2138) + _2127;
        float _2916 = (_2911 * _2141) + _2131;
        float _2917 = (_2911 * _2144) + _2135;
        float _2918 = _2911 * 9.9999997473787516355514526367188e-05;
        float _2919 = (-1.0) - _2918;
        float _2921 = _2918 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2917 > _2921) || ((_2917 < _2919) || ((_2916 > _2921) || ((_2916 < _2919) || ((_2915 < _2919) || (_2915 > _2921))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2917, cbModelParam._m0[17u].z, fma(_2916, cbModelParam._m0[17u].y, _2915 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2917, cbModelParam._m0[18u].z, fma(_2916, cbModelParam._m0[18u].y, _2915 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2917, cbModelParam._m0[19u].z, fma(_2916, cbModelParam._m0[19u].y, _2915 * cbModelParam._m0[19u].x))), _2073);
            frontier_phi_25_50_ladder = _3039.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3039.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3039.x * cbModelParam._m0[1u].z;
        }
        _2163 = frontier_phi_25_50_ladder_2;
        _2165 = frontier_phi_25_50_ladder_1;
        _2167 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2147 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1142, _1143, _1144), _2073);
        _2163 = _2147.x * cbModelParam._m0[1u].z;
        _2165 = _2147.y * cbModelParam._m0[1u].z;
        _2167 = _2147.z * cbModelParam._m0[1u].z;
    }
    float _2180 = (((_1169 * _1118) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2163 - _2064)) + _2064);
    float _2182 = (((_1169 * _1120) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2165 - _2066)) + _2066);
    float _2184 = (((_1169 * _1121) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2167 - _2068)) + _2068);
    float _2187 = fma(_2184, cbSceneParam._m0[89u].z, fma(_2182, cbSceneParam._m0[89u].y, _2180 * cbSceneParam._m0[89u].x));
    float _2190 = fma(_2184, cbSceneParam._m0[90u].z, fma(_2182, cbSceneParam._m0[90u].y, _2180 * cbSceneParam._m0[90u].x));
    float _2193 = fma(_2184, cbSceneParam._m0[91u].z, fma(_2182, cbSceneParam._m0[91u].y, _2180 * cbSceneParam._m0[91u].x));
    float _2227 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2231 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2235 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2239 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2240 = _2227 / _2239;
    float _2241 = _2231 / _2239;
    float _2242 = _2235 / _2239;
    float _2389;
    float _2390;
    float _2391;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2269 = ((uint(_2242 > cbSceneParam._m0[59u].y) + uint(_2242 > cbSceneParam._m0[59u].x)) + uint(_2242 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2270 = _2269 + 43u;
        uint _2278 = _2269 + 44u;
        uint _2286 = _2269 + 45u;
        uint _2294 = _2269 + 46u;
        float _2305 = fma(_2239, cbSceneParam._m0[_2270].w, fma(_2235, cbSceneParam._m0[_2270].z, fma(_2231, cbSceneParam._m0[_2270].y, _2227 * cbSceneParam._m0[_2270].x)));
        float _2309 = fma(_2239, cbSceneParam._m0[_2278].w, fma(_2235, cbSceneParam._m0[_2278].z, fma(_2231, cbSceneParam._m0[_2278].y, _2227 * cbSceneParam._m0[_2278].x)));
        float _2317 = fma(_2239, cbSceneParam._m0[_2294].w, fma(_2235, cbSceneParam._m0[_2294].z, fma(_2231, cbSceneParam._m0[_2294].y, _2227 * cbSceneParam._m0[_2294].x)));
        float _2322 = cbSceneParam._m0[33u].z * _2317;
        float _2324 = cbSceneParam._m0[33u].w * _2317;
        float _2327 = fma(_2239, cbSceneParam._m0[_2286].w, fma(_2235, cbSceneParam._m0[_2286].z, fma(_2231, cbSceneParam._m0[_2286].y, _2227 * cbSceneParam._m0[_2286].x))) / _2317;
        float _2375 = (cbSceneParam._m0[33u].x - sqrt(((_2241 * _2241) + (_2240 * _2240)) + (_2242 * _2242))) * cbSceneParam._m0[33u].y;
        float _4787 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2382 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2322 + _2305) / _2317, (_2324 + _2309) / _2317), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2324 + _2305) / _2317, (_2309 - _2322) / _2317), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2305 - _2322) / _2317, (_2309 - _2324) / _2317), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2305 - _2324) / _2317, (_2322 + _2309) / _2317), _2327), 0.0)).x), vec4(0.25)));
        _2389 = 1.0 - (_2382 * cbSceneParam._m0[34u].x);
        _2390 = 1.0 - (_2382 * cbSceneParam._m0[34u].y);
        _2391 = 1.0 - (_2382 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2389 = 1.0;
        _2390 = 1.0;
        _2391 = 1.0;
    }
    float _2455;
    float _2457;
    float _2459;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2443 = fma(_2239, cbSceneParam._m0[63u].w, fma(_2235, cbSceneParam._m0[63u].z, fma(_2231, cbSceneParam._m0[63u].y, _2227 * cbSceneParam._m0[63u].x)));
        float _2444 = fma(_2239, cbSceneParam._m0[60u].w, fma(_2235, cbSceneParam._m0[60u].z, fma(_2231, cbSceneParam._m0[60u].y, _2227 * cbSceneParam._m0[60u].x))) / _2443;
        float _2445 = fma(_2239, cbSceneParam._m0[61u].w, fma(_2235, cbSceneParam._m0[61u].z, fma(_2231, cbSceneParam._m0[61u].y, _2227 * cbSceneParam._m0[61u].x))) / _2443;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2444 >= cbSceneParam._m0[64u].x) && (_2445 >= cbSceneParam._m0[64u].y)) && (_2444 <= cbSceneParam._m0[64u].z)) && (_2445 <= cbSceneParam._m0[64u].w))
        {
            float _2583 = fma(_2239, cbSceneParam._m0[62u].w, fma(_2235, cbSceneParam._m0[62u].z, fma(_2231, cbSceneParam._m0[62u].y, _2227 * cbSceneParam._m0[62u].x))) / _2443;
            float _2587 = isnan(cbSceneParam._m0[41u].w) ? _2583 : (isnan(_2583) ? cbSceneParam._m0[41u].w : max(_2583, cbSceneParam._m0[41u].w));
            float _2630 = (cbSceneParam._m0[33u].x - sqrt(((_2241 * _2241) + (_2240 * _2240)) + (_2242 * _2242))) * cbSceneParam._m0[33u].y;
            float _4803 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
            float _2637 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2444, cbSceneParam._m0[33u].w + _2445), _2587), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2444, _2445 - cbSceneParam._m0[33u].z), _2587), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2444 - cbSceneParam._m0[33u].z, _2445 - cbSceneParam._m0[33u].w), _2587), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2444 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2445), _2587), 0.0)).x), vec4(0.25)));
            float _2641 = 1.0 - (_2637 * cbSceneParam._m0[34u].x);
            float _2642 = 1.0 - (_2637 * cbSceneParam._m0[34u].y);
            float _2643 = 1.0 - (_2637 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2643) ? _2391 : (isnan(_2391) ? _2643 : min(_2391, _2643));
            frontier_phi_37_36_ladder_1 = isnan(_2642) ? _2390 : (isnan(_2390) ? _2642 : min(_2390, _2642));
            frontier_phi_37_36_ladder_2 = isnan(_2641) ? _2389 : (isnan(_2389) ? _2641 : min(_2389, _2641));
        }
        else
        {
            frontier_phi_37_36_ladder = _2391;
            frontier_phi_37_36_ladder_1 = _2390;
            frontier_phi_37_36_ladder_2 = _2389;
        }
        _2455 = frontier_phi_37_36_ladder_2;
        _2457 = frontier_phi_37_36_ladder_1;
        _2459 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2455 = _2389;
        _2457 = _2390;
        _2459 = _2391;
    }
    uvec4 _2464 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2466 = _2464.x * 14u;
    uint _2467 = _2466 + 13u;
    float _2474 = _1134 + (-1.0);
    float _2479 = (cbLight._m0[_2467].x * _2474) + 1.0;
    float _2480 = (cbLight._m0[_2467].y * _2474) + 1.0;
    float _2481 = (cbLight._m0[_2467].z * _2474) + 1.0;
    float _2482 = (cbLight._m0[_2467].w * _2474) + 1.0;
    uint _2483 = _2466 + 5u;
    float _2489 = isnan(1.0) ? _2480 : (isnan(_2480) ? 1.0 : min(_2480, 1.0));
    uint _2493 = _2466 + 4u;
    float _2502 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
    uint _2506 = _2466 | 1u;
    float _2517 = dot(vec3(cbLight._m0[_2466].xyz), vec3(_957, _958, _959));
    float _2520 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_957, _958, _959));
    float _4839 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _4850 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2525 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * 0.3183098733425140380859375;
    float _2527 = (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * 0.3183098733425140380859375;
    float _2534 = ((cbLight._m0[_2483].x * _2489) * _2527) + (((cbLight._m0[_2493].x * _2455) * _2502) * _2525);
    float _2535 = ((_2489 * cbLight._m0[_2483].y) * _2527) + (((cbLight._m0[_2493].y * _2457) * _2502) * _2525);
    float _2536 = ((_2489 * cbLight._m0[_2483].z) * _2527) + (((cbLight._m0[_2493].z * _2459) * _2502) * _2525);
    uvec4 _2540 = floatBitsToUint(cbLight._m0[_2466 + 12u]);
    bool _2542 = _2540.x == 0u;
    float _2644;
    float _2646;
    float _2648;
    if (_2542)
    {
        _2644 = _2534;
        _2646 = _2535;
        _2648 = _2536;
    }
    else
    {
        uint _2652 = _2466 + 6u;
        float _2668 = (dot(vec3(cbLight._m0[_2466 + 2u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2669 = _2668 * _2668;
        float _4861 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2670 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2671 = isnan(1.0) ? _2481 : (isnan(_2481) ? 1.0 : min(_2481, 1.0));
        _2644 = (((cbLight._m0[_2652].x * 0.3183098733425140380859375) * _2670) * _2671) + _2534;
        _2646 = (((cbLight._m0[_2652].y * 0.3183098733425140380859375) * _2670) * _2671) + _2535;
        _2648 = (((cbLight._m0[_2652].z * 0.3183098733425140380859375) * _2670) * _2671) + _2536;
    }
    bool _2651 = _2540.y == 0u;
    float _2706;
    float _2708;
    float _2710;
    if (_2651)
    {
        _2706 = _2644;
        _2708 = _2646;
        _2710 = _2648;
    }
    else
    {
        uint _2879 = _2466 + 7u;
        float _2895 = (dot(vec3(cbLight._m0[_2466 + 3u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2896 = _2895 * _2895;
        float _4877 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2897 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2898 = isnan(1.0) ? _2482 : (isnan(_2482) ? 1.0 : min(_2482, 1.0));
        _2706 = (((cbLight._m0[_2879].x * 0.3183098733425140380859375) * _2897) * _2898) + _2644;
        _2708 = (((cbLight._m0[_2879].y * 0.3183098733425140380859375) * _2897) * _2898) + _2646;
        _2710 = (((cbLight._m0[_2879].z * 0.3183098733425140380859375) * _2897) * _2898) + _2648;
    }
    uint _2713 = _2466 + 8u;
    float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2466].w)) * _960) * 0.949999988079071044921875);
    float _2727 = _2726 * _2726;
    float _2728 = cbLight._m0[_2466].x + _1036;
    float _2729 = cbLight._m0[_2466].y + _1037;
    float _2730 = cbLight._m0[_2466].z + _1038;
    float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
    float _2735 = _2734 * _2728;
    float _2736 = _2734 * _2729;
    float _2737 = _2734 * _2730;
    float _2738 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2466].xyz));
    float _4893 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2741 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
    float _4904 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _2742 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
    float _2743 = dot(vec3(_957, _958, _959), vec3(_2735, _2736, _2737));
    float _4915 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
    float _2746 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
    float _2747 = dot(vec3(cbLight._m0[_2466].xyz), vec3(_2735, _2736, _2737));
    float _4926 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2751 = _2727 * _2727;
    float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
    float _2763 = exp2(log2(1.0 - (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0)))) * 5.0);
    float _2764 = 0.959999978542327880859375 - _1115;
    float _2766 = 0.959999978542327880859375 - _1116;
    float _2767 = 0.959999978542327880859375 - _1117;
    float _2774 = 1.0 - _2727;
    float _2785 = (0.5 / (((_2742 * ((_2741 * _2774) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2742 * _2774) + _2727) * _2741))) * _2741;
    float _4937 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
    float _2787 = (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
    uint _2801 = _2466 + 9u;
    float _2812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _960) * 0.949999988079071044921875);
    float _2813 = _2812 * _2812;
    float _2814 = cbLight._m0[_2506].x + _1036;
    float _2815 = cbLight._m0[_2506].y + _1037;
    float _2816 = cbLight._m0[_2506].z + _1038;
    float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
    float _2821 = _2820 * _2814;
    float _2822 = _2820 * _2815;
    float _2823 = _2820 * _2816;
    float _2824 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2506].xyz));
    float _4948 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
    float _2827 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
    float _2828 = dot(vec3(_957, _958, _959), vec3(_2821, _2822, _2823));
    float _4959 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
    float _2831 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
    float _2832 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2821, _2822, _2823));
    float _4970 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
    float _2836 = _2813 * _2813;
    float _2840 = ((_2831 * _2831) * (_2836 + (-1.0))) + 1.0;
    float _2847 = exp2(log2(1.0 - (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) * 5.0);
    float _2854 = 1.0 - _2813;
    float _2864 = (0.5 / (((_2742 * ((_2827 * _2854) + _2813)) + 9.9999999392252902907785028219223e-09) + (((_2742 * _2854) + _2813) * _2827))) * _2827;
    float _4981 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
    float _2866 = (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_2836 / ((_2840 * _2840) * 3.141590118408203125));
    float _2876 = (((((_2847 * _2764) + _1118) * cbLight._m0[_2801].x) * _2866) * _2489) + ((((cbLight._m0[_2713].x * _2455) * ((_2763 * _2764) + _1118)) * _2787) * _2502);
    float _2877 = (((((_2847 * _2766) + _1120) * cbLight._m0[_2801].y) * _2866) * _2489) + ((((cbLight._m0[_2713].y * _2457) * ((_2763 * _2766) + _1120)) * _2787) * _2502);
    float _2878 = (((((_2847 * _2767) + _1121) * cbLight._m0[_2801].z) * _2866) * _2489) + ((((cbLight._m0[_2713].z * _2459) * ((_2763 * _2767) + _1121)) * _2787) * _2502);
    float _2934;
    float _2936;
    float _2938;
    if (_2542)
    {
        _2934 = _2876;
        _2936 = _2877;
        _2938 = _2878;
    }
    else
    {
        uint _2940 = _2466 + 2u;
        uint _2944 = _2466 + 10u;
        float _2958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2940].w)) * _960) * 0.949999988079071044921875);
        float _2959 = _2958 * _2958;
        float _2960 = cbLight._m0[_2940].x + _1036;
        float _2961 = cbLight._m0[_2940].y + _1037;
        float _2962 = cbLight._m0[_2940].z + _1038;
        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
        float _2967 = _2966 * _2960;
        float _2968 = _2966 * _2961;
        float _2969 = _2966 * _2962;
        float _2970 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2940].xyz));
        float _4992 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2973 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
        float _2974 = dot(vec3(_957, _958, _959), vec3(_2967, _2968, _2969));
        float _5003 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2977 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
        float _2978 = dot(vec3(cbLight._m0[_2940].xyz), vec3(_2967, _2968, _2969));
        float _5014 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2982 = _2959 * _2959;
        float _2986 = ((_2977 * _2977) * (_2982 + (-1.0))) + 1.0;
        float _2993 = exp2(log2(1.0 - (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) * 5.0);
        float _3000 = 1.0 - _2959;
        float _3010 = (0.5 / (((_2742 * ((_2973 * _3000) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2742 * _3000) + _2959) * _2973))) * _2973;
        float _5025 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3012 = (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_2982 / ((_2986 * _2986) * 3.141590118408203125));
        float _3013 = isnan(1.0) ? _2481 : (isnan(_2481) ? 1.0 : min(_2481, 1.0));
        _2934 = (((((_2993 * _2764) + _1118) * cbLight._m0[_2944].x) * _3012) * _3013) + _2876;
        _2936 = (((((_2993 * _2766) + _1120) * cbLight._m0[_2944].y) * _3012) * _3013) + _2877;
        _2938 = (((((_2993 * _2767) + _1121) * cbLight._m0[_2944].z) * _3012) * _3013) + _2878;
    }
    float _3044;
    float _3046;
    float _3048;
    if (_2651)
    {
        _3044 = _2934;
        _3046 = _2936;
        _3048 = _2938;
    }
    else
    {
        uint _3055 = _2466 + 3u;
        uint _3059 = _2466 + 11u;
        float _3073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3055].w)) * _960) * 0.949999988079071044921875);
        float _3074 = _3073 * _3073;
        float _3075 = cbLight._m0[_3055].x + _1036;
        float _3076 = cbLight._m0[_3055].y + _1037;
        float _3077 = cbLight._m0[_3055].z + _1038;
        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
        float _3082 = _3081 * _3075;
        float _3083 = _3081 * _3076;
        float _3084 = _3081 * _3077;
        float _3085 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_3055].xyz));
        float _5041 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
        float _3088 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
        float _3089 = dot(vec3(_957, _958, _959), vec3(_3082, _3083, _3084));
        float _5052 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
        float _3092 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
        float _3093 = dot(vec3(cbLight._m0[_3055].xyz), vec3(_3082, _3083, _3084));
        float _5063 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
        float _3097 = _3074 * _3074;
        float _3101 = ((_3092 * _3092) * (_3097 + (-1.0))) + 1.0;
        float _3108 = exp2(log2(1.0 - (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0)))) * 5.0);
        float _3115 = 1.0 - _3074;
        float _3125 = (0.5 / (((_2742 * ((_3088 * _3115) + _3074)) + 9.9999999392252902907785028219223e-09) + (((_2742 * _3115) + _3074) * _3088))) * _3088;
        float _5074 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
        float _3127 = (isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3097 / ((_3101 * _3101) * 3.141590118408203125));
        float _3128 = isnan(1.0) ? _2482 : (isnan(_2482) ? 1.0 : min(_2482, 1.0));
        _3044 = (((((_3108 * _2764) + _1118) * cbLight._m0[_3059].x) * _3127) * _3128) + _2934;
        _3046 = (((((_3108 * _2766) + _1120) * cbLight._m0[_3059].y) * _3127) * _3128) + _2936;
        _3048 = (((((_3108 * _2767) + _1121) * cbLight._m0[_3059].z) * _3127) * _3128) + _2938;
    }
    float _3194;
    float _3196;
    float _3198;
    float _3200;
    float _3202;
    float _3204;
    if (_2464.y == 0u)
    {
        uvec4 _3149 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3150 = _3149.x;
        uint _3161 = uint((float(_3149.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1057) / _3150))) + floor(float(uint(cbSceneParam._m0[85u].x * _1056) / _3150)));
        float _3171 = (log2(_2242 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3172 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
        uint _3175 = uint(isnan(14.0) ? _3172 : (isnan(_3172) ? 14.0 : min(_3172, 14.0)));
        uvec4 _3180 = texelFetch(g_lightClusterGridBuffer, int(((_3175 << 2u) + (_3161 << 6u)) >> 2u));
        uint _3181 = _3180.x;
        uint _3182 = _3149.z;
        float _3261;
        float _3263;
        float _3265;
        float _3267;
        float _3269;
        float _3271;
        if (((((1u << ((_3182 >> 4u) & 15u)) + 4294967295u) & _3181) == 0u) || ((_3182 & 240u) == 0u))
        {
            _3261 = 0.0;
            _3263 = 0.0;
            _3265 = 0.0;
            _3267 = 0.0;
            _3269 = 0.0;
            _3271 = 0.0;
        }
        else
        {
            float _3262;
            float _3264;
            float _3266;
            float _3268;
            float _3270;
            float _3272;
            float _3413 = 0.0;
            float _3414 = 0.0;
            float _3415 = 0.0;
            float _3416 = 0.0;
            float _3417 = 0.0;
            float _3418 = 0.0;
            uint _3419 = 0u;
            uint _3428;
            bool _3429;
            for (;;)
            {
                _3428 = texelFetch(g_lightClassification, int((((_3175 << 5u) + (_3161 << 9u)) + (_3419 << 2u)) >> 2u)).x;
                _3429 = _3428 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3429)
                {
                    frontier_phi_71_pred = _3418;
                    frontier_phi_71_pred_1 = _3417;
                    frontier_phi_71_pred_2 = _3416;
                    frontier_phi_71_pred_3 = _3415;
                    frontier_phi_71_pred_4 = _3414;
                    frontier_phi_71_pred_5 = _3413;
                }
                else
                {
                    float _3558;
                    float _3559;
                    float _3560;
                    float _3561;
                    float _3562;
                    float _3563;
                    uint _3564;
                    _3558 = _3413;
                    _3559 = _3414;
                    _3560 = _3415;
                    _3561 = _3416;
                    _3562 = _3417;
                    _3563 = _3418;
                    _3564 = _3428;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    for (;;)
                    {
                        uint _3568 = uint(findLSB(_3564)) + (_3419 << 5u);
                        uint _3565 = (_3564 + 4294967295u) & _3564;
                        uint _3570 = _3568 * 48u;
                        vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3570)).x, texelFetch(g_PointLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3570 + 3u)).x));
                        uint _3590 = (_3568 * 48u) + 4u;
                        vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3590)).x, texelFetch(g_PointLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3590 + 3u)).x));
                        uint _3609 = (_3568 * 48u) + 8u;
                        vec3 _3620 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3609)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3609 + 2u)).x));
                        float _3624 = _3584.x - _2240;
                        float _3625 = _3584.y - _2241;
                        float _3626 = _3584.z - _2242;
                        float _3627 = dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626));
                        float _3630 = inversesqrt(_3627);
                        float _3631 = _3630 * _3624;
                        float _3632 = _3630 * _3625;
                        float _3633 = _3630 * _3626;
                        float _3634 = dot(vec3(_1075, _1078, _1081), vec3(_3631, _3632, _3633));
                        float _3639 = 1.0 - (_3627 * _3584.w);
                        float _5100 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3640 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                        float _3641 = sqrt(_3627) * _3603.w;
                        float _3644 = 1.39999997615814208984375 / (_3641 + 1.39999997615814208984375);
                        float _3645 = _3644 * _3644;
                        float _3648 = ((1.0 - _3645) * _3634) + _3645;
                        float _3651 = _3641 * _3641;
                        float _3655 = ((isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0))) * _3640) / ((_3651 * 0.699999988079071044921875) + 1.0);
                        float _3659 = (-0.0) - _2240;
                        float _3660 = (-0.0) - _2241;
                        float _3661 = (-0.0) - _2242;
                        float _3665 = inversesqrt(dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661)));
                        float _3666 = _3665 * _3659;
                        float _3667 = _3665 * _3660;
                        float _3668 = _3665 * _3661;
                        float _3675 = exp2(log2(1.0 / ((_3651 * 3.5) + 5.0)) * 0.25);
                        float _3676 = 1.0 - _1150;
                        float _3683 = sqrt(1.0 - ((1.0 - (_3676 * _3676)) * (1.0 - (_3675 * _3675))));
                        float _3684 = _3683 * _3683;
                        float _3685 = _3684 * _3684;
                        float _3686 = _3666 + _3631;
                        float _3687 = _3667 + _3632;
                        float _3688 = _3668 + _3633;
                        float _3692 = inversesqrt(dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688)));
                        float _3696 = dot(vec3(_1075, _1078, _1081), vec3(_3666, _3667, _3668));
                        float _5116 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                        float _3699 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                        float _3700 = dot(vec3(_1075, _1078, _1081), vec3(_3692 * _3686, _3692 * _3687, _3692 * _3688));
                        float _5127 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                        float _3703 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                        float _3707 = ((_3703 * _3703) * (_3685 + (-1.0))) + 1.0;
                        float _3708 = _3644 * _3684;
                        float _3709 = _3708 * _3708;
                        float _3712 = ((1.0 - _3709) * _3634) + _3709;
                        float _5138 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                        float _3713 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                        float _3714 = 1.0 - _3684;
                        float _3724 = (0.5 / (((_3713 * ((_3699 * _3714) + _3684)) + 9.9999999392252902907785028219223e-09) + (((_3713 * _3714) + _3684) * _3699))) * _3713;
                        float _5149 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                        float _3735 = (((_3685 * 3.1415927410125732421875) * (isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0)))) / ((_3707 * _3707) * ((_3651 * 2.1991131305694580078125) + 3.141590118408203125))) * _3640;
                        _3488 = (_3655 * _3603.x) + _3561;
                        _3489 = (_3655 * _3603.y) + _3562;
                        _3490 = (_3655 * _3603.z) + _3563;
                        _3485 = (_3735 * _3620.x) + _3558;
                        _3486 = (_3735 * _3620.y) + _3559;
                        _3487 = (_3735 * _3620.z) + _3560;
                        if (_3565 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3558 = _3485;
                            _3559 = _3486;
                            _3560 = _3487;
                            _3561 = _3488;
                            _3562 = _3489;
                            _3563 = _3490;
                            _3564 = _3565;
                        }
                    }
                    frontier_phi_71_pred = _3490;
                    frontier_phi_71_pred_1 = _3489;
                    frontier_phi_71_pred_2 = _3488;
                    frontier_phi_71_pred_3 = _3487;
                    frontier_phi_71_pred_4 = _3486;
                    frontier_phi_71_pred_5 = _3485;
                }
                _3272 = frontier_phi_71_pred;
                _3270 = frontier_phi_71_pred_1;
                _3268 = frontier_phi_71_pred_2;
                _3266 = frontier_phi_71_pred_3;
                _3264 = frontier_phi_71_pred_4;
                _3262 = frontier_phi_71_pred_5;
                uint _3420 = _3419 + 1u;
                if (_3420 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3413 = _3262;
                    _3414 = _3264;
                    _3415 = _3266;
                    _3416 = _3268;
                    _3417 = _3270;
                    _3418 = _3272;
                    _3419 = _3420;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3261 = _3262;
            _3263 = _3264;
            _3265 = _3266;
            _3267 = _3268;
            _3269 = _3270;
            _3271 = _3272;
        }
        uvec4 _3275 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3276 = _3275.z;
        uint _3278 = (_3276 >> 8u) & 15u;
        float _3381;
        float _3383;
        float _3385;
        float _3387;
        float _3389;
        float _3391;
        if (((4294967295u << _3278) & _3181) == 0u)
        {
            _3381 = _3261;
            _3383 = _3263;
            _3385 = _3265;
            _3387 = _3267;
            _3389 = _3269;
            _3391 = _3271;
        }
        else
        {
            float _3406 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
            float _3407 = _3406 * _2240;
            float _3408 = _3406 * _2241;
            float _3409 = _3406 * _2242;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3278 < ((_3276 >> 12u) & 15u))
            {
                float _3382;
                float _3384;
                float _3386;
                float _3388;
                float _3390;
                float _3392;
                float _3541 = _3261;
                float _3542 = _3263;
                float _3543 = _3265;
                float _3544 = _3267;
                float _3545 = _3269;
                float _3546 = _3271;
                uint _3547 = _3278;
                uint _3556;
                bool _3557;
                for (;;)
                {
                    _3556 = texelFetch(g_lightClassification, int((((_3175 << 5u) + (_3161 << 9u)) + (_3547 << 2u)) >> 2u)).x;
                    _3557 = _3556 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3557)
                    {
                        frontier_phi_82_pred = _3546;
                        frontier_phi_82_pred_1 = _3545;
                        frontier_phi_82_pred_2 = _3544;
                        frontier_phi_82_pred_3 = _3543;
                        frontier_phi_82_pred_4 = _3542;
                        frontier_phi_82_pred_5 = _3541;
                    }
                    else
                    {
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _4042;
                        float _4043;
                        float _4044;
                        float _4045;
                        float _4046;
                        float _4047;
                        float _3762 = _3541;
                        float _3763 = _3542;
                        float _3764 = _3543;
                        float _3765 = _3544;
                        float _3766 = _3545;
                        float _3767 = _3546;
                        uint _3768 = _3556;
                        uint _3769;
                        vec4 _3794;
                        float _3795;
                        vec4 _3810;
                        vec3 _3822;
                        vec4 _3837;
                        vec4 _3852;
                        float _3898;
                        bool _3899;
                        for (;;)
                        {
                            uint _3779 = ((_3547 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3768));
                            _3769 = (_3768 + 4294967295u) & _3768;
                            uint _3781 = _3779 * 40u;
                            _3794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 3u)).x));
                            _3795 = _3794.w;
                            uint _3797 = (_3779 * 40u) + 4u;
                            _3810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 3u)).x));
                            uint _3812 = (_3779 * 40u) + 8u;
                            _3822 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 2u)).x));
                            uint _3824 = (_3779 * 40u) + 16u;
                            _3837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3824 + 3u)).x));
                            uint _3839 = (_3779 * 40u) + 20u;
                            _3852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 3u)).x));
                            uint _3854 = (_3779 * 40u) + 24u;
                            vec4 _3867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 3u)).x));
                            uint _3873 = (_3779 * 40u) + 28u;
                            vec4 _3886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 3u)).x));
                            _3898 = fma(_2242, _3886.z, fma(_2241, _3886.y, _3886.x * _2240)) + _3886.w;
                            _3899 = !((fma(_2242, _3867.z, fma(_2241, _3867.y, _3867.x * _2240)) + _3867.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3899)
                            {
                                float _3926 = _3794.x - _2240;
                                float _3927 = _3794.y - _2241;
                                float _3928 = _3794.z - _2242;
                                float _3929 = dot(vec3(_3926, _3927, _3928), vec3(_3926, _3927, _3928));
                                float _3932 = inversesqrt(_3929);
                                float _3933 = _3932 * _3926;
                                float _3934 = _3932 * _3927;
                                float _3935 = _3932 * _3928;
                                float _3939 = 1.0 - (_3929 / (_3795 * _3795));
                                float _5160 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3940 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _3944 = sqrt(_3929) * _3810.w;
                                float _3946 = 1.39999997615814208984375 / (_3944 + 1.39999997615814208984375);
                                float _3947 = _3946 * _3946;
                                float _3950 = ((1.0 - _3947) * dot(vec3(_3933, _3934, _3935), vec3(_1075, _1078, _1081))) + _3947;
                                float _3953 = _3944 * _3944;
                                float _3957 = (fma(_2242, _3837.z, fma(_2241, _3837.y, _3837.x * _2240)) + _3837.w) / _3898;
                                float _3958 = (fma(_2242, _3852.z, fma(_2241, _3852.y, _3852.x * _2240)) + _3852.w) / _3898;
                                float _3962 = 1.0 - dot(vec2(_3957, _3958), vec2(_3957, _3958));
                                float _5176 = isnan(0.0) ? _3962 : (isnan(_3962) ? 0.0 : max(_3962, 0.0));
                                float _3963 = isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0));
                                float _3964 = _3963 * (((isnan(0.0) ? _3950 : (isnan(_3950) ? 0.0 : max(_3950, 0.0))) * _3940) / ((_3953 * 0.699999988079071044921875) + 1.0));
                                float _3976 = exp2(log2(1.0 / ((_3953 * 3.5) + 5.0)) * 0.25);
                                float _3977 = 1.0 - _1150;
                                float _3984 = sqrt(1.0 - ((1.0 - (_3977 * _3977)) * (1.0 - (_3976 * _3976))));
                                float _3985 = _3984 * _3984;
                                float _3986 = _3985 * _3985;
                                float _3987 = _3933 - _3407;
                                float _3988 = _3934 - _3408;
                                float _3989 = _3935 - _3409;
                                float _3993 = inversesqrt(dot(vec3(_3987, _3988, _3989), vec3(_3987, _3988, _3989)));
                                float _3997 = dot(vec3(_1075, _1078, _1081), vec3((-0.0) - _3407, (-0.0) - _3408, (-0.0) - _3409));
                                float _5187 = isnan(0.0) ? _3997 : (isnan(_3997) ? 0.0 : max(_3997, 0.0));
                                float _4000 = isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0));
                                float _4001 = dot(vec3(_1075, _1078, _1081), vec3(_3993 * _3987, _3993 * _3988, _3993 * _3989));
                                float _5198 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4004 = isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0));
                                float _4008 = ((_4004 * _4004) * (_3986 + (-1.0))) + 1.0;
                                float _4009 = _3946 * _3985;
                                float _4010 = _4009 * _4009;
                                float _4016 = ((1.0 - _4010) * dot(vec3(_1075, _1078, _1081), vec3(_3933, _3934, _3935))) + _4010;
                                float _5209 = isnan(0.0) ? _4016 : (isnan(_4016) ? 0.0 : max(_4016, 0.0));
                                float _4017 = isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0));
                                float _4018 = 1.0 - _3985;
                                float _4028 = (0.5 / (((_4017 * ((_4000 * _4018) + _3985)) + 9.9999999392252902907785028219223e-09) + (((_4017 * _4018) + _3985) * _4000))) * _4017;
                                float _5220 = isnan(0.0) ? _4028 : (isnan(_4028) ? 0.0 : max(_4028, 0.0));
                                float _4038 = (_3963 * _3940) * (((_3986 * 3.1415927410125732421875) * (isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0)))) / ((_4008 * _4008) * ((_3953 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3964 * _3810.z;
                                frontier_phi_88_pred_1 = _3964 * _3810.y;
                                frontier_phi_88_pred_2 = _3964 * _3810.x;
                                frontier_phi_88_pred_3 = _4038 * _3822.z;
                                frontier_phi_88_pred_4 = _4038 * _3822.y;
                                frontier_phi_88_pred_5 = _4038 * _3822.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4047 = frontier_phi_88_pred;
                            _4046 = frontier_phi_88_pred_1;
                            _4045 = frontier_phi_88_pred_2;
                            _4044 = frontier_phi_88_pred_3;
                            _4043 = frontier_phi_88_pred_4;
                            _4042 = frontier_phi_88_pred_5;
                            _3752 = _4045 + _3765;
                            _3753 = _4046 + _3766;
                            _3754 = _4047 + _3767;
                            _3749 = _4042 + _3762;
                            _3750 = _4043 + _3763;
                            _3751 = _4044 + _3764;
                            if (_3769 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3762 = _3749;
                                _3763 = _3750;
                                _3764 = _3751;
                                _3765 = _3752;
                                _3766 = _3753;
                                _3767 = _3754;
                                _3768 = _3769;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3754;
                        frontier_phi_82_pred_1 = _3753;
                        frontier_phi_82_pred_2 = _3752;
                        frontier_phi_82_pred_3 = _3751;
                        frontier_phi_82_pred_4 = _3750;
                        frontier_phi_82_pred_5 = _3749;
                    }
                    _3392 = frontier_phi_82_pred;
                    _3390 = frontier_phi_82_pred_1;
                    _3388 = frontier_phi_82_pred_2;
                    _3386 = frontier_phi_82_pred_3;
                    _3384 = frontier_phi_82_pred_4;
                    _3382 = frontier_phi_82_pred_5;
                    uint _3548 = _3547 + 1u;
                    if (_3548 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3541 = _3382;
                        _3542 = _3384;
                        _3543 = _3386;
                        _3544 = _3388;
                        _3545 = _3390;
                        _3546 = _3392;
                        _3547 = _3548;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3388;
                frontier_phi_63_64_ladder_1 = _3392;
                frontier_phi_63_64_ladder_2 = _3390;
                frontier_phi_63_64_ladder_3 = _3386;
                frontier_phi_63_64_ladder_4 = _3384;
                frontier_phi_63_64_ladder_5 = _3382;
            }
            else
            {
                frontier_phi_63_64_ladder = _3267;
                frontier_phi_63_64_ladder_1 = _3271;
                frontier_phi_63_64_ladder_2 = _3269;
                frontier_phi_63_64_ladder_3 = _3265;
                frontier_phi_63_64_ladder_4 = _3263;
                frontier_phi_63_64_ladder_5 = _3261;
            }
            _3381 = frontier_phi_63_64_ladder_5;
            _3383 = frontier_phi_63_64_ladder_4;
            _3385 = frontier_phi_63_64_ladder_3;
            _3387 = frontier_phi_63_64_ladder;
            _3389 = frontier_phi_63_64_ladder_2;
            _3391 = frontier_phi_63_64_ladder_1;
        }
        float _3396 = isnan(1.0) ? _1134 : (isnan(_1134) ? 1.0 : min(_1134, 1.0));
        _3194 = (_3396 * _3387) + _2706;
        _3196 = (_3396 * _3389) + _2708;
        _3198 = (_3396 * _3391) + _2710;
        _3200 = ((_3381 * _1118) * _3396) + _3044;
        _3202 = ((_3383 * _1120) * _3396) + _3046;
        _3204 = ((_3385 * _1121) * _3396) + _3048;
    }
    else
    {
        _3194 = _2706;
        _3196 = _2708;
        _3198 = _2710;
        _3200 = _3044;
        _3202 = _3046;
        _3204 = _3048;
    }
    float _5236 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _5247 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _5258 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _3221 = ((isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0))) * (_3194 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1134))) + ((_3200 + ((isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _3222 = ((isnan(1.0) ? _5247 : (isnan(_5247) ? 1.0 : min(_5247, 1.0))) * (_3196 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1134))) + ((_3202 + ((isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    float _3223 = ((isnan(1.0) ? _5258 : (isnan(_5258) ? 1.0 : min(_5258, 1.0))) * (_3198 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1134))) + ((_3204 + ((isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0))) * _1972)) * cbPerFrame._m0[3u].x);
    uint _3224 = _267 + 6u;
    float _3232 = _1056 / cbSceneParam._m0[86u].x;
    float _3233 = _1057 / cbSceneParam._m0[86u].y;
    vec4 _3247 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3232, _3233, (log2((isnan(cbSceneParam._m0[77u].w) ? _979 : (isnan(_979) ? cbSceneParam._m0[77u].w : min(_979, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3249 = _3247.x;
    float _3250 = _3247.y;
    float _3251 = _3247.z;
    float _3252 = _3247.w;
    float _3323;
    float _3325;
    float _3327;
    float _3329;
    if (_979 > cbSceneParam._m0[78u].w)
    {
        float _3286 = isnan(_979) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _979 : min(cbSceneParam._m0[80u].w, _979));
        float _3287 = _3286 / _979;
        float _3298 = _3287 * _1029;
        float _3299 = _1030 * _3287;
        float _3300 = (-0.0) - _3299;
        float _3301 = _3287 * _1031;
        float _3303 = (cbSceneParam._m0[77u].w * _3300) / _3286;
        float _3304 = _3303 + cbSceneParam._m0[79u].w;
        float _3305 = cbSceneParam._m0[79u].w - _3299;
        float _3311 = sqrt(((_3298 * _3298) + (_3299 * _3299)) + (_3301 * _3301));
        float _3314 = (1.0 - (cbSceneParam._m0[77u].w / _3286)) * _3311;
        float _3319 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3321 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3498;
        if (abs((_3300 - _3303) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3498 = ((((_3304 > 0.0) ? exp2(_3319 * _3304) : (2.0 - exp2(_3321 * _3304))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3314;
        }
        else
        {
            float _3442 = 1.0 / cbSceneParam._m0[80u].x;
            float _3443 = isnan(_3305) ? _3304 : (isnan(_3304) ? _3305 : max(_3304, _3305));
            float _3444 = isnan(_3305) ? _3304 : (isnan(_3304) ? _3305 : min(_3304, _3305));
            float _3453 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : min(_3443, 0.0));
            float _3454 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : min(_3444, 0.0));
            _3498 = ((abs(_3311 / _3300) * cbSceneParam._m0[80u].y) * ((((_3453 - _3454) * 2.0) - ((exp2(_3319 * (isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0)))) - exp2(_3319 * (isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))))) * _3442)) - ((exp2(_3321 * _3453) - exp2(_3321 * _3454)) * _3442))) + (_3314 * cbSceneParam._m0[80u].z);
        }
        vec4 _3500 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3232, _3233, 1.0), 0.0);
        float _3509 = exp2((_3498 * (-1.44269502162933349609375)) * (1.0 - _3500.w));
        float _3510 = log2(_3509);
        float _3526 = log2(_3252);
        _3323 = (exp2(_3526 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3510 * cbSceneParam._m0[78u].x)) * _3500.x) / cbSceneParam._m0[78u].x)) + _3249;
        _3325 = (exp2(_3526 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3510 * cbSceneParam._m0[78u].y)) * _3500.y) / cbSceneParam._m0[78u].y)) + _3250;
        _3327 = (exp2(_3526 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3510 * cbSceneParam._m0[78u].z)) * _3500.z) / cbSceneParam._m0[78u].z)) + _3251;
        _3329 = _3509 * _3252;
    }
    else
    {
        _3323 = _3249;
        _3325 = _3250;
        _3327 = _3251;
        _3329 = _3252;
    }
    bool _3536;
    vec4 _3339;
    vec4 _3361;
    float _3363;
    float _3367;
    float _3368;
    float _3369;
    float _3370;
    bool _3380;
    for (;;)
    {
        _3339 = cbMatDynParam._m0[0u];
        float _3341 = roundEven(_3339.y);
        bool _3342 = _3341 == 3.0;
        float _3343 = log2(_3329);
        float _3350 = exp2(_3343 * cbSceneParam._m0[78u].x) * _3221;
        float _3351 = exp2(_3343 * cbSceneParam._m0[78u].y) * _3222;
        float _3352 = exp2(_3343 * cbSceneParam._m0[78u].z) * _3223;
        float _3359 = _1045 + (-0.5);
        _3361 = cbMtdParam._m0[1u];
        _3363 = _3361.y * _3359;
        float _3366 = (_3341 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3367 = _3366 * (_3342 ? _3350 : (_3350 + (cbSceneParam._m0[72u].w * _3323)));
        _3368 = _3366 * (_3342 ? _3351 : (_3351 + (cbSceneParam._m0[72u].w * _3325)));
        _3369 = _3366 * (_3342 ? _3352 : (_3352 + (cbSceneParam._m0[72u].w * _3327)));
        _3370 = _3359 * 0.999000012874603271484375;
        _3380 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3380)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3370) < 0.5)
            {
                _3536 = true;
                break;
            }
        }
        uint _3477 = _1094 + uint(_3339.w);
        if ((cbInstanceData._m0[_3477].w < 1.0) && ((cbInstanceData._m0[_3477].w + _3370) < 0.5))
        {
            _3536 = true;
            break;
        }
        if ((_3363 + 1.0) < _3361.x)
        {
            _3536 = true;
            break;
        }
        _3536 = false;
        break;
    }
    float _3740;
    if (_3536)
    {
        discard_state = true;
        _3740 = 0.0;
    }
    else
    {
        _3740 = cbInstanceData._m0[_3224].w;
    }
    SV_Target.x = _3367;
    SV_Target.y = _3368;
    SV_Target.z = _3369;
    SV_Target.w = _3740;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3224].w;
    discard_exit();
}


