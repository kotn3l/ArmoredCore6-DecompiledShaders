#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1485;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _366.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[23u].w) + _419) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4092 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _444 = (_437 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _445 = (_437 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _446 = (_437 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _366.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[23u].w) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4103 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _557 = _555.x;
    float _567 = dot(vec4(_557, _555.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _579 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _366.z) * 2.0) - ((((_557 - _567) * cbMtdParam._m0[23u].w) + _567) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4114 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _593 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_580 * ((_538.x * cbMtdParam._m0[14u].x) - _517)) + _517);
    float _596 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_580 * ((_538.y * cbMtdParam._m0[14u].y) - _518)) + _518);
    float _599 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_580 * ((_538.z * cbMtdParam._m0[14u].z) - _519)) + _519);
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _638 = _634.z;
    float _645 = ((_617.x - _636) * _437) + _636;
    float _646 = ((_617.y - _637) * _437) + _637;
    float _647 = ((_617.z - _638) * _437) + _638;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _670 = ((_659.x - _645) * _510) + _645;
    float _671 = ((_659.y - _646) * _510) + _646;
    float _672 = ((_659.z - _647) * _510) + _647;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _697 = ((_684.z - _672) * _580) + _672;
    float _700 = ((((_684.x - _670) * _580) + _670) * 2.0) + (-1.0);
    float _702 = ((((_684.y - _671) * _580) + _671) * 2.0) + (-1.0);
    float _703 = dot(vec2(_700, _702), vec2(_700, _702));
    float _4125 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _708 = sqrt(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _734 = (((_722.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _700;
    float _735 = (((_722.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _702;
    float _738 = fma(_708, _244, fma(_735, _251, _734 * _237));
    float _741 = fma(_708, _245, fma(_735, _252, _734 * _238));
    float _744 = fma(_708, _246, fma(_735, _253, _734 * _239));
    float _748 = inversesqrt(dot(vec3(_738, _741, _744), vec3(_738, _741, _744)));
    vec4 _775 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _777 = _775.x;
    float _778 = 1.0 - _777;
    float _786 = (cbMtdParam._m0[19u].x + dot(vec4(_748 * _738, _748 * _741, _748 * _744, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_777 - _778) * cbMtdParam._m0[24u].z) + _778) * cbMtdParam._m0[21u].z);
    float _4136 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _787 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _794 = (_787 * (cbMtdParam._m0[17u].x - _593)) + _593;
    float _795 = (_787 * (cbMtdParam._m0[17u].y - _596)) + _596;
    float _796 = (_787 * (cbMtdParam._m0[17u].z - _599)) + _599;
    vec4 _822 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _824 = _822.x;
    float _841 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _824) * _437) + _824;
    float _858 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _841) * _510) + _841;
    float _876 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _276) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _277) + cbTextureTilingScale._m0[10u].w)).x - _858) * _580) + _858;
    float _880 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _876) * cbMtdParam._m0[19u].z) + _876;
    float _882 = _880 - (_880 * _787);
    float _886 = (cbMtdParam._m0[19u].w * (_722.z - _697)) + _697;
    vec4 _899 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _906 = (_899.x * 2.0) + (-1.0);
    float _907 = (_899.y * 2.0) + (-1.0);
    float _908 = dot(vec2(_906, _907), vec2(_906, _907));
    float _4147 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _916 = ((_899.z - _886) * _787) + _886;
    float _926 = ((sqrt(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) - _708) * _787) + _708;
    float _929 = (((_906 - _734) * _787) + _734) + (cbMtdParam._m0[21u].x * _734);
    float _930 = (((_907 - _735) * _787) + _735) + (cbMtdParam._m0[21u].x * _735);
    float _932 = cbMtdParam._m0[22u].x + _722.w;
    float _935 = fma(_926, _244, fma(_930, _251, _929 * _237));
    float _938 = fma(_926, _245, fma(_930, _252, _929 * _238));
    float _941 = fma(_926, _246, fma(_930, _253, _929 * _239));
    float _945 = inversesqrt(dot(vec3(_935, _938, _941), vec3(_935, _938, _941)));
    float _946 = _945 * _935;
    float _947 = _945 * _938;
    float _948 = _945 * _941;
    float _4158 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _949 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4180 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4191 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4202 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4213 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _954 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _968 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1018 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1008);
    float _1019 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1008);
    float _1020 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1008);
    float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
    float _1025 = _1018 * _1024;
    float _1026 = _1019 * _1024;
    float _1027 = _1020 * _1024;
    float _1033 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1034 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1052 = fma(_948, cbSceneParam._m0[5u].z, fma(_947, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _946));
    float _1055 = fma(_948, cbSceneParam._m0[6u].z, fma(_947, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _946));
    float _1058 = fma(_948, cbSceneParam._m0[7u].z, fma(_947, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _946));
    uint _1072 = (_256 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1078 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * cbInstanceData._m0[_1072].x;
    float _1079 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * cbInstanceData._m0[_1072].y;
    float _1080 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * cbInstanceData._m0[_1072].z;
    float _4224 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _4235 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _1084 = 1.0 - _954;
    float _1085 = _1081 * _1084;
    float _1086 = _1082 * _1084;
    float _1087 = _1083 * _1084;
    float _1092 = (_1081 + (-0.039999999105930328369140625)) * _954;
    float _1093 = (_1082 + (-0.039999999105930328369140625)) * _954;
    float _1094 = (_1083 + (-0.039999999105930328369140625)) * _954;
    float _1095 = _1092 + 0.039999999105930328369140625;
    float _1097 = _1093 + 0.039999999105930328369140625;
    float _1098 = _1094 + 0.039999999105930328369140625;
    vec4 _1107 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1033, cbSceneParam._m0[86u].y * _1034));
    float _1111 = ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * TEXCOORD_5.w) * _1107.x;
    float _1112 = dot(vec3(_946, _947, _948), vec3(_1025, _1026, _1027));
    float _1115 = _1112 * 2.0;
    float _1119 = (_1115 * _946) - _1025;
    float _1120 = (_1115 * _947) - _1026;
    float _1121 = (_1115 * _948) - _1027;
    float _1125 = abs(dot(vec3(_1025, _1026, _1027), vec3(_946, _947, _948)));
    float _4257 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1127 = sqrt(_949);
    float _1140 = exp2((_1127 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1127 * 3.0));
    float _1146 = (1.0 - _1140) * ((_1127 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1147 = _1140 * _1127;
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1484;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1209 = fma(_1183, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175));
        float _1213 = fma(_1183, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175));
        float _1217 = fma(_1183, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175));
        float _1242 = _1175 + _946;
        float _1243 = _1179 + _947;
        float _1244 = _1183 + _948;
        float _1254 = fma(_1244, cbModelParam._m0[26u].z, fma(_1243, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1242)) - _1209;
        float _1255 = fma(_1244, cbModelParam._m0[27u].z, fma(_1243, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1242)) - _1213;
        float _1256 = fma(_1244, cbModelParam._m0[28u].z, fma(_1243, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1242)) - _1217;
        float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
        float _1273 = ((_1260 * _1254) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1209 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1260 * _1255) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1213 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1260 * _1256) / cbModelParam._m0[34u].z) + ((((((_1217 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        float _1312 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1278.x + (-0.5));
        float _1314 = _1312 * (_1278.y + (-0.5));
        float _1315 = _1312 * (_1278.z + (-0.5));
        float _1322 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1285.x + (-0.5));
        float _1324 = _1322 * (_1285.y + (-0.5));
        float _1325 = _1322 * (_1285.z + (-0.5));
        float _1332 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1292.x + (-0.5));
        float _1334 = _1332 * (_1292.y + (-0.5));
        float _1335 = _1332 * (_1292.z + (-0.5));
        float _1342 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1299.x + (-0.5));
        float _1344 = _1342 * (_1299.y + (-0.5));
        float _1345 = _1342 * (_1299.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1366 = (dot(vec3(_946, _947, _948), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1376 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4305 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1378 + 1.0))) + _1383) * _1346;
        float _1393 = _1314 * 0.5;
        float _1394 = _1324 * 0.5;
        float _1395 = _1334 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_946, _947, _948), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4338 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1420 + 1.0))) + _1425) * _1347;
        float _1435 = _1315 * 0.5;
        float _1436 = _1325 * 0.5;
        float _1437 = _1335 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_946, _947, _948), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4371 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1462 + 1.0))) + _1467) * _1348;
        _1484 = _1315;
        _1486 = _1314;
        _1487 = _1313;
        _1488 = _1325;
        _1489 = _1324;
        _1490 = _1323;
        _1491 = _1335;
        _1492 = _1334;
        _1493 = _1333;
        _1494 = _1348;
        _1495 = _1347;
        _1496 = _1346;
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    }
    else
    {
        _1484 = _1485;
        _1486 = _1485;
        _1487 = _1485;
        _1488 = _1485;
        _1489 = _1485;
        _1490 = _1485;
        _1491 = _1485;
        _1492 = _1485;
        _1493 = _1485;
        _1494 = _1485;
        _1495 = _1485;
        _1496 = _1485;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1522 = fma(_1183, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175));
        float _1526 = fma(_1183, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175));
        float _1530 = fma(_1183, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175));
        float _1553 = _1175 + _946;
        float _1554 = _1179 + _947;
        float _1555 = _1183 + _948;
        float _1565 = fma(_1555, cbModelParam._m0[30u].z, fma(_1554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1553)) - _1522;
        float _1566 = fma(_1555, cbModelParam._m0[31u].z, fma(_1554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1553)) - _1526;
        float _1567 = fma(_1555, cbModelParam._m0[32u].z, fma(_1554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1553)) - _1530;
        float _1571 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
        float _1584 = ((_1571 * _1565) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1522 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1571 * _1566) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1526 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1571 * _1567) / cbModelParam._m0[35u].z) + ((((((_1530 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        float _1621 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1588.x + (-0.5));
        float _1623 = _1621 * (_1588.y + (-0.5));
        float _1624 = _1621 * (_1588.z + (-0.5));
        float _1631 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1595.x + (-0.5));
        float _1633 = _1631 * (_1595.y + (-0.5));
        float _1634 = _1631 * (_1595.z + (-0.5));
        float _1641 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1602.x + (-0.5));
        float _1643 = _1641 * (_1602.y + (-0.5));
        float _1644 = _1641 * (_1602.z + (-0.5));
        float _1651 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1609.x + (-0.5));
        float _1653 = _1651 * (_1609.y + (-0.5));
        float _1654 = _1651 * (_1609.z + (-0.5));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = _1622 * 0.5;
        float _1659 = _1632 * 0.5;
        float _1660 = _1642 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_946, _947, _948), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4434 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1685 + 1.0))) + _1690) * _1655;
        float _1700 = _1623 * 0.5;
        float _1701 = _1633 * 0.5;
        float _1702 = _1643 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_946, _947, _948), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4445 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4456 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4467 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_1727 + 1.0))) + _1732) * _1656;
        float _1742 = _1624 * 0.5;
        float _1743 = _1634 * 0.5;
        float _1744 = _1644 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_946, _947, _948), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4478 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4489 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4500 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_1769 + 1.0))) + _1774) * _1657;
        _1791 = _1624;
        _1792 = _1623;
        _1793 = _1622;
        _1794 = _1634;
        _1795 = _1633;
        _1796 = _1632;
        _1797 = _1644;
        _1798 = _1643;
        _1799 = _1642;
        _1800 = _1657;
        _1801 = _1656;
        _1802 = _1655;
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
    }
    else
    {
        _1791 = _1485;
        _1792 = _1485;
        _1793 = _1485;
        _1794 = _1485;
        _1795 = _1485;
        _1796 = _1485;
        _1797 = _1485;
        _1798 = _1485;
        _1799 = _1485;
        _1800 = _1485;
        _1801 = _1485;
        _1802 = _1485;
        _1803 = 0.0;
        _1804 = 0.0;
        _1805 = 0.0;
    }
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1497)) + _1497;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1498)) + _1498;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1499)) + _1499;
    float _1838 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1815));
    float _1859 = _1119 * 0.5;
    float _1860 = _1120 * 0.5;
    float _1861 = _1121 * 0.5;
    float _1862 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1865 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1868 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1902;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1875 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1484, _1488, _1491, _1494));
        float _1879 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1883 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1487, _1490, _1493, _1496));
        float _1890 = dot(vec4(cbModelParam._m0[39u]), vec4(_1859, _1860, _1861, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1913;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1904 = dot(vec4(cbModelParam._m0[40u]), vec4(_1859, _1860, _1861, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1917 = (_1913 * cbModelParam._m0[1u].x) + (_1902 * (1.0 - cbModelParam._m0[1u].x));
    float _1927 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _949);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1927 : min(cbModelParam._m0[25u].z, _1927));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1975 = fma(_1183, cbModelParam._m0[13u].z, fma(_1179, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1175)) + cbModelParam._m0[13u].w;
        float _1979 = fma(_1183, cbModelParam._m0[14u].z, fma(_1179, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1175)) + cbModelParam._m0[14u].w;
        float _1983 = fma(_1183, cbModelParam._m0[15u].z, fma(_1179, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1175)) + cbModelParam._m0[15u].w;
        float _1986 = fma(_1121, cbModelParam._m0[13u].z, fma(_1120, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1119));
        float _1989 = fma(_1121, cbModelParam._m0[14u].z, fma(_1120, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1119));
        float _1992 = fma(_1121, cbModelParam._m0[15u].z, fma(_1120, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1119));
        float _2020;
        if (_1986 > 0.0)
        {
            _2020 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2020 = frontier_phi_14_12_ladder;
        }
        float _2192;
        if (_1989 > 0.0)
        {
            _2192 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2192 = frontier_phi_23_19_ladder;
        }
        float _2487;
        if (_1992 > 0.0)
        {
            _2487 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2487 = frontier_phi_35_30_ladder;
        }
        float _2489 = isnan(_2192) ? _2020 : (isnan(_2020) ? _2192 : min(_2020, _2192));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1986) + _1975;
        float _2495 = (_2490 * _1989) + _1979;
        float _2496 = (_2490 * _1992) + _1983;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2497;
        float _2501 = _2497 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 > _2501) || ((_2495 < _2499) || ((_2494 < _2499) || (_2494 > _2501))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2496, cbModelParam._m0[9u].z, fma(_2495, cbModelParam._m0[9u].y, _2494 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2496, cbModelParam._m0[10u].z, fma(_2495, cbModelParam._m0[10u].y, _2494 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2496, cbModelParam._m0[11u].z, fma(_2495, cbModelParam._m0[11u].y, _2494 * cbModelParam._m0[11u].x))), _1928);
            frontier_phi_13_35_ladder = _2641.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2641.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2641.x * cbModelParam._m0[1u].y;
        }
        _2008 = frontier_phi_13_35_ladder_2;
        _2010 = frontier_phi_13_35_ladder_1;
        _2012 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1119, _1120, _1121), _1928);
        _2008 = _1996.x * cbModelParam._m0[1u].y;
        _2010 = _1996.y * cbModelParam._m0[1u].y;
        _2012 = _1996.z * cbModelParam._m0[1u].y;
    }
    float _2016 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _949);
    float _2017 = isnan(_2016) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2016 : min(cbModelParam._m0[25u].w, _2016));
    float _2107;
    float _2109;
    float _2111;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2071 = fma(_1183, cbModelParam._m0[21u].z, fma(_1179, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1175)) + cbModelParam._m0[21u].w;
        float _2075 = fma(_1183, cbModelParam._m0[22u].z, fma(_1179, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1175)) + cbModelParam._m0[22u].w;
        float _2079 = fma(_1183, cbModelParam._m0[23u].z, fma(_1179, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1175)) + cbModelParam._m0[23u].w;
        float _2082 = fma(_1121, cbModelParam._m0[21u].z, fma(_1120, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1119));
        float _2085 = fma(_1121, cbModelParam._m0[22u].z, fma(_1120, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1119));
        float _2088 = fma(_1121, cbModelParam._m0[23u].z, fma(_1120, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1119));
        float _2197;
        if (_2082 > 0.0)
        {
            _2197 = abs((1.0 - _2071) / _2082);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2071 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2197 = frontier_phi_25_21_ladder;
        }
        float _2514;
        if (_2085 > 0.0)
        {
            _2514 = abs((1.0 - _2075) / _2085);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2075 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2514 = frontier_phi_37_32_ladder;
        }
        float _2852;
        if (_2088 > 0.0)
        {
            _2852 = abs((1.0 - _2079) / _2088);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2079 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2852 = frontier_phi_47_44_ladder;
        }
        float _2854 = isnan(_2514) ? _2197 : (isnan(_2197) ? _2514 : min(_2197, _2514));
        float _2855 = isnan(_2852) ? _2854 : (isnan(_2854) ? _2852 : min(_2854, _2852));
        float _2859 = (_2855 * _2082) + _2071;
        float _2860 = (_2855 * _2085) + _2075;
        float _2861 = (_2855 * _2088) + _2079;
        float _2862 = _2855 * 9.9999997473787516355514526367188e-05;
        float _2863 = (-1.0) - _2862;
        float _2865 = _2862 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2861 > _2865) || ((_2861 < _2863) || ((_2860 > _2865) || ((_2860 < _2863) || ((_2859 < _2863) || (_2859 > _2865))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2861, cbModelParam._m0[17u].z, fma(_2860, cbModelParam._m0[17u].y, _2859 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2861, cbModelParam._m0[18u].z, fma(_2860, cbModelParam._m0[18u].y, _2859 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2861, cbModelParam._m0[19u].z, fma(_2860, cbModelParam._m0[19u].y, _2859 * cbModelParam._m0[19u].x))), _2017);
            frontier_phi_22_47_ladder = _2983.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2983.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2983.x * cbModelParam._m0[1u].z;
        }
        _2107 = frontier_phi_22_47_ladder_2;
        _2109 = frontier_phi_22_47_ladder_1;
        _2111 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2091 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1119, _1120, _1121), _2017);
        _2107 = _2091.x * cbModelParam._m0[1u].z;
        _2109 = _2091.y * cbModelParam._m0[1u].z;
        _2111 = _2091.z * cbModelParam._m0[1u].z;
    }
    float _2124 = (((_1146 * _1095) + _1147) * _1111) * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2126 = (((_1146 * _1097) + _1147) * _1111) * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2128 = (((_1146 * _1098) + _1147) * _1111) * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2131 = fma(_2128, cbSceneParam._m0[89u].z, fma(_2126, cbSceneParam._m0[89u].y, _2124 * cbSceneParam._m0[89u].x));
    float _2134 = fma(_2128, cbSceneParam._m0[90u].z, fma(_2126, cbSceneParam._m0[90u].y, _2124 * cbSceneParam._m0[90u].x));
    float _2137 = fma(_2128, cbSceneParam._m0[91u].z, fma(_2126, cbSceneParam._m0[91u].y, _2124 * cbSceneParam._m0[91u].x));
    float _2171 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2179 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2183 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2184 = _2171 / _2183;
    float _2185 = _2175 / _2183;
    float _2186 = _2179 / _2183;
    float _2333;
    float _2334;
    float _2335;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2213 = ((uint(_2186 > cbSceneParam._m0[59u].y) + uint(_2186 > cbSceneParam._m0[59u].x)) + uint(_2186 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2214 = _2213 + 43u;
        uint _2222 = _2213 + 44u;
        uint _2230 = _2213 + 45u;
        uint _2238 = _2213 + 46u;
        float _2249 = fma(_2183, cbSceneParam._m0[_2214].w, fma(_2179, cbSceneParam._m0[_2214].z, fma(_2175, cbSceneParam._m0[_2214].y, _2171 * cbSceneParam._m0[_2214].x)));
        float _2253 = fma(_2183, cbSceneParam._m0[_2222].w, fma(_2179, cbSceneParam._m0[_2222].z, fma(_2175, cbSceneParam._m0[_2222].y, _2171 * cbSceneParam._m0[_2222].x)));
        float _2261 = fma(_2183, cbSceneParam._m0[_2238].w, fma(_2179, cbSceneParam._m0[_2238].z, fma(_2175, cbSceneParam._m0[_2238].y, _2171 * cbSceneParam._m0[_2238].x)));
        float _2266 = cbSceneParam._m0[33u].z * _2261;
        float _2268 = cbSceneParam._m0[33u].w * _2261;
        float _2271 = fma(_2183, cbSceneParam._m0[_2230].w, fma(_2179, cbSceneParam._m0[_2230].z, fma(_2175, cbSceneParam._m0[_2230].y, _2171 * cbSceneParam._m0[_2230].x))) / _2261;
        float _2319 = (cbSceneParam._m0[33u].x - sqrt(((_2185 * _2185) + (_2184 * _2184)) + (_2186 * _2186))) * cbSceneParam._m0[33u].y;
        float _4626 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2326 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2266 + _2249) / _2261, (_2268 + _2253) / _2261), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 + _2249) / _2261, (_2253 - _2266) / _2261), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2249 - _2266) / _2261, (_2253 - _2268) / _2261), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2249 - _2268) / _2261, (_2266 + _2253) / _2261), _2271), 0.0)).x), vec4(0.25)));
        _2333 = 1.0 - (_2326 * cbSceneParam._m0[34u].x);
        _2334 = 1.0 - (_2326 * cbSceneParam._m0[34u].y);
        _2335 = 1.0 - (_2326 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2333 = 1.0;
        _2334 = 1.0;
        _2335 = 1.0;
    }
    float _2399;
    float _2401;
    float _2403;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2387 = fma(_2183, cbSceneParam._m0[63u].w, fma(_2179, cbSceneParam._m0[63u].z, fma(_2175, cbSceneParam._m0[63u].y, _2171 * cbSceneParam._m0[63u].x)));
        float _2388 = fma(_2183, cbSceneParam._m0[60u].w, fma(_2179, cbSceneParam._m0[60u].z, fma(_2175, cbSceneParam._m0[60u].y, _2171 * cbSceneParam._m0[60u].x))) / _2387;
        float _2389 = fma(_2183, cbSceneParam._m0[61u].w, fma(_2179, cbSceneParam._m0[61u].z, fma(_2175, cbSceneParam._m0[61u].y, _2171 * cbSceneParam._m0[61u].x))) / _2387;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2388 >= cbSceneParam._m0[64u].x) && (_2389 >= cbSceneParam._m0[64u].y)) && (_2388 <= cbSceneParam._m0[64u].z)) && (_2389 <= cbSceneParam._m0[64u].w))
        {
            float _2527 = fma(_2183, cbSceneParam._m0[62u].w, fma(_2179, cbSceneParam._m0[62u].z, fma(_2175, cbSceneParam._m0[62u].y, _2171 * cbSceneParam._m0[62u].x))) / _2387;
            float _2531 = isnan(cbSceneParam._m0[41u].w) ? _2527 : (isnan(_2527) ? cbSceneParam._m0[41u].w : max(_2527, cbSceneParam._m0[41u].w));
            float _2574 = (cbSceneParam._m0[33u].x - sqrt(((_2185 * _2185) + (_2184 * _2184)) + (_2186 * _2186))) * cbSceneParam._m0[33u].y;
            float _4642 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
            float _2581 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2388, cbSceneParam._m0[33u].w + _2389), _2531), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2388, _2389 - cbSceneParam._m0[33u].z), _2531), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2388 - cbSceneParam._m0[33u].z, _2389 - cbSceneParam._m0[33u].w), _2531), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2388 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2389), _2531), 0.0)).x), vec4(0.25)));
            float _2585 = 1.0 - (_2581 * cbSceneParam._m0[34u].x);
            float _2586 = 1.0 - (_2581 * cbSceneParam._m0[34u].y);
            float _2587 = 1.0 - (_2581 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2587) ? _2335 : (isnan(_2335) ? _2587 : min(_2335, _2587));
            frontier_phi_34_33_ladder_1 = isnan(_2586) ? _2334 : (isnan(_2334) ? _2586 : min(_2334, _2586));
            frontier_phi_34_33_ladder_2 = isnan(_2585) ? _2333 : (isnan(_2333) ? _2585 : min(_2333, _2585));
        }
        else
        {
            frontier_phi_34_33_ladder = _2335;
            frontier_phi_34_33_ladder_1 = _2334;
            frontier_phi_34_33_ladder_2 = _2333;
        }
        _2399 = frontier_phi_34_33_ladder_2;
        _2401 = frontier_phi_34_33_ladder_1;
        _2403 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2399 = _2333;
        _2401 = _2334;
        _2403 = _2335;
    }
    uvec4 _2408 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2410 = _2408.x * 14u;
    uint _2411 = _2410 + 13u;
    float _2418 = _1111 + (-1.0);
    float _2423 = (cbLight._m0[_2411].x * _2418) + 1.0;
    float _2424 = (cbLight._m0[_2411].y * _2418) + 1.0;
    float _2425 = (cbLight._m0[_2411].z * _2418) + 1.0;
    float _2426 = (cbLight._m0[_2411].w * _2418) + 1.0;
    uint _2427 = _2410 + 5u;
    float _2433 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
    uint _2437 = _2410 + 4u;
    float _2446 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
    uint _2450 = _2410 | 1u;
    float _2461 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_946, _947, _948));
    float _2464 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_946, _947, _948));
    float _4678 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _4689 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2469 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * 0.3183098733425140380859375;
    float _2471 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * 0.3183098733425140380859375;
    float _2478 = ((cbLight._m0[_2427].x * _2433) * _2471) + (((cbLight._m0[_2437].x * _2399) * _2446) * _2469);
    float _2479 = ((_2433 * cbLight._m0[_2427].y) * _2471) + (((cbLight._m0[_2437].y * _2401) * _2446) * _2469);
    float _2480 = ((_2433 * cbLight._m0[_2427].z) * _2471) + (((cbLight._m0[_2437].z * _2403) * _2446) * _2469);
    uvec4 _2484 = floatBitsToUint(cbLight._m0[_2410 + 12u]);
    bool _2486 = _2484.x == 0u;
    float _2588;
    float _2590;
    float _2592;
    if (_2486)
    {
        _2588 = _2478;
        _2590 = _2479;
        _2592 = _2480;
    }
    else
    {
        uint _2596 = _2410 + 6u;
        float _2612 = (dot(vec3(cbLight._m0[_2410 + 2u].xyz), vec3(_946, _947, _948)) * 0.5) + 0.5;
        float _2613 = _2612 * _2612;
        float _4700 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2614 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2615 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2588 = (((cbLight._m0[_2596].x * 0.3183098733425140380859375) * _2614) * _2615) + _2478;
        _2590 = (((cbLight._m0[_2596].y * 0.3183098733425140380859375) * _2614) * _2615) + _2479;
        _2592 = (((cbLight._m0[_2596].z * 0.3183098733425140380859375) * _2614) * _2615) + _2480;
    }
    bool _2595 = _2484.y == 0u;
    float _2650;
    float _2652;
    float _2654;
    if (_2595)
    {
        _2650 = _2588;
        _2652 = _2590;
        _2654 = _2592;
    }
    else
    {
        uint _2823 = _2410 + 7u;
        float _2839 = (dot(vec3(cbLight._m0[_2410 + 3u].xyz), vec3(_946, _947, _948)) * 0.5) + 0.5;
        float _2840 = _2839 * _2839;
        float _4716 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2841 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2842 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2650 = (((cbLight._m0[_2823].x * 0.3183098733425140380859375) * _2841) * _2842) + _2588;
        _2652 = (((cbLight._m0[_2823].y * 0.3183098733425140380859375) * _2841) * _2842) + _2590;
        _2654 = (((cbLight._m0[_2823].z * 0.3183098733425140380859375) * _2841) * _2842) + _2592;
    }
    uint _2657 = _2410 + 8u;
    float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _949) * 0.949999988079071044921875);
    float _2671 = _2670 * _2670;
    float _2672 = cbLight._m0[_2410].x + _1025;
    float _2673 = cbLight._m0[_2410].y + _1026;
    float _2674 = cbLight._m0[_2410].z + _1027;
    float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
    float _2679 = _2678 * _2672;
    float _2680 = _2678 * _2673;
    float _2681 = _2678 * _2674;
    float _2682 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2410].xyz));
    float _4732 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2685 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _4743 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _2686 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    float _2687 = dot(vec3(_946, _947, _948), vec3(_2679, _2680, _2681));
    float _4754 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _2691 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2679, _2680, _2681));
    float _4765 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2695 = _2671 * _2671;
    float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
    float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0);
    float _2708 = 0.959999978542327880859375 - _1092;
    float _2710 = 0.959999978542327880859375 - _1093;
    float _2711 = 0.959999978542327880859375 - _1094;
    float _2718 = 1.0 - _2671;
    float _2729 = (0.5 / (((_2686 * ((_2685 * _2718) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2718) + _2671) * _2685))) * _2685;
    float _4776 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2731 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
    uint _2745 = _2410 + 9u;
    float _2756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _949) * 0.949999988079071044921875);
    float _2757 = _2756 * _2756;
    float _2758 = cbLight._m0[_2450].x + _1025;
    float _2759 = cbLight._m0[_2450].y + _1026;
    float _2760 = cbLight._m0[_2450].z + _1027;
    float _2764 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
    float _2765 = _2764 * _2758;
    float _2766 = _2764 * _2759;
    float _2767 = _2764 * _2760;
    float _2768 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2450].xyz));
    float _4787 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2771 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2772 = dot(vec3(_946, _947, _948), vec3(_2765, _2766, _2767));
    float _4798 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2775 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
    float _2776 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2765, _2766, _2767));
    float _4809 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2780 = _2757 * _2757;
    float _2784 = ((_2775 * _2775) * (_2780 + (-1.0))) + 1.0;
    float _2791 = exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0);
    float _2798 = 1.0 - _2757;
    float _2808 = (0.5 / (((_2686 * ((_2771 * _2798) + _2757)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2798) + _2757) * _2771))) * _2771;
    float _4820 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2810 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2780 / ((_2784 * _2784) * 3.141590118408203125));
    float _2820 = (((((_2791 * _2708) + _1095) * cbLight._m0[_2745].x) * _2810) * _2433) + ((((cbLight._m0[_2657].x * _2399) * ((_2707 * _2708) + _1095)) * _2731) * _2446);
    float _2821 = (((((_2791 * _2710) + _1097) * cbLight._m0[_2745].y) * _2810) * _2433) + ((((cbLight._m0[_2657].y * _2401) * ((_2707 * _2710) + _1097)) * _2731) * _2446);
    float _2822 = (((((_2791 * _2711) + _1098) * cbLight._m0[_2745].z) * _2810) * _2433) + ((((cbLight._m0[_2657].z * _2403) * ((_2707 * _2711) + _1098)) * _2731) * _2446);
    float _2878;
    float _2880;
    float _2882;
    if (_2486)
    {
        _2878 = _2820;
        _2880 = _2821;
        _2882 = _2822;
    }
    else
    {
        uint _2884 = _2410 + 2u;
        uint _2888 = _2410 + 10u;
        float _2902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2884].w)) * _949) * 0.949999988079071044921875);
        float _2903 = _2902 * _2902;
        float _2904 = cbLight._m0[_2884].x + _1025;
        float _2905 = cbLight._m0[_2884].y + _1026;
        float _2906 = cbLight._m0[_2884].z + _1027;
        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
        float _2911 = _2910 * _2904;
        float _2912 = _2910 * _2905;
        float _2913 = _2910 * _2906;
        float _2914 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2884].xyz));
        float _4831 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2917 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2918 = dot(vec3(_946, _947, _948), vec3(_2911, _2912, _2913));
        float _4842 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
        float _2922 = dot(vec3(cbLight._m0[_2884].xyz), vec3(_2911, _2912, _2913));
        float _4853 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2926 = _2903 * _2903;
        float _2930 = ((_2921 * _2921) * (_2926 + (-1.0))) + 1.0;
        float _2937 = exp2(log2(1.0 - (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * 5.0);
        float _2944 = 1.0 - _2903;
        float _2954 = (0.5 / (((_2686 * ((_2917 * _2944) + _2903)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2944) + _2903) * _2917))) * _2917;
        float _4864 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2956 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2926 / ((_2930 * _2930) * 3.141590118408203125));
        float _2957 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2878 = (((((_2937 * _2708) + _1095) * cbLight._m0[_2888].x) * _2956) * _2957) + _2820;
        _2880 = (((((_2937 * _2710) + _1097) * cbLight._m0[_2888].y) * _2956) * _2957) + _2821;
        _2882 = (((((_2937 * _2711) + _1098) * cbLight._m0[_2888].z) * _2956) * _2957) + _2822;
    }
    float _2988;
    float _2990;
    float _2992;
    if (_2595)
    {
        _2988 = _2878;
        _2990 = _2880;
        _2992 = _2882;
    }
    else
    {
        uint _2999 = _2410 + 3u;
        uint _3003 = _2410 + 11u;
        float _3017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2999].w)) * _949) * 0.949999988079071044921875);
        float _3018 = _3017 * _3017;
        float _3019 = cbLight._m0[_2999].x + _1025;
        float _3020 = cbLight._m0[_2999].y + _1026;
        float _3021 = cbLight._m0[_2999].z + _1027;
        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
        float _3026 = _3025 * _3019;
        float _3027 = _3025 * _3020;
        float _3028 = _3025 * _3021;
        float _3029 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2999].xyz));
        float _4880 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3032 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
        float _3033 = dot(vec3(_946, _947, _948), vec3(_3026, _3027, _3028));
        float _4891 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3036 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
        float _3037 = dot(vec3(cbLight._m0[_2999].xyz), vec3(_3026, _3027, _3028));
        float _4902 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        float _3041 = _3018 * _3018;
        float _3045 = ((_3036 * _3036) * (_3041 + (-1.0))) + 1.0;
        float _3052 = exp2(log2(1.0 - (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) * 5.0);
        float _3059 = 1.0 - _3018;
        float _3069 = (0.5 / (((_2686 * ((_3032 * _3059) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _3059) + _3018) * _3032))) * _3032;
        float _4913 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3071 = (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_3041 / ((_3045 * _3045) * 3.141590118408203125));
        float _3072 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2988 = (((((_3052 * _2708) + _1095) * cbLight._m0[_3003].x) * _3071) * _3072) + _2878;
        _2990 = (((((_3052 * _2710) + _1097) * cbLight._m0[_3003].y) * _3071) * _3072) + _2880;
        _2992 = (((((_3052 * _2711) + _1098) * cbLight._m0[_3003].z) * _3071) * _3072) + _2882;
    }
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    float _3148;
    if (_2408.y == 0u)
    {
        uvec4 _3093 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3094 = _3093.x;
        uint _3105 = uint((float(_3093.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1034) / _3094))) + floor(float(uint(cbSceneParam._m0[85u].x * _1033) / _3094)));
        float _3115 = (log2(_2186 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3116 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
        uint _3119 = uint(isnan(14.0) ? _3116 : (isnan(_3116) ? 14.0 : min(_3116, 14.0)));
        uvec4 _3124 = texelFetch(g_lightClusterGridBuffer, int(((_3119 << 2u) + (_3105 << 6u)) >> 2u));
        uint _3125 = _3124.x;
        uint _3126 = _3093.z;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        if (((((1u << ((_3126 >> 4u) & 15u)) + 4294967295u) & _3125) == 0u) || ((_3126 & 240u) == 0u))
        {
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
        }
        else
        {
            float _3206;
            float _3208;
            float _3210;
            float _3212;
            float _3214;
            float _3216;
            float _3350 = 0.0;
            float _3351 = 0.0;
            float _3352 = 0.0;
            float _3353 = 0.0;
            float _3354 = 0.0;
            float _3355 = 0.0;
            uint _3356 = 0u;
            uint _3365;
            bool _3366;
            for (;;)
            {
                _3365 = texelFetch(g_lightClassification, int((((_3119 << 5u) + (_3105 << 9u)) + (_3356 << 2u)) >> 2u)).x;
                _3366 = _3365 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3366)
                {
                    frontier_phi_66_pred = _3355;
                    frontier_phi_66_pred_1 = _3354;
                    frontier_phi_66_pred_2 = _3353;
                    frontier_phi_66_pred_3 = _3352;
                    frontier_phi_66_pred_4 = _3351;
                    frontier_phi_66_pred_5 = _3350;
                }
                else
                {
                    float _3474;
                    float _3475;
                    float _3476;
                    float _3477;
                    float _3478;
                    float _3479;
                    uint _3480;
                    _3474 = _3350;
                    _3475 = _3351;
                    _3476 = _3352;
                    _3477 = _3353;
                    _3478 = _3354;
                    _3479 = _3355;
                    _3480 = _3365;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    for (;;)
                    {
                        uint _3484 = uint(findLSB(_3480)) + (_3356 << 5u);
                        uint _3481 = (_3480 + 4294967295u) & _3480;
                        uint _3486 = _3484 * 48u;
                        vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3486)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 3u)).x));
                        uint _3506 = (_3484 * 48u) + 4u;
                        vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3506)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 3u)).x));
                        uint _3525 = (_3484 * 48u) + 8u;
                        vec3 _3536 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3525)).x, texelFetch(g_PointLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3525 + 2u)).x));
                        float _3540 = _3500.x - _2184;
                        float _3541 = _3500.y - _2185;
                        float _3542 = _3500.z - _2186;
                        float _3543 = dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542));
                        float _3546 = inversesqrt(_3543);
                        float _3547 = _3546 * _3540;
                        float _3548 = _3546 * _3541;
                        float _3549 = _3546 * _3542;
                        float _3550 = dot(vec3(_1052, _1055, _1058), vec3(_3547, _3548, _3549));
                        float _3555 = 1.0 - (_3543 * _3500.w);
                        float _4939 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3556 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                        float _3557 = sqrt(_3543) * _3519.w;
                        float _3560 = 1.39999997615814208984375 / (_3557 + 1.39999997615814208984375);
                        float _3561 = _3560 * _3560;
                        float _3564 = ((1.0 - _3561) * _3550) + _3561;
                        float _3567 = _3557 * _3557;
                        float _3571 = ((isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0))) * _3556) / ((_3567 * 0.699999988079071044921875) + 1.0);
                        float _3575 = (-0.0) - _2184;
                        float _3576 = (-0.0) - _2185;
                        float _3577 = (-0.0) - _2186;
                        float _3581 = inversesqrt(dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577)));
                        float _3582 = _3581 * _3575;
                        float _3583 = _3581 * _3576;
                        float _3584 = _3581 * _3577;
                        float _3591 = exp2(log2(1.0 / ((_3567 * 3.5) + 5.0)) * 0.25);
                        float _3592 = 1.0 - _1127;
                        float _3599 = sqrt(1.0 - ((1.0 - (_3592 * _3592)) * (1.0 - (_3591 * _3591))));
                        float _3600 = _3599 * _3599;
                        float _3601 = _3600 * _3600;
                        float _3602 = _3582 + _3547;
                        float _3603 = _3583 + _3548;
                        float _3604 = _3584 + _3549;
                        float _3608 = inversesqrt(dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604)));
                        float _3612 = dot(vec3(_1052, _1055, _1058), vec3(_3582, _3583, _3584));
                        float _4955 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                        float _3615 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3616 = dot(vec3(_1052, _1055, _1058), vec3(_3608 * _3602, _3608 * _3603, _3608 * _3604));
                        float _4966 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3619 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                        float _3623 = ((_3619 * _3619) * (_3601 + (-1.0))) + 1.0;
                        float _3624 = _3560 * _3600;
                        float _3625 = _3624 * _3624;
                        float _3628 = ((1.0 - _3625) * _3550) + _3625;
                        float _4977 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                        float _3629 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                        float _3630 = 1.0 - _3600;
                        float _3640 = (0.5 / (((_3629 * ((_3615 * _3630) + _3600)) + 9.9999999392252902907785028219223e-09) + (((_3629 * _3630) + _3600) * _3615))) * _3629;
                        float _4988 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                        float _3651 = (((_3601 * 3.1415927410125732421875) * (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) / ((_3623 * _3623) * ((_3567 * 2.1991131305694580078125) + 3.141590118408203125))) * _3556;
                        _3409 = (_3571 * _3519.x) + _3477;
                        _3410 = (_3571 * _3519.y) + _3478;
                        _3411 = (_3571 * _3519.z) + _3479;
                        _3406 = (_3651 * _3536.x) + _3474;
                        _3407 = (_3651 * _3536.y) + _3475;
                        _3408 = (_3651 * _3536.z) + _3476;
                        if (_3481 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3474 = _3406;
                            _3475 = _3407;
                            _3476 = _3408;
                            _3477 = _3409;
                            _3478 = _3410;
                            _3479 = _3411;
                            _3480 = _3481;
                        }
                    }
                    frontier_phi_66_pred = _3411;
                    frontier_phi_66_pred_1 = _3410;
                    frontier_phi_66_pred_2 = _3409;
                    frontier_phi_66_pred_3 = _3408;
                    frontier_phi_66_pred_4 = _3407;
                    frontier_phi_66_pred_5 = _3406;
                }
                _3216 = frontier_phi_66_pred;
                _3214 = frontier_phi_66_pred_1;
                _3212 = frontier_phi_66_pred_2;
                _3210 = frontier_phi_66_pred_3;
                _3208 = frontier_phi_66_pred_4;
                _3206 = frontier_phi_66_pred_5;
                uint _3357 = _3356 + 1u;
                if (_3357 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3350 = _3206;
                    _3351 = _3208;
                    _3352 = _3210;
                    _3353 = _3212;
                    _3354 = _3214;
                    _3355 = _3216;
                    _3356 = _3357;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
        }
        uvec4 _3219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3220 = _3219.z;
        uint _3222 = (_3220 >> 8u) & 15u;
        float _3318;
        float _3320;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        if (((4294967295u << _3222) & _3125) == 0u)
        {
            _3318 = _3205;
            _3320 = _3207;
            _3322 = _3209;
            _3324 = _3211;
            _3326 = _3213;
            _3328 = _3215;
        }
        else
        {
            float _3343 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
            float _3344 = _3343 * _2184;
            float _3345 = _3343 * _2185;
            float _3346 = _3343 * _2186;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3222 < ((_3220 >> 12u) & 15u))
            {
                float _3319;
                float _3321;
                float _3323;
                float _3325;
                float _3327;
                float _3329;
                float _3457 = _3205;
                float _3458 = _3207;
                float _3459 = _3209;
                float _3460 = _3211;
                float _3461 = _3213;
                float _3462 = _3215;
                uint _3463 = _3222;
                uint _3472;
                bool _3473;
                for (;;)
                {
                    _3472 = texelFetch(g_lightClassification, int((((_3119 << 5u) + (_3105 << 9u)) + (_3463 << 2u)) >> 2u)).x;
                    _3473 = _3472 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3473)
                    {
                        frontier_phi_72_pred = _3462;
                        frontier_phi_72_pred_1 = _3461;
                        frontier_phi_72_pred_2 = _3460;
                        frontier_phi_72_pred_3 = _3459;
                        frontier_phi_72_pred_4 = _3458;
                        frontier_phi_72_pred_5 = _3457;
                    }
                    else
                    {
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3952;
                        float _3953;
                        float _3954;
                        float _3669 = _3457;
                        float _3670 = _3458;
                        float _3671 = _3459;
                        float _3672 = _3460;
                        float _3673 = _3461;
                        float _3674 = _3462;
                        uint _3675 = _3472;
                        uint _3676;
                        vec4 _3701;
                        float _3702;
                        vec4 _3717;
                        vec3 _3729;
                        vec4 _3744;
                        vec4 _3759;
                        float _3805;
                        bool _3806;
                        for (;;)
                        {
                            uint _3686 = ((_3463 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3675));
                            _3676 = (_3675 + 4294967295u) & _3675;
                            uint _3688 = _3686 * 40u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            _3702 = _3701.w;
                            uint _3704 = (_3686 * 40u) + 4u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3719 = (_3686 * 40u) + 8u;
                            _3729 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x));
                            uint _3731 = (_3686 * 40u) + 16u;
                            _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            uint _3746 = (_3686 * 40u) + 20u;
                            _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            uint _3761 = (_3686 * 40u) + 24u;
                            vec4 _3774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3761 + 3u)).x));
                            uint _3780 = (_3686 * 40u) + 28u;
                            vec4 _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            _3805 = fma(_2186, _3793.z, fma(_2185, _3793.y, _3793.x * _2184)) + _3793.w;
                            _3806 = !((fma(_2186, _3774.z, fma(_2185, _3774.y, _3774.x * _2184)) + _3774.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3806)
                            {
                                float _3833 = _3701.x - _2184;
                                float _3834 = _3701.y - _2185;
                                float _3835 = _3701.z - _2186;
                                float _3836 = dot(vec3(_3833, _3834, _3835), vec3(_3833, _3834, _3835));
                                float _3839 = inversesqrt(_3836);
                                float _3840 = _3839 * _3833;
                                float _3841 = _3839 * _3834;
                                float _3842 = _3839 * _3835;
                                float _3846 = 1.0 - (_3836 / (_3702 * _3702));
                                float _4999 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3847 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3851 = sqrt(_3836) * _3717.w;
                                float _3853 = 1.39999997615814208984375 / (_3851 + 1.39999997615814208984375);
                                float _3854 = _3853 * _3853;
                                float _3857 = ((1.0 - _3854) * dot(vec3(_3840, _3841, _3842), vec3(_1052, _1055, _1058))) + _3854;
                                float _3860 = _3851 * _3851;
                                float _3864 = (fma(_2186, _3744.z, fma(_2185, _3744.y, _3744.x * _2184)) + _3744.w) / _3805;
                                float _3865 = (fma(_2186, _3759.z, fma(_2185, _3759.y, _3759.x * _2184)) + _3759.w) / _3805;
                                float _3869 = 1.0 - dot(vec2(_3864, _3865), vec2(_3864, _3865));
                                float _5015 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3870 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3871 = _3870 * (((isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0))) * _3847) / ((_3860 * 0.699999988079071044921875) + 1.0));
                                float _3883 = exp2(log2(1.0 / ((_3860 * 3.5) + 5.0)) * 0.25);
                                float _3884 = 1.0 - _1127;
                                float _3891 = sqrt(1.0 - ((1.0 - (_3884 * _3884)) * (1.0 - (_3883 * _3883))));
                                float _3892 = _3891 * _3891;
                                float _3893 = _3892 * _3892;
                                float _3894 = _3840 - _3344;
                                float _3895 = _3841 - _3345;
                                float _3896 = _3842 - _3346;
                                float _3900 = inversesqrt(dot(vec3(_3894, _3895, _3896), vec3(_3894, _3895, _3896)));
                                float _3904 = dot(vec3(_1052, _1055, _1058), vec3((-0.0) - _3344, (-0.0) - _3345, (-0.0) - _3346));
                                float _5026 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3907 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3908 = dot(vec3(_1052, _1055, _1058), vec3(_3900 * _3894, _3900 * _3895, _3900 * _3896));
                                float _5037 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3911 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3915 = ((_3911 * _3911) * (_3893 + (-1.0))) + 1.0;
                                float _3916 = _3853 * _3892;
                                float _3917 = _3916 * _3916;
                                float _3923 = ((1.0 - _3917) * dot(vec3(_1052, _1055, _1058), vec3(_3840, _3841, _3842))) + _3917;
                                float _5048 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3924 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                                float _3925 = 1.0 - _3892;
                                float _3935 = (0.5 / (((_3924 * ((_3907 * _3925) + _3892)) + 9.9999999392252902907785028219223e-09) + (((_3924 * _3925) + _3892) * _3907))) * _3924;
                                float _5059 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3945 = (_3870 * _3847) * (((_3893 * 3.1415927410125732421875) * (isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0)))) / ((_3915 * _3915) * ((_3860 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3871 * _3717.y;
                                frontier_phi_78_pred_1 = _3871 * _3717.x;
                                frontier_phi_78_pred_2 = _3945 * _3729.z;
                                frontier_phi_78_pred_3 = _3945 * _3729.y;
                                frontier_phi_78_pred_4 = _3945 * _3729.x;
                                frontier_phi_78_pred_5 = _3871 * _3717.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3953 = frontier_phi_78_pred;
                            _3952 = frontier_phi_78_pred_1;
                            _3951 = frontier_phi_78_pred_2;
                            _3950 = frontier_phi_78_pred_3;
                            _3949 = frontier_phi_78_pred_4;
                            _3954 = frontier_phi_78_pred_5;
                            _3659 = _3952 + _3672;
                            _3660 = _3953 + _3673;
                            _3661 = _3954 + _3674;
                            _3656 = _3949 + _3669;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            if (_3676 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3659;
                                _3673 = _3660;
                                _3674 = _3661;
                                _3675 = _3676;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3661;
                        frontier_phi_72_pred_1 = _3660;
                        frontier_phi_72_pred_2 = _3659;
                        frontier_phi_72_pred_3 = _3658;
                        frontier_phi_72_pred_4 = _3657;
                        frontier_phi_72_pred_5 = _3656;
                    }
                    _3329 = frontier_phi_72_pred;
                    _3327 = frontier_phi_72_pred_1;
                    _3325 = frontier_phi_72_pred_2;
                    _3323 = frontier_phi_72_pred_3;
                    _3321 = frontier_phi_72_pred_4;
                    _3319 = frontier_phi_72_pred_5;
                    uint _3464 = _3463 + 1u;
                    if (_3464 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3457 = _3319;
                        _3458 = _3321;
                        _3459 = _3323;
                        _3460 = _3325;
                        _3461 = _3327;
                        _3462 = _3329;
                        _3463 = _3464;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3329;
                frontier_phi_60_61_ladder_1 = _3327;
                frontier_phi_60_61_ladder_2 = _3323;
                frontier_phi_60_61_ladder_3 = _3321;
                frontier_phi_60_61_ladder_4 = _3319;
                frontier_phi_60_61_ladder_5 = _3325;
            }
            else
            {
                frontier_phi_60_61_ladder = _3215;
                frontier_phi_60_61_ladder_1 = _3213;
                frontier_phi_60_61_ladder_2 = _3209;
                frontier_phi_60_61_ladder_3 = _3207;
                frontier_phi_60_61_ladder_4 = _3205;
                frontier_phi_60_61_ladder_5 = _3211;
            }
            _3318 = frontier_phi_60_61_ladder_4;
            _3320 = frontier_phi_60_61_ladder_3;
            _3322 = frontier_phi_60_61_ladder_2;
            _3324 = frontier_phi_60_61_ladder_5;
            _3326 = frontier_phi_60_61_ladder_1;
            _3328 = frontier_phi_60_61_ladder;
        }
        float _3333 = isnan(1.0) ? _1111 : (isnan(_1111) ? 1.0 : min(_1111, 1.0));
        _3138 = (_3333 * _3324) + _2650;
        _3140 = (_3333 * _3326) + _2652;
        _3142 = (_3333 * _3328) + _2654;
        _3144 = ((_3318 * _1095) * _3333) + _2988;
        _3146 = ((_3320 * _1097) * _3333) + _2990;
        _3148 = ((_3322 * _1098) * _3333) + _2992;
    }
    else
    {
        _3138 = _2650;
        _3140 = _2652;
        _3142 = _2654;
        _3144 = _2988;
        _3146 = _2990;
        _3148 = _2992;
    }
    float _5075 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _5086 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _5097 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    uint _3168 = _256 + 6u;
    float _3176 = _1033 / cbSceneParam._m0[86u].x;
    float _3177 = _1034 / cbSceneParam._m0[86u].y;
    vec4 _3191 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3176, _3177, (log2((isnan(cbSceneParam._m0[77u].w) ? _968 : (isnan(_968) ? cbSceneParam._m0[77u].w : min(_968, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3193 = _3191.x;
    float _3194 = _3191.y;
    float _3195 = _3191.z;
    float _3196 = _3191.w;
    float _3268;
    float _3270;
    float _3272;
    float _3274;
    if (_968 > cbSceneParam._m0[78u].w)
    {
        float _3230 = isnan(_968) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _968 : min(cbSceneParam._m0[80u].w, _968));
        float _3231 = _3230 / _968;
        float _3242 = _3231 * _1018;
        float _3243 = _1019 * _3231;
        float _3244 = (-0.0) - _3243;
        float _3246 = _3231 * _1020;
        float _3248 = (cbSceneParam._m0[77u].w * _3244) / _3230;
        float _3249 = _3248 + cbSceneParam._m0[79u].w;
        float _3250 = cbSceneParam._m0[79u].w - _3243;
        float _3256 = sqrt(((_3242 * _3242) + (_3243 * _3243)) + (_3246 * _3246));
        float _3259 = (1.0 - (cbSceneParam._m0[77u].w / _3230)) * _3256;
        float _3264 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3266 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3419;
        if (abs((_3244 - _3248) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3419 = ((((_3249 > 0.0) ? exp2(_3264 * _3249) : (2.0 - exp2(_3266 * _3249))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3259;
        }
        else
        {
            float _3379 = 1.0 / cbSceneParam._m0[80u].x;
            float _3380 = isnan(_3250) ? _3249 : (isnan(_3249) ? _3250 : max(_3249, _3250));
            float _3381 = isnan(_3250) ? _3249 : (isnan(_3249) ? _3250 : min(_3249, _3250));
            float _3390 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : min(_3380, 0.0));
            float _3391 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : min(_3381, 0.0));
            _3419 = ((abs(_3256 / _3244) * cbSceneParam._m0[80u].y) * ((((_3390 - _3391) * 2.0) - ((exp2(_3264 * (isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0)))) - exp2(_3264 * (isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))))) * _3379)) - ((exp2(_3266 * _3390) - exp2(_3266 * _3391)) * _3379))) + (_3259 * cbSceneParam._m0[80u].z);
        }
        vec4 _3421 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3176, _3177, 1.0), 0.0);
        float _3430 = exp2((_3419 * (-1.44269502162933349609375)) * (1.0 - _3421.w));
        float _3431 = log2(_3430);
        float _3447 = log2(_3196);
        _3268 = (exp2(_3447 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3431 * cbSceneParam._m0[78u].x)) * _3421.x) / cbSceneParam._m0[78u].x)) + _3193;
        _3270 = (exp2(_3447 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3431 * cbSceneParam._m0[78u].y)) * _3421.y) / cbSceneParam._m0[78u].y)) + _3194;
        _3272 = (exp2(_3447 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3431 * cbSceneParam._m0[78u].z)) * _3421.z) / cbSceneParam._m0[78u].z)) + _3195;
        _3274 = _3430 * _3196;
    }
    else
    {
        _3268 = _3193;
        _3270 = _3194;
        _3272 = _3195;
        _3274 = _3196;
    }
    float _3286 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3287 = _3286 == 3.0;
    float _3288 = log2(_3274);
    float _3295 = exp2(_3288 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3138 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1111))) + ((_3144 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3296 = exp2(_3288 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0))) * (_3140 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1111))) + ((_3146 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3297 = exp2(_3288 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0))) * (_3142 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1111))) + ((_3148 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3306 = (_3286 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3306 * (_3287 ? _3295 : (_3295 + (cbSceneParam._m0[72u].w * _3268)));
    SV_Target.y = _3306 * (_3287 ? _3296 : (_3296 + (cbSceneParam._m0[72u].w * _3270)));
    SV_Target.z = _3306 * (_3287 ? _3297 : (_3297 + (cbSceneParam._m0[72u].w * _3272)));
    SV_Target.w = cbInstanceData._m0[_3168].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3168].w;
}


