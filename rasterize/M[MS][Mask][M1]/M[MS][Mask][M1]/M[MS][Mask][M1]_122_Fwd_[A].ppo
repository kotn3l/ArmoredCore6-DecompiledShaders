#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1526;
float _3904;
float _3905;
float _3906;
float _3907;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _366.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[23u].w) + _419) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3916 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _444 = (_437 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _445 = (_437 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _446 = (_437 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _366.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[23u].w) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3927 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _557 = _555.x;
    float _567 = dot(vec4(_557, _555.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _579 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _366.z) * 2.0) - ((((_557 - _567) * cbMtdParam._m0[23u].w) + _567) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3938 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _593 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_580 * ((_538.x * cbMtdParam._m0[14u].x) - _517)) + _517);
    float _596 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_580 * ((_538.y * cbMtdParam._m0[14u].y) - _518)) + _518);
    float _599 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_580 * ((_538.z * cbMtdParam._m0[14u].z) - _519)) + _519);
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _638 = _634.z;
    float _645 = ((_617.x - _636) * _437) + _636;
    float _646 = ((_617.y - _637) * _437) + _637;
    float _647 = ((_617.z - _638) * _437) + _638;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _670 = ((_659.x - _645) * _510) + _645;
    float _671 = ((_659.y - _646) * _510) + _646;
    float _672 = ((_659.z - _647) * _510) + _647;
    vec4 _684 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _697 = ((_684.z - _672) * _580) + _672;
    float _700 = ((((_684.x - _670) * _580) + _670) * 2.0) + (-1.0);
    float _702 = ((((_684.y - _671) * _580) + _671) * 2.0) + (-1.0);
    float _703 = dot(vec2(_700, _702), vec2(_700, _702));
    float _3949 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _708 = sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _734 = (((_722.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _700;
    float _735 = (((_722.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _702;
    float _738 = fma(_708, _244, fma(_735, _251, _734 * _237));
    float _741 = fma(_708, _245, fma(_735, _252, _734 * _238));
    float _744 = fma(_708, _246, fma(_735, _253, _734 * _239));
    float _748 = inversesqrt(dot(vec3(_738, _741, _744), vec3(_738, _741, _744)));
    vec4 _775 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _777 = _775.x;
    float _778 = 1.0 - _777;
    float _786 = (cbMtdParam._m0[19u].x + dot(vec4(_748 * _738, _748 * _741, _748 * _744, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_777 - _778) * cbMtdParam._m0[24u].z) + _778) * cbMtdParam._m0[21u].z);
    float _3960 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _787 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _794 = (_787 * (cbMtdParam._m0[17u].x - _593)) + _593;
    float _795 = (_787 * (cbMtdParam._m0[17u].y - _596)) + _596;
    float _796 = (_787 * (cbMtdParam._m0[17u].z - _599)) + _599;
    vec4 _822 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _824 = _822.x;
    float _841 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _824) * _437) + _824;
    float _858 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _841) * _510) + _841;
    float _876 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _276) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _277) + cbTextureTilingScale._m0[10u].w)).x - _858) * _580) + _858;
    float _880 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _876) * cbMtdParam._m0[19u].z) + _876;
    float _882 = _880 - (_880 * _787);
    float _886 = (cbMtdParam._m0[19u].w * (_722.z - _697)) + _697;
    vec4 _899 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _906 = (_899.x * 2.0) + (-1.0);
    float _907 = (_899.y * 2.0) + (-1.0);
    float _908 = dot(vec2(_906, _907), vec2(_906, _907));
    float _3971 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _916 = ((_899.z - _886) * _787) + _886;
    float _926 = ((sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) - _708) * _787) + _708;
    float _929 = (((_906 - _734) * _787) + _734) + (cbMtdParam._m0[21u].x * _734);
    float _930 = (((_907 - _735) * _787) + _735) + (cbMtdParam._m0[21u].x * _735);
    float _932 = cbMtdParam._m0[22u].x + _722.w;
    float _935 = fma(_926, _244, fma(_930, _251, _929 * _237));
    float _938 = fma(_926, _245, fma(_930, _252, _929 * _238));
    float _941 = fma(_926, _246, fma(_930, _253, _929 * _239));
    float _945 = inversesqrt(dot(vec3(_935, _938, _941), vec3(_935, _938, _941)));
    float _946 = _945 * _935;
    float _947 = _945 * _938;
    float _948 = _945 * _941;
    float _3982 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _949 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4004 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4015 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4026 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4037 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _954 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _968 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1018 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1008);
    float _1019 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1008);
    float _1020 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1008);
    float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
    float _1025 = _1018 * _1024;
    float _1026 = _1019 * _1024;
    float _1027 = _1020 * _1024;
    vec4 _1032 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1034 = _1032.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1206 = sqrt(((_1018 * _1018) + (_1019 * _1019)) + (_1020 * _1020));
        float _1212 = (cbMatDynParam._m0[5u].x * _1206) + cbMatDynParam._m0[5u].y;
        float _4048 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1217 = (cbMatDynParam._m0[5u].z * _1206) + cbMatDynParam._m0[5u].w;
        float _4059 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) - _1213)) + _1213) < ((_1034 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1045 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1046 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1064 = fma(_948, cbSceneParam._m0[5u].z, fma(_947, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _946));
    float _1067 = fma(_948, cbSceneParam._m0[6u].z, fma(_947, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _946));
    float _1070 = fma(_948, cbSceneParam._m0[7u].z, fma(_947, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _946));
    uint _1083 = _256 + 9u;
    uint _1084 = _1083 + uint(cbMatDynParam._m0[0u].w);
    float _1090 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_1084].x;
    float _1091 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_1084].y;
    float _1092 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1084].z;
    float _4070 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1095 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1096 = 1.0 - _954;
    float _1097 = _1093 * _1096;
    float _1098 = _1094 * _1096;
    float _1099 = _1095 * _1096;
    float _1104 = (_1093 + (-0.039999999105930328369140625)) * _954;
    float _1105 = (_1094 + (-0.039999999105930328369140625)) * _954;
    float _1106 = (_1095 + (-0.039999999105930328369140625)) * _954;
    float _1107 = _1104 + 0.039999999105930328369140625;
    float _1109 = _1105 + 0.039999999105930328369140625;
    float _1110 = _1106 + 0.039999999105930328369140625;
    vec4 _1119 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1045, cbSceneParam._m0[86u].y * _1046));
    float _1123 = ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * TEXCOORD_5.w) * _1119.x;
    float _1124 = dot(vec3(_946, _947, _948), vec3(_1025, _1026, _1027));
    float _1127 = _1124 * 2.0;
    float _1131 = (_1127 * _946) - _1025;
    float _1132 = (_1127 * _947) - _1026;
    float _1133 = (_1127 * _948) - _1027;
    float _1137 = abs(dot(vec3(_1025, _1026, _1027), vec3(_946, _947, _948)));
    float _4103 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1139 = sqrt(_949);
    float _1152 = exp2((_1139 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1139 * 3.0));
    float _1158 = (1.0 - _1152) * ((_1139 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1159 = _1152 * _1139;
    float _1187 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1525;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1250 = fma(_1195, cbModelParam._m0[26u].z, fma(_1191, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1187));
        float _1254 = fma(_1195, cbModelParam._m0[27u].z, fma(_1191, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1187));
        float _1258 = fma(_1195, cbModelParam._m0[28u].z, fma(_1191, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1187));
        float _1283 = _1187 + _946;
        float _1284 = _1191 + _947;
        float _1285 = _1195 + _948;
        float _1295 = fma(_1285, cbModelParam._m0[26u].z, fma(_1284, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1283)) - _1250;
        float _1296 = fma(_1285, cbModelParam._m0[27u].z, fma(_1284, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1283)) - _1254;
        float _1297 = fma(_1285, cbModelParam._m0[28u].z, fma(_1284, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1283)) - _1258;
        float _1301 = inversesqrt(dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297)));
        float _1314 = ((_1301 * _1295) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1250 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1301 * _1296) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1254 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1301 * _1297) / cbModelParam._m0[34u].z) + ((((((_1258 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        float _1353 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1319.x + (-0.5));
        float _1355 = _1353 * (_1319.y + (-0.5));
        float _1356 = _1353 * (_1319.z + (-0.5));
        float _1363 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1326.x + (-0.5));
        float _1365 = _1363 * (_1326.y + (-0.5));
        float _1366 = _1363 * (_1326.z + (-0.5));
        float _1373 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1333.x + (-0.5));
        float _1375 = _1373 * (_1333.y + (-0.5));
        float _1376 = _1373 * (_1333.z + (-0.5));
        float _1383 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1340.x + (-0.5));
        float _1385 = _1383 * (_1340.y + (-0.5));
        float _1386 = _1383 * (_1340.z + (-0.5));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = _1354 * 0.5;
        float _1391 = _1364 * 0.5;
        float _1392 = _1374 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1407 = (dot(vec3(_946, _947, _948), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1417 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4151 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1419 + 1.0))) + _1424) * _1387;
        float _1434 = _1355 * 0.5;
        float _1435 = _1365 * 0.5;
        float _1436 = _1375 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_946, _947, _948), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4184 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1461 + 1.0))) + _1466) * _1388;
        float _1476 = _1356 * 0.5;
        float _1477 = _1366 * 0.5;
        float _1478 = _1376 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_946, _947, _948), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4217 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1503 + 1.0))) + _1508) * _1389;
        _1525 = _1356;
        _1527 = _1355;
        _1528 = _1354;
        _1529 = _1366;
        _1530 = _1365;
        _1531 = _1364;
        _1532 = _1376;
        _1533 = _1375;
        _1534 = _1374;
        _1535 = _1389;
        _1536 = _1388;
        _1537 = _1387;
        _1538 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1526;
        _1527 = _1526;
        _1528 = _1526;
        _1529 = _1526;
        _1530 = _1526;
        _1531 = _1526;
        _1532 = _1526;
        _1533 = _1526;
        _1534 = _1526;
        _1535 = _1526;
        _1536 = _1526;
        _1537 = _1526;
        _1538 = 0.0;
        _1539 = 0.0;
        _1540 = 0.0;
    }
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1566 = fma(_1195, cbModelParam._m0[30u].z, fma(_1191, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1187));
        float _1570 = fma(_1195, cbModelParam._m0[31u].z, fma(_1191, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1187));
        float _1574 = fma(_1195, cbModelParam._m0[32u].z, fma(_1191, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1187));
        float _1597 = _1187 + _946;
        float _1598 = _1191 + _947;
        float _1599 = _1195 + _948;
        float _1609 = fma(_1599, cbModelParam._m0[30u].z, fma(_1598, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1597)) - _1566;
        float _1610 = fma(_1599, cbModelParam._m0[31u].z, fma(_1598, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1597)) - _1570;
        float _1611 = fma(_1599, cbModelParam._m0[32u].z, fma(_1598, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1597)) - _1574;
        float _1615 = inversesqrt(dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611)));
        float _1628 = ((_1615 * _1609) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1566 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1629 = ((_1615 * _1610) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1570 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1630 = ((_1615 * _1611) / cbModelParam._m0[35u].z) + ((((((_1574 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        vec4 _1653 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1628, _1629, _1630), 0.0);
        float _1665 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1666 = _1665 * (_1632.x + (-0.5));
        float _1667 = _1665 * (_1632.y + (-0.5));
        float _1668 = _1665 * (_1632.z + (-0.5));
        float _1675 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1639.x + (-0.5));
        float _1677 = _1675 * (_1639.y + (-0.5));
        float _1678 = _1675 * (_1639.z + (-0.5));
        float _1685 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1686 = _1685 * (_1646.x + (-0.5));
        float _1687 = _1685 * (_1646.y + (-0.5));
        float _1688 = _1685 * (_1646.z + (-0.5));
        float _1695 = exp2((_1653.w + (-0.5)) * 20.0) * 2.0;
        float _1696 = _1695 * (_1653.x + (-0.5));
        float _1697 = _1695 * (_1653.y + (-0.5));
        float _1698 = _1695 * (_1653.z + (-0.5));
        float _1699 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = _1666 * 0.5;
        float _1703 = _1676 * 0.5;
        float _1704 = _1686 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_946, _947, _948), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1699 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4280 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1729 + 1.0))) + _1734) * _1699;
        float _1744 = _1667 * 0.5;
        float _1745 = _1677 * 0.5;
        float _1746 = _1687 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_946, _947, _948), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4313 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1771 + 1.0))) + _1776) * _1700;
        float _1786 = _1668 * 0.5;
        float _1787 = _1678 * 0.5;
        float _1788 = _1688 * 0.5;
        float _1789 = dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788));
        float _1794 = (_1789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1789);
        float _1802 = (dot(vec3(_946, _947, _948), vec3(_1794 * _1786, _1794 * _1787, _1794 * _1788)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1811 = sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1813 = _1812 * 2.0;
        float _1817 = (1.0 - _1812) / (_1812 + 1.0);
        float _4346 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1827 = ((((1.0 - _1818) * (_1813 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1813 + 1.0))) + _1818) * _1701;
        _1835 = _1668;
        _1836 = _1667;
        _1837 = _1666;
        _1838 = _1678;
        _1839 = _1677;
        _1840 = _1676;
        _1841 = _1688;
        _1842 = _1687;
        _1843 = _1686;
        _1844 = _1701;
        _1845 = _1700;
        _1846 = _1699;
        _1847 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)));
    }
    else
    {
        _1835 = _1526;
        _1836 = _1526;
        _1837 = _1526;
        _1838 = _1526;
        _1839 = _1526;
        _1840 = _1526;
        _1841 = _1526;
        _1842 = _1526;
        _1843 = _1526;
        _1844 = _1526;
        _1845 = _1526;
        _1846 = _1526;
        _1847 = 0.0;
        _1848 = 0.0;
        _1849 = 0.0;
    }
    float _1859 = (cbModelParam._m0[1u].x * (_1847 - _1538)) + _1538;
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1539)) + _1539;
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1540)) + _1540;
    float _1882 = fma(_1861, cbSceneParam._m0[89u].z, fma(_1860, cbSceneParam._m0[89u].y, _1859 * cbSceneParam._m0[89u].x));
    float _1885 = fma(_1861, cbSceneParam._m0[90u].z, fma(_1860, cbSceneParam._m0[90u].y, _1859 * cbSceneParam._m0[90u].x));
    float _1888 = fma(_1861, cbSceneParam._m0[91u].z, fma(_1860, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1859));
    float _1903 = _1131 * 0.5;
    float _1904 = _1132 * 0.5;
    float _1905 = _1133 * 0.5;
    float _1906 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1909 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1912 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1835, _1838, _1841, _1844));
    float _1946;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1919 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1525, _1529, _1532, _1535));
        float _1923 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1527, _1530, _1533, _1536));
        float _1927 = dot(vec4(_1903, _1904, _1905, 1.0), vec4(_1528, _1531, _1534, _1537));
        float _1934 = dot(vec4(cbModelParam._m0[39u]), vec4(_1903, _1904, _1905, 1.0));
        _1946 = dot(vec3(isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1934) ? 0.0 : (isnan(0.0) ? _1934 : max(0.0, _1934))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1946 = 1.0;
    }
    float _1957;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1948 = dot(vec4(cbModelParam._m0[40u]), vec4(_1903, _1904, _1905, 1.0));
        _1957 = dot(vec3(isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1948) ? 0.0 : (isnan(0.0) ? _1948 : max(0.0, _1948))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1957 = 1.0;
    }
    float _1961 = (_1957 * cbModelParam._m0[1u].x) + (_1946 * (1.0 - cbModelParam._m0[1u].x));
    float _1971 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _949);
    float _1972 = isnan(_1971) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1971 : min(cbModelParam._m0[25u].z, _1971));
    float _2052;
    float _2054;
    float _2056;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2019 = fma(_1195, cbModelParam._m0[13u].z, fma(_1191, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1187)) + cbModelParam._m0[13u].w;
        float _2023 = fma(_1195, cbModelParam._m0[14u].z, fma(_1191, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1187)) + cbModelParam._m0[14u].w;
        float _2027 = fma(_1195, cbModelParam._m0[15u].z, fma(_1191, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1187)) + cbModelParam._m0[15u].w;
        float _2030 = fma(_1133, cbModelParam._m0[13u].z, fma(_1132, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1131));
        float _2033 = fma(_1133, cbModelParam._m0[14u].z, fma(_1132, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1131));
        float _2036 = fma(_1133, cbModelParam._m0[15u].z, fma(_1132, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1131));
        float _2064;
        if (_2030 > 0.0)
        {
            _2064 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2064 = frontier_phi_17_15_ladder;
        }
        float _2267;
        if (_2033 > 0.0)
        {
            _2267 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2267 = frontier_phi_26_22_ladder;
        }
        float _2521;
        if (_2036 > 0.0)
        {
            _2521 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2521 = frontier_phi_38_33_ladder;
        }
        float _2523 = isnan(_2267) ? _2064 : (isnan(_2064) ? _2267 : min(_2064, _2267));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _2030) + _2019;
        float _2529 = (_2524 * _2033) + _2023;
        float _2530 = (_2524 * _2036) + _2027;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2531;
        float _2535 = _2531 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 > _2535) || ((_2529 < _2533) || ((_2528 < _2533) || (_2528 > _2535))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2530, cbModelParam._m0[9u].z, fma(_2529, cbModelParam._m0[9u].y, _2528 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2530, cbModelParam._m0[10u].z, fma(_2529, cbModelParam._m0[10u].y, _2528 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2530, cbModelParam._m0[11u].z, fma(_2529, cbModelParam._m0[11u].y, _2528 * cbModelParam._m0[11u].x))), _1972);
            frontier_phi_16_38_ladder = _2658.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2658.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2658.x * cbModelParam._m0[1u].y;
        }
        _2052 = frontier_phi_16_38_ladder_2;
        _2054 = frontier_phi_16_38_ladder_1;
        _2056 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2040 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1131, _1132, _1133), _1972);
        _2052 = _2040.x * cbModelParam._m0[1u].y;
        _2054 = _2040.y * cbModelParam._m0[1u].y;
        _2056 = _2040.z * cbModelParam._m0[1u].y;
    }
    float _2060 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _949);
    float _2061 = isnan(_2060) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2060 : min(cbModelParam._m0[25u].w, _2060));
    float _2151;
    float _2153;
    float _2155;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2115 = fma(_1195, cbModelParam._m0[21u].z, fma(_1191, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1187)) + cbModelParam._m0[21u].w;
        float _2119 = fma(_1195, cbModelParam._m0[22u].z, fma(_1191, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1187)) + cbModelParam._m0[22u].w;
        float _2123 = fma(_1195, cbModelParam._m0[23u].z, fma(_1191, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1187)) + cbModelParam._m0[23u].w;
        float _2126 = fma(_1133, cbModelParam._m0[21u].z, fma(_1132, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1131));
        float _2129 = fma(_1133, cbModelParam._m0[22u].z, fma(_1132, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1131));
        float _2132 = fma(_1133, cbModelParam._m0[23u].z, fma(_1132, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1131));
        float _2272;
        if (_2126 > 0.0)
        {
            _2272 = abs((1.0 - _2115) / _2126);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2115 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2272 = frontier_phi_28_24_ladder;
        }
        float _2548;
        if (_2129 > 0.0)
        {
            _2548 = abs((1.0 - _2119) / _2129);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2119 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2548 = frontier_phi_40_35_ladder;
        }
        float _2761;
        if (_2132 > 0.0)
        {
            _2761 = abs((1.0 - _2123) / _2132);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2123 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2761 = frontier_phi_49_46_ladder;
        }
        float _2763 = isnan(_2548) ? _2272 : (isnan(_2272) ? _2548 : min(_2272, _2548));
        float _2764 = isnan(_2761) ? _2763 : (isnan(_2763) ? _2761 : min(_2763, _2761));
        float _2768 = (_2764 * _2126) + _2115;
        float _2769 = (_2764 * _2129) + _2119;
        float _2770 = (_2764 * _2132) + _2123;
        float _2771 = _2764 * 9.9999997473787516355514526367188e-05;
        float _2772 = (-1.0) - _2771;
        float _2774 = _2771 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2770 > _2774) || ((_2770 < _2772) || ((_2769 > _2774) || ((_2769 < _2772) || ((_2768 < _2772) || (_2768 > _2774))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2770, cbModelParam._m0[17u].z, fma(_2769, cbModelParam._m0[17u].y, _2768 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2770, cbModelParam._m0[18u].z, fma(_2769, cbModelParam._m0[18u].y, _2768 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2770, cbModelParam._m0[19u].z, fma(_2769, cbModelParam._m0[19u].y, _2768 * cbModelParam._m0[19u].x))), _2061);
            frontier_phi_25_49_ladder = _2969.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2969.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2969.x * cbModelParam._m0[1u].z;
        }
        _2151 = frontier_phi_25_49_ladder_2;
        _2153 = frontier_phi_25_49_ladder_1;
        _2155 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2135 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1131, _1132, _1133), _2061);
        _2151 = _2135.x * cbModelParam._m0[1u].z;
        _2153 = _2135.y * cbModelParam._m0[1u].z;
        _2155 = _2135.z * cbModelParam._m0[1u].z;
    }
    float _2168 = (((_1158 * _1107) + _1159) * _1123) * ((cbModelParam._m0[1u].w * (_2151 - _2052)) + _2052);
    float _2170 = (((_1158 * _1109) + _1159) * _1123) * ((cbModelParam._m0[1u].w * (_2153 - _2054)) + _2054);
    float _2172 = (((_1158 * _1110) + _1159) * _1123) * ((cbModelParam._m0[1u].w * (_2155 - _2056)) + _2056);
    float _2175 = fma(_2172, cbSceneParam._m0[89u].z, fma(_2170, cbSceneParam._m0[89u].y, _2168 * cbSceneParam._m0[89u].x));
    float _2178 = fma(_2172, cbSceneParam._m0[90u].z, fma(_2170, cbSceneParam._m0[90u].y, _2168 * cbSceneParam._m0[90u].x));
    float _2181 = fma(_2172, cbSceneParam._m0[91u].z, fma(_2170, cbSceneParam._m0[91u].y, _2168 * cbSceneParam._m0[91u].x));
    uvec4 _2191 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2193 = _2191.x * 14u;
    uint _2194 = _2193 + 13u;
    float _2201 = _1123 + (-1.0);
    float _2206 = (cbLight._m0[_2194].x * _2201) + 1.0;
    float _2207 = (cbLight._m0[_2194].y * _2201) + 1.0;
    float _2208 = (cbLight._m0[_2194].z * _2201) + 1.0;
    float _2209 = (cbLight._m0[_2194].w * _2201) + 1.0;
    uint _2210 = _2193 + 5u;
    float _2216 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
    uint _2220 = _2193 + 4u;
    float _2226 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2230 = _2193 | 1u;
    float _2241 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_946, _947, _948));
    float _2244 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_946, _947, _948));
    float _4482 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _4493 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2249 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2251 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2258 = ((cbLight._m0[_2210].x * _2216) * _2251) + ((cbLight._m0[_2220].x * _2226) * _2249);
    float _2259 = ((_2216 * cbLight._m0[_2210].y) * _2251) + ((_2226 * cbLight._m0[_2220].y) * _2249);
    float _2260 = ((_2216 * cbLight._m0[_2210].z) * _2251) + ((_2226 * cbLight._m0[_2220].z) * _2249);
    uvec4 _2264 = floatBitsToUint(cbLight._m0[_2193 + 12u]);
    bool _2266 = _2264.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2266)
    {
        _2277 = _2258;
        _2279 = _2259;
        _2281 = _2260;
    }
    else
    {
        uint _2285 = _2193 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2193 + 2u].xyz), vec3(_946, _947, _948)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4504 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2304 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2258;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2259;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2260;
    }
    bool _2284 = _2264.y == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2284)
    {
        _2322 = _2277;
        _2324 = _2279;
        _2326 = _2281;
    }
    else
    {
        uint _2492 = _2193 + 7u;
        float _2508 = (dot(vec3(cbLight._m0[_2193 + 3u].xyz), vec3(_946, _947, _948)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4520 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2511 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2322 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2277;
        _2324 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2279;
        _2326 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2281;
    }
    uint _2329 = _2193 + 8u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _949) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2193].x + _1025;
    float _2345 = cbLight._m0[_2193].y + _1026;
    float _2346 = cbLight._m0[_2193].z + _1027;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2193].xyz));
    float _4536 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _4547 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _2358 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2359 = dot(vec3(_946, _947, _948), vec3(_2351, _2352, _2353));
    float _4558 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2351, _2352, _2353));
    float _4569 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2343 * _2343;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
    float _2380 = 0.959999978542327880859375 - _1104;
    float _2382 = 0.959999978542327880859375 - _1105;
    float _2383 = 0.959999978542327880859375 - _1106;
    float _2390 = 1.0 - _2343;
    float _2401 = (0.5 / (((_2358 * ((_2357 * _2390) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2390) + _2343) * _2357))) * _2357;
    float _4580 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    uint _2414 = _2193 + 9u;
    float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _949) * 0.949999988079071044921875);
    float _2426 = _2425 * _2425;
    float _2427 = cbLight._m0[_2230].x + _1025;
    float _2428 = cbLight._m0[_2230].y + _1026;
    float _2429 = cbLight._m0[_2230].z + _1027;
    float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
    float _2434 = _2433 * _2427;
    float _2435 = _2433 * _2428;
    float _2436 = _2433 * _2429;
    float _2437 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2230].xyz));
    float _4591 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2441 = dot(vec3(_946, _947, _948), vec3(_2434, _2435, _2436));
    float _4602 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2445 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2434, _2435, _2436));
    float _4613 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2449 = _2426 * _2426;
    float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
    float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
    float _2467 = 1.0 - _2426;
    float _2477 = (0.5 / (((_2358 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2467) + _2426) * _2440))) * _2440;
    float _4624 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
    float _2489 = (((((_2460 * _2380) + _1107) * cbLight._m0[_2414].x) * _2479) * _2216) + (((((_2379 * _2380) + _1107) * cbLight._m0[_2329].x) * _2403) * _2226);
    float _2490 = (((((_2460 * _2382) + _1109) * cbLight._m0[_2414].y) * _2479) * _2216) + (((((_2379 * _2382) + _1109) * cbLight._m0[_2329].y) * _2403) * _2226);
    float _2491 = (((((_2460 * _2383) + _1110) * cbLight._m0[_2414].z) * _2479) * _2216) + (((((_2379 * _2383) + _1110) * cbLight._m0[_2329].z) * _2403) * _2226);
    float _2553;
    float _2555;
    float _2557;
    if (_2266)
    {
        _2553 = _2489;
        _2555 = _2490;
        _2557 = _2491;
    }
    else
    {
        uint _2559 = _2193 + 2u;
        uint _2563 = _2193 + 10u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _949) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _1025;
        float _2580 = cbLight._m0[_2559].y + _1026;
        float _2581 = cbLight._m0[_2559].z + _1027;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2559].xyz));
        float _4635 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2593 = dot(vec3(_946, _947, _948), vec3(_2586, _2587, _2588));
        float _4646 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4657 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2619 = 1.0 - _2578;
        float _2629 = (0.5 / (((_2358 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2619) + _2578) * _2592))) * _2592;
        float _4668 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2553 = (((((_2612 * _2380) + _1107) * cbLight._m0[_2563].x) * _2631) * _2632) + _2489;
        _2555 = (((((_2612 * _2382) + _1109) * cbLight._m0[_2563].y) * _2631) * _2632) + _2490;
        _2557 = (((((_2612 * _2383) + _1110) * cbLight._m0[_2563].z) * _2631) * _2632) + _2491;
    }
    float _2667;
    float _2669;
    float _2671;
    if (_2284)
    {
        _2667 = _2553;
        _2669 = _2555;
        _2671 = _2557;
    }
    else
    {
        uint _2678 = _2193 + 3u;
        uint _2682 = _2193 + 11u;
        float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2678].w)) * _949) * 0.949999988079071044921875);
        float _2697 = _2696 * _2696;
        float _2698 = cbLight._m0[_2678].x + _1025;
        float _2699 = cbLight._m0[_2678].y + _1026;
        float _2700 = cbLight._m0[_2678].z + _1027;
        float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
        float _2705 = _2704 * _2698;
        float _2706 = _2704 * _2699;
        float _2707 = _2704 * _2700;
        float _2708 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2678].xyz));
        float _4684 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2712 = dot(vec3(_946, _947, _948), vec3(_2705, _2706, _2707));
        float _4695 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2716 = dot(vec3(cbLight._m0[_2678].xyz), vec3(_2705, _2706, _2707));
        float _4706 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2720 = _2697 * _2697;
        float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
        float _2731 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
        float _2738 = 1.0 - _2697;
        float _2748 = (0.5 / (((_2358 * ((_2711 * _2738) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2738) + _2697) * _2711))) * _2711;
        float _4717 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2750 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
        float _2751 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
        _2667 = (((((_2731 * _2380) + _1107) * cbLight._m0[_2682].x) * _2750) * _2751) + _2553;
        _2669 = (((((_2731 * _2382) + _1109) * cbLight._m0[_2682].y) * _2750) * _2751) + _2555;
        _2671 = (((((_2731 * _2383) + _1110) * cbLight._m0[_2682].z) * _2750) * _2751) + _2557;
    }
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_2191.y == 0u)
    {
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2826;
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2826;
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2826;
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.x;
        uint _2853 = uint((float(_2841.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1046) / _2842))) + floor(float(uint(cbSceneParam._m0[85u].x * _1045) / _2842)));
        float _2863 = (log2(_2829 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2864 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        uint _2867 = uint(isnan(14.0) ? _2864 : (isnan(_2864) ? 14.0 : min(_2864, 14.0)));
        uvec4 _2872 = texelFetch(g_lightClusterGridBuffer, int(((_2867 << 2u) + (_2853 << 6u)) >> 2u));
        uint _2873 = _2872.x;
        uint _2874 = _2841.z;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        if (((((1u << ((_2874 >> 4u) & 15u)) + 4294967295u) & _2873) == 0u) || ((_2874 & 240u) == 0u))
        {
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
        }
        else
        {
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            uint _3133 = 0u;
            uint _3142;
            bool _3143;
            for (;;)
            {
                _3142 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                _3143 = _3142 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3143)
                {
                    frontier_phi_66_pred = _3127;
                    frontier_phi_66_pred_1 = _3132;
                    frontier_phi_66_pred_2 = _3131;
                    frontier_phi_66_pred_3 = _3130;
                    frontier_phi_66_pred_4 = _3129;
                    frontier_phi_66_pred_5 = _3128;
                }
                else
                {
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    uint _3278;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3142;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3282 = uint(findLSB(_3278)) + (_3133 << 5u);
                        uint _3279 = (_3278 + 4294967295u) & _3278;
                        uint _3284 = _3282 * 48u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3304 = (_3282 * 48u) + 4u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3323 = (_3282 * 48u) + 8u;
                        vec3 _3334 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x));
                        float _3338 = _3298.x - _2827;
                        float _3339 = _3298.y - _2828;
                        float _3340 = _3298.z - _2829;
                        float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                        float _3344 = inversesqrt(_3341);
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3348 = dot(vec3(_1064, _1067, _1070), vec3(_3345, _3346, _3347));
                        float _3353 = 1.0 - (_3341 * _3298.w);
                        float _4743 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3355 = sqrt(_3341) * _3317.w;
                        float _3358 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3348) + _3359;
                        float _3365 = _3355 * _3355;
                        float _3369 = ((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3354) / ((_3365 * 0.699999988079071044921875) + 1.0);
                        float _3373 = (-0.0) - _2827;
                        float _3374 = (-0.0) - _2828;
                        float _3375 = (-0.0) - _2829;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3390 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                        float _3391 = 1.0 - _1139;
                        float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                        float _3399 = _3398 * _3398;
                        float _3400 = _3399 * _3399;
                        float _3401 = _3380 + _3345;
                        float _3402 = _3381 + _3346;
                        float _3403 = _3382 + _3347;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3411 = dot(vec3(_1064, _1067, _1070), vec3(_3380, _3381, _3382));
                        float _4759 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3415 = dot(vec3(_1064, _1067, _1070), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                        float _4770 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                        float _3423 = _3358 * _3399;
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3348) + _3424;
                        float _4781 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3429 = 1.0 - _3399;
                        float _3439 = (0.5 / (((_3428 * ((_3414 * _3429) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3399) * _3414))) * _3428;
                        float _4792 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3450 = (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3422 * _3422) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125))) * _3354;
                        _3202 = (_3369 * _3317.x) + _3275;
                        _3203 = (_3369 * _3317.y) + _3276;
                        _3204 = (_3369 * _3317.z) + _3277;
                        _3199 = (_3450 * _3334.x) + _3272;
                        _3200 = (_3450 * _3334.y) + _3273;
                        _3201 = (_3450 * _3334.z) + _3274;
                        if (_3279 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3279;
                        }
                    }
                    frontier_phi_66_pred = _3199;
                    frontier_phi_66_pred_1 = _3204;
                    frontier_phi_66_pred_2 = _3203;
                    frontier_phi_66_pred_3 = _3202;
                    frontier_phi_66_pred_4 = _3201;
                    frontier_phi_66_pred_5 = _3200;
                }
                _2975 = frontier_phi_66_pred;
                _2985 = frontier_phi_66_pred_1;
                _2983 = frontier_phi_66_pred_2;
                _2981 = frontier_phi_66_pred_3;
                _2979 = frontier_phi_66_pred_4;
                _2977 = frontier_phi_66_pred_5;
                uint _3134 = _3133 + 1u;
                if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3127 = _2975;
                    _3128 = _2977;
                    _3129 = _2979;
                    _3130 = _2981;
                    _3131 = _2983;
                    _3132 = _2985;
                    _3133 = _3134;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
        }
        uvec4 _2988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2989 = _2988.z;
        uint _2991 = (_2989 >> 8u) & 15u;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((4294967295u << _2991) & _2873) == 0u)
        {
            _3095 = _2974;
            _3097 = _2976;
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
        }
        else
        {
            float _3120 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
            float _3121 = _3120 * _2827;
            float _3122 = _3120 * _2828;
            float _3123 = _3120 * _2829;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2991 < ((_2989 >> 12u) & 15u))
            {
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3255 = _2974;
                float _3256 = _2976;
                float _3257 = _2978;
                float _3258 = _2980;
                float _3259 = _2982;
                float _3260 = _2984;
                uint _3261 = _2991;
                uint _3270;
                bool _3271;
                for (;;)
                {
                    _3270 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                    _3271 = _3270 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3271)
                    {
                        frontier_phi_77_pred = _3260;
                        frontier_phi_77_pred_1 = _3259;
                        frontier_phi_77_pred_2 = _3258;
                        frontier_phi_77_pred_3 = _3257;
                        frontier_phi_77_pred_4 = _3256;
                        frontier_phi_77_pred_5 = _3255;
                    }
                    else
                    {
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3477 = _3255;
                        float _3478 = _3256;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        uint _3483 = _3270;
                        uint _3484;
                        vec4 _3509;
                        float _3510;
                        vec4 _3525;
                        vec3 _3537;
                        vec4 _3552;
                        vec4 _3567;
                        float _3613;
                        bool _3614;
                        for (;;)
                        {
                            uint _3494 = ((_3261 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3483));
                            _3484 = (_3483 + 4294967295u) & _3483;
                            uint _3496 = _3494 * 40u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3510 = _3509.w;
                            uint _3512 = (_3494 * 40u) + 4u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3494 * 40u) + 8u;
                            _3537 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x));
                            uint _3539 = (_3494 * 40u) + 16u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3494 * 40u) + 20u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3494 * 40u) + 24u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3588 = (_3494 * 40u) + 28u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            _3613 = fma(_2829, _3601.z, fma(_2828, _3601.y, _3601.x * _2827)) + _3601.w;
                            _3614 = !((fma(_2829, _3582.z, fma(_2828, _3582.y, _3582.x * _2827)) + _3582.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3614)
                            {
                                float _3641 = _3509.x - _2827;
                                float _3642 = _3509.y - _2828;
                                float _3643 = _3509.z - _2829;
                                float _3644 = dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643));
                                float _3647 = inversesqrt(_3644);
                                float _3648 = _3647 * _3641;
                                float _3649 = _3647 * _3642;
                                float _3650 = _3647 * _3643;
                                float _3654 = 1.0 - (_3644 / (_3510 * _3510));
                                float _4803 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3659 = sqrt(_3644) * _3525.w;
                                float _3661 = 1.39999997615814208984375 / (_3659 + 1.39999997615814208984375);
                                float _3662 = _3661 * _3661;
                                float _3665 = ((1.0 - _3662) * dot(vec3(_3648, _3649, _3650), vec3(_1064, _1067, _1070))) + _3662;
                                float _3668 = _3659 * _3659;
                                float _3672 = (fma(_2829, _3552.z, fma(_2828, _3552.y, _3552.x * _2827)) + _3552.w) / _3613;
                                float _3673 = (fma(_2829, _3567.z, fma(_2828, _3567.y, _3567.x * _2827)) + _3567.w) / _3613;
                                float _3677 = 1.0 - dot(vec2(_3672, _3673), vec2(_3672, _3673));
                                float _4819 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3679 = _3678 * (((isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0))) * _3655) / ((_3668 * 0.699999988079071044921875) + 1.0));
                                float _3691 = exp2(log2(1.0 / ((_3668 * 3.5) + 5.0)) * 0.25);
                                float _3692 = 1.0 - _1139;
                                float _3699 = sqrt(1.0 - ((1.0 - (_3692 * _3692)) * (1.0 - (_3691 * _3691))));
                                float _3700 = _3699 * _3699;
                                float _3701 = _3700 * _3700;
                                float _3702 = _3648 - _3121;
                                float _3703 = _3649 - _3122;
                                float _3704 = _3650 - _3123;
                                float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                                float _3712 = dot(vec3(_1064, _1067, _1070), vec3((-0.0) - _3121, (-0.0) - _3122, (-0.0) - _3123));
                                float _4830 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3715 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3716 = dot(vec3(_1064, _1067, _1070), vec3(_3708 * _3702, _3708 * _3703, _3708 * _3704));
                                float _4841 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3723 = ((_3719 * _3719) * (_3701 + (-1.0))) + 1.0;
                                float _3724 = _3661 * _3700;
                                float _3725 = _3724 * _3724;
                                float _3731 = ((1.0 - _3725) * dot(vec3(_1064, _1067, _1070), vec3(_3648, _3649, _3650))) + _3725;
                                float _4852 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3733 = 1.0 - _3700;
                                float _3743 = (0.5 / (((_3732 * ((_3715 * _3733) + _3700)) + 9.9999999392252902907785028219223e-09) + (((_3732 * _3733) + _3700) * _3715))) * _3732;
                                float _4863 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3753 = (_3678 * _3655) * (((_3701 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3723 * _3723) * ((_3668 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3679 * _3525.y;
                                frontier_phi_83_pred_1 = _3679 * _3525.x;
                                frontier_phi_83_pred_2 = _3753 * _3537.z;
                                frontier_phi_83_pred_3 = _3753 * _3537.y;
                                frontier_phi_83_pred_4 = _3753 * _3537.x;
                                frontier_phi_83_pred_5 = _3679 * _3525.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3761 = frontier_phi_83_pred;
                            _3760 = frontier_phi_83_pred_1;
                            _3759 = frontier_phi_83_pred_2;
                            _3758 = frontier_phi_83_pred_3;
                            _3757 = frontier_phi_83_pred_4;
                            _3762 = frontier_phi_83_pred_5;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3464 = _3757 + _3477;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            if (_3484 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3484;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3469;
                        frontier_phi_77_pred_1 = _3468;
                        frontier_phi_77_pred_2 = _3467;
                        frontier_phi_77_pred_3 = _3466;
                        frontier_phi_77_pred_4 = _3465;
                        frontier_phi_77_pred_5 = _3464;
                    }
                    _3106 = frontier_phi_77_pred;
                    _3104 = frontier_phi_77_pred_1;
                    _3102 = frontier_phi_77_pred_2;
                    _3100 = frontier_phi_77_pred_3;
                    _3098 = frontier_phi_77_pred_4;
                    _3096 = frontier_phi_77_pred_5;
                    uint _3262 = _3261 + 1u;
                    if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3255 = _3096;
                        _3256 = _3098;
                        _3257 = _3100;
                        _3258 = _3102;
                        _3259 = _3104;
                        _3260 = _3106;
                        _3261 = _3262;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3100;
                frontier_phi_58_59_ladder_1 = _3106;
                frontier_phi_58_59_ladder_2 = _3104;
                frontier_phi_58_59_ladder_3 = _3102;
                frontier_phi_58_59_ladder_4 = _3098;
                frontier_phi_58_59_ladder_5 = _3096;
            }
            else
            {
                frontier_phi_58_59_ladder = _2978;
                frontier_phi_58_59_ladder_1 = _2984;
                frontier_phi_58_59_ladder_2 = _2982;
                frontier_phi_58_59_ladder_3 = _2980;
                frontier_phi_58_59_ladder_4 = _2976;
                frontier_phi_58_59_ladder_5 = _2974;
            }
            _3095 = frontier_phi_58_59_ladder_5;
            _3097 = frontier_phi_58_59_ladder_4;
            _3099 = frontier_phi_58_59_ladder;
            _3101 = frontier_phi_58_59_ladder_3;
            _3103 = frontier_phi_58_59_ladder_2;
            _3105 = frontier_phi_58_59_ladder_1;
        }
        float _3110 = isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0));
        _2886 = (_3110 * _3101) + _2322;
        _2888 = (_3110 * _3103) + _2324;
        _2890 = (_3110 * _3105) + _2326;
        _2892 = ((_3095 * _1107) * _3110) + _2667;
        _2894 = ((_3097 * _1109) * _3110) + _2669;
        _2896 = ((_3099 * _1110) * _3110) + _2671;
    }
    else
    {
        _2886 = _2322;
        _2888 = _2324;
        _2890 = _2326;
        _2892 = _2667;
        _2894 = _2669;
        _2896 = _2671;
    }
    float _4879 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _4890 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _4901 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _2913 = ((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2886 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1123))) + ((_2892 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1961)) * cbPerFrame._m0[3u].x);
    float _2914 = ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2888 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1123))) + ((_2894 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1961)) * cbPerFrame._m0[3u].x);
    float _2915 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2890 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1123))) + ((_2896 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1961)) * cbPerFrame._m0[3u].x);
    uint _2916 = _256 + 6u;
    float _2924 = _1045 / cbSceneParam._m0[86u].x;
    float _2925 = _1046 / cbSceneParam._m0[86u].y;
    vec4 _2939 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, (log2((isnan(cbSceneParam._m0[77u].w) ? _968 : (isnan(_968) ? cbSceneParam._m0[77u].w : min(_968, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2941 = _2939.x;
    float _2942 = _2939.y;
    float _2943 = _2939.z;
    float _2944 = _2939.w;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    if (_968 > cbSceneParam._m0[78u].w)
    {
        float _2999 = isnan(_968) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _968 : min(cbSceneParam._m0[80u].w, _968));
        float _3000 = _2999 / _968;
        float _3011 = _3000 * _1018;
        float _3012 = _1019 * _3000;
        float _3013 = (-0.0) - _3012;
        float _3015 = _3000 * _1020;
        float _3017 = (cbSceneParam._m0[77u].w * _3013) / _2999;
        float _3018 = _3017 + cbSceneParam._m0[79u].w;
        float _3019 = cbSceneParam._m0[79u].w - _3012;
        float _3025 = sqrt(((_3011 * _3011) + (_3012 * _3012)) + (_3015 * _3015));
        float _3028 = (1.0 - (cbSceneParam._m0[77u].w / _2999)) * _3025;
        float _3033 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3035 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3212;
        if (abs((_3013 - _3017) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3212 = ((((_3018 > 0.0) ? exp2(_3033 * _3018) : (2.0 - exp2(_3035 * _3018))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3028;
        }
        else
        {
            float _3156 = 1.0 / cbSceneParam._m0[80u].x;
            float _3157 = isnan(_3019) ? _3018 : (isnan(_3018) ? _3019 : max(_3018, _3019));
            float _3158 = isnan(_3019) ? _3018 : (isnan(_3018) ? _3019 : min(_3018, _3019));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            _3212 = ((abs(_3025 / _3013) * cbSceneParam._m0[80u].y) * ((((_3167 - _3168) * 2.0) - ((exp2(_3033 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0)))) - exp2(_3033 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))))) * _3156)) - ((exp2(_3035 * _3167) - exp2(_3035 * _3168)) * _3156))) + (_3028 * cbSceneParam._m0[80u].z);
        }
        vec4 _3214 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, 1.0), 0.0);
        float _3223 = exp2((_3212 * (-1.44269502162933349609375)) * (1.0 - _3214.w));
        float _3224 = log2(_3223);
        float _3240 = log2(_2944);
        _3037 = (exp2(_3240 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].x)) * _3214.x) / cbSceneParam._m0[78u].x)) + _2941;
        _3039 = (exp2(_3240 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].y)) * _3214.y) / cbSceneParam._m0[78u].y)) + _2942;
        _3041 = (exp2(_3240 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].z)) * _3214.z) / cbSceneParam._m0[78u].z)) + _2943;
        _3043 = _3223 * _2944;
    }
    else
    {
        _3037 = _2941;
        _3039 = _2942;
        _3041 = _2943;
        _3043 = _2944;
    }
    bool _3250;
    vec4 _3053;
    vec4 _3075;
    float _3077;
    float _3081;
    float _3082;
    float _3083;
    float _3084;
    bool _3094;
    for (;;)
    {
        _3053 = cbMatDynParam._m0[0u];
        float _3055 = roundEven(_3053.y);
        bool _3056 = _3055 == 3.0;
        float _3057 = log2(_3043);
        float _3064 = exp2(_3057 * cbSceneParam._m0[78u].x) * _2913;
        float _3065 = exp2(_3057 * cbSceneParam._m0[78u].y) * _2914;
        float _3066 = exp2(_3057 * cbSceneParam._m0[78u].z) * _2915;
        float _3073 = _1034 + (-0.5);
        _3075 = cbMtdParam._m0[1u];
        _3077 = _3075.y * _3073;
        float _3080 = (_3055 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3081 = _3080 * (_3056 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3037)));
        _3082 = _3080 * (_3056 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3039)));
        _3083 = _3080 * (_3056 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3041)));
        _3084 = _3073 * 0.999000012874603271484375;
        _3094 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3094)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _3084) < 0.5)
            {
                _3250 = true;
                break;
            }
        }
        uint _3191 = _1083 + uint(_3053.w);
        if ((cbInstanceData._m0[_3191].w < 1.0) && ((cbInstanceData._m0[_3191].w + _3084) < 0.5))
        {
            _3250 = true;
            break;
        }
        if ((_3077 + 1.0) < _3075.x)
        {
            _3250 = true;
            break;
        }
        _3250 = false;
        break;
    }
    float _3455;
    if (_3250)
    {
        discard_state = true;
        _3455 = 0.0;
    }
    else
    {
        _3455 = cbInstanceData._m0[_2916].w;
    }
    SV_Target.x = _3081;
    SV_Target.y = _3082;
    SV_Target.z = _3083;
    SV_Target.w = _3455;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2916].w;
    discard_exit();
}


