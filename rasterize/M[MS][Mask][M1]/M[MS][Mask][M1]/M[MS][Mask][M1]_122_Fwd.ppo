#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1481;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _403 = _401.x;
    float _415 = dot(vec4(_403, _401.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _432 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _362.x) * 2.0) - ((((_403 - _415) * cbMtdParam._m0[23u].w) + _415) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3805 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _440 = (_433 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _441 = (_433 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _442 = (_433 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _481 = _479.x;
    float _491 = dot(vec4(_481, _479.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _505 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _362.y) * 2.0) - ((((_481 - _491) * cbMtdParam._m0[23u].w) + _491) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3816 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _513 = (_506 * ((_459.x * cbMtdParam._m0[13u].x) - _440)) + _440;
    float _514 = (_506 * ((_459.y * cbMtdParam._m0[13u].y) - _441)) + _441;
    float _515 = (_506 * ((_459.z * cbMtdParam._m0[13u].z) - _442)) + _442;
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _272) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _273) + cbTextureTilingScale._m0[24u].w));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _553 = _551.x;
    float _563 = dot(vec4(_553, _551.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _575 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _362.z) * 2.0) - ((((_553 - _563) * cbMtdParam._m0[23u].w) + _563) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3827 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _589 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_576 * ((_534.x * cbMtdParam._m0[14u].x) - _513)) + _513);
    float _592 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_576 * ((_534.y * cbMtdParam._m0[14u].y) - _514)) + _514);
    float _595 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_576 * ((_534.z * cbMtdParam._m0[14u].z) - _515)) + _515);
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _632 = _630.x;
    float _633 = _630.y;
    float _634 = _630.z;
    float _641 = ((_613.x - _632) * _433) + _632;
    float _642 = ((_613.y - _633) * _433) + _633;
    float _643 = ((_613.z - _634) * _433) + _634;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _666 = ((_655.x - _641) * _506) + _641;
    float _667 = ((_655.y - _642) * _506) + _642;
    float _668 = ((_655.z - _643) * _506) + _643;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _272) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _273) + cbTextureTilingScale._m0[23u].w));
    float _693 = ((_680.z - _668) * _576) + _668;
    float _696 = ((((_680.x - _666) * _576) + _666) * 2.0) + (-1.0);
    float _698 = ((((_680.y - _667) * _576) + _667) * 2.0) + (-1.0);
    float _699 = dot(vec2(_696, _698), vec2(_696, _698));
    float _3838 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _704 = sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _730 = (((_718.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _696;
    float _731 = (((_718.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _698;
    float _734 = fma(_704, _240, fma(_731, _247, _730 * _233));
    float _737 = fma(_704, _241, fma(_731, _248, _730 * _234));
    float _740 = fma(_704, _242, fma(_731, _249, _730 * _235));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _773 = _771.x;
    float _774 = 1.0 - _773;
    float _782 = (cbMtdParam._m0[19u].x + dot(vec4(_744 * _734, _744 * _737, _744 * _740, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_773 - _774) * cbMtdParam._m0[24u].z) + _774) * cbMtdParam._m0[21u].z);
    float _3849 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _783 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _790 = (_783 * (cbMtdParam._m0[17u].x - _589)) + _589;
    float _791 = (_783 * (cbMtdParam._m0[17u].y - _592)) + _592;
    float _792 = (_783 * (cbMtdParam._m0[17u].z - _595)) + _595;
    vec4 _818 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _820 = _818.x;
    float _837 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _820) * _433) + _820;
    float _854 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _837) * _506) + _837;
    float _872 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _272) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _273) + cbTextureTilingScale._m0[10u].w)).x - _854) * _576) + _854;
    float _876 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _872) * cbMtdParam._m0[19u].z) + _872;
    float _878 = _876 - (_876 * _783);
    float _882 = (cbMtdParam._m0[19u].w * (_718.z - _693)) + _693;
    vec4 _895 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _902 = (_895.x * 2.0) + (-1.0);
    float _903 = (_895.y * 2.0) + (-1.0);
    float _904 = dot(vec2(_902, _903), vec2(_902, _903));
    float _3860 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _912 = ((_895.z - _882) * _783) + _882;
    float _922 = ((sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) - _704) * _783) + _704;
    float _925 = (((_902 - _730) * _783) + _730) + (cbMtdParam._m0[21u].x * _730);
    float _926 = (((_903 - _731) * _783) + _731) + (cbMtdParam._m0[21u].x * _731);
    float _928 = cbMtdParam._m0[22u].x + _718.w;
    float _931 = fma(_922, _240, fma(_926, _247, _925 * _233));
    float _934 = fma(_922, _241, fma(_926, _248, _925 * _234));
    float _937 = fma(_922, _242, fma(_926, _249, _925 * _235));
    float _941 = inversesqrt(dot(vec3(_931, _934, _937), vec3(_931, _934, _937)));
    float _942 = _941 * _931;
    float _943 = _941 * _934;
    float _944 = _941 * _937;
    float _3871 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _945 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _3893 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _3904 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _3915 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _3926 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _950 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _964 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1014 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1004);
    float _1015 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1004);
    float _1016 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1004);
    float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
    float _1021 = _1014 * _1020;
    float _1022 = _1015 * _1020;
    float _1023 = _1016 * _1020;
    float _1029 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1030 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1048 = fma(_944, cbSceneParam._m0[5u].z, fma(_943, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _942));
    float _1051 = fma(_944, cbSceneParam._m0[6u].z, fma(_943, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _942));
    float _1054 = fma(_944, cbSceneParam._m0[7u].z, fma(_943, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _942));
    uint _1068 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1074 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_1068].x;
    float _1075 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_1068].y;
    float _1076 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_1068].z;
    float _3937 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _1080 = 1.0 - _950;
    float _1081 = _1077 * _1080;
    float _1082 = _1078 * _1080;
    float _1083 = _1079 * _1080;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _950;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _950;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _950;
    float _1091 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    float _1094 = _1090 + 0.039999999105930328369140625;
    vec4 _1103 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1029, cbSceneParam._m0[86u].y * _1030));
    float _1107 = ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * TEXCOORD_5.w) * _1103.x;
    float _1108 = dot(vec3(_942, _943, _944), vec3(_1021, _1022, _1023));
    float _1111 = _1108 * 2.0;
    float _1115 = (_1111 * _942) - _1021;
    float _1116 = (_1111 * _943) - _1022;
    float _1117 = (_1111 * _944) - _1023;
    float _1121 = abs(dot(vec3(_1021, _1022, _1023), vec3(_942, _943, _944)));
    float _3970 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1123 = sqrt(_945);
    float _1136 = exp2((_1123 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1123 * 3.0));
    float _1142 = (1.0 - _1136) * ((_1123 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1143 = _1136 * _1123;
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1480;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1205 = fma(_1179, cbModelParam._m0[26u].z, fma(_1175, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1171));
        float _1209 = fma(_1179, cbModelParam._m0[27u].z, fma(_1175, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1171));
        float _1213 = fma(_1179, cbModelParam._m0[28u].z, fma(_1175, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1171));
        float _1238 = _1171 + _942;
        float _1239 = _1175 + _943;
        float _1240 = _1179 + _944;
        float _1250 = fma(_1240, cbModelParam._m0[26u].z, fma(_1239, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1238)) - _1205;
        float _1251 = fma(_1240, cbModelParam._m0[27u].z, fma(_1239, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1238)) - _1209;
        float _1252 = fma(_1240, cbModelParam._m0[28u].z, fma(_1239, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1238)) - _1213;
        float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
        float _1269 = ((_1256 * _1250) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1205 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1256 * _1251) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1209 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1256 * _1252) / cbModelParam._m0[34u].z) + ((((((_1213 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1269, _1270, _1271), 0.0);
        float _1308 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1274.x + (-0.5));
        float _1310 = _1308 * (_1274.y + (-0.5));
        float _1311 = _1308 * (_1274.z + (-0.5));
        float _1318 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1281.x + (-0.5));
        float _1320 = _1318 * (_1281.y + (-0.5));
        float _1321 = _1318 * (_1281.z + (-0.5));
        float _1328 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1288.x + (-0.5));
        float _1330 = _1328 * (_1288.y + (-0.5));
        float _1331 = _1328 * (_1288.z + (-0.5));
        float _1338 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1295.x + (-0.5));
        float _1340 = _1338 * (_1295.y + (-0.5));
        float _1341 = _1338 * (_1295.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1362 = (dot(vec3(_942, _943, _944), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1372 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4018 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1374 + 1.0))) + _1379) * _1342;
        float _1389 = _1310 * 0.5;
        float _1390 = _1320 * 0.5;
        float _1391 = _1330 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_942, _943, _944), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4051 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1416 + 1.0))) + _1421) * _1343;
        float _1431 = _1311 * 0.5;
        float _1432 = _1321 * 0.5;
        float _1433 = _1331 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_942, _943, _944), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _4084 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1458 + 1.0))) + _1463) * _1344;
        _1480 = _1311;
        _1482 = _1310;
        _1483 = _1309;
        _1484 = _1321;
        _1485 = _1320;
        _1486 = _1319;
        _1487 = _1331;
        _1488 = _1330;
        _1489 = _1329;
        _1490 = _1344;
        _1491 = _1343;
        _1492 = _1342;
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1495 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1481;
        _1482 = _1481;
        _1483 = _1481;
        _1484 = _1481;
        _1485 = _1481;
        _1486 = _1481;
        _1487 = _1481;
        _1488 = _1481;
        _1489 = _1481;
        _1490 = _1481;
        _1491 = _1481;
        _1492 = _1481;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1518 = fma(_1179, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171));
        float _1522 = fma(_1179, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171));
        float _1526 = fma(_1179, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171));
        float _1549 = _1171 + _942;
        float _1550 = _1175 + _943;
        float _1551 = _1179 + _944;
        float _1561 = fma(_1551, cbModelParam._m0[30u].z, fma(_1550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1549)) - _1518;
        float _1562 = fma(_1551, cbModelParam._m0[31u].z, fma(_1550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1549)) - _1522;
        float _1563 = fma(_1551, cbModelParam._m0[32u].z, fma(_1550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1549)) - _1526;
        float _1567 = inversesqrt(dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563)));
        float _1580 = ((_1567 * _1561) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1518 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1567 * _1562) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1522 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1567 * _1563) / cbModelParam._m0[35u].z) + ((((((_1526 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        float _1617 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1584.x + (-0.5));
        float _1619 = _1617 * (_1584.y + (-0.5));
        float _1620 = _1617 * (_1584.z + (-0.5));
        float _1627 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1591.x + (-0.5));
        float _1629 = _1627 * (_1591.y + (-0.5));
        float _1630 = _1627 * (_1591.z + (-0.5));
        float _1637 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1598.x + (-0.5));
        float _1639 = _1637 * (_1598.y + (-0.5));
        float _1640 = _1637 * (_1598.z + (-0.5));
        float _1647 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1605.x + (-0.5));
        float _1649 = _1647 * (_1605.y + (-0.5));
        float _1650 = _1647 * (_1605.z + (-0.5));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = _1618 * 0.5;
        float _1655 = _1628 * 0.5;
        float _1656 = _1638 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_942, _943, _944), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4147 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1681 + 1.0))) + _1686) * _1651;
        float _1696 = _1619 * 0.5;
        float _1697 = _1629 * 0.5;
        float _1698 = _1639 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_942, _943, _944), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4180 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1723 + 1.0))) + _1728) * _1652;
        float _1738 = _1620 * 0.5;
        float _1739 = _1630 * 0.5;
        float _1740 = _1640 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_942, _943, _944), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4213 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1765 + 1.0))) + _1770) * _1653;
        _1787 = _1620;
        _1788 = _1619;
        _1789 = _1618;
        _1790 = _1630;
        _1791 = _1629;
        _1792 = _1628;
        _1793 = _1640;
        _1794 = _1639;
        _1795 = _1638;
        _1796 = _1653;
        _1797 = _1652;
        _1798 = _1651;
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
    }
    else
    {
        _1787 = _1481;
        _1788 = _1481;
        _1789 = _1481;
        _1790 = _1481;
        _1791 = _1481;
        _1792 = _1481;
        _1793 = _1481;
        _1794 = _1481;
        _1795 = _1481;
        _1796 = _1481;
        _1797 = _1481;
        _1798 = _1481;
        _1799 = 0.0;
        _1800 = 0.0;
        _1801 = 0.0;
    }
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1493)) + _1493;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1494)) + _1494;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1495)) + _1495;
    float _1834 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1811));
    float _1855 = _1115 * 0.5;
    float _1856 = _1116 * 0.5;
    float _1857 = _1117 * 0.5;
    float _1858 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1861 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1864 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1898;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1871 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1480, _1484, _1487, _1490));
        float _1875 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1482, _1485, _1488, _1491));
        float _1879 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1483, _1486, _1489, _1492));
        float _1886 = dot(vec4(cbModelParam._m0[39u]), vec4(_1855, _1856, _1857, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1909;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1900 = dot(vec4(cbModelParam._m0[40u]), vec4(_1855, _1856, _1857, 1.0));
        _1909 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1909 = 1.0;
    }
    float _1913 = (_1909 * cbModelParam._m0[1u].x) + (_1898 * (1.0 - cbModelParam._m0[1u].x));
    float _1923 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _945);
    float _1924 = isnan(_1923) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1923 : min(cbModelParam._m0[25u].z, _1923));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1971 = fma(_1179, cbModelParam._m0[13u].z, fma(_1175, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1171)) + cbModelParam._m0[13u].w;
        float _1975 = fma(_1179, cbModelParam._m0[14u].z, fma(_1175, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1171)) + cbModelParam._m0[14u].w;
        float _1979 = fma(_1179, cbModelParam._m0[15u].z, fma(_1175, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1171)) + cbModelParam._m0[15u].w;
        float _1982 = fma(_1117, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1115));
        float _1985 = fma(_1117, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1115));
        float _1988 = fma(_1117, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1115));
        float _2016;
        if (_1982 > 0.0)
        {
            _2016 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2016 = frontier_phi_14_12_ladder;
        }
        float _2219;
        if (_1985 > 0.0)
        {
            _2219 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2219 = frontier_phi_23_19_ladder;
        }
        float _2473;
        if (_1988 > 0.0)
        {
            _2473 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2473 = frontier_phi_35_30_ladder;
        }
        float _2475 = isnan(_2219) ? _2016 : (isnan(_2016) ? _2219 : min(_2016, _2219));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1982) + _1971;
        float _2481 = (_2476 * _1985) + _1975;
        float _2482 = (_2476 * _1988) + _1979;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2483;
        float _2487 = _2483 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 > _2487) || ((_2481 < _2485) || ((_2480 < _2485) || (_2480 > _2487))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2482, cbModelParam._m0[9u].z, fma(_2481, cbModelParam._m0[9u].y, _2480 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2482, cbModelParam._m0[10u].z, fma(_2481, cbModelParam._m0[10u].y, _2480 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2482, cbModelParam._m0[11u].z, fma(_2481, cbModelParam._m0[11u].y, _2480 * cbModelParam._m0[11u].x))), _1924);
            frontier_phi_13_35_ladder = _2610.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2610.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2610.x * cbModelParam._m0[1u].y;
        }
        _2004 = frontier_phi_13_35_ladder_2;
        _2006 = frontier_phi_13_35_ladder_1;
        _2008 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1115, _1116, _1117), _1924);
        _2004 = _1992.x * cbModelParam._m0[1u].y;
        _2006 = _1992.y * cbModelParam._m0[1u].y;
        _2008 = _1992.z * cbModelParam._m0[1u].y;
    }
    float _2012 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _945);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2012 : min(cbModelParam._m0[25u].w, _2012));
    float _2103;
    float _2105;
    float _2107;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2067 = fma(_1179, cbModelParam._m0[21u].z, fma(_1175, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1171)) + cbModelParam._m0[21u].w;
        float _2071 = fma(_1179, cbModelParam._m0[22u].z, fma(_1175, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1171)) + cbModelParam._m0[22u].w;
        float _2075 = fma(_1179, cbModelParam._m0[23u].z, fma(_1175, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1171)) + cbModelParam._m0[23u].w;
        float _2078 = fma(_1117, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1115));
        float _2081 = fma(_1117, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1115));
        float _2084 = fma(_1117, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1115));
        float _2224;
        if (_2078 > 0.0)
        {
            _2224 = abs((1.0 - _2067) / _2078);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2067 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2224 = frontier_phi_25_21_ladder;
        }
        float _2500;
        if (_2081 > 0.0)
        {
            _2500 = abs((1.0 - _2071) / _2081);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2071 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2500 = frontier_phi_37_32_ladder;
        }
        float _2713;
        if (_2084 > 0.0)
        {
            _2713 = abs((1.0 - _2075) / _2084);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2075 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2713 = frontier_phi_46_43_ladder;
        }
        float _2715 = isnan(_2500) ? _2224 : (isnan(_2224) ? _2500 : min(_2224, _2500));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _2078) + _2067;
        float _2721 = (_2716 * _2081) + _2071;
        float _2722 = (_2716 * _2084) + _2075;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _2013);
            frontier_phi_22_46_ladder = _2921.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2921.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2921.x * cbModelParam._m0[1u].z;
        }
        _2103 = frontier_phi_22_46_ladder_2;
        _2105 = frontier_phi_22_46_ladder_1;
        _2107 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2087 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1115, _1116, _1117), _2013);
        _2103 = _2087.x * cbModelParam._m0[1u].z;
        _2105 = _2087.y * cbModelParam._m0[1u].z;
        _2107 = _2087.z * cbModelParam._m0[1u].z;
    }
    float _2120 = (((_1142 * _1091) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2122 = (((_1142 * _1093) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2124 = (((_1142 * _1094) + _1143) * _1107) * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2127 = fma(_2124, cbSceneParam._m0[89u].z, fma(_2122, cbSceneParam._m0[89u].y, _2120 * cbSceneParam._m0[89u].x));
    float _2130 = fma(_2124, cbSceneParam._m0[90u].z, fma(_2122, cbSceneParam._m0[90u].y, _2120 * cbSceneParam._m0[90u].x));
    float _2133 = fma(_2124, cbSceneParam._m0[91u].z, fma(_2122, cbSceneParam._m0[91u].y, _2120 * cbSceneParam._m0[91u].x));
    uvec4 _2143 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2145 = _2143.x * 14u;
    uint _2146 = _2145 + 13u;
    float _2153 = _1107 + (-1.0);
    float _2158 = (cbLight._m0[_2146].x * _2153) + 1.0;
    float _2159 = (cbLight._m0[_2146].y * _2153) + 1.0;
    float _2160 = (cbLight._m0[_2146].z * _2153) + 1.0;
    float _2161 = (cbLight._m0[_2146].w * _2153) + 1.0;
    uint _2162 = _2145 + 5u;
    float _2168 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2172 = _2145 + 4u;
    float _2178 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2182 = _2145 | 1u;
    float _2193 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_942, _943, _944));
    float _2196 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_942, _943, _944));
    float _4349 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _4360 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2201 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2203 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2210 = ((cbLight._m0[_2162].x * _2168) * _2203) + ((cbLight._m0[_2172].x * _2178) * _2201);
    float _2211 = ((_2168 * cbLight._m0[_2162].y) * _2203) + ((_2178 * cbLight._m0[_2172].y) * _2201);
    float _2212 = ((_2168 * cbLight._m0[_2162].z) * _2203) + ((_2178 * cbLight._m0[_2172].z) * _2201);
    uvec4 _2216 = floatBitsToUint(cbLight._m0[_2145 + 12u]);
    bool _2218 = _2216.x == 0u;
    float _2229;
    float _2231;
    float _2233;
    if (_2218)
    {
        _2229 = _2210;
        _2231 = _2211;
        _2233 = _2212;
    }
    else
    {
        uint _2237 = _2145 + 6u;
        float _2253 = (dot(vec3(cbLight._m0[_2145 + 2u].xyz), vec3(_942, _943, _944)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4371 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2256 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2229 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2210;
        _2231 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2211;
        _2233 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2212;
    }
    bool _2236 = _2216.y == 0u;
    float _2274;
    float _2276;
    float _2278;
    if (_2236)
    {
        _2274 = _2229;
        _2276 = _2231;
        _2278 = _2233;
    }
    else
    {
        uint _2444 = _2145 + 7u;
        float _2460 = (dot(vec3(cbLight._m0[_2145 + 3u].xyz), vec3(_942, _943, _944)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4387 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2463 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2274 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2229;
        _2276 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2231;
        _2278 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2233;
    }
    uint _2281 = _2145 + 8u;
    float _2294 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _945) * 0.949999988079071044921875);
    float _2295 = _2294 * _2294;
    float _2296 = cbLight._m0[_2145].x + _1021;
    float _2297 = cbLight._m0[_2145].y + _1022;
    float _2298 = cbLight._m0[_2145].z + _1023;
    float _2302 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
    float _2303 = _2302 * _2296;
    float _2304 = _2302 * _2297;
    float _2305 = _2302 * _2298;
    float _2306 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2145].xyz));
    float _4403 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _4414 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2310 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2311 = dot(vec3(_942, _943, _944), vec3(_2303, _2304, _2305));
    float _4425 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2303, _2304, _2305));
    float _4436 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2295 * _2295;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2331 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
    float _2332 = 0.959999978542327880859375 - _1088;
    float _2334 = 0.959999978542327880859375 - _1089;
    float _2335 = 0.959999978542327880859375 - _1090;
    float _2342 = 1.0 - _2295;
    float _2353 = (0.5 / (((_2310 * ((_2309 * _2342) + _2295)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2342) + _2295) * _2309))) * _2309;
    float _4447 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2355 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    uint _2366 = _2145 + 9u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _945) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2182].x + _1021;
    float _2380 = cbLight._m0[_2182].y + _1022;
    float _2381 = cbLight._m0[_2182].z + _1023;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2182].xyz));
    float _4458 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2393 = dot(vec3(_942, _943, _944), vec3(_2386, _2387, _2388));
    float _4469 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2386, _2387, _2388));
    float _4480 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2378 * _2378;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0);
    float _2419 = 1.0 - _2378;
    float _2429 = (0.5 / (((_2310 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2419) + _2378) * _2392))) * _2392;
    float _4491 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    float _2441 = (((((_2412 * _2332) + _1091) * cbLight._m0[_2366].x) * _2431) * _2168) + (((((_2331 * _2332) + _1091) * cbLight._m0[_2281].x) * _2355) * _2178);
    float _2442 = (((((_2412 * _2334) + _1093) * cbLight._m0[_2366].y) * _2431) * _2168) + (((((_2331 * _2334) + _1093) * cbLight._m0[_2281].y) * _2355) * _2178);
    float _2443 = (((((_2412 * _2335) + _1094) * cbLight._m0[_2366].z) * _2431) * _2168) + (((((_2331 * _2335) + _1094) * cbLight._m0[_2281].z) * _2355) * _2178);
    float _2505;
    float _2507;
    float _2509;
    if (_2218)
    {
        _2505 = _2441;
        _2507 = _2442;
        _2509 = _2443;
    }
    else
    {
        uint _2511 = _2145 + 2u;
        uint _2515 = _2145 + 10u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _945) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _1021;
        float _2532 = cbLight._m0[_2511].y + _1022;
        float _2533 = cbLight._m0[_2511].z + _1023;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2511].xyz));
        float _4502 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2545 = dot(vec3(_942, _943, _944), vec3(_2538, _2539, _2540));
        float _4513 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4524 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0);
        float _2571 = 1.0 - _2530;
        float _2581 = (0.5 / (((_2310 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2571) + _2530) * _2544))) * _2544;
        float _4535 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2505 = (((((_2564 * _2332) + _1091) * cbLight._m0[_2515].x) * _2583) * _2584) + _2441;
        _2507 = (((((_2564 * _2334) + _1093) * cbLight._m0[_2515].y) * _2583) * _2584) + _2442;
        _2509 = (((((_2564 * _2335) + _1094) * cbLight._m0[_2515].z) * _2583) * _2584) + _2443;
    }
    float _2619;
    float _2621;
    float _2623;
    if (_2236)
    {
        _2619 = _2505;
        _2621 = _2507;
        _2623 = _2509;
    }
    else
    {
        uint _2630 = _2145 + 3u;
        uint _2634 = _2145 + 11u;
        float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2630].w)) * _945) * 0.949999988079071044921875);
        float _2649 = _2648 * _2648;
        float _2650 = cbLight._m0[_2630].x + _1021;
        float _2651 = cbLight._m0[_2630].y + _1022;
        float _2652 = cbLight._m0[_2630].z + _1023;
        float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
        float _2657 = _2656 * _2650;
        float _2658 = _2656 * _2651;
        float _2659 = _2656 * _2652;
        float _2660 = dot(vec3(_942, _943, _944), vec3(cbLight._m0[_2630].xyz));
        float _4551 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2664 = dot(vec3(_942, _943, _944), vec3(_2657, _2658, _2659));
        float _4562 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2668 = dot(vec3(cbLight._m0[_2630].xyz), vec3(_2657, _2658, _2659));
        float _4573 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2672 = _2649 * _2649;
        float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
        float _2683 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
        float _2690 = 1.0 - _2649;
        float _2700 = (0.5 / (((_2310 * ((_2663 * _2690) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2310 * _2690) + _2649) * _2663))) * _2663;
        float _4584 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2702 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
        float _2703 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2619 = (((((_2683 * _2332) + _1091) * cbLight._m0[_2634].x) * _2702) * _2703) + _2505;
        _2621 = (((((_2683 * _2334) + _1093) * cbLight._m0[_2634].y) * _2702) * _2703) + _2507;
        _2623 = (((((_2683 * _2335) + _1094) * cbLight._m0[_2634].z) * _2702) * _2703) + _2509;
    }
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_2143.y == 0u)
    {
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2778;
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2778;
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2778;
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.x;
        uint _2805 = uint((float(_2793.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1030) / _2794))) + floor(float(uint(cbSceneParam._m0[85u].x * _1029) / _2794)));
        float _2815 = (log2(_2781 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2816 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        uint _2819 = uint(isnan(14.0) ? _2816 : (isnan(_2816) ? 14.0 : min(_2816, 14.0)));
        uvec4 _2824 = texelFetch(g_lightClusterGridBuffer, int(((_2819 << 2u) + (_2805 << 6u)) >> 2u));
        uint _2825 = _2824.x;
        uint _2826 = _2793.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2826 >> 4u) & 15u)) + 4294967295u) & _2825) == 0u) || ((_2826 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            uint _3077 = 0u;
            uint _3086;
            bool _3087;
            for (;;)
            {
                _3086 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3077 << 2u)) >> 2u)).x;
                _3087 = _3086 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3087)
                {
                    frontier_phi_61_pred = _3071;
                    frontier_phi_61_pred_1 = _3076;
                    frontier_phi_61_pred_2 = _3075;
                    frontier_phi_61_pred_3 = _3074;
                    frontier_phi_61_pred_4 = _3073;
                    frontier_phi_61_pred_5 = _3072;
                }
                else
                {
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    uint _3201;
                    _3195 = _3071;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3086;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    for (;;)
                    {
                        uint _3205 = uint(findLSB(_3201)) + (_3077 << 5u);
                        uint _3202 = (_3201 + 4294967295u) & _3201;
                        uint _3207 = _3205 * 48u;
                        vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3207)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 3u)).x));
                        uint _3227 = (_3205 * 48u) + 4u;
                        vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3227)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 3u)).x));
                        uint _3246 = (_3205 * 48u) + 8u;
                        vec3 _3257 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3246)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 2u)).x));
                        float _3261 = _3221.x - _2779;
                        float _3262 = _3221.y - _2780;
                        float _3263 = _3221.z - _2781;
                        float _3264 = dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263));
                        float _3267 = inversesqrt(_3264);
                        float _3268 = _3267 * _3261;
                        float _3269 = _3267 * _3262;
                        float _3270 = _3267 * _3263;
                        float _3271 = dot(vec3(_1048, _1051, _1054), vec3(_3268, _3269, _3270));
                        float _3276 = 1.0 - (_3264 * _3221.w);
                        float _4610 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3277 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3278 = sqrt(_3264) * _3240.w;
                        float _3281 = 1.39999997615814208984375 / (_3278 + 1.39999997615814208984375);
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3271) + _3282;
                        float _3288 = _3278 * _3278;
                        float _3292 = ((isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))) * _3277) / ((_3288 * 0.699999988079071044921875) + 1.0);
                        float _3296 = (-0.0) - _2779;
                        float _3297 = (-0.0) - _2780;
                        float _3298 = (-0.0) - _2781;
                        float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                        float _3303 = _3302 * _3296;
                        float _3304 = _3302 * _3297;
                        float _3305 = _3302 * _3298;
                        float _3313 = exp2(log2(1.0 / ((_3288 * 3.5) + 5.0)) * 0.25);
                        float _3314 = 1.0 - _1123;
                        float _3321 = sqrt(1.0 - ((1.0 - (_3314 * _3314)) * (1.0 - (_3313 * _3313))));
                        float _3322 = _3321 * _3321;
                        float _3323 = _3322 * _3322;
                        float _3324 = _3303 + _3268;
                        float _3325 = _3304 + _3269;
                        float _3326 = _3305 + _3270;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3334 = dot(vec3(_1048, _1051, _1054), vec3(_3303, _3304, _3305));
                        float _4626 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3337 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3338 = dot(vec3(_1048, _1051, _1054), vec3(_3330 * _3324, _3330 * _3325, _3330 * _3326));
                        float _4637 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3345 = ((_3341 * _3341) * (_3323 + (-1.0))) + 1.0;
                        float _3346 = _3281 * _3322;
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3271) + _3347;
                        float _4648 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3351 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3352 = 1.0 - _3322;
                        float _3362 = (0.5 / (((_3351 * ((_3337 * _3352) + _3322)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3322) * _3337))) * _3351;
                        float _4659 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3373 = (((_3323 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3345 * _3345) * ((_3288 * 2.1991131305694580078125) + 3.141590118408203125))) * _3277;
                        _3130 = (_3292 * _3240.x) + _3198;
                        _3131 = (_3292 * _3240.y) + _3199;
                        _3132 = (_3292 * _3240.z) + _3200;
                        _3127 = (_3373 * _3257.x) + _3195;
                        _3128 = (_3373 * _3257.y) + _3196;
                        _3129 = (_3373 * _3257.z) + _3197;
                        if (_3202 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3195 = _3127;
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3202;
                        }
                    }
                    frontier_phi_61_pred = _3127;
                    frontier_phi_61_pred_1 = _3132;
                    frontier_phi_61_pred_2 = _3131;
                    frontier_phi_61_pred_3 = _3130;
                    frontier_phi_61_pred_4 = _3129;
                    frontier_phi_61_pred_5 = _3128;
                }
                _2927 = frontier_phi_61_pred;
                _2937 = frontier_phi_61_pred_1;
                _2935 = frontier_phi_61_pred_2;
                _2933 = frontier_phi_61_pred_3;
                _2931 = frontier_phi_61_pred_4;
                _2929 = frontier_phi_61_pred_5;
                uint _3078 = _3077 + 1u;
                if (_3078 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3071 = _2927;
                    _3072 = _2929;
                    _3073 = _2931;
                    _3074 = _2933;
                    _3075 = _2935;
                    _3076 = _2937;
                    _3077 = _3078;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        if (((4294967295u << _2943) & _2825) == 0u)
        {
            _3039 = _2926;
            _3041 = _2928;
            _3043 = _2930;
            _3045 = _2932;
            _3047 = _2934;
            _3049 = _2936;
        }
        else
        {
            float _3064 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
            float _3065 = _3064 * _2779;
            float _3066 = _3064 * _2780;
            float _3067 = _3064 * _2781;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3178 = _2926;
                float _3179 = _2928;
                float _3180 = _2930;
                float _3181 = _2932;
                float _3182 = _2934;
                float _3183 = _2936;
                uint _3184 = _2943;
                uint _3193;
                bool _3194;
                for (;;)
                {
                    _3193 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3184 << 2u)) >> 2u)).x;
                    _3194 = _3193 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3194)
                    {
                        frontier_phi_67_pred = _3181;
                        frontier_phi_67_pred_1 = _3182;
                        frontier_phi_67_pred_2 = _3183;
                        frontier_phi_67_pred_3 = _3180;
                        frontier_phi_67_pred_4 = _3179;
                        frontier_phi_67_pred_5 = _3178;
                    }
                    else
                    {
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3391 = _3178;
                        float _3392 = _3179;
                        float _3393 = _3180;
                        float _3394 = _3181;
                        float _3395 = _3182;
                        float _3396 = _3183;
                        uint _3397 = _3193;
                        uint _3398;
                        vec4 _3423;
                        float _3424;
                        vec4 _3439;
                        vec3 _3451;
                        vec4 _3466;
                        vec4 _3481;
                        float _3527;
                        bool _3528;
                        for (;;)
                        {
                            uint _3408 = ((_3184 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3397));
                            _3398 = (_3397 + 4294967295u) & _3397;
                            uint _3410 = _3408 * 40u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3424 = _3423.w;
                            uint _3426 = (_3408 * 40u) + 4u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3408 * 40u) + 8u;
                            _3451 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x));
                            uint _3453 = (_3408 * 40u) + 16u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3408 * 40u) + 20u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3408 * 40u) + 24u;
                            vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3502 = (_3408 * 40u) + 28u;
                            vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3527 = fma(_2781, _3515.z, fma(_2780, _3515.y, _3515.x * _2779)) + _3515.w;
                            _3528 = !((fma(_2781, _3496.z, fma(_2780, _3496.y, _3496.x * _2779)) + _3496.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3528)
                            {
                                float _3555 = _3423.x - _2779;
                                float _3556 = _3423.y - _2780;
                                float _3557 = _3423.z - _2781;
                                float _3558 = dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557));
                                float _3561 = inversesqrt(_3558);
                                float _3562 = _3561 * _3555;
                                float _3563 = _3561 * _3556;
                                float _3564 = _3561 * _3557;
                                float _3568 = 1.0 - (_3558 / (_3424 * _3424));
                                float _4670 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3573 = sqrt(_3558) * _3439.w;
                                float _3575 = 1.39999997615814208984375 / (_3573 + 1.39999997615814208984375);
                                float _3576 = _3575 * _3575;
                                float _3579 = ((1.0 - _3576) * dot(vec3(_3562, _3563, _3564), vec3(_1048, _1051, _1054))) + _3576;
                                float _3582 = _3573 * _3573;
                                float _3586 = (fma(_2781, _3466.z, fma(_2780, _3466.y, _3466.x * _2779)) + _3466.w) / _3527;
                                float _3587 = (fma(_2781, _3481.z, fma(_2780, _3481.y, _3481.x * _2779)) + _3481.w) / _3527;
                                float _3591 = 1.0 - dot(vec2(_3586, _3587), vec2(_3586, _3587));
                                float _4686 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3593 = _3592 * (((isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0))) * _3569) / ((_3582 * 0.699999988079071044921875) + 1.0));
                                float _3605 = exp2(log2(1.0 / ((_3582 * 3.5) + 5.0)) * 0.25);
                                float _3606 = 1.0 - _1123;
                                float _3613 = sqrt(1.0 - ((1.0 - (_3606 * _3606)) * (1.0 - (_3605 * _3605))));
                                float _3614 = _3613 * _3613;
                                float _3615 = _3614 * _3614;
                                float _3616 = _3562 - _3065;
                                float _3617 = _3563 - _3066;
                                float _3618 = _3564 - _3067;
                                float _3622 = inversesqrt(dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618)));
                                float _3626 = dot(vec3(_1048, _1051, _1054), vec3((-0.0) - _3065, (-0.0) - _3066, (-0.0) - _3067));
                                float _4697 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3630 = dot(vec3(_1048, _1051, _1054), vec3(_3622 * _3616, _3622 * _3617, _3622 * _3618));
                                float _4708 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3633 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3637 = ((_3633 * _3633) * (_3615 + (-1.0))) + 1.0;
                                float _3638 = _3575 * _3614;
                                float _3639 = _3638 * _3638;
                                float _3645 = ((1.0 - _3639) * dot(vec3(_1048, _1051, _1054), vec3(_3562, _3563, _3564))) + _3639;
                                float _4719 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3647 = 1.0 - _3614;
                                float _3657 = (0.5 / (((_3646 * ((_3629 * _3647) + _3614)) + 9.9999999392252902907785028219223e-09) + (((_3646 * _3647) + _3614) * _3629))) * _3646;
                                float _4730 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3667 = (_3592 * _3569) * (((_3615 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3637 * _3637) * ((_3582 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3667 * _3451.x;
                                frontier_phi_73_pred_1 = _3667 * _3451.y;
                                frontier_phi_73_pred_2 = _3593 * _3439.z;
                                frontier_phi_73_pred_3 = _3593 * _3439.y;
                                frontier_phi_73_pred_4 = _3593 * _3439.x;
                                frontier_phi_73_pred_5 = _3667 * _3451.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3671 = frontier_phi_73_pred;
                            _3672 = frontier_phi_73_pred_1;
                            _3676 = frontier_phi_73_pred_2;
                            _3675 = frontier_phi_73_pred_3;
                            _3674 = frontier_phi_73_pred_4;
                            _3673 = frontier_phi_73_pred_5;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            if (_3398 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3398;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3381;
                        frontier_phi_67_pred_1 = _3382;
                        frontier_phi_67_pred_2 = _3383;
                        frontier_phi_67_pred_3 = _3380;
                        frontier_phi_67_pred_4 = _3379;
                        frontier_phi_67_pred_5 = _3378;
                    }
                    _3046 = frontier_phi_67_pred;
                    _3048 = frontier_phi_67_pred_1;
                    _3050 = frontier_phi_67_pred_2;
                    _3044 = frontier_phi_67_pred_3;
                    _3042 = frontier_phi_67_pred_4;
                    _3040 = frontier_phi_67_pred_5;
                    uint _3185 = _3184 + 1u;
                    if (_3185 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3178 = _3040;
                        _3179 = _3042;
                        _3180 = _3044;
                        _3181 = _3046;
                        _3182 = _3048;
                        _3183 = _3050;
                        _3184 = _3185;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3048;
                frontier_phi_55_56_ladder_1 = _3050;
                frontier_phi_55_56_ladder_2 = _3046;
                frontier_phi_55_56_ladder_3 = _3044;
                frontier_phi_55_56_ladder_4 = _3042;
                frontier_phi_55_56_ladder_5 = _3040;
            }
            else
            {
                frontier_phi_55_56_ladder = _2934;
                frontier_phi_55_56_ladder_1 = _2936;
                frontier_phi_55_56_ladder_2 = _2932;
                frontier_phi_55_56_ladder_3 = _2930;
                frontier_phi_55_56_ladder_4 = _2928;
                frontier_phi_55_56_ladder_5 = _2926;
            }
            _3039 = frontier_phi_55_56_ladder_5;
            _3041 = frontier_phi_55_56_ladder_4;
            _3043 = frontier_phi_55_56_ladder_3;
            _3045 = frontier_phi_55_56_ladder_2;
            _3047 = frontier_phi_55_56_ladder;
            _3049 = frontier_phi_55_56_ladder_1;
        }
        float _3054 = isnan(1.0) ? _1107 : (isnan(_1107) ? 1.0 : min(_1107, 1.0));
        _2838 = (_3054 * _3045) + _2274;
        _2840 = (_3054 * _3047) + _2276;
        _2842 = (_3054 * _3049) + _2278;
        _2844 = ((_3039 * _1091) * _3054) + _2619;
        _2846 = ((_3041 * _1093) * _3054) + _2621;
        _2848 = ((_3043 * _1094) * _3054) + _2623;
    }
    else
    {
        _2838 = _2274;
        _2840 = _2276;
        _2842 = _2278;
        _2844 = _2619;
        _2846 = _2621;
        _2848 = _2623;
    }
    float _4746 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _4757 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _4768 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    uint _2868 = _252 + 6u;
    float _2876 = _1029 / cbSceneParam._m0[86u].x;
    float _2877 = _1030 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _964 : (isnan(_964) ? cbSceneParam._m0[77u].w : min(_964, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_964 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_964) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _964 : min(cbSceneParam._m0[80u].w, _964));
        float _2952 = _2951 / _964;
        float _2963 = _2952 * _1014;
        float _2964 = _1015 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2967 = _2952 * _1016;
        float _2969 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2970 = _2969 + cbSceneParam._m0[79u].w;
        float _2971 = cbSceneParam._m0[79u].w - _2964;
        float _2977 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2967 * _2967));
        float _2980 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2977;
        float _2985 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2987 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3140;
        if (abs((_2965 - _2969) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3140 = ((((_2970 > 0.0) ? exp2(_2985 * _2970) : (2.0 - exp2(_2987 * _2970))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2980;
        }
        else
        {
            float _3100 = 1.0 / cbSceneParam._m0[80u].x;
            float _3101 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : max(_2970, _2971));
            float _3102 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : min(_2970, _2971));
            float _3111 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : min(_3101, 0.0));
            float _3112 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : min(_3102, 0.0));
            _3140 = ((abs(_2977 / _2965) * cbSceneParam._m0[80u].y) * ((((_3111 - _3112) * 2.0) - ((exp2(_2985 * (isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0)))) - exp2(_2985 * (isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))))) * _3100)) - ((exp2(_2987 * _3111) - exp2(_2987 * _3112)) * _3100))) + (_2980 * cbSceneParam._m0[80u].z);
        }
        vec4 _3142 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3151 = exp2((_3140 * (-1.44269502162933349609375)) * (1.0 - _3142.w));
        float _3152 = log2(_3151);
        float _3168 = log2(_2896);
        _2989 = (exp2(_3168 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].x)) * _3142.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2991 = (exp2(_3168 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].y)) * _3142.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2993 = (exp2(_3168 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].z)) * _3142.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2995 = _3151 * _2896;
    }
    else
    {
        _2989 = _2893;
        _2991 = _2894;
        _2993 = _2895;
        _2995 = _2896;
    }
    float _3007 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3008 = _3007 == 3.0;
    float _3009 = log2(_2995);
    float _3016 = exp2(_3009 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2838 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1107))) + ((_2844 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3017 = exp2(_3009 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2840 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1107))) + ((_2846 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3018 = exp2(_3009 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2842 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1107))) + ((_2848 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3027 = (_3007 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3027 * (_3008 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2989)));
    SV_Target.y = _3027 * (_3008 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2991)));
    SV_Target.z = _3027 * (_3008 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2993)));
    SV_Target.w = cbInstanceData._m0[_2868].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2868].w;
}


