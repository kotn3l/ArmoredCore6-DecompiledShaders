#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1240;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _406 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_394 - _406) * cbMtdParam._m0[23u].w) + _406) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3853 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _437 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_424 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319);
    float _440 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_424 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320);
    float _443 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_424 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321);
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _473 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _475 = _473.x;
    float _476 = _473.y;
    float _477 = _473.z;
    float _486 = ((_456.z - _477) * _424) + _477;
    float _489 = ((((_456.x - _475) * _424) + _475) * 2.0) + (-1.0);
    float _491 = ((((_456.y - _476) * _424) + _476) * 2.0) + (-1.0);
    float _492 = dot(vec2(_489, _491), vec2(_489, _491));
    float _3864 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _525 = (((_513.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _489;
    float _526 = (((_513.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _491;
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _540 = _538.x;
    float _541 = 1.0 - _540;
    float _570 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_540 - _541) * cbMtdParam._m0[24u].w) + _541) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3875 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _579 = ((((cbMtdParam._m0[10u].x - _437) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _571) + _437;
    float _580 = ((((cbMtdParam._m0[10u].y - _440) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _571) + _440;
    float _581 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _443)) * _571) + _443;
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _609 = _607.x;
    float _626 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _609) * _424) + _609;
    float _630 = ((_593.x - _626) * cbMtdParam._m0[19u].z) + _626;
    float _632 = _630 - (_630 * _571);
    float _636 = (cbMtdParam._m0[19u].w * (_513.z - _486)) + _486;
    float _640 = ((cbMtdParam._m0[23u].x - _636) * _571) + _636;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _665 = (_659.x * 2.0) + (-1.0);
    float _666 = (_659.y * 2.0) + (-1.0);
    float _667 = dot(vec2(_665, _666), vec2(_665, _666));
    float _3886 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _683 = (_571 * (((cbMtdParam._m0[22u].z * _525) - _525) + _665)) + _525;
    float _684 = (_571 * (((cbMtdParam._m0[22u].z * _526) - _526) + _666)) + _526;
    float _685 = (_571 * (sqrt(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) - _497)) + _497;
    float _687 = cbMtdParam._m0[22u].x + _513.w;
    float _690 = fma(_685, _238 * NORMAL.x, fma(_684, _245 * TANGENT.x, (_231 * _223) * _683));
    float _693 = fma(_685, _238 * NORMAL.y, fma(_684, _245 * TANGENT.y, (_231 * _224) * _683));
    float _696 = fma(_685, _238 * NORMAL.z, fma(_684, _245 * TANGENT.z, (_231 * _225) * _683));
    float _700 = inversesqrt(dot(vec3(_690, _693, _696), vec3(_690, _693, _696)));
    float _701 = _700 * _690;
    float _702 = _700 * _693;
    float _703 = _700 * _696;
    float _3897 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _704 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3919 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3930 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3941 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3952 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _709 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _723 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _773 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _763);
    float _774 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _763);
    float _775 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _763);
    float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
    float _780 = _773 * _779;
    float _781 = _774 * _779;
    float _782 = _775 * _779;
    float _788 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _789 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _807 = fma(_703, cbSceneParam._m0[5u].z, fma(_702, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _701));
    float _810 = fma(_703, cbSceneParam._m0[6u].z, fma(_702, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _701));
    float _813 = fma(_703, cbSceneParam._m0[7u].z, fma(_702, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _701));
    uint _827 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _833 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_827].x;
    float _834 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_827].y;
    float _835 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_827].z;
    float _3963 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _839 = 1.0 - _709;
    float _840 = _836 * _839;
    float _841 = _837 * _839;
    float _842 = _838 * _839;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _709;
    float _848 = (_837 + (-0.039999999105930328369140625)) * _709;
    float _849 = (_838 + (-0.039999999105930328369140625)) * _709;
    float _850 = _847 + 0.039999999105930328369140625;
    float _852 = _848 + 0.039999999105930328369140625;
    float _853 = _849 + 0.039999999105930328369140625;
    vec4 _862 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _788, cbSceneParam._m0[86u].y * _789));
    float _866 = ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * TEXCOORD_5.w) * _862.x;
    float _867 = dot(vec3(_701, _702, _703), vec3(_780, _781, _782));
    float _870 = _867 * 2.0;
    float _874 = (_870 * _701) - _780;
    float _875 = (_870 * _702) - _781;
    float _876 = (_870 * _703) - _782;
    float _880 = abs(dot(vec3(_780, _781, _782), vec3(_701, _702, _703)));
    float _3996 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _882 = sqrt(_704);
    float _895 = exp2((_882 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_882 * 3.0));
    float _901 = (1.0 - _895) * ((_882 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _902 = _895 * _882;
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1239;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _964 = fma(_938, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930));
        float _968 = fma(_938, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930));
        float _972 = fma(_938, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930));
        float _997 = _930 + _701;
        float _998 = _934 + _702;
        float _999 = _938 + _703;
        float _1009 = fma(_999, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997)) - _964;
        float _1010 = fma(_999, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997)) - _968;
        float _1011 = fma(_999, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997)) - _972;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1028 = ((_1015 * _1009) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_964 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1015 * _1010) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_968 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1015 * _1011) / cbModelParam._m0[34u].z) + ((((((_972 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        float _1067 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1033.x + (-0.5));
        float _1069 = _1067 * (_1033.y + (-0.5));
        float _1070 = _1067 * (_1033.z + (-0.5));
        float _1077 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1040.x + (-0.5));
        float _1079 = _1077 * (_1040.y + (-0.5));
        float _1080 = _1077 * (_1040.z + (-0.5));
        float _1087 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1047.x + (-0.5));
        float _1089 = _1087 * (_1047.y + (-0.5));
        float _1090 = _1087 * (_1047.z + (-0.5));
        float _1097 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1054.x + (-0.5));
        float _1099 = _1097 * (_1054.y + (-0.5));
        float _1100 = _1097 * (_1054.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1121 = (dot(vec3(_701, _702, _703), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1131 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4044 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1133 + 1.0))) + _1138) * _1101;
        float _1148 = _1069 * 0.5;
        float _1149 = _1079 * 0.5;
        float _1150 = _1089 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_701, _702, _703), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4077 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1175 + 1.0))) + _1180) * _1102;
        float _1190 = _1070 * 0.5;
        float _1191 = _1080 * 0.5;
        float _1192 = _1090 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_701, _702, _703), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4110 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1217 + 1.0))) + _1222) * _1103;
        _1239 = _1070;
        _1241 = _1069;
        _1242 = _1068;
        _1243 = _1080;
        _1244 = _1079;
        _1245 = _1078;
        _1246 = _1090;
        _1247 = _1089;
        _1248 = _1088;
        _1249 = _1103;
        _1250 = _1102;
        _1251 = _1101;
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _1240;
        _1241 = _1240;
        _1242 = _1240;
        _1243 = _1240;
        _1244 = _1240;
        _1245 = _1240;
        _1246 = _1240;
        _1247 = _1240;
        _1248 = _1240;
        _1249 = _1240;
        _1250 = _1240;
        _1251 = _1240;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_938, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930));
        float _1283 = fma(_938, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930));
        float _1287 = fma(_938, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930));
        float _1310 = _930 + _701;
        float _1311 = _934 + _702;
        float _1312 = _938 + _703;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_701, _702, _703), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4173 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_701, _702, _703), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4206 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_701, _702, _703), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4239 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1240;
        _1549 = _1240;
        _1550 = _1240;
        _1551 = _1240;
        _1552 = _1240;
        _1553 = _1240;
        _1554 = _1240;
        _1555 = _1240;
        _1556 = _1240;
        _1557 = _1240;
        _1558 = _1240;
        _1559 = _1240;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1252)) + _1252;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1253)) + _1253;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1254)) + _1254;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _874 * 0.5;
    float _1617 = _875 * 0.5;
    float _1618 = _876 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1239, _1243, _1246, _1249));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _704);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1734 = fma(_938, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930)) + cbModelParam._m0[13u].w;
        float _1738 = fma(_938, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930)) + cbModelParam._m0[14u].w;
        float _1742 = fma(_938, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930)) + cbModelParam._m0[15u].w;
        float _1745 = fma(_876, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _874));
        float _1748 = fma(_876, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _874));
        float _1751 = fma(_876, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _874));
        float _1779;
        if (_1745 > 0.0)
        {
            _1779 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1779 = frontier_phi_14_12_ladder;
        }
        float _1952;
        if (_1748 > 0.0)
        {
            _1952 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1952 = frontier_phi_23_19_ladder;
        }
        float _2247;
        if (_1751 > 0.0)
        {
            _2247 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2247 = frontier_phi_35_30_ladder;
        }
        float _2249 = isnan(_1952) ? _1779 : (isnan(_1779) ? _1952 : min(_1779, _1952));
        float _2250 = isnan(_2247) ? _2249 : (isnan(_2249) ? _2247 : min(_2249, _2247));
        float _2254 = (_2250 * _1745) + _1734;
        float _2255 = (_2250 * _1748) + _1738;
        float _2256 = (_2250 * _1751) + _1742;
        float _2257 = _2250 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2257;
        float _2261 = _2257 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 > _2261) || ((_2255 < _2259) || ((_2254 < _2259) || (_2254 > _2261))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2256, cbModelParam._m0[9u].z, fma(_2255, cbModelParam._m0[9u].y, _2254 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2256, cbModelParam._m0[10u].z, fma(_2255, cbModelParam._m0[10u].y, _2254 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2256, cbModelParam._m0[11u].z, fma(_2255, cbModelParam._m0[11u].y, _2254 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_13_35_ladder = _2401.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2401.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2401.x * cbModelParam._m0[1u].y;
        }
        _1767 = frontier_phi_13_35_ladder_2;
        _1769 = frontier_phi_13_35_ladder_1;
        _1771 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_874, _875, _876), _1685);
        _1767 = _1755.x * cbModelParam._m0[1u].y;
        _1769 = _1755.y * cbModelParam._m0[1u].y;
        _1771 = _1755.z * cbModelParam._m0[1u].y;
    }
    float _1775 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _704);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1775 : min(cbModelParam._m0[25u].w, _1775));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1831 = fma(_938, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930)) + cbModelParam._m0[21u].w;
        float _1835 = fma(_938, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930)) + cbModelParam._m0[22u].w;
        float _1839 = fma(_938, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930)) + cbModelParam._m0[23u].w;
        float _1842 = fma(_876, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _874));
        float _1845 = fma(_876, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _874));
        float _1848 = fma(_876, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _874));
        float _1957;
        if (_1842 > 0.0)
        {
            _1957 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1957 = frontier_phi_25_21_ladder;
        }
        float _2274;
        if (_1845 > 0.0)
        {
            _2274 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2274 = frontier_phi_37_32_ladder;
        }
        float _2612;
        if (_1848 > 0.0)
        {
            _2612 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2612 = frontier_phi_47_44_ladder;
        }
        float _2614 = isnan(_2274) ? _1957 : (isnan(_1957) ? _2274 : min(_1957, _2274));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _1842) + _1831;
        float _2620 = (_2615 * _1845) + _1835;
        float _2621 = (_2615 * _1848) + _1839;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2623 = (-1.0) - _2622;
        float _2625 = _2622 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2621 > _2625) || ((_2621 < _2623) || ((_2620 > _2625) || ((_2620 < _2623) || ((_2619 < _2623) || (_2619 > _2625))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2621, cbModelParam._m0[17u].z, fma(_2620, cbModelParam._m0[17u].y, _2619 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2621, cbModelParam._m0[18u].z, fma(_2620, cbModelParam._m0[18u].y, _2619 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2621, cbModelParam._m0[19u].z, fma(_2620, cbModelParam._m0[19u].y, _2619 * cbModelParam._m0[19u].x))), _1776);
            frontier_phi_22_47_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1867 = frontier_phi_22_47_ladder_2;
        _1869 = frontier_phi_22_47_ladder_1;
        _1871 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_874, _875, _876), _1776);
        _1867 = _1851.x * cbModelParam._m0[1u].z;
        _1869 = _1851.y * cbModelParam._m0[1u].z;
        _1871 = _1851.z * cbModelParam._m0[1u].z;
    }
    float _1884 = (((_901 * _850) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1867 - _1767)) + _1767);
    float _1886 = (((_901 * _852) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1869 - _1769)) + _1769);
    float _1888 = (((_901 * _853) + _902) * _866) * ((cbModelParam._m0[1u].w * (_1871 - _1771)) + _1771);
    float _1891 = fma(_1888, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1884 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1888, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1884 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1888, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, _1884 * cbSceneParam._m0[91u].x));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1943 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1944 = _1931 / _1943;
    float _1945 = _1935 / _1943;
    float _1946 = _1939 / _1943;
    float _2093;
    float _2094;
    float _2095;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1973 = ((uint(_1946 > cbSceneParam._m0[59u].y) + uint(_1946 > cbSceneParam._m0[59u].x)) + uint(_1946 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1974 = _1973 + 43u;
        uint _1982 = _1973 + 44u;
        uint _1990 = _1973 + 45u;
        uint _1998 = _1973 + 46u;
        float _2009 = fma(_1943, cbSceneParam._m0[_1974].w, fma(_1939, cbSceneParam._m0[_1974].z, fma(_1935, cbSceneParam._m0[_1974].y, _1931 * cbSceneParam._m0[_1974].x)));
        float _2013 = fma(_1943, cbSceneParam._m0[_1982].w, fma(_1939, cbSceneParam._m0[_1982].z, fma(_1935, cbSceneParam._m0[_1982].y, _1931 * cbSceneParam._m0[_1982].x)));
        float _2021 = fma(_1943, cbSceneParam._m0[_1998].w, fma(_1939, cbSceneParam._m0[_1998].z, fma(_1935, cbSceneParam._m0[_1998].y, _1931 * cbSceneParam._m0[_1998].x)));
        float _2026 = cbSceneParam._m0[33u].z * _2021;
        float _2028 = cbSceneParam._m0[33u].w * _2021;
        float _2031 = fma(_1943, cbSceneParam._m0[_1990].w, fma(_1939, cbSceneParam._m0[_1990].z, fma(_1935, cbSceneParam._m0[_1990].y, _1931 * cbSceneParam._m0[_1990].x))) / _2021;
        float _2079 = (cbSceneParam._m0[33u].x - sqrt(((_1945 * _1945) + (_1944 * _1944)) + (_1946 * _1946))) * cbSceneParam._m0[33u].y;
        float _4365 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2086 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 + _2009) / _2021, (_2028 + _2013) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 + _2009) / _2021, (_2013 - _2026) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 - _2026) / _2021, (_2013 - _2028) / _2021), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2009 - _2028) / _2021, (_2026 + _2013) / _2021), _2031), 0.0)).x), vec4(0.25)));
        _2093 = 1.0 - (_2086 * cbSceneParam._m0[34u].x);
        _2094 = 1.0 - (_2086 * cbSceneParam._m0[34u].y);
        _2095 = 1.0 - (_2086 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2093 = 1.0;
        _2094 = 1.0;
        _2095 = 1.0;
    }
    float _2159;
    float _2161;
    float _2163;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2147 = fma(_1943, cbSceneParam._m0[63u].w, fma(_1939, cbSceneParam._m0[63u].z, fma(_1935, cbSceneParam._m0[63u].y, _1931 * cbSceneParam._m0[63u].x)));
        float _2148 = fma(_1943, cbSceneParam._m0[60u].w, fma(_1939, cbSceneParam._m0[60u].z, fma(_1935, cbSceneParam._m0[60u].y, _1931 * cbSceneParam._m0[60u].x))) / _2147;
        float _2149 = fma(_1943, cbSceneParam._m0[61u].w, fma(_1939, cbSceneParam._m0[61u].z, fma(_1935, cbSceneParam._m0[61u].y, _1931 * cbSceneParam._m0[61u].x))) / _2147;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2148 >= cbSceneParam._m0[64u].x) && (_2149 >= cbSceneParam._m0[64u].y)) && (_2148 <= cbSceneParam._m0[64u].z)) && (_2149 <= cbSceneParam._m0[64u].w))
        {
            float _2287 = fma(_1943, cbSceneParam._m0[62u].w, fma(_1939, cbSceneParam._m0[62u].z, fma(_1935, cbSceneParam._m0[62u].y, _1931 * cbSceneParam._m0[62u].x))) / _2147;
            float _2291 = isnan(cbSceneParam._m0[41u].w) ? _2287 : (isnan(_2287) ? cbSceneParam._m0[41u].w : max(_2287, cbSceneParam._m0[41u].w));
            float _2334 = (cbSceneParam._m0[33u].x - sqrt(((_1945 * _1945) + (_1944 * _1944)) + (_1946 * _1946))) * cbSceneParam._m0[33u].y;
            float _4381 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
            float _2341 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2148, cbSceneParam._m0[33u].w + _2149), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2148, _2149 - cbSceneParam._m0[33u].z), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2148 - cbSceneParam._m0[33u].z, _2149 - cbSceneParam._m0[33u].w), _2291), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2148 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2149), _2291), 0.0)).x), vec4(0.25)));
            float _2345 = 1.0 - (_2341 * cbSceneParam._m0[34u].x);
            float _2346 = 1.0 - (_2341 * cbSceneParam._m0[34u].y);
            float _2347 = 1.0 - (_2341 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2347) ? _2095 : (isnan(_2095) ? _2347 : min(_2095, _2347));
            frontier_phi_34_33_ladder_1 = isnan(_2346) ? _2094 : (isnan(_2094) ? _2346 : min(_2094, _2346));
            frontier_phi_34_33_ladder_2 = isnan(_2345) ? _2093 : (isnan(_2093) ? _2345 : min(_2093, _2345));
        }
        else
        {
            frontier_phi_34_33_ladder = _2095;
            frontier_phi_34_33_ladder_1 = _2094;
            frontier_phi_34_33_ladder_2 = _2093;
        }
        _2159 = frontier_phi_34_33_ladder_2;
        _2161 = frontier_phi_34_33_ladder_1;
        _2163 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2159 = _2093;
        _2161 = _2094;
        _2163 = _2095;
    }
    uvec4 _2168 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2170 = _2168.x * 14u;
    uint _2171 = _2170 + 13u;
    float _2178 = _866 + (-1.0);
    float _2183 = (cbLight._m0[_2171].x * _2178) + 1.0;
    float _2184 = (cbLight._m0[_2171].y * _2178) + 1.0;
    float _2185 = (cbLight._m0[_2171].z * _2178) + 1.0;
    float _2186 = (cbLight._m0[_2171].w * _2178) + 1.0;
    uint _2187 = _2170 + 5u;
    float _2193 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2197 = _2170 + 4u;
    float _2206 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2210 = _2170 | 1u;
    float _2221 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_701, _702, _703));
    float _2224 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_701, _702, _703));
    float _4417 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _4428 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2229 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * 0.3183098733425140380859375;
    float _2231 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * 0.3183098733425140380859375;
    float _2238 = ((cbLight._m0[_2187].x * _2193) * _2231) + (((cbLight._m0[_2197].x * _2159) * _2206) * _2229);
    float _2239 = ((_2193 * cbLight._m0[_2187].y) * _2231) + (((cbLight._m0[_2197].y * _2161) * _2206) * _2229);
    float _2240 = ((_2193 * cbLight._m0[_2187].z) * _2231) + (((cbLight._m0[_2197].z * _2163) * _2206) * _2229);
    uvec4 _2244 = floatBitsToUint(cbLight._m0[_2170 + 12u]);
    bool _2246 = _2244.x == 0u;
    float _2348;
    float _2350;
    float _2352;
    if (_2246)
    {
        _2348 = _2238;
        _2350 = _2239;
        _2352 = _2240;
    }
    else
    {
        uint _2356 = _2170 + 6u;
        float _2372 = (dot(vec3(cbLight._m0[_2170 + 2u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2373 = _2372 * _2372;
        float _4439 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2374 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2375 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2348 = (((cbLight._m0[_2356].x * 0.3183098733425140380859375) * _2374) * _2375) + _2238;
        _2350 = (((cbLight._m0[_2356].y * 0.3183098733425140380859375) * _2374) * _2375) + _2239;
        _2352 = (((cbLight._m0[_2356].z * 0.3183098733425140380859375) * _2374) * _2375) + _2240;
    }
    bool _2355 = _2244.y == 0u;
    float _2410;
    float _2412;
    float _2414;
    if (_2355)
    {
        _2410 = _2348;
        _2412 = _2350;
        _2414 = _2352;
    }
    else
    {
        uint _2583 = _2170 + 7u;
        float _2599 = (dot(vec3(cbLight._m0[_2170 + 3u].xyz), vec3(_701, _702, _703)) * 0.5) + 0.5;
        float _2600 = _2599 * _2599;
        float _4455 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2601 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2602 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2410 = (((cbLight._m0[_2583].x * 0.3183098733425140380859375) * _2601) * _2602) + _2348;
        _2412 = (((cbLight._m0[_2583].y * 0.3183098733425140380859375) * _2601) * _2602) + _2350;
        _2414 = (((cbLight._m0[_2583].z * 0.3183098733425140380859375) * _2601) * _2602) + _2352;
    }
    uint _2417 = _2170 + 8u;
    float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _704) * 0.949999988079071044921875);
    float _2431 = _2430 * _2430;
    float _2432 = cbLight._m0[_2170].x + _780;
    float _2433 = cbLight._m0[_2170].y + _781;
    float _2434 = cbLight._m0[_2170].z + _782;
    float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
    float _2439 = _2438 * _2432;
    float _2440 = _2438 * _2433;
    float _2441 = _2438 * _2434;
    float _2442 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2170].xyz));
    float _4471 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _4482 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2446 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2447 = dot(vec3(_701, _702, _703), vec3(_2439, _2440, _2441));
    float _4493 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2451 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2439, _2440, _2441));
    float _4504 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2455 = _2431 * _2431;
    float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
    float _2467 = exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0);
    float _2468 = 0.959999978542327880859375 - _847;
    float _2470 = 0.959999978542327880859375 - _848;
    float _2471 = 0.959999978542327880859375 - _849;
    float _2478 = 1.0 - _2431;
    float _2489 = (0.5 / (((_2446 * ((_2445 * _2478) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2478) + _2431) * _2445))) * _2445;
    float _4515 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2491 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
    uint _2505 = _2170 + 9u;
    float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _704) * 0.949999988079071044921875);
    float _2517 = _2516 * _2516;
    float _2518 = cbLight._m0[_2210].x + _780;
    float _2519 = cbLight._m0[_2210].y + _781;
    float _2520 = cbLight._m0[_2210].z + _782;
    float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
    float _2525 = _2524 * _2518;
    float _2526 = _2524 * _2519;
    float _2527 = _2524 * _2520;
    float _2528 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2210].xyz));
    float _4526 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2532 = dot(vec3(_701, _702, _703), vec3(_2525, _2526, _2527));
    float _4537 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2536 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2525, _2526, _2527));
    float _4548 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2540 = _2517 * _2517;
    float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
    float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0);
    float _2558 = 1.0 - _2517;
    float _2568 = (0.5 / (((_2446 * ((_2531 * _2558) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2558) + _2517) * _2531))) * _2531;
    float _4559 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2570 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
    float _2580 = (((((_2551 * _2468) + _850) * cbLight._m0[_2505].x) * _2570) * _2193) + ((((cbLight._m0[_2417].x * _2159) * ((_2467 * _2468) + _850)) * _2491) * _2206);
    float _2581 = (((((_2551 * _2470) + _852) * cbLight._m0[_2505].y) * _2570) * _2193) + ((((cbLight._m0[_2417].y * _2161) * ((_2467 * _2470) + _852)) * _2491) * _2206);
    float _2582 = (((((_2551 * _2471) + _853) * cbLight._m0[_2505].z) * _2570) * _2193) + ((((cbLight._m0[_2417].z * _2163) * ((_2467 * _2471) + _853)) * _2491) * _2206);
    float _2638;
    float _2640;
    float _2642;
    if (_2246)
    {
        _2638 = _2580;
        _2640 = _2581;
        _2642 = _2582;
    }
    else
    {
        uint _2644 = _2170 + 2u;
        uint _2648 = _2170 + 10u;
        float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2644].w)) * _704) * 0.949999988079071044921875);
        float _2663 = _2662 * _2662;
        float _2664 = cbLight._m0[_2644].x + _780;
        float _2665 = cbLight._m0[_2644].y + _781;
        float _2666 = cbLight._m0[_2644].z + _782;
        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
        float _2671 = _2670 * _2664;
        float _2672 = _2670 * _2665;
        float _2673 = _2670 * _2666;
        float _2674 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2644].xyz));
        float _4570 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2678 = dot(vec3(_701, _702, _703), vec3(_2671, _2672, _2673));
        float _4581 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2682 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_2671, _2672, _2673));
        float _4592 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2686 = _2663 * _2663;
        float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
        float _2697 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
        float _2704 = 1.0 - _2663;
        float _2714 = (0.5 / (((_2446 * ((_2677 * _2704) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2704) + _2663) * _2677))) * _2677;
        float _4603 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2638 = (((((_2697 * _2468) + _850) * cbLight._m0[_2648].x) * _2716) * _2717) + _2580;
        _2640 = (((((_2697 * _2470) + _852) * cbLight._m0[_2648].y) * _2716) * _2717) + _2581;
        _2642 = (((((_2697 * _2471) + _853) * cbLight._m0[_2648].z) * _2716) * _2717) + _2582;
    }
    float _2748;
    float _2750;
    float _2752;
    if (_2355)
    {
        _2748 = _2638;
        _2750 = _2640;
        _2752 = _2642;
    }
    else
    {
        uint _2759 = _2170 + 3u;
        uint _2763 = _2170 + 11u;
        float _2777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2759].w)) * _704) * 0.949999988079071044921875);
        float _2778 = _2777 * _2777;
        float _2779 = cbLight._m0[_2759].x + _780;
        float _2780 = cbLight._m0[_2759].y + _781;
        float _2781 = cbLight._m0[_2759].z + _782;
        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
        float _2786 = _2785 * _2779;
        float _2787 = _2785 * _2780;
        float _2788 = _2785 * _2781;
        float _2789 = dot(vec3(_701, _702, _703), vec3(cbLight._m0[_2759].xyz));
        float _4619 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2793 = dot(vec3(_701, _702, _703), vec3(_2786, _2787, _2788));
        float _4630 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2797 = dot(vec3(cbLight._m0[_2759].xyz), vec3(_2786, _2787, _2788));
        float _4641 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2801 = _2778 * _2778;
        float _2805 = ((_2796 * _2796) * (_2801 + (-1.0))) + 1.0;
        float _2812 = exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0);
        float _2819 = 1.0 - _2778;
        float _2829 = (0.5 / (((_2446 * ((_2792 * _2819) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2446 * _2819) + _2778) * _2792))) * _2792;
        float _4652 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2831 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2801 / ((_2805 * _2805) * 3.141590118408203125));
        float _2832 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2748 = (((((_2812 * _2468) + _850) * cbLight._m0[_2763].x) * _2831) * _2832) + _2638;
        _2750 = (((((_2812 * _2470) + _852) * cbLight._m0[_2763].y) * _2831) * _2832) + _2640;
        _2752 = (((((_2812 * _2471) + _853) * cbLight._m0[_2763].z) * _2831) * _2832) + _2642;
    }
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_2168.y == 0u)
    {
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.x;
        uint _2865 = uint((float(_2853.y) * floor(float(uint(cbSceneParam._m0[85u].y * _789) / _2854))) + floor(float(uint(cbSceneParam._m0[85u].x * _788) / _2854)));
        float _2875 = (log2(_1946 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2876 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        uint _2879 = uint(isnan(14.0) ? _2876 : (isnan(_2876) ? 14.0 : min(_2876, 14.0)));
        uvec4 _2884 = texelFetch(g_lightClusterGridBuffer, int(((_2879 << 2u) + (_2865 << 6u)) >> 2u));
        uint _2885 = _2884.x;
        uint _2886 = _2853.z;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        if (((((1u << ((_2886 >> 4u) & 15u)) + 4294967295u) & _2885) == 0u) || ((_2886 & 240u) == 0u))
        {
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
        }
        else
        {
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            uint _3116 = 0u;
            uint _3125;
            bool _3126;
            for (;;)
            {
                _3125 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                _3126 = _3125 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3126)
                {
                    frontier_phi_66_pred = _3115;
                    frontier_phi_66_pred_1 = _3114;
                    frontier_phi_66_pred_2 = _3113;
                    frontier_phi_66_pred_3 = _3112;
                    frontier_phi_66_pred_4 = _3111;
                    frontier_phi_66_pred_5 = _3110;
                }
                else
                {
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    uint _3240;
                    _3234 = _3110;
                    _3235 = _3111;
                    _3236 = _3112;
                    _3237 = _3113;
                    _3238 = _3114;
                    _3239 = _3115;
                    _3240 = _3125;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    for (;;)
                    {
                        uint _3244 = uint(findLSB(_3240)) + (_3116 << 5u);
                        uint _3241 = (_3240 + 4294967295u) & _3240;
                        uint _3246 = _3244 * 48u;
                        vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3246)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 3u)).x));
                        uint _3266 = (_3244 * 48u) + 4u;
                        vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3266)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 3u)).x));
                        uint _3285 = (_3244 * 48u) + 8u;
                        vec3 _3296 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x));
                        float _3300 = _3260.x - _1944;
                        float _3301 = _3260.y - _1945;
                        float _3302 = _3260.z - _1946;
                        float _3303 = dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302));
                        float _3306 = inversesqrt(_3303);
                        float _3307 = _3306 * _3300;
                        float _3308 = _3306 * _3301;
                        float _3309 = _3306 * _3302;
                        float _3310 = dot(vec3(_807, _810, _813), vec3(_3307, _3308, _3309));
                        float _3315 = 1.0 - (_3303 * _3260.w);
                        float _4678 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3316 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3317 = sqrt(_3303) * _3279.w;
                        float _3320 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                        float _3321 = _3320 * _3320;
                        float _3324 = ((1.0 - _3321) * _3310) + _3321;
                        float _3327 = _3317 * _3317;
                        float _3331 = ((isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0))) * _3316) / ((_3327 * 0.699999988079071044921875) + 1.0);
                        float _3335 = (-0.0) - _1944;
                        float _3336 = (-0.0) - _1945;
                        float _3337 = (-0.0) - _1946;
                        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                        float _3342 = _3341 * _3335;
                        float _3343 = _3341 * _3336;
                        float _3344 = _3341 * _3337;
                        float _3351 = exp2(log2(1.0 / ((_3327 * 3.5) + 5.0)) * 0.25);
                        float _3352 = 1.0 - _882;
                        float _3359 = sqrt(1.0 - ((1.0 - (_3352 * _3352)) * (1.0 - (_3351 * _3351))));
                        float _3360 = _3359 * _3359;
                        float _3361 = _3360 * _3360;
                        float _3362 = _3342 + _3307;
                        float _3363 = _3343 + _3308;
                        float _3364 = _3344 + _3309;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3372 = dot(vec3(_807, _810, _813), vec3(_3342, _3343, _3344));
                        float _4694 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3375 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3376 = dot(vec3(_807, _810, _813), vec3(_3368 * _3362, _3368 * _3363, _3368 * _3364));
                        float _4705 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3379 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3383 = ((_3379 * _3379) * (_3361 + (-1.0))) + 1.0;
                        float _3384 = _3320 * _3360;
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3310) + _3385;
                        float _4716 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3389 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3390 = 1.0 - _3360;
                        float _3400 = (0.5 / (((_3389 * ((_3375 * _3390) + _3360)) + 9.9999999392252902907785028219223e-09) + (((_3389 * _3390) + _3360) * _3375))) * _3389;
                        float _4727 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3411 = (((_3361 * 3.1415927410125732421875) * (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) / ((_3383 * _3383) * ((_3327 * 2.1991131305694580078125) + 3.141590118408203125))) * _3316;
                        _3169 = (_3331 * _3279.x) + _3237;
                        _3170 = (_3331 * _3279.y) + _3238;
                        _3171 = (_3331 * _3279.z) + _3239;
                        _3166 = (_3411 * _3296.x) + _3234;
                        _3167 = (_3411 * _3296.y) + _3235;
                        _3168 = (_3411 * _3296.z) + _3236;
                        if (_3241 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3234 = _3166;
                            _3235 = _3167;
                            _3236 = _3168;
                            _3237 = _3169;
                            _3238 = _3170;
                            _3239 = _3171;
                            _3240 = _3241;
                        }
                    }
                    frontier_phi_66_pred = _3171;
                    frontier_phi_66_pred_1 = _3170;
                    frontier_phi_66_pred_2 = _3169;
                    frontier_phi_66_pred_3 = _3168;
                    frontier_phi_66_pred_4 = _3167;
                    frontier_phi_66_pred_5 = _3166;
                }
                _2976 = frontier_phi_66_pred;
                _2974 = frontier_phi_66_pred_1;
                _2972 = frontier_phi_66_pred_2;
                _2970 = frontier_phi_66_pred_3;
                _2968 = frontier_phi_66_pred_4;
                _2966 = frontier_phi_66_pred_5;
                uint _3117 = _3116 + 1u;
                if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3110 = _2966;
                    _3111 = _2968;
                    _3112 = _2970;
                    _3113 = _2972;
                    _3114 = _2974;
                    _3115 = _2976;
                    _3116 = _3117;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
        }
        uvec4 _2979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2980 = _2979.z;
        uint _2982 = (_2980 >> 8u) & 15u;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((4294967295u << _2982) & _2885) == 0u)
        {
            _3078 = _2965;
            _3080 = _2967;
            _3082 = _2969;
            _3084 = _2971;
            _3086 = _2973;
            _3088 = _2975;
        }
        else
        {
            float _3103 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
            float _3104 = _3103 * _1944;
            float _3105 = _3103 * _1945;
            float _3106 = _3103 * _1946;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2982 < ((_2980 >> 12u) & 15u))
            {
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3217 = _2965;
                float _3218 = _2967;
                float _3219 = _2969;
                float _3220 = _2971;
                float _3221 = _2973;
                float _3222 = _2975;
                uint _3223 = _2982;
                uint _3232;
                bool _3233;
                for (;;)
                {
                    _3232 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3223 << 2u)) >> 2u)).x;
                    _3233 = _3232 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3233)
                    {
                        frontier_phi_72_pred = _3222;
                        frontier_phi_72_pred_1 = _3221;
                        frontier_phi_72_pred_2 = _3220;
                        frontier_phi_72_pred_3 = _3219;
                        frontier_phi_72_pred_4 = _3218;
                        frontier_phi_72_pred_5 = _3217;
                    }
                    else
                    {
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3429 = _3217;
                        float _3430 = _3218;
                        float _3431 = _3219;
                        float _3432 = _3220;
                        float _3433 = _3221;
                        float _3434 = _3222;
                        uint _3435 = _3232;
                        uint _3436;
                        vec4 _3461;
                        float _3462;
                        vec4 _3477;
                        vec3 _3489;
                        vec4 _3504;
                        vec4 _3520;
                        float _3566;
                        bool _3567;
                        for (;;)
                        {
                            uint _3446 = ((_3223 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3435));
                            _3436 = (_3435 + 4294967295u) & _3435;
                            uint _3448 = _3446 * 40u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3462 = _3461.w;
                            uint _3464 = (_3446 * 40u) + 4u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3446 * 40u) + 8u;
                            _3489 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x));
                            uint _3491 = (_3446 * 40u) + 16u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3507 = (_3446 * 40u) + 20u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3446 * 40u) + 24u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3541 = (_3446 * 40u) + 28u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3566 = fma(_1946, _3554.z, fma(_1945, _3554.y, _3554.x * _1944)) + _3554.w;
                            _3567 = !((fma(_1946, _3535.z, fma(_1945, _3535.y, _3535.x * _1944)) + _3535.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3567)
                            {
                                float _3594 = _3461.x - _1944;
                                float _3595 = _3461.y - _1945;
                                float _3596 = _3461.z - _1946;
                                float _3597 = dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596));
                                float _3600 = inversesqrt(_3597);
                                float _3601 = _3600 * _3594;
                                float _3602 = _3600 * _3595;
                                float _3603 = _3600 * _3596;
                                float _3607 = 1.0 - (_3597 / (_3462 * _3462));
                                float _4738 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3612 = sqrt(_3597) * _3477.w;
                                float _3614 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                                float _3615 = _3614 * _3614;
                                float _3618 = ((1.0 - _3615) * dot(vec3(_3601, _3602, _3603), vec3(_807, _810, _813))) + _3615;
                                float _3621 = _3612 * _3612;
                                float _3625 = (fma(_1946, _3504.z, fma(_1945, _3504.y, _3504.x * _1944)) + _3504.w) / _3566;
                                float _3626 = (fma(_1946, _3520.z, fma(_1945, _3520.y, _3520.x * _1944)) + _3520.w) / _3566;
                                float _3630 = 1.0 - dot(vec2(_3625, _3626), vec2(_3625, _3626));
                                float _4754 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3632 = _3631 * (((isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0))) * _3608) / ((_3621 * 0.699999988079071044921875) + 1.0));
                                float _3644 = exp2(log2(1.0 / ((_3621 * 3.5) + 5.0)) * 0.25);
                                float _3645 = 1.0 - _882;
                                float _3652 = sqrt(1.0 - ((1.0 - (_3645 * _3645)) * (1.0 - (_3644 * _3644))));
                                float _3653 = _3652 * _3652;
                                float _3654 = _3653 * _3653;
                                float _3655 = _3601 - _3104;
                                float _3656 = _3602 - _3105;
                                float _3657 = _3603 - _3106;
                                float _3661 = inversesqrt(dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657)));
                                float _3665 = dot(vec3(_807, _810, _813), vec3((-0.0) - _3104, (-0.0) - _3105, (-0.0) - _3106));
                                float _4765 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3668 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3669 = dot(vec3(_807, _810, _813), vec3(_3661 * _3655, _3661 * _3656, _3661 * _3657));
                                float _4776 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3676 = ((_3672 * _3672) * (_3654 + (-1.0))) + 1.0;
                                float _3677 = _3614 * _3653;
                                float _3678 = _3677 * _3677;
                                float _3684 = ((1.0 - _3678) * dot(vec3(_807, _810, _813), vec3(_3601, _3602, _3603))) + _3678;
                                float _4787 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3686 = 1.0 - _3653;
                                float _3696 = (0.5 / (((_3685 * ((_3668 * _3686) + _3653)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3653) * _3668))) * _3685;
                                float _4798 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3706 = (_3631 * _3608) * (((_3654 * 3.1415927410125732421875) * (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) / ((_3676 * _3676) * ((_3621 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3632 * _3477.y;
                                frontier_phi_78_pred_1 = _3632 * _3477.x;
                                frontier_phi_78_pred_2 = _3706 * _3489.z;
                                frontier_phi_78_pred_3 = _3706 * _3489.y;
                                frontier_phi_78_pred_4 = _3706 * _3489.x;
                                frontier_phi_78_pred_5 = _3632 * _3477.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3714 = frontier_phi_78_pred;
                            _3713 = frontier_phi_78_pred_1;
                            _3712 = frontier_phi_78_pred_2;
                            _3711 = frontier_phi_78_pred_3;
                            _3710 = frontier_phi_78_pred_4;
                            _3715 = frontier_phi_78_pred_5;
                            _3419 = _3713 + _3432;
                            _3420 = _3714 + _3433;
                            _3421 = _3715 + _3434;
                            _3416 = _3710 + _3429;
                            _3417 = _3711 + _3430;
                            _3418 = _3712 + _3431;
                            if (_3436 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3436;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3421;
                        frontier_phi_72_pred_1 = _3420;
                        frontier_phi_72_pred_2 = _3419;
                        frontier_phi_72_pred_3 = _3418;
                        frontier_phi_72_pred_4 = _3417;
                        frontier_phi_72_pred_5 = _3416;
                    }
                    _3089 = frontier_phi_72_pred;
                    _3087 = frontier_phi_72_pred_1;
                    _3085 = frontier_phi_72_pred_2;
                    _3083 = frontier_phi_72_pred_3;
                    _3081 = frontier_phi_72_pred_4;
                    _3079 = frontier_phi_72_pred_5;
                    uint _3224 = _3223 + 1u;
                    if (_3224 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3217 = _3079;
                        _3218 = _3081;
                        _3219 = _3083;
                        _3220 = _3085;
                        _3221 = _3087;
                        _3222 = _3089;
                        _3223 = _3224;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3089;
                frontier_phi_60_61_ladder_1 = _3087;
                frontier_phi_60_61_ladder_2 = _3083;
                frontier_phi_60_61_ladder_3 = _3081;
                frontier_phi_60_61_ladder_4 = _3079;
                frontier_phi_60_61_ladder_5 = _3085;
            }
            else
            {
                frontier_phi_60_61_ladder = _2975;
                frontier_phi_60_61_ladder_1 = _2973;
                frontier_phi_60_61_ladder_2 = _2969;
                frontier_phi_60_61_ladder_3 = _2967;
                frontier_phi_60_61_ladder_4 = _2965;
                frontier_phi_60_61_ladder_5 = _2971;
            }
            _3078 = frontier_phi_60_61_ladder_4;
            _3080 = frontier_phi_60_61_ladder_3;
            _3082 = frontier_phi_60_61_ladder_2;
            _3084 = frontier_phi_60_61_ladder_5;
            _3086 = frontier_phi_60_61_ladder_1;
            _3088 = frontier_phi_60_61_ladder;
        }
        float _3093 = isnan(1.0) ? _866 : (isnan(_866) ? 1.0 : min(_866, 1.0));
        _2898 = (_3093 * _3084) + _2410;
        _2900 = (_3093 * _3086) + _2412;
        _2902 = (_3093 * _3088) + _2414;
        _2904 = ((_3078 * _850) * _3093) + _2748;
        _2906 = ((_3080 * _852) * _3093) + _2750;
        _2908 = ((_3082 * _853) * _3093) + _2752;
    }
    else
    {
        _2898 = _2410;
        _2900 = _2412;
        _2902 = _2414;
        _2904 = _2748;
        _2906 = _2750;
        _2908 = _2752;
    }
    float _4814 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4825 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4836 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    uint _2928 = _251 + 6u;
    float _2936 = _788 / cbSceneParam._m0[86u].x;
    float _2937 = _789 / cbSceneParam._m0[86u].y;
    vec4 _2951 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2936, _2937, (log2((isnan(cbSceneParam._m0[77u].w) ? _723 : (isnan(_723) ? cbSceneParam._m0[77u].w : min(_723, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2953 = _2951.x;
    float _2954 = _2951.y;
    float _2955 = _2951.z;
    float _2956 = _2951.w;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_723 > cbSceneParam._m0[78u].w)
    {
        float _2990 = isnan(_723) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _723 : min(cbSceneParam._m0[80u].w, _723));
        float _2991 = _2990 / _723;
        float _3002 = _2991 * _773;
        float _3003 = _774 * _2991;
        float _3004 = (-0.0) - _3003;
        float _3006 = _2991 * _775;
        float _3008 = (cbSceneParam._m0[77u].w * _3004) / _2990;
        float _3009 = _3008 + cbSceneParam._m0[79u].w;
        float _3010 = cbSceneParam._m0[79u].w - _3003;
        float _3016 = sqrt(((_3002 * _3002) + (_3003 * _3003)) + (_3006 * _3006));
        float _3019 = (1.0 - (cbSceneParam._m0[77u].w / _2990)) * _3016;
        float _3024 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3026 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3179;
        if (abs((_3004 - _3008) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3179 = ((((_3009 > 0.0) ? exp2(_3024 * _3009) : (2.0 - exp2(_3026 * _3009))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3019;
        }
        else
        {
            float _3139 = 1.0 / cbSceneParam._m0[80u].x;
            float _3140 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : max(_3009, _3010));
            float _3141 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : min(_3009, _3010));
            float _3150 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : min(_3140, 0.0));
            float _3151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : min(_3141, 0.0));
            _3179 = ((abs(_3016 / _3004) * cbSceneParam._m0[80u].y) * ((((_3150 - _3151) * 2.0) - ((exp2(_3024 * (isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0)))) - exp2(_3024 * (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))))) * _3139)) - ((exp2(_3026 * _3150) - exp2(_3026 * _3151)) * _3139))) + (_3019 * cbSceneParam._m0[80u].z);
        }
        vec4 _3181 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2936, _2937, 1.0), 0.0);
        float _3190 = exp2((_3179 * (-1.44269502162933349609375)) * (1.0 - _3181.w));
        float _3191 = log2(_3190);
        float _3207 = log2(_2956);
        _3028 = (exp2(_3207 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].x)) * _3181.x) / cbSceneParam._m0[78u].x)) + _2953;
        _3030 = (exp2(_3207 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].y)) * _3181.y) / cbSceneParam._m0[78u].y)) + _2954;
        _3032 = (exp2(_3207 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].z)) * _3181.z) / cbSceneParam._m0[78u].z)) + _2955;
        _3034 = _3190 * _2956;
    }
    else
    {
        _3028 = _2953;
        _3030 = _2954;
        _3032 = _2955;
        _3034 = _2956;
    }
    float _3046 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3047 = _3046 == 3.0;
    float _3048 = log2(_3034);
    float _3055 = exp2(_3048 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2898 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _866))) + ((_2904 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _3056 = exp2(_3048 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2900 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _866))) + ((_2906 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _3057 = exp2(_3048 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2902 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _866))) + ((_2908 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _3066 = (_3046 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3066 * (_3047 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3028)));
    SV_Target.y = _3066 * (_3047 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3030)));
    SV_Target.z = _3066 * (_3047 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3032)));
    SV_Target.w = cbInstanceData._m0[_2928].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2928].w;
}


