#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1746;
float _4124;
float _4125;
float _4126;
float _4127;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4136 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4147 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4158 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _390 = _385.x * cbMtdParam._m0[11u].x;
    float _391 = _385.y * cbMtdParam._m0[11u].y;
    float _392 = _385.z * cbMtdParam._m0[11u].z;
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _479 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _496 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _430.x) * 2.0) - ((((_467 - _479) * cbMtdParam._m0[23u].w) + _479) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4169 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _504 = (_497 * ((_411.x * cbMtdParam._m0[12u].x) - _390)) + _390;
    float _505 = (_497 * ((_411.y * cbMtdParam._m0[12u].y) - _391)) + _391;
    float _506 = (_497 * ((_411.z * cbMtdParam._m0[12u].z) - _392)) + _392;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _545 = _543.x;
    float _555 = dot(vec4(_545, _543.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _569 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _430.y) * 2.0) - ((((_545 - _555) * cbMtdParam._m0[23u].w) + _555) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4180 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _577 = (_570 * ((_523.x * cbMtdParam._m0[13u].x) - _504)) + _504;
    float _578 = (_570 * ((_523.y * cbMtdParam._m0[13u].y) - _505)) + _505;
    float _579 = (_570 * ((_523.z * cbMtdParam._m0[13u].z) - _506)) + _506;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _617 = _615.x;
    float _627 = dot(vec4(_617, _615.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _639 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _430.z) * 2.0) - ((((_617 - _627) * cbMtdParam._m0[23u].w) + _627) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4191 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _650 = (_359.x * cbMtdParam._m0[9u].x) * ((_640 * ((_598.x * cbMtdParam._m0[14u].x) - _577)) + _577);
    float _651 = (_359.y * cbMtdParam._m0[9u].y) * ((_640 * ((_598.y * cbMtdParam._m0[14u].y) - _578)) + _578);
    float _652 = (_359.z * cbMtdParam._m0[9u].z) * ((_640 * ((_598.z * cbMtdParam._m0[14u].z) - _579)) + _579);
    float _656 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _650;
    float _659 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _651;
    float _662 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _652;
    float _670 = (((_650 - _656) * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) + _656) * 4.55000019073486328125;
    float _672 = (((_651 - _659) * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) + _659) * 4.55000019073486328125;
    float _674 = (((_652 - _662) * (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) + _662) * 4.55000019073486328125;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _733 = _731.x;
    float _734 = _731.y;
    float _735 = _731.z;
    float _742 = ((_714.x - _733) * _497) + _733;
    float _743 = ((_714.y - _734) * _497) + _734;
    float _744 = ((_714.z - _735) * _497) + _735;
    vec4 _756 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _767 = ((_756.x - _742) * _570) + _742;
    float _768 = ((_756.y - _743) * _570) + _743;
    float _769 = ((_756.z - _744) * _570) + _744;
    vec4 _781 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _794 = ((_781.z - _769) * _640) + _769;
    float _797 = ((((_781.x - _767) * _640) + _767) * 2.0) + (-1.0);
    float _798 = ((((_781.y - _768) * _640) + _768) * 2.0) + (-1.0);
    float _799 = dot(vec2(_797, _798), vec2(_797, _798));
    float _4202 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _804 = sqrt(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))));
    vec4 _818 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _843 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _845 = _843.x;
    float _846 = 1.0 - _845;
    float _854 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _857 = ((isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : min(_854, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _866 = (_857 - ((((((_845 - _846) * cbMtdParam._m0[24u].z) + _846) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _857))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4223 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _867 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _874 = (_867 * (cbMtdParam._m0[17u].x - _670)) + _670;
    float _875 = (_867 * (cbMtdParam._m0[17u].y - _672)) + _672;
    float _876 = (_867 * (cbMtdParam._m0[17u].z - _674)) + _674;
    float _891 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _892 = _891 * TEXCOORD.z;
    float _893 = _891 * TEXCOORD.w;
    vec4 _905 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _892) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _893) + cbTextureTilingScale._m0[19u].w));
    float _907 = _905.x;
    float _908 = 1.0 - _907;
    float _933 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_907 - _908) * cbMtdParam._m0[24u].w) + _908) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4234 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _934 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _942 = ((((cbMtdParam._m0[10u].x - _874) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _934) + _874;
    float _943 = ((((cbMtdParam._m0[10u].y - _875) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _934) + _875;
    float _944 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _876)) * _934) + _876;
    vec4 _970 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _972 = _970.x;
    float _989 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _972) * _497) + _972;
    float _1006 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _989) * _570) + _989;
    float _1023 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _1006) * _640) + _1006;
    float _1027 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1023) * cbMtdParam._m0[19u].z) + _1023;
    float _1029 = _1027 - (_1027 * _867);
    float _1031 = _1029 - (_1029 * _934);
    float _1036 = (((_691.z - _794) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _794;
    float _1042 = ((_818.z - _1036) * cbMtdParam._m0[19u].w) + _1036;
    vec4 _1058 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1065 = (_1058.x * 2.0) + (-1.0);
    float _1066 = (_1058.y * 2.0) + (-1.0);
    float _1067 = dot(vec2(_1065, _1066), vec2(_1065, _1066));
    float _4245 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1075 = (_867 * (_1058.z - _1042)) + _1042;
    float _1078 = ((cbMtdParam._m0[23u].x - _1075) * _934) + _1075;
    vec4 _1101 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _892) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _893) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1107 = (_1101.x * 2.0) + (-1.0);
    float _1108 = (_1101.y * 2.0) + (-1.0);
    float _1109 = dot(vec2(_1107, _1108), vec2(_1107, _1108));
    float _4256 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1123 = (_797 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_691.x * 2.0) + (-1.0)))) + (((_818.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1124 = (_798 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_691.y * 2.0) + (-1.0)))) + (((_818.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1136 = (((_1065 - _1123) + (cbMtdParam._m0[21u].x * _1123)) * _867) + _1123;
    float _1137 = (((_1066 - _1124) + (cbMtdParam._m0[21u].x * _1124)) * _867) + _1124;
    float _1138 = (_867 * (sqrt(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) - _804)) + _804;
    float _1149 = (((_1107 - _1136) + (_1136 * cbMtdParam._m0[22u].z)) * _934) + _1136;
    float _1150 = (((_1108 - _1137) + (_1137 * cbMtdParam._m0[22u].z)) * _934) + _1137;
    float _1151 = ((sqrt(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) - _1138) * _934) + _1138;
    float _1153 = cbMtdParam._m0[22u].x + _818.w;
    float _1156 = fma(_1151, _271 * NORMAL.x, fma(_1150, _278 * TANGENT.x, (_264 * _256) * _1149));
    float _1159 = fma(_1151, _271 * NORMAL.y, fma(_1150, _278 * TANGENT.y, (_264 * _257) * _1149));
    float _1162 = fma(_1151, _271 * NORMAL.z, fma(_1150, _278 * TANGENT.z, (_264 * _258) * _1149));
    float _1166 = inversesqrt(dot(vec3(_1156, _1159, _1162), vec3(_1156, _1159, _1162)));
    float _1167 = _1166 * _1156;
    float _1168 = _1166 * _1159;
    float _1169 = _1166 * _1162;
    float _4267 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1170 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _4289 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4300 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4311 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4322 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1175 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _1189 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1229 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1239 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1229);
    float _1240 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1229);
    float _1241 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1229);
    float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
    float _1246 = _1239 * _1245;
    float _1247 = _1240 * _1245;
    float _1248 = _1241 * _1245;
    vec4 _1253 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1255 = _1253.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1427 = sqrt(((_1239 * _1239) + (_1240 * _1240)) + (_1241 * _1241));
        float _1433 = (cbMatDynParam._m0[5u].x * _1427) + cbMatDynParam._m0[5u].y;
        float _4333 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1438 = (cbMatDynParam._m0[5u].z * _1427) + cbMatDynParam._m0[5u].w;
        float _4344 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) - _1434)) + _1434) < ((_1255 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1266 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1267 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1285 = fma(_1169, cbSceneParam._m0[5u].z, fma(_1168, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1167));
    float _1288 = fma(_1169, cbSceneParam._m0[6u].z, fma(_1168, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1167));
    float _1291 = fma(_1169, cbSceneParam._m0[7u].z, fma(_1168, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1167));
    uint _1304 = _303 + 9u;
    uint _1305 = _1304 + uint(cbMatDynParam._m0[0u].w);
    float _1311 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * cbInstanceData._m0[_1305].x;
    float _1312 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * cbInstanceData._m0[_1305].y;
    float _1313 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * cbInstanceData._m0[_1305].z;
    float _4355 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
    float _1314 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _4366 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
    float _1315 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _4377 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _1316 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _1317 = 1.0 - _1175;
    float _1318 = _1314 * _1317;
    float _1319 = _1315 * _1317;
    float _1320 = _1316 * _1317;
    float _1325 = (_1314 + (-0.039999999105930328369140625)) * _1175;
    float _1326 = (_1315 + (-0.039999999105930328369140625)) * _1175;
    float _1327 = (_1316 + (-0.039999999105930328369140625)) * _1175;
    float _1328 = _1325 + 0.039999999105930328369140625;
    float _1330 = _1326 + 0.039999999105930328369140625;
    float _1331 = _1327 + 0.039999999105930328369140625;
    vec4 _1340 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1266, cbSceneParam._m0[86u].y * _1267));
    float _1344 = ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * TEXCOORD_5.w) * _1340.x;
    float _1345 = dot(vec3(_1167, _1168, _1169), vec3(_1246, _1247, _1248));
    float _1348 = _1345 * 2.0;
    float _1352 = (_1348 * _1167) - _1246;
    float _1353 = (_1348 * _1168) - _1247;
    float _1354 = (_1348 * _1169) - _1248;
    float _1358 = abs(dot(vec3(_1246, _1247, _1248), vec3(_1167, _1168, _1169)));
    float _4388 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
    float _1360 = sqrt(_1170);
    float _1373 = exp2((_1360 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1360 * 3.0));
    float _1379 = (1.0 - _1373) * ((_1360 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1380 = _1373 * _1360;
    float _1408 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1412 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1416 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1745;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1470 = fma(_1416, cbModelParam._m0[26u].z, fma(_1412, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1408));
        float _1474 = fma(_1416, cbModelParam._m0[27u].z, fma(_1412, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1408));
        float _1478 = fma(_1416, cbModelParam._m0[28u].z, fma(_1412, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1408));
        float _1503 = _1408 + _1167;
        float _1504 = _1412 + _1168;
        float _1505 = _1416 + _1169;
        float _1515 = fma(_1505, cbModelParam._m0[26u].z, fma(_1504, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1503)) - _1470;
        float _1516 = fma(_1505, cbModelParam._m0[27u].z, fma(_1504, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1503)) - _1474;
        float _1517 = fma(_1505, cbModelParam._m0[28u].z, fma(_1504, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1503)) - _1478;
        float _1521 = inversesqrt(dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517)));
        float _1534 = ((_1521 * _1515) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1470 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1521 * _1516) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1474 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1521 * _1517) / cbModelParam._m0[34u].z) + ((((((_1478 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        float _1573 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1539.x + (-0.5));
        float _1575 = _1573 * (_1539.y + (-0.5));
        float _1576 = _1573 * (_1539.z + (-0.5));
        float _1583 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1546.x + (-0.5));
        float _1585 = _1583 * (_1546.y + (-0.5));
        float _1586 = _1583 * (_1546.z + (-0.5));
        float _1593 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1553.x + (-0.5));
        float _1595 = _1593 * (_1553.y + (-0.5));
        float _1596 = _1593 * (_1553.z + (-0.5));
        float _1603 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1560.x + (-0.5));
        float _1605 = _1603 * (_1560.y + (-0.5));
        float _1606 = _1603 * (_1560.z + (-0.5));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = _1574 * 0.5;
        float _1611 = _1584 * 0.5;
        float _1612 = _1594 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1627 = (dot(vec3(_1167, _1168, _1169), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1637 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4436 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1639 + 1.0))) + _1644) * _1607;
        float _1654 = _1575 * 0.5;
        float _1655 = _1585 * 0.5;
        float _1656 = _1595 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_1167, _1168, _1169), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4469 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1681 + 1.0))) + _1686) * _1608;
        float _1696 = _1576 * 0.5;
        float _1697 = _1586 * 0.5;
        float _1698 = _1596 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_1167, _1168, _1169), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4480 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4491 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4502 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_1723 + 1.0))) + _1728) * _1609;
        _1745 = _1576;
        _1747 = _1575;
        _1748 = _1574;
        _1749 = _1586;
        _1750 = _1585;
        _1751 = _1584;
        _1752 = _1596;
        _1753 = _1595;
        _1754 = _1594;
        _1755 = _1609;
        _1756 = _1608;
        _1757 = _1607;
        _1758 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1759 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1760 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
    }
    else
    {
        _1745 = _1746;
        _1747 = _1746;
        _1748 = _1746;
        _1749 = _1746;
        _1750 = _1746;
        _1751 = _1746;
        _1752 = _1746;
        _1753 = _1746;
        _1754 = _1746;
        _1755 = _1746;
        _1756 = _1746;
        _1757 = _1746;
        _1758 = 0.0;
        _1759 = 0.0;
        _1760 = 0.0;
    }
    float _2055;
    float _2056;
    float _2057;
    float _2058;
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1786 = fma(_1416, cbModelParam._m0[30u].z, fma(_1412, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1408));
        float _1790 = fma(_1416, cbModelParam._m0[31u].z, fma(_1412, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1408));
        float _1794 = fma(_1416, cbModelParam._m0[32u].z, fma(_1412, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1408));
        float _1817 = _1408 + _1167;
        float _1818 = _1412 + _1168;
        float _1819 = _1416 + _1169;
        float _1829 = fma(_1819, cbModelParam._m0[30u].z, fma(_1818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1817)) - _1786;
        float _1830 = fma(_1819, cbModelParam._m0[31u].z, fma(_1818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1817)) - _1790;
        float _1831 = fma(_1819, cbModelParam._m0[32u].z, fma(_1818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1817)) - _1794;
        float _1835 = inversesqrt(dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831)));
        float _1848 = ((_1835 * _1829) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1786 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1849 = ((_1835 * _1830) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1790 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1850 = ((_1835 * _1831) / cbModelParam._m0[35u].z) + ((((((_1794 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1852 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1848, _1849, _1850), 0.0);
        vec4 _1859 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1848, _1849, _1850), 0.0);
        vec4 _1866 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1848, _1849, _1850), 0.0);
        vec4 _1873 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1848, _1849, _1850), 0.0);
        float _1885 = exp2((_1852.w + (-0.5)) * 20.0) * 2.0;
        float _1886 = _1885 * (_1852.x + (-0.5));
        float _1887 = _1885 * (_1852.y + (-0.5));
        float _1888 = _1885 * (_1852.z + (-0.5));
        float _1895 = exp2((_1859.w + (-0.5)) * 20.0) * 2.0;
        float _1896 = _1895 * (_1859.x + (-0.5));
        float _1897 = _1895 * (_1859.y + (-0.5));
        float _1898 = _1895 * (_1859.z + (-0.5));
        float _1905 = exp2((_1866.w + (-0.5)) * 20.0) * 2.0;
        float _1906 = _1905 * (_1866.x + (-0.5));
        float _1907 = _1905 * (_1866.y + (-0.5));
        float _1908 = _1905 * (_1866.z + (-0.5));
        float _1915 = exp2((_1873.w + (-0.5)) * 20.0) * 2.0;
        float _1916 = _1915 * (_1873.x + (-0.5));
        float _1917 = _1915 * (_1873.y + (-0.5));
        float _1918 = _1915 * (_1873.z + (-0.5));
        float _1919 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1920 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1921 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1922 = _1886 * 0.5;
        float _1923 = _1896 * 0.5;
        float _1924 = _1906 * 0.5;
        float _1925 = dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924));
        float _1930 = (_1925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1925);
        float _1938 = (dot(vec3(_1167, _1168, _1169), vec3(_1930 * _1922, _1930 * _1923, _1930 * _1924)) + 1.0) * 0.5;
        float _4543 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1947 = sqrt(((_1923 * _1923) + (_1922 * _1922)) + (_1924 * _1924)) / (_1919 + 9.9999997473787516355514526367188e-06);
        float _4554 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1949 = _1948 * 2.0;
        float _1953 = (1.0 - _1948) / (_1948 + 1.0);
        float _4565 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _1963 = ((((1.0 - _1954) * (_1949 + 2.0)) * exp2(log2(isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_1949 + 1.0))) + _1954) * _1919;
        float _1964 = _1887 * 0.5;
        float _1965 = _1897 * 0.5;
        float _1966 = _1907 * 0.5;
        float _1967 = dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966));
        float _1972 = (_1967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1967);
        float _1980 = (dot(vec3(_1167, _1168, _1169), vec3(_1972 * _1964, _1972 * _1965, _1972 * _1966)) + 1.0) * 0.5;
        float _4576 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1989 = sqrt(((_1965 * _1965) + (_1964 * _1964)) + (_1966 * _1966)) / (_1920 + 9.9999997473787516355514526367188e-06);
        float _4587 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1991 = _1990 * 2.0;
        float _1995 = (1.0 - _1990) / (_1990 + 1.0);
        float _4598 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1996 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2005 = ((((1.0 - _1996) * (_1991 + 2.0)) * exp2(log2(isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_1991 + 1.0))) + _1996) * _1920;
        float _2006 = _1888 * 0.5;
        float _2007 = _1898 * 0.5;
        float _2008 = _1908 * 0.5;
        float _2009 = dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008));
        float _2014 = (_2009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2009);
        float _2022 = (dot(vec3(_1167, _1168, _1169), vec3(_2014 * _2006, _2014 * _2007, _2014 * _2008)) + 1.0) * 0.5;
        float _4609 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2031 = sqrt(((_2007 * _2007) + (_2006 * _2006)) + (_2008 * _2008)) / (_1921 + 9.9999997473787516355514526367188e-06);
        float _4620 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2033 = _2032 * 2.0;
        float _2037 = (1.0 - _2032) / (_2032 + 1.0);
        float _4631 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2047 = ((((1.0 - _2038) * (_2033 + 2.0)) * exp2(log2(isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2033 + 1.0))) + _2038) * _1921;
        _2055 = _1888;
        _2056 = _1887;
        _2057 = _1886;
        _2058 = _1898;
        _2059 = _1897;
        _2060 = _1896;
        _2061 = _1908;
        _2062 = _1907;
        _2063 = _1906;
        _2064 = _1921;
        _2065 = _1920;
        _2066 = _1919;
        _2067 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)));
        _2068 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)));
        _2069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0)));
    }
    else
    {
        _2055 = _1746;
        _2056 = _1746;
        _2057 = _1746;
        _2058 = _1746;
        _2059 = _1746;
        _2060 = _1746;
        _2061 = _1746;
        _2062 = _1746;
        _2063 = _1746;
        _2064 = _1746;
        _2065 = _1746;
        _2066 = _1746;
        _2067 = 0.0;
        _2068 = 0.0;
        _2069 = 0.0;
    }
    float _2079 = (cbModelParam._m0[1u].x * (_2067 - _1758)) + _1758;
    float _2080 = (cbModelParam._m0[1u].x * (_2068 - _1759)) + _1759;
    float _2081 = (cbModelParam._m0[1u].x * (_2069 - _1760)) + _1760;
    float _2102 = fma(_2081, cbSceneParam._m0[89u].z, fma(_2080, cbSceneParam._m0[89u].y, _2079 * cbSceneParam._m0[89u].x));
    float _2105 = fma(_2081, cbSceneParam._m0[90u].z, fma(_2080, cbSceneParam._m0[90u].y, _2079 * cbSceneParam._m0[90u].x));
    float _2108 = fma(_2081, cbSceneParam._m0[91u].z, fma(_2080, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2079));
    float _2123 = _1352 * 0.5;
    float _2124 = _1353 * 0.5;
    float _2125 = _1354 * 0.5;
    float _2126 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_2057, _2060, _2063, _2066));
    float _2129 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_2056, _2059, _2062, _2065));
    float _2132 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_2055, _2058, _2061, _2064));
    float _2166;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2139 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_1745, _1749, _1752, _1755));
        float _2143 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_1747, _1750, _1753, _1756));
        float _2147 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_1748, _1751, _1754, _1757));
        float _2154 = dot(vec4(cbModelParam._m0[39u]), vec4(_2123, _2124, _2125, 1.0));
        _2166 = dot(vec3(isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0)), isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0)), isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2154) ? 0.0 : (isnan(0.0) ? _2154 : max(0.0, _2154))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2166 = 1.0;
    }
    float _2177;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2168 = dot(vec4(cbModelParam._m0[40u]), vec4(_2123, _2124, _2125, 1.0));
        _2177 = dot(vec3(isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0)), isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0)), isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2168) ? 0.0 : (isnan(0.0) ? _2168 : max(0.0, _2168))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2177 = 1.0;
    }
    float _2181 = (_2177 * cbModelParam._m0[1u].x) + (_2166 * (1.0 - cbModelParam._m0[1u].x));
    float _2191 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1170);
    float _2192 = isnan(_2191) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2191 : min(cbModelParam._m0[25u].z, _2191));
    float _2272;
    float _2274;
    float _2276;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2239 = fma(_1416, cbModelParam._m0[13u].z, fma(_1412, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1408)) + cbModelParam._m0[13u].w;
        float _2243 = fma(_1416, cbModelParam._m0[14u].z, fma(_1412, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1408)) + cbModelParam._m0[14u].w;
        float _2247 = fma(_1416, cbModelParam._m0[15u].z, fma(_1412, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1408)) + cbModelParam._m0[15u].w;
        float _2250 = fma(_1354, cbModelParam._m0[13u].z, fma(_1353, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1352));
        float _2253 = fma(_1354, cbModelParam._m0[14u].z, fma(_1353, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1352));
        float _2256 = fma(_1354, cbModelParam._m0[15u].z, fma(_1353, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1352));
        float _2284;
        if (_2250 > 0.0)
        {
            _2284 = abs((1.0 - _2239) / _2250);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2250 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2239 + 1.0) / _2250);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2284 = frontier_phi_17_15_ladder;
        }
        float _2487;
        if (_2253 > 0.0)
        {
            _2487 = abs((1.0 - _2243) / _2253);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2253 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2243 + 1.0) / _2253);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2487 = frontier_phi_26_22_ladder;
        }
        float _2741;
        if (_2256 > 0.0)
        {
            _2741 = abs((1.0 - _2247) / _2256);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2256 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2247 + 1.0) / _2256);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2741 = frontier_phi_38_33_ladder;
        }
        float _2743 = isnan(_2487) ? _2284 : (isnan(_2284) ? _2487 : min(_2284, _2487));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _2250) + _2239;
        float _2749 = (_2744 * _2253) + _2243;
        float _2750 = (_2744 * _2256) + _2247;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2753 = (-1.0) - _2751;
        float _2755 = _2751 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2750 > _2755) || ((_2750 < _2753) || ((_2749 > _2755) || ((_2749 < _2753) || ((_2748 < _2753) || (_2748 > _2755))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2750, cbModelParam._m0[9u].z, fma(_2749, cbModelParam._m0[9u].y, _2748 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2750, cbModelParam._m0[10u].z, fma(_2749, cbModelParam._m0[10u].y, _2748 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2750, cbModelParam._m0[11u].z, fma(_2749, cbModelParam._m0[11u].y, _2748 * cbModelParam._m0[11u].x))), _2192);
            frontier_phi_16_38_ladder = _2878.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2878.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2878.x * cbModelParam._m0[1u].y;
        }
        _2272 = frontier_phi_16_38_ladder_2;
        _2274 = frontier_phi_16_38_ladder_1;
        _2276 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2260 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1352, _1353, _1354), _2192);
        _2272 = _2260.x * cbModelParam._m0[1u].y;
        _2274 = _2260.y * cbModelParam._m0[1u].y;
        _2276 = _2260.z * cbModelParam._m0[1u].y;
    }
    float _2280 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1170);
    float _2281 = isnan(_2280) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2280 : min(cbModelParam._m0[25u].w, _2280));
    float _2371;
    float _2373;
    float _2375;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2335 = fma(_1416, cbModelParam._m0[21u].z, fma(_1412, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1408)) + cbModelParam._m0[21u].w;
        float _2339 = fma(_1416, cbModelParam._m0[22u].z, fma(_1412, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1408)) + cbModelParam._m0[22u].w;
        float _2343 = fma(_1416, cbModelParam._m0[23u].z, fma(_1412, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1408)) + cbModelParam._m0[23u].w;
        float _2346 = fma(_1354, cbModelParam._m0[21u].z, fma(_1353, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1352));
        float _2349 = fma(_1354, cbModelParam._m0[22u].z, fma(_1353, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1352));
        float _2352 = fma(_1354, cbModelParam._m0[23u].z, fma(_1353, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1352));
        float _2492;
        if (_2346 > 0.0)
        {
            _2492 = abs((1.0 - _2335) / _2346);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2346 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2335 + 1.0) / _2346);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2492 = frontier_phi_28_24_ladder;
        }
        float _2768;
        if (_2349 > 0.0)
        {
            _2768 = abs((1.0 - _2339) / _2349);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2349 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2339 + 1.0) / _2349);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2768 = frontier_phi_40_35_ladder;
        }
        float _2981;
        if (_2352 > 0.0)
        {
            _2981 = abs((1.0 - _2343) / _2352);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2352 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2343 + 1.0) / _2352);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2981 = frontier_phi_49_46_ladder;
        }
        float _2983 = isnan(_2768) ? _2492 : (isnan(_2492) ? _2768 : min(_2492, _2768));
        float _2984 = isnan(_2981) ? _2983 : (isnan(_2983) ? _2981 : min(_2983, _2981));
        float _2988 = (_2984 * _2346) + _2335;
        float _2989 = (_2984 * _2349) + _2339;
        float _2990 = (_2984 * _2352) + _2343;
        float _2991 = _2984 * 9.9999997473787516355514526367188e-05;
        float _2992 = (-1.0) - _2991;
        float _2994 = _2991 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2990 > _2994) || ((_2990 < _2992) || ((_2989 > _2994) || ((_2989 < _2992) || ((_2988 < _2992) || (_2988 > _2994))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3189 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2990, cbModelParam._m0[17u].z, fma(_2989, cbModelParam._m0[17u].y, _2988 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2990, cbModelParam._m0[18u].z, fma(_2989, cbModelParam._m0[18u].y, _2988 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2990, cbModelParam._m0[19u].z, fma(_2989, cbModelParam._m0[19u].y, _2988 * cbModelParam._m0[19u].x))), _2281);
            frontier_phi_25_49_ladder = _3189.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3189.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3189.x * cbModelParam._m0[1u].z;
        }
        _2371 = frontier_phi_25_49_ladder_2;
        _2373 = frontier_phi_25_49_ladder_1;
        _2375 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2355 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1352, _1353, _1354), _2281);
        _2371 = _2355.x * cbModelParam._m0[1u].z;
        _2373 = _2355.y * cbModelParam._m0[1u].z;
        _2375 = _2355.z * cbModelParam._m0[1u].z;
    }
    float _2388 = (((_1379 * _1328) + _1380) * _1344) * ((cbModelParam._m0[1u].w * (_2371 - _2272)) + _2272);
    float _2390 = (((_1379 * _1330) + _1380) * _1344) * ((cbModelParam._m0[1u].w * (_2373 - _2274)) + _2274);
    float _2392 = (((_1379 * _1331) + _1380) * _1344) * ((cbModelParam._m0[1u].w * (_2375 - _2276)) + _2276);
    float _2395 = fma(_2392, cbSceneParam._m0[89u].z, fma(_2390, cbSceneParam._m0[89u].y, _2388 * cbSceneParam._m0[89u].x));
    float _2398 = fma(_2392, cbSceneParam._m0[90u].z, fma(_2390, cbSceneParam._m0[90u].y, _2388 * cbSceneParam._m0[90u].x));
    float _2401 = fma(_2392, cbSceneParam._m0[91u].z, fma(_2390, cbSceneParam._m0[91u].y, _2388 * cbSceneParam._m0[91u].x));
    uvec4 _2411 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2413 = _2411.x * 14u;
    uint _2414 = _2413 + 13u;
    float _2421 = _1344 + (-1.0);
    float _2426 = (cbLight._m0[_2414].x * _2421) + 1.0;
    float _2427 = (cbLight._m0[_2414].y * _2421) + 1.0;
    float _2428 = (cbLight._m0[_2414].z * _2421) + 1.0;
    float _2429 = (cbLight._m0[_2414].w * _2421) + 1.0;
    uint _2430 = _2413 + 5u;
    float _2436 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
    uint _2440 = _2413 + 4u;
    float _2446 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
    uint _2450 = _2413 | 1u;
    float _2461 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_1167, _1168, _1169));
    float _2464 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_1167, _1168, _1169));
    float _4767 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _4778 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2469 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * 0.3183098733425140380859375;
    float _2471 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * 0.3183098733425140380859375;
    float _2478 = ((cbLight._m0[_2430].x * _2436) * _2471) + ((cbLight._m0[_2440].x * _2446) * _2469);
    float _2479 = ((_2436 * cbLight._m0[_2430].y) * _2471) + ((_2446 * cbLight._m0[_2440].y) * _2469);
    float _2480 = ((_2436 * cbLight._m0[_2430].z) * _2471) + ((_2446 * cbLight._m0[_2440].z) * _2469);
    uvec4 _2484 = floatBitsToUint(cbLight._m0[_2413 + 12u]);
    bool _2486 = _2484.x == 0u;
    float _2497;
    float _2499;
    float _2501;
    if (_2486)
    {
        _2497 = _2478;
        _2499 = _2479;
        _2501 = _2480;
    }
    else
    {
        uint _2505 = _2413 + 6u;
        float _2521 = (dot(vec3(cbLight._m0[_2413 + 2u].xyz), vec3(_1167, _1168, _1169)) * 0.5) + 0.5;
        float _2522 = _2521 * _2521;
        float _4789 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2523 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2524 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
        _2497 = (((cbLight._m0[_2505].x * 0.3183098733425140380859375) * _2523) * _2524) + _2478;
        _2499 = (((cbLight._m0[_2505].y * 0.3183098733425140380859375) * _2523) * _2524) + _2479;
        _2501 = (((cbLight._m0[_2505].z * 0.3183098733425140380859375) * _2523) * _2524) + _2480;
    }
    bool _2504 = _2484.y == 0u;
    float _2542;
    float _2544;
    float _2546;
    if (_2504)
    {
        _2542 = _2497;
        _2544 = _2499;
        _2546 = _2501;
    }
    else
    {
        uint _2712 = _2413 + 7u;
        float _2728 = (dot(vec3(cbLight._m0[_2413 + 3u].xyz), vec3(_1167, _1168, _1169)) * 0.5) + 0.5;
        float _2729 = _2728 * _2728;
        float _4805 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2730 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
        float _2731 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2542 = (((cbLight._m0[_2712].x * 0.3183098733425140380859375) * _2730) * _2731) + _2497;
        _2544 = (((cbLight._m0[_2712].y * 0.3183098733425140380859375) * _2730) * _2731) + _2499;
        _2546 = (((cbLight._m0[_2712].z * 0.3183098733425140380859375) * _2730) * _2731) + _2501;
    }
    uint _2549 = _2413 + 8u;
    float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _1170) * 0.949999988079071044921875);
    float _2563 = _2562 * _2562;
    float _2564 = cbLight._m0[_2413].x + _1246;
    float _2565 = cbLight._m0[_2413].y + _1247;
    float _2566 = cbLight._m0[_2413].z + _1248;
    float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
    float _2571 = _2570 * _2564;
    float _2572 = _2570 * _2565;
    float _2573 = _2570 * _2566;
    float _2574 = dot(vec3(_1167, _1168, _1169), vec3(cbLight._m0[_2413].xyz));
    float _4821 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _4832 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
    float _2578 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
    float _2579 = dot(vec3(_1167, _1168, _1169), vec3(_2571, _2572, _2573));
    float _4843 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2571, _2572, _2573));
    float _4854 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2563 * _2563;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0);
    float _2600 = 0.959999978542327880859375 - _1325;
    float _2602 = 0.959999978542327880859375 - _1326;
    float _2603 = 0.959999978542327880859375 - _1327;
    float _2610 = 1.0 - _2563;
    float _2621 = (0.5 / (((_2578 * ((_2577 * _2610) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2610) + _2563) * _2577))) * _2577;
    float _4865 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    uint _2634 = _2413 + 9u;
    float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _1170) * 0.949999988079071044921875);
    float _2646 = _2645 * _2645;
    float _2647 = cbLight._m0[_2450].x + _1246;
    float _2648 = cbLight._m0[_2450].y + _1247;
    float _2649 = cbLight._m0[_2450].z + _1248;
    float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
    float _2654 = _2653 * _2647;
    float _2655 = _2653 * _2648;
    float _2656 = _2653 * _2649;
    float _2657 = dot(vec3(_1167, _1168, _1169), vec3(cbLight._m0[_2450].xyz));
    float _4876 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
    float _2661 = dot(vec3(_1167, _1168, _1169), vec3(_2654, _2655, _2656));
    float _4887 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2654, _2655, _2656));
    float _4898 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2646 * _2646;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2680 = exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0);
    float _2687 = 1.0 - _2646;
    float _2697 = (0.5 / (((_2578 * ((_2660 * _2687) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2687) + _2646) * _2660))) * _2660;
    float _4909 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2699 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    float _2709 = (((((_2680 * _2600) + _1328) * cbLight._m0[_2634].x) * _2699) * _2436) + (((((_2599 * _2600) + _1328) * cbLight._m0[_2549].x) * _2623) * _2446);
    float _2710 = (((((_2680 * _2602) + _1330) * cbLight._m0[_2634].y) * _2699) * _2436) + (((((_2599 * _2602) + _1330) * cbLight._m0[_2549].y) * _2623) * _2446);
    float _2711 = (((((_2680 * _2603) + _1331) * cbLight._m0[_2634].z) * _2699) * _2436) + (((((_2599 * _2603) + _1331) * cbLight._m0[_2549].z) * _2623) * _2446);
    float _2773;
    float _2775;
    float _2777;
    if (_2486)
    {
        _2773 = _2709;
        _2775 = _2710;
        _2777 = _2711;
    }
    else
    {
        uint _2779 = _2413 + 2u;
        uint _2783 = _2413 + 10u;
        float _2797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2779].w)) * _1170) * 0.949999988079071044921875);
        float _2798 = _2797 * _2797;
        float _2799 = cbLight._m0[_2779].x + _1246;
        float _2800 = cbLight._m0[_2779].y + _1247;
        float _2801 = cbLight._m0[_2779].z + _1248;
        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
        float _2806 = _2805 * _2799;
        float _2807 = _2805 * _2800;
        float _2808 = _2805 * _2801;
        float _2809 = dot(vec3(_1167, _1168, _1169), vec3(cbLight._m0[_2779].xyz));
        float _4920 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
        float _2813 = dot(vec3(_1167, _1168, _1169), vec3(_2806, _2807, _2808));
        float _4931 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
        float _2817 = dot(vec3(cbLight._m0[_2779].xyz), vec3(_2806, _2807, _2808));
        float _4942 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2821 = _2798 * _2798;
        float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
        float _2832 = exp2(log2(1.0 - (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) * 5.0);
        float _2839 = 1.0 - _2798;
        float _2849 = (0.5 / (((_2578 * ((_2812 * _2839) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2839) + _2798) * _2812))) * _2812;
        float _4953 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2851 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
        float _2852 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
        _2773 = (((((_2832 * _2600) + _1328) * cbLight._m0[_2783].x) * _2851) * _2852) + _2709;
        _2775 = (((((_2832 * _2602) + _1330) * cbLight._m0[_2783].y) * _2851) * _2852) + _2710;
        _2777 = (((((_2832 * _2603) + _1331) * cbLight._m0[_2783].z) * _2851) * _2852) + _2711;
    }
    float _2887;
    float _2889;
    float _2891;
    if (_2504)
    {
        _2887 = _2773;
        _2889 = _2775;
        _2891 = _2777;
    }
    else
    {
        uint _2898 = _2413 + 3u;
        uint _2902 = _2413 + 11u;
        float _2916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2898].w)) * _1170) * 0.949999988079071044921875);
        float _2917 = _2916 * _2916;
        float _2918 = cbLight._m0[_2898].x + _1246;
        float _2919 = cbLight._m0[_2898].y + _1247;
        float _2920 = cbLight._m0[_2898].z + _1248;
        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
        float _2925 = _2924 * _2918;
        float _2926 = _2924 * _2919;
        float _2927 = _2924 * _2920;
        float _2928 = dot(vec3(_1167, _1168, _1169), vec3(cbLight._m0[_2898].xyz));
        float _4969 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
        float _2932 = dot(vec3(_1167, _1168, _1169), vec3(_2925, _2926, _2927));
        float _4980 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
        float _2936 = dot(vec3(cbLight._m0[_2898].xyz), vec3(_2925, _2926, _2927));
        float _4991 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2940 = _2917 * _2917;
        float _2944 = ((_2935 * _2935) * (_2940 + (-1.0))) + 1.0;
        float _2951 = exp2(log2(1.0 - (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0)))) * 5.0);
        float _2958 = 1.0 - _2917;
        float _2968 = (0.5 / (((_2578 * ((_2931 * _2958) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2958) + _2917) * _2931))) * _2931;
        float _5002 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2970 = (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0))) * (_2940 / ((_2944 * _2944) * 3.141590118408203125));
        float _2971 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2887 = (((((_2951 * _2600) + _1328) * cbLight._m0[_2902].x) * _2970) * _2971) + _2773;
        _2889 = (((((_2951 * _2602) + _1330) * cbLight._m0[_2902].y) * _2970) * _2971) + _2775;
        _2891 = (((((_2951 * _2603) + _1331) * cbLight._m0[_2902].z) * _2970) * _2971) + _2777;
    }
    float _3106;
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    if (_2411.y == 0u)
    {
        float _3046 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3047 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3046;
        float _3048 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3046;
        float _3049 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3046;
        uvec4 _3061 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3062 = _3061.x;
        uint _3073 = uint((float(_3061.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1267) / _3062))) + floor(float(uint(cbSceneParam._m0[85u].x * _1266) / _3062)));
        float _3083 = (log2(_3049 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3084 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        uint _3087 = uint(isnan(14.0) ? _3084 : (isnan(_3084) ? 14.0 : min(_3084, 14.0)));
        uvec4 _3092 = texelFetch(g_lightClusterGridBuffer, int(((_3087 << 2u) + (_3073 << 6u)) >> 2u));
        uint _3093 = _3092.x;
        uint _3094 = _3061.z;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        if (((((1u << ((_3094 >> 4u) & 15u)) + 4294967295u) & _3093) == 0u) || ((_3094 & 240u) == 0u))
        {
            _3194 = 0.0;
            _3196 = 0.0;
            _3198 = 0.0;
            _3200 = 0.0;
            _3202 = 0.0;
            _3204 = 0.0;
        }
        else
        {
            float _3195;
            float _3197;
            float _3199;
            float _3201;
            float _3203;
            float _3205;
            float _3347 = 0.0;
            float _3348 = 0.0;
            float _3349 = 0.0;
            float _3350 = 0.0;
            float _3351 = 0.0;
            float _3352 = 0.0;
            uint _3353 = 0u;
            uint _3362;
            bool _3363;
            for (;;)
            {
                _3362 = texelFetch(g_lightClassification, int((((_3087 << 5u) + (_3073 << 9u)) + (_3353 << 2u)) >> 2u)).x;
                _3363 = _3362 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3363)
                {
                    frontier_phi_66_pred = _3347;
                    frontier_phi_66_pred_1 = _3352;
                    frontier_phi_66_pred_2 = _3351;
                    frontier_phi_66_pred_3 = _3350;
                    frontier_phi_66_pred_4 = _3349;
                    frontier_phi_66_pred_5 = _3348;
                }
                else
                {
                    float _3492;
                    float _3493;
                    float _3494;
                    float _3495;
                    float _3496;
                    float _3497;
                    uint _3498;
                    _3492 = _3347;
                    _3493 = _3348;
                    _3494 = _3349;
                    _3495 = _3350;
                    _3496 = _3351;
                    _3497 = _3352;
                    _3498 = _3362;
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    for (;;)
                    {
                        uint _3502 = uint(findLSB(_3498)) + (_3353 << 5u);
                        uint _3499 = (_3498 + 4294967295u) & _3498;
                        uint _3504 = _3502 * 48u;
                        vec4 _3518 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3504)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 3u)).x));
                        uint _3524 = (_3502 * 48u) + 4u;
                        vec4 _3537 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3524)).x, texelFetch(g_PointLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3524 + 3u)).x));
                        uint _3543 = (_3502 * 48u) + 8u;
                        vec3 _3554 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3543)).x, texelFetch(g_PointLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3543 + 2u)).x));
                        float _3558 = _3518.x - _3047;
                        float _3559 = _3518.y - _3048;
                        float _3560 = _3518.z - _3049;
                        float _3561 = dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560));
                        float _3564 = inversesqrt(_3561);
                        float _3565 = _3564 * _3558;
                        float _3566 = _3564 * _3559;
                        float _3567 = _3564 * _3560;
                        float _3568 = dot(vec3(_1285, _1288, _1291), vec3(_3565, _3566, _3567));
                        float _3573 = 1.0 - (_3561 * _3518.w);
                        float _5028 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3574 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                        float _3575 = sqrt(_3561) * _3537.w;
                        float _3578 = 1.39999997615814208984375 / (_3575 + 1.39999997615814208984375);
                        float _3579 = _3578 * _3578;
                        float _3582 = ((1.0 - _3579) * _3568) + _3579;
                        float _3585 = _3575 * _3575;
                        float _3589 = ((isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0))) * _3574) / ((_3585 * 0.699999988079071044921875) + 1.0);
                        float _3593 = (-0.0) - _3047;
                        float _3594 = (-0.0) - _3048;
                        float _3595 = (-0.0) - _3049;
                        float _3599 = inversesqrt(dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595)));
                        float _3600 = _3599 * _3593;
                        float _3601 = _3599 * _3594;
                        float _3602 = _3599 * _3595;
                        float _3610 = exp2(log2(1.0 / ((_3585 * 3.5) + 5.0)) * 0.25);
                        float _3611 = 1.0 - _1360;
                        float _3618 = sqrt(1.0 - ((1.0 - (_3611 * _3611)) * (1.0 - (_3610 * _3610))));
                        float _3619 = _3618 * _3618;
                        float _3620 = _3619 * _3619;
                        float _3621 = _3600 + _3565;
                        float _3622 = _3601 + _3566;
                        float _3623 = _3602 + _3567;
                        float _3627 = inversesqrt(dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623)));
                        float _3631 = dot(vec3(_1285, _1288, _1291), vec3(_3600, _3601, _3602));
                        float _5044 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                        float _3634 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                        float _3635 = dot(vec3(_1285, _1288, _1291), vec3(_3627 * _3621, _3627 * _3622, _3627 * _3623));
                        float _5055 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                        float _3638 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                        float _3642 = ((_3638 * _3638) * (_3620 + (-1.0))) + 1.0;
                        float _3643 = _3578 * _3619;
                        float _3644 = _3643 * _3643;
                        float _3647 = ((1.0 - _3644) * _3568) + _3644;
                        float _5066 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                        float _3648 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                        float _3649 = 1.0 - _3619;
                        float _3659 = (0.5 / (((_3648 * ((_3634 * _3649) + _3619)) + 9.9999999392252902907785028219223e-09) + (((_3648 * _3649) + _3619) * _3634))) * _3648;
                        float _5077 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3670 = (((_3620 * 3.1415927410125732421875) * (isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0)))) / ((_3642 * _3642) * ((_3585 * 2.1991131305694580078125) + 3.141590118408203125))) * _3574;
                        _3422 = (_3589 * _3537.x) + _3495;
                        _3423 = (_3589 * _3537.y) + _3496;
                        _3424 = (_3589 * _3537.z) + _3497;
                        _3419 = (_3670 * _3554.x) + _3492;
                        _3420 = (_3670 * _3554.y) + _3493;
                        _3421 = (_3670 * _3554.z) + _3494;
                        if (_3499 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3492 = _3419;
                            _3493 = _3420;
                            _3494 = _3421;
                            _3495 = _3422;
                            _3496 = _3423;
                            _3497 = _3424;
                            _3498 = _3499;
                        }
                    }
                    frontier_phi_66_pred = _3419;
                    frontier_phi_66_pred_1 = _3424;
                    frontier_phi_66_pred_2 = _3423;
                    frontier_phi_66_pred_3 = _3422;
                    frontier_phi_66_pred_4 = _3421;
                    frontier_phi_66_pred_5 = _3420;
                }
                _3195 = frontier_phi_66_pred;
                _3205 = frontier_phi_66_pred_1;
                _3203 = frontier_phi_66_pred_2;
                _3201 = frontier_phi_66_pred_3;
                _3199 = frontier_phi_66_pred_4;
                _3197 = frontier_phi_66_pred_5;
                uint _3354 = _3353 + 1u;
                if (_3354 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3347 = _3195;
                    _3348 = _3197;
                    _3349 = _3199;
                    _3350 = _3201;
                    _3351 = _3203;
                    _3352 = _3205;
                    _3353 = _3354;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3194 = _3195;
            _3196 = _3197;
            _3198 = _3199;
            _3200 = _3201;
            _3202 = _3203;
            _3204 = _3205;
        }
        uvec4 _3208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3209 = _3208.z;
        uint _3211 = (_3209 >> 8u) & 15u;
        float _3315;
        float _3317;
        float _3319;
        float _3321;
        float _3323;
        float _3325;
        if (((4294967295u << _3211) & _3093) == 0u)
        {
            _3315 = _3194;
            _3317 = _3196;
            _3319 = _3198;
            _3321 = _3200;
            _3323 = _3202;
            _3325 = _3204;
        }
        else
        {
            float _3340 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
            float _3341 = _3340 * _3047;
            float _3342 = _3340 * _3048;
            float _3343 = _3340 * _3049;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3211 < ((_3209 >> 12u) & 15u))
            {
                float _3316;
                float _3318;
                float _3320;
                float _3322;
                float _3324;
                float _3326;
                float _3475 = _3194;
                float _3476 = _3196;
                float _3477 = _3198;
                float _3478 = _3200;
                float _3479 = _3202;
                float _3480 = _3204;
                uint _3481 = _3211;
                uint _3490;
                bool _3491;
                for (;;)
                {
                    _3490 = texelFetch(g_lightClassification, int((((_3087 << 5u) + (_3073 << 9u)) + (_3481 << 2u)) >> 2u)).x;
                    _3491 = _3490 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3491)
                    {
                        frontier_phi_77_pred = _3480;
                        frontier_phi_77_pred_1 = _3479;
                        frontier_phi_77_pred_2 = _3478;
                        frontier_phi_77_pred_3 = _3477;
                        frontier_phi_77_pred_4 = _3476;
                        frontier_phi_77_pred_5 = _3475;
                    }
                    else
                    {
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3977;
                        float _3978;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _3697 = _3475;
                        float _3698 = _3476;
                        float _3699 = _3477;
                        float _3700 = _3478;
                        float _3701 = _3479;
                        float _3702 = _3480;
                        uint _3703 = _3490;
                        uint _3704;
                        vec4 _3729;
                        float _3730;
                        vec4 _3745;
                        vec3 _3757;
                        vec4 _3772;
                        vec4 _3787;
                        float _3833;
                        bool _3834;
                        for (;;)
                        {
                            uint _3714 = ((_3481 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3703));
                            _3704 = (_3703 + 4294967295u) & _3703;
                            uint _3716 = _3714 * 40u;
                            _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            _3730 = _3729.w;
                            uint _3732 = (_3714 * 40u) + 4u;
                            _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            uint _3747 = (_3714 * 40u) + 8u;
                            _3757 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x));
                            uint _3759 = (_3714 * 40u) + 16u;
                            _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            uint _3774 = (_3714 * 40u) + 20u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3789 = (_3714 * 40u) + 24u;
                            vec4 _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            uint _3808 = (_3714 * 40u) + 28u;
                            vec4 _3821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 3u)).x));
                            _3833 = fma(_3049, _3821.z, fma(_3048, _3821.y, _3821.x * _3047)) + _3821.w;
                            _3834 = !((fma(_3049, _3802.z, fma(_3048, _3802.y, _3802.x * _3047)) + _3802.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3834)
                            {
                                float _3861 = _3729.x - _3047;
                                float _3862 = _3729.y - _3048;
                                float _3863 = _3729.z - _3049;
                                float _3864 = dot(vec3(_3861, _3862, _3863), vec3(_3861, _3862, _3863));
                                float _3867 = inversesqrt(_3864);
                                float _3868 = _3867 * _3861;
                                float _3869 = _3867 * _3862;
                                float _3870 = _3867 * _3863;
                                float _3874 = 1.0 - (_3864 / (_3730 * _3730));
                                float _5088 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3875 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
                                float _3879 = sqrt(_3864) * _3745.w;
                                float _3881 = 1.39999997615814208984375 / (_3879 + 1.39999997615814208984375);
                                float _3882 = _3881 * _3881;
                                float _3885 = ((1.0 - _3882) * dot(vec3(_3868, _3869, _3870), vec3(_1285, _1288, _1291))) + _3882;
                                float _3888 = _3879 * _3879;
                                float _3892 = (fma(_3049, _3772.z, fma(_3048, _3772.y, _3772.x * _3047)) + _3772.w) / _3833;
                                float _3893 = (fma(_3049, _3787.z, fma(_3048, _3787.y, _3787.x * _3047)) + _3787.w) / _3833;
                                float _3897 = 1.0 - dot(vec2(_3892, _3893), vec2(_3892, _3893));
                                float _5104 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3898 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                                float _3899 = _3898 * (((isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0))) * _3875) / ((_3888 * 0.699999988079071044921875) + 1.0));
                                float _3911 = exp2(log2(1.0 / ((_3888 * 3.5) + 5.0)) * 0.25);
                                float _3912 = 1.0 - _1360;
                                float _3919 = sqrt(1.0 - ((1.0 - (_3912 * _3912)) * (1.0 - (_3911 * _3911))));
                                float _3920 = _3919 * _3919;
                                float _3921 = _3920 * _3920;
                                float _3922 = _3868 - _3341;
                                float _3923 = _3869 - _3342;
                                float _3924 = _3870 - _3343;
                                float _3928 = inversesqrt(dot(vec3(_3922, _3923, _3924), vec3(_3922, _3923, _3924)));
                                float _3932 = dot(vec3(_1285, _1288, _1291), vec3((-0.0) - _3341, (-0.0) - _3342, (-0.0) - _3343));
                                float _5115 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3935 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                                float _3936 = dot(vec3(_1285, _1288, _1291), vec3(_3928 * _3922, _3928 * _3923, _3928 * _3924));
                                float _5126 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3939 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
                                float _3943 = ((_3939 * _3939) * (_3921 + (-1.0))) + 1.0;
                                float _3944 = _3881 * _3920;
                                float _3945 = _3944 * _3944;
                                float _3951 = ((1.0 - _3945) * dot(vec3(_1285, _1288, _1291), vec3(_3868, _3869, _3870))) + _3945;
                                float _5137 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3952 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
                                float _3953 = 1.0 - _3920;
                                float _3963 = (0.5 / (((_3952 * ((_3935 * _3953) + _3920)) + 9.9999999392252902907785028219223e-09) + (((_3952 * _3953) + _3920) * _3935))) * _3952;
                                float _5148 = isnan(0.0) ? _3963 : (isnan(_3963) ? 0.0 : max(_3963, 0.0));
                                float _3973 = (_3898 * _3875) * (((_3921 * 3.1415927410125732421875) * (isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0)))) / ((_3943 * _3943) * ((_3888 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3899 * _3745.y;
                                frontier_phi_83_pred_1 = _3899 * _3745.x;
                                frontier_phi_83_pred_2 = _3973 * _3757.z;
                                frontier_phi_83_pred_3 = _3973 * _3757.y;
                                frontier_phi_83_pred_4 = _3973 * _3757.x;
                                frontier_phi_83_pred_5 = _3899 * _3745.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3981 = frontier_phi_83_pred;
                            _3980 = frontier_phi_83_pred_1;
                            _3979 = frontier_phi_83_pred_2;
                            _3978 = frontier_phi_83_pred_3;
                            _3977 = frontier_phi_83_pred_4;
                            _3982 = frontier_phi_83_pred_5;
                            _3687 = _3980 + _3700;
                            _3688 = _3981 + _3701;
                            _3689 = _3982 + _3702;
                            _3684 = _3977 + _3697;
                            _3685 = _3978 + _3698;
                            _3686 = _3979 + _3699;
                            if (_3704 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3697 = _3684;
                                _3698 = _3685;
                                _3699 = _3686;
                                _3700 = _3687;
                                _3701 = _3688;
                                _3702 = _3689;
                                _3703 = _3704;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3689;
                        frontier_phi_77_pred_1 = _3688;
                        frontier_phi_77_pred_2 = _3687;
                        frontier_phi_77_pred_3 = _3686;
                        frontier_phi_77_pred_4 = _3685;
                        frontier_phi_77_pred_5 = _3684;
                    }
                    _3326 = frontier_phi_77_pred;
                    _3324 = frontier_phi_77_pred_1;
                    _3322 = frontier_phi_77_pred_2;
                    _3320 = frontier_phi_77_pred_3;
                    _3318 = frontier_phi_77_pred_4;
                    _3316 = frontier_phi_77_pred_5;
                    uint _3482 = _3481 + 1u;
                    if (_3482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3475 = _3316;
                        _3476 = _3318;
                        _3477 = _3320;
                        _3478 = _3322;
                        _3479 = _3324;
                        _3480 = _3326;
                        _3481 = _3482;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3320;
                frontier_phi_58_59_ladder_1 = _3326;
                frontier_phi_58_59_ladder_2 = _3324;
                frontier_phi_58_59_ladder_3 = _3322;
                frontier_phi_58_59_ladder_4 = _3318;
                frontier_phi_58_59_ladder_5 = _3316;
            }
            else
            {
                frontier_phi_58_59_ladder = _3198;
                frontier_phi_58_59_ladder_1 = _3204;
                frontier_phi_58_59_ladder_2 = _3202;
                frontier_phi_58_59_ladder_3 = _3200;
                frontier_phi_58_59_ladder_4 = _3196;
                frontier_phi_58_59_ladder_5 = _3194;
            }
            _3315 = frontier_phi_58_59_ladder_5;
            _3317 = frontier_phi_58_59_ladder_4;
            _3319 = frontier_phi_58_59_ladder;
            _3321 = frontier_phi_58_59_ladder_3;
            _3323 = frontier_phi_58_59_ladder_2;
            _3325 = frontier_phi_58_59_ladder_1;
        }
        float _3330 = isnan(1.0) ? _1344 : (isnan(_1344) ? 1.0 : min(_1344, 1.0));
        _3106 = (_3330 * _3321) + _2542;
        _3108 = (_3330 * _3323) + _2544;
        _3110 = (_3330 * _3325) + _2546;
        _3112 = ((_3315 * _1328) * _3330) + _2887;
        _3114 = ((_3317 * _1330) * _3330) + _2889;
        _3116 = ((_3319 * _1331) * _3330) + _2891;
    }
    else
    {
        _3106 = _2542;
        _3108 = _2544;
        _3110 = _2546;
        _3112 = _2887;
        _3114 = _2889;
        _3116 = _2891;
    }
    float _5164 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _5175 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _5186 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
    float _3133 = ((isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0))) * (_3106 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1344))) + ((_3112 + ((isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0))) * _2181)) * cbPerFrame._m0[3u].x);
    float _3134 = ((isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0))) * (_3108 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1344))) + ((_3114 + ((isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0))) * _2181)) * cbPerFrame._m0[3u].x);
    float _3135 = ((isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0))) * (_3110 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1344))) + ((_3116 + ((isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0))) * _2181)) * cbPerFrame._m0[3u].x);
    uint _3136 = _303 + 6u;
    float _3144 = _1266 / cbSceneParam._m0[86u].x;
    float _3145 = _1267 / cbSceneParam._m0[86u].y;
    vec4 _3159 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3144, _3145, (log2((isnan(cbSceneParam._m0[77u].w) ? _1189 : (isnan(_1189) ? cbSceneParam._m0[77u].w : min(_1189, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3161 = _3159.x;
    float _3162 = _3159.y;
    float _3163 = _3159.z;
    float _3164 = _3159.w;
    float _3257;
    float _3259;
    float _3261;
    float _3263;
    if (_1189 > cbSceneParam._m0[78u].w)
    {
        float _3219 = isnan(_1189) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1189 : min(cbSceneParam._m0[80u].w, _1189));
        float _3220 = _3219 / _1189;
        float _3231 = _3220 * _1239;
        float _3232 = _1240 * _3220;
        float _3233 = (-0.0) - _3232;
        float _3235 = _3220 * _1241;
        float _3237 = (cbSceneParam._m0[77u].w * _3233) / _3219;
        float _3238 = _3237 + cbSceneParam._m0[79u].w;
        float _3239 = cbSceneParam._m0[79u].w - _3232;
        float _3245 = sqrt(((_3231 * _3231) + (_3232 * _3232)) + (_3235 * _3235));
        float _3248 = (1.0 - (cbSceneParam._m0[77u].w / _3219)) * _3245;
        float _3253 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3255 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3432;
        if (abs((_3233 - _3237) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3432 = ((((_3238 > 0.0) ? exp2(_3253 * _3238) : (2.0 - exp2(_3255 * _3238))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3248;
        }
        else
        {
            float _3376 = 1.0 / cbSceneParam._m0[80u].x;
            float _3377 = isnan(_3239) ? _3238 : (isnan(_3238) ? _3239 : max(_3238, _3239));
            float _3378 = isnan(_3239) ? _3238 : (isnan(_3238) ? _3239 : min(_3238, _3239));
            float _3387 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : min(_3377, 0.0));
            float _3388 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : min(_3378, 0.0));
            _3432 = ((abs(_3245 / _3233) * cbSceneParam._m0[80u].y) * ((((_3387 - _3388) * 2.0) - ((exp2(_3253 * (isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0)))) - exp2(_3253 * (isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))))) * _3376)) - ((exp2(_3255 * _3387) - exp2(_3255 * _3388)) * _3376))) + (_3248 * cbSceneParam._m0[80u].z);
        }
        vec4 _3434 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3144, _3145, 1.0), 0.0);
        float _3443 = exp2((_3432 * (-1.44269502162933349609375)) * (1.0 - _3434.w));
        float _3444 = log2(_3443);
        float _3460 = log2(_3164);
        _3257 = (exp2(_3460 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3444 * cbSceneParam._m0[78u].x)) * _3434.x) / cbSceneParam._m0[78u].x)) + _3161;
        _3259 = (exp2(_3460 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3444 * cbSceneParam._m0[78u].y)) * _3434.y) / cbSceneParam._m0[78u].y)) + _3162;
        _3261 = (exp2(_3460 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3444 * cbSceneParam._m0[78u].z)) * _3434.z) / cbSceneParam._m0[78u].z)) + _3163;
        _3263 = _3443 * _3164;
    }
    else
    {
        _3257 = _3161;
        _3259 = _3162;
        _3261 = _3163;
        _3263 = _3164;
    }
    bool _3470;
    vec4 _3273;
    vec4 _3295;
    float _3297;
    float _3301;
    float _3302;
    float _3303;
    float _3304;
    bool _3314;
    for (;;)
    {
        _3273 = cbMatDynParam._m0[0u];
        float _3275 = roundEven(_3273.y);
        bool _3276 = _3275 == 3.0;
        float _3277 = log2(_3263);
        float _3284 = exp2(_3277 * cbSceneParam._m0[78u].x) * _3133;
        float _3285 = exp2(_3277 * cbSceneParam._m0[78u].y) * _3134;
        float _3286 = exp2(_3277 * cbSceneParam._m0[78u].z) * _3135;
        float _3293 = _1255 + (-0.5);
        _3295 = cbMtdParam._m0[1u];
        _3297 = _3295.y * _3293;
        float _3300 = (_3275 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3301 = _3300 * (_3276 ? _3284 : (_3284 + (cbSceneParam._m0[72u].w * _3257)));
        _3302 = _3300 * (_3276 ? _3285 : (_3285 + (cbSceneParam._m0[72u].w * _3259)));
        _3303 = _3300 * (_3276 ? _3286 : (_3286 + (cbSceneParam._m0[72u].w * _3261)));
        _3304 = _3293 * 0.999000012874603271484375;
        _3314 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3314)
        {
            if ((cbInstanceData._m0[_303 + 7u].x + _3304) < 0.5)
            {
                _3470 = true;
                break;
            }
        }
        uint _3411 = _1304 + uint(_3273.w);
        if ((cbInstanceData._m0[_3411].w < 1.0) && ((cbInstanceData._m0[_3411].w + _3304) < 0.5))
        {
            _3470 = true;
            break;
        }
        if ((_3297 + 1.0) < _3295.x)
        {
            _3470 = true;
            break;
        }
        _3470 = false;
        break;
    }
    float _3675;
    if (_3470)
    {
        discard_state = true;
        _3675 = 0.0;
    }
    else
    {
        _3675 = cbInstanceData._m0[_3136].w;
    }
    SV_Target.x = _3301;
    SV_Target.y = _3302;
    SV_Target.z = _3303;
    SV_Target.w = _3675;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3136].w;
    discard_exit();
}


