#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1433;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4042 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4053 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4064 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4075 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _453 = (_446 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _454 = (_446 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _455 = (_446 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _459 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _453;
    float _462 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _454;
    float _465 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _455;
    float _472 = ((_453 - _459) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) + _459;
    float _473 = ((_454 - _462) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) + _462;
    float _474 = ((_455 - _465) * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) + _465;
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _540 = _536.z;
    float _549 = ((_519.z - _540) * _446) + _540;
    float _552 = ((((_519.x - _538) * _446) + _538) * 2.0) + (-1.0);
    float _553 = ((((_519.y - _539) * _446) + _539) * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _4086 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _591 = (_552 + ((((_492.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _592 = (_553 + ((((_492.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _595 = fma(_559, _252, fma(_592, _259, _591 * _245));
    float _598 = fma(_559, _253, fma(_592, _260, _591 * _246));
    float _601 = fma(_559, _254, fma(_592, _261, _591 * _247));
    float _605 = inversesqrt(dot(vec3(_595, _598, _601), vec3(_595, _598, _601)));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _634 = _632.x;
    float _635 = 1.0 - _634;
    float _644 = (cbMtdParam._m0[19u].x + dot(vec4(_605 * _595, _605 * _598, _605 * _601, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_634 - _635) * cbMtdParam._m0[24u].z) + _635) * cbMtdParam._m0[21u].z);
    float _4097 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _647 = (-0.0) - cbMtdParam._m0[24u].x;
    float _649 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _649 : (isnan(_649) ? 1.0 : min(_649, 1.0));
    float _657 = _645 - ((_645 * TEXCOORD_8.x) * _650);
    float _658 = _645 - ((_645 * TEXCOORD_8.y) * _650);
    float _659 = _645 - ((_645 * TEXCOORD_8.z) * _650);
    float _666 = (_657 * (cbMtdParam._m0[17u].x - _472)) + _472;
    float _667 = (_658 * (cbMtdParam._m0[17u].y - _473)) + _473;
    float _668 = (_659 * (cbMtdParam._m0[17u].z - _474)) + _474;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _682 = _680.x;
    float _683 = 1.0 - _682;
    float _709 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_682 - _683) * cbMtdParam._m0[24u].w) + _683) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4118 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _710 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _718 = ((((cbMtdParam._m0[10u].x - _666) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _710) + _666;
    float _719 = ((((cbMtdParam._m0[10u].y - _667) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _710) + _667;
    float _720 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _668)) * _710) + _668;
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _748 = _746.x;
    float _766 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _748) * _446) + _748;
    float _770 = ((_732.x - _766) * cbMtdParam._m0[19u].z) + _766;
    float _772 = _770 - (_770 * _657);
    float _774 = _772 - (_772 * _710);
    float _779 = (((_492.z - _549) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _549;
    float _783 = ((_579.z - _779) * cbMtdParam._m0[19u].w) + _779;
    vec4 _797 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _804 = (_797.x * 2.0) + (-1.0);
    float _805 = (_797.y * 2.0) + (-1.0);
    float _806 = dot(vec2(_804, _805), vec2(_804, _805));
    float _4129 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _814 = ((_797.z - _783) * _657) + _783;
    float _817 = ((cbMtdParam._m0[23u].x - _814) * _710) + _814;
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _842 = (_836.x * 2.0) + (-1.0);
    float _843 = (_836.y * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _4140 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _859 = ((sqrt(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) - _559) * _659) + _559;
    float _862 = (((_804 - _591) * _657) + _591) + (cbMtdParam._m0[21u].x * _591);
    float _863 = (((_805 - _592) * _658) + _592) + (cbMtdParam._m0[21u].x * _592);
    float _874 = (((_842 - _862) + (_862 * cbMtdParam._m0[22u].z)) * _710) + _862;
    float _875 = (((_843 - _863) + (_863 * cbMtdParam._m0[22u].z)) * _710) + _863;
    float _876 = (_710 * (sqrt(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) - _859)) + _859;
    float _880 = cbMtdParam._m0[22u].x + _579.w;
    float _883 = fma(_876, _252, fma(_875, _259, _874 * _245));
    float _886 = fma(_876, _253, fma(_875, _260, _874 * _246));
    float _889 = fma(_876, _254, fma(_875, _261, _874 * _247));
    float _893 = inversesqrt(dot(vec3(_883, _886, _889), vec3(_883, _886, _889)));
    float _894 = _893 * _883;
    float _895 = _893 * _886;
    float _896 = _893 * _889;
    float _4151 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _897 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _4162 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4173 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4184 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4195 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4206 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _902 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _916 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _966 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _956);
    float _967 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _956);
    float _968 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _956);
    float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
    float _973 = _966 * _972;
    float _974 = _967 * _972;
    float _975 = _968 * _972;
    float _981 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _982 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1000 = fma(_896, cbSceneParam._m0[5u].z, fma(_895, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _894));
    float _1003 = fma(_896, cbSceneParam._m0[6u].z, fma(_895, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _894));
    float _1006 = fma(_896, cbSceneParam._m0[7u].z, fma(_895, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _894));
    uint _1020 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1026 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_1020].x;
    float _1027 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_1020].y;
    float _1028 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * cbInstanceData._m0[_1020].z;
    float _4217 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _4228 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _1032 = 1.0 - _902;
    float _1033 = _1029 * _1032;
    float _1034 = _1030 * _1032;
    float _1035 = _1031 * _1032;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _902;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _902;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _902;
    float _1043 = _1040 + 0.039999999105930328369140625;
    float _1045 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    vec4 _1055 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _981, cbSceneParam._m0[86u].y * _982));
    float _1059 = ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * TEXCOORD_5.w) * _1055.x;
    float _1060 = dot(vec3(_894, _895, _896), vec3(_973, _974, _975));
    float _1063 = _1060 * 2.0;
    float _1067 = (_1063 * _894) - _973;
    float _1068 = (_1063 * _895) - _974;
    float _1069 = (_1063 * _896) - _975;
    float _1073 = abs(dot(vec3(_973, _974, _975), vec3(_894, _895, _896)));
    float _4250 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1075 = sqrt(_897);
    float _1088 = exp2((_1075 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1075 * 3.0));
    float _1094 = (1.0 - _1088) * ((_1075 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1095 = _1088 * _1075;
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1432;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1157 = fma(_1131, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123));
        float _1161 = fma(_1131, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123));
        float _1165 = fma(_1131, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123));
        float _1190 = _1123 + _894;
        float _1191 = _1127 + _895;
        float _1192 = _1131 + _896;
        float _1202 = fma(_1192, cbModelParam._m0[26u].z, fma(_1191, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190)) - _1157;
        float _1203 = fma(_1192, cbModelParam._m0[27u].z, fma(_1191, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190)) - _1161;
        float _1204 = fma(_1192, cbModelParam._m0[28u].z, fma(_1191, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190)) - _1165;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1157 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1161 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[34u].z) + ((((((_1165 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1260 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1226.x + (-0.5));
        float _1262 = _1260 * (_1226.y + (-0.5));
        float _1263 = _1260 * (_1226.z + (-0.5));
        float _1270 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1233.x + (-0.5));
        float _1272 = _1270 * (_1233.y + (-0.5));
        float _1273 = _1270 * (_1233.z + (-0.5));
        float _1280 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1240.x + (-0.5));
        float _1282 = _1280 * (_1240.y + (-0.5));
        float _1283 = _1280 * (_1240.z + (-0.5));
        float _1290 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1247.x + (-0.5));
        float _1292 = _1290 * (_1247.y + (-0.5));
        float _1293 = _1290 * (_1247.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1314 = (dot(vec3(_894, _895, _896), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1324 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4298 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1326 + 1.0))) + _1331) * _1294;
        float _1341 = _1262 * 0.5;
        float _1342 = _1272 * 0.5;
        float _1343 = _1282 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_894, _895, _896), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4331 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1368 + 1.0))) + _1373) * _1295;
        float _1383 = _1263 * 0.5;
        float _1384 = _1273 * 0.5;
        float _1385 = _1283 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_894, _895, _896), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4364 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1410 + 1.0))) + _1415) * _1296;
        _1432 = _1263;
        _1434 = _1262;
        _1435 = _1261;
        _1436 = _1273;
        _1437 = _1272;
        _1438 = _1271;
        _1439 = _1283;
        _1440 = _1282;
        _1441 = _1281;
        _1442 = _1296;
        _1443 = _1295;
        _1444 = _1294;
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1433;
        _1434 = _1433;
        _1435 = _1433;
        _1436 = _1433;
        _1437 = _1433;
        _1438 = _1433;
        _1439 = _1433;
        _1440 = _1433;
        _1441 = _1433;
        _1442 = _1433;
        _1443 = _1433;
        _1444 = _1433;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1472 = fma(_1131, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123));
        float _1476 = fma(_1131, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123));
        float _1480 = fma(_1131, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123));
        float _1503 = _1123 + _894;
        float _1504 = _1127 + _895;
        float _1505 = _1131 + _896;
        float _1515 = fma(_1505, cbModelParam._m0[30u].z, fma(_1504, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1503)) - _1472;
        float _1516 = fma(_1505, cbModelParam._m0[31u].z, fma(_1504, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1503)) - _1476;
        float _1517 = fma(_1505, cbModelParam._m0[32u].z, fma(_1504, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1503)) - _1480;
        float _1521 = inversesqrt(dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517)));
        float _1534 = ((_1521 * _1515) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1472 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1521 * _1516) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1476 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1521 * _1517) / cbModelParam._m0[35u].z) + ((((((_1480 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        float _1571 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1538.x + (-0.5));
        float _1573 = _1571 * (_1538.y + (-0.5));
        float _1574 = _1571 * (_1538.z + (-0.5));
        float _1581 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1545.x + (-0.5));
        float _1583 = _1581 * (_1545.y + (-0.5));
        float _1584 = _1581 * (_1545.z + (-0.5));
        float _1591 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1552.x + (-0.5));
        float _1593 = _1591 * (_1552.y + (-0.5));
        float _1594 = _1591 * (_1552.z + (-0.5));
        float _1601 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1559.x + (-0.5));
        float _1603 = _1601 * (_1559.y + (-0.5));
        float _1604 = _1601 * (_1559.z + (-0.5));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = _1572 * 0.5;
        float _1609 = _1582 * 0.5;
        float _1610 = _1592 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_894, _895, _896), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4405 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4416 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4427 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_1635 + 1.0))) + _1640) * _1605;
        float _1650 = _1573 * 0.5;
        float _1651 = _1583 * 0.5;
        float _1652 = _1593 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_894, _895, _896), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4460 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1677 + 1.0))) + _1682) * _1606;
        float _1692 = _1574 * 0.5;
        float _1693 = _1584 * 0.5;
        float _1694 = _1594 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_894, _895, _896), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4493 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1719 + 1.0))) + _1724) * _1607;
        _1741 = _1574;
        _1742 = _1573;
        _1743 = _1572;
        _1744 = _1584;
        _1745 = _1583;
        _1746 = _1582;
        _1747 = _1594;
        _1748 = _1593;
        _1749 = _1592;
        _1750 = _1607;
        _1751 = _1606;
        _1752 = _1605;
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
    }
    else
    {
        _1741 = _1433;
        _1742 = _1433;
        _1743 = _1433;
        _1744 = _1433;
        _1745 = _1433;
        _1746 = _1433;
        _1747 = _1433;
        _1748 = _1433;
        _1749 = _1433;
        _1750 = _1433;
        _1751 = _1433;
        _1752 = _1433;
        _1753 = 0.0;
        _1754 = 0.0;
        _1755 = 0.0;
    }
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1445)) + _1445;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1446)) + _1446;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1447)) + _1447;
    float _1788 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1765));
    float _1809 = _1067 * 0.5;
    float _1810 = _1068 * 0.5;
    float _1811 = _1069 * 0.5;
    float _1812 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1815 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1818 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1852;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1825 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1432, _1436, _1439, _1442));
        float _1829 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1833 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1840 = dot(vec4(cbModelParam._m0[39u]), vec4(_1809, _1810, _1811, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1863;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1854 = dot(vec4(cbModelParam._m0[40u]), vec4(_1809, _1810, _1811, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1854) ? 0.0 : (isnan(0.0) ? _1854 : max(0.0, _1854))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1867 = (_1863 * cbModelParam._m0[1u].x) + (_1852 * (1.0 - cbModelParam._m0[1u].x));
    float _1877 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _897);
    float _1878 = isnan(_1877) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1877 : min(cbModelParam._m0[25u].z, _1877));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1926 = fma(_1131, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1123)) + cbModelParam._m0[13u].w;
        float _1930 = fma(_1131, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1123)) + cbModelParam._m0[14u].w;
        float _1934 = fma(_1131, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1123)) + cbModelParam._m0[15u].w;
        float _1937 = fma(_1069, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067));
        float _1940 = fma(_1069, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067));
        float _1943 = fma(_1069, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067));
        float _1971;
        if (_1937 > 0.0)
        {
            _1971 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1971 = frontier_phi_14_12_ladder;
        }
        float _2143;
        if (_1940 > 0.0)
        {
            _2143 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2143 = frontier_phi_23_19_ladder;
        }
        float _2438;
        if (_1943 > 0.0)
        {
            _2438 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2438 = frontier_phi_35_30_ladder;
        }
        float _2440 = isnan(_2143) ? _1971 : (isnan(_1971) ? _2143 : min(_1971, _2143));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1937) + _1926;
        float _2446 = (_2441 * _1940) + _1930;
        float _2447 = (_2441 * _1943) + _1934;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2448;
        float _2452 = _2448 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 > _2452) || ((_2446 < _2450) || ((_2445 < _2450) || (_2445 > _2452))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2447, cbModelParam._m0[9u].z, fma(_2446, cbModelParam._m0[9u].y, _2445 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2447, cbModelParam._m0[10u].z, fma(_2446, cbModelParam._m0[10u].y, _2445 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2447, cbModelParam._m0[11u].z, fma(_2446, cbModelParam._m0[11u].y, _2445 * cbModelParam._m0[11u].x))), _1878);
            frontier_phi_13_35_ladder = _2592.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2592.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2592.x * cbModelParam._m0[1u].y;
        }
        _1959 = frontier_phi_13_35_ladder_2;
        _1961 = frontier_phi_13_35_ladder_1;
        _1963 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1067, _1068, _1069), _1878);
        _1959 = _1947.x * cbModelParam._m0[1u].y;
        _1961 = _1947.y * cbModelParam._m0[1u].y;
        _1963 = _1947.z * cbModelParam._m0[1u].y;
    }
    float _1967 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _897);
    float _1968 = isnan(_1967) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1967 : min(cbModelParam._m0[25u].w, _1967));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2022 = fma(_1131, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1123)) + cbModelParam._m0[21u].w;
        float _2026 = fma(_1131, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1123)) + cbModelParam._m0[22u].w;
        float _2030 = fma(_1131, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1123)) + cbModelParam._m0[23u].w;
        float _2033 = fma(_1069, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067));
        float _2036 = fma(_1069, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067));
        float _2039 = fma(_1069, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067));
        float _2148;
        if (_2033 > 0.0)
        {
            _2148 = abs((1.0 - _2022) / _2033);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2022 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2148 = frontier_phi_25_21_ladder;
        }
        float _2465;
        if (_2036 > 0.0)
        {
            _2465 = abs((1.0 - _2026) / _2036);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2026 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2465 = frontier_phi_37_32_ladder;
        }
        float _2803;
        if (_2039 > 0.0)
        {
            _2803 = abs((1.0 - _2030) / _2039);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2030 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2803 = frontier_phi_47_44_ladder;
        }
        float _2805 = isnan(_2465) ? _2148 : (isnan(_2148) ? _2465 : min(_2148, _2465));
        float _2806 = isnan(_2803) ? _2805 : (isnan(_2805) ? _2803 : min(_2805, _2803));
        float _2810 = (_2806 * _2033) + _2022;
        float _2811 = (_2806 * _2036) + _2026;
        float _2812 = (_2806 * _2039) + _2030;
        float _2813 = _2806 * 9.9999997473787516355514526367188e-05;
        float _2814 = (-1.0) - _2813;
        float _2816 = _2813 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2812 > _2816) || ((_2812 < _2814) || ((_2811 > _2816) || ((_2811 < _2814) || ((_2810 < _2814) || (_2810 > _2816))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2934 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2812, cbModelParam._m0[17u].z, fma(_2811, cbModelParam._m0[17u].y, _2810 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2812, cbModelParam._m0[18u].z, fma(_2811, cbModelParam._m0[18u].y, _2810 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2812, cbModelParam._m0[19u].z, fma(_2811, cbModelParam._m0[19u].y, _2810 * cbModelParam._m0[19u].x))), _1968);
            frontier_phi_22_47_ladder = _2934.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2934.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2934.x * cbModelParam._m0[1u].z;
        }
        _2058 = frontier_phi_22_47_ladder_2;
        _2060 = frontier_phi_22_47_ladder_1;
        _2062 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2042 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1067, _1068, _1069), _1968);
        _2058 = _2042.x * cbModelParam._m0[1u].z;
        _2060 = _2042.y * cbModelParam._m0[1u].z;
        _2062 = _2042.z * cbModelParam._m0[1u].z;
    }
    float _2075 = (((_1094 * _1043) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2058 - _1959)) + _1959);
    float _2077 = (((_1094 * _1045) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2060 - _1961)) + _1961);
    float _2079 = (((_1094 * _1046) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2062 - _1963)) + _1963);
    float _2082 = fma(_2079, cbSceneParam._m0[89u].z, fma(_2077, cbSceneParam._m0[89u].y, _2075 * cbSceneParam._m0[89u].x));
    float _2085 = fma(_2079, cbSceneParam._m0[90u].z, fma(_2077, cbSceneParam._m0[90u].y, _2075 * cbSceneParam._m0[90u].x));
    float _2088 = fma(_2079, cbSceneParam._m0[91u].z, fma(_2077, cbSceneParam._m0[91u].y, _2075 * cbSceneParam._m0[91u].x));
    float _2122 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2126 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2130 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2134 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2135 = _2122 / _2134;
    float _2136 = _2126 / _2134;
    float _2137 = _2130 / _2134;
    float _2284;
    float _2285;
    float _2286;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2164 = ((uint(_2137 > cbSceneParam._m0[59u].y) + uint(_2137 > cbSceneParam._m0[59u].x)) + uint(_2137 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2165 = _2164 + 43u;
        uint _2173 = _2164 + 44u;
        uint _2181 = _2164 + 45u;
        uint _2189 = _2164 + 46u;
        float _2200 = fma(_2134, cbSceneParam._m0[_2165].w, fma(_2130, cbSceneParam._m0[_2165].z, fma(_2126, cbSceneParam._m0[_2165].y, _2122 * cbSceneParam._m0[_2165].x)));
        float _2204 = fma(_2134, cbSceneParam._m0[_2173].w, fma(_2130, cbSceneParam._m0[_2173].z, fma(_2126, cbSceneParam._m0[_2173].y, _2122 * cbSceneParam._m0[_2173].x)));
        float _2212 = fma(_2134, cbSceneParam._m0[_2189].w, fma(_2130, cbSceneParam._m0[_2189].z, fma(_2126, cbSceneParam._m0[_2189].y, _2122 * cbSceneParam._m0[_2189].x)));
        float _2217 = cbSceneParam._m0[33u].z * _2212;
        float _2219 = cbSceneParam._m0[33u].w * _2212;
        float _2222 = fma(_2134, cbSceneParam._m0[_2181].w, fma(_2130, cbSceneParam._m0[_2181].z, fma(_2126, cbSceneParam._m0[_2181].y, _2122 * cbSceneParam._m0[_2181].x))) / _2212;
        float _2270 = (cbSceneParam._m0[33u].x - sqrt(((_2136 * _2136) + (_2135 * _2135)) + (_2137 * _2137))) * cbSceneParam._m0[33u].y;
        float _4619 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2277 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2217 + _2200) / _2212, (_2219 + _2204) / _2212), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 + _2200) / _2212, (_2204 - _2217) / _2212), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2200 - _2217) / _2212, (_2204 - _2219) / _2212), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2200 - _2219) / _2212, (_2217 + _2204) / _2212), _2222), 0.0)).x), vec4(0.25)));
        _2284 = 1.0 - (_2277 * cbSceneParam._m0[34u].x);
        _2285 = 1.0 - (_2277 * cbSceneParam._m0[34u].y);
        _2286 = 1.0 - (_2277 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2284 = 1.0;
        _2285 = 1.0;
        _2286 = 1.0;
    }
    float _2350;
    float _2352;
    float _2354;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2338 = fma(_2134, cbSceneParam._m0[63u].w, fma(_2130, cbSceneParam._m0[63u].z, fma(_2126, cbSceneParam._m0[63u].y, _2122 * cbSceneParam._m0[63u].x)));
        float _2339 = fma(_2134, cbSceneParam._m0[60u].w, fma(_2130, cbSceneParam._m0[60u].z, fma(_2126, cbSceneParam._m0[60u].y, _2122 * cbSceneParam._m0[60u].x))) / _2338;
        float _2340 = fma(_2134, cbSceneParam._m0[61u].w, fma(_2130, cbSceneParam._m0[61u].z, fma(_2126, cbSceneParam._m0[61u].y, _2122 * cbSceneParam._m0[61u].x))) / _2338;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2339 >= cbSceneParam._m0[64u].x) && (_2340 >= cbSceneParam._m0[64u].y)) && (_2339 <= cbSceneParam._m0[64u].z)) && (_2340 <= cbSceneParam._m0[64u].w))
        {
            float _2478 = fma(_2134, cbSceneParam._m0[62u].w, fma(_2130, cbSceneParam._m0[62u].z, fma(_2126, cbSceneParam._m0[62u].y, _2122 * cbSceneParam._m0[62u].x))) / _2338;
            float _2482 = isnan(cbSceneParam._m0[41u].w) ? _2478 : (isnan(_2478) ? cbSceneParam._m0[41u].w : max(_2478, cbSceneParam._m0[41u].w));
            float _2525 = (cbSceneParam._m0[33u].x - sqrt(((_2136 * _2136) + (_2135 * _2135)) + (_2137 * _2137))) * cbSceneParam._m0[33u].y;
            float _4635 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
            float _2532 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2339, cbSceneParam._m0[33u].w + _2340), _2482), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2339, _2340 - cbSceneParam._m0[33u].z), _2482), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2339 - cbSceneParam._m0[33u].z, _2340 - cbSceneParam._m0[33u].w), _2482), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2339 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2340), _2482), 0.0)).x), vec4(0.25)));
            float _2536 = 1.0 - (_2532 * cbSceneParam._m0[34u].x);
            float _2537 = 1.0 - (_2532 * cbSceneParam._m0[34u].y);
            float _2538 = 1.0 - (_2532 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2538) ? _2286 : (isnan(_2286) ? _2538 : min(_2286, _2538));
            frontier_phi_34_33_ladder_1 = isnan(_2537) ? _2285 : (isnan(_2285) ? _2537 : min(_2285, _2537));
            frontier_phi_34_33_ladder_2 = isnan(_2536) ? _2284 : (isnan(_2284) ? _2536 : min(_2284, _2536));
        }
        else
        {
            frontier_phi_34_33_ladder = _2286;
            frontier_phi_34_33_ladder_1 = _2285;
            frontier_phi_34_33_ladder_2 = _2284;
        }
        _2350 = frontier_phi_34_33_ladder_2;
        _2352 = frontier_phi_34_33_ladder_1;
        _2354 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2350 = _2284;
        _2352 = _2285;
        _2354 = _2286;
    }
    uvec4 _2359 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2361 = _2359.x * 14u;
    uint _2362 = _2361 + 13u;
    float _2369 = _1059 + (-1.0);
    float _2374 = (cbLight._m0[_2362].x * _2369) + 1.0;
    float _2375 = (cbLight._m0[_2362].y * _2369) + 1.0;
    float _2376 = (cbLight._m0[_2362].z * _2369) + 1.0;
    float _2377 = (cbLight._m0[_2362].w * _2369) + 1.0;
    uint _2378 = _2361 + 5u;
    float _2384 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
    uint _2388 = _2361 + 4u;
    float _2397 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
    uint _2401 = _2361 | 1u;
    float _2412 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_894, _895, _896));
    float _2415 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_894, _895, _896));
    float _4671 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _4682 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2420 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * 0.3183098733425140380859375;
    float _2422 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2429 = ((cbLight._m0[_2378].x * _2384) * _2422) + (((cbLight._m0[_2388].x * _2350) * _2397) * _2420);
    float _2430 = ((_2384 * cbLight._m0[_2378].y) * _2422) + (((cbLight._m0[_2388].y * _2352) * _2397) * _2420);
    float _2431 = ((_2384 * cbLight._m0[_2378].z) * _2422) + (((cbLight._m0[_2388].z * _2354) * _2397) * _2420);
    uvec4 _2435 = floatBitsToUint(cbLight._m0[_2361 + 12u]);
    bool _2437 = _2435.x == 0u;
    float _2539;
    float _2541;
    float _2543;
    if (_2437)
    {
        _2539 = _2429;
        _2541 = _2430;
        _2543 = _2431;
    }
    else
    {
        uint _2547 = _2361 + 6u;
        float _2563 = (dot(vec3(cbLight._m0[_2361 + 2u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2564 = _2563 * _2563;
        float _4693 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2565 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2566 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        _2539 = (((cbLight._m0[_2547].x * 0.3183098733425140380859375) * _2565) * _2566) + _2429;
        _2541 = (((cbLight._m0[_2547].y * 0.3183098733425140380859375) * _2565) * _2566) + _2430;
        _2543 = (((cbLight._m0[_2547].z * 0.3183098733425140380859375) * _2565) * _2566) + _2431;
    }
    bool _2546 = _2435.y == 0u;
    float _2601;
    float _2603;
    float _2605;
    if (_2546)
    {
        _2601 = _2539;
        _2603 = _2541;
        _2605 = _2543;
    }
    else
    {
        uint _2774 = _2361 + 7u;
        float _2790 = (dot(vec3(cbLight._m0[_2361 + 3u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2791 = _2790 * _2790;
        float _4709 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2792 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2793 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2601 = (((cbLight._m0[_2774].x * 0.3183098733425140380859375) * _2792) * _2793) + _2539;
        _2603 = (((cbLight._m0[_2774].y * 0.3183098733425140380859375) * _2792) * _2793) + _2541;
        _2605 = (((cbLight._m0[_2774].z * 0.3183098733425140380859375) * _2792) * _2793) + _2543;
    }
    uint _2608 = _2361 + 8u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2361].w)) * _897) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2361].x + _973;
    float _2624 = cbLight._m0[_2361].y + _974;
    float _2625 = cbLight._m0[_2361].z + _975;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2361].xyz));
    float _4725 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _4736 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2637 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2638 = dot(vec3(_894, _895, _896), vec3(_2630, _2631, _2632));
    float _4747 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2641 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2642 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_2630, _2631, _2632));
    float _4758 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2646 = _2622 * _2622;
    float _2650 = ((_2641 * _2641) * (_2646 + (-1.0))) + 1.0;
    float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
    float _2659 = 0.959999978542327880859375 - _1040;
    float _2661 = 0.959999978542327880859375 - _1041;
    float _2662 = 0.959999978542327880859375 - _1042;
    float _2669 = 1.0 - _2622;
    float _2680 = (0.5 / (((_2637 * ((_2636 * _2669) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2637 * _2669) + _2622) * _2636))) * _2636;
    float _4769 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2682 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2646 / ((_2650 * _2650) * 3.141590118408203125));
    uint _2696 = _2361 + 9u;
    float _2707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2401].w)) * _897) * 0.949999988079071044921875);
    float _2708 = _2707 * _2707;
    float _2709 = cbLight._m0[_2401].x + _973;
    float _2710 = cbLight._m0[_2401].y + _974;
    float _2711 = cbLight._m0[_2401].z + _975;
    float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
    float _2716 = _2715 * _2709;
    float _2717 = _2715 * _2710;
    float _2718 = _2715 * _2711;
    float _2719 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2401].xyz));
    float _4780 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2722 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2723 = dot(vec3(_894, _895, _896), vec3(_2716, _2717, _2718));
    float _4791 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2726 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2727 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_2716, _2717, _2718));
    float _4802 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2731 = _2708 * _2708;
    float _2735 = ((_2726 * _2726) * (_2731 + (-1.0))) + 1.0;
    float _2742 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
    float _2749 = 1.0 - _2708;
    float _2759 = (0.5 / (((_2637 * ((_2722 * _2749) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2637 * _2749) + _2708) * _2722))) * _2722;
    float _4813 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2761 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2731 / ((_2735 * _2735) * 3.141590118408203125));
    float _2771 = (((((_2742 * _2659) + _1043) * cbLight._m0[_2696].x) * _2761) * _2384) + ((((cbLight._m0[_2608].x * _2350) * ((_2658 * _2659) + _1043)) * _2682) * _2397);
    float _2772 = (((((_2742 * _2661) + _1045) * cbLight._m0[_2696].y) * _2761) * _2384) + ((((cbLight._m0[_2608].y * _2352) * ((_2658 * _2661) + _1045)) * _2682) * _2397);
    float _2773 = (((((_2742 * _2662) + _1046) * cbLight._m0[_2696].z) * _2761) * _2384) + ((((cbLight._m0[_2608].z * _2354) * ((_2658 * _2662) + _1046)) * _2682) * _2397);
    float _2829;
    float _2831;
    float _2833;
    if (_2437)
    {
        _2829 = _2771;
        _2831 = _2772;
        _2833 = _2773;
    }
    else
    {
        uint _2835 = _2361 + 2u;
        uint _2839 = _2361 + 10u;
        float _2853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2835].w)) * _897) * 0.949999988079071044921875);
        float _2854 = _2853 * _2853;
        float _2855 = cbLight._m0[_2835].x + _973;
        float _2856 = cbLight._m0[_2835].y + _974;
        float _2857 = cbLight._m0[_2835].z + _975;
        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
        float _2862 = _2861 * _2855;
        float _2863 = _2861 * _2856;
        float _2864 = _2861 * _2857;
        float _2865 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2835].xyz));
        float _4824 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2868 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2869 = dot(vec3(_894, _895, _896), vec3(_2862, _2863, _2864));
        float _4835 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2872 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2873 = dot(vec3(cbLight._m0[_2835].xyz), vec3(_2862, _2863, _2864));
        float _4846 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2877 = _2854 * _2854;
        float _2881 = ((_2872 * _2872) * (_2877 + (-1.0))) + 1.0;
        float _2888 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
        float _2895 = 1.0 - _2854;
        float _2905 = (0.5 / (((_2637 * ((_2868 * _2895) + _2854)) + 9.9999999392252902907785028219223e-09) + (((_2637 * _2895) + _2854) * _2868))) * _2868;
        float _4857 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2907 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2877 / ((_2881 * _2881) * 3.141590118408203125));
        float _2908 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
        _2829 = (((((_2888 * _2659) + _1043) * cbLight._m0[_2839].x) * _2907) * _2908) + _2771;
        _2831 = (((((_2888 * _2661) + _1045) * cbLight._m0[_2839].y) * _2907) * _2908) + _2772;
        _2833 = (((((_2888 * _2662) + _1046) * cbLight._m0[_2839].z) * _2907) * _2908) + _2773;
    }
    float _2939;
    float _2941;
    float _2943;
    if (_2546)
    {
        _2939 = _2829;
        _2941 = _2831;
        _2943 = _2833;
    }
    else
    {
        uint _2950 = _2361 + 3u;
        uint _2954 = _2361 + 11u;
        float _2968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2950].w)) * _897) * 0.949999988079071044921875);
        float _2969 = _2968 * _2968;
        float _2970 = cbLight._m0[_2950].x + _973;
        float _2971 = cbLight._m0[_2950].y + _974;
        float _2972 = cbLight._m0[_2950].z + _975;
        float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
        float _2977 = _2976 * _2970;
        float _2978 = _2976 * _2971;
        float _2979 = _2976 * _2972;
        float _2980 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2950].xyz));
        float _4873 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2983 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2984 = dot(vec3(_894, _895, _896), vec3(_2977, _2978, _2979));
        float _4884 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2987 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2988 = dot(vec3(cbLight._m0[_2950].xyz), vec3(_2977, _2978, _2979));
        float _4895 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        float _2992 = _2969 * _2969;
        float _2996 = ((_2987 * _2987) * (_2992 + (-1.0))) + 1.0;
        float _3003 = exp2(log2(1.0 - (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) * 5.0);
        float _3010 = 1.0 - _2969;
        float _3020 = (0.5 / (((_2637 * ((_2983 * _3010) + _2969)) + 9.9999999392252902907785028219223e-09) + (((_2637 * _3010) + _2969) * _2983))) * _2983;
        float _4906 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        float _3022 = (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2992 / ((_2996 * _2996) * 3.141590118408203125));
        float _3023 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2939 = (((((_3003 * _2659) + _1043) * cbLight._m0[_2954].x) * _3022) * _3023) + _2829;
        _2941 = (((((_3003 * _2661) + _1045) * cbLight._m0[_2954].y) * _3022) * _3023) + _2831;
        _2943 = (((((_3003 * _2662) + _1046) * cbLight._m0[_2954].z) * _3022) * _3023) + _2833;
    }
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    float _3099;
    if (_2359.y == 0u)
    {
        uvec4 _3044 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3045 = _3044.x;
        uint _3056 = uint((float(_3044.y) * floor(float(uint(cbSceneParam._m0[85u].y * _982) / _3045))) + floor(float(uint(cbSceneParam._m0[85u].x * _981) / _3045)));
        float _3066 = (log2(_2137 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3067 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
        uint _3070 = uint(isnan(14.0) ? _3067 : (isnan(_3067) ? 14.0 : min(_3067, 14.0)));
        uvec4 _3075 = texelFetch(g_lightClusterGridBuffer, int(((_3070 << 2u) + (_3056 << 6u)) >> 2u));
        uint _3076 = _3075.x;
        uint _3077 = _3044.z;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        if (((((1u << ((_3077 >> 4u) & 15u)) + 4294967295u) & _3076) == 0u) || ((_3077 & 240u) == 0u))
        {
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
            _3162 = 0.0;
            _3164 = 0.0;
            _3166 = 0.0;
        }
        else
        {
            float _3157;
            float _3159;
            float _3161;
            float _3163;
            float _3165;
            float _3167;
            float _3300 = 0.0;
            float _3301 = 0.0;
            float _3302 = 0.0;
            float _3303 = 0.0;
            float _3304 = 0.0;
            float _3305 = 0.0;
            uint _3306 = 0u;
            uint _3315;
            bool _3316;
            for (;;)
            {
                _3315 = texelFetch(g_lightClassification, int((((_3070 << 5u) + (_3056 << 9u)) + (_3306 << 2u)) >> 2u)).x;
                _3316 = _3315 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3316)
                {
                    frontier_phi_66_pred = _3305;
                    frontier_phi_66_pred_1 = _3304;
                    frontier_phi_66_pred_2 = _3303;
                    frontier_phi_66_pred_3 = _3302;
                    frontier_phi_66_pred_4 = _3301;
                    frontier_phi_66_pred_5 = _3300;
                }
                else
                {
                    float _3424;
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    uint _3430;
                    _3424 = _3300;
                    _3425 = _3301;
                    _3426 = _3302;
                    _3427 = _3303;
                    _3428 = _3304;
                    _3429 = _3305;
                    _3430 = _3315;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    for (;;)
                    {
                        uint _3434 = uint(findLSB(_3430)) + (_3306 << 5u);
                        uint _3431 = (_3430 + 4294967295u) & _3430;
                        uint _3436 = _3434 * 48u;
                        vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 3u)).x));
                        uint _3456 = (_3434 * 48u) + 4u;
                        vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 3u)).x));
                        uint _3475 = (_3434 * 48u) + 8u;
                        vec3 _3486 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3475)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 2u)).x));
                        float _3490 = _3450.x - _2135;
                        float _3491 = _3450.y - _2136;
                        float _3492 = _3450.z - _2137;
                        float _3493 = dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492));
                        float _3496 = inversesqrt(_3493);
                        float _3497 = _3496 * _3490;
                        float _3498 = _3496 * _3491;
                        float _3499 = _3496 * _3492;
                        float _3500 = dot(vec3(_1000, _1003, _1006), vec3(_3497, _3498, _3499));
                        float _3505 = 1.0 - (_3493 * _3450.w);
                        float _4932 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3506 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3507 = sqrt(_3493) * _3469.w;
                        float _3510 = 1.39999997615814208984375 / (_3507 + 1.39999997615814208984375);
                        float _3511 = _3510 * _3510;
                        float _3514 = ((1.0 - _3511) * _3500) + _3511;
                        float _3517 = _3507 * _3507;
                        float _3521 = ((isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0))) * _3506) / ((_3517 * 0.699999988079071044921875) + 1.0);
                        float _3525 = (-0.0) - _2135;
                        float _3526 = (-0.0) - _2136;
                        float _3527 = (-0.0) - _2137;
                        float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                        float _3532 = _3531 * _3525;
                        float _3533 = _3531 * _3526;
                        float _3534 = _3531 * _3527;
                        float _3541 = exp2(log2(1.0 / ((_3517 * 3.5) + 5.0)) * 0.25);
                        float _3542 = 1.0 - _1075;
                        float _3549 = sqrt(1.0 - ((1.0 - (_3542 * _3542)) * (1.0 - (_3541 * _3541))));
                        float _3550 = _3549 * _3549;
                        float _3551 = _3550 * _3550;
                        float _3552 = _3532 + _3497;
                        float _3553 = _3533 + _3498;
                        float _3554 = _3534 + _3499;
                        float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                        float _3562 = dot(vec3(_1000, _1003, _1006), vec3(_3532, _3533, _3534));
                        float _4948 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3565 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3566 = dot(vec3(_1000, _1003, _1006), vec3(_3558 * _3552, _3558 * _3553, _3558 * _3554));
                        float _4959 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3569 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3573 = ((_3569 * _3569) * (_3551 + (-1.0))) + 1.0;
                        float _3574 = _3510 * _3550;
                        float _3575 = _3574 * _3574;
                        float _3578 = ((1.0 - _3575) * _3500) + _3575;
                        float _4970 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3579 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3580 = 1.0 - _3550;
                        float _3590 = (0.5 / (((_3579 * ((_3565 * _3580) + _3550)) + 9.9999999392252902907785028219223e-09) + (((_3579 * _3580) + _3550) * _3565))) * _3579;
                        float _4981 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3601 = (((_3551 * 3.1415927410125732421875) * (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) / ((_3573 * _3573) * ((_3517 * 2.1991131305694580078125) + 3.141590118408203125))) * _3506;
                        _3359 = (_3521 * _3469.x) + _3427;
                        _3360 = (_3521 * _3469.y) + _3428;
                        _3361 = (_3521 * _3469.z) + _3429;
                        _3356 = (_3601 * _3486.x) + _3424;
                        _3357 = (_3601 * _3486.y) + _3425;
                        _3358 = (_3601 * _3486.z) + _3426;
                        if (_3431 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3424 = _3356;
                            _3425 = _3357;
                            _3426 = _3358;
                            _3427 = _3359;
                            _3428 = _3360;
                            _3429 = _3361;
                            _3430 = _3431;
                        }
                    }
                    frontier_phi_66_pred = _3361;
                    frontier_phi_66_pred_1 = _3360;
                    frontier_phi_66_pred_2 = _3359;
                    frontier_phi_66_pred_3 = _3358;
                    frontier_phi_66_pred_4 = _3357;
                    frontier_phi_66_pred_5 = _3356;
                }
                _3167 = frontier_phi_66_pred;
                _3165 = frontier_phi_66_pred_1;
                _3163 = frontier_phi_66_pred_2;
                _3161 = frontier_phi_66_pred_3;
                _3159 = frontier_phi_66_pred_4;
                _3157 = frontier_phi_66_pred_5;
                uint _3307 = _3306 + 1u;
                if (_3307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3300 = _3157;
                    _3301 = _3159;
                    _3302 = _3161;
                    _3303 = _3163;
                    _3304 = _3165;
                    _3305 = _3167;
                    _3306 = _3307;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
            _3162 = _3163;
            _3164 = _3165;
            _3166 = _3167;
        }
        uvec4 _3170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3171 = _3170.z;
        uint _3173 = (_3171 >> 8u) & 15u;
        float _3268;
        float _3270;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        if (((4294967295u << _3173) & _3076) == 0u)
        {
            _3268 = _3156;
            _3270 = _3158;
            _3272 = _3160;
            _3274 = _3162;
            _3276 = _3164;
            _3278 = _3166;
        }
        else
        {
            float _3293 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
            float _3294 = _3293 * _2135;
            float _3295 = _3293 * _2136;
            float _3296 = _3293 * _2137;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3173 < ((_3171 >> 12u) & 15u))
            {
                float _3269;
                float _3271;
                float _3273;
                float _3275;
                float _3277;
                float _3279;
                float _3407 = _3156;
                float _3408 = _3158;
                float _3409 = _3160;
                float _3410 = _3162;
                float _3411 = _3164;
                float _3412 = _3166;
                uint _3413 = _3173;
                uint _3422;
                bool _3423;
                for (;;)
                {
                    _3422 = texelFetch(g_lightClassification, int((((_3070 << 5u) + (_3056 << 9u)) + (_3413 << 2u)) >> 2u)).x;
                    _3423 = _3422 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3423)
                    {
                        frontier_phi_72_pred = _3412;
                        frontier_phi_72_pred_1 = _3411;
                        frontier_phi_72_pred_2 = _3410;
                        frontier_phi_72_pred_3 = _3409;
                        frontier_phi_72_pred_4 = _3408;
                        frontier_phi_72_pred_5 = _3407;
                    }
                    else
                    {
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3619 = _3407;
                        float _3620 = _3408;
                        float _3621 = _3409;
                        float _3622 = _3410;
                        float _3623 = _3411;
                        float _3624 = _3412;
                        uint _3625 = _3422;
                        uint _3626;
                        vec4 _3651;
                        float _3652;
                        vec4 _3667;
                        vec3 _3679;
                        vec4 _3694;
                        vec4 _3709;
                        float _3755;
                        bool _3756;
                        for (;;)
                        {
                            uint _3636 = ((_3413 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3625));
                            _3626 = (_3625 + 4294967295u) & _3625;
                            uint _3638 = _3636 * 40u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            _3652 = _3651.w;
                            uint _3654 = (_3636 * 40u) + 4u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3636 * 40u) + 8u;
                            _3679 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x));
                            uint _3681 = (_3636 * 40u) + 16u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3636 * 40u) + 20u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3711 = (_3636 * 40u) + 24u;
                            vec4 _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3730 = (_3636 * 40u) + 28u;
                            vec4 _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            _3755 = fma(_2137, _3743.z, fma(_2136, _3743.y, _3743.x * _2135)) + _3743.w;
                            _3756 = !((fma(_2137, _3724.z, fma(_2136, _3724.y, _3724.x * _2135)) + _3724.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3756)
                            {
                                float _3783 = _3651.x - _2135;
                                float _3784 = _3651.y - _2136;
                                float _3785 = _3651.z - _2137;
                                float _3786 = dot(vec3(_3783, _3784, _3785), vec3(_3783, _3784, _3785));
                                float _3789 = inversesqrt(_3786);
                                float _3790 = _3789 * _3783;
                                float _3791 = _3789 * _3784;
                                float _3792 = _3789 * _3785;
                                float _3796 = 1.0 - (_3786 / (_3652 * _3652));
                                float _4992 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3801 = sqrt(_3786) * _3667.w;
                                float _3803 = 1.39999997615814208984375 / (_3801 + 1.39999997615814208984375);
                                float _3804 = _3803 * _3803;
                                float _3807 = ((1.0 - _3804) * dot(vec3(_3790, _3791, _3792), vec3(_1000, _1003, _1006))) + _3804;
                                float _3810 = _3801 * _3801;
                                float _3814 = (fma(_2137, _3694.z, fma(_2136, _3694.y, _3694.x * _2135)) + _3694.w) / _3755;
                                float _3815 = (fma(_2137, _3709.z, fma(_2136, _3709.y, _3709.x * _2135)) + _3709.w) / _3755;
                                float _3819 = 1.0 - dot(vec2(_3814, _3815), vec2(_3814, _3815));
                                float _5008 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3820 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3821 = _3820 * (((isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0))) * _3797) / ((_3810 * 0.699999988079071044921875) + 1.0));
                                float _3833 = exp2(log2(1.0 / ((_3810 * 3.5) + 5.0)) * 0.25);
                                float _3834 = 1.0 - _1075;
                                float _3841 = sqrt(1.0 - ((1.0 - (_3834 * _3834)) * (1.0 - (_3833 * _3833))));
                                float _3842 = _3841 * _3841;
                                float _3843 = _3842 * _3842;
                                float _3844 = _3790 - _3294;
                                float _3845 = _3791 - _3295;
                                float _3846 = _3792 - _3296;
                                float _3850 = inversesqrt(dot(vec3(_3844, _3845, _3846), vec3(_3844, _3845, _3846)));
                                float _3854 = dot(vec3(_1000, _1003, _1006), vec3((-0.0) - _3294, (-0.0) - _3295, (-0.0) - _3296));
                                float _5019 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3857 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3858 = dot(vec3(_1000, _1003, _1006), vec3(_3850 * _3844, _3850 * _3845, _3850 * _3846));
                                float _5030 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3861 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3865 = ((_3861 * _3861) * (_3843 + (-1.0))) + 1.0;
                                float _3866 = _3803 * _3842;
                                float _3867 = _3866 * _3866;
                                float _3873 = ((1.0 - _3867) * dot(vec3(_1000, _1003, _1006), vec3(_3790, _3791, _3792))) + _3867;
                                float _5041 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3874 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3875 = 1.0 - _3842;
                                float _3885 = (0.5 / (((_3874 * ((_3857 * _3875) + _3842)) + 9.9999999392252902907785028219223e-09) + (((_3874 * _3875) + _3842) * _3857))) * _3874;
                                float _5052 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3895 = (_3820 * _3797) * (((_3843 * 3.1415927410125732421875) * (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0)))) / ((_3865 * _3865) * ((_3810 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3821 * _3667.y;
                                frontier_phi_78_pred_1 = _3821 * _3667.x;
                                frontier_phi_78_pred_2 = _3895 * _3679.z;
                                frontier_phi_78_pred_3 = _3895 * _3679.y;
                                frontier_phi_78_pred_4 = _3895 * _3679.x;
                                frontier_phi_78_pred_5 = _3821 * _3667.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3903 = frontier_phi_78_pred;
                            _3902 = frontier_phi_78_pred_1;
                            _3901 = frontier_phi_78_pred_2;
                            _3900 = frontier_phi_78_pred_3;
                            _3899 = frontier_phi_78_pred_4;
                            _3904 = frontier_phi_78_pred_5;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            _3606 = _3899 + _3619;
                            _3607 = _3900 + _3620;
                            _3608 = _3901 + _3621;
                            if (_3626 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3626;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3611;
                        frontier_phi_72_pred_1 = _3610;
                        frontier_phi_72_pred_2 = _3609;
                        frontier_phi_72_pred_3 = _3608;
                        frontier_phi_72_pred_4 = _3607;
                        frontier_phi_72_pred_5 = _3606;
                    }
                    _3279 = frontier_phi_72_pred;
                    _3277 = frontier_phi_72_pred_1;
                    _3275 = frontier_phi_72_pred_2;
                    _3273 = frontier_phi_72_pred_3;
                    _3271 = frontier_phi_72_pred_4;
                    _3269 = frontier_phi_72_pred_5;
                    uint _3414 = _3413 + 1u;
                    if (_3414 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3407 = _3269;
                        _3408 = _3271;
                        _3409 = _3273;
                        _3410 = _3275;
                        _3411 = _3277;
                        _3412 = _3279;
                        _3413 = _3414;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3279;
                frontier_phi_60_61_ladder_1 = _3277;
                frontier_phi_60_61_ladder_2 = _3273;
                frontier_phi_60_61_ladder_3 = _3271;
                frontier_phi_60_61_ladder_4 = _3269;
                frontier_phi_60_61_ladder_5 = _3275;
            }
            else
            {
                frontier_phi_60_61_ladder = _3166;
                frontier_phi_60_61_ladder_1 = _3164;
                frontier_phi_60_61_ladder_2 = _3160;
                frontier_phi_60_61_ladder_3 = _3158;
                frontier_phi_60_61_ladder_4 = _3156;
                frontier_phi_60_61_ladder_5 = _3162;
            }
            _3268 = frontier_phi_60_61_ladder_4;
            _3270 = frontier_phi_60_61_ladder_3;
            _3272 = frontier_phi_60_61_ladder_2;
            _3274 = frontier_phi_60_61_ladder_5;
            _3276 = frontier_phi_60_61_ladder_1;
            _3278 = frontier_phi_60_61_ladder;
        }
        float _3283 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
        _3089 = (_3283 * _3274) + _2601;
        _3091 = (_3283 * _3276) + _2603;
        _3093 = (_3283 * _3278) + _2605;
        _3095 = ((_3268 * _1043) * _3283) + _2939;
        _3097 = ((_3270 * _1045) * _3283) + _2941;
        _3099 = ((_3272 * _1046) * _3283) + _2943;
    }
    else
    {
        _3089 = _2601;
        _3091 = _2603;
        _3093 = _2605;
        _3095 = _2939;
        _3097 = _2941;
        _3099 = _2943;
    }
    float _5068 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _5079 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _5090 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    uint _3119 = _283 + 6u;
    float _3127 = _981 / cbSceneParam._m0[86u].x;
    float _3128 = _982 / cbSceneParam._m0[86u].y;
    vec4 _3142 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3127, _3128, (log2((isnan(cbSceneParam._m0[77u].w) ? _916 : (isnan(_916) ? cbSceneParam._m0[77u].w : min(_916, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3144 = _3142.x;
    float _3145 = _3142.y;
    float _3146 = _3142.z;
    float _3147 = _3142.w;
    float _3218;
    float _3220;
    float _3222;
    float _3224;
    if (_916 > cbSceneParam._m0[78u].w)
    {
        float _3181 = isnan(_916) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _916 : min(cbSceneParam._m0[80u].w, _916));
        float _3182 = _3181 / _916;
        float _3193 = _3182 * _966;
        float _3194 = _967 * _3182;
        float _3195 = (-0.0) - _3194;
        float _3196 = _3182 * _968;
        float _3198 = (cbSceneParam._m0[77u].w * _3195) / _3181;
        float _3199 = _3198 + cbSceneParam._m0[79u].w;
        float _3200 = cbSceneParam._m0[79u].w - _3194;
        float _3206 = sqrt(((_3193 * _3193) + (_3194 * _3194)) + (_3196 * _3196));
        float _3209 = (1.0 - (cbSceneParam._m0[77u].w / _3181)) * _3206;
        float _3214 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3216 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3369;
        if (abs((_3195 - _3198) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3369 = ((((_3199 > 0.0) ? exp2(_3214 * _3199) : (2.0 - exp2(_3216 * _3199))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3209;
        }
        else
        {
            float _3329 = 1.0 / cbSceneParam._m0[80u].x;
            float _3330 = isnan(_3200) ? _3199 : (isnan(_3199) ? _3200 : max(_3199, _3200));
            float _3331 = isnan(_3200) ? _3199 : (isnan(_3199) ? _3200 : min(_3199, _3200));
            float _3340 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : min(_3330, 0.0));
            float _3341 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : min(_3331, 0.0));
            _3369 = ((abs(_3206 / _3195) * cbSceneParam._m0[80u].y) * ((((_3340 - _3341) * 2.0) - ((exp2(_3214 * (isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0)))) - exp2(_3214 * (isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))))) * _3329)) - ((exp2(_3216 * _3340) - exp2(_3216 * _3341)) * _3329))) + (_3209 * cbSceneParam._m0[80u].z);
        }
        vec4 _3371 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3127, _3128, 1.0), 0.0);
        float _3380 = exp2((_3369 * (-1.44269502162933349609375)) * (1.0 - _3371.w));
        float _3381 = log2(_3380);
        float _3397 = log2(_3147);
        _3218 = (exp2(_3397 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].x)) * _3371.x) / cbSceneParam._m0[78u].x)) + _3144;
        _3220 = (exp2(_3397 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].y)) * _3371.y) / cbSceneParam._m0[78u].y)) + _3145;
        _3222 = (exp2(_3397 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].z)) * _3371.z) / cbSceneParam._m0[78u].z)) + _3146;
        _3224 = _3380 * _3147;
    }
    else
    {
        _3218 = _3144;
        _3220 = _3145;
        _3222 = _3146;
        _3224 = _3147;
    }
    float _3236 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3237 = _3236 == 3.0;
    float _3238 = log2(_3224);
    float _3245 = exp2(_3238 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3089 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1059))) + ((_3095 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1867)) * cbPerFrame._m0[3u].x));
    float _3246 = exp2(_3238 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3091 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1059))) + ((_3097 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1867)) * cbPerFrame._m0[3u].x));
    float _3247 = exp2(_3238 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3093 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1059))) + ((_3099 + ((isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0))) * _1867)) * cbPerFrame._m0[3u].x));
    float _3256 = (_3236 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3256 * (_3237 ? _3245 : (_3245 + (cbSceneParam._m0[72u].w * _3218)));
    SV_Target.y = _3256 * (_3237 ? _3246 : (_3246 + (cbSceneParam._m0[72u].w * _3220)));
    SV_Target.z = _3256 * (_3237 ? _3247 : (_3247 + (cbSceneParam._m0[72u].w * _3222)));
    SV_Target.w = cbInstanceData._m0[_3119].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3119].w;
}


