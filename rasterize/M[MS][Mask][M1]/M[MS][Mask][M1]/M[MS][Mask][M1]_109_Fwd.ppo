#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1577;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3902 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3913 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3924 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _380 = _375.x * cbMtdParam._m0[11u].x;
    float _381 = _375.y * cbMtdParam._m0[11u].y;
    float _382 = _375.z * cbMtdParam._m0[11u].z;
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _455 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _457 = _455.x;
    float _469 = dot(vec4(_457, _455.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _486 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _420.x) * 2.0) - ((((_457 - _469) * cbMtdParam._m0[23u].w) + _469) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3935 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _494 = (_487 * ((_401.x * cbMtdParam._m0[12u].x) - _380)) + _380;
    float _495 = (_487 * ((_401.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _496 = (_487 * ((_401.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _513 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _535 = _533.x;
    float _545 = dot(vec4(_535, _533.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _559 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _420.y) * 2.0) - ((((_535 - _545) * cbMtdParam._m0[23u].w) + _545) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3946 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _567 = (_560 * ((_513.x * cbMtdParam._m0[13u].x) - _494)) + _494;
    float _568 = (_560 * ((_513.y * cbMtdParam._m0[13u].y) - _495)) + _495;
    float _569 = (_560 * ((_513.z * cbMtdParam._m0[13u].z) - _496)) + _496;
    vec4 _588 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _607 = _605.x;
    float _617 = dot(vec4(_607, _605.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _629 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _420.z) * 2.0) - ((((_607 - _617) * cbMtdParam._m0[23u].w) + _617) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3957 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _640 = (_349.x * cbMtdParam._m0[9u].x) * ((_630 * ((_588.x * cbMtdParam._m0[14u].x) - _567)) + _567);
    float _641 = (_349.y * cbMtdParam._m0[9u].y) * ((_630 * ((_588.y * cbMtdParam._m0[14u].y) - _568)) + _568);
    float _642 = (_349.z * cbMtdParam._m0[9u].z) * ((_630 * ((_588.z * cbMtdParam._m0[14u].z) - _569)) + _569);
    float _646 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _640;
    float _649 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _641;
    float _652 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _642;
    float _660 = (((_640 - _646) * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) + _646) * 4.55000019073486328125;
    float _662 = (((_641 - _649) * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) + _649) * 4.55000019073486328125;
    float _664 = (((_642 - _652) * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) + _652) * 4.55000019073486328125;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _718 = _716.x;
    float _719 = _716.y;
    float _720 = _716.z;
    float _727 = ((_699.x - _718) * _487) + _718;
    float _728 = ((_699.y - _719) * _487) + _719;
    float _729 = ((_699.z - _720) * _487) + _720;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _752 = ((_741.x - _727) * _560) + _727;
    float _753 = ((_741.y - _728) * _560) + _728;
    float _754 = ((_741.z - _729) * _560) + _729;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _779 = ((_766.z - _754) * _630) + _754;
    float _782 = ((((_766.x - _752) * _630) + _752) * 2.0) + (-1.0);
    float _783 = ((((_766.y - _753) * _630) + _753) * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _3968 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))));
    vec4 _809 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _821 = (_782 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_676.x * 2.0) + (-1.0)))) + (((_809.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _822 = (_783 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_676.y * 2.0) + (-1.0)))) + (((_809.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _834 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _836 = _834.x;
    float _837 = 1.0 - _836;
    float _865 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_836 - _837) * cbMtdParam._m0[24u].w) + _837) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3979 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _866 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _874 = ((((cbMtdParam._m0[10u].x - _660) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _866) + _660;
    float _875 = ((((cbMtdParam._m0[10u].y - _662) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _866) + _662;
    float _876 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _664)) * _866) + _664;
    vec4 _902 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _904 = _902.x;
    float _921 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _904) * _487) + _904;
    float _939 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _921) * _560) + _921;
    float _956 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _312) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _313) + cbTextureTilingScale._m0[10u].w)).x - _939) * _630) + _939;
    float _960 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _956) * cbMtdParam._m0[19u].z) + _956;
    float _962 = _960 - (_960 * _866);
    float _967 = (((_676.z - _779) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _779;
    float _971 = ((_809.z - _967) * cbMtdParam._m0[19u].w) + _967;
    float _975 = ((cbMtdParam._m0[23u].x - _971) * _866) + _971;
    vec4 _996 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1002 = (_996.x * 2.0) + (-1.0);
    float _1003 = (_996.y * 2.0) + (-1.0);
    float _1004 = dot(vec2(_1002, _1003), vec2(_1002, _1003));
    float _3990 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1020 = (_866 * (((cbMtdParam._m0[22u].z * _821) - _821) + _1002)) + _821;
    float _1021 = (_866 * (((cbMtdParam._m0[22u].z * _822) - _822) + _1003)) + _822;
    float _1022 = (_866 * (sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) - _789)) + _789;
    float _1024 = cbMtdParam._m0[22u].x + _809.w;
    float _1027 = fma(_1022, _261 * NORMAL.x, fma(_1021, _268 * TANGENT.x, (_254 * _246) * _1020));
    float _1030 = fma(_1022, _261 * NORMAL.y, fma(_1021, _268 * TANGENT.y, (_254 * _247) * _1020));
    float _1033 = fma(_1022, _261 * NORMAL.z, fma(_1021, _268 * TANGENT.z, (_254 * _248) * _1020));
    float _1037 = inversesqrt(dot(vec3(_1027, _1030, _1033), vec3(_1027, _1030, _1033)));
    float _1038 = _1037 * _1027;
    float _1039 = _1037 * _1030;
    float _1040 = _1037 * _1033;
    float _4001 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _1041 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _4023 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4034 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4045 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4056 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _1046 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1060 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1110 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1100);
    float _1111 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1100);
    float _1112 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1100);
    float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
    float _1117 = _1110 * _1116;
    float _1118 = _1111 * _1116;
    float _1119 = _1112 * _1116;
    float _1125 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1126 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1144 = fma(_1040, cbSceneParam._m0[5u].z, fma(_1039, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1038));
    float _1147 = fma(_1040, cbSceneParam._m0[6u].z, fma(_1039, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1038));
    float _1150 = fma(_1040, cbSceneParam._m0[7u].z, fma(_1039, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1038));
    uint _1164 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1170 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_1164].x;
    float _1171 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1164].y;
    float _1172 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_1164].z;
    float _4067 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1174 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1175 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1176 = 1.0 - _1046;
    float _1177 = _1173 * _1176;
    float _1178 = _1174 * _1176;
    float _1179 = _1175 * _1176;
    float _1184 = (_1173 + (-0.039999999105930328369140625)) * _1046;
    float _1185 = (_1174 + (-0.039999999105930328369140625)) * _1046;
    float _1186 = (_1175 + (-0.039999999105930328369140625)) * _1046;
    float _1187 = _1184 + 0.039999999105930328369140625;
    float _1189 = _1185 + 0.039999999105930328369140625;
    float _1190 = _1186 + 0.039999999105930328369140625;
    vec4 _1199 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1125, cbSceneParam._m0[86u].y * _1126));
    float _1203 = ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * TEXCOORD_5.w) * _1199.x;
    float _1204 = dot(vec3(_1038, _1039, _1040), vec3(_1117, _1118, _1119));
    float _1207 = _1204 * 2.0;
    float _1211 = (_1207 * _1038) - _1117;
    float _1212 = (_1207 * _1039) - _1118;
    float _1213 = (_1207 * _1040) - _1119;
    float _1217 = abs(dot(vec3(_1117, _1118, _1119), vec3(_1038, _1039, _1040)));
    float _4100 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1219 = sqrt(_1041);
    float _1232 = exp2((_1219 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1219 * 3.0));
    float _1238 = (1.0 - _1232) * ((_1219 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1239 = _1232 * _1219;
    float _1267 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1576;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1301 = fma(_1275, cbModelParam._m0[26u].z, fma(_1271, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1267));
        float _1305 = fma(_1275, cbModelParam._m0[27u].z, fma(_1271, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1267));
        float _1309 = fma(_1275, cbModelParam._m0[28u].z, fma(_1271, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1267));
        float _1334 = _1267 + _1038;
        float _1335 = _1271 + _1039;
        float _1336 = _1275 + _1040;
        float _1346 = fma(_1336, cbModelParam._m0[26u].z, fma(_1335, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1334)) - _1301;
        float _1347 = fma(_1336, cbModelParam._m0[27u].z, fma(_1335, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1334)) - _1305;
        float _1348 = fma(_1336, cbModelParam._m0[28u].z, fma(_1335, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1334)) - _1309;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1365 = ((_1352 * _1346) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1301 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1352 * _1347) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1305 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1352 * _1348) / cbModelParam._m0[34u].z) + ((((((_1309 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        float _1404 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1370.x + (-0.5));
        float _1406 = _1404 * (_1370.y + (-0.5));
        float _1407 = _1404 * (_1370.z + (-0.5));
        float _1414 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1377.x + (-0.5));
        float _1416 = _1414 * (_1377.y + (-0.5));
        float _1417 = _1414 * (_1377.z + (-0.5));
        float _1424 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1384.x + (-0.5));
        float _1426 = _1424 * (_1384.y + (-0.5));
        float _1427 = _1424 * (_1384.z + (-0.5));
        float _1434 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1391.x + (-0.5));
        float _1436 = _1434 * (_1391.y + (-0.5));
        float _1437 = _1434 * (_1391.z + (-0.5));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = _1405 * 0.5;
        float _1442 = _1415 * 0.5;
        float _1443 = _1425 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1458 = (dot(vec3(_1038, _1039, _1040), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1468 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4148 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1470 + 1.0))) + _1475) * _1438;
        float _1485 = _1406 * 0.5;
        float _1486 = _1416 * 0.5;
        float _1487 = _1426 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_1038, _1039, _1040), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4181 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1512 + 1.0))) + _1517) * _1439;
        float _1527 = _1407 * 0.5;
        float _1528 = _1417 * 0.5;
        float _1529 = _1427 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_1038, _1039, _1040), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4214 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1554 + 1.0))) + _1559) * _1440;
        _1576 = _1407;
        _1578 = _1406;
        _1579 = _1405;
        _1580 = _1417;
        _1581 = _1416;
        _1582 = _1415;
        _1583 = _1427;
        _1584 = _1426;
        _1585 = _1425;
        _1586 = _1440;
        _1587 = _1439;
        _1588 = _1438;
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1590 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1591 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
    }
    else
    {
        _1576 = _1577;
        _1578 = _1577;
        _1579 = _1577;
        _1580 = _1577;
        _1581 = _1577;
        _1582 = _1577;
        _1583 = _1577;
        _1584 = _1577;
        _1585 = _1577;
        _1586 = _1577;
        _1587 = _1577;
        _1588 = _1577;
        _1589 = 0.0;
        _1590 = 0.0;
        _1591 = 0.0;
    }
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1614 = fma(_1275, cbModelParam._m0[30u].z, fma(_1271, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267));
        float _1618 = fma(_1275, cbModelParam._m0[31u].z, fma(_1271, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267));
        float _1622 = fma(_1275, cbModelParam._m0[32u].z, fma(_1271, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267));
        float _1645 = _1267 + _1038;
        float _1646 = _1271 + _1039;
        float _1647 = _1275 + _1040;
        float _1657 = fma(_1647, cbModelParam._m0[30u].z, fma(_1646, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1645)) - _1614;
        float _1658 = fma(_1647, cbModelParam._m0[31u].z, fma(_1646, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1645)) - _1618;
        float _1659 = fma(_1647, cbModelParam._m0[32u].z, fma(_1646, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1645)) - _1622;
        float _1663 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
        float _1676 = ((_1663 * _1657) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1614 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1677 = ((_1663 * _1658) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1618 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1678 = ((_1663 * _1659) / cbModelParam._m0[35u].z) + ((((((_1622 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        float _1713 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1680.x + (-0.5));
        float _1715 = _1713 * (_1680.y + (-0.5));
        float _1716 = _1713 * (_1680.z + (-0.5));
        float _1723 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1687.x + (-0.5));
        float _1725 = _1723 * (_1687.y + (-0.5));
        float _1726 = _1723 * (_1687.z + (-0.5));
        float _1733 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1694.x + (-0.5));
        float _1735 = _1733 * (_1694.y + (-0.5));
        float _1736 = _1733 * (_1694.z + (-0.5));
        float _1743 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1701.x + (-0.5));
        float _1745 = _1743 * (_1701.y + (-0.5));
        float _1746 = _1743 * (_1701.z + (-0.5));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = _1714 * 0.5;
        float _1751 = _1724 * 0.5;
        float _1752 = _1734 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_1038, _1039, _1040), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4277 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1777 + 1.0))) + _1782) * _1747;
        float _1792 = _1715 * 0.5;
        float _1793 = _1725 * 0.5;
        float _1794 = _1735 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_1038, _1039, _1040), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1748 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4310 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1819 + 1.0))) + _1824) * _1748;
        float _1834 = _1716 * 0.5;
        float _1835 = _1726 * 0.5;
        float _1836 = _1736 * 0.5;
        float _1837 = dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836));
        float _1842 = (_1837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1837);
        float _1850 = (dot(vec3(_1038, _1039, _1040), vec3(_1842 * _1834, _1842 * _1835, _1842 * _1836)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1859 = sqrt(((_1835 * _1835) + (_1834 * _1834)) + (_1836 * _1836)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1861 = _1860 * 2.0;
        float _1865 = (1.0 - _1860) / (_1860 + 1.0);
        float _4343 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1875 = ((((1.0 - _1866) * (_1861 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1861 + 1.0))) + _1866) * _1749;
        _1883 = _1716;
        _1884 = _1715;
        _1885 = _1714;
        _1886 = _1726;
        _1887 = _1725;
        _1888 = _1724;
        _1889 = _1736;
        _1890 = _1735;
        _1891 = _1734;
        _1892 = _1749;
        _1893 = _1748;
        _1894 = _1747;
        _1895 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1896 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)));
    }
    else
    {
        _1883 = _1577;
        _1884 = _1577;
        _1885 = _1577;
        _1886 = _1577;
        _1887 = _1577;
        _1888 = _1577;
        _1889 = _1577;
        _1890 = _1577;
        _1891 = _1577;
        _1892 = _1577;
        _1893 = _1577;
        _1894 = _1577;
        _1895 = 0.0;
        _1896 = 0.0;
        _1897 = 0.0;
    }
    float _1907 = (cbModelParam._m0[1u].x * (_1895 - _1589)) + _1589;
    float _1908 = (cbModelParam._m0[1u].x * (_1896 - _1590)) + _1590;
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1591)) + _1591;
    float _1930 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1907));
    float _1951 = _1211 * 0.5;
    float _1952 = _1212 * 0.5;
    float _1953 = _1213 * 0.5;
    float _1954 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1957 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1884, _1887, _1890, _1893));
    float _1960 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1883, _1886, _1889, _1892));
    float _1994;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1967 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1576, _1580, _1583, _1586));
        float _1971 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1578, _1581, _1584, _1587));
        float _1975 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1579, _1582, _1585, _1588));
        float _1982 = dot(vec4(cbModelParam._m0[39u]), vec4(_1951, _1952, _1953, 1.0));
        _1994 = dot(vec3(isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)), isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1982) ? 0.0 : (isnan(0.0) ? _1982 : max(0.0, _1982))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1994 = 1.0;
    }
    float _2005;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1996 = dot(vec4(cbModelParam._m0[40u]), vec4(_1951, _1952, _1953, 1.0));
        _2005 = dot(vec3(isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1996) ? 0.0 : (isnan(0.0) ? _1996 : max(0.0, _1996))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2005 = 1.0;
    }
    float _2009 = (_2005 * cbModelParam._m0[1u].x) + (_1994 * (1.0 - cbModelParam._m0[1u].x));
    float _2019 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1041);
    float _2020 = isnan(_2019) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2019 : min(cbModelParam._m0[25u].z, _2019));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2068 = fma(_1275, cbModelParam._m0[13u].z, fma(_1271, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1267)) + cbModelParam._m0[13u].w;
        float _2072 = fma(_1275, cbModelParam._m0[14u].z, fma(_1271, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1267)) + cbModelParam._m0[14u].w;
        float _2076 = fma(_1275, cbModelParam._m0[15u].z, fma(_1271, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1267)) + cbModelParam._m0[15u].w;
        float _2079 = fma(_1213, cbModelParam._m0[13u].z, fma(_1212, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1211));
        float _2082 = fma(_1213, cbModelParam._m0[14u].z, fma(_1212, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1211));
        float _2085 = fma(_1213, cbModelParam._m0[15u].z, fma(_1212, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1211));
        float _2113;
        if (_2079 > 0.0)
        {
            _2113 = abs((1.0 - _2068) / _2079);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2068 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2113 = frontier_phi_14_12_ladder;
        }
        float _2316;
        if (_2082 > 0.0)
        {
            _2316 = abs((1.0 - _2072) / _2082);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2072 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2316 = frontier_phi_23_19_ladder;
        }
        float _2570;
        if (_2085 > 0.0)
        {
            _2570 = abs((1.0 - _2076) / _2085);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2076 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2570 = frontier_phi_35_30_ladder;
        }
        float _2572 = isnan(_2316) ? _2113 : (isnan(_2113) ? _2316 : min(_2113, _2316));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _2079) + _2068;
        float _2578 = (_2573 * _2082) + _2072;
        float _2579 = (_2573 * _2085) + _2076;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2582 = (-1.0) - _2580;
        float _2584 = _2580 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2579 > _2584) || ((_2579 < _2582) || ((_2578 > _2584) || ((_2578 < _2582) || ((_2577 < _2582) || (_2577 > _2584))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2707 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2579, cbModelParam._m0[9u].z, fma(_2578, cbModelParam._m0[9u].y, _2577 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2579, cbModelParam._m0[10u].z, fma(_2578, cbModelParam._m0[10u].y, _2577 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2579, cbModelParam._m0[11u].z, fma(_2578, cbModelParam._m0[11u].y, _2577 * cbModelParam._m0[11u].x))), _2020);
            frontier_phi_13_35_ladder = _2707.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2707.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2707.x * cbModelParam._m0[1u].y;
        }
        _2101 = frontier_phi_13_35_ladder_2;
        _2103 = frontier_phi_13_35_ladder_1;
        _2105 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1211, _1212, _1213), _2020);
        _2101 = _2089.x * cbModelParam._m0[1u].y;
        _2103 = _2089.y * cbModelParam._m0[1u].y;
        _2105 = _2089.z * cbModelParam._m0[1u].y;
    }
    float _2109 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1041);
    float _2110 = isnan(_2109) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2109 : min(cbModelParam._m0[25u].w, _2109));
    float _2200;
    float _2202;
    float _2204;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2164 = fma(_1275, cbModelParam._m0[21u].z, fma(_1271, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1267)) + cbModelParam._m0[21u].w;
        float _2168 = fma(_1275, cbModelParam._m0[22u].z, fma(_1271, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1267)) + cbModelParam._m0[22u].w;
        float _2172 = fma(_1275, cbModelParam._m0[23u].z, fma(_1271, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1267)) + cbModelParam._m0[23u].w;
        float _2175 = fma(_1213, cbModelParam._m0[21u].z, fma(_1212, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1211));
        float _2178 = fma(_1213, cbModelParam._m0[22u].z, fma(_1212, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1211));
        float _2181 = fma(_1213, cbModelParam._m0[23u].z, fma(_1212, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1211));
        float _2321;
        if (_2175 > 0.0)
        {
            _2321 = abs((1.0 - _2164) / _2175);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2175 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2164 + 1.0) / _2175);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2321 = frontier_phi_25_21_ladder;
        }
        float _2597;
        if (_2178 > 0.0)
        {
            _2597 = abs((1.0 - _2168) / _2178);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2168 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2597 = frontier_phi_37_32_ladder;
        }
        float _2810;
        if (_2181 > 0.0)
        {
            _2810 = abs((1.0 - _2172) / _2181);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2181 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2172 + 1.0) / _2181);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2810 = frontier_phi_46_43_ladder;
        }
        float _2812 = isnan(_2597) ? _2321 : (isnan(_2321) ? _2597 : min(_2321, _2597));
        float _2813 = isnan(_2810) ? _2812 : (isnan(_2812) ? _2810 : min(_2812, _2810));
        float _2817 = (_2813 * _2175) + _2164;
        float _2818 = (_2813 * _2178) + _2168;
        float _2819 = (_2813 * _2181) + _2172;
        float _2820 = _2813 * 9.9999997473787516355514526367188e-05;
        float _2821 = (-1.0) - _2820;
        float _2823 = _2820 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2819 > _2823) || ((_2819 < _2821) || ((_2818 > _2823) || ((_2818 < _2821) || ((_2817 < _2821) || (_2817 > _2823))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2819, cbModelParam._m0[17u].z, fma(_2818, cbModelParam._m0[17u].y, _2817 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2819, cbModelParam._m0[18u].z, fma(_2818, cbModelParam._m0[18u].y, _2817 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2819, cbModelParam._m0[19u].z, fma(_2818, cbModelParam._m0[19u].y, _2817 * cbModelParam._m0[19u].x))), _2110);
            frontier_phi_22_46_ladder = _3018.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3018.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3018.x * cbModelParam._m0[1u].z;
        }
        _2200 = frontier_phi_22_46_ladder_2;
        _2202 = frontier_phi_22_46_ladder_1;
        _2204 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2184 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1211, _1212, _1213), _2110);
        _2200 = _2184.x * cbModelParam._m0[1u].z;
        _2202 = _2184.y * cbModelParam._m0[1u].z;
        _2204 = _2184.z * cbModelParam._m0[1u].z;
    }
    float _2217 = (((_1238 * _1187) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2200 - _2101)) + _2101);
    float _2219 = (((_1238 * _1189) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2202 - _2103)) + _2103);
    float _2221 = (((_1238 * _1190) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2204 - _2105)) + _2105);
    float _2224 = fma(_2221, cbSceneParam._m0[89u].z, fma(_2219, cbSceneParam._m0[89u].y, _2217 * cbSceneParam._m0[89u].x));
    float _2227 = fma(_2221, cbSceneParam._m0[90u].z, fma(_2219, cbSceneParam._m0[90u].y, _2217 * cbSceneParam._m0[90u].x));
    float _2230 = fma(_2221, cbSceneParam._m0[91u].z, fma(_2219, cbSceneParam._m0[91u].y, _2217 * cbSceneParam._m0[91u].x));
    uvec4 _2240 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2242 = _2240.x * 14u;
    uint _2243 = _2242 + 13u;
    float _2250 = _1203 + (-1.0);
    float _2255 = (cbLight._m0[_2243].x * _2250) + 1.0;
    float _2256 = (cbLight._m0[_2243].y * _2250) + 1.0;
    float _2257 = (cbLight._m0[_2243].z * _2250) + 1.0;
    float _2258 = (cbLight._m0[_2243].w * _2250) + 1.0;
    uint _2259 = _2242 + 5u;
    float _2265 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
    uint _2269 = _2242 + 4u;
    float _2275 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
    uint _2279 = _2242 | 1u;
    float _2290 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_1038, _1039, _1040));
    float _2293 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_1038, _1039, _1040));
    float _4479 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _4490 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2298 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2300 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2307 = ((cbLight._m0[_2259].x * _2265) * _2300) + ((cbLight._m0[_2269].x * _2275) * _2298);
    float _2308 = ((_2265 * cbLight._m0[_2259].y) * _2300) + ((_2275 * cbLight._m0[_2269].y) * _2298);
    float _2309 = ((_2265 * cbLight._m0[_2259].z) * _2300) + ((_2275 * cbLight._m0[_2269].z) * _2298);
    uvec4 _2313 = floatBitsToUint(cbLight._m0[_2242 + 12u]);
    bool _2315 = _2313.x == 0u;
    float _2326;
    float _2328;
    float _2330;
    if (_2315)
    {
        _2326 = _2307;
        _2328 = _2308;
        _2330 = _2309;
    }
    else
    {
        uint _2334 = _2242 + 6u;
        float _2350 = (dot(vec3(cbLight._m0[_2242 + 2u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2351 = _2350 * _2350;
        float _4501 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2352 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2353 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2326 = (((cbLight._m0[_2334].x * 0.3183098733425140380859375) * _2352) * _2353) + _2307;
        _2328 = (((cbLight._m0[_2334].y * 0.3183098733425140380859375) * _2352) * _2353) + _2308;
        _2330 = (((cbLight._m0[_2334].z * 0.3183098733425140380859375) * _2352) * _2353) + _2309;
    }
    bool _2333 = _2313.y == 0u;
    float _2371;
    float _2373;
    float _2375;
    if (_2333)
    {
        _2371 = _2326;
        _2373 = _2328;
        _2375 = _2330;
    }
    else
    {
        uint _2541 = _2242 + 7u;
        float _2557 = (dot(vec3(cbLight._m0[_2242 + 3u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2558 = _2557 * _2557;
        float _4517 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2559 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2560 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2371 = (((cbLight._m0[_2541].x * 0.3183098733425140380859375) * _2559) * _2560) + _2326;
        _2373 = (((cbLight._m0[_2541].y * 0.3183098733425140380859375) * _2559) * _2560) + _2328;
        _2375 = (((cbLight._m0[_2541].z * 0.3183098733425140380859375) * _2559) * _2560) + _2330;
    }
    uint _2378 = _2242 + 8u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _1041) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2242].x + _1117;
    float _2394 = cbLight._m0[_2242].y + _1118;
    float _2395 = cbLight._m0[_2242].z + _1119;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2242].xyz));
    float _4533 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _2407 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2408 = dot(vec3(_1038, _1039, _1040), vec3(_2400, _2401, _2402));
    float _4555 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2400, _2401, _2402));
    float _4566 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2392 * _2392;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
    float _2429 = 0.959999978542327880859375 - _1184;
    float _2431 = 0.959999978542327880859375 - _1185;
    float _2432 = 0.959999978542327880859375 - _1186;
    float _2439 = 1.0 - _2392;
    float _2450 = (0.5 / (((_2407 * ((_2406 * _2439) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2439) + _2392) * _2406))) * _2406;
    float _4577 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    uint _2463 = _2242 + 9u;
    float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _1041) * 0.949999988079071044921875);
    float _2475 = _2474 * _2474;
    float _2476 = cbLight._m0[_2279].x + _1117;
    float _2477 = cbLight._m0[_2279].y + _1118;
    float _2478 = cbLight._m0[_2279].z + _1119;
    float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
    float _2483 = _2482 * _2476;
    float _2484 = _2482 * _2477;
    float _2485 = _2482 * _2478;
    float _2486 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2279].xyz));
    float _4588 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2490 = dot(vec3(_1038, _1039, _1040), vec3(_2483, _2484, _2485));
    float _4599 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2483, _2484, _2485));
    float _4610 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2475 * _2475;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
    float _2516 = 1.0 - _2475;
    float _2526 = (0.5 / (((_2407 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2516) + _2475) * _2489))) * _2489;
    float _4621 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    float _2538 = (((((_2509 * _2429) + _1187) * cbLight._m0[_2463].x) * _2528) * _2265) + (((((_2428 * _2429) + _1187) * cbLight._m0[_2378].x) * _2452) * _2275);
    float _2539 = (((((_2509 * _2431) + _1189) * cbLight._m0[_2463].y) * _2528) * _2265) + (((((_2428 * _2431) + _1189) * cbLight._m0[_2378].y) * _2452) * _2275);
    float _2540 = (((((_2509 * _2432) + _1190) * cbLight._m0[_2463].z) * _2528) * _2265) + (((((_2428 * _2432) + _1190) * cbLight._m0[_2378].z) * _2452) * _2275);
    float _2602;
    float _2604;
    float _2606;
    if (_2315)
    {
        _2602 = _2538;
        _2604 = _2539;
        _2606 = _2540;
    }
    else
    {
        uint _2608 = _2242 + 2u;
        uint _2612 = _2242 + 10u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _1041) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _1117;
        float _2629 = cbLight._m0[_2608].y + _1118;
        float _2630 = cbLight._m0[_2608].z + _1119;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2608].xyz));
        float _4632 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2642 = dot(vec3(_1038, _1039, _1040), vec3(_2635, _2636, _2637));
        float _4643 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4654 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
        float _2668 = 1.0 - _2627;
        float _2678 = (0.5 / (((_2407 * ((_2641 * _2668) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2668) + _2627) * _2641))) * _2641;
        float _4665 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2680 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2681 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2602 = (((((_2661 * _2429) + _1187) * cbLight._m0[_2612].x) * _2680) * _2681) + _2538;
        _2604 = (((((_2661 * _2431) + _1189) * cbLight._m0[_2612].y) * _2680) * _2681) + _2539;
        _2606 = (((((_2661 * _2432) + _1190) * cbLight._m0[_2612].z) * _2680) * _2681) + _2540;
    }
    float _2716;
    float _2718;
    float _2720;
    if (_2333)
    {
        _2716 = _2602;
        _2718 = _2604;
        _2720 = _2606;
    }
    else
    {
        uint _2727 = _2242 + 3u;
        uint _2731 = _2242 + 11u;
        float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2727].w)) * _1041) * 0.949999988079071044921875);
        float _2746 = _2745 * _2745;
        float _2747 = cbLight._m0[_2727].x + _1117;
        float _2748 = cbLight._m0[_2727].y + _1118;
        float _2749 = cbLight._m0[_2727].z + _1119;
        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
        float _2754 = _2753 * _2747;
        float _2755 = _2753 * _2748;
        float _2756 = _2753 * _2749;
        float _2757 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2727].xyz));
        float _4681 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2761 = dot(vec3(_1038, _1039, _1040), vec3(_2754, _2755, _2756));
        float _4692 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2765 = dot(vec3(cbLight._m0[_2727].xyz), vec3(_2754, _2755, _2756));
        float _4703 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2769 = _2746 * _2746;
        float _2773 = ((_2764 * _2764) * (_2769 + (-1.0))) + 1.0;
        float _2780 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2787 = 1.0 - _2746;
        float _2797 = (0.5 / (((_2407 * ((_2760 * _2787) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2787) + _2746) * _2760))) * _2760;
        float _4714 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2799 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2769 / ((_2773 * _2773) * 3.141590118408203125));
        float _2800 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2716 = (((((_2780 * _2429) + _1187) * cbLight._m0[_2731].x) * _2799) * _2800) + _2602;
        _2718 = (((((_2780 * _2431) + _1189) * cbLight._m0[_2731].y) * _2799) * _2800) + _2604;
        _2720 = (((((_2780 * _2432) + _1190) * cbLight._m0[_2731].z) * _2799) * _2800) + _2606;
    }
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    if (_2240.y == 0u)
    {
        float _2875 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2876 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2875;
        float _2877 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2875;
        float _2878 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2875;
        uvec4 _2890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2891 = _2890.x;
        uint _2902 = uint((float(_2890.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1126) / _2891))) + floor(float(uint(cbSceneParam._m0[85u].x * _1125) / _2891)));
        float _2912 = (log2(_2878 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2913 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        uint _2916 = uint(isnan(14.0) ? _2913 : (isnan(_2913) ? 14.0 : min(_2913, 14.0)));
        uvec4 _2921 = texelFetch(g_lightClusterGridBuffer, int(((_2916 << 2u) + (_2902 << 6u)) >> 2u));
        uint _2922 = _2921.x;
        uint _2923 = _2890.z;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((((1u << ((_2923 >> 4u) & 15u)) + 4294967295u) & _2922) == 0u) || ((_2923 & 240u) == 0u))
        {
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
        }
        else
        {
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            uint _3174 = 0u;
            uint _3183;
            bool _3184;
            for (;;)
            {
                _3183 = texelFetch(g_lightClassification, int((((_2916 << 5u) + (_2902 << 9u)) + (_3174 << 2u)) >> 2u)).x;
                _3184 = _3183 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3184)
                {
                    frontier_phi_61_pred = _3168;
                    frontier_phi_61_pred_1 = _3173;
                    frontier_phi_61_pred_2 = _3172;
                    frontier_phi_61_pred_3 = _3171;
                    frontier_phi_61_pred_4 = _3170;
                    frontier_phi_61_pred_5 = _3169;
                }
                else
                {
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    uint _3298;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3183;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    for (;;)
                    {
                        uint _3302 = uint(findLSB(_3298)) + (_3174 << 5u);
                        uint _3299 = (_3298 + 4294967295u) & _3298;
                        uint _3304 = _3302 * 48u;
                        vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3324 = (_3302 * 48u) + 4u;
                        vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3324)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 3u)).x));
                        uint _3343 = (_3302 * 48u) + 8u;
                        vec3 _3354 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x));
                        float _3358 = _3318.x - _2876;
                        float _3359 = _3318.y - _2877;
                        float _3360 = _3318.z - _2878;
                        float _3361 = dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360));
                        float _3364 = inversesqrt(_3361);
                        float _3365 = _3364 * _3358;
                        float _3366 = _3364 * _3359;
                        float _3367 = _3364 * _3360;
                        float _3368 = dot(vec3(_1144, _1147, _1150), vec3(_3365, _3366, _3367));
                        float _3373 = 1.0 - (_3361 * _3318.w);
                        float _4740 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3374 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3375 = sqrt(_3361) * _3337.w;
                        float _3378 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3368) + _3379;
                        float _3385 = _3375 * _3375;
                        float _3389 = ((isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0))) * _3374) / ((_3385 * 0.699999988079071044921875) + 1.0);
                        float _3393 = (-0.0) - _2876;
                        float _3394 = (-0.0) - _2877;
                        float _3395 = (-0.0) - _2878;
                        float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                        float _3400 = _3399 * _3393;
                        float _3401 = _3399 * _3394;
                        float _3402 = _3399 * _3395;
                        float _3410 = exp2(log2(1.0 / ((_3385 * 3.5) + 5.0)) * 0.25);
                        float _3411 = 1.0 - _1219;
                        float _3418 = sqrt(1.0 - ((1.0 - (_3411 * _3411)) * (1.0 - (_3410 * _3410))));
                        float _3419 = _3418 * _3418;
                        float _3420 = _3419 * _3419;
                        float _3421 = _3400 + _3365;
                        float _3422 = _3401 + _3366;
                        float _3423 = _3402 + _3367;
                        float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                        float _3431 = dot(vec3(_1144, _1147, _1150), vec3(_3400, _3401, _3402));
                        float _4756 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3434 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3435 = dot(vec3(_1144, _1147, _1150), vec3(_3427 * _3421, _3427 * _3422, _3427 * _3423));
                        float _4767 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3438 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3442 = ((_3438 * _3438) * (_3420 + (-1.0))) + 1.0;
                        float _3443 = _3378 * _3419;
                        float _3444 = _3443 * _3443;
                        float _3447 = ((1.0 - _3444) * _3368) + _3444;
                        float _4778 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3448 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3449 = 1.0 - _3419;
                        float _3459 = (0.5 / (((_3448 * ((_3434 * _3449) + _3419)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3419) * _3434))) * _3448;
                        float _4789 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3470 = (((_3420 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3442 * _3442) * ((_3385 * 2.1991131305694580078125) + 3.141590118408203125))) * _3374;
                        _3227 = (_3389 * _3337.x) + _3295;
                        _3228 = (_3389 * _3337.y) + _3296;
                        _3229 = (_3389 * _3337.z) + _3297;
                        _3224 = (_3470 * _3354.x) + _3292;
                        _3225 = (_3470 * _3354.y) + _3293;
                        _3226 = (_3470 * _3354.z) + _3294;
                        if (_3299 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3299;
                        }
                    }
                    frontier_phi_61_pred = _3224;
                    frontier_phi_61_pred_1 = _3229;
                    frontier_phi_61_pred_2 = _3228;
                    frontier_phi_61_pred_3 = _3227;
                    frontier_phi_61_pred_4 = _3226;
                    frontier_phi_61_pred_5 = _3225;
                }
                _3024 = frontier_phi_61_pred;
                _3034 = frontier_phi_61_pred_1;
                _3032 = frontier_phi_61_pred_2;
                _3030 = frontier_phi_61_pred_3;
                _3028 = frontier_phi_61_pred_4;
                _3026 = frontier_phi_61_pred_5;
                uint _3175 = _3174 + 1u;
                if (_3175 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3168 = _3024;
                    _3169 = _3026;
                    _3170 = _3028;
                    _3171 = _3030;
                    _3172 = _3032;
                    _3173 = _3034;
                    _3174 = _3175;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
        }
        uvec4 _3037 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3038 = _3037.z;
        uint _3040 = (_3038 >> 8u) & 15u;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        if (((4294967295u << _3040) & _2922) == 0u)
        {
            _3136 = _3023;
            _3138 = _3025;
            _3140 = _3027;
            _3142 = _3029;
            _3144 = _3031;
            _3146 = _3033;
        }
        else
        {
            float _3161 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
            float _3162 = _3161 * _2876;
            float _3163 = _3161 * _2877;
            float _3164 = _3161 * _2878;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3040 < ((_3038 >> 12u) & 15u))
            {
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3275 = _3023;
                float _3276 = _3025;
                float _3277 = _3027;
                float _3278 = _3029;
                float _3279 = _3031;
                float _3280 = _3033;
                uint _3281 = _3040;
                uint _3290;
                bool _3291;
                for (;;)
                {
                    _3290 = texelFetch(g_lightClassification, int((((_2916 << 5u) + (_2902 << 9u)) + (_3281 << 2u)) >> 2u)).x;
                    _3291 = _3290 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3291)
                    {
                        frontier_phi_67_pred = _3278;
                        frontier_phi_67_pred_1 = _3279;
                        frontier_phi_67_pred_2 = _3280;
                        frontier_phi_67_pred_3 = _3277;
                        frontier_phi_67_pred_4 = _3276;
                        frontier_phi_67_pred_5 = _3275;
                    }
                    else
                    {
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3488 = _3275;
                        float _3489 = _3276;
                        float _3490 = _3277;
                        float _3491 = _3278;
                        float _3492 = _3279;
                        float _3493 = _3280;
                        uint _3494 = _3290;
                        uint _3495;
                        vec4 _3520;
                        float _3521;
                        vec4 _3536;
                        vec3 _3548;
                        vec4 _3563;
                        vec4 _3578;
                        float _3624;
                        bool _3625;
                        for (;;)
                        {
                            uint _3505 = ((_3281 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3494));
                            _3495 = (_3494 + 4294967295u) & _3494;
                            uint _3507 = _3505 * 40u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3521 = _3520.w;
                            uint _3523 = (_3505 * 40u) + 4u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3505 * 40u) + 8u;
                            _3548 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x));
                            uint _3550 = (_3505 * 40u) + 16u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3565 = (_3505 * 40u) + 20u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3580 = (_3505 * 40u) + 24u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3599 = (_3505 * 40u) + 28u;
                            vec4 _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3624 = fma(_2878, _3612.z, fma(_2877, _3612.y, _3612.x * _2876)) + _3612.w;
                            _3625 = !((fma(_2878, _3593.z, fma(_2877, _3593.y, _3593.x * _2876)) + _3593.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3625)
                            {
                                float _3652 = _3520.x - _2876;
                                float _3653 = _3520.y - _2877;
                                float _3654 = _3520.z - _2878;
                                float _3655 = dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654));
                                float _3658 = inversesqrt(_3655);
                                float _3659 = _3658 * _3652;
                                float _3660 = _3658 * _3653;
                                float _3661 = _3658 * _3654;
                                float _3665 = 1.0 - (_3655 / (_3521 * _3521));
                                float _4800 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3670 = sqrt(_3655) * _3536.w;
                                float _3672 = 1.39999997615814208984375 / (_3670 + 1.39999997615814208984375);
                                float _3673 = _3672 * _3672;
                                float _3676 = ((1.0 - _3673) * dot(vec3(_3659, _3660, _3661), vec3(_1144, _1147, _1150))) + _3673;
                                float _3679 = _3670 * _3670;
                                float _3683 = (fma(_2878, _3563.z, fma(_2877, _3563.y, _3563.x * _2876)) + _3563.w) / _3624;
                                float _3684 = (fma(_2878, _3578.z, fma(_2877, _3578.y, _3578.x * _2876)) + _3578.w) / _3624;
                                float _3688 = 1.0 - dot(vec2(_3683, _3684), vec2(_3683, _3684));
                                float _4816 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3690 = _3689 * (((isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0))) * _3666) / ((_3679 * 0.699999988079071044921875) + 1.0));
                                float _3702 = exp2(log2(1.0 / ((_3679 * 3.5) + 5.0)) * 0.25);
                                float _3703 = 1.0 - _1219;
                                float _3710 = sqrt(1.0 - ((1.0 - (_3703 * _3703)) * (1.0 - (_3702 * _3702))));
                                float _3711 = _3710 * _3710;
                                float _3712 = _3711 * _3711;
                                float _3713 = _3659 - _3162;
                                float _3714 = _3660 - _3163;
                                float _3715 = _3661 - _3164;
                                float _3719 = inversesqrt(dot(vec3(_3713, _3714, _3715), vec3(_3713, _3714, _3715)));
                                float _3723 = dot(vec3(_1144, _1147, _1150), vec3((-0.0) - _3162, (-0.0) - _3163, (-0.0) - _3164));
                                float _4827 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3727 = dot(vec3(_1144, _1147, _1150), vec3(_3719 * _3713, _3719 * _3714, _3719 * _3715));
                                float _4838 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3730 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3734 = ((_3730 * _3730) * (_3712 + (-1.0))) + 1.0;
                                float _3735 = _3672 * _3711;
                                float _3736 = _3735 * _3735;
                                float _3742 = ((1.0 - _3736) * dot(vec3(_1144, _1147, _1150), vec3(_3659, _3660, _3661))) + _3736;
                                float _4849 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3744 = 1.0 - _3711;
                                float _3754 = (0.5 / (((_3743 * ((_3726 * _3744) + _3711)) + 9.9999999392252902907785028219223e-09) + (((_3743 * _3744) + _3711) * _3726))) * _3743;
                                float _4860 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3764 = (_3689 * _3666) * (((_3712 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3734 * _3734) * ((_3679 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3764 * _3548.x;
                                frontier_phi_73_pred_1 = _3764 * _3548.y;
                                frontier_phi_73_pred_2 = _3690 * _3536.z;
                                frontier_phi_73_pred_3 = _3690 * _3536.y;
                                frontier_phi_73_pred_4 = _3690 * _3536.x;
                                frontier_phi_73_pred_5 = _3764 * _3548.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3768 = frontier_phi_73_pred;
                            _3769 = frontier_phi_73_pred_1;
                            _3773 = frontier_phi_73_pred_2;
                            _3772 = frontier_phi_73_pred_3;
                            _3771 = frontier_phi_73_pred_4;
                            _3770 = frontier_phi_73_pred_5;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            if (_3495 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3495;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3478;
                        frontier_phi_67_pred_1 = _3479;
                        frontier_phi_67_pred_2 = _3480;
                        frontier_phi_67_pred_3 = _3477;
                        frontier_phi_67_pred_4 = _3476;
                        frontier_phi_67_pred_5 = _3475;
                    }
                    _3143 = frontier_phi_67_pred;
                    _3145 = frontier_phi_67_pred_1;
                    _3147 = frontier_phi_67_pred_2;
                    _3141 = frontier_phi_67_pred_3;
                    _3139 = frontier_phi_67_pred_4;
                    _3137 = frontier_phi_67_pred_5;
                    uint _3282 = _3281 + 1u;
                    if (_3282 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3275 = _3137;
                        _3276 = _3139;
                        _3277 = _3141;
                        _3278 = _3143;
                        _3279 = _3145;
                        _3280 = _3147;
                        _3281 = _3282;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3145;
                frontier_phi_55_56_ladder_1 = _3147;
                frontier_phi_55_56_ladder_2 = _3143;
                frontier_phi_55_56_ladder_3 = _3141;
                frontier_phi_55_56_ladder_4 = _3139;
                frontier_phi_55_56_ladder_5 = _3137;
            }
            else
            {
                frontier_phi_55_56_ladder = _3031;
                frontier_phi_55_56_ladder_1 = _3033;
                frontier_phi_55_56_ladder_2 = _3029;
                frontier_phi_55_56_ladder_3 = _3027;
                frontier_phi_55_56_ladder_4 = _3025;
                frontier_phi_55_56_ladder_5 = _3023;
            }
            _3136 = frontier_phi_55_56_ladder_5;
            _3138 = frontier_phi_55_56_ladder_4;
            _3140 = frontier_phi_55_56_ladder_3;
            _3142 = frontier_phi_55_56_ladder_2;
            _3144 = frontier_phi_55_56_ladder;
            _3146 = frontier_phi_55_56_ladder_1;
        }
        float _3151 = isnan(1.0) ? _1203 : (isnan(_1203) ? 1.0 : min(_1203, 1.0));
        _2935 = (_3151 * _3142) + _2371;
        _2937 = (_3151 * _3144) + _2373;
        _2939 = (_3151 * _3146) + _2375;
        _2941 = ((_3136 * _1187) * _3151) + _2716;
        _2943 = ((_3138 * _1189) * _3151) + _2718;
        _2945 = ((_3140 * _1190) * _3151) + _2720;
    }
    else
    {
        _2935 = _2371;
        _2937 = _2373;
        _2939 = _2375;
        _2941 = _2716;
        _2943 = _2718;
        _2945 = _2720;
    }
    float _4876 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _4887 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _4898 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    uint _2965 = _293 + 6u;
    float _2973 = _1125 / cbSceneParam._m0[86u].x;
    float _2974 = _1126 / cbSceneParam._m0[86u].y;
    vec4 _2988 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2973, _2974, (log2((isnan(cbSceneParam._m0[77u].w) ? _1060 : (isnan(_1060) ? cbSceneParam._m0[77u].w : min(_1060, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2990 = _2988.x;
    float _2991 = _2988.y;
    float _2992 = _2988.z;
    float _2993 = _2988.w;
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    if (_1060 > cbSceneParam._m0[78u].w)
    {
        float _3048 = isnan(_1060) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1060 : min(cbSceneParam._m0[80u].w, _1060));
        float _3049 = _3048 / _1060;
        float _3060 = _3049 * _1110;
        float _3061 = _1111 * _3049;
        float _3062 = (-0.0) - _3061;
        float _3064 = _3049 * _1112;
        float _3066 = (cbSceneParam._m0[77u].w * _3062) / _3048;
        float _3067 = _3066 + cbSceneParam._m0[79u].w;
        float _3068 = cbSceneParam._m0[79u].w - _3061;
        float _3074 = sqrt(((_3060 * _3060) + (_3061 * _3061)) + (_3064 * _3064));
        float _3077 = (1.0 - (cbSceneParam._m0[77u].w / _3048)) * _3074;
        float _3082 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3084 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3237;
        if (abs((_3062 - _3066) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3237 = ((((_3067 > 0.0) ? exp2(_3082 * _3067) : (2.0 - exp2(_3084 * _3067))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3077;
        }
        else
        {
            float _3197 = 1.0 / cbSceneParam._m0[80u].x;
            float _3198 = isnan(_3068) ? _3067 : (isnan(_3067) ? _3068 : max(_3067, _3068));
            float _3199 = isnan(_3068) ? _3067 : (isnan(_3067) ? _3068 : min(_3067, _3068));
            float _3208 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : min(_3198, 0.0));
            float _3209 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : min(_3199, 0.0));
            _3237 = ((abs(_3074 / _3062) * cbSceneParam._m0[80u].y) * ((((_3208 - _3209) * 2.0) - ((exp2(_3082 * (isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0)))) - exp2(_3082 * (isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0))))) * _3197)) - ((exp2(_3084 * _3208) - exp2(_3084 * _3209)) * _3197))) + (_3077 * cbSceneParam._m0[80u].z);
        }
        vec4 _3239 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2973, _2974, 1.0), 0.0);
        float _3248 = exp2((_3237 * (-1.44269502162933349609375)) * (1.0 - _3239.w));
        float _3249 = log2(_3248);
        float _3265 = log2(_2993);
        _3086 = (exp2(_3265 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3249 * cbSceneParam._m0[78u].x)) * _3239.x) / cbSceneParam._m0[78u].x)) + _2990;
        _3088 = (exp2(_3265 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3249 * cbSceneParam._m0[78u].y)) * _3239.y) / cbSceneParam._m0[78u].y)) + _2991;
        _3090 = (exp2(_3265 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3249 * cbSceneParam._m0[78u].z)) * _3239.z) / cbSceneParam._m0[78u].z)) + _2992;
        _3092 = _3248 * _2993;
    }
    else
    {
        _3086 = _2990;
        _3088 = _2991;
        _3090 = _2992;
        _3092 = _2993;
    }
    float _3104 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3105 = _3104 == 3.0;
    float _3106 = log2(_3092);
    float _3113 = exp2(_3106 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2935 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1203))) + ((_2941 + ((isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0))) * _2009)) * cbPerFrame._m0[3u].x));
    float _3114 = exp2(_3106 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2937 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1203))) + ((_2943 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2009)) * cbPerFrame._m0[3u].x));
    float _3115 = exp2(_3106 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2939 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1203))) + ((_2945 + ((isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0))) * _2009)) * cbPerFrame._m0[3u].x));
    float _3124 = (_3104 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3124 * (_3105 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3086)));
    SV_Target.y = _3124 * (_3105 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3088)));
    SV_Target.z = _3124 * (_3105 ? _3115 : (_3115 + (cbSceneParam._m0[72u].w * _3090)));
    SV_Target.w = cbInstanceData._m0[_2965].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2965].w;
}


