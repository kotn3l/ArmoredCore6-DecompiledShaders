#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1797;
float _4197;
float _4198;
float _4199;
float _4200;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _258 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _259 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _260 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _266 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _267 = _266 * _258;
    float _268 = _266 * _259;
    float _269 = _266 * _260;
    float _273 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = _273 * NORMAL.x;
    float _275 = _273 * NORMAL.y;
    float _276 = _273 * NORMAL.z;
    float _280 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _281 = _280 * TANGENT.x;
    float _282 = _280 * TANGENT.y;
    float _283 = _280 * TANGENT.z;
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _295 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4209 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4220 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4231 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    uint _305 = uint(roundEven(NORMAL.w)) * 13u;
    uint _310 = _305 + 1u;
    uint _314 = _305 + 2u;
    float _323 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _324 = _323 * TEXCOORD.z;
    float _325 = _323 * TEXCOORD.w;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _324) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _325) + cbTextureTilingScale._m0[13u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _392 = _387.x * cbMtdParam._m0[11u].x;
    float _393 = _387.y * cbMtdParam._m0[11u].y;
    float _394 = _387.z * cbMtdParam._m0[11u].z;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _324) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _325) + cbTextureTilingScale._m0[5u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _481 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _498 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _432.x) * 2.0) - ((((_469 - _481) * cbMtdParam._m0[23u].w) + _481) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4242 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _506 = (_499 * ((_413.x * cbMtdParam._m0[12u].x) - _392)) + _392;
    float _507 = (_499 * ((_413.y * cbMtdParam._m0[12u].y) - _393)) + _393;
    float _508 = (_499 * ((_413.z * cbMtdParam._m0[12u].z) - _394)) + _394;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _324) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _325) + cbTextureTilingScale._m0[3u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _547 = _545.x;
    float _557 = dot(vec4(_547, _545.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _571 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _432.y) * 2.0) - ((((_547 - _557) * cbMtdParam._m0[23u].w) + _557) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4253 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _579 = (_572 * ((_525.x * cbMtdParam._m0[13u].x) - _506)) + _506;
    float _580 = (_572 * ((_525.y * cbMtdParam._m0[13u].y) - _507)) + _507;
    float _581 = (_572 * ((_525.z * cbMtdParam._m0[13u].z) - _508)) + _508;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _324) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _325) + cbTextureTilingScale._m0[24u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _619 = _617.x;
    float _629 = dot(vec4(_619, _617.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _641 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _432.z) * 2.0) - ((((_619 - _629) * cbMtdParam._m0[23u].w) + _629) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4264 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _652 = (_361.x * cbMtdParam._m0[9u].x) * ((_642 * ((_600.x * cbMtdParam._m0[14u].x) - _579)) + _579);
    float _653 = (_361.y * cbMtdParam._m0[9u].y) * ((_642 * ((_600.y * cbMtdParam._m0[14u].y) - _580)) + _580);
    float _654 = (_361.z * cbMtdParam._m0[9u].z) * ((_642 * ((_600.z * cbMtdParam._m0[14u].z) - _581)) + _581);
    float _658 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _338.x) * _652;
    float _661 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _338.y) * _653;
    float _664 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _338.z) * _654;
    float _672 = (((_652 - _658) * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) + _658) * 4.55000019073486328125;
    float _674 = (((_653 - _661) * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) + _661) * 4.55000019073486328125;
    float _676 = (((_654 - _664) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) + _664) * 4.55000019073486328125;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _324) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _325) + cbTextureTilingScale._m0[14u].w));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _324) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _325) + cbTextureTilingScale._m0[20u].w));
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _324) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _325) + cbTextureTilingScale._m0[4u].w));
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _757 = _755.x;
    float _758 = _755.y;
    float _759 = _755.z;
    float _766 = ((_738.x - _757) * _499) + _757;
    float _767 = ((_738.y - _758) * _499) + _758;
    float _768 = ((_738.z - _759) * _499) + _759;
    vec4 _780 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _324) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _325) + cbTextureTilingScale._m0[2u].w));
    float _791 = ((_780.x - _766) * _572) + _766;
    float _792 = ((_780.y - _767) * _572) + _767;
    float _793 = ((_780.z - _768) * _572) + _768;
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _324) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _325) + cbTextureTilingScale._m0[23u].w));
    float _818 = ((_805.z - _793) * _642) + _793;
    float _821 = ((((_805.x - _791) * _642) + _791) * 2.0) + (-1.0);
    float _822 = ((((_805.y - _792) * _642) + _792) * 2.0) + (-1.0);
    float _823 = dot(vec2(_821, _822), vec2(_821, _822));
    float _4275 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _828 = sqrt(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))));
    vec4 _846 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _858 = (_821 + ((((_713.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_846.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _859 = (_822 + ((((_713.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_846.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _862 = fma(_828, _274, fma(_859, _281, _858 * _267));
    float _865 = fma(_828, _275, fma(_859, _282, _858 * _268));
    float _868 = fma(_828, _276, fma(_859, _283, _858 * _269));
    float _872 = inversesqrt(dot(vec3(_862, _865, _868), vec3(_862, _865, _868)));
    vec4 _899 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _324) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _325) + cbTextureTilingScale._m0[11u].w));
    float _901 = _899.x;
    float _902 = 1.0 - _901;
    float _910 = (cbMtdParam._m0[19u].x + dot(vec4(_872 * _862, _872 * _865, _872 * _868, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_901 - _902) * cbMtdParam._m0[24u].z) + _902) * cbMtdParam._m0[21u].z);
    float _4286 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _911 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _913 = (-0.0) - cbMtdParam._m0[24u].x;
    float _915 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _915 : (isnan(_915) ? 1.0 : min(_915, 1.0));
    float _923 = _911 - ((_911 * TEXCOORD_8.x) * _916);
    float _924 = _911 - ((_911 * TEXCOORD_8.y) * _916);
    float _925 = _911 - ((_911 * TEXCOORD_8.z) * _916);
    float _932 = (_923 * ((_694.x * cbMtdParam._m0[18u].x) - _672)) + _672;
    float _933 = (_924 * ((_694.y * cbMtdParam._m0[18u].y) - _674)) + _674;
    float _934 = (_925 * ((_694.z * cbMtdParam._m0[18u].z) - _676)) + _676;
    float _949 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _950 = _949 * TEXCOORD.z;
    float _951 = _949 * TEXCOORD.w;
    vec4 _963 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _950) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _951) + cbTextureTilingScale._m0[19u].w));
    float _965 = _963.x;
    float _966 = 1.0 - _965;
    float _992 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_965 - _966) * cbMtdParam._m0[24u].w) + _966) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4307 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _993 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _1001 = ((((cbMtdParam._m0[10u].x - _932) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _993) + _932;
    float _1002 = ((((cbMtdParam._m0[10u].y - _933) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _993) + _933;
    float _1003 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _934)) * _993) + _934;
    vec4 _1029 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1031 = _1029.x;
    float _1048 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _324) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _325) + cbTextureTilingScale._m0[9u].w)).x - _1031) * _499) + _1031;
    float _1065 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _324) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _325) + cbTextureTilingScale._m0[21u].w)).x - _1048) * _572) + _1048;
    float _1082 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _324) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _325) + cbTextureTilingScale._m0[10u].w)).x - _1065) * _642) + _1065;
    float _1088 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1082) * cbMtdParam._m0[19u].z) + _1082;
    float _1090 = _1088 - (_1088 * _923);
    float _1092 = _1090 - (_1090 * _993);
    float _1099 = (((_713.z - _818) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _818;
    float _1103 = ((_846.z - _1099) * cbMtdParam._m0[19u].w) + _1099;
    vec4 _1119 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _324) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _325) + cbTextureTilingScale._m0[15u].w));
    float _1126 = (_1119.x * 2.0) + (-1.0);
    float _1127 = (_1119.y * 2.0) + (-1.0);
    float _1128 = dot(vec2(_1126, _1127), vec2(_1126, _1127));
    float _4318 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1136 = ((_1119.z - _1103) * _923) + _1103;
    float _1139 = ((cbMtdParam._m0[23u].x - _1136) * _993) + _1136;
    vec4 _1162 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _950) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _951) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1168 = (_1162.x * 2.0) + (-1.0);
    float _1169 = (_1162.y * 2.0) + (-1.0);
    float _1170 = dot(vec2(_1168, _1169), vec2(_1168, _1169));
    float _4329 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1185 = ((sqrt(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) - _828) * _925) + _828;
    float _1188 = (((_1126 - _858) * _923) + _858) + (cbMtdParam._m0[21u].x * _858);
    float _1189 = (((_1127 - _859) * _924) + _859) + (cbMtdParam._m0[21u].x * _859);
    float _1200 = (((_1168 - _1188) + (_1188 * cbMtdParam._m0[22u].z)) * _993) + _1188;
    float _1201 = (((_1169 - _1189) + (_1189 * cbMtdParam._m0[22u].z)) * _993) + _1189;
    float _1202 = (_993 * (sqrt(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) - _1185)) + _1185;
    float _1204 = cbMtdParam._m0[22u].x + _846.w;
    float _1207 = fma(_1202, _274, fma(_1201, _281, _1200 * _267));
    float _1210 = fma(_1202, _275, fma(_1201, _282, _1200 * _268));
    float _1213 = fma(_1202, _276, fma(_1201, _283, _1200 * _269));
    float _1217 = inversesqrt(dot(vec3(_1207, _1210, _1213), vec3(_1207, _1210, _1213)));
    float _1218 = _1217 * _1207;
    float _1219 = _1217 * _1210;
    float _1220 = _1217 * _1213;
    float _4340 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1221 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _4351 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _4362 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4373 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _4384 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4395 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1226 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _1240 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1280 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1290 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1280);
    float _1291 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1280);
    float _1292 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1280);
    float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
    float _1297 = _1290 * _1296;
    float _1298 = _1291 * _1296;
    float _1299 = _1292 * _1296;
    vec4 _1304 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1306 = _1304.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1478 = sqrt(((_1290 * _1290) + (_1291 * _1291)) + (_1292 * _1292));
        float _1484 = (cbMatDynParam._m0[5u].x * _1478) + cbMatDynParam._m0[5u].y;
        float _4406 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1489 = (cbMatDynParam._m0[5u].z * _1478) + cbMatDynParam._m0[5u].w;
        float _4417 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) - _1485)) + _1485) < ((_1306 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1317 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1318 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1336 = fma(_1220, cbSceneParam._m0[5u].z, fma(_1219, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1218));
    float _1339 = fma(_1220, cbSceneParam._m0[6u].z, fma(_1219, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1218));
    float _1342 = fma(_1220, cbSceneParam._m0[7u].z, fma(_1219, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1218));
    uint _1355 = _305 + 9u;
    uint _1356 = _1355 + uint(cbMatDynParam._m0[0u].w);
    float _1362 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * cbInstanceData._m0[_1356].x;
    float _1363 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * cbInstanceData._m0[_1356].y;
    float _1364 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * cbInstanceData._m0[_1356].z;
    float _4428 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
    float _1365 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _4439 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
    float _1366 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _4450 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
    float _1367 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _1368 = 1.0 - _1226;
    float _1369 = _1365 * _1368;
    float _1370 = _1366 * _1368;
    float _1371 = _1367 * _1368;
    float _1376 = (_1365 + (-0.039999999105930328369140625)) * _1226;
    float _1377 = (_1366 + (-0.039999999105930328369140625)) * _1226;
    float _1378 = (_1367 + (-0.039999999105930328369140625)) * _1226;
    float _1379 = _1376 + 0.039999999105930328369140625;
    float _1381 = _1377 + 0.039999999105930328369140625;
    float _1382 = _1378 + 0.039999999105930328369140625;
    vec4 _1391 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1317, cbSceneParam._m0[86u].y * _1318));
    float _1395 = ((isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * TEXCOORD_5.w) * _1391.x;
    float _1396 = dot(vec3(_1218, _1219, _1220), vec3(_1297, _1298, _1299));
    float _1399 = _1396 * 2.0;
    float _1403 = (_1399 * _1218) - _1297;
    float _1404 = (_1399 * _1219) - _1298;
    float _1405 = (_1399 * _1220) - _1299;
    float _1409 = abs(dot(vec3(_1297, _1298, _1299), vec3(_1218, _1219, _1220)));
    float _4461 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    float _1411 = sqrt(_1221);
    float _1424 = exp2((_1411 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1411 * 3.0));
    float _1430 = (1.0 - _1424) * ((_1411 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1431 = _1424 * _1411;
    float _1459 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1463 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1467 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1796;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1521 = fma(_1467, cbModelParam._m0[26u].z, fma(_1463, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1459));
        float _1525 = fma(_1467, cbModelParam._m0[27u].z, fma(_1463, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1459));
        float _1529 = fma(_1467, cbModelParam._m0[28u].z, fma(_1463, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1459));
        float _1554 = _1459 + _1218;
        float _1555 = _1463 + _1219;
        float _1556 = _1467 + _1220;
        float _1566 = fma(_1556, cbModelParam._m0[26u].z, fma(_1555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1554)) - _1521;
        float _1567 = fma(_1556, cbModelParam._m0[27u].z, fma(_1555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1554)) - _1525;
        float _1568 = fma(_1556, cbModelParam._m0[28u].z, fma(_1555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1554)) - _1529;
        float _1572 = inversesqrt(dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568)));
        float _1585 = ((_1572 * _1566) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1521 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1572 * _1567) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1525 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1572 * _1568) / cbModelParam._m0[34u].z) + ((((((_1529 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1585, _1586, _1587), 0.0);
        float _1624 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1590.x + (-0.5));
        float _1626 = _1624 * (_1590.y + (-0.5));
        float _1627 = _1624 * (_1590.z + (-0.5));
        float _1634 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1597.x + (-0.5));
        float _1636 = _1634 * (_1597.y + (-0.5));
        float _1637 = _1634 * (_1597.z + (-0.5));
        float _1644 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1604.x + (-0.5));
        float _1646 = _1644 * (_1604.y + (-0.5));
        float _1647 = _1644 * (_1604.z + (-0.5));
        float _1654 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1611.x + (-0.5));
        float _1656 = _1654 * (_1611.y + (-0.5));
        float _1657 = _1654 * (_1611.z + (-0.5));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = _1625 * 0.5;
        float _1662 = _1635 * 0.5;
        float _1663 = _1645 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1678 = (dot(vec3(_1218, _1219, _1220), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4487 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1688 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4498 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4509 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_1690 + 1.0))) + _1695) * _1658;
        float _1705 = _1626 * 0.5;
        float _1706 = _1636 * 0.5;
        float _1707 = _1646 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_1218, _1219, _1220), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4520 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4531 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4542 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_1732 + 1.0))) + _1737) * _1659;
        float _1747 = _1627 * 0.5;
        float _1748 = _1637 * 0.5;
        float _1749 = _1647 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_1218, _1219, _1220), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4553 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4564 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4575 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_1774 + 1.0))) + _1779) * _1660;
        _1796 = _1627;
        _1798 = _1626;
        _1799 = _1625;
        _1800 = _1637;
        _1801 = _1636;
        _1802 = _1635;
        _1803 = _1647;
        _1804 = _1646;
        _1805 = _1645;
        _1806 = _1660;
        _1807 = _1659;
        _1808 = _1658;
        _1809 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
        _1810 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
        _1811 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
    }
    else
    {
        _1796 = _1797;
        _1798 = _1797;
        _1799 = _1797;
        _1800 = _1797;
        _1801 = _1797;
        _1802 = _1797;
        _1803 = _1797;
        _1804 = _1797;
        _1805 = _1797;
        _1806 = _1797;
        _1807 = _1797;
        _1808 = _1797;
        _1809 = 0.0;
        _1810 = 0.0;
        _1811 = 0.0;
    }
    float _2106;
    float _2107;
    float _2108;
    float _2109;
    float _2110;
    float _2111;
    float _2112;
    float _2113;
    float _2114;
    float _2115;
    float _2116;
    float _2117;
    float _2118;
    float _2119;
    float _2120;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1837 = fma(_1467, cbModelParam._m0[30u].z, fma(_1463, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1459));
        float _1841 = fma(_1467, cbModelParam._m0[31u].z, fma(_1463, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1459));
        float _1845 = fma(_1467, cbModelParam._m0[32u].z, fma(_1463, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1459));
        float _1868 = _1459 + _1218;
        float _1869 = _1463 + _1219;
        float _1870 = _1467 + _1220;
        float _1880 = fma(_1870, cbModelParam._m0[30u].z, fma(_1869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1868)) - _1837;
        float _1881 = fma(_1870, cbModelParam._m0[31u].z, fma(_1869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1868)) - _1841;
        float _1882 = fma(_1870, cbModelParam._m0[32u].z, fma(_1869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1868)) - _1845;
        float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
        float _1899 = ((_1886 * _1880) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1837 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1900 = ((_1886 * _1881) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1841 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1901 = ((_1886 * _1882) / cbModelParam._m0[35u].z) + ((((((_1845 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1903 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1899, _1900, _1901), 0.0);
        vec4 _1910 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1899, _1900, _1901), 0.0);
        vec4 _1917 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1899, _1900, _1901), 0.0);
        vec4 _1924 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1899, _1900, _1901), 0.0);
        float _1936 = exp2((_1903.w + (-0.5)) * 20.0) * 2.0;
        float _1937 = _1936 * (_1903.x + (-0.5));
        float _1938 = _1936 * (_1903.y + (-0.5));
        float _1939 = _1936 * (_1903.z + (-0.5));
        float _1946 = exp2((_1910.w + (-0.5)) * 20.0) * 2.0;
        float _1947 = _1946 * (_1910.x + (-0.5));
        float _1948 = _1946 * (_1910.y + (-0.5));
        float _1949 = _1946 * (_1910.z + (-0.5));
        float _1956 = exp2((_1917.w + (-0.5)) * 20.0) * 2.0;
        float _1957 = _1956 * (_1917.x + (-0.5));
        float _1958 = _1956 * (_1917.y + (-0.5));
        float _1959 = _1956 * (_1917.z + (-0.5));
        float _1966 = exp2((_1924.w + (-0.5)) * 20.0) * 2.0;
        float _1967 = _1966 * (_1924.x + (-0.5));
        float _1968 = _1966 * (_1924.y + (-0.5));
        float _1969 = _1966 * (_1924.z + (-0.5));
        float _1970 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1971 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1972 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1973 = _1937 * 0.5;
        float _1974 = _1947 * 0.5;
        float _1975 = _1957 * 0.5;
        float _1976 = dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975));
        float _1981 = (_1976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1976);
        float _1989 = (dot(vec3(_1218, _1219, _1220), vec3(_1981 * _1973, _1981 * _1974, _1981 * _1975)) + 1.0) * 0.5;
        float _4616 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1998 = sqrt(((_1974 * _1974) + (_1973 * _1973)) + (_1975 * _1975)) / (_1970 + 9.9999997473787516355514526367188e-06);
        float _4627 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2000 = _1999 * 2.0;
        float _2004 = (1.0 - _1999) / (_1999 + 1.0);
        float _4638 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2005 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2014 = ((((1.0 - _2005) * (_2000 + 2.0)) * exp2(log2(isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2000 + 1.0))) + _2005) * _1970;
        float _2015 = _1938 * 0.5;
        float _2016 = _1948 * 0.5;
        float _2017 = _1958 * 0.5;
        float _2018 = dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017));
        float _2023 = (_2018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2018);
        float _2031 = (dot(vec3(_1218, _1219, _1220), vec3(_2023 * _2015, _2023 * _2016, _2023 * _2017)) + 1.0) * 0.5;
        float _4649 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2040 = sqrt(((_2016 * _2016) + (_2015 * _2015)) + (_2017 * _2017)) / (_1971 + 9.9999997473787516355514526367188e-06);
        float _4660 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2042 = _2041 * 2.0;
        float _2046 = (1.0 - _2041) / (_2041 + 1.0);
        float _4671 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2047 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2056 = ((((1.0 - _2047) * (_2042 + 2.0)) * exp2(log2(isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2042 + 1.0))) + _2047) * _1971;
        float _2057 = _1939 * 0.5;
        float _2058 = _1949 * 0.5;
        float _2059 = _1959 * 0.5;
        float _2060 = dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059));
        float _2065 = (_2060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2060);
        float _2073 = (dot(vec3(_1218, _1219, _1220), vec3(_2065 * _2057, _2065 * _2058, _2065 * _2059)) + 1.0) * 0.5;
        float _4682 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2082 = sqrt(((_2058 * _2058) + (_2057 * _2057)) + (_2059 * _2059)) / (_1972 + 9.9999997473787516355514526367188e-06);
        float _4693 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2084 = _2083 * 2.0;
        float _2088 = (1.0 - _2083) / (_2083 + 1.0);
        float _4704 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2098 = ((((1.0 - _2089) * (_2084 + 2.0)) * exp2(log2(isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * (_2084 + 1.0))) + _2089) * _1972;
        _2106 = _1939;
        _2107 = _1938;
        _2108 = _1937;
        _2109 = _1949;
        _2110 = _1948;
        _2111 = _1947;
        _2112 = _1959;
        _2113 = _1958;
        _2114 = _1957;
        _2115 = _1972;
        _2116 = _1971;
        _2117 = _1970;
        _2118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)));
        _2119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0)));
        _2120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0)));
    }
    else
    {
        _2106 = _1797;
        _2107 = _1797;
        _2108 = _1797;
        _2109 = _1797;
        _2110 = _1797;
        _2111 = _1797;
        _2112 = _1797;
        _2113 = _1797;
        _2114 = _1797;
        _2115 = _1797;
        _2116 = _1797;
        _2117 = _1797;
        _2118 = 0.0;
        _2119 = 0.0;
        _2120 = 0.0;
    }
    float _2130 = (cbModelParam._m0[1u].x * (_2118 - _1809)) + _1809;
    float _2131 = (cbModelParam._m0[1u].x * (_2119 - _1810)) + _1810;
    float _2132 = (cbModelParam._m0[1u].x * (_2120 - _1811)) + _1811;
    float _2153 = fma(_2132, cbSceneParam._m0[89u].z, fma(_2131, cbSceneParam._m0[89u].y, _2130 * cbSceneParam._m0[89u].x));
    float _2156 = fma(_2132, cbSceneParam._m0[90u].z, fma(_2131, cbSceneParam._m0[90u].y, _2130 * cbSceneParam._m0[90u].x));
    float _2159 = fma(_2132, cbSceneParam._m0[91u].z, fma(_2131, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2130));
    float _2174 = _1403 * 0.5;
    float _2175 = _1404 * 0.5;
    float _2176 = _1405 * 0.5;
    float _2177 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_2108, _2111, _2114, _2117));
    float _2180 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_2107, _2110, _2113, _2116));
    float _2183 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_2106, _2109, _2112, _2115));
    float _2217;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2190 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_1796, _1800, _1803, _1806));
        float _2194 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_1798, _1801, _1804, _1807));
        float _2198 = dot(vec4(_2174, _2175, _2176, 1.0), vec4(_1799, _1802, _1805, _1808));
        float _2205 = dot(vec4(cbModelParam._m0[39u]), vec4(_2174, _2175, _2176, 1.0));
        _2217 = dot(vec3(isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0)), isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0)), isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2205) ? 0.0 : (isnan(0.0) ? _2205 : max(0.0, _2205))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2217 = 1.0;
    }
    float _2228;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2219 = dot(vec4(cbModelParam._m0[40u]), vec4(_2174, _2175, _2176, 1.0));
        _2228 = dot(vec3(isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0)), isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0)), isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2219) ? 0.0 : (isnan(0.0) ? _2219 : max(0.0, _2219))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2228 = 1.0;
    }
    float _2232 = (_2228 * cbModelParam._m0[1u].x) + (_2217 * (1.0 - cbModelParam._m0[1u].x));
    float _2242 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1221);
    float _2243 = isnan(_2242) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2242 : min(cbModelParam._m0[25u].z, _2242));
    float _2323;
    float _2325;
    float _2327;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2290 = fma(_1467, cbModelParam._m0[13u].z, fma(_1463, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1459)) + cbModelParam._m0[13u].w;
        float _2294 = fma(_1467, cbModelParam._m0[14u].z, fma(_1463, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1459)) + cbModelParam._m0[14u].w;
        float _2298 = fma(_1467, cbModelParam._m0[15u].z, fma(_1463, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1459)) + cbModelParam._m0[15u].w;
        float _2301 = fma(_1405, cbModelParam._m0[13u].z, fma(_1404, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1403));
        float _2304 = fma(_1405, cbModelParam._m0[14u].z, fma(_1404, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1403));
        float _2307 = fma(_1405, cbModelParam._m0[15u].z, fma(_1404, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1403));
        float _2335;
        if (_2301 > 0.0)
        {
            _2335 = abs((1.0 - _2290) / _2301);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2301 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2290 + 1.0) / _2301);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2335 = frontier_phi_17_15_ladder;
        }
        float _2558;
        if (_2304 > 0.0)
        {
            _2558 = abs((1.0 - _2294) / _2304);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2304 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2294 + 1.0) / _2304);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2558 = frontier_phi_26_22_ladder;
        }
        float _2815;
        if (_2307 > 0.0)
        {
            _2815 = abs((1.0 - _2298) / _2307);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2307 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2298 + 1.0) / _2307);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2815 = frontier_phi_38_33_ladder;
        }
        float _2817 = isnan(_2558) ? _2335 : (isnan(_2335) ? _2558 : min(_2335, _2558));
        float _2818 = isnan(_2815) ? _2817 : (isnan(_2817) ? _2815 : min(_2817, _2815));
        float _2822 = (_2818 * _2301) + _2290;
        float _2823 = (_2818 * _2304) + _2294;
        float _2824 = (_2818 * _2307) + _2298;
        float _2825 = _2818 * 9.9999997473787516355514526367188e-05;
        float _2827 = (-1.0) - _2825;
        float _2829 = _2825 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2824 > _2829) || ((_2824 < _2827) || ((_2823 > _2829) || ((_2823 < _2827) || ((_2822 < _2827) || (_2822 > _2829))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2952 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2824, cbModelParam._m0[9u].z, fma(_2823, cbModelParam._m0[9u].y, _2822 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2824, cbModelParam._m0[10u].z, fma(_2823, cbModelParam._m0[10u].y, _2822 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2824, cbModelParam._m0[11u].z, fma(_2823, cbModelParam._m0[11u].y, _2822 * cbModelParam._m0[11u].x))), _2243);
            frontier_phi_16_38_ladder = _2952.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2952.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2952.x * cbModelParam._m0[1u].y;
        }
        _2323 = frontier_phi_16_38_ladder_2;
        _2325 = frontier_phi_16_38_ladder_1;
        _2327 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2311 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1403, _1404, _1405), _2243);
        _2323 = _2311.x * cbModelParam._m0[1u].y;
        _2325 = _2311.y * cbModelParam._m0[1u].y;
        _2327 = _2311.z * cbModelParam._m0[1u].y;
    }
    float _2331 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1221);
    float _2332 = isnan(_2331) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2331 : min(cbModelParam._m0[25u].w, _2331));
    float _2421;
    float _2423;
    float _2425;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2385 = fma(_1467, cbModelParam._m0[21u].z, fma(_1463, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1459)) + cbModelParam._m0[21u].w;
        float _2389 = fma(_1467, cbModelParam._m0[22u].z, fma(_1463, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1459)) + cbModelParam._m0[22u].w;
        float _2393 = fma(_1467, cbModelParam._m0[23u].z, fma(_1463, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1459)) + cbModelParam._m0[23u].w;
        float _2396 = fma(_1405, cbModelParam._m0[21u].z, fma(_1404, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1403));
        float _2399 = fma(_1405, cbModelParam._m0[22u].z, fma(_1404, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1403));
        float _2402 = fma(_1405, cbModelParam._m0[23u].z, fma(_1404, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1403));
        float _2563;
        if (_2396 > 0.0)
        {
            _2563 = abs((1.0 - _2385) / _2396);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2396 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2385 + 1.0) / _2396);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2563 = frontier_phi_28_24_ladder;
        }
        float _2842;
        if (_2399 > 0.0)
        {
            _2842 = abs((1.0 - _2389) / _2399);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2399 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2389 + 1.0) / _2399);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2842 = frontier_phi_40_35_ladder;
        }
        float _3055;
        if (_2402 > 0.0)
        {
            _3055 = abs((1.0 - _2393) / _2402);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2402 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2393 + 1.0) / _2402);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3055 = frontier_phi_49_46_ladder;
        }
        float _3057 = isnan(_2842) ? _2563 : (isnan(_2563) ? _2842 : min(_2563, _2842));
        float _3058 = isnan(_3055) ? _3057 : (isnan(_3057) ? _3055 : min(_3057, _3055));
        float _3062 = (_3058 * _2396) + _2385;
        float _3063 = (_3058 * _2399) + _2389;
        float _3064 = (_3058 * _2402) + _2393;
        float _3065 = _3058 * 9.9999997473787516355514526367188e-05;
        float _3066 = (-1.0) - _3065;
        float _3068 = _3065 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3064 > _3068) || ((_3064 < _3066) || ((_3063 > _3068) || ((_3063 < _3066) || ((_3062 < _3066) || (_3062 > _3068))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3263 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3064, cbModelParam._m0[17u].z, fma(_3063, cbModelParam._m0[17u].y, _3062 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3064, cbModelParam._m0[18u].z, fma(_3063, cbModelParam._m0[18u].y, _3062 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3064, cbModelParam._m0[19u].z, fma(_3063, cbModelParam._m0[19u].y, _3062 * cbModelParam._m0[19u].x))), _2332);
            frontier_phi_25_49_ladder = _3263.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3263.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3263.x * cbModelParam._m0[1u].z;
        }
        _2421 = frontier_phi_25_49_ladder_2;
        _2423 = frontier_phi_25_49_ladder_1;
        _2425 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2405 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1403, _1404, _1405), _2332);
        _2421 = _2405.x * cbModelParam._m0[1u].z;
        _2423 = _2405.y * cbModelParam._m0[1u].z;
        _2425 = _2405.z * cbModelParam._m0[1u].z;
    }
    float _2438 = (((_1430 * _1379) + _1431) * _1395) * ((cbModelParam._m0[1u].w * (_2421 - _2323)) + _2323);
    float _2440 = (((_1430 * _1381) + _1431) * _1395) * ((cbModelParam._m0[1u].w * (_2423 - _2325)) + _2325);
    float _2442 = (((_1430 * _1382) + _1431) * _1395) * ((cbModelParam._m0[1u].w * (_2425 - _2327)) + _2327);
    float _2445 = fma(_2442, cbSceneParam._m0[89u].z, fma(_2440, cbSceneParam._m0[89u].y, _2438 * cbSceneParam._m0[89u].x));
    float _2448 = fma(_2442, cbSceneParam._m0[90u].z, fma(_2440, cbSceneParam._m0[90u].y, _2438 * cbSceneParam._m0[90u].x));
    float _2451 = fma(_2442, cbSceneParam._m0[91u].z, fma(_2440, cbSceneParam._m0[91u].y, _2438 * cbSceneParam._m0[91u].x));
    vec4 _2459 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1317, _1318));
    float _2461 = _2459.w;
    float _2473 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2461);
    float _2474 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2461);
    float _2475 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2461);
    uvec4 _2479 = floatBitsToUint(cbInstanceData._m0[_305 + 5u]);
    uint _2481 = _2479.x * 14u;
    uint _2482 = _2481 + 13u;
    float _2489 = _1395 + (-1.0);
    float _2494 = (cbLight._m0[_2482].x * _2489) + 1.0;
    float _2495 = (cbLight._m0[_2482].y * _2489) + 1.0;
    float _2496 = (cbLight._m0[_2482].z * _2489) + 1.0;
    float _2497 = (cbLight._m0[_2482].w * _2489) + 1.0;
    uint _2498 = _2481 + 5u;
    float _2504 = isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0));
    uint _2508 = _2481 + 4u;
    float _2517 = isnan(1.0) ? _2494 : (isnan(_2494) ? 1.0 : min(_2494, 1.0));
    uint _2521 = _2481 | 1u;
    float _2532 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_1218, _1219, _1220));
    float _2535 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_1218, _1219, _1220));
    float _4840 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _4851 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2540 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * 0.3183098733425140380859375;
    float _2542 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * 0.3183098733425140380859375;
    float _2549 = ((cbLight._m0[_2498].x * _2504) * _2542) + (((cbLight._m0[_2508].x * _2473) * _2517) * _2540);
    float _2550 = ((_2504 * cbLight._m0[_2498].y) * _2542) + (((cbLight._m0[_2508].y * _2474) * _2517) * _2540);
    float _2551 = ((_2504 * cbLight._m0[_2498].z) * _2542) + (((cbLight._m0[_2508].z * _2475) * _2517) * _2540);
    uvec4 _2555 = floatBitsToUint(cbLight._m0[_2481 + 12u]);
    bool _2557 = _2555.x == 0u;
    float _2568;
    float _2570;
    float _2572;
    if (_2557)
    {
        _2568 = _2549;
        _2570 = _2550;
        _2572 = _2551;
    }
    else
    {
        uint _2576 = _2481 + 6u;
        float _2592 = (dot(vec3(cbLight._m0[_2481 + 2u].xyz), vec3(_1218, _1219, _1220)) * 0.5) + 0.5;
        float _2593 = _2592 * _2592;
        float _4862 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2594 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2595 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
        _2568 = (((cbLight._m0[_2576].x * 0.3183098733425140380859375) * _2594) * _2595) + _2549;
        _2570 = (((cbLight._m0[_2576].y * 0.3183098733425140380859375) * _2594) * _2595) + _2550;
        _2572 = (((cbLight._m0[_2576].z * 0.3183098733425140380859375) * _2594) * _2595) + _2551;
    }
    bool _2575 = _2555.y == 0u;
    float _2613;
    float _2615;
    float _2617;
    if (_2575)
    {
        _2613 = _2568;
        _2615 = _2570;
        _2617 = _2572;
    }
    else
    {
        uint _2786 = _2481 + 7u;
        float _2802 = (dot(vec3(cbLight._m0[_2481 + 3u].xyz), vec3(_1218, _1219, _1220)) * 0.5) + 0.5;
        float _2803 = _2802 * _2802;
        float _4878 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2804 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2805 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _2613 = (((cbLight._m0[_2786].x * 0.3183098733425140380859375) * _2804) * _2805) + _2568;
        _2615 = (((cbLight._m0[_2786].y * 0.3183098733425140380859375) * _2804) * _2805) + _2570;
        _2617 = (((cbLight._m0[_2786].z * 0.3183098733425140380859375) * _2804) * _2805) + _2572;
    }
    uint _2620 = _2481 + 8u;
    float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _1221) * 0.949999988079071044921875);
    float _2634 = _2633 * _2633;
    float _2635 = cbLight._m0[_2481].x + _1297;
    float _2636 = cbLight._m0[_2481].y + _1298;
    float _2637 = cbLight._m0[_2481].z + _1299;
    float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
    float _2642 = _2641 * _2635;
    float _2643 = _2641 * _2636;
    float _2644 = _2641 * _2637;
    float _2645 = dot(vec3(_1218, _1219, _1220), vec3(cbLight._m0[_2481].xyz));
    float _4894 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
    float _4905 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
    float _2649 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
    float _2650 = dot(vec3(_1218, _1219, _1220), vec3(_2642, _2643, _2644));
    float _4916 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
    float _2654 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2642, _2643, _2644));
    float _4927 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2658 = _2634 * _2634;
    float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
    float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) * 5.0);
    float _2671 = 0.959999978542327880859375 - _1376;
    float _2673 = 0.959999978542327880859375 - _1377;
    float _2674 = 0.959999978542327880859375 - _1378;
    float _2681 = 1.0 - _2634;
    float _2692 = (0.5 / (((_2649 * ((_2648 * _2681) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2681) + _2634) * _2648))) * _2648;
    float _4938 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2694 = (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
    uint _2708 = _2481 + 9u;
    float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _1221) * 0.949999988079071044921875);
    float _2720 = _2719 * _2719;
    float _2721 = cbLight._m0[_2521].x + _1297;
    float _2722 = cbLight._m0[_2521].y + _1298;
    float _2723 = cbLight._m0[_2521].z + _1299;
    float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
    float _2728 = _2727 * _2721;
    float _2729 = _2727 * _2722;
    float _2730 = _2727 * _2723;
    float _2731 = dot(vec3(_1218, _1219, _1220), vec3(cbLight._m0[_2521].xyz));
    float _4949 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2734 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
    float _2735 = dot(vec3(_1218, _1219, _1220), vec3(_2728, _2729, _2730));
    float _4960 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2738 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
    float _2739 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2728, _2729, _2730));
    float _4971 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2743 = _2720 * _2720;
    float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
    float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) * 5.0);
    float _2761 = 1.0 - _2720;
    float _2771 = (0.5 / (((_2649 * ((_2734 * _2761) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2761) + _2720) * _2734))) * _2734;
    float _4982 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2773 = (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
    float _2783 = (((((_2754 * _2671) + _1379) * cbLight._m0[_2708].x) * _2773) * _2504) + ((((cbLight._m0[_2620].x * _2473) * ((_2670 * _2671) + _1379)) * _2694) * _2517);
    float _2784 = (((((_2754 * _2673) + _1381) * cbLight._m0[_2708].y) * _2773) * _2504) + ((((cbLight._m0[_2620].y * _2474) * ((_2670 * _2673) + _1381)) * _2694) * _2517);
    float _2785 = (((((_2754 * _2674) + _1382) * cbLight._m0[_2708].z) * _2773) * _2504) + ((((cbLight._m0[_2620].z * _2475) * ((_2670 * _2674) + _1382)) * _2694) * _2517);
    float _2847;
    float _2849;
    float _2851;
    if (_2557)
    {
        _2847 = _2783;
        _2849 = _2784;
        _2851 = _2785;
    }
    else
    {
        uint _2853 = _2481 + 2u;
        uint _2857 = _2481 + 10u;
        float _2871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2853].w)) * _1221) * 0.949999988079071044921875);
        float _2872 = _2871 * _2871;
        float _2873 = cbLight._m0[_2853].x + _1297;
        float _2874 = cbLight._m0[_2853].y + _1298;
        float _2875 = cbLight._m0[_2853].z + _1299;
        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
        float _2880 = _2879 * _2873;
        float _2881 = _2879 * _2874;
        float _2882 = _2879 * _2875;
        float _2883 = dot(vec3(_1218, _1219, _1220), vec3(cbLight._m0[_2853].xyz));
        float _4993 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2886 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
        float _2887 = dot(vec3(_1218, _1219, _1220), vec3(_2880, _2881, _2882));
        float _5004 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2890 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
        float _2891 = dot(vec3(cbLight._m0[_2853].xyz), vec3(_2880, _2881, _2882));
        float _5015 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2895 = _2872 * _2872;
        float _2899 = ((_2890 * _2890) * (_2895 + (-1.0))) + 1.0;
        float _2906 = exp2(log2(1.0 - (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0)))) * 5.0);
        float _2913 = 1.0 - _2872;
        float _2923 = (0.5 / (((_2649 * ((_2886 * _2913) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2913) + _2872) * _2886))) * _2886;
        float _5026 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2925 = (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_2895 / ((_2899 * _2899) * 3.141590118408203125));
        float _2926 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
        _2847 = (((((_2906 * _2671) + _1379) * cbLight._m0[_2857].x) * _2925) * _2926) + _2783;
        _2849 = (((((_2906 * _2673) + _1381) * cbLight._m0[_2857].y) * _2925) * _2926) + _2784;
        _2851 = (((((_2906 * _2674) + _1382) * cbLight._m0[_2857].z) * _2925) * _2926) + _2785;
    }
    float _2961;
    float _2963;
    float _2965;
    if (_2575)
    {
        _2961 = _2847;
        _2963 = _2849;
        _2965 = _2851;
    }
    else
    {
        uint _2972 = _2481 + 3u;
        uint _2976 = _2481 + 11u;
        float _2990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2972].w)) * _1221) * 0.949999988079071044921875);
        float _2991 = _2990 * _2990;
        float _2992 = cbLight._m0[_2972].x + _1297;
        float _2993 = cbLight._m0[_2972].y + _1298;
        float _2994 = cbLight._m0[_2972].z + _1299;
        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
        float _2999 = _2998 * _2992;
        float _3000 = _2998 * _2993;
        float _3001 = _2998 * _2994;
        float _3002 = dot(vec3(_1218, _1219, _1220), vec3(cbLight._m0[_2972].xyz));
        float _5042 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        float _3005 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
        float _3006 = dot(vec3(_1218, _1219, _1220), vec3(_2999, _3000, _3001));
        float _5053 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        float _3009 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
        float _3010 = dot(vec3(cbLight._m0[_2972].xyz), vec3(_2999, _3000, _3001));
        float _5064 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3014 = _2991 * _2991;
        float _3018 = ((_3009 * _3009) * (_3014 + (-1.0))) + 1.0;
        float _3025 = exp2(log2(1.0 - (isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0)))) * 5.0);
        float _3032 = 1.0 - _2991;
        float _3042 = (0.5 / (((_2649 * ((_3005 * _3032) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _3032) + _2991) * _3005))) * _3005;
        float _5075 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        float _3044 = (isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3014 / ((_3018 * _3018) * 3.141590118408203125));
        float _3045 = isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0));
        _2961 = (((((_3025 * _2671) + _1379) * cbLight._m0[_2976].x) * _3044) * _3045) + _2847;
        _2963 = (((((_3025 * _2673) + _1381) * cbLight._m0[_2976].y) * _3044) * _3045) + _2849;
        _2965 = (((((_3025 * _2674) + _1382) * cbLight._m0[_2976].z) * _3044) * _3045) + _2851;
    }
    float _3180;
    float _3182;
    float _3184;
    float _3186;
    float _3188;
    float _3190;
    if (_2479.y == 0u)
    {
        float _3120 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3121 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3120;
        float _3122 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3120;
        float _3123 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3120;
        uvec4 _3135 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3136 = _3135.x;
        uint _3147 = uint((float(_3135.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1318) / _3136))) + floor(float(uint(cbSceneParam._m0[85u].x * _1317) / _3136)));
        float _3157 = (log2(_3123 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3158 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
        uint _3161 = uint(isnan(14.0) ? _3158 : (isnan(_3158) ? 14.0 : min(_3158, 14.0)));
        uvec4 _3166 = texelFetch(g_lightClusterGridBuffer, int(((_3161 << 2u) + (_3147 << 6u)) >> 2u));
        uint _3167 = _3166.x;
        uint _3168 = _3135.z;
        float _3268;
        float _3270;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        if (((((1u << ((_3168 >> 4u) & 15u)) + 4294967295u) & _3167) == 0u) || ((_3168 & 240u) == 0u))
        {
            _3268 = 0.0;
            _3270 = 0.0;
            _3272 = 0.0;
            _3274 = 0.0;
            _3276 = 0.0;
            _3278 = 0.0;
        }
        else
        {
            float _3269;
            float _3271;
            float _3273;
            float _3275;
            float _3277;
            float _3279;
            float _3420 = 0.0;
            float _3421 = 0.0;
            float _3422 = 0.0;
            float _3423 = 0.0;
            float _3424 = 0.0;
            float _3425 = 0.0;
            uint _3426 = 0u;
            uint _3435;
            bool _3436;
            for (;;)
            {
                _3435 = texelFetch(g_lightClassification, int((((_3161 << 5u) + (_3147 << 9u)) + (_3426 << 2u)) >> 2u)).x;
                _3436 = _3435 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3436)
                {
                    frontier_phi_66_pred = _3420;
                    frontier_phi_66_pred_1 = _3425;
                    frontier_phi_66_pred_2 = _3424;
                    frontier_phi_66_pred_3 = _3423;
                    frontier_phi_66_pred_4 = _3422;
                    frontier_phi_66_pred_5 = _3421;
                }
                else
                {
                    float _3565;
                    float _3566;
                    float _3567;
                    float _3568;
                    float _3569;
                    float _3570;
                    uint _3571;
                    _3565 = _3420;
                    _3566 = _3421;
                    _3567 = _3422;
                    _3568 = _3423;
                    _3569 = _3424;
                    _3570 = _3425;
                    _3571 = _3435;
                    float _3492;
                    float _3493;
                    float _3494;
                    float _3495;
                    float _3496;
                    float _3497;
                    for (;;)
                    {
                        uint _3575 = uint(findLSB(_3571)) + (_3426 << 5u);
                        uint _3572 = (_3571 + 4294967295u) & _3571;
                        uint _3577 = _3575 * 48u;
                        vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3577)).x, texelFetch(g_PointLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3577 + 3u)).x));
                        uint _3597 = (_3575 * 48u) + 4u;
                        vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3597)).x, texelFetch(g_PointLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3597 + 3u)).x));
                        uint _3616 = (_3575 * 48u) + 8u;
                        vec3 _3627 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3616)).x, texelFetch(g_PointLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3616 + 2u)).x));
                        float _3631 = _3591.x - _3121;
                        float _3632 = _3591.y - _3122;
                        float _3633 = _3591.z - _3123;
                        float _3634 = dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633));
                        float _3637 = inversesqrt(_3634);
                        float _3638 = _3637 * _3631;
                        float _3639 = _3637 * _3632;
                        float _3640 = _3637 * _3633;
                        float _3641 = dot(vec3(_1336, _1339, _1342), vec3(_3638, _3639, _3640));
                        float _3646 = 1.0 - (_3634 * _3591.w);
                        float _5101 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                        float _3647 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                        float _3648 = sqrt(_3634) * _3610.w;
                        float _3651 = 1.39999997615814208984375 / (_3648 + 1.39999997615814208984375);
                        float _3652 = _3651 * _3651;
                        float _3655 = ((1.0 - _3652) * _3641) + _3652;
                        float _3658 = _3648 * _3648;
                        float _3662 = ((isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0))) * _3647) / ((_3658 * 0.699999988079071044921875) + 1.0);
                        float _3666 = (-0.0) - _3121;
                        float _3667 = (-0.0) - _3122;
                        float _3668 = (-0.0) - _3123;
                        float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                        float _3673 = _3672 * _3666;
                        float _3674 = _3672 * _3667;
                        float _3675 = _3672 * _3668;
                        float _3683 = exp2(log2(1.0 / ((_3658 * 3.5) + 5.0)) * 0.25);
                        float _3684 = 1.0 - _1411;
                        float _3691 = sqrt(1.0 - ((1.0 - (_3684 * _3684)) * (1.0 - (_3683 * _3683))));
                        float _3692 = _3691 * _3691;
                        float _3693 = _3692 * _3692;
                        float _3694 = _3673 + _3638;
                        float _3695 = _3674 + _3639;
                        float _3696 = _3675 + _3640;
                        float _3700 = inversesqrt(dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696)));
                        float _3704 = dot(vec3(_1336, _1339, _1342), vec3(_3673, _3674, _3675));
                        float _5117 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                        float _3707 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                        float _3708 = dot(vec3(_1336, _1339, _1342), vec3(_3700 * _3694, _3700 * _3695, _3700 * _3696));
                        float _5128 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                        float _3711 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                        float _3715 = ((_3711 * _3711) * (_3693 + (-1.0))) + 1.0;
                        float _3716 = _3651 * _3692;
                        float _3717 = _3716 * _3716;
                        float _3720 = ((1.0 - _3717) * _3641) + _3717;
                        float _5139 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                        float _3721 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                        float _3722 = 1.0 - _3692;
                        float _3732 = (0.5 / (((_3721 * ((_3707 * _3722) + _3692)) + 9.9999999392252902907785028219223e-09) + (((_3721 * _3722) + _3692) * _3707))) * _3721;
                        float _5150 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                        float _3743 = (((_3693 * 3.1415927410125732421875) * (isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0)))) / ((_3715 * _3715) * ((_3658 * 2.1991131305694580078125) + 3.141590118408203125))) * _3647;
                        _3495 = (_3662 * _3610.x) + _3568;
                        _3496 = (_3662 * _3610.y) + _3569;
                        _3497 = (_3662 * _3610.z) + _3570;
                        _3492 = (_3743 * _3627.x) + _3565;
                        _3493 = (_3743 * _3627.y) + _3566;
                        _3494 = (_3743 * _3627.z) + _3567;
                        if (_3572 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3565 = _3492;
                            _3566 = _3493;
                            _3567 = _3494;
                            _3568 = _3495;
                            _3569 = _3496;
                            _3570 = _3497;
                            _3571 = _3572;
                        }
                    }
                    frontier_phi_66_pred = _3492;
                    frontier_phi_66_pred_1 = _3497;
                    frontier_phi_66_pred_2 = _3496;
                    frontier_phi_66_pred_3 = _3495;
                    frontier_phi_66_pred_4 = _3494;
                    frontier_phi_66_pred_5 = _3493;
                }
                _3269 = frontier_phi_66_pred;
                _3279 = frontier_phi_66_pred_1;
                _3277 = frontier_phi_66_pred_2;
                _3275 = frontier_phi_66_pred_3;
                _3273 = frontier_phi_66_pred_4;
                _3271 = frontier_phi_66_pred_5;
                uint _3427 = _3426 + 1u;
                if (_3427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3420 = _3269;
                    _3421 = _3271;
                    _3422 = _3273;
                    _3423 = _3275;
                    _3424 = _3277;
                    _3425 = _3279;
                    _3426 = _3427;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3268 = _3269;
            _3270 = _3271;
            _3272 = _3273;
            _3274 = _3275;
            _3276 = _3277;
            _3278 = _3279;
        }
        uvec4 _3282 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3283 = _3282.z;
        uint _3285 = (_3283 >> 8u) & 15u;
        float _3388;
        float _3390;
        float _3392;
        float _3394;
        float _3396;
        float _3398;
        if (((4294967295u << _3285) & _3167) == 0u)
        {
            _3388 = _3268;
            _3390 = _3270;
            _3392 = _3272;
            _3394 = _3274;
            _3396 = _3276;
            _3398 = _3278;
        }
        else
        {
            float _3413 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
            float _3414 = _3413 * _3121;
            float _3415 = _3413 * _3122;
            float _3416 = _3413 * _3123;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3285 < ((_3283 >> 12u) & 15u))
            {
                float _3389;
                float _3391;
                float _3393;
                float _3395;
                float _3397;
                float _3399;
                float _3548 = _3268;
                float _3549 = _3270;
                float _3550 = _3272;
                float _3551 = _3274;
                float _3552 = _3276;
                float _3553 = _3278;
                uint _3554 = _3285;
                uint _3563;
                bool _3564;
                for (;;)
                {
                    _3563 = texelFetch(g_lightClassification, int((((_3161 << 5u) + (_3147 << 9u)) + (_3554 << 2u)) >> 2u)).x;
                    _3564 = _3563 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3564)
                    {
                        frontier_phi_77_pred = _3553;
                        frontier_phi_77_pred_1 = _3552;
                        frontier_phi_77_pred_2 = _3551;
                        frontier_phi_77_pred_3 = _3550;
                        frontier_phi_77_pred_4 = _3549;
                        frontier_phi_77_pred_5 = _3548;
                    }
                    else
                    {
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _4050;
                        float _4051;
                        float _4052;
                        float _4053;
                        float _4054;
                        float _4055;
                        float _3770 = _3548;
                        float _3771 = _3549;
                        float _3772 = _3550;
                        float _3773 = _3551;
                        float _3774 = _3552;
                        float _3775 = _3553;
                        uint _3776 = _3563;
                        uint _3777;
                        vec4 _3802;
                        float _3803;
                        vec4 _3818;
                        vec3 _3830;
                        vec4 _3845;
                        vec4 _3860;
                        float _3906;
                        bool _3907;
                        for (;;)
                        {
                            uint _3787 = ((_3554 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3776));
                            _3777 = (_3776 + 4294967295u) & _3776;
                            uint _3789 = _3787 * 40u;
                            _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            _3803 = _3802.w;
                            uint _3805 = (_3787 * 40u) + 4u;
                            _3818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3805 + 3u)).x));
                            uint _3820 = (_3787 * 40u) + 8u;
                            _3830 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 2u)).x));
                            uint _3832 = (_3787 * 40u) + 16u;
                            _3845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 3u)).x));
                            uint _3847 = (_3787 * 40u) + 20u;
                            _3860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 3u)).x));
                            uint _3862 = (_3787 * 40u) + 24u;
                            vec4 _3875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 3u)).x));
                            uint _3881 = (_3787 * 40u) + 28u;
                            vec4 _3894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 3u)).x));
                            _3906 = fma(_3123, _3894.z, fma(_3122, _3894.y, _3894.x * _3121)) + _3894.w;
                            _3907 = !((fma(_3123, _3875.z, fma(_3122, _3875.y, _3875.x * _3121)) + _3875.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3907)
                            {
                                float _3934 = _3802.x - _3121;
                                float _3935 = _3802.y - _3122;
                                float _3936 = _3802.z - _3123;
                                float _3937 = dot(vec3(_3934, _3935, _3936), vec3(_3934, _3935, _3936));
                                float _3940 = inversesqrt(_3937);
                                float _3941 = _3940 * _3934;
                                float _3942 = _3940 * _3935;
                                float _3943 = _3940 * _3936;
                                float _3947 = 1.0 - (_3937 / (_3803 * _3803));
                                float _5161 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3948 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                                float _3952 = sqrt(_3937) * _3818.w;
                                float _3954 = 1.39999997615814208984375 / (_3952 + 1.39999997615814208984375);
                                float _3955 = _3954 * _3954;
                                float _3958 = ((1.0 - _3955) * dot(vec3(_3941, _3942, _3943), vec3(_1336, _1339, _1342))) + _3955;
                                float _3961 = _3952 * _3952;
                                float _3965 = (fma(_3123, _3845.z, fma(_3122, _3845.y, _3845.x * _3121)) + _3845.w) / _3906;
                                float _3966 = (fma(_3123, _3860.z, fma(_3122, _3860.y, _3860.x * _3121)) + _3860.w) / _3906;
                                float _3970 = 1.0 - dot(vec2(_3965, _3966), vec2(_3965, _3966));
                                float _5177 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3971 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
                                float _3972 = _3971 * (((isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0))) * _3948) / ((_3961 * 0.699999988079071044921875) + 1.0));
                                float _3984 = exp2(log2(1.0 / ((_3961 * 3.5) + 5.0)) * 0.25);
                                float _3985 = 1.0 - _1411;
                                float _3992 = sqrt(1.0 - ((1.0 - (_3985 * _3985)) * (1.0 - (_3984 * _3984))));
                                float _3993 = _3992 * _3992;
                                float _3994 = _3993 * _3993;
                                float _3995 = _3941 - _3414;
                                float _3996 = _3942 - _3415;
                                float _3997 = _3943 - _3416;
                                float _4001 = inversesqrt(dot(vec3(_3995, _3996, _3997), vec3(_3995, _3996, _3997)));
                                float _4005 = dot(vec3(_1336, _1339, _1342), vec3((-0.0) - _3414, (-0.0) - _3415, (-0.0) - _3416));
                                float _5188 = isnan(0.0) ? _4005 : (isnan(_4005) ? 0.0 : max(_4005, 0.0));
                                float _4008 = isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0));
                                float _4009 = dot(vec3(_1336, _1339, _1342), vec3(_4001 * _3995, _4001 * _3996, _4001 * _3997));
                                float _5199 = isnan(0.0) ? _4009 : (isnan(_4009) ? 0.0 : max(_4009, 0.0));
                                float _4012 = isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0));
                                float _4016 = ((_4012 * _4012) * (_3994 + (-1.0))) + 1.0;
                                float _4017 = _3954 * _3993;
                                float _4018 = _4017 * _4017;
                                float _4024 = ((1.0 - _4018) * dot(vec3(_1336, _1339, _1342), vec3(_3941, _3942, _3943))) + _4018;
                                float _5210 = isnan(0.0) ? _4024 : (isnan(_4024) ? 0.0 : max(_4024, 0.0));
                                float _4025 = isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0));
                                float _4026 = 1.0 - _3993;
                                float _4036 = (0.5 / (((_4025 * ((_4008 * _4026) + _3993)) + 9.9999999392252902907785028219223e-09) + (((_4025 * _4026) + _3993) * _4008))) * _4025;
                                float _5221 = isnan(0.0) ? _4036 : (isnan(_4036) ? 0.0 : max(_4036, 0.0));
                                float _4046 = (_3971 * _3948) * (((_3994 * 3.1415927410125732421875) * (isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0)))) / ((_4016 * _4016) * ((_3961 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3972 * _3818.y;
                                frontier_phi_83_pred_1 = _3972 * _3818.x;
                                frontier_phi_83_pred_2 = _4046 * _3830.z;
                                frontier_phi_83_pred_3 = _4046 * _3830.y;
                                frontier_phi_83_pred_4 = _4046 * _3830.x;
                                frontier_phi_83_pred_5 = _3972 * _3818.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4054 = frontier_phi_83_pred;
                            _4053 = frontier_phi_83_pred_1;
                            _4052 = frontier_phi_83_pred_2;
                            _4051 = frontier_phi_83_pred_3;
                            _4050 = frontier_phi_83_pred_4;
                            _4055 = frontier_phi_83_pred_5;
                            _3760 = _4053 + _3773;
                            _3761 = _4054 + _3774;
                            _3762 = _4055 + _3775;
                            _3757 = _4050 + _3770;
                            _3758 = _4051 + _3771;
                            _3759 = _4052 + _3772;
                            if (_3777 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3770 = _3757;
                                _3771 = _3758;
                                _3772 = _3759;
                                _3773 = _3760;
                                _3774 = _3761;
                                _3775 = _3762;
                                _3776 = _3777;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3762;
                        frontier_phi_77_pred_1 = _3761;
                        frontier_phi_77_pred_2 = _3760;
                        frontier_phi_77_pred_3 = _3759;
                        frontier_phi_77_pred_4 = _3758;
                        frontier_phi_77_pred_5 = _3757;
                    }
                    _3399 = frontier_phi_77_pred;
                    _3397 = frontier_phi_77_pred_1;
                    _3395 = frontier_phi_77_pred_2;
                    _3393 = frontier_phi_77_pred_3;
                    _3391 = frontier_phi_77_pred_4;
                    _3389 = frontier_phi_77_pred_5;
                    uint _3555 = _3554 + 1u;
                    if (_3555 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3548 = _3389;
                        _3549 = _3391;
                        _3550 = _3393;
                        _3551 = _3395;
                        _3552 = _3397;
                        _3553 = _3399;
                        _3554 = _3555;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3393;
                frontier_phi_58_59_ladder_1 = _3399;
                frontier_phi_58_59_ladder_2 = _3397;
                frontier_phi_58_59_ladder_3 = _3395;
                frontier_phi_58_59_ladder_4 = _3391;
                frontier_phi_58_59_ladder_5 = _3389;
            }
            else
            {
                frontier_phi_58_59_ladder = _3272;
                frontier_phi_58_59_ladder_1 = _3278;
                frontier_phi_58_59_ladder_2 = _3276;
                frontier_phi_58_59_ladder_3 = _3274;
                frontier_phi_58_59_ladder_4 = _3270;
                frontier_phi_58_59_ladder_5 = _3268;
            }
            _3388 = frontier_phi_58_59_ladder_5;
            _3390 = frontier_phi_58_59_ladder_4;
            _3392 = frontier_phi_58_59_ladder;
            _3394 = frontier_phi_58_59_ladder_3;
            _3396 = frontier_phi_58_59_ladder_2;
            _3398 = frontier_phi_58_59_ladder_1;
        }
        float _3403 = isnan(1.0) ? _1395 : (isnan(_1395) ? 1.0 : min(_1395, 1.0));
        _3180 = (_3403 * _3394) + _2613;
        _3182 = (_3403 * _3396) + _2615;
        _3184 = (_3403 * _3398) + _2617;
        _3186 = ((_3388 * _1379) * _3403) + _2961;
        _3188 = ((_3390 * _1381) * _3403) + _2963;
        _3190 = ((_3392 * _1382) * _3403) + _2965;
    }
    else
    {
        _3180 = _2613;
        _3182 = _2615;
        _3184 = _2617;
        _3186 = _2961;
        _3188 = _2963;
        _3190 = _2965;
    }
    float _5237 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
    float _5248 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
    float _5259 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
    float _3207 = ((isnan(1.0) ? _5237 : (isnan(_5237) ? 1.0 : min(_5237, 1.0))) * (_3180 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1395))) + ((_3186 + ((isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0))) * _2232)) * cbPerFrame._m0[3u].x);
    float _3208 = ((isnan(1.0) ? _5248 : (isnan(_5248) ? 1.0 : min(_5248, 1.0))) * (_3182 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1395))) + ((_3188 + ((isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0))) * _2232)) * cbPerFrame._m0[3u].x);
    float _3209 = ((isnan(1.0) ? _5259 : (isnan(_5259) ? 1.0 : min(_5259, 1.0))) * (_3184 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1395))) + ((_3190 + ((isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0))) * _2232)) * cbPerFrame._m0[3u].x);
    uint _3210 = _305 + 6u;
    float _3218 = _1317 / cbSceneParam._m0[86u].x;
    float _3219 = _1318 / cbSceneParam._m0[86u].y;
    vec4 _3233 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3218, _3219, (log2((isnan(cbSceneParam._m0[77u].w) ? _1240 : (isnan(_1240) ? cbSceneParam._m0[77u].w : min(_1240, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3235 = _3233.x;
    float _3236 = _3233.y;
    float _3237 = _3233.z;
    float _3238 = _3233.w;
    float _3330;
    float _3332;
    float _3334;
    float _3336;
    if (_1240 > cbSceneParam._m0[78u].w)
    {
        float _3293 = isnan(_1240) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1240 : min(cbSceneParam._m0[80u].w, _1240));
        float _3294 = _3293 / _1240;
        float _3305 = _3294 * _1290;
        float _3306 = _1291 * _3294;
        float _3307 = (-0.0) - _3306;
        float _3308 = _3294 * _1292;
        float _3310 = (cbSceneParam._m0[77u].w * _3307) / _3293;
        float _3311 = _3310 + cbSceneParam._m0[79u].w;
        float _3312 = cbSceneParam._m0[79u].w - _3306;
        float _3318 = sqrt(((_3305 * _3305) + (_3306 * _3306)) + (_3308 * _3308));
        float _3321 = (1.0 - (cbSceneParam._m0[77u].w / _3293)) * _3318;
        float _3326 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3328 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3505;
        if (abs((_3307 - _3310) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3505 = ((((_3311 > 0.0) ? exp2(_3326 * _3311) : (2.0 - exp2(_3328 * _3311))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3321;
        }
        else
        {
            float _3449 = 1.0 / cbSceneParam._m0[80u].x;
            float _3450 = isnan(_3312) ? _3311 : (isnan(_3311) ? _3312 : max(_3311, _3312));
            float _3451 = isnan(_3312) ? _3311 : (isnan(_3311) ? _3312 : min(_3311, _3312));
            float _3460 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : min(_3450, 0.0));
            float _3461 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : min(_3451, 0.0));
            _3505 = ((abs(_3318 / _3307) * cbSceneParam._m0[80u].y) * ((((_3460 - _3461) * 2.0) - ((exp2(_3326 * (isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0)))) - exp2(_3326 * (isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))))) * _3449)) - ((exp2(_3328 * _3460) - exp2(_3328 * _3461)) * _3449))) + (_3321 * cbSceneParam._m0[80u].z);
        }
        vec4 _3507 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3218, _3219, 1.0), 0.0);
        float _3516 = exp2((_3505 * (-1.44269502162933349609375)) * (1.0 - _3507.w));
        float _3517 = log2(_3516);
        float _3533 = log2(_3238);
        _3330 = (exp2(_3533 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3517 * cbSceneParam._m0[78u].x)) * _3507.x) / cbSceneParam._m0[78u].x)) + _3235;
        _3332 = (exp2(_3533 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3517 * cbSceneParam._m0[78u].y)) * _3507.y) / cbSceneParam._m0[78u].y)) + _3236;
        _3334 = (exp2(_3533 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3517 * cbSceneParam._m0[78u].z)) * _3507.z) / cbSceneParam._m0[78u].z)) + _3237;
        _3336 = _3516 * _3238;
    }
    else
    {
        _3330 = _3235;
        _3332 = _3236;
        _3334 = _3237;
        _3336 = _3238;
    }
    bool _3543;
    vec4 _3346;
    vec4 _3368;
    float _3370;
    float _3374;
    float _3375;
    float _3376;
    float _3377;
    bool _3387;
    for (;;)
    {
        _3346 = cbMatDynParam._m0[0u];
        float _3348 = roundEven(_3346.y);
        bool _3349 = _3348 == 3.0;
        float _3350 = log2(_3336);
        float _3357 = exp2(_3350 * cbSceneParam._m0[78u].x) * _3207;
        float _3358 = exp2(_3350 * cbSceneParam._m0[78u].y) * _3208;
        float _3359 = exp2(_3350 * cbSceneParam._m0[78u].z) * _3209;
        float _3366 = _1306 + (-0.5);
        _3368 = cbMtdParam._m0[1u];
        _3370 = _3368.y * _3366;
        float _3373 = (_3348 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3374 = _3373 * (_3349 ? _3357 : (_3357 + (cbSceneParam._m0[72u].w * _3330)));
        _3375 = _3373 * (_3349 ? _3358 : (_3358 + (cbSceneParam._m0[72u].w * _3332)));
        _3376 = _3373 * (_3349 ? _3359 : (_3359 + (cbSceneParam._m0[72u].w * _3334)));
        _3377 = _3366 * 0.999000012874603271484375;
        _3387 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3387)
        {
            if ((cbInstanceData._m0[_305 + 7u].x + _3377) < 0.5)
            {
                _3543 = true;
                break;
            }
        }
        uint _3484 = _1355 + uint(_3346.w);
        if ((cbInstanceData._m0[_3484].w < 1.0) && ((cbInstanceData._m0[_3484].w + _3377) < 0.5))
        {
            _3543 = true;
            break;
        }
        if ((_3370 + 1.0) < _3368.x)
        {
            _3543 = true;
            break;
        }
        _3543 = false;
        break;
    }
    float _3748;
    if (_3543)
    {
        discard_state = true;
        _3748 = 0.0;
    }
    else
    {
        _3748 = cbInstanceData._m0[_3210].w;
    }
    SV_Target.x = _3374;
    SV_Target.y = _3375;
    SV_Target.z = _3376;
    SV_Target.w = _3748;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3210].w;
    discard_exit();
}


