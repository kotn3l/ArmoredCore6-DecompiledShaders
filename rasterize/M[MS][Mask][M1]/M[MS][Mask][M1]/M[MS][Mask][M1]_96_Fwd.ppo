#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1480;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _345.x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[23u].w) + _395) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3803 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _420 = (_413 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _421 = (_413 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _422 = (_413 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _461 = _459.x;
    float _471 = dot(vec4(_461, _459.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _485 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _345.y) * 2.0) - ((((_461 - _471) * cbMtdParam._m0[23u].w) + _471) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3814 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _493 = (_486 * ((_439.x * cbMtdParam._m0[13u].x) - _420)) + _420;
    float _494 = (_486 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421;
    float _495 = (_486 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _555 = _551.z;
    float _562 = ((_534.x - _553) * _413) + _553;
    float _563 = ((_534.y - _554) * _413) + _554;
    float _564 = ((_534.z - _555) * _413) + _555;
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _589 = ((_576.z - _564) * _486) + _564;
    float _592 = ((((_576.x - _562) * _486) + _562) * 2.0) + (-1.0);
    float _594 = ((((_576.y - _563) * _486) + _563) * 2.0) + (-1.0);
    float _595 = dot(vec2(_592, _594), vec2(_592, _594));
    float _3825 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _600 = sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _626 = (((_614.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _592;
    float _627 = (((_614.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _594;
    float _630 = fma(_600, _247, fma(_627, _254, _626 * _240));
    float _633 = fma(_600, _248, fma(_627, _255, _626 * _241));
    float _636 = fma(_600, _249, fma(_627, _256, _626 * _242));
    float _640 = inversesqrt(dot(vec3(_630, _633, _636), vec3(_630, _633, _636)));
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _669 = _667.x;
    float _670 = 1.0 - _669;
    float _679 = (cbMtdParam._m0[19u].x + dot(vec4(_640 * _630, _640 * _633, _640 * _636, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_669 - _670) * cbMtdParam._m0[24u].z) + _670) * cbMtdParam._m0[21u].z);
    float _3836 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _680 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _682 = (-0.0) - cbMtdParam._m0[24u].x;
    float _684 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _684 : (isnan(_684) ? 1.0 : min(_684, 1.0));
    float _692 = _680 - ((_680 * TEXCOORD_8.x) * _685);
    float _693 = _680 - ((_680 * TEXCOORD_8.y) * _685);
    float _694 = _680 - ((_680 * TEXCOORD_8.z) * _685);
    float _701 = (_692 * ((_514.x * cbMtdParam._m0[18u].x) - _493)) + _493;
    float _702 = (_693 * ((_514.y * cbMtdParam._m0[18u].y) - _494)) + _494;
    float _703 = (_694 * ((_514.z * cbMtdParam._m0[18u].z) - _495)) + _495;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _717 = _715.x;
    float _718 = 1.0 - _717;
    float _744 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_717 - _718) * cbMtdParam._m0[24u].w) + _718) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3857 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _745 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _753 = ((((cbMtdParam._m0[10u].x - _701) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _745) + _701;
    float _754 = ((((cbMtdParam._m0[10u].y - _702) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _745) + _702;
    float _755 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _703)) * _745) + _703;
    vec4 _781 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _783 = _781.x;
    float _801 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _783) * _413) + _783;
    float _818 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _801) * _486) + _801;
    float _822 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _818) * cbMtdParam._m0[19u].z) + _818;
    float _824 = _822 - (_822 * _692);
    float _826 = _824 - (_824 * _745);
    float _830 = (cbMtdParam._m0[19u].w * (_614.z - _589)) + _589;
    vec4 _844 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _851 = (_844.x * 2.0) + (-1.0);
    float _852 = (_844.y * 2.0) + (-1.0);
    float _853 = dot(vec2(_851, _852), vec2(_851, _852));
    float _3868 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _861 = ((_844.z - _830) * _692) + _830;
    float _864 = ((cbMtdParam._m0[23u].x - _861) * _745) + _861;
    vec4 _883 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _889 = (_883.x * 2.0) + (-1.0);
    float _890 = (_883.y * 2.0) + (-1.0);
    float _891 = dot(vec2(_889, _890), vec2(_889, _890));
    float _3879 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _906 = ((sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _600) * _694) + _600;
    float _909 = (((_851 - _626) * _692) + _626) + (cbMtdParam._m0[21u].x * _626);
    float _910 = (((_852 - _627) * _693) + _627) + (cbMtdParam._m0[21u].x * _627);
    float _921 = (((_889 - _909) + (_909 * cbMtdParam._m0[22u].z)) * _745) + _909;
    float _922 = (((_890 - _910) + (_910 * cbMtdParam._m0[22u].z)) * _745) + _910;
    float _923 = (_745 * (sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) - _906)) + _906;
    float _927 = cbMtdParam._m0[22u].x + _614.w;
    float _930 = fma(_923, _247, fma(_922, _254, _921 * _240));
    float _933 = fma(_923, _248, fma(_922, _255, _921 * _241));
    float _936 = fma(_923, _249, fma(_922, _256, _921 * _242));
    float _940 = inversesqrt(dot(vec3(_930, _933, _936), vec3(_930, _933, _936)));
    float _941 = _940 * _930;
    float _942 = _940 * _933;
    float _943 = _940 * _936;
    float _3890 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _944 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _3912 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _3923 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _3934 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _3945 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _949 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _963 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1013 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1003);
    float _1014 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1003);
    float _1015 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1003);
    float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
    float _1020 = _1013 * _1019;
    float _1021 = _1014 * _1019;
    float _1022 = _1015 * _1019;
    float _1028 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1029 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1047 = fma(_943, cbSceneParam._m0[5u].z, fma(_942, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _941));
    float _1050 = fma(_943, cbSceneParam._m0[6u].z, fma(_942, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _941));
    float _1053 = fma(_943, cbSceneParam._m0[7u].z, fma(_942, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _941));
    uint _1067 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1073 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_1067].x;
    float _1074 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_1067].y;
    float _1075 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_1067].z;
    float _3956 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1079 = 1.0 - _949;
    float _1080 = _1076 * _1079;
    float _1081 = _1077 * _1079;
    float _1082 = _1078 * _1079;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _949;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _949;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _949;
    float _1090 = _1087 + 0.039999999105930328369140625;
    float _1092 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    vec4 _1102 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1028, cbSceneParam._m0[86u].y * _1029));
    float _1106 = ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * TEXCOORD_5.w) * _1102.x;
    float _1107 = dot(vec3(_941, _942, _943), vec3(_1020, _1021, _1022));
    float _1110 = _1107 * 2.0;
    float _1114 = (_1110 * _941) - _1020;
    float _1115 = (_1110 * _942) - _1021;
    float _1116 = (_1110 * _943) - _1022;
    float _1120 = abs(dot(vec3(_1020, _1021, _1022), vec3(_941, _942, _943)));
    float _3989 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1122 = sqrt(_944);
    float _1135 = exp2((_1122 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1122 * 3.0));
    float _1141 = (1.0 - _1135) * ((_1122 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1142 = _1135 * _1122;
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1479;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1204 = fma(_1178, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170));
        float _1208 = fma(_1178, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170));
        float _1212 = fma(_1178, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170));
        float _1237 = _1170 + _941;
        float _1238 = _1174 + _942;
        float _1239 = _1178 + _943;
        float _1249 = fma(_1239, cbModelParam._m0[26u].z, fma(_1238, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1237)) - _1204;
        float _1250 = fma(_1239, cbModelParam._m0[27u].z, fma(_1238, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1237)) - _1208;
        float _1251 = fma(_1239, cbModelParam._m0[28u].z, fma(_1238, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1237)) - _1212;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1204 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1208 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[34u].z) + ((((((_1212 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1307 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1273.x + (-0.5));
        float _1309 = _1307 * (_1273.y + (-0.5));
        float _1310 = _1307 * (_1273.z + (-0.5));
        float _1317 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1280.x + (-0.5));
        float _1319 = _1317 * (_1280.y + (-0.5));
        float _1320 = _1317 * (_1280.z + (-0.5));
        float _1327 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1287.x + (-0.5));
        float _1329 = _1327 * (_1287.y + (-0.5));
        float _1330 = _1327 * (_1287.z + (-0.5));
        float _1337 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1294.x + (-0.5));
        float _1339 = _1337 * (_1294.y + (-0.5));
        float _1340 = _1337 * (_1294.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1361 = (dot(vec3(_941, _942, _943), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1371 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4037 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1373 + 1.0))) + _1378) * _1341;
        float _1388 = _1309 * 0.5;
        float _1389 = _1319 * 0.5;
        float _1390 = _1329 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_941, _942, _943), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4070 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1415 + 1.0))) + _1420) * _1342;
        float _1430 = _1310 * 0.5;
        float _1431 = _1320 * 0.5;
        float _1432 = _1330 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_941, _942, _943), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4103 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1457 + 1.0))) + _1462) * _1343;
        _1479 = _1310;
        _1481 = _1309;
        _1482 = _1308;
        _1483 = _1320;
        _1484 = _1319;
        _1485 = _1318;
        _1486 = _1330;
        _1487 = _1329;
        _1488 = _1328;
        _1489 = _1343;
        _1490 = _1342;
        _1491 = _1341;
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1494 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1480;
        _1481 = _1480;
        _1482 = _1480;
        _1483 = _1480;
        _1484 = _1480;
        _1485 = _1480;
        _1486 = _1480;
        _1487 = _1480;
        _1488 = _1480;
        _1489 = _1480;
        _1490 = _1480;
        _1491 = _1480;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1518 = fma(_1178, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170));
        float _1522 = fma(_1178, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170));
        float _1526 = fma(_1178, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170));
        float _1549 = _1170 + _941;
        float _1550 = _1174 + _942;
        float _1551 = _1178 + _943;
        float _1561 = fma(_1551, cbModelParam._m0[30u].z, fma(_1550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1549)) - _1518;
        float _1562 = fma(_1551, cbModelParam._m0[31u].z, fma(_1550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1549)) - _1522;
        float _1563 = fma(_1551, cbModelParam._m0[32u].z, fma(_1550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1549)) - _1526;
        float _1567 = inversesqrt(dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563)));
        float _1580 = ((_1567 * _1561) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1518 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1567 * _1562) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1522 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1567 * _1563) / cbModelParam._m0[35u].z) + ((((((_1526 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        float _1617 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1584.x + (-0.5));
        float _1619 = _1617 * (_1584.y + (-0.5));
        float _1620 = _1617 * (_1584.z + (-0.5));
        float _1627 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1591.x + (-0.5));
        float _1629 = _1627 * (_1591.y + (-0.5));
        float _1630 = _1627 * (_1591.z + (-0.5));
        float _1637 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1598.x + (-0.5));
        float _1639 = _1637 * (_1598.y + (-0.5));
        float _1640 = _1637 * (_1598.z + (-0.5));
        float _1647 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1605.x + (-0.5));
        float _1649 = _1647 * (_1605.y + (-0.5));
        float _1650 = _1647 * (_1605.z + (-0.5));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = _1618 * 0.5;
        float _1655 = _1628 * 0.5;
        float _1656 = _1638 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_941, _942, _943), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4166 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1681 + 1.0))) + _1686) * _1651;
        float _1696 = _1619 * 0.5;
        float _1697 = _1629 * 0.5;
        float _1698 = _1639 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_941, _942, _943), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4199 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1723 + 1.0))) + _1728) * _1652;
        float _1738 = _1620 * 0.5;
        float _1739 = _1630 * 0.5;
        float _1740 = _1640 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_941, _942, _943), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4232 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1765 + 1.0))) + _1770) * _1653;
        _1787 = _1620;
        _1788 = _1619;
        _1789 = _1618;
        _1790 = _1630;
        _1791 = _1629;
        _1792 = _1628;
        _1793 = _1640;
        _1794 = _1639;
        _1795 = _1638;
        _1796 = _1653;
        _1797 = _1652;
        _1798 = _1651;
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
    }
    else
    {
        _1787 = _1480;
        _1788 = _1480;
        _1789 = _1480;
        _1790 = _1480;
        _1791 = _1480;
        _1792 = _1480;
        _1793 = _1480;
        _1794 = _1480;
        _1795 = _1480;
        _1796 = _1480;
        _1797 = _1480;
        _1798 = _1480;
        _1799 = 0.0;
        _1800 = 0.0;
        _1801 = 0.0;
    }
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1492)) + _1492;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1493)) + _1493;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1494)) + _1494;
    float _1834 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1811));
    float _1855 = _1114 * 0.5;
    float _1856 = _1115 * 0.5;
    float _1857 = _1116 * 0.5;
    float _1858 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1861 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1864 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1898;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1871 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1479, _1483, _1486, _1489));
        float _1875 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1481, _1484, _1487, _1490));
        float _1879 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1482, _1485, _1488, _1491));
        float _1886 = dot(vec4(cbModelParam._m0[39u]), vec4(_1855, _1856, _1857, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1909;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1900 = dot(vec4(cbModelParam._m0[40u]), vec4(_1855, _1856, _1857, 1.0));
        _1909 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1909 = 1.0;
    }
    float _1913 = (_1909 * cbModelParam._m0[1u].x) + (_1898 * (1.0 - cbModelParam._m0[1u].x));
    float _1923 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _944);
    float _1924 = isnan(_1923) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1923 : min(cbModelParam._m0[25u].z, _1923));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1971 = fma(_1178, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1170)) + cbModelParam._m0[13u].w;
        float _1975 = fma(_1178, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1170)) + cbModelParam._m0[14u].w;
        float _1979 = fma(_1178, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1170)) + cbModelParam._m0[15u].w;
        float _1982 = fma(_1116, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1114));
        float _1985 = fma(_1116, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1114));
        float _1988 = fma(_1116, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1114));
        float _2016;
        if (_1982 > 0.0)
        {
            _2016 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2016 = frontier_phi_14_12_ladder;
        }
        float _2218;
        if (_1985 > 0.0)
        {
            _2218 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2218 = frontier_phi_23_19_ladder;
        }
        float _2472;
        if (_1988 > 0.0)
        {
            _2472 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2472 = frontier_phi_35_30_ladder;
        }
        float _2474 = isnan(_2218) ? _2016 : (isnan(_2016) ? _2218 : min(_2016, _2218));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1982) + _1971;
        float _2480 = (_2475 * _1985) + _1975;
        float _2481 = (_2475 * _1988) + _1979;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2482;
        float _2486 = _2482 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 > _2486) || ((_2480 < _2484) || ((_2479 < _2484) || (_2479 > _2486))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2481, cbModelParam._m0[9u].z, fma(_2480, cbModelParam._m0[9u].y, _2479 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2481, cbModelParam._m0[10u].z, fma(_2480, cbModelParam._m0[10u].y, _2479 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2481, cbModelParam._m0[11u].z, fma(_2480, cbModelParam._m0[11u].y, _2479 * cbModelParam._m0[11u].x))), _1924);
            frontier_phi_13_35_ladder = _2609.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2609.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2609.x * cbModelParam._m0[1u].y;
        }
        _2004 = frontier_phi_13_35_ladder_2;
        _2006 = frontier_phi_13_35_ladder_1;
        _2008 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1114, _1115, _1116), _1924);
        _2004 = _1992.x * cbModelParam._m0[1u].y;
        _2006 = _1992.y * cbModelParam._m0[1u].y;
        _2008 = _1992.z * cbModelParam._m0[1u].y;
    }
    float _2012 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _944);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2012 : min(cbModelParam._m0[25u].w, _2012));
    float _2102;
    float _2104;
    float _2106;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2066 = fma(_1178, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1170)) + cbModelParam._m0[21u].w;
        float _2070 = fma(_1178, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1170)) + cbModelParam._m0[22u].w;
        float _2074 = fma(_1178, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1170)) + cbModelParam._m0[23u].w;
        float _2077 = fma(_1116, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1114));
        float _2080 = fma(_1116, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1114));
        float _2083 = fma(_1116, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1114));
        float _2223;
        if (_2077 > 0.0)
        {
            _2223 = abs((1.0 - _2066) / _2077);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2066 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2223 = frontier_phi_25_21_ladder;
        }
        float _2499;
        if (_2080 > 0.0)
        {
            _2499 = abs((1.0 - _2070) / _2080);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2070 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2499 = frontier_phi_37_32_ladder;
        }
        float _2712;
        if (_2083 > 0.0)
        {
            _2712 = abs((1.0 - _2074) / _2083);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2074 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2712 = frontier_phi_46_43_ladder;
        }
        float _2714 = isnan(_2499) ? _2223 : (isnan(_2223) ? _2499 : min(_2223, _2499));
        float _2715 = isnan(_2712) ? _2714 : (isnan(_2714) ? _2712 : min(_2714, _2712));
        float _2719 = (_2715 * _2077) + _2066;
        float _2720 = (_2715 * _2080) + _2070;
        float _2721 = (_2715 * _2083) + _2074;
        float _2722 = _2715 * 9.9999997473787516355514526367188e-05;
        float _2723 = (-1.0) - _2722;
        float _2725 = _2722 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2721 > _2725) || ((_2721 < _2723) || ((_2720 > _2725) || ((_2720 < _2723) || ((_2719 < _2723) || (_2719 > _2725))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2721, cbModelParam._m0[17u].z, fma(_2720, cbModelParam._m0[17u].y, _2719 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2721, cbModelParam._m0[18u].z, fma(_2720, cbModelParam._m0[18u].y, _2719 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2721, cbModelParam._m0[19u].z, fma(_2720, cbModelParam._m0[19u].y, _2719 * cbModelParam._m0[19u].x))), _2013);
            frontier_phi_22_46_ladder = _2920.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2920.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2920.x * cbModelParam._m0[1u].z;
        }
        _2102 = frontier_phi_22_46_ladder_2;
        _2104 = frontier_phi_22_46_ladder_1;
        _2106 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1114, _1115, _1116), _2013);
        _2102 = _2086.x * cbModelParam._m0[1u].z;
        _2104 = _2086.y * cbModelParam._m0[1u].z;
        _2106 = _2086.z * cbModelParam._m0[1u].z;
    }
    float _2119 = (((_1141 * _1090) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2121 = (((_1141 * _1092) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2123 = (((_1141 * _1093) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2126 = fma(_2123, cbSceneParam._m0[89u].z, fma(_2121, cbSceneParam._m0[89u].y, _2119 * cbSceneParam._m0[89u].x));
    float _2129 = fma(_2123, cbSceneParam._m0[90u].z, fma(_2121, cbSceneParam._m0[90u].y, _2119 * cbSceneParam._m0[90u].x));
    float _2132 = fma(_2123, cbSceneParam._m0[91u].z, fma(_2121, cbSceneParam._m0[91u].y, _2119 * cbSceneParam._m0[91u].x));
    uvec4 _2142 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2144 = _2142.x * 14u;
    uint _2145 = _2144 + 13u;
    float _2152 = _1106 + (-1.0);
    float _2157 = (cbLight._m0[_2145].x * _2152) + 1.0;
    float _2158 = (cbLight._m0[_2145].y * _2152) + 1.0;
    float _2159 = (cbLight._m0[_2145].z * _2152) + 1.0;
    float _2160 = (cbLight._m0[_2145].w * _2152) + 1.0;
    uint _2161 = _2144 + 5u;
    float _2167 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
    uint _2171 = _2144 + 4u;
    float _2177 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2181 = _2144 | 1u;
    float _2192 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_941, _942, _943));
    float _2195 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_941, _942, _943));
    float _4368 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _4379 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2200 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2202 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
    float _2209 = ((cbLight._m0[_2161].x * _2167) * _2202) + ((cbLight._m0[_2171].x * _2177) * _2200);
    float _2210 = ((_2167 * cbLight._m0[_2161].y) * _2202) + ((_2177 * cbLight._m0[_2171].y) * _2200);
    float _2211 = ((_2167 * cbLight._m0[_2161].z) * _2202) + ((_2177 * cbLight._m0[_2171].z) * _2200);
    uvec4 _2215 = floatBitsToUint(cbLight._m0[_2144 + 12u]);
    bool _2217 = _2215.x == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2217)
    {
        _2228 = _2209;
        _2230 = _2210;
        _2232 = _2211;
    }
    else
    {
        uint _2236 = _2144 + 6u;
        float _2252 = (dot(vec3(cbLight._m0[_2144 + 2u].xyz), vec3(_941, _942, _943)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4390 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2255 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2228 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2209;
        _2230 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2210;
        _2232 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2211;
    }
    bool _2235 = _2215.y == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2235)
    {
        _2273 = _2228;
        _2275 = _2230;
        _2277 = _2232;
    }
    else
    {
        uint _2443 = _2144 + 7u;
        float _2459 = (dot(vec3(cbLight._m0[_2144 + 3u].xyz), vec3(_941, _942, _943)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4406 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2462 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2273 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2228;
        _2275 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2230;
        _2277 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2232;
    }
    uint _2280 = _2144 + 8u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _944) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2144].x + _1020;
    float _2296 = cbLight._m0[_2144].y + _1021;
    float _2297 = cbLight._m0[_2144].z + _1022;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2144].xyz));
    float _4422 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _4433 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _2309 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2310 = dot(vec3(_941, _942, _943), vec3(_2302, _2303, _2304));
    float _4444 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2314 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2302, _2303, _2304));
    float _4455 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2318 = _2294 * _2294;
    float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
    float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2331 = 0.959999978542327880859375 - _1087;
    float _2333 = 0.959999978542327880859375 - _1088;
    float _2334 = 0.959999978542327880859375 - _1089;
    float _2341 = 1.0 - _2294;
    float _2352 = (0.5 / (((_2309 * ((_2308 * _2341) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2341) + _2294) * _2308))) * _2308;
    float _4466 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
    uint _2365 = _2144 + 9u;
    float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _944) * 0.949999988079071044921875);
    float _2377 = _2376 * _2376;
    float _2378 = cbLight._m0[_2181].x + _1020;
    float _2379 = cbLight._m0[_2181].y + _1021;
    float _2380 = cbLight._m0[_2181].z + _1022;
    float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
    float _2385 = _2384 * _2378;
    float _2386 = _2384 * _2379;
    float _2387 = _2384 * _2380;
    float _2388 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2181].xyz));
    float _4477 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2392 = dot(vec3(_941, _942, _943), vec3(_2385, _2386, _2387));
    float _4488 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2396 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2385, _2386, _2387));
    float _4499 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2400 = _2377 * _2377;
    float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
    float _2411 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
    float _2418 = 1.0 - _2377;
    float _2428 = (0.5 / (((_2309 * ((_2391 * _2418) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2418) + _2377) * _2391))) * _2391;
    float _4510 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
    float _2440 = (((((_2411 * _2331) + _1090) * cbLight._m0[_2365].x) * _2430) * _2167) + (((((_2330 * _2331) + _1090) * cbLight._m0[_2280].x) * _2354) * _2177);
    float _2441 = (((((_2411 * _2333) + _1092) * cbLight._m0[_2365].y) * _2430) * _2167) + (((((_2330 * _2333) + _1092) * cbLight._m0[_2280].y) * _2354) * _2177);
    float _2442 = (((((_2411 * _2334) + _1093) * cbLight._m0[_2365].z) * _2430) * _2167) + (((((_2330 * _2334) + _1093) * cbLight._m0[_2280].z) * _2354) * _2177);
    float _2504;
    float _2506;
    float _2508;
    if (_2217)
    {
        _2504 = _2440;
        _2506 = _2441;
        _2508 = _2442;
    }
    else
    {
        uint _2510 = _2144 + 2u;
        uint _2514 = _2144 + 10u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _944) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _1020;
        float _2531 = cbLight._m0[_2510].y + _1021;
        float _2532 = cbLight._m0[_2510].z + _1022;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2510].xyz));
        float _4521 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2544 = dot(vec3(_941, _942, _943), vec3(_2537, _2538, _2539));
        float _4532 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4543 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2570 = 1.0 - _2529;
        float _2580 = (0.5 / (((_2309 * ((_2543 * _2570) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2570) + _2529) * _2543))) * _2543;
        float _4554 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2504 = (((((_2563 * _2331) + _1090) * cbLight._m0[_2514].x) * _2582) * _2583) + _2440;
        _2506 = (((((_2563 * _2333) + _1092) * cbLight._m0[_2514].y) * _2582) * _2583) + _2441;
        _2508 = (((((_2563 * _2334) + _1093) * cbLight._m0[_2514].z) * _2582) * _2583) + _2442;
    }
    float _2618;
    float _2620;
    float _2622;
    if (_2235)
    {
        _2618 = _2504;
        _2620 = _2506;
        _2622 = _2508;
    }
    else
    {
        uint _2629 = _2144 + 3u;
        uint _2633 = _2144 + 11u;
        float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2629].w)) * _944) * 0.949999988079071044921875);
        float _2648 = _2647 * _2647;
        float _2649 = cbLight._m0[_2629].x + _1020;
        float _2650 = cbLight._m0[_2629].y + _1021;
        float _2651 = cbLight._m0[_2629].z + _1022;
        float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
        float _2656 = _2655 * _2649;
        float _2657 = _2655 * _2650;
        float _2658 = _2655 * _2651;
        float _2659 = dot(vec3(_941, _942, _943), vec3(cbLight._m0[_2629].xyz));
        float _4570 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2663 = dot(vec3(_941, _942, _943), vec3(_2656, _2657, _2658));
        float _4581 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2667 = dot(vec3(cbLight._m0[_2629].xyz), vec3(_2656, _2657, _2658));
        float _4592 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2671 = _2648 * _2648;
        float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
        float _2682 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
        float _2689 = 1.0 - _2648;
        float _2699 = (0.5 / (((_2309 * ((_2662 * _2689) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2689) + _2648) * _2662))) * _2662;
        float _4603 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2701 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
        float _2702 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
        _2618 = (((((_2682 * _2331) + _1090) * cbLight._m0[_2633].x) * _2701) * _2702) + _2504;
        _2620 = (((((_2682 * _2333) + _1092) * cbLight._m0[_2633].y) * _2701) * _2702) + _2506;
        _2622 = (((((_2682 * _2334) + _1093) * cbLight._m0[_2633].z) * _2701) * _2702) + _2508;
    }
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_2142.y == 0u)
    {
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2777;
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2777;
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2777;
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.x;
        uint _2804 = uint((float(_2792.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1029) / _2793))) + floor(float(uint(cbSceneParam._m0[85u].x * _1028) / _2793)));
        float _2814 = (log2(_2780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2815 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        uint _2818 = uint(isnan(14.0) ? _2815 : (isnan(_2815) ? 14.0 : min(_2815, 14.0)));
        uvec4 _2823 = texelFetch(g_lightClusterGridBuffer, int(((_2818 << 2u) + (_2804 << 6u)) >> 2u));
        uint _2824 = _2823.x;
        uint _2825 = _2792.z;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        if (((((1u << ((_2825 >> 4u) & 15u)) + 4294967295u) & _2824) == 0u) || ((_2825 & 240u) == 0u))
        {
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
        }
        else
        {
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            uint _3075 = 0u;
            uint _3084;
            bool _3085;
            for (;;)
            {
                _3084 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                _3085 = _3084 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3085)
                {
                    frontier_phi_61_pred = _3069;
                    frontier_phi_61_pred_1 = _3074;
                    frontier_phi_61_pred_2 = _3073;
                    frontier_phi_61_pred_3 = _3072;
                    frontier_phi_61_pred_4 = _3071;
                    frontier_phi_61_pred_5 = _3070;
                }
                else
                {
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    uint _3199;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3084;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    for (;;)
                    {
                        uint _3203 = uint(findLSB(_3199)) + (_3075 << 5u);
                        uint _3200 = (_3199 + 4294967295u) & _3199;
                        uint _3205 = _3203 * 48u;
                        vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 3u)).x));
                        uint _3225 = (_3203 * 48u) + 4u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 3u)).x));
                        uint _3244 = (_3203 * 48u) + 8u;
                        vec3 _3255 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x));
                        float _3259 = _3219.x - _2778;
                        float _3260 = _3219.y - _2779;
                        float _3261 = _3219.z - _2780;
                        float _3262 = dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261));
                        float _3265 = inversesqrt(_3262);
                        float _3266 = _3265 * _3259;
                        float _3267 = _3265 * _3260;
                        float _3268 = _3265 * _3261;
                        float _3269 = dot(vec3(_1047, _1050, _1053), vec3(_3266, _3267, _3268));
                        float _3274 = 1.0 - (_3262 * _3219.w);
                        float _4629 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3275 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3276 = sqrt(_3262) * _3238.w;
                        float _3279 = 1.39999997615814208984375 / (_3276 + 1.39999997615814208984375);
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3269) + _3280;
                        float _3286 = _3276 * _3276;
                        float _3290 = ((isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))) * _3275) / ((_3286 * 0.699999988079071044921875) + 1.0);
                        float _3294 = (-0.0) - _2778;
                        float _3295 = (-0.0) - _2779;
                        float _3296 = (-0.0) - _2780;
                        float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                        float _3301 = _3300 * _3294;
                        float _3302 = _3300 * _3295;
                        float _3303 = _3300 * _3296;
                        float _3311 = exp2(log2(1.0 / ((_3286 * 3.5) + 5.0)) * 0.25);
                        float _3312 = 1.0 - _1122;
                        float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                        float _3320 = _3319 * _3319;
                        float _3321 = _3320 * _3320;
                        float _3322 = _3301 + _3266;
                        float _3323 = _3302 + _3267;
                        float _3324 = _3303 + _3268;
                        float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                        float _3332 = dot(vec3(_1047, _1050, _1053), vec3(_3301, _3302, _3303));
                        float _4645 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3336 = dot(vec3(_1047, _1050, _1053), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                        float _4656 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3339 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                        float _3344 = _3279 * _3320;
                        float _3345 = _3344 * _3344;
                        float _3348 = ((1.0 - _3345) * _3269) + _3345;
                        float _4667 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3350 = 1.0 - _3320;
                        float _3360 = (0.5 / (((_3349 * ((_3335 * _3350) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3349 * _3350) + _3320) * _3335))) * _3349;
                        float _4678 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3371 = (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3343 * _3343) * ((_3286 * 2.1991131305694580078125) + 3.141590118408203125))) * _3275;
                        _3128 = (_3290 * _3238.x) + _3196;
                        _3129 = (_3290 * _3238.y) + _3197;
                        _3130 = (_3290 * _3238.z) + _3198;
                        _3125 = (_3371 * _3255.x) + _3193;
                        _3126 = (_3371 * _3255.y) + _3194;
                        _3127 = (_3371 * _3255.z) + _3195;
                        if (_3200 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3200;
                        }
                    }
                    frontier_phi_61_pred = _3125;
                    frontier_phi_61_pred_1 = _3130;
                    frontier_phi_61_pred_2 = _3129;
                    frontier_phi_61_pred_3 = _3128;
                    frontier_phi_61_pred_4 = _3127;
                    frontier_phi_61_pred_5 = _3126;
                }
                _2926 = frontier_phi_61_pred;
                _2936 = frontier_phi_61_pred_1;
                _2934 = frontier_phi_61_pred_2;
                _2932 = frontier_phi_61_pred_3;
                _2930 = frontier_phi_61_pred_4;
                _2928 = frontier_phi_61_pred_5;
                uint _3076 = _3075 + 1u;
                if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3069 = _2926;
                    _3070 = _2928;
                    _3071 = _2930;
                    _3072 = _2932;
                    _3073 = _2934;
                    _3074 = _2936;
                    _3075 = _3076;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
        }
        uvec4 _2939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2940 = _2939.z;
        uint _2942 = (_2940 >> 8u) & 15u;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        if (((4294967295u << _2942) & _2824) == 0u)
        {
            _3037 = _2925;
            _3039 = _2927;
            _3041 = _2929;
            _3043 = _2931;
            _3045 = _2933;
            _3047 = _2935;
        }
        else
        {
            float _3062 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
            float _3063 = _3062 * _2778;
            float _3064 = _3062 * _2779;
            float _3065 = _3062 * _2780;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2942 < ((_2940 >> 12u) & 15u))
            {
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3176 = _2925;
                float _3177 = _2927;
                float _3178 = _2929;
                float _3179 = _2931;
                float _3180 = _2933;
                float _3181 = _2935;
                uint _3182 = _2942;
                uint _3191;
                bool _3192;
                for (;;)
                {
                    _3191 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3182 << 2u)) >> 2u)).x;
                    _3192 = _3191 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3192)
                    {
                        frontier_phi_67_pred = _3179;
                        frontier_phi_67_pred_1 = _3180;
                        frontier_phi_67_pred_2 = _3181;
                        frontier_phi_67_pred_3 = _3178;
                        frontier_phi_67_pred_4 = _3177;
                        frontier_phi_67_pred_5 = _3176;
                    }
                    else
                    {
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3389 = _3176;
                        float _3390 = _3177;
                        float _3391 = _3178;
                        float _3392 = _3179;
                        float _3393 = _3180;
                        float _3394 = _3181;
                        uint _3395 = _3191;
                        uint _3396;
                        vec4 _3421;
                        float _3422;
                        vec4 _3437;
                        vec3 _3449;
                        vec4 _3464;
                        vec4 _3479;
                        float _3525;
                        bool _3526;
                        for (;;)
                        {
                            uint _3406 = ((_3182 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3395));
                            _3396 = (_3395 + 4294967295u) & _3395;
                            uint _3408 = _3406 * 40u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            _3422 = _3421.w;
                            uint _3424 = (_3406 * 40u) + 4u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3406 * 40u) + 8u;
                            _3449 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x));
                            uint _3451 = (_3406 * 40u) + 16u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3466 = (_3406 * 40u) + 20u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3481 = (_3406 * 40u) + 24u;
                            vec4 _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3500 = (_3406 * 40u) + 28u;
                            vec4 _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3525 = fma(_2780, _3513.z, fma(_2779, _3513.y, _3513.x * _2778)) + _3513.w;
                            _3526 = !((fma(_2780, _3494.z, fma(_2779, _3494.y, _3494.x * _2778)) + _3494.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3526)
                            {
                                float _3553 = _3421.x - _2778;
                                float _3554 = _3421.y - _2779;
                                float _3555 = _3421.z - _2780;
                                float _3556 = dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555));
                                float _3559 = inversesqrt(_3556);
                                float _3560 = _3559 * _3553;
                                float _3561 = _3559 * _3554;
                                float _3562 = _3559 * _3555;
                                float _3566 = 1.0 - (_3556 / (_3422 * _3422));
                                float _4689 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3571 = sqrt(_3556) * _3437.w;
                                float _3573 = 1.39999997615814208984375 / (_3571 + 1.39999997615814208984375);
                                float _3574 = _3573 * _3573;
                                float _3577 = ((1.0 - _3574) * dot(vec3(_3560, _3561, _3562), vec3(_1047, _1050, _1053))) + _3574;
                                float _3580 = _3571 * _3571;
                                float _3584 = (fma(_2780, _3464.z, fma(_2779, _3464.y, _3464.x * _2778)) + _3464.w) / _3525;
                                float _3585 = (fma(_2780, _3479.z, fma(_2779, _3479.y, _3479.x * _2778)) + _3479.w) / _3525;
                                float _3589 = 1.0 - dot(vec2(_3584, _3585), vec2(_3584, _3585));
                                float _4705 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3591 = _3590 * (((isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0))) * _3567) / ((_3580 * 0.699999988079071044921875) + 1.0));
                                float _3603 = exp2(log2(1.0 / ((_3580 * 3.5) + 5.0)) * 0.25);
                                float _3604 = 1.0 - _1122;
                                float _3611 = sqrt(1.0 - ((1.0 - (_3604 * _3604)) * (1.0 - (_3603 * _3603))));
                                float _3612 = _3611 * _3611;
                                float _3613 = _3612 * _3612;
                                float _3614 = _3560 - _3063;
                                float _3615 = _3561 - _3064;
                                float _3616 = _3562 - _3065;
                                float _3620 = inversesqrt(dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616)));
                                float _3624 = dot(vec3(_1047, _1050, _1053), vec3((-0.0) - _3063, (-0.0) - _3064, (-0.0) - _3065));
                                float _4716 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3628 = dot(vec3(_1047, _1050, _1053), vec3(_3620 * _3614, _3620 * _3615, _3620 * _3616));
                                float _4727 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3631 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3635 = ((_3631 * _3631) * (_3613 + (-1.0))) + 1.0;
                                float _3636 = _3573 * _3612;
                                float _3637 = _3636 * _3636;
                                float _3643 = ((1.0 - _3637) * dot(vec3(_1047, _1050, _1053), vec3(_3560, _3561, _3562))) + _3637;
                                float _4738 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3644 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3645 = 1.0 - _3612;
                                float _3655 = (0.5 / (((_3644 * ((_3627 * _3645) + _3612)) + 9.9999999392252902907785028219223e-09) + (((_3644 * _3645) + _3612) * _3627))) * _3644;
                                float _4749 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3665 = (_3590 * _3567) * (((_3613 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3635 * _3635) * ((_3580 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3665 * _3449.x;
                                frontier_phi_73_pred_1 = _3665 * _3449.y;
                                frontier_phi_73_pred_2 = _3591 * _3437.z;
                                frontier_phi_73_pred_3 = _3591 * _3437.y;
                                frontier_phi_73_pred_4 = _3591 * _3437.x;
                                frontier_phi_73_pred_5 = _3665 * _3449.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3669 = frontier_phi_73_pred;
                            _3670 = frontier_phi_73_pred_1;
                            _3674 = frontier_phi_73_pred_2;
                            _3673 = frontier_phi_73_pred_3;
                            _3672 = frontier_phi_73_pred_4;
                            _3671 = frontier_phi_73_pred_5;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            if (_3396 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3396;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3379;
                        frontier_phi_67_pred_1 = _3380;
                        frontier_phi_67_pred_2 = _3381;
                        frontier_phi_67_pred_3 = _3378;
                        frontier_phi_67_pred_4 = _3377;
                        frontier_phi_67_pred_5 = _3376;
                    }
                    _3044 = frontier_phi_67_pred;
                    _3046 = frontier_phi_67_pred_1;
                    _3048 = frontier_phi_67_pred_2;
                    _3042 = frontier_phi_67_pred_3;
                    _3040 = frontier_phi_67_pred_4;
                    _3038 = frontier_phi_67_pred_5;
                    uint _3183 = _3182 + 1u;
                    if (_3183 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3176 = _3038;
                        _3177 = _3040;
                        _3178 = _3042;
                        _3179 = _3044;
                        _3180 = _3046;
                        _3181 = _3048;
                        _3182 = _3183;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3046;
                frontier_phi_55_56_ladder_1 = _3048;
                frontier_phi_55_56_ladder_2 = _3044;
                frontier_phi_55_56_ladder_3 = _3042;
                frontier_phi_55_56_ladder_4 = _3040;
                frontier_phi_55_56_ladder_5 = _3038;
            }
            else
            {
                frontier_phi_55_56_ladder = _2933;
                frontier_phi_55_56_ladder_1 = _2935;
                frontier_phi_55_56_ladder_2 = _2931;
                frontier_phi_55_56_ladder_3 = _2929;
                frontier_phi_55_56_ladder_4 = _2927;
                frontier_phi_55_56_ladder_5 = _2925;
            }
            _3037 = frontier_phi_55_56_ladder_5;
            _3039 = frontier_phi_55_56_ladder_4;
            _3041 = frontier_phi_55_56_ladder_3;
            _3043 = frontier_phi_55_56_ladder_2;
            _3045 = frontier_phi_55_56_ladder;
            _3047 = frontier_phi_55_56_ladder_1;
        }
        float _3052 = isnan(1.0) ? _1106 : (isnan(_1106) ? 1.0 : min(_1106, 1.0));
        _2837 = (_3052 * _3043) + _2273;
        _2839 = (_3052 * _3045) + _2275;
        _2841 = (_3052 * _3047) + _2277;
        _2843 = ((_3037 * _1090) * _3052) + _2618;
        _2845 = ((_3039 * _1092) * _3052) + _2620;
        _2847 = ((_3041 * _1093) * _3052) + _2622;
    }
    else
    {
        _2837 = _2273;
        _2839 = _2275;
        _2841 = _2277;
        _2843 = _2618;
        _2845 = _2620;
        _2847 = _2622;
    }
    float _4765 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _4776 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _4787 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    uint _2867 = _259 + 6u;
    float _2875 = _1028 / cbSceneParam._m0[86u].x;
    float _2876 = _1029 / cbSceneParam._m0[86u].y;
    vec4 _2890 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, (log2((isnan(cbSceneParam._m0[77u].w) ? _963 : (isnan(_963) ? cbSceneParam._m0[77u].w : min(_963, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2892 = _2890.x;
    float _2893 = _2890.y;
    float _2894 = _2890.z;
    float _2895 = _2890.w;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    if (_963 > cbSceneParam._m0[78u].w)
    {
        float _2950 = isnan(_963) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _963 : min(cbSceneParam._m0[80u].w, _963));
        float _2951 = _2950 / _963;
        float _2962 = _2951 * _1013;
        float _2963 = _1014 * _2951;
        float _2964 = (-0.0) - _2963;
        float _2965 = _2951 * _1015;
        float _2967 = (cbSceneParam._m0[77u].w * _2964) / _2950;
        float _2968 = _2967 + cbSceneParam._m0[79u].w;
        float _2969 = cbSceneParam._m0[79u].w - _2963;
        float _2975 = sqrt(((_2962 * _2962) + (_2963 * _2963)) + (_2965 * _2965));
        float _2978 = (1.0 - (cbSceneParam._m0[77u].w / _2950)) * _2975;
        float _2983 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2985 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3138;
        if (abs((_2964 - _2967) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3138 = ((((_2968 > 0.0) ? exp2(_2983 * _2968) : (2.0 - exp2(_2985 * _2968))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2978;
        }
        else
        {
            float _3098 = 1.0 / cbSceneParam._m0[80u].x;
            float _3099 = isnan(_2969) ? _2968 : (isnan(_2968) ? _2969 : max(_2968, _2969));
            float _3100 = isnan(_2969) ? _2968 : (isnan(_2968) ? _2969 : min(_2968, _2969));
            float _3109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : min(_3099, 0.0));
            float _3110 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : min(_3100, 0.0));
            _3138 = ((abs(_2975 / _2964) * cbSceneParam._m0[80u].y) * ((((_3109 - _3110) * 2.0) - ((exp2(_2983 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0)))) - exp2(_2983 * (isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))))) * _3098)) - ((exp2(_2985 * _3109) - exp2(_2985 * _3110)) * _3098))) + (_2978 * cbSceneParam._m0[80u].z);
        }
        vec4 _3140 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, 1.0), 0.0);
        float _3149 = exp2((_3138 * (-1.44269502162933349609375)) * (1.0 - _3140.w));
        float _3150 = log2(_3149);
        float _3166 = log2(_2895);
        _2987 = (exp2(_3166 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3150 * cbSceneParam._m0[78u].x)) * _3140.x) / cbSceneParam._m0[78u].x)) + _2892;
        _2989 = (exp2(_3166 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3150 * cbSceneParam._m0[78u].y)) * _3140.y) / cbSceneParam._m0[78u].y)) + _2893;
        _2991 = (exp2(_3166 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3150 * cbSceneParam._m0[78u].z)) * _3140.z) / cbSceneParam._m0[78u].z)) + _2894;
        _2993 = _3149 * _2895;
    }
    else
    {
        _2987 = _2892;
        _2989 = _2893;
        _2991 = _2894;
        _2993 = _2895;
    }
    float _3005 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3006 = _3005 == 3.0;
    float _3007 = log2(_2993);
    float _3014 = exp2(_3007 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2837 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1106))) + ((_2843 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3015 = exp2(_3007 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2839 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1106))) + ((_2845 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3016 = exp2(_3007 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2841 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1106))) + ((_2847 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1913)) * cbPerFrame._m0[3u].x));
    float _3025 = (_3005 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3025 * (_3006 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2987)));
    SV_Target.y = _3025 * (_3006 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2989)));
    SV_Target.z = _3025 * (_3006 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2991)));
    SV_Target.w = cbInstanceData._m0[_2867].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2867].w;
}


