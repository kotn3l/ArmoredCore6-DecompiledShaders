#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1325;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3933 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3944 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3955 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[23u].w) + _417) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3966 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _442 = (_435 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _443 = (_435 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _444 = (_435 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _448 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _442;
    float _451 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _443;
    float _454 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _444;
    float _461 = ((_442 - _448) * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) + _448;
    float _462 = ((_443 - _451) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) + _451;
    float _463 = ((_444 - _454) * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) + _454;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _550 = _546.z;
    float _559 = ((_529.z - _550) * _435) + _550;
    float _562 = ((((_529.x - _548) * _435) + _548) * 2.0) + (-1.0);
    float _563 = ((((_529.y - _549) * _435) + _549) * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3977 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _601 = (_562 + ((((_502.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_589.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _602 = (_563 + ((((_502.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_589.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _605 = fma(_569, _239, fma(_602, _246, _601 * _232));
    float _608 = fma(_569, _240, fma(_602, _247, _601 * _233));
    float _611 = fma(_569, _241, fma(_602, _248, _601 * _234));
    float _615 = inversesqrt(dot(vec3(_605, _608, _611), vec3(_605, _608, _611)));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _644 = _642.x;
    float _645 = 1.0 - _644;
    float _654 = (cbMtdParam._m0[19u].x + dot(vec4(_615 * _605, _615 * _608, _615 * _611, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_644 - _645) * cbMtdParam._m0[24u].z) + _645) * cbMtdParam._m0[21u].z);
    float _3988 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _662 = (_655 * ((_482.x * cbMtdParam._m0[18u].x) - _461)) + _461;
    float _663 = (_655 * ((_482.y * cbMtdParam._m0[18u].y) - _462)) + _462;
    float _664 = (_655 * ((_482.z * cbMtdParam._m0[18u].z) - _463)) + _463;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _692 = _690.x;
    float _710 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _692) * _435) + _692;
    float _714 = ((_676.x - _710) * cbMtdParam._m0[19u].z) + _710;
    float _716 = _714 - (_714 * _655);
    float _721 = (((_502.z - _559) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _559;
    float _725 = ((_589.z - _721) * cbMtdParam._m0[19u].w) + _721;
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _745 = (_738.x * 2.0) + (-1.0);
    float _746 = (_738.y * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _3999 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _755 = ((_738.z - _725) * _655) + _725;
    float _765 = ((sqrt(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) - _569) * _655) + _569;
    float _768 = (((_745 - _601) * _655) + _601) + (cbMtdParam._m0[21u].x * _601);
    float _769 = (((_746 - _602) * _655) + _602) + (cbMtdParam._m0[21u].x * _602);
    float _771 = cbMtdParam._m0[22u].x + _589.w;
    float _774 = fma(_765, _239, fma(_769, _246, _768 * _232));
    float _777 = fma(_765, _240, fma(_769, _247, _768 * _233));
    float _780 = fma(_765, _241, fma(_769, _248, _768 * _234));
    float _784 = inversesqrt(dot(vec3(_774, _777, _780), vec3(_774, _777, _780)));
    float _785 = _784 * _774;
    float _786 = _784 * _777;
    float _787 = _784 * _780;
    float _4010 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _788 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4032 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4043 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4054 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4065 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _793 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _807 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _858 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _848);
    float _859 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _848);
    float _860 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _848);
    float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
    float _865 = _858 * _864;
    float _866 = _859 * _864;
    float _867 = _860 * _864;
    float _873 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _874 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _892 = fma(_787, cbSceneParam._m0[5u].z, fma(_786, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _785));
    float _895 = fma(_787, cbSceneParam._m0[6u].z, fma(_786, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _785));
    float _898 = fma(_787, cbSceneParam._m0[7u].z, fma(_786, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _785));
    uint _912 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _918 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_912].x;
    float _919 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_912].y;
    float _920 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_912].z;
    float _4076 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _924 = 1.0 - _793;
    float _925 = _921 * _924;
    float _926 = _922 * _924;
    float _927 = _923 * _924;
    float _932 = (_921 + (-0.039999999105930328369140625)) * _793;
    float _933 = (_922 + (-0.039999999105930328369140625)) * _793;
    float _934 = (_923 + (-0.039999999105930328369140625)) * _793;
    float _935 = _932 + 0.039999999105930328369140625;
    float _937 = _933 + 0.039999999105930328369140625;
    float _938 = _934 + 0.039999999105930328369140625;
    vec4 _947 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _873, cbSceneParam._m0[86u].y * _874));
    float _951 = ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * TEXCOORD_5.w) * _947.x;
    float _952 = dot(vec3(_785, _786, _787), vec3(_865, _866, _867));
    float _955 = _952 * 2.0;
    float _959 = (_955 * _785) - _865;
    float _960 = (_955 * _786) - _866;
    float _961 = (_955 * _787) - _867;
    float _965 = abs(dot(vec3(_865, _866, _867), vec3(_785, _786, _787)));
    float _4109 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _967 = sqrt(_788);
    float _980 = exp2((_967 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_967 * 3.0));
    float _986 = (1.0 - _980) * ((_967 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _987 = _980 * _967;
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1324;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1049 = fma(_1023, cbModelParam._m0[26u].z, fma(_1019, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015));
        float _1053 = fma(_1023, cbModelParam._m0[27u].z, fma(_1019, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015));
        float _1057 = fma(_1023, cbModelParam._m0[28u].z, fma(_1019, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015));
        float _1082 = _1015 + _785;
        float _1083 = _1019 + _786;
        float _1084 = _1023 + _787;
        float _1094 = fma(_1084, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082)) - _1049;
        float _1095 = fma(_1084, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082)) - _1053;
        float _1096 = fma(_1084, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082)) - _1057;
        float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
        float _1113 = ((_1100 * _1094) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1049 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1100 * _1095) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1053 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1100 * _1096) / cbModelParam._m0[34u].z) + ((((((_1057 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1152 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1118.x + (-0.5));
        float _1154 = _1152 * (_1118.y + (-0.5));
        float _1155 = _1152 * (_1118.z + (-0.5));
        float _1162 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1125.x + (-0.5));
        float _1164 = _1162 * (_1125.y + (-0.5));
        float _1165 = _1162 * (_1125.z + (-0.5));
        float _1172 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1132.x + (-0.5));
        float _1174 = _1172 * (_1132.y + (-0.5));
        float _1175 = _1172 * (_1132.z + (-0.5));
        float _1182 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1139.x + (-0.5));
        float _1184 = _1182 * (_1139.y + (-0.5));
        float _1185 = _1182 * (_1139.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1206 = (dot(vec3(_785, _786, _787), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1216 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4157 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1218 + 1.0))) + _1223) * _1186;
        float _1233 = _1154 * 0.5;
        float _1234 = _1164 * 0.5;
        float _1235 = _1174 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_785, _786, _787), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4190 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1260 + 1.0))) + _1265) * _1187;
        float _1275 = _1155 * 0.5;
        float _1276 = _1165 * 0.5;
        float _1277 = _1175 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_785, _786, _787), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4223 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1302 + 1.0))) + _1307) * _1188;
        _1324 = _1155;
        _1326 = _1154;
        _1327 = _1153;
        _1328 = _1165;
        _1329 = _1164;
        _1330 = _1163;
        _1331 = _1175;
        _1332 = _1174;
        _1333 = _1173;
        _1334 = _1188;
        _1335 = _1187;
        _1336 = _1186;
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1325;
        _1326 = _1325;
        _1327 = _1325;
        _1328 = _1325;
        _1329 = _1325;
        _1330 = _1325;
        _1331 = _1325;
        _1332 = _1325;
        _1333 = _1325;
        _1334 = _1325;
        _1335 = _1325;
        _1336 = _1325;
        _1337 = 0.0;
        _1338 = 0.0;
        _1339 = 0.0;
    }
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1364 = fma(_1023, cbModelParam._m0[30u].z, fma(_1019, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1015));
        float _1368 = fma(_1023, cbModelParam._m0[31u].z, fma(_1019, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1015));
        float _1372 = fma(_1023, cbModelParam._m0[32u].z, fma(_1019, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1015));
        float _1395 = _1015 + _785;
        float _1396 = _1019 + _786;
        float _1397 = _1023 + _787;
        float _1407 = fma(_1397, cbModelParam._m0[30u].z, fma(_1396, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1395)) - _1364;
        float _1408 = fma(_1397, cbModelParam._m0[31u].z, fma(_1396, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1395)) - _1368;
        float _1409 = fma(_1397, cbModelParam._m0[32u].z, fma(_1396, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1395)) - _1372;
        float _1413 = inversesqrt(dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409)));
        float _1426 = ((_1413 * _1407) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1364 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1413 * _1408) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1368 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1428 = ((_1413 * _1409) / cbModelParam._m0[35u].z) + ((((((_1372 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1426, _1427, _1428), 0.0);
        float _1463 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1430.x + (-0.5));
        float _1465 = _1463 * (_1430.y + (-0.5));
        float _1466 = _1463 * (_1430.z + (-0.5));
        float _1473 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1437.x + (-0.5));
        float _1475 = _1473 * (_1437.y + (-0.5));
        float _1476 = _1473 * (_1437.z + (-0.5));
        float _1483 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1444.x + (-0.5));
        float _1485 = _1483 * (_1444.y + (-0.5));
        float _1486 = _1483 * (_1444.z + (-0.5));
        float _1493 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1451.x + (-0.5));
        float _1495 = _1493 * (_1451.y + (-0.5));
        float _1496 = _1493 * (_1451.z + (-0.5));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = _1464 * 0.5;
        float _1501 = _1474 * 0.5;
        float _1502 = _1484 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_785, _786, _787), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4286 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1527 + 1.0))) + _1532) * _1497;
        float _1542 = _1465 * 0.5;
        float _1543 = _1475 * 0.5;
        float _1544 = _1485 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_785, _786, _787), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4319 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1569 + 1.0))) + _1574) * _1498;
        float _1584 = _1466 * 0.5;
        float _1585 = _1476 * 0.5;
        float _1586 = _1486 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_785, _786, _787), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4352 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1611 + 1.0))) + _1616) * _1499;
        _1633 = _1466;
        _1634 = _1465;
        _1635 = _1464;
        _1636 = _1476;
        _1637 = _1475;
        _1638 = _1474;
        _1639 = _1486;
        _1640 = _1485;
        _1641 = _1484;
        _1642 = _1499;
        _1643 = _1498;
        _1644 = _1497;
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
    }
    else
    {
        _1633 = _1325;
        _1634 = _1325;
        _1635 = _1325;
        _1636 = _1325;
        _1637 = _1325;
        _1638 = _1325;
        _1639 = _1325;
        _1640 = _1325;
        _1641 = _1325;
        _1642 = _1325;
        _1643 = _1325;
        _1644 = _1325;
        _1645 = 0.0;
        _1646 = 0.0;
        _1647 = 0.0;
    }
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1337)) + _1337;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1338)) + _1338;
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1339)) + _1339;
    float _1680 = fma(_1659, cbSceneParam._m0[89u].z, fma(_1658, cbSceneParam._m0[89u].y, _1657 * cbSceneParam._m0[89u].x));
    float _1683 = fma(_1659, cbSceneParam._m0[90u].z, fma(_1658, cbSceneParam._m0[90u].y, _1657 * cbSceneParam._m0[90u].x));
    float _1686 = fma(_1659, cbSceneParam._m0[91u].z, fma(_1658, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1657));
    float _1701 = _959 * 0.5;
    float _1702 = _960 * 0.5;
    float _1703 = _961 * 0.5;
    float _1704 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1707 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1710 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1744;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1717 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1324, _1328, _1331, _1334));
        float _1721 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1725 = dot(vec4(_1701, _1702, _1703, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1732 = dot(vec4(cbModelParam._m0[39u]), vec4(_1701, _1702, _1703, 1.0));
        _1744 = dot(vec3(isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1744 = 1.0;
    }
    float _1755;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1746 = dot(vec4(cbModelParam._m0[40u]), vec4(_1701, _1702, _1703, 1.0));
        _1755 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1746) ? 0.0 : (isnan(0.0) ? _1746 : max(0.0, _1746))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1755 = 1.0;
    }
    float _1759 = (_1755 * cbModelParam._m0[1u].x) + (_1744 * (1.0 - cbModelParam._m0[1u].x));
    float _1769 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _788);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1769 : min(cbModelParam._m0[25u].z, _1769));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1817 = fma(_1023, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015)) + cbModelParam._m0[13u].w;
        float _1821 = fma(_1023, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015)) + cbModelParam._m0[14u].w;
        float _1825 = fma(_1023, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015)) + cbModelParam._m0[15u].w;
        float _1828 = fma(_961, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959));
        float _1831 = fma(_961, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959));
        float _1834 = fma(_961, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959));
        float _1862;
        if (_1828 > 0.0)
        {
            _1862 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1862 = frontier_phi_14_12_ladder;
        }
        float _2033;
        if (_1831 > 0.0)
        {
            _2033 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2033 = frontier_phi_23_19_ladder;
        }
        float _2328;
        if (_1834 > 0.0)
        {
            _2328 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2328 = frontier_phi_35_30_ladder;
        }
        float _2330 = isnan(_2033) ? _1862 : (isnan(_1862) ? _2033 : min(_1862, _2033));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1828) + _1817;
        float _2336 = (_2331 * _1831) + _1821;
        float _2337 = (_2331 * _1834) + _1825;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2338;
        float _2342 = _2338 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 > _2342) || ((_2336 < _2340) || ((_2335 < _2340) || (_2335 > _2342))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2337, cbModelParam._m0[9u].z, fma(_2336, cbModelParam._m0[9u].y, _2335 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2337, cbModelParam._m0[10u].z, fma(_2336, cbModelParam._m0[10u].y, _2335 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2337, cbModelParam._m0[11u].z, fma(_2336, cbModelParam._m0[11u].y, _2335 * cbModelParam._m0[11u].x))), _1770);
            frontier_phi_13_35_ladder = _2482.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2482.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2482.x * cbModelParam._m0[1u].y;
        }
        _1850 = frontier_phi_13_35_ladder_2;
        _1852 = frontier_phi_13_35_ladder_1;
        _1854 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_959, _960, _961), _1770);
        _1850 = _1838.x * cbModelParam._m0[1u].y;
        _1852 = _1838.y * cbModelParam._m0[1u].y;
        _1854 = _1838.z * cbModelParam._m0[1u].y;
    }
    float _1858 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _788);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1858 : min(cbModelParam._m0[25u].w, _1858));
    float _1948;
    float _1950;
    float _1952;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1912 = fma(_1023, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015)) + cbModelParam._m0[21u].w;
        float _1916 = fma(_1023, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015)) + cbModelParam._m0[22u].w;
        float _1920 = fma(_1023, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015)) + cbModelParam._m0[23u].w;
        float _1923 = fma(_961, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959));
        float _1926 = fma(_961, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959));
        float _1929 = fma(_961, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959));
        float _2038;
        if (_1923 > 0.0)
        {
            _2038 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2038 = frontier_phi_25_21_ladder;
        }
        float _2355;
        if (_1926 > 0.0)
        {
            _2355 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2355 = frontier_phi_37_32_ladder;
        }
        float _2693;
        if (_1929 > 0.0)
        {
            _2693 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2693 = frontier_phi_47_44_ladder;
        }
        float _2695 = isnan(_2355) ? _2038 : (isnan(_2038) ? _2355 : min(_2038, _2355));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _1923) + _1912;
        float _2701 = (_2696 * _1926) + _1916;
        float _2702 = (_2696 * _1929) + _1920;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2704 = (-1.0) - _2703;
        float _2706 = _2703 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2702 > _2706) || ((_2702 < _2704) || ((_2701 > _2706) || ((_2701 < _2704) || ((_2700 < _2704) || (_2700 > _2706))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2702, cbModelParam._m0[17u].z, fma(_2701, cbModelParam._m0[17u].y, _2700 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2702, cbModelParam._m0[18u].z, fma(_2701, cbModelParam._m0[18u].y, _2700 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2702, cbModelParam._m0[19u].z, fma(_2701, cbModelParam._m0[19u].y, _2700 * cbModelParam._m0[19u].x))), _1859);
            frontier_phi_22_47_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1948 = frontier_phi_22_47_ladder_2;
        _1950 = frontier_phi_22_47_ladder_1;
        _1952 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_959, _960, _961), _1859);
        _1948 = _1932.x * cbModelParam._m0[1u].z;
        _1950 = _1932.y * cbModelParam._m0[1u].z;
        _1952 = _1932.z * cbModelParam._m0[1u].z;
    }
    float _1965 = (((_986 * _935) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1948 - _1850)) + _1850);
    float _1967 = (((_986 * _937) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1950 - _1852)) + _1852);
    float _1969 = (((_986 * _938) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1952 - _1854)) + _1854);
    float _1972 = fma(_1969, cbSceneParam._m0[89u].z, fma(_1967, cbSceneParam._m0[89u].y, _1965 * cbSceneParam._m0[89u].x));
    float _1975 = fma(_1969, cbSceneParam._m0[90u].z, fma(_1967, cbSceneParam._m0[90u].y, _1965 * cbSceneParam._m0[90u].x));
    float _1978 = fma(_1969, cbSceneParam._m0[91u].z, fma(_1967, cbSceneParam._m0[91u].y, _1965 * cbSceneParam._m0[91u].x));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2025 = _2012 / _2024;
    float _2026 = _2016 / _2024;
    float _2027 = _2020 / _2024;
    float _2174;
    float _2175;
    float _2176;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2054 = ((uint(_2027 > cbSceneParam._m0[59u].y) + uint(_2027 > cbSceneParam._m0[59u].x)) + uint(_2027 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2055 = _2054 + 43u;
        uint _2063 = _2054 + 44u;
        uint _2071 = _2054 + 45u;
        uint _2079 = _2054 + 46u;
        float _2090 = fma(_2024, cbSceneParam._m0[_2055].w, fma(_2020, cbSceneParam._m0[_2055].z, fma(_2016, cbSceneParam._m0[_2055].y, _2012 * cbSceneParam._m0[_2055].x)));
        float _2094 = fma(_2024, cbSceneParam._m0[_2063].w, fma(_2020, cbSceneParam._m0[_2063].z, fma(_2016, cbSceneParam._m0[_2063].y, _2012 * cbSceneParam._m0[_2063].x)));
        float _2102 = fma(_2024, cbSceneParam._m0[_2079].w, fma(_2020, cbSceneParam._m0[_2079].z, fma(_2016, cbSceneParam._m0[_2079].y, _2012 * cbSceneParam._m0[_2079].x)));
        float _2107 = cbSceneParam._m0[33u].z * _2102;
        float _2109 = cbSceneParam._m0[33u].w * _2102;
        float _2112 = fma(_2024, cbSceneParam._m0[_2071].w, fma(_2020, cbSceneParam._m0[_2071].z, fma(_2016, cbSceneParam._m0[_2071].y, _2012 * cbSceneParam._m0[_2071].x))) / _2102;
        float _2160 = (cbSceneParam._m0[33u].x - sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027))) * cbSceneParam._m0[33u].y;
        float _4478 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2167 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2107 + _2090) / _2102, (_2109 + _2094) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2109 + _2090) / _2102, (_2094 - _2107) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 - _2107) / _2102, (_2094 - _2109) / _2102), _2112), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 - _2109) / _2102, (_2107 + _2094) / _2102), _2112), 0.0)).x), vec4(0.25)));
        _2174 = 1.0 - (_2167 * cbSceneParam._m0[34u].x);
        _2175 = 1.0 - (_2167 * cbSceneParam._m0[34u].y);
        _2176 = 1.0 - (_2167 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2174 = 1.0;
        _2175 = 1.0;
        _2176 = 1.0;
    }
    float _2240;
    float _2242;
    float _2244;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2228 = fma(_2024, cbSceneParam._m0[63u].w, fma(_2020, cbSceneParam._m0[63u].z, fma(_2016, cbSceneParam._m0[63u].y, _2012 * cbSceneParam._m0[63u].x)));
        float _2229 = fma(_2024, cbSceneParam._m0[60u].w, fma(_2020, cbSceneParam._m0[60u].z, fma(_2016, cbSceneParam._m0[60u].y, _2012 * cbSceneParam._m0[60u].x))) / _2228;
        float _2230 = fma(_2024, cbSceneParam._m0[61u].w, fma(_2020, cbSceneParam._m0[61u].z, fma(_2016, cbSceneParam._m0[61u].y, _2012 * cbSceneParam._m0[61u].x))) / _2228;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2229 >= cbSceneParam._m0[64u].x) && (_2230 >= cbSceneParam._m0[64u].y)) && (_2229 <= cbSceneParam._m0[64u].z)) && (_2230 <= cbSceneParam._m0[64u].w))
        {
            float _2368 = fma(_2024, cbSceneParam._m0[62u].w, fma(_2020, cbSceneParam._m0[62u].z, fma(_2016, cbSceneParam._m0[62u].y, _2012 * cbSceneParam._m0[62u].x))) / _2228;
            float _2372 = isnan(cbSceneParam._m0[41u].w) ? _2368 : (isnan(_2368) ? cbSceneParam._m0[41u].w : max(_2368, cbSceneParam._m0[41u].w));
            float _2415 = (cbSceneParam._m0[33u].x - sqrt(((_2026 * _2026) + (_2025 * _2025)) + (_2027 * _2027))) * cbSceneParam._m0[33u].y;
            float _4494 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
            float _2422 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2229, cbSceneParam._m0[33u].w + _2230), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2229, _2230 - cbSceneParam._m0[33u].z), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2229 - cbSceneParam._m0[33u].z, _2230 - cbSceneParam._m0[33u].w), _2372), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2229 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2230), _2372), 0.0)).x), vec4(0.25)));
            float _2426 = 1.0 - (_2422 * cbSceneParam._m0[34u].x);
            float _2427 = 1.0 - (_2422 * cbSceneParam._m0[34u].y);
            float _2428 = 1.0 - (_2422 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2428) ? _2176 : (isnan(_2176) ? _2428 : min(_2176, _2428));
            frontier_phi_34_33_ladder_1 = isnan(_2427) ? _2175 : (isnan(_2175) ? _2427 : min(_2175, _2427));
            frontier_phi_34_33_ladder_2 = isnan(_2426) ? _2174 : (isnan(_2174) ? _2426 : min(_2174, _2426));
        }
        else
        {
            frontier_phi_34_33_ladder = _2176;
            frontier_phi_34_33_ladder_1 = _2175;
            frontier_phi_34_33_ladder_2 = _2174;
        }
        _2240 = frontier_phi_34_33_ladder_2;
        _2242 = frontier_phi_34_33_ladder_1;
        _2244 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2240 = _2174;
        _2242 = _2175;
        _2244 = _2176;
    }
    uvec4 _2249 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2251 = _2249.x * 14u;
    uint _2252 = _2251 + 13u;
    float _2259 = _951 + (-1.0);
    float _2264 = (cbLight._m0[_2252].x * _2259) + 1.0;
    float _2265 = (cbLight._m0[_2252].y * _2259) + 1.0;
    float _2266 = (cbLight._m0[_2252].z * _2259) + 1.0;
    float _2267 = (cbLight._m0[_2252].w * _2259) + 1.0;
    uint _2268 = _2251 + 5u;
    float _2274 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
    uint _2278 = _2251 + 4u;
    float _2287 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
    uint _2291 = _2251 | 1u;
    float _2302 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_785, _786, _787));
    float _2305 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_785, _786, _787));
    float _4530 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _4541 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2310 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2312 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2319 = ((cbLight._m0[_2268].x * _2274) * _2312) + (((cbLight._m0[_2278].x * _2240) * _2287) * _2310);
    float _2320 = ((_2274 * cbLight._m0[_2268].y) * _2312) + (((cbLight._m0[_2278].y * _2242) * _2287) * _2310);
    float _2321 = ((_2274 * cbLight._m0[_2268].z) * _2312) + (((cbLight._m0[_2278].z * _2244) * _2287) * _2310);
    uvec4 _2325 = floatBitsToUint(cbLight._m0[_2251 + 12u]);
    bool _2327 = _2325.x == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2327)
    {
        _2429 = _2319;
        _2431 = _2320;
        _2433 = _2321;
    }
    else
    {
        uint _2437 = _2251 + 6u;
        float _2453 = (dot(vec3(cbLight._m0[_2251 + 2u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4552 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2456 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2429 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2319;
        _2431 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2320;
        _2433 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2321;
    }
    bool _2436 = _2325.y == 0u;
    float _2491;
    float _2493;
    float _2495;
    if (_2436)
    {
        _2491 = _2429;
        _2493 = _2431;
        _2495 = _2433;
    }
    else
    {
        uint _2664 = _2251 + 7u;
        float _2680 = (dot(vec3(cbLight._m0[_2251 + 3u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2681 = _2680 * _2680;
        float _4568 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2682 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2683 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2491 = (((cbLight._m0[_2664].x * 0.3183098733425140380859375) * _2682) * _2683) + _2429;
        _2493 = (((cbLight._m0[_2664].y * 0.3183098733425140380859375) * _2682) * _2683) + _2431;
        _2495 = (((cbLight._m0[_2664].z * 0.3183098733425140380859375) * _2682) * _2683) + _2433;
    }
    uint _2498 = _2251 + 8u;
    float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _788) * 0.949999988079071044921875);
    float _2512 = _2511 * _2511;
    float _2513 = cbLight._m0[_2251].x + _865;
    float _2514 = cbLight._m0[_2251].y + _866;
    float _2515 = cbLight._m0[_2251].z + _867;
    float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
    float _2520 = _2519 * _2513;
    float _2521 = _2519 * _2514;
    float _2522 = _2519 * _2515;
    float _2523 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2251].xyz));
    float _4584 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _4595 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _2527 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2528 = dot(vec3(_785, _786, _787), vec3(_2520, _2521, _2522));
    float _4606 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2520, _2521, _2522));
    float _4617 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2512 * _2512;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0);
    float _2549 = 0.959999978542327880859375 - _932;
    float _2551 = 0.959999978542327880859375 - _933;
    float _2552 = 0.959999978542327880859375 - _934;
    float _2559 = 1.0 - _2512;
    float _2570 = (0.5 / (((_2527 * ((_2526 * _2559) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2559) + _2512) * _2526))) * _2526;
    float _4628 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    uint _2586 = _2251 + 9u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _788) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2291].x + _865;
    float _2600 = cbLight._m0[_2291].y + _866;
    float _2601 = cbLight._m0[_2291].z + _867;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2291].xyz));
    float _4639 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2613 = dot(vec3(_785, _786, _787), vec3(_2606, _2607, _2608));
    float _4650 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2617 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2606, _2607, _2608));
    float _4661 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = _2598 * _2598;
    float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
    float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) * 5.0);
    float _2639 = 1.0 - _2598;
    float _2649 = (0.5 / (((_2527 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2639) + _2598) * _2612))) * _2612;
    float _4672 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
    float _2661 = (((((_2632 * _2549) + _935) * cbLight._m0[_2586].x) * _2651) * _2274) + ((((cbLight._m0[_2498].x * _2240) * ((_2548 * _2549) + _935)) * _2572) * _2287);
    float _2662 = (((((_2632 * _2551) + _937) * cbLight._m0[_2586].y) * _2651) * _2274) + ((((cbLight._m0[_2498].y * _2242) * ((_2548 * _2551) + _937)) * _2572) * _2287);
    float _2663 = (((((_2632 * _2552) + _938) * cbLight._m0[_2586].z) * _2651) * _2274) + ((((cbLight._m0[_2498].z * _2244) * ((_2548 * _2552) + _938)) * _2572) * _2287);
    float _2719;
    float _2721;
    float _2723;
    if (_2327)
    {
        _2719 = _2661;
        _2721 = _2662;
        _2723 = _2663;
    }
    else
    {
        uint _2725 = _2251 + 2u;
        uint _2729 = _2251 + 10u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _788) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _865;
        float _2746 = cbLight._m0[_2725].y + _866;
        float _2747 = cbLight._m0[_2725].z + _867;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2725].xyz));
        float _4683 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2759 = dot(vec3(_785, _786, _787), vec3(_2752, _2753, _2754));
        float _4694 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4705 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2778 = exp2(log2(1.0 - (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0)))) * 5.0);
        float _2785 = 1.0 - _2744;
        float _2795 = (0.5 / (((_2527 * ((_2758 * _2785) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2785) + _2744) * _2758))) * _2758;
        float _4716 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
        _2719 = (((((_2778 * _2549) + _935) * cbLight._m0[_2729].x) * _2797) * _2798) + _2661;
        _2721 = (((((_2778 * _2551) + _937) * cbLight._m0[_2729].y) * _2797) * _2798) + _2662;
        _2723 = (((((_2778 * _2552) + _938) * cbLight._m0[_2729].z) * _2797) * _2798) + _2663;
    }
    float _2829;
    float _2831;
    float _2833;
    if (_2436)
    {
        _2829 = _2719;
        _2831 = _2721;
        _2833 = _2723;
    }
    else
    {
        uint _2840 = _2251 + 3u;
        uint _2844 = _2251 + 11u;
        float _2858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2840].w)) * _788) * 0.949999988079071044921875);
        float _2859 = _2858 * _2858;
        float _2860 = cbLight._m0[_2840].x + _865;
        float _2861 = cbLight._m0[_2840].y + _866;
        float _2862 = cbLight._m0[_2840].z + _867;
        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
        float _2867 = _2866 * _2860;
        float _2868 = _2866 * _2861;
        float _2869 = _2866 * _2862;
        float _2870 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2840].xyz));
        float _4732 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2874 = dot(vec3(_785, _786, _787), vec3(_2867, _2868, _2869));
        float _4743 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2878 = dot(vec3(cbLight._m0[_2840].xyz), vec3(_2867, _2868, _2869));
        float _4754 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2882 = _2859 * _2859;
        float _2886 = ((_2877 * _2877) * (_2882 + (-1.0))) + 1.0;
        float _2893 = exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0);
        float _2900 = 1.0 - _2859;
        float _2910 = (0.5 / (((_2527 * ((_2873 * _2900) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2527 * _2900) + _2859) * _2873))) * _2873;
        float _4765 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2912 = (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2882 / ((_2886 * _2886) * 3.141590118408203125));
        float _2913 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2829 = (((((_2893 * _2549) + _935) * cbLight._m0[_2844].x) * _2912) * _2913) + _2719;
        _2831 = (((((_2893 * _2551) + _937) * cbLight._m0[_2844].y) * _2912) * _2913) + _2721;
        _2833 = (((((_2893 * _2552) + _938) * cbLight._m0[_2844].z) * _2912) * _2913) + _2723;
    }
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_2249.y == 0u)
    {
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.x;
        uint _2946 = uint((float(_2934.y) * floor(float(uint(cbSceneParam._m0[85u].y * _874) / _2935))) + floor(float(uint(cbSceneParam._m0[85u].x * _873) / _2935)));
        float _2956 = (log2(_2027 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2957 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        uint _2960 = uint(isnan(14.0) ? _2957 : (isnan(_2957) ? 14.0 : min(_2957, 14.0)));
        uvec4 _2965 = texelFetch(g_lightClusterGridBuffer, int(((_2960 << 2u) + (_2946 << 6u)) >> 2u));
        uint _2966 = _2965.x;
        uint _2967 = _2934.z;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((((1u << ((_2967 >> 4u) & 15u)) + 4294967295u) & _2966) == 0u) || ((_2967 & 240u) == 0u))
        {
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
        }
        else
        {
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            uint _3197 = 0u;
            uint _3206;
            bool _3207;
            for (;;)
            {
                _3206 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                _3207 = _3206 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3207)
                {
                    frontier_phi_66_pred = _3196;
                    frontier_phi_66_pred_1 = _3195;
                    frontier_phi_66_pred_2 = _3194;
                    frontier_phi_66_pred_3 = _3193;
                    frontier_phi_66_pred_4 = _3192;
                    frontier_phi_66_pred_5 = _3191;
                }
                else
                {
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    uint _3321;
                    _3315 = _3191;
                    _3316 = _3192;
                    _3317 = _3193;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3206;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    for (;;)
                    {
                        uint _3325 = uint(findLSB(_3321)) + (_3197 << 5u);
                        uint _3322 = (_3321 + 4294967295u) & _3321;
                        uint _3327 = _3325 * 48u;
                        vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 3u)).x));
                        uint _3347 = (_3325 * 48u) + 4u;
                        vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 3u)).x));
                        uint _3366 = (_3325 * 48u) + 8u;
                        vec3 _3377 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3366)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 2u)).x));
                        float _3381 = _3341.x - _2025;
                        float _3382 = _3341.y - _2026;
                        float _3383 = _3341.z - _2027;
                        float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                        float _3387 = inversesqrt(_3384);
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3391 = dot(vec3(_892, _895, _898), vec3(_3388, _3389, _3390));
                        float _3396 = 1.0 - (_3384 * _3341.w);
                        float _4791 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3397 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3398 = sqrt(_3384) * _3360.w;
                        float _3401 = 1.39999997615814208984375 / (_3398 + 1.39999997615814208984375);
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3391) + _3402;
                        float _3408 = _3398 * _3398;
                        float _3412 = ((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3397) / ((_3408 * 0.699999988079071044921875) + 1.0);
                        float _3416 = (-0.0) - _2025;
                        float _3417 = (-0.0) - _2026;
                        float _3418 = (-0.0) - _2027;
                        float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                        float _3423 = _3422 * _3416;
                        float _3424 = _3422 * _3417;
                        float _3425 = _3422 * _3418;
                        float _3432 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                        float _3433 = 1.0 - _967;
                        float _3440 = sqrt(1.0 - ((1.0 - (_3433 * _3433)) * (1.0 - (_3432 * _3432))));
                        float _3441 = _3440 * _3440;
                        float _3442 = _3441 * _3441;
                        float _3443 = _3423 + _3388;
                        float _3444 = _3424 + _3389;
                        float _3445 = _3425 + _3390;
                        float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                        float _3453 = dot(vec3(_892, _895, _898), vec3(_3423, _3424, _3425));
                        float _4807 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3457 = dot(vec3(_892, _895, _898), vec3(_3449 * _3443, _3449 * _3444, _3449 * _3445));
                        float _4818 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3464 = ((_3460 * _3460) * (_3442 + (-1.0))) + 1.0;
                        float _3465 = _3401 * _3441;
                        float _3466 = _3465 * _3465;
                        float _3469 = ((1.0 - _3466) * _3391) + _3466;
                        float _4829 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3470 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3471 = 1.0 - _3441;
                        float _3481 = (0.5 / (((_3470 * ((_3456 * _3471) + _3441)) + 9.9999999392252902907785028219223e-09) + (((_3470 * _3471) + _3441) * _3456))) * _3470;
                        float _4840 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3492 = (((_3442 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3464 * _3464) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125))) * _3397;
                        _3250 = (_3412 * _3360.x) + _3318;
                        _3251 = (_3412 * _3360.y) + _3319;
                        _3252 = (_3412 * _3360.z) + _3320;
                        _3247 = (_3492 * _3377.x) + _3315;
                        _3248 = (_3492 * _3377.y) + _3316;
                        _3249 = (_3492 * _3377.z) + _3317;
                        if (_3322 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3315 = _3247;
                            _3316 = _3248;
                            _3317 = _3249;
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3322;
                        }
                    }
                    frontier_phi_66_pred = _3252;
                    frontier_phi_66_pred_1 = _3251;
                    frontier_phi_66_pred_2 = _3250;
                    frontier_phi_66_pred_3 = _3249;
                    frontier_phi_66_pred_4 = _3248;
                    frontier_phi_66_pred_5 = _3247;
                }
                _3057 = frontier_phi_66_pred;
                _3055 = frontier_phi_66_pred_1;
                _3053 = frontier_phi_66_pred_2;
                _3051 = frontier_phi_66_pred_3;
                _3049 = frontier_phi_66_pred_4;
                _3047 = frontier_phi_66_pred_5;
                uint _3198 = _3197 + 1u;
                if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3191 = _3047;
                    _3192 = _3049;
                    _3193 = _3051;
                    _3194 = _3053;
                    _3195 = _3055;
                    _3196 = _3057;
                    _3197 = _3198;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
        }
        uvec4 _3060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3061 = _3060.z;
        uint _3063 = (_3061 >> 8u) & 15u;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((4294967295u << _3063) & _2966) == 0u)
        {
            _3159 = _3046;
            _3161 = _3048;
            _3163 = _3050;
            _3165 = _3052;
            _3167 = _3054;
            _3169 = _3056;
        }
        else
        {
            float _3184 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
            float _3185 = _3184 * _2025;
            float _3186 = _3184 * _2026;
            float _3187 = _3184 * _2027;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3063 < ((_3061 >> 12u) & 15u))
            {
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3298 = _3046;
                float _3299 = _3048;
                float _3300 = _3050;
                float _3301 = _3052;
                float _3302 = _3054;
                float _3303 = _3056;
                uint _3304 = _3063;
                uint _3313;
                bool _3314;
                for (;;)
                {
                    _3313 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3304 << 2u)) >> 2u)).x;
                    _3314 = _3313 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3314)
                    {
                        frontier_phi_72_pred = _3303;
                        frontier_phi_72_pred_1 = _3302;
                        frontier_phi_72_pred_2 = _3301;
                        frontier_phi_72_pred_3 = _3300;
                        frontier_phi_72_pred_4 = _3299;
                        frontier_phi_72_pred_5 = _3298;
                    }
                    else
                    {
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3510 = _3298;
                        float _3511 = _3299;
                        float _3512 = _3300;
                        float _3513 = _3301;
                        float _3514 = _3302;
                        float _3515 = _3303;
                        uint _3516 = _3313;
                        uint _3517;
                        vec4 _3542;
                        float _3543;
                        vec4 _3558;
                        vec3 _3570;
                        vec4 _3585;
                        vec4 _3600;
                        float _3646;
                        bool _3647;
                        for (;;)
                        {
                            uint _3527 = ((_3304 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3516));
                            _3517 = (_3516 + 4294967295u) & _3516;
                            uint _3529 = _3527 * 40u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            _3543 = _3542.w;
                            uint _3545 = (_3527 * 40u) + 4u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3527 * 40u) + 8u;
                            _3570 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x));
                            uint _3572 = (_3527 * 40u) + 16u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3587 = (_3527 * 40u) + 20u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3527 * 40u) + 24u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3621 = (_3527 * 40u) + 28u;
                            vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3646 = fma(_2027, _3634.z, fma(_2026, _3634.y, _3634.x * _2025)) + _3634.w;
                            _3647 = !((fma(_2027, _3615.z, fma(_2026, _3615.y, _3615.x * _2025)) + _3615.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3647)
                            {
                                float _3674 = _3542.x - _2025;
                                float _3675 = _3542.y - _2026;
                                float _3676 = _3542.z - _2027;
                                float _3677 = dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676));
                                float _3680 = inversesqrt(_3677);
                                float _3681 = _3680 * _3674;
                                float _3682 = _3680 * _3675;
                                float _3683 = _3680 * _3676;
                                float _3687 = 1.0 - (_3677 / (_3543 * _3543));
                                float _4851 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3692 = sqrt(_3677) * _3558.w;
                                float _3694 = 1.39999997615814208984375 / (_3692 + 1.39999997615814208984375);
                                float _3695 = _3694 * _3694;
                                float _3698 = ((1.0 - _3695) * dot(vec3(_3681, _3682, _3683), vec3(_892, _895, _898))) + _3695;
                                float _3701 = _3692 * _3692;
                                float _3705 = (fma(_2027, _3585.z, fma(_2026, _3585.y, _3585.x * _2025)) + _3585.w) / _3646;
                                float _3706 = (fma(_2027, _3600.z, fma(_2026, _3600.y, _3600.x * _2025)) + _3600.w) / _3646;
                                float _3710 = 1.0 - dot(vec2(_3705, _3706), vec2(_3705, _3706));
                                float _4867 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3712 = _3711 * (((isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0))) * _3688) / ((_3701 * 0.699999988079071044921875) + 1.0));
                                float _3724 = exp2(log2(1.0 / ((_3701 * 3.5) + 5.0)) * 0.25);
                                float _3725 = 1.0 - _967;
                                float _3732 = sqrt(1.0 - ((1.0 - (_3725 * _3725)) * (1.0 - (_3724 * _3724))));
                                float _3733 = _3732 * _3732;
                                float _3734 = _3733 * _3733;
                                float _3735 = _3681 - _3185;
                                float _3736 = _3682 - _3186;
                                float _3737 = _3683 - _3187;
                                float _3741 = inversesqrt(dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737)));
                                float _3745 = dot(vec3(_892, _895, _898), vec3((-0.0) - _3185, (-0.0) - _3186, (-0.0) - _3187));
                                float _4878 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3749 = dot(vec3(_892, _895, _898), vec3(_3741 * _3735, _3741 * _3736, _3741 * _3737));
                                float _4889 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3756 = ((_3752 * _3752) * (_3734 + (-1.0))) + 1.0;
                                float _3757 = _3694 * _3733;
                                float _3758 = _3757 * _3757;
                                float _3764 = ((1.0 - _3758) * dot(vec3(_892, _895, _898), vec3(_3681, _3682, _3683))) + _3758;
                                float _4900 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3765 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3766 = 1.0 - _3733;
                                float _3776 = (0.5 / (((_3765 * ((_3748 * _3766) + _3733)) + 9.9999999392252902907785028219223e-09) + (((_3765 * _3766) + _3733) * _3748))) * _3765;
                                float _4911 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3786 = (_3711 * _3688) * (((_3734 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3756 * _3756) * ((_3701 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3712 * _3558.y;
                                frontier_phi_78_pred_1 = _3712 * _3558.x;
                                frontier_phi_78_pred_2 = _3786 * _3570.z;
                                frontier_phi_78_pred_3 = _3786 * _3570.y;
                                frontier_phi_78_pred_4 = _3786 * _3570.x;
                                frontier_phi_78_pred_5 = _3712 * _3558.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3794 = frontier_phi_78_pred;
                            _3793 = frontier_phi_78_pred_1;
                            _3792 = frontier_phi_78_pred_2;
                            _3791 = frontier_phi_78_pred_3;
                            _3790 = frontier_phi_78_pred_4;
                            _3795 = frontier_phi_78_pred_5;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            if (_3517 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3517;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3502;
                        frontier_phi_72_pred_1 = _3501;
                        frontier_phi_72_pred_2 = _3500;
                        frontier_phi_72_pred_3 = _3499;
                        frontier_phi_72_pred_4 = _3498;
                        frontier_phi_72_pred_5 = _3497;
                    }
                    _3170 = frontier_phi_72_pred;
                    _3168 = frontier_phi_72_pred_1;
                    _3166 = frontier_phi_72_pred_2;
                    _3164 = frontier_phi_72_pred_3;
                    _3162 = frontier_phi_72_pred_4;
                    _3160 = frontier_phi_72_pred_5;
                    uint _3305 = _3304 + 1u;
                    if (_3305 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3298 = _3160;
                        _3299 = _3162;
                        _3300 = _3164;
                        _3301 = _3166;
                        _3302 = _3168;
                        _3303 = _3170;
                        _3304 = _3305;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3170;
                frontier_phi_60_61_ladder_1 = _3168;
                frontier_phi_60_61_ladder_2 = _3164;
                frontier_phi_60_61_ladder_3 = _3162;
                frontier_phi_60_61_ladder_4 = _3160;
                frontier_phi_60_61_ladder_5 = _3166;
            }
            else
            {
                frontier_phi_60_61_ladder = _3056;
                frontier_phi_60_61_ladder_1 = _3054;
                frontier_phi_60_61_ladder_2 = _3050;
                frontier_phi_60_61_ladder_3 = _3048;
                frontier_phi_60_61_ladder_4 = _3046;
                frontier_phi_60_61_ladder_5 = _3052;
            }
            _3159 = frontier_phi_60_61_ladder_4;
            _3161 = frontier_phi_60_61_ladder_3;
            _3163 = frontier_phi_60_61_ladder_2;
            _3165 = frontier_phi_60_61_ladder_5;
            _3167 = frontier_phi_60_61_ladder_1;
            _3169 = frontier_phi_60_61_ladder;
        }
        float _3174 = isnan(1.0) ? _951 : (isnan(_951) ? 1.0 : min(_951, 1.0));
        _2979 = (_3174 * _3165) + _2491;
        _2981 = (_3174 * _3167) + _2493;
        _2983 = (_3174 * _3169) + _2495;
        _2985 = ((_3159 * _935) * _3174) + _2829;
        _2987 = ((_3161 * _937) * _3174) + _2831;
        _2989 = ((_3163 * _938) * _3174) + _2833;
    }
    else
    {
        _2979 = _2491;
        _2981 = _2493;
        _2983 = _2495;
        _2985 = _2829;
        _2987 = _2831;
        _2989 = _2833;
    }
    float _4927 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _4938 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4949 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    uint _3009 = _272 + 6u;
    float _3017 = _873 / cbSceneParam._m0[86u].x;
    float _3018 = _874 / cbSceneParam._m0[86u].y;
    vec4 _3032 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, (log2((isnan(cbSceneParam._m0[77u].w) ? _807 : (isnan(_807) ? cbSceneParam._m0[77u].w : min(_807, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3034 = _3032.x;
    float _3035 = _3032.y;
    float _3036 = _3032.z;
    float _3037 = _3032.w;
    float _3109;
    float _3111;
    float _3113;
    float _3115;
    if (_807 > cbSceneParam._m0[78u].w)
    {
        float _3071 = isnan(_807) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _807 : min(cbSceneParam._m0[80u].w, _807));
        float _3072 = _3071 / _807;
        float _3083 = _3072 * _858;
        float _3084 = _859 * _3072;
        float _3085 = (-0.0) - _3084;
        float _3087 = _3072 * _860;
        float _3089 = (cbSceneParam._m0[77u].w * _3085) / _3071;
        float _3090 = _3089 + cbSceneParam._m0[79u].w;
        float _3091 = cbSceneParam._m0[79u].w - _3084;
        float _3097 = sqrt(((_3083 * _3083) + (_3084 * _3084)) + (_3087 * _3087));
        float _3100 = (1.0 - (cbSceneParam._m0[77u].w / _3071)) * _3097;
        float _3105 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3107 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3260;
        if (abs((_3085 - _3089) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3260 = ((((_3090 > 0.0) ? exp2(_3105 * _3090) : (2.0 - exp2(_3107 * _3090))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3100;
        }
        else
        {
            float _3220 = 1.0 / cbSceneParam._m0[80u].x;
            float _3221 = isnan(_3091) ? _3090 : (isnan(_3090) ? _3091 : max(_3090, _3091));
            float _3222 = isnan(_3091) ? _3090 : (isnan(_3090) ? _3091 : min(_3090, _3091));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            float _3232 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : min(_3222, 0.0));
            _3260 = ((abs(_3097 / _3085) * cbSceneParam._m0[80u].y) * ((((_3231 - _3232) * 2.0) - ((exp2(_3105 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0)))) - exp2(_3105 * (isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))))) * _3220)) - ((exp2(_3107 * _3231) - exp2(_3107 * _3232)) * _3220))) + (_3100 * cbSceneParam._m0[80u].z);
        }
        vec4 _3262 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, 1.0), 0.0);
        float _3271 = exp2((_3260 * (-1.44269502162933349609375)) * (1.0 - _3262.w));
        float _3272 = log2(_3271);
        float _3288 = log2(_3037);
        _3109 = (exp2(_3288 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].x)) * _3262.x) / cbSceneParam._m0[78u].x)) + _3034;
        _3111 = (exp2(_3288 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].y)) * _3262.y) / cbSceneParam._m0[78u].y)) + _3035;
        _3113 = (exp2(_3288 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].z)) * _3262.z) / cbSceneParam._m0[78u].z)) + _3036;
        _3115 = _3271 * _3037;
    }
    else
    {
        _3109 = _3034;
        _3111 = _3035;
        _3113 = _3036;
        _3115 = _3037;
    }
    float _3127 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3128 = _3127 == 3.0;
    float _3129 = log2(_3115);
    float _3136 = exp2(_3129 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2979 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _951))) + ((_2985 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1759)) * cbPerFrame._m0[3u].x));
    float _3137 = exp2(_3129 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2981 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _951))) + ((_2987 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1759)) * cbPerFrame._m0[3u].x));
    float _3138 = exp2(_3129 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2983 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _951))) + ((_2989 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1759)) * cbPerFrame._m0[3u].x));
    float _3147 = (_3127 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3147 * (_3128 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3109)));
    SV_Target.y = _3147 * (_3128 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3111)));
    SV_Target.z = _3147 * (_3128 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3113)));
    SV_Target.w = cbInstanceData._m0[_3009].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3009].w;
}


