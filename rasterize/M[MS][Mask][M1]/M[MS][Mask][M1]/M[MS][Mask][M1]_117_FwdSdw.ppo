#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1593;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _381.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[23u].w) + _434) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4200 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _459 = (_452 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _460 = (_452 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _461 = (_452 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _381.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[23u].w) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4211 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _572 = _570.x;
    float _582 = dot(vec4(_572, _570.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _594 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _381.z) * 2.0) - ((((_572 - _582) * cbMtdParam._m0[23u].w) + _582) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4222 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _608 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _312.x) * ((_595 * ((_553.x * cbMtdParam._m0[14u].x) - _532)) + _532);
    float _611 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _312.y) * ((_595 * ((_553.y * cbMtdParam._m0[14u].y) - _533)) + _533);
    float _614 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _312.z) * ((_595 * ((_553.z * cbMtdParam._m0[14u].z) - _534)) + _534);
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _651 = _649.x;
    float _652 = _649.y;
    float _653 = _649.z;
    float _660 = ((_632.x - _651) * _452) + _651;
    float _661 = ((_632.y - _652) * _452) + _652;
    float _662 = ((_632.z - _653) * _452) + _653;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _685 = ((_674.x - _660) * _525) + _660;
    float _686 = ((_674.y - _661) * _525) + _661;
    float _687 = ((_674.z - _662) * _525) + _662;
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _712 = ((_699.z - _687) * _595) + _687;
    float _715 = ((((_699.x - _685) * _595) + _685) * 2.0) + (-1.0);
    float _717 = ((((_699.y - _686) * _595) + _686) * 2.0) + (-1.0);
    float _718 = dot(vec2(_715, _717), vec2(_715, _717));
    float _4233 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _723 = sqrt(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))));
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _762 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _764 = _762.x;
    float _765 = 1.0 - _764;
    float _773 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _776 = ((isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : min(_773, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _785 = (_776 - ((((((_764 - _765) * cbMtdParam._m0[24u].z) + _765) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _776))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4254 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _786 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _793 = (_786 * (cbMtdParam._m0[17u].x - _608)) + _608;
    float _794 = (_786 * (cbMtdParam._m0[17u].y - _611)) + _611;
    float _795 = (_786 * (cbMtdParam._m0[17u].z - _614)) + _614;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _809 = _807.x;
    float _810 = 1.0 - _809;
    float _835 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_809 - _810) * cbMtdParam._m0[24u].w) + _810) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4265 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _836 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _844 = ((((cbMtdParam._m0[10u].x - _793) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _836) + _793;
    float _845 = ((((cbMtdParam._m0[10u].y - _794) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _836) + _794;
    float _846 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _795)) * _836) + _795;
    vec4 _872 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _874 = _872.x;
    float _891 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _874) * _452) + _874;
    float _908 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _891) * _525) + _891;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _908) * _595) + _908;
    float _929 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _925) * cbMtdParam._m0[19u].z) + _925;
    float _931 = _929 - (_929 * _786);
    float _933 = _931 - (_931 * _836);
    float _937 = (cbMtdParam._m0[19u].w * (_737.z - _712)) + _712;
    vec4 _951 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _958 = (_951.x * 2.0) + (-1.0);
    float _959 = (_951.y * 2.0) + (-1.0);
    float _960 = dot(vec2(_958, _959), vec2(_958, _959));
    float _4276 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _968 = (_786 * (_951.z - _937)) + _937;
    float _971 = ((cbMtdParam._m0[23u].x - _968) * _836) + _968;
    vec4 _994 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1000 = (_994.x * 2.0) + (-1.0);
    float _1001 = (_994.y * 2.0) + (-1.0);
    float _1002 = dot(vec2(_1000, _1001), vec2(_1000, _1001));
    float _4287 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1010 = (((_737.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _715;
    float _1011 = (((_737.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _717;
    float _1023 = (((_958 - _1010) + (cbMtdParam._m0[21u].x * _1010)) * _786) + _1010;
    float _1024 = (((_959 - _1011) + (cbMtdParam._m0[21u].x * _1011)) * _786) + _1011;
    float _1025 = (_786 * (sqrt(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) - _723)) + _723;
    float _1036 = (((_1000 - _1023) + (_1023 * cbMtdParam._m0[22u].z)) * _836) + _1023;
    float _1037 = (((_1001 - _1024) + (_1024 * cbMtdParam._m0[22u].z)) * _836) + _1024;
    float _1038 = ((sqrt(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) - _1025) * _836) + _1025;
    float _1040 = cbMtdParam._m0[22u].x + _737.w;
    float _1043 = fma(_1038, _260 * NORMAL.x, fma(_1037, _267 * TANGENT.x, (_253 * _245) * _1036));
    float _1046 = fma(_1038, _260 * NORMAL.y, fma(_1037, _267 * TANGENT.y, (_253 * _246) * _1036));
    float _1049 = fma(_1038, _260 * NORMAL.z, fma(_1037, _267 * TANGENT.z, (_253 * _247) * _1036));
    float _1053 = inversesqrt(dot(vec3(_1043, _1046, _1049), vec3(_1043, _1046, _1049)));
    float _1054 = _1053 * _1043;
    float _1055 = _1053 * _1046;
    float _1056 = _1053 * _1049;
    float _4298 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _1057 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _4309 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _4320 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4331 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4342 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4353 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _1062 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _1076 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1126 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1116);
    float _1127 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1116);
    float _1128 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1116);
    float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
    float _1133 = _1126 * _1132;
    float _1134 = _1127 * _1132;
    float _1135 = _1128 * _1132;
    float _1141 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1142 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1160 = fma(_1056, cbSceneParam._m0[5u].z, fma(_1055, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1054));
    float _1163 = fma(_1056, cbSceneParam._m0[6u].z, fma(_1055, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1054));
    float _1166 = fma(_1056, cbSceneParam._m0[7u].z, fma(_1055, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1054));
    uint _1180 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1186 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * cbInstanceData._m0[_1180].x;
    float _1187 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * cbInstanceData._m0[_1180].y;
    float _1188 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * cbInstanceData._m0[_1180].z;
    float _4364 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _4375 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1190 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _4386 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _1192 = 1.0 - _1062;
    float _1193 = _1189 * _1192;
    float _1194 = _1190 * _1192;
    float _1195 = _1191 * _1192;
    float _1200 = (_1189 + (-0.039999999105930328369140625)) * _1062;
    float _1201 = (_1190 + (-0.039999999105930328369140625)) * _1062;
    float _1202 = (_1191 + (-0.039999999105930328369140625)) * _1062;
    float _1203 = _1200 + 0.039999999105930328369140625;
    float _1205 = _1201 + 0.039999999105930328369140625;
    float _1206 = _1202 + 0.039999999105930328369140625;
    vec4 _1215 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1141, cbSceneParam._m0[86u].y * _1142));
    float _1219 = ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * TEXCOORD_5.w) * _1215.x;
    float _1220 = dot(vec3(_1054, _1055, _1056), vec3(_1133, _1134, _1135));
    float _1223 = _1220 * 2.0;
    float _1227 = (_1223 * _1054) - _1133;
    float _1228 = (_1223 * _1055) - _1134;
    float _1229 = (_1223 * _1056) - _1135;
    float _1233 = abs(dot(vec3(_1133, _1134, _1135), vec3(_1054, _1055, _1056)));
    float _4397 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1235 = sqrt(_1057);
    float _1248 = exp2((_1235 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1235 * 3.0));
    float _1254 = (1.0 - _1248) * ((_1235 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1255 = _1248 * _1235;
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1287 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1291 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1592;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1317 = fma(_1291, cbModelParam._m0[26u].z, fma(_1287, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1283));
        float _1321 = fma(_1291, cbModelParam._m0[27u].z, fma(_1287, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1283));
        float _1325 = fma(_1291, cbModelParam._m0[28u].z, fma(_1287, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1283));
        float _1350 = _1283 + _1054;
        float _1351 = _1287 + _1055;
        float _1352 = _1291 + _1056;
        float _1362 = fma(_1352, cbModelParam._m0[26u].z, fma(_1351, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1350)) - _1317;
        float _1363 = fma(_1352, cbModelParam._m0[27u].z, fma(_1351, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1350)) - _1321;
        float _1364 = fma(_1352, cbModelParam._m0[28u].z, fma(_1351, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1350)) - _1325;
        float _1368 = inversesqrt(dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364)));
        float _1381 = ((_1368 * _1362) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1317 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1368 * _1363) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1321 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1368 * _1364) / cbModelParam._m0[34u].z) + ((((((_1325 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        float _1420 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1386.x + (-0.5));
        float _1422 = _1420 * (_1386.y + (-0.5));
        float _1423 = _1420 * (_1386.z + (-0.5));
        float _1430 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1393.x + (-0.5));
        float _1432 = _1430 * (_1393.y + (-0.5));
        float _1433 = _1430 * (_1393.z + (-0.5));
        float _1440 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1400.x + (-0.5));
        float _1442 = _1440 * (_1400.y + (-0.5));
        float _1443 = _1440 * (_1400.z + (-0.5));
        float _1450 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1407.x + (-0.5));
        float _1452 = _1450 * (_1407.y + (-0.5));
        float _1453 = _1450 * (_1407.z + (-0.5));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = _1421 * 0.5;
        float _1458 = _1431 * 0.5;
        float _1459 = _1441 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1474 = (dot(vec3(_1054, _1055, _1056), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1484 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4445 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1486 + 1.0))) + _1491) * _1454;
        float _1501 = _1422 * 0.5;
        float _1502 = _1432 * 0.5;
        float _1503 = _1442 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_1054, _1055, _1056), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4478 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1528 + 1.0))) + _1533) * _1455;
        float _1543 = _1423 * 0.5;
        float _1544 = _1433 * 0.5;
        float _1545 = _1443 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_1054, _1055, _1056), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4489 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4500 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4511 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_1570 + 1.0))) + _1575) * _1456;
        _1592 = _1423;
        _1594 = _1422;
        _1595 = _1421;
        _1596 = _1433;
        _1597 = _1432;
        _1598 = _1431;
        _1599 = _1443;
        _1600 = _1442;
        _1601 = _1441;
        _1602 = _1456;
        _1603 = _1455;
        _1604 = _1454;
        _1605 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1606 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1607 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
    }
    else
    {
        _1592 = _1593;
        _1594 = _1593;
        _1595 = _1593;
        _1596 = _1593;
        _1597 = _1593;
        _1598 = _1593;
        _1599 = _1593;
        _1600 = _1593;
        _1601 = _1593;
        _1602 = _1593;
        _1603 = _1593;
        _1604 = _1593;
        _1605 = 0.0;
        _1606 = 0.0;
        _1607 = 0.0;
    }
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1630 = fma(_1291, cbModelParam._m0[30u].z, fma(_1287, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1283));
        float _1634 = fma(_1291, cbModelParam._m0[31u].z, fma(_1287, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1283));
        float _1638 = fma(_1291, cbModelParam._m0[32u].z, fma(_1287, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1283));
        float _1661 = _1283 + _1054;
        float _1662 = _1287 + _1055;
        float _1663 = _1291 + _1056;
        float _1673 = fma(_1663, cbModelParam._m0[30u].z, fma(_1662, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1661)) - _1630;
        float _1674 = fma(_1663, cbModelParam._m0[31u].z, fma(_1662, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1661)) - _1634;
        float _1675 = fma(_1663, cbModelParam._m0[32u].z, fma(_1662, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1661)) - _1638;
        float _1679 = inversesqrt(dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675)));
        float _1692 = ((_1679 * _1673) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1630 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1693 = ((_1679 * _1674) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1634 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1694 = ((_1679 * _1675) / cbModelParam._m0[35u].z) + ((((((_1638 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1696 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1692, _1693, _1694), 0.0);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1692, _1693, _1694), 0.0);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1692, _1693, _1694), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1692, _1693, _1694), 0.0);
        float _1729 = exp2((_1696.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1696.x + (-0.5));
        float _1731 = _1729 * (_1696.y + (-0.5));
        float _1732 = _1729 * (_1696.z + (-0.5));
        float _1739 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1740 = _1739 * (_1703.x + (-0.5));
        float _1741 = _1739 * (_1703.y + (-0.5));
        float _1742 = _1739 * (_1703.z + (-0.5));
        float _1749 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1750 = _1749 * (_1710.x + (-0.5));
        float _1751 = _1749 * (_1710.y + (-0.5));
        float _1752 = _1749 * (_1710.z + (-0.5));
        float _1759 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1760 = _1759 * (_1717.x + (-0.5));
        float _1761 = _1759 * (_1717.y + (-0.5));
        float _1762 = _1759 * (_1717.z + (-0.5));
        float _1763 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1764 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1765 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1766 = _1730 * 0.5;
        float _1767 = _1740 * 0.5;
        float _1768 = _1750 * 0.5;
        float _1769 = dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768));
        float _1774 = (_1769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1769);
        float _1782 = (dot(vec3(_1054, _1055, _1056), vec3(_1774 * _1766, _1774 * _1767, _1774 * _1768)) + 1.0) * 0.5;
        float _4552 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = sqrt(((_1767 * _1767) + (_1766 * _1766)) + (_1768 * _1768)) / (_1763 + 9.9999997473787516355514526367188e-06);
        float _4563 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4574 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_1793 + 1.0))) + _1798) * _1763;
        float _1808 = _1731 * 0.5;
        float _1809 = _1741 * 0.5;
        float _1810 = _1751 * 0.5;
        float _1811 = dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810));
        float _1816 = (_1811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1811);
        float _1824 = (dot(vec3(_1054, _1055, _1056), vec3(_1816 * _1808, _1816 * _1809, _1816 * _1810)) + 1.0) * 0.5;
        float _4585 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1833 = sqrt(((_1809 * _1809) + (_1808 * _1808)) + (_1810 * _1810)) / (_1764 + 9.9999997473787516355514526367188e-06);
        float _4596 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _1835 = _1834 * 2.0;
        float _1839 = (1.0 - _1834) / (_1834 + 1.0);
        float _4607 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _1849 = ((((1.0 - _1840) * (_1835 + 2.0)) * exp2(log2(isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_1835 + 1.0))) + _1840) * _1764;
        float _1850 = _1732 * 0.5;
        float _1851 = _1742 * 0.5;
        float _1852 = _1752 * 0.5;
        float _1853 = dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852));
        float _1858 = (_1853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1853);
        float _1866 = (dot(vec3(_1054, _1055, _1056), vec3(_1858 * _1850, _1858 * _1851, _1858 * _1852)) + 1.0) * 0.5;
        float _4618 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1875 = sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852)) / (_1765 + 9.9999997473787516355514526367188e-06);
        float _4629 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _1877 = _1876 * 2.0;
        float _1881 = (1.0 - _1876) / (_1876 + 1.0);
        float _4640 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _1891 = ((((1.0 - _1882) * (_1877 + 2.0)) * exp2(log2(isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_1877 + 1.0))) + _1882) * _1765;
        _1899 = _1732;
        _1900 = _1731;
        _1901 = _1730;
        _1902 = _1742;
        _1903 = _1741;
        _1904 = _1740;
        _1905 = _1752;
        _1906 = _1751;
        _1907 = _1750;
        _1908 = _1765;
        _1909 = _1764;
        _1910 = _1763;
        _1911 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
        _1912 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)));
        _1913 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)));
    }
    else
    {
        _1899 = _1593;
        _1900 = _1593;
        _1901 = _1593;
        _1902 = _1593;
        _1903 = _1593;
        _1904 = _1593;
        _1905 = _1593;
        _1906 = _1593;
        _1907 = _1593;
        _1908 = _1593;
        _1909 = _1593;
        _1910 = _1593;
        _1911 = 0.0;
        _1912 = 0.0;
        _1913 = 0.0;
    }
    float _1923 = (cbModelParam._m0[1u].x * (_1911 - _1605)) + _1605;
    float _1924 = (cbModelParam._m0[1u].x * (_1912 - _1606)) + _1606;
    float _1925 = (cbModelParam._m0[1u].x * (_1913 - _1607)) + _1607;
    float _1946 = fma(_1925, cbSceneParam._m0[89u].z, fma(_1924, cbSceneParam._m0[89u].y, _1923 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1925, cbSceneParam._m0[90u].z, fma(_1924, cbSceneParam._m0[90u].y, _1923 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1925, cbSceneParam._m0[91u].z, fma(_1924, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1923));
    float _1967 = _1227 * 0.5;
    float _1968 = _1228 * 0.5;
    float _1969 = _1229 * 0.5;
    float _1970 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1901, _1904, _1907, _1910));
    float _1973 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1900, _1903, _1906, _1909));
    float _1976 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1899, _1902, _1905, _1908));
    float _2010;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1983 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1592, _1596, _1599, _1602));
        float _1987 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1594, _1597, _1600, _1603));
        float _1991 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1595, _1598, _1601, _1604));
        float _1998 = dot(vec4(cbModelParam._m0[39u]), vec4(_1967, _1968, _1969, 1.0));
        _2010 = dot(vec3(isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1998) ? 0.0 : (isnan(0.0) ? _1998 : max(0.0, _1998))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2010 = 1.0;
    }
    float _2021;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2012 = dot(vec4(cbModelParam._m0[40u]), vec4(_1967, _1968, _1969, 1.0));
        _2021 = dot(vec3(isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0)), isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2012) ? 0.0 : (isnan(0.0) ? _2012 : max(0.0, _2012))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2021 = 1.0;
    }
    float _2025 = (_2021 * cbModelParam._m0[1u].x) + (_2010 * (1.0 - cbModelParam._m0[1u].x));
    float _2035 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1057);
    float _2036 = isnan(_2035) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2035 : min(cbModelParam._m0[25u].z, _2035));
    float _2116;
    float _2118;
    float _2120;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2083 = fma(_1291, cbModelParam._m0[13u].z, fma(_1287, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1283)) + cbModelParam._m0[13u].w;
        float _2087 = fma(_1291, cbModelParam._m0[14u].z, fma(_1287, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1283)) + cbModelParam._m0[14u].w;
        float _2091 = fma(_1291, cbModelParam._m0[15u].z, fma(_1287, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1283)) + cbModelParam._m0[15u].w;
        float _2094 = fma(_1229, cbModelParam._m0[13u].z, fma(_1228, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1227));
        float _2097 = fma(_1229, cbModelParam._m0[14u].z, fma(_1228, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1227));
        float _2100 = fma(_1229, cbModelParam._m0[15u].z, fma(_1228, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1227));
        float _2128;
        if (_2094 > 0.0)
        {
            _2128 = abs((1.0 - _2083) / _2094);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2083 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2128 = frontier_phi_14_12_ladder;
        }
        float _2300;
        if (_2097 > 0.0)
        {
            _2300 = abs((1.0 - _2087) / _2097);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2087 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2300 = frontier_phi_23_19_ladder;
        }
        float _2595;
        if (_2100 > 0.0)
        {
            _2595 = abs((1.0 - _2091) / _2100);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2091 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2595 = frontier_phi_35_30_ladder;
        }
        float _2597 = isnan(_2300) ? _2128 : (isnan(_2128) ? _2300 : min(_2128, _2300));
        float _2598 = isnan(_2595) ? _2597 : (isnan(_2597) ? _2595 : min(_2597, _2595));
        float _2602 = (_2598 * _2094) + _2083;
        float _2603 = (_2598 * _2097) + _2087;
        float _2604 = (_2598 * _2100) + _2091;
        float _2605 = _2598 * 9.9999997473787516355514526367188e-05;
        float _2607 = (-1.0) - _2605;
        float _2609 = _2605 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2604 > _2609) || ((_2604 < _2607) || ((_2603 > _2609) || ((_2603 < _2607) || ((_2602 < _2607) || (_2602 > _2609))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2749 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2604, cbModelParam._m0[9u].z, fma(_2603, cbModelParam._m0[9u].y, _2602 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2604, cbModelParam._m0[10u].z, fma(_2603, cbModelParam._m0[10u].y, _2602 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2604, cbModelParam._m0[11u].z, fma(_2603, cbModelParam._m0[11u].y, _2602 * cbModelParam._m0[11u].x))), _2036);
            frontier_phi_13_35_ladder = _2749.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2749.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2749.x * cbModelParam._m0[1u].y;
        }
        _2116 = frontier_phi_13_35_ladder_2;
        _2118 = frontier_phi_13_35_ladder_1;
        _2120 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2104 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1227, _1228, _1229), _2036);
        _2116 = _2104.x * cbModelParam._m0[1u].y;
        _2118 = _2104.y * cbModelParam._m0[1u].y;
        _2120 = _2104.z * cbModelParam._m0[1u].y;
    }
    float _2124 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1057);
    float _2125 = isnan(_2124) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2124 : min(cbModelParam._m0[25u].w, _2124));
    float _2215;
    float _2217;
    float _2219;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2179 = fma(_1291, cbModelParam._m0[21u].z, fma(_1287, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1283)) + cbModelParam._m0[21u].w;
        float _2183 = fma(_1291, cbModelParam._m0[22u].z, fma(_1287, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1283)) + cbModelParam._m0[22u].w;
        float _2187 = fma(_1291, cbModelParam._m0[23u].z, fma(_1287, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1283)) + cbModelParam._m0[23u].w;
        float _2190 = fma(_1229, cbModelParam._m0[21u].z, fma(_1228, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1227));
        float _2193 = fma(_1229, cbModelParam._m0[22u].z, fma(_1228, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1227));
        float _2196 = fma(_1229, cbModelParam._m0[23u].z, fma(_1228, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1227));
        float _2305;
        if (_2190 > 0.0)
        {
            _2305 = abs((1.0 - _2179) / _2190);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2190 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2179 + 1.0) / _2190);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2305 = frontier_phi_25_21_ladder;
        }
        float _2622;
        if (_2193 > 0.0)
        {
            _2622 = abs((1.0 - _2183) / _2193);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2193 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2183 + 1.0) / _2193);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2622 = frontier_phi_37_32_ladder;
        }
        float _2960;
        if (_2196 > 0.0)
        {
            _2960 = abs((1.0 - _2187) / _2196);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2196 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2187 + 1.0) / _2196);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2960 = frontier_phi_47_44_ladder;
        }
        float _2962 = isnan(_2622) ? _2305 : (isnan(_2305) ? _2622 : min(_2305, _2622));
        float _2963 = isnan(_2960) ? _2962 : (isnan(_2962) ? _2960 : min(_2962, _2960));
        float _2967 = (_2963 * _2190) + _2179;
        float _2968 = (_2963 * _2193) + _2183;
        float _2969 = (_2963 * _2196) + _2187;
        float _2970 = _2963 * 9.9999997473787516355514526367188e-05;
        float _2971 = (-1.0) - _2970;
        float _2973 = _2970 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2969 > _2973) || ((_2969 < _2971) || ((_2968 > _2973) || ((_2968 < _2971) || ((_2967 < _2971) || (_2967 > _2973))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3091 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2969, cbModelParam._m0[17u].z, fma(_2968, cbModelParam._m0[17u].y, _2967 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2969, cbModelParam._m0[18u].z, fma(_2968, cbModelParam._m0[18u].y, _2967 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2969, cbModelParam._m0[19u].z, fma(_2968, cbModelParam._m0[19u].y, _2967 * cbModelParam._m0[19u].x))), _2125);
            frontier_phi_22_47_ladder = _3091.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3091.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3091.x * cbModelParam._m0[1u].z;
        }
        _2215 = frontier_phi_22_47_ladder_2;
        _2217 = frontier_phi_22_47_ladder_1;
        _2219 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2199 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1227, _1228, _1229), _2125);
        _2215 = _2199.x * cbModelParam._m0[1u].z;
        _2217 = _2199.y * cbModelParam._m0[1u].z;
        _2219 = _2199.z * cbModelParam._m0[1u].z;
    }
    float _2232 = (((_1254 * _1203) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2215 - _2116)) + _2116);
    float _2234 = (((_1254 * _1205) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2217 - _2118)) + _2118);
    float _2236 = (((_1254 * _1206) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2219 - _2120)) + _2120);
    float _2239 = fma(_2236, cbSceneParam._m0[89u].z, fma(_2234, cbSceneParam._m0[89u].y, _2232 * cbSceneParam._m0[89u].x));
    float _2242 = fma(_2236, cbSceneParam._m0[90u].z, fma(_2234, cbSceneParam._m0[90u].y, _2232 * cbSceneParam._m0[90u].x));
    float _2245 = fma(_2236, cbSceneParam._m0[91u].z, fma(_2234, cbSceneParam._m0[91u].y, _2232 * cbSceneParam._m0[91u].x));
    float _2279 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2283 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2287 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2291 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2292 = _2279 / _2291;
    float _2293 = _2283 / _2291;
    float _2294 = _2287 / _2291;
    float _2441;
    float _2442;
    float _2443;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2321 = ((uint(_2294 > cbSceneParam._m0[59u].y) + uint(_2294 > cbSceneParam._m0[59u].x)) + uint(_2294 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2322 = _2321 + 43u;
        uint _2330 = _2321 + 44u;
        uint _2338 = _2321 + 45u;
        uint _2346 = _2321 + 46u;
        float _2357 = fma(_2291, cbSceneParam._m0[_2322].w, fma(_2287, cbSceneParam._m0[_2322].z, fma(_2283, cbSceneParam._m0[_2322].y, _2279 * cbSceneParam._m0[_2322].x)));
        float _2361 = fma(_2291, cbSceneParam._m0[_2330].w, fma(_2287, cbSceneParam._m0[_2330].z, fma(_2283, cbSceneParam._m0[_2330].y, _2279 * cbSceneParam._m0[_2330].x)));
        float _2369 = fma(_2291, cbSceneParam._m0[_2346].w, fma(_2287, cbSceneParam._m0[_2346].z, fma(_2283, cbSceneParam._m0[_2346].y, _2279 * cbSceneParam._m0[_2346].x)));
        float _2374 = cbSceneParam._m0[33u].z * _2369;
        float _2376 = cbSceneParam._m0[33u].w * _2369;
        float _2379 = fma(_2291, cbSceneParam._m0[_2338].w, fma(_2287, cbSceneParam._m0[_2338].z, fma(_2283, cbSceneParam._m0[_2338].y, _2279 * cbSceneParam._m0[_2338].x))) / _2369;
        float _2427 = (cbSceneParam._m0[33u].x - sqrt(((_2293 * _2293) + (_2292 * _2292)) + (_2294 * _2294))) * cbSceneParam._m0[33u].y;
        float _4766 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2434 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2374 + _2357) / _2369, (_2376 + _2361) / _2369), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2376 + _2357) / _2369, (_2361 - _2374) / _2369), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2357 - _2374) / _2369, (_2361 - _2376) / _2369), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2357 - _2376) / _2369, (_2374 + _2361) / _2369), _2379), 0.0)).x), vec4(0.25)));
        _2441 = 1.0 - (_2434 * cbSceneParam._m0[34u].x);
        _2442 = 1.0 - (_2434 * cbSceneParam._m0[34u].y);
        _2443 = 1.0 - (_2434 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2441 = 1.0;
        _2442 = 1.0;
        _2443 = 1.0;
    }
    float _2507;
    float _2509;
    float _2511;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2495 = fma(_2291, cbSceneParam._m0[63u].w, fma(_2287, cbSceneParam._m0[63u].z, fma(_2283, cbSceneParam._m0[63u].y, _2279 * cbSceneParam._m0[63u].x)));
        float _2496 = fma(_2291, cbSceneParam._m0[60u].w, fma(_2287, cbSceneParam._m0[60u].z, fma(_2283, cbSceneParam._m0[60u].y, _2279 * cbSceneParam._m0[60u].x))) / _2495;
        float _2497 = fma(_2291, cbSceneParam._m0[61u].w, fma(_2287, cbSceneParam._m0[61u].z, fma(_2283, cbSceneParam._m0[61u].y, _2279 * cbSceneParam._m0[61u].x))) / _2495;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2496 >= cbSceneParam._m0[64u].x) && (_2497 >= cbSceneParam._m0[64u].y)) && (_2496 <= cbSceneParam._m0[64u].z)) && (_2497 <= cbSceneParam._m0[64u].w))
        {
            float _2635 = fma(_2291, cbSceneParam._m0[62u].w, fma(_2287, cbSceneParam._m0[62u].z, fma(_2283, cbSceneParam._m0[62u].y, _2279 * cbSceneParam._m0[62u].x))) / _2495;
            float _2639 = isnan(cbSceneParam._m0[41u].w) ? _2635 : (isnan(_2635) ? cbSceneParam._m0[41u].w : max(_2635, cbSceneParam._m0[41u].w));
            float _2682 = (cbSceneParam._m0[33u].x - sqrt(((_2293 * _2293) + (_2292 * _2292)) + (_2294 * _2294))) * cbSceneParam._m0[33u].y;
            float _4782 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
            float _2689 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2496, cbSceneParam._m0[33u].w + _2497), _2639), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2496, _2497 - cbSceneParam._m0[33u].z), _2639), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2496 - cbSceneParam._m0[33u].z, _2497 - cbSceneParam._m0[33u].w), _2639), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2496 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2497), _2639), 0.0)).x), vec4(0.25)));
            float _2693 = 1.0 - (_2689 * cbSceneParam._m0[34u].x);
            float _2694 = 1.0 - (_2689 * cbSceneParam._m0[34u].y);
            float _2695 = 1.0 - (_2689 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2695) ? _2443 : (isnan(_2443) ? _2695 : min(_2443, _2695));
            frontier_phi_34_33_ladder_1 = isnan(_2694) ? _2442 : (isnan(_2442) ? _2694 : min(_2442, _2694));
            frontier_phi_34_33_ladder_2 = isnan(_2693) ? _2441 : (isnan(_2441) ? _2693 : min(_2441, _2693));
        }
        else
        {
            frontier_phi_34_33_ladder = _2443;
            frontier_phi_34_33_ladder_1 = _2442;
            frontier_phi_34_33_ladder_2 = _2441;
        }
        _2507 = frontier_phi_34_33_ladder_2;
        _2509 = frontier_phi_34_33_ladder_1;
        _2511 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2507 = _2441;
        _2509 = _2442;
        _2511 = _2443;
    }
    uvec4 _2516 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2518 = _2516.x * 14u;
    uint _2519 = _2518 + 13u;
    float _2526 = _1219 + (-1.0);
    float _2531 = (cbLight._m0[_2519].x * _2526) + 1.0;
    float _2532 = (cbLight._m0[_2519].y * _2526) + 1.0;
    float _2533 = (cbLight._m0[_2519].z * _2526) + 1.0;
    float _2534 = (cbLight._m0[_2519].w * _2526) + 1.0;
    uint _2535 = _2518 + 5u;
    float _2541 = isnan(1.0) ? _2532 : (isnan(_2532) ? 1.0 : min(_2532, 1.0));
    uint _2545 = _2518 + 4u;
    float _2554 = isnan(1.0) ? _2531 : (isnan(_2531) ? 1.0 : min(_2531, 1.0));
    uint _2558 = _2518 | 1u;
    float _2569 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_1054, _1055, _1056));
    float _2572 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_1054, _1055, _1056));
    float _4818 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _4829 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2577 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * 0.3183098733425140380859375;
    float _2579 = (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * 0.3183098733425140380859375;
    float _2586 = ((cbLight._m0[_2535].x * _2541) * _2579) + (((cbLight._m0[_2545].x * _2507) * _2554) * _2577);
    float _2587 = ((_2541 * cbLight._m0[_2535].y) * _2579) + (((cbLight._m0[_2545].y * _2509) * _2554) * _2577);
    float _2588 = ((_2541 * cbLight._m0[_2535].z) * _2579) + (((cbLight._m0[_2545].z * _2511) * _2554) * _2577);
    uvec4 _2592 = floatBitsToUint(cbLight._m0[_2518 + 12u]);
    bool _2594 = _2592.x == 0u;
    float _2696;
    float _2698;
    float _2700;
    if (_2594)
    {
        _2696 = _2586;
        _2698 = _2587;
        _2700 = _2588;
    }
    else
    {
        uint _2704 = _2518 + 6u;
        float _2720 = (dot(vec3(cbLight._m0[_2518 + 2u].xyz), vec3(_1054, _1055, _1056)) * 0.5) + 0.5;
        float _2721 = _2720 * _2720;
        float _4840 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2722 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2723 = isnan(1.0) ? _2533 : (isnan(_2533) ? 1.0 : min(_2533, 1.0));
        _2696 = (((cbLight._m0[_2704].x * 0.3183098733425140380859375) * _2722) * _2723) + _2586;
        _2698 = (((cbLight._m0[_2704].y * 0.3183098733425140380859375) * _2722) * _2723) + _2587;
        _2700 = (((cbLight._m0[_2704].z * 0.3183098733425140380859375) * _2722) * _2723) + _2588;
    }
    bool _2703 = _2592.y == 0u;
    float _2758;
    float _2760;
    float _2762;
    if (_2703)
    {
        _2758 = _2696;
        _2760 = _2698;
        _2762 = _2700;
    }
    else
    {
        uint _2931 = _2518 + 7u;
        float _2947 = (dot(vec3(cbLight._m0[_2518 + 3u].xyz), vec3(_1054, _1055, _1056)) * 0.5) + 0.5;
        float _2948 = _2947 * _2947;
        float _4856 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2949 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2950 = isnan(1.0) ? _2534 : (isnan(_2534) ? 1.0 : min(_2534, 1.0));
        _2758 = (((cbLight._m0[_2931].x * 0.3183098733425140380859375) * _2949) * _2950) + _2696;
        _2760 = (((cbLight._m0[_2931].y * 0.3183098733425140380859375) * _2949) * _2950) + _2698;
        _2762 = (((cbLight._m0[_2931].z * 0.3183098733425140380859375) * _2949) * _2950) + _2700;
    }
    uint _2765 = _2518 + 8u;
    float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _1057) * 0.949999988079071044921875);
    float _2779 = _2778 * _2778;
    float _2780 = cbLight._m0[_2518].x + _1133;
    float _2781 = cbLight._m0[_2518].y + _1134;
    float _2782 = cbLight._m0[_2518].z + _1135;
    float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
    float _2787 = _2786 * _2780;
    float _2788 = _2786 * _2781;
    float _2789 = _2786 * _2782;
    float _2790 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2518].xyz));
    float _4872 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2793 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
    float _4883 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _2794 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
    float _2795 = dot(vec3(_1054, _1055, _1056), vec3(_2787, _2788, _2789));
    float _4894 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2798 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
    float _2799 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2787, _2788, _2789));
    float _4905 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
    float _2803 = _2779 * _2779;
    float _2807 = ((_2798 * _2798) * (_2803 + (-1.0))) + 1.0;
    float _2815 = exp2(log2(1.0 - (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) * 5.0);
    float _2816 = 0.959999978542327880859375 - _1200;
    float _2818 = 0.959999978542327880859375 - _1201;
    float _2819 = 0.959999978542327880859375 - _1202;
    float _2826 = 1.0 - _2779;
    float _2837 = (0.5 / (((_2794 * ((_2793 * _2826) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2794 * _2826) + _2779) * _2793))) * _2793;
    float _4916 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
    float _2839 = (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2803 / ((_2807 * _2807) * 3.141590118408203125));
    uint _2853 = _2518 + 9u;
    float _2864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _1057) * 0.949999988079071044921875);
    float _2865 = _2864 * _2864;
    float _2866 = cbLight._m0[_2558].x + _1133;
    float _2867 = cbLight._m0[_2558].y + _1134;
    float _2868 = cbLight._m0[_2558].z + _1135;
    float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
    float _2873 = _2872 * _2866;
    float _2874 = _2872 * _2867;
    float _2875 = _2872 * _2868;
    float _2876 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2558].xyz));
    float _4927 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
    float _2879 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
    float _2880 = dot(vec3(_1054, _1055, _1056), vec3(_2873, _2874, _2875));
    float _4938 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
    float _2883 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
    float _2884 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2873, _2874, _2875));
    float _4949 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
    float _2888 = _2865 * _2865;
    float _2892 = ((_2883 * _2883) * (_2888 + (-1.0))) + 1.0;
    float _2899 = exp2(log2(1.0 - (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) * 5.0);
    float _2906 = 1.0 - _2865;
    float _2916 = (0.5 / (((_2794 * ((_2879 * _2906) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2794 * _2906) + _2865) * _2879))) * _2879;
    float _4960 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
    float _2918 = (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_2888 / ((_2892 * _2892) * 3.141590118408203125));
    float _2928 = (((((_2899 * _2816) + _1203) * cbLight._m0[_2853].x) * _2918) * _2541) + ((((cbLight._m0[_2765].x * _2507) * ((_2815 * _2816) + _1203)) * _2839) * _2554);
    float _2929 = (((((_2899 * _2818) + _1205) * cbLight._m0[_2853].y) * _2918) * _2541) + ((((cbLight._m0[_2765].y * _2509) * ((_2815 * _2818) + _1205)) * _2839) * _2554);
    float _2930 = (((((_2899 * _2819) + _1206) * cbLight._m0[_2853].z) * _2918) * _2541) + ((((cbLight._m0[_2765].z * _2511) * ((_2815 * _2819) + _1206)) * _2839) * _2554);
    float _2986;
    float _2988;
    float _2990;
    if (_2594)
    {
        _2986 = _2928;
        _2988 = _2929;
        _2990 = _2930;
    }
    else
    {
        uint _2992 = _2518 + 2u;
        uint _2996 = _2518 + 10u;
        float _3010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2992].w)) * _1057) * 0.949999988079071044921875);
        float _3011 = _3010 * _3010;
        float _3012 = cbLight._m0[_2992].x + _1133;
        float _3013 = cbLight._m0[_2992].y + _1134;
        float _3014 = cbLight._m0[_2992].z + _1135;
        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
        float _3019 = _3018 * _3012;
        float _3020 = _3018 * _3013;
        float _3021 = _3018 * _3014;
        float _3022 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2992].xyz));
        float _4971 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
        float _3025 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
        float _3026 = dot(vec3(_1054, _1055, _1056), vec3(_3019, _3020, _3021));
        float _4982 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
        float _3029 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
        float _3030 = dot(vec3(cbLight._m0[_2992].xyz), vec3(_3019, _3020, _3021));
        float _4993 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
        float _3034 = _3011 * _3011;
        float _3038 = ((_3029 * _3029) * (_3034 + (-1.0))) + 1.0;
        float _3045 = exp2(log2(1.0 - (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) * 5.0);
        float _3052 = 1.0 - _3011;
        float _3062 = (0.5 / (((_2794 * ((_3025 * _3052) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_2794 * _3052) + _3011) * _3025))) * _3025;
        float _5004 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
        float _3064 = (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_3034 / ((_3038 * _3038) * 3.141590118408203125));
        float _3065 = isnan(1.0) ? _2533 : (isnan(_2533) ? 1.0 : min(_2533, 1.0));
        _2986 = (((((_3045 * _2816) + _1203) * cbLight._m0[_2996].x) * _3064) * _3065) + _2928;
        _2988 = (((((_3045 * _2818) + _1205) * cbLight._m0[_2996].y) * _3064) * _3065) + _2929;
        _2990 = (((((_3045 * _2819) + _1206) * cbLight._m0[_2996].z) * _3064) * _3065) + _2930;
    }
    float _3096;
    float _3098;
    float _3100;
    if (_2703)
    {
        _3096 = _2986;
        _3098 = _2988;
        _3100 = _2990;
    }
    else
    {
        uint _3107 = _2518 + 3u;
        uint _3111 = _2518 + 11u;
        float _3125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3107].w)) * _1057) * 0.949999988079071044921875);
        float _3126 = _3125 * _3125;
        float _3127 = cbLight._m0[_3107].x + _1133;
        float _3128 = cbLight._m0[_3107].y + _1134;
        float _3129 = cbLight._m0[_3107].z + _1135;
        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
        float _3134 = _3133 * _3127;
        float _3135 = _3133 * _3128;
        float _3136 = _3133 * _3129;
        float _3137 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_3107].xyz));
        float _5020 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
        float _3140 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
        float _3141 = dot(vec3(_1054, _1055, _1056), vec3(_3134, _3135, _3136));
        float _5031 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
        float _3144 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
        float _3145 = dot(vec3(cbLight._m0[_3107].xyz), vec3(_3134, _3135, _3136));
        float _5042 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
        float _3149 = _3126 * _3126;
        float _3153 = ((_3144 * _3144) * (_3149 + (-1.0))) + 1.0;
        float _3160 = exp2(log2(1.0 - (isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0)))) * 5.0);
        float _3167 = 1.0 - _3126;
        float _3177 = (0.5 / (((_2794 * ((_3140 * _3167) + _3126)) + 9.9999999392252902907785028219223e-09) + (((_2794 * _3167) + _3126) * _3140))) * _3140;
        float _5053 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
        float _3179 = (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3149 / ((_3153 * _3153) * 3.141590118408203125));
        float _3180 = isnan(1.0) ? _2534 : (isnan(_2534) ? 1.0 : min(_2534, 1.0));
        _3096 = (((((_3160 * _2816) + _1203) * cbLight._m0[_3111].x) * _3179) * _3180) + _2986;
        _3098 = (((((_3160 * _2818) + _1205) * cbLight._m0[_3111].y) * _3179) * _3180) + _2988;
        _3100 = (((((_3160 * _2819) + _1206) * cbLight._m0[_3111].z) * _3179) * _3180) + _2990;
    }
    float _3246;
    float _3248;
    float _3250;
    float _3252;
    float _3254;
    float _3256;
    if (_2516.y == 0u)
    {
        uvec4 _3201 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3202 = _3201.x;
        uint _3213 = uint((float(_3201.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1142) / _3202))) + floor(float(uint(cbSceneParam._m0[85u].x * _1141) / _3202)));
        float _3223 = (log2(_2294 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3224 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
        uint _3227 = uint(isnan(14.0) ? _3224 : (isnan(_3224) ? 14.0 : min(_3224, 14.0)));
        uvec4 _3232 = texelFetch(g_lightClusterGridBuffer, int(((_3227 << 2u) + (_3213 << 6u)) >> 2u));
        uint _3233 = _3232.x;
        uint _3234 = _3201.z;
        float _3313;
        float _3315;
        float _3317;
        float _3319;
        float _3321;
        float _3323;
        if (((((1u << ((_3234 >> 4u) & 15u)) + 4294967295u) & _3233) == 0u) || ((_3234 & 240u) == 0u))
        {
            _3313 = 0.0;
            _3315 = 0.0;
            _3317 = 0.0;
            _3319 = 0.0;
            _3321 = 0.0;
            _3323 = 0.0;
        }
        else
        {
            float _3314;
            float _3316;
            float _3318;
            float _3320;
            float _3322;
            float _3324;
            float _3458 = 0.0;
            float _3459 = 0.0;
            float _3460 = 0.0;
            float _3461 = 0.0;
            float _3462 = 0.0;
            float _3463 = 0.0;
            uint _3464 = 0u;
            uint _3473;
            bool _3474;
            for (;;)
            {
                _3473 = texelFetch(g_lightClassification, int((((_3227 << 5u) + (_3213 << 9u)) + (_3464 << 2u)) >> 2u)).x;
                _3474 = _3473 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3474)
                {
                    frontier_phi_66_pred = _3463;
                    frontier_phi_66_pred_1 = _3462;
                    frontier_phi_66_pred_2 = _3461;
                    frontier_phi_66_pred_3 = _3460;
                    frontier_phi_66_pred_4 = _3459;
                    frontier_phi_66_pred_5 = _3458;
                }
                else
                {
                    float _3582;
                    float _3583;
                    float _3584;
                    float _3585;
                    float _3586;
                    float _3587;
                    uint _3588;
                    _3582 = _3458;
                    _3583 = _3459;
                    _3584 = _3460;
                    _3585 = _3461;
                    _3586 = _3462;
                    _3587 = _3463;
                    _3588 = _3473;
                    float _3514;
                    float _3515;
                    float _3516;
                    float _3517;
                    float _3518;
                    float _3519;
                    for (;;)
                    {
                        uint _3592 = uint(findLSB(_3588)) + (_3464 << 5u);
                        uint _3589 = (_3588 + 4294967295u) & _3588;
                        uint _3594 = _3592 * 48u;
                        vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3594)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3594 + 3u)).x));
                        uint _3614 = (_3592 * 48u) + 4u;
                        vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3614)).x, texelFetch(g_PointLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3614 + 3u)).x));
                        uint _3633 = (_3592 * 48u) + 8u;
                        vec3 _3644 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3633)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3633 + 2u)).x));
                        float _3648 = _3608.x - _2292;
                        float _3649 = _3608.y - _2293;
                        float _3650 = _3608.z - _2294;
                        float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                        float _3654 = inversesqrt(_3651);
                        float _3655 = _3654 * _3648;
                        float _3656 = _3654 * _3649;
                        float _3657 = _3654 * _3650;
                        float _3658 = dot(vec3(_1160, _1163, _1166), vec3(_3655, _3656, _3657));
                        float _3663 = 1.0 - (_3651 * _3608.w);
                        float _5079 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3664 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                        float _3665 = sqrt(_3651) * _3627.w;
                        float _3668 = 1.39999997615814208984375 / (_3665 + 1.39999997615814208984375);
                        float _3669 = _3668 * _3668;
                        float _3672 = ((1.0 - _3669) * _3658) + _3669;
                        float _3675 = _3665 * _3665;
                        float _3679 = ((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3664) / ((_3675 * 0.699999988079071044921875) + 1.0);
                        float _3683 = (-0.0) - _2292;
                        float _3684 = (-0.0) - _2293;
                        float _3685 = (-0.0) - _2294;
                        float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                        float _3690 = _3689 * _3683;
                        float _3691 = _3689 * _3684;
                        float _3692 = _3689 * _3685;
                        float _3699 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                        float _3700 = 1.0 - _1235;
                        float _3707 = sqrt(1.0 - ((1.0 - (_3700 * _3700)) * (1.0 - (_3699 * _3699))));
                        float _3708 = _3707 * _3707;
                        float _3709 = _3708 * _3708;
                        float _3710 = _3690 + _3655;
                        float _3711 = _3691 + _3656;
                        float _3712 = _3692 + _3657;
                        float _3716 = inversesqrt(dot(vec3(_3710, _3711, _3712), vec3(_3710, _3711, _3712)));
                        float _3720 = dot(vec3(_1160, _1163, _1166), vec3(_3690, _3691, _3692));
                        float _5095 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                        float _3723 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
                        float _3724 = dot(vec3(_1160, _1163, _1166), vec3(_3716 * _3710, _3716 * _3711, _3716 * _3712));
                        float _5106 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                        float _3727 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                        float _3731 = ((_3727 * _3727) * (_3709 + (-1.0))) + 1.0;
                        float _3732 = _3668 * _3708;
                        float _3733 = _3732 * _3732;
                        float _3736 = ((1.0 - _3733) * _3658) + _3733;
                        float _5117 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                        float _3737 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                        float _3738 = 1.0 - _3708;
                        float _3748 = (0.5 / (((_3737 * ((_3723 * _3738) + _3708)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3708) * _3723))) * _3737;
                        float _5128 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                        float _3759 = (((_3709 * 3.1415927410125732421875) * (isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0)))) / ((_3731 * _3731) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125))) * _3664;
                        _3517 = (_3679 * _3627.x) + _3585;
                        _3518 = (_3679 * _3627.y) + _3586;
                        _3519 = (_3679 * _3627.z) + _3587;
                        _3514 = (_3759 * _3644.x) + _3582;
                        _3515 = (_3759 * _3644.y) + _3583;
                        _3516 = (_3759 * _3644.z) + _3584;
                        if (_3589 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3582 = _3514;
                            _3583 = _3515;
                            _3584 = _3516;
                            _3585 = _3517;
                            _3586 = _3518;
                            _3587 = _3519;
                            _3588 = _3589;
                        }
                    }
                    frontier_phi_66_pred = _3519;
                    frontier_phi_66_pred_1 = _3518;
                    frontier_phi_66_pred_2 = _3517;
                    frontier_phi_66_pred_3 = _3516;
                    frontier_phi_66_pred_4 = _3515;
                    frontier_phi_66_pred_5 = _3514;
                }
                _3324 = frontier_phi_66_pred;
                _3322 = frontier_phi_66_pred_1;
                _3320 = frontier_phi_66_pred_2;
                _3318 = frontier_phi_66_pred_3;
                _3316 = frontier_phi_66_pred_4;
                _3314 = frontier_phi_66_pred_5;
                uint _3465 = _3464 + 1u;
                if (_3465 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3458 = _3314;
                    _3459 = _3316;
                    _3460 = _3318;
                    _3461 = _3320;
                    _3462 = _3322;
                    _3463 = _3324;
                    _3464 = _3465;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3313 = _3314;
            _3315 = _3316;
            _3317 = _3318;
            _3319 = _3320;
            _3321 = _3322;
            _3323 = _3324;
        }
        uvec4 _3327 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3328 = _3327.z;
        uint _3330 = (_3328 >> 8u) & 15u;
        float _3426;
        float _3428;
        float _3430;
        float _3432;
        float _3434;
        float _3436;
        if (((4294967295u << _3330) & _3233) == 0u)
        {
            _3426 = _3313;
            _3428 = _3315;
            _3430 = _3317;
            _3432 = _3319;
            _3434 = _3321;
            _3436 = _3323;
        }
        else
        {
            float _3451 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
            float _3452 = _3451 * _2292;
            float _3453 = _3451 * _2293;
            float _3454 = _3451 * _2294;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3330 < ((_3328 >> 12u) & 15u))
            {
                float _3427;
                float _3429;
                float _3431;
                float _3433;
                float _3435;
                float _3437;
                float _3565 = _3313;
                float _3566 = _3315;
                float _3567 = _3317;
                float _3568 = _3319;
                float _3569 = _3321;
                float _3570 = _3323;
                uint _3571 = _3330;
                uint _3580;
                bool _3581;
                for (;;)
                {
                    _3580 = texelFetch(g_lightClassification, int((((_3227 << 5u) + (_3213 << 9u)) + (_3571 << 2u)) >> 2u)).x;
                    _3581 = _3580 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3581)
                    {
                        frontier_phi_72_pred = _3570;
                        frontier_phi_72_pred_1 = _3569;
                        frontier_phi_72_pred_2 = _3568;
                        frontier_phi_72_pred_3 = _3567;
                        frontier_phi_72_pred_4 = _3566;
                        frontier_phi_72_pred_5 = _3565;
                    }
                    else
                    {
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _4057;
                        float _4058;
                        float _4059;
                        float _4060;
                        float _4061;
                        float _4062;
                        float _3777 = _3565;
                        float _3778 = _3566;
                        float _3779 = _3567;
                        float _3780 = _3568;
                        float _3781 = _3569;
                        float _3782 = _3570;
                        uint _3783 = _3580;
                        uint _3784;
                        vec4 _3809;
                        float _3810;
                        vec4 _3825;
                        vec3 _3837;
                        vec4 _3852;
                        vec4 _3867;
                        float _3913;
                        bool _3914;
                        for (;;)
                        {
                            uint _3794 = ((_3571 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3783));
                            _3784 = (_3783 + 4294967295u) & _3783;
                            uint _3796 = _3794 * 40u;
                            _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            _3810 = _3809.w;
                            uint _3812 = (_3794 * 40u) + 4u;
                            _3825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 3u)).x));
                            uint _3827 = (_3794 * 40u) + 8u;
                            _3837 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 2u)).x));
                            uint _3839 = (_3794 * 40u) + 16u;
                            _3852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3839 + 3u)).x));
                            uint _3854 = (_3794 * 40u) + 20u;
                            _3867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3854 + 3u)).x));
                            uint _3869 = (_3794 * 40u) + 24u;
                            vec4 _3882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3869 + 3u)).x));
                            uint _3888 = (_3794 * 40u) + 28u;
                            vec4 _3901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 3u)).x));
                            _3913 = fma(_2294, _3901.z, fma(_2293, _3901.y, _3901.x * _2292)) + _3901.w;
                            _3914 = !((fma(_2294, _3882.z, fma(_2293, _3882.y, _3882.x * _2292)) + _3882.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3914)
                            {
                                float _3941 = _3809.x - _2292;
                                float _3942 = _3809.y - _2293;
                                float _3943 = _3809.z - _2294;
                                float _3944 = dot(vec3(_3941, _3942, _3943), vec3(_3941, _3942, _3943));
                                float _3947 = inversesqrt(_3944);
                                float _3948 = _3947 * _3941;
                                float _3949 = _3947 * _3942;
                                float _3950 = _3947 * _3943;
                                float _3954 = 1.0 - (_3944 / (_3810 * _3810));
                                float _5139 = isnan(0.0) ? _3954 : (isnan(_3954) ? 0.0 : max(_3954, 0.0));
                                float _3955 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                                float _3959 = sqrt(_3944) * _3825.w;
                                float _3961 = 1.39999997615814208984375 / (_3959 + 1.39999997615814208984375);
                                float _3962 = _3961 * _3961;
                                float _3965 = ((1.0 - _3962) * dot(vec3(_3948, _3949, _3950), vec3(_1160, _1163, _1166))) + _3962;
                                float _3968 = _3959 * _3959;
                                float _3972 = (fma(_2294, _3852.z, fma(_2293, _3852.y, _3852.x * _2292)) + _3852.w) / _3913;
                                float _3973 = (fma(_2294, _3867.z, fma(_2293, _3867.y, _3867.x * _2292)) + _3867.w) / _3913;
                                float _3977 = 1.0 - dot(vec2(_3972, _3973), vec2(_3972, _3973));
                                float _5155 = isnan(0.0) ? _3977 : (isnan(_3977) ? 0.0 : max(_3977, 0.0));
                                float _3978 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _3979 = _3978 * (((isnan(0.0) ? _3965 : (isnan(_3965) ? 0.0 : max(_3965, 0.0))) * _3955) / ((_3968 * 0.699999988079071044921875) + 1.0));
                                float _3991 = exp2(log2(1.0 / ((_3968 * 3.5) + 5.0)) * 0.25);
                                float _3992 = 1.0 - _1235;
                                float _3999 = sqrt(1.0 - ((1.0 - (_3992 * _3992)) * (1.0 - (_3991 * _3991))));
                                float _4000 = _3999 * _3999;
                                float _4001 = _4000 * _4000;
                                float _4002 = _3948 - _3452;
                                float _4003 = _3949 - _3453;
                                float _4004 = _3950 - _3454;
                                float _4008 = inversesqrt(dot(vec3(_4002, _4003, _4004), vec3(_4002, _4003, _4004)));
                                float _4012 = dot(vec3(_1160, _1163, _1166), vec3((-0.0) - _3452, (-0.0) - _3453, (-0.0) - _3454));
                                float _5166 = isnan(0.0) ? _4012 : (isnan(_4012) ? 0.0 : max(_4012, 0.0));
                                float _4015 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
                                float _4016 = dot(vec3(_1160, _1163, _1166), vec3(_4008 * _4002, _4008 * _4003, _4008 * _4004));
                                float _5177 = isnan(0.0) ? _4016 : (isnan(_4016) ? 0.0 : max(_4016, 0.0));
                                float _4019 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
                                float _4023 = ((_4019 * _4019) * (_4001 + (-1.0))) + 1.0;
                                float _4024 = _3961 * _4000;
                                float _4025 = _4024 * _4024;
                                float _4031 = ((1.0 - _4025) * dot(vec3(_1160, _1163, _1166), vec3(_3948, _3949, _3950))) + _4025;
                                float _5188 = isnan(0.0) ? _4031 : (isnan(_4031) ? 0.0 : max(_4031, 0.0));
                                float _4032 = isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0));
                                float _4033 = 1.0 - _4000;
                                float _4043 = (0.5 / (((_4032 * ((_4015 * _4033) + _4000)) + 9.9999999392252902907785028219223e-09) + (((_4032 * _4033) + _4000) * _4015))) * _4032;
                                float _5199 = isnan(0.0) ? _4043 : (isnan(_4043) ? 0.0 : max(_4043, 0.0));
                                float _4053 = (_3978 * _3955) * (((_4001 * 3.1415927410125732421875) * (isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0)))) / ((_4023 * _4023) * ((_3968 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3979 * _3825.y;
                                frontier_phi_78_pred_1 = _3979 * _3825.x;
                                frontier_phi_78_pred_2 = _4053 * _3837.z;
                                frontier_phi_78_pred_3 = _4053 * _3837.y;
                                frontier_phi_78_pred_4 = _4053 * _3837.x;
                                frontier_phi_78_pred_5 = _3979 * _3825.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4061 = frontier_phi_78_pred;
                            _4060 = frontier_phi_78_pred_1;
                            _4059 = frontier_phi_78_pred_2;
                            _4058 = frontier_phi_78_pred_3;
                            _4057 = frontier_phi_78_pred_4;
                            _4062 = frontier_phi_78_pred_5;
                            _3767 = _4060 + _3780;
                            _3768 = _4061 + _3781;
                            _3769 = _4062 + _3782;
                            _3764 = _4057 + _3777;
                            _3765 = _4058 + _3778;
                            _3766 = _4059 + _3779;
                            if (_3784 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3777 = _3764;
                                _3778 = _3765;
                                _3779 = _3766;
                                _3780 = _3767;
                                _3781 = _3768;
                                _3782 = _3769;
                                _3783 = _3784;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3769;
                        frontier_phi_72_pred_1 = _3768;
                        frontier_phi_72_pred_2 = _3767;
                        frontier_phi_72_pred_3 = _3766;
                        frontier_phi_72_pred_4 = _3765;
                        frontier_phi_72_pred_5 = _3764;
                    }
                    _3437 = frontier_phi_72_pred;
                    _3435 = frontier_phi_72_pred_1;
                    _3433 = frontier_phi_72_pred_2;
                    _3431 = frontier_phi_72_pred_3;
                    _3429 = frontier_phi_72_pred_4;
                    _3427 = frontier_phi_72_pred_5;
                    uint _3572 = _3571 + 1u;
                    if (_3572 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3565 = _3427;
                        _3566 = _3429;
                        _3567 = _3431;
                        _3568 = _3433;
                        _3569 = _3435;
                        _3570 = _3437;
                        _3571 = _3572;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3437;
                frontier_phi_60_61_ladder_1 = _3435;
                frontier_phi_60_61_ladder_2 = _3431;
                frontier_phi_60_61_ladder_3 = _3429;
                frontier_phi_60_61_ladder_4 = _3427;
                frontier_phi_60_61_ladder_5 = _3433;
            }
            else
            {
                frontier_phi_60_61_ladder = _3323;
                frontier_phi_60_61_ladder_1 = _3321;
                frontier_phi_60_61_ladder_2 = _3317;
                frontier_phi_60_61_ladder_3 = _3315;
                frontier_phi_60_61_ladder_4 = _3313;
                frontier_phi_60_61_ladder_5 = _3319;
            }
            _3426 = frontier_phi_60_61_ladder_4;
            _3428 = frontier_phi_60_61_ladder_3;
            _3430 = frontier_phi_60_61_ladder_2;
            _3432 = frontier_phi_60_61_ladder_5;
            _3434 = frontier_phi_60_61_ladder_1;
            _3436 = frontier_phi_60_61_ladder;
        }
        float _3441 = isnan(1.0) ? _1219 : (isnan(_1219) ? 1.0 : min(_1219, 1.0));
        _3246 = (_3441 * _3432) + _2758;
        _3248 = (_3441 * _3434) + _2760;
        _3250 = (_3441 * _3436) + _2762;
        _3252 = ((_3426 * _1203) * _3441) + _3096;
        _3254 = ((_3428 * _1205) * _3441) + _3098;
        _3256 = ((_3430 * _1206) * _3441) + _3100;
    }
    else
    {
        _3246 = _2758;
        _3248 = _2760;
        _3250 = _2762;
        _3252 = _3096;
        _3254 = _3098;
        _3256 = _3100;
    }
    float _5215 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _5226 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _5237 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    uint _3276 = _273 + 6u;
    float _3284 = _1141 / cbSceneParam._m0[86u].x;
    float _3285 = _1142 / cbSceneParam._m0[86u].y;
    vec4 _3299 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3284, _3285, (log2((isnan(cbSceneParam._m0[77u].w) ? _1076 : (isnan(_1076) ? cbSceneParam._m0[77u].w : min(_1076, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3301 = _3299.x;
    float _3302 = _3299.y;
    float _3303 = _3299.z;
    float _3304 = _3299.w;
    float _3376;
    float _3378;
    float _3380;
    float _3382;
    if (_1076 > cbSceneParam._m0[78u].w)
    {
        float _3338 = isnan(_1076) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1076 : min(cbSceneParam._m0[80u].w, _1076));
        float _3339 = _3338 / _1076;
        float _3350 = _3339 * _1126;
        float _3351 = _1127 * _3339;
        float _3352 = (-0.0) - _3351;
        float _3354 = _3339 * _1128;
        float _3356 = (cbSceneParam._m0[77u].w * _3352) / _3338;
        float _3357 = _3356 + cbSceneParam._m0[79u].w;
        float _3358 = cbSceneParam._m0[79u].w - _3351;
        float _3364 = sqrt(((_3350 * _3350) + (_3351 * _3351)) + (_3354 * _3354));
        float _3367 = (1.0 - (cbSceneParam._m0[77u].w / _3338)) * _3364;
        float _3372 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3374 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3527;
        if (abs((_3352 - _3356) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3527 = ((((_3357 > 0.0) ? exp2(_3372 * _3357) : (2.0 - exp2(_3374 * _3357))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3367;
        }
        else
        {
            float _3487 = 1.0 / cbSceneParam._m0[80u].x;
            float _3488 = isnan(_3358) ? _3357 : (isnan(_3357) ? _3358 : max(_3357, _3358));
            float _3489 = isnan(_3358) ? _3357 : (isnan(_3357) ? _3358 : min(_3357, _3358));
            float _3498 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : min(_3488, 0.0));
            float _3499 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : min(_3489, 0.0));
            _3527 = ((abs(_3364 / _3352) * cbSceneParam._m0[80u].y) * ((((_3498 - _3499) * 2.0) - ((exp2(_3372 * (isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0)))) - exp2(_3372 * (isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))))) * _3487)) - ((exp2(_3374 * _3498) - exp2(_3374 * _3499)) * _3487))) + (_3367 * cbSceneParam._m0[80u].z);
        }
        vec4 _3529 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3284, _3285, 1.0), 0.0);
        float _3538 = exp2((_3527 * (-1.44269502162933349609375)) * (1.0 - _3529.w));
        float _3539 = log2(_3538);
        float _3555 = log2(_3304);
        _3376 = (exp2(_3555 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3539 * cbSceneParam._m0[78u].x)) * _3529.x) / cbSceneParam._m0[78u].x)) + _3301;
        _3378 = (exp2(_3555 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3539 * cbSceneParam._m0[78u].y)) * _3529.y) / cbSceneParam._m0[78u].y)) + _3302;
        _3380 = (exp2(_3555 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3539 * cbSceneParam._m0[78u].z)) * _3529.z) / cbSceneParam._m0[78u].z)) + _3303;
        _3382 = _3538 * _3304;
    }
    else
    {
        _3376 = _3301;
        _3378 = _3302;
        _3380 = _3303;
        _3382 = _3304;
    }
    float _3394 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3395 = _3394 == 3.0;
    float _3396 = log2(_3382);
    float _3403 = exp2(_3396 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0))) * (_3246 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1219))) + ((_3252 + ((isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0))) * _2025)) * cbPerFrame._m0[3u].x));
    float _3404 = exp2(_3396 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0))) * (_3248 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1219))) + ((_3254 + ((isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0))) * _2025)) * cbPerFrame._m0[3u].x));
    float _3405 = exp2(_3396 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5237 : (isnan(_5237) ? 1.0 : min(_5237, 1.0))) * (_3250 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1219))) + ((_3256 + ((isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0))) * _2025)) * cbPerFrame._m0[3u].x));
    float _3414 = (_3394 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3414 * (_3395 ? _3403 : (_3403 + (cbSceneParam._m0[72u].w * _3376)));
    SV_Target.y = _3414 * (_3395 ? _3404 : (_3404 + (cbSceneParam._m0[72u].w * _3378)));
    SV_Target.z = _3414 * (_3395 ? _3405 : (_3405 + (cbSceneParam._m0[72u].w * _3380)));
    SV_Target.w = cbInstanceData._m0[_3276].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3276].w;
}


