#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1335;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3947 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3958 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3969 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _368 = _363.x * cbMtdParam._m0[11u].x;
    float _369 = _363.y * cbMtdParam._m0[11u].y;
    float _370 = _363.z * cbMtdParam._m0[11u].z;
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _451 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _468 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_439 - _451) * cbMtdParam._m0[23u].w) + _451) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3980 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _479 = (_337.x * cbMtdParam._m0[9u].x) * ((_469 * ((_389.x * cbMtdParam._m0[12u].x) - _368)) + _368);
    float _480 = (_337.y * cbMtdParam._m0[9u].y) * ((_469 * ((_389.y * cbMtdParam._m0[12u].y) - _369)) + _369);
    float _481 = (_337.z * cbMtdParam._m0[9u].z) * ((_469 * ((_389.z * cbMtdParam._m0[12u].z) - _370)) + _370);
    float _485 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _479;
    float _488 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _480;
    float _491 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _481;
    float _499 = (((_479 - _485) * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) + _485) * 4.55000019073486328125;
    float _501 = (((_480 - _488) * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) + _488) * 4.55000019073486328125;
    float _503 = (((_481 - _491) * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) + _491) * 4.55000019073486328125;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _560 = _558.x;
    float _561 = _558.y;
    float _562 = _558.z;
    float _571 = ((_541.z - _562) * _469) + _562;
    float _574 = ((((_541.x - _560) * _469) + _560) * 2.0) + (-1.0);
    float _575 = ((((_541.y - _561) * _469) + _561) * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _3991 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _581 = sqrt(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _615 = (_574 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_516.x * 2.0) + (-1.0)))) + (((_603.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _616 = (_575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_516.y * 2.0) + (-1.0)))) + (((_603.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _628 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _630 = _628.x;
    float _631 = 1.0 - _630;
    float _660 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_630 - _631) * cbMtdParam._m0[24u].w) + _631) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4002 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _669 = ((((cbMtdParam._m0[10u].x - _499) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _661) + _499;
    float _670 = ((((cbMtdParam._m0[10u].y - _501) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _661) + _501;
    float _671 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _503)) * _661) + _503;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _699 = _697.x;
    float _716 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _699) * _469) + _699;
    float _720 = ((_683.x - _716) * cbMtdParam._m0[19u].z) + _716;
    float _722 = _720 - (_720 * _661);
    float _727 = (((_516.z - _571) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _571;
    float _731 = ((_603.z - _727) * cbMtdParam._m0[19u].w) + _727;
    float _735 = ((cbMtdParam._m0[23u].x - _731) * _661) + _731;
    vec4 _754 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _760 = (_754.x * 2.0) + (-1.0);
    float _761 = (_754.y * 2.0) + (-1.0);
    float _762 = dot(vec2(_760, _761), vec2(_760, _761));
    float _4013 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _778 = (_661 * (((cbMtdParam._m0[22u].z * _615) - _615) + _760)) + _615;
    float _779 = (_661 * (((cbMtdParam._m0[22u].z * _616) - _616) + _761)) + _616;
    float _780 = (_661 * (sqrt(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) - _581)) + _581;
    float _782 = cbMtdParam._m0[22u].x + _603.w;
    float _785 = fma(_780, _249 * NORMAL.x, fma(_779, _256 * TANGENT.x, (_242 * _234) * _778));
    float _788 = fma(_780, _249 * NORMAL.y, fma(_779, _256 * TANGENT.y, (_242 * _235) * _778));
    float _791 = fma(_780, _249 * NORMAL.z, fma(_779, _256 * TANGENT.z, (_242 * _236) * _778));
    float _795 = inversesqrt(dot(vec3(_785, _788, _791), vec3(_785, _788, _791)));
    float _796 = _795 * _785;
    float _797 = _795 * _788;
    float _798 = _795 * _791;
    float _4024 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _799 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4046 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4057 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4068 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4079 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _804 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _868 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _858);
    float _869 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _858);
    float _870 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _858);
    float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
    float _875 = _868 * _874;
    float _876 = _869 * _874;
    float _877 = _870 * _874;
    float _883 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _884 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _902 = fma(_798, cbSceneParam._m0[5u].z, fma(_797, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _796));
    float _905 = fma(_798, cbSceneParam._m0[6u].z, fma(_797, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _796));
    float _908 = fma(_798, cbSceneParam._m0[7u].z, fma(_797, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _796));
    uint _922 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _928 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_922].x;
    float _929 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_922].y;
    float _930 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * cbInstanceData._m0[_922].z;
    float _4090 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _934 = 1.0 - _804;
    float _935 = _931 * _934;
    float _936 = _932 * _934;
    float _937 = _933 * _934;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _804;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _804;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _804;
    float _945 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    float _948 = _944 + 0.039999999105930328369140625;
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _883, cbSceneParam._m0[86u].y * _884));
    float _961 = ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * TEXCOORD_5.w) * _957.x;
    float _962 = dot(vec3(_796, _797, _798), vec3(_875, _876, _877));
    float _965 = _962 * 2.0;
    float _969 = (_965 * _796) - _875;
    float _970 = (_965 * _797) - _876;
    float _971 = (_965 * _798) - _877;
    float _975 = abs(dot(vec3(_875, _876, _877), vec3(_796, _797, _798)));
    float _4123 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _977 = sqrt(_799);
    float _990 = exp2((_977 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_977 * 3.0));
    float _996 = (1.0 - _990) * ((_977 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _997 = _990 * _977;
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1334;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1059 = fma(_1033, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025));
        float _1063 = fma(_1033, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025));
        float _1067 = fma(_1033, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025));
        float _1092 = _1025 + _796;
        float _1093 = _1029 + _797;
        float _1094 = _1033 + _798;
        float _1104 = fma(_1094, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092)) - _1059;
        float _1105 = fma(_1094, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092)) - _1063;
        float _1106 = fma(_1094, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092)) - _1067;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1059 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1063 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[34u].z) + ((((((_1067 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1162 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1128.x + (-0.5));
        float _1164 = _1162 * (_1128.y + (-0.5));
        float _1165 = _1162 * (_1128.z + (-0.5));
        float _1172 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1135.x + (-0.5));
        float _1174 = _1172 * (_1135.y + (-0.5));
        float _1175 = _1172 * (_1135.z + (-0.5));
        float _1182 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1142.x + (-0.5));
        float _1184 = _1182 * (_1142.y + (-0.5));
        float _1185 = _1182 * (_1142.z + (-0.5));
        float _1192 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1149.x + (-0.5));
        float _1194 = _1192 * (_1149.y + (-0.5));
        float _1195 = _1192 * (_1149.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1216 = (dot(vec3(_796, _797, _798), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1226 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4171 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1228 + 1.0))) + _1233) * _1196;
        float _1243 = _1164 * 0.5;
        float _1244 = _1174 * 0.5;
        float _1245 = _1184 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_796, _797, _798), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4204 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1270 + 1.0))) + _1275) * _1197;
        float _1285 = _1165 * 0.5;
        float _1286 = _1175 * 0.5;
        float _1287 = _1185 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_796, _797, _798), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4237 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1312 + 1.0))) + _1317) * _1198;
        _1334 = _1165;
        _1336 = _1164;
        _1337 = _1163;
        _1338 = _1175;
        _1339 = _1174;
        _1340 = _1173;
        _1341 = _1185;
        _1342 = _1184;
        _1343 = _1183;
        _1344 = _1198;
        _1345 = _1197;
        _1346 = _1196;
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _1335;
        _1336 = _1335;
        _1337 = _1335;
        _1338 = _1335;
        _1339 = _1335;
        _1340 = _1335;
        _1341 = _1335;
        _1342 = _1335;
        _1343 = _1335;
        _1344 = _1335;
        _1345 = _1335;
        _1346 = _1335;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1374 = fma(_1033, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025));
        float _1378 = fma(_1033, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025));
        float _1382 = fma(_1033, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025));
        float _1405 = _1025 + _796;
        float _1406 = _1029 + _797;
        float _1407 = _1033 + _798;
        float _1417 = fma(_1407, cbModelParam._m0[30u].z, fma(_1406, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1405)) - _1374;
        float _1418 = fma(_1407, cbModelParam._m0[31u].z, fma(_1406, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1405)) - _1378;
        float _1419 = fma(_1407, cbModelParam._m0[32u].z, fma(_1406, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1405)) - _1382;
        float _1423 = inversesqrt(dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419)));
        float _1436 = ((_1423 * _1417) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1374 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1423 * _1418) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1378 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1423 * _1419) / cbModelParam._m0[35u].z) + ((((((_1382 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        float _1473 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1440.x + (-0.5));
        float _1475 = _1473 * (_1440.y + (-0.5));
        float _1476 = _1473 * (_1440.z + (-0.5));
        float _1483 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1447.x + (-0.5));
        float _1485 = _1483 * (_1447.y + (-0.5));
        float _1486 = _1483 * (_1447.z + (-0.5));
        float _1493 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1454.x + (-0.5));
        float _1495 = _1493 * (_1454.y + (-0.5));
        float _1496 = _1493 * (_1454.z + (-0.5));
        float _1503 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1461.x + (-0.5));
        float _1505 = _1503 * (_1461.y + (-0.5));
        float _1506 = _1503 * (_1461.z + (-0.5));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = _1474 * 0.5;
        float _1511 = _1484 * 0.5;
        float _1512 = _1494 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_796, _797, _798), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4300 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1537 + 1.0))) + _1542) * _1507;
        float _1552 = _1475 * 0.5;
        float _1553 = _1485 * 0.5;
        float _1554 = _1495 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_796, _797, _798), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4333 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1579 + 1.0))) + _1584) * _1508;
        float _1594 = _1476 * 0.5;
        float _1595 = _1486 * 0.5;
        float _1596 = _1496 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_796, _797, _798), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4366 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1621 + 1.0))) + _1626) * _1509;
        _1643 = _1476;
        _1644 = _1475;
        _1645 = _1474;
        _1646 = _1486;
        _1647 = _1485;
        _1648 = _1484;
        _1649 = _1496;
        _1650 = _1495;
        _1651 = _1494;
        _1652 = _1509;
        _1653 = _1508;
        _1654 = _1507;
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
    }
    else
    {
        _1643 = _1335;
        _1644 = _1335;
        _1645 = _1335;
        _1646 = _1335;
        _1647 = _1335;
        _1648 = _1335;
        _1649 = _1335;
        _1650 = _1335;
        _1651 = _1335;
        _1652 = _1335;
        _1653 = _1335;
        _1654 = _1335;
        _1655 = 0.0;
        _1656 = 0.0;
        _1657 = 0.0;
    }
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1347)) + _1347;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1348)) + _1348;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1349)) + _1349;
    float _1690 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1667));
    float _1711 = _969 * 0.5;
    float _1712 = _970 * 0.5;
    float _1713 = _971 * 0.5;
    float _1714 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1717 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1720 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1754;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1727 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1334, _1338, _1341, _1344));
        float _1731 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1735 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1742 = dot(vec4(cbModelParam._m0[39u]), vec4(_1711, _1712, _1713, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1765;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1756 = dot(vec4(cbModelParam._m0[40u]), vec4(_1711, _1712, _1713, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1769 = (_1765 * cbModelParam._m0[1u].x) + (_1754 * (1.0 - cbModelParam._m0[1u].x));
    float _1779 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _799);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1779 : min(cbModelParam._m0[25u].z, _1779));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1829 = fma(_1033, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025)) + cbModelParam._m0[13u].w;
        float _1833 = fma(_1033, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025)) + cbModelParam._m0[14u].w;
        float _1837 = fma(_1033, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025)) + cbModelParam._m0[15u].w;
        float _1840 = fma(_971, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969));
        float _1843 = fma(_971, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969));
        float _1846 = fma(_971, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969));
        float _1874;
        if (_1840 > 0.0)
        {
            _1874 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1874 = frontier_phi_14_12_ladder;
        }
        float _2047;
        if (_1843 > 0.0)
        {
            _2047 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2047 = frontier_phi_23_19_ladder;
        }
        float _2342;
        if (_1846 > 0.0)
        {
            _2342 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2342 = frontier_phi_35_30_ladder;
        }
        float _2344 = isnan(_2047) ? _1874 : (isnan(_1874) ? _2047 : min(_1874, _2047));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1840) + _1829;
        float _2350 = (_2345 * _1843) + _1833;
        float _2351 = (_2345 * _1846) + _1837;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2352;
        float _2356 = _2352 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 > _2356) || ((_2350 < _2354) || ((_2349 < _2354) || (_2349 > _2356))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2351, cbModelParam._m0[9u].z, fma(_2350, cbModelParam._m0[9u].y, _2349 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2351, cbModelParam._m0[10u].z, fma(_2350, cbModelParam._m0[10u].y, _2349 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2351, cbModelParam._m0[11u].z, fma(_2350, cbModelParam._m0[11u].y, _2349 * cbModelParam._m0[11u].x))), _1780);
            frontier_phi_13_35_ladder = _2496.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2496.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2496.x * cbModelParam._m0[1u].y;
        }
        _1862 = frontier_phi_13_35_ladder_2;
        _1864 = frontier_phi_13_35_ladder_1;
        _1866 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_969, _970, _971), _1780);
        _1862 = _1850.x * cbModelParam._m0[1u].y;
        _1864 = _1850.y * cbModelParam._m0[1u].y;
        _1866 = _1850.z * cbModelParam._m0[1u].y;
    }
    float _1870 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _799);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1870 : min(cbModelParam._m0[25u].w, _1870));
    float _1962;
    float _1964;
    float _1966;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1926 = fma(_1033, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025)) + cbModelParam._m0[21u].w;
        float _1930 = fma(_1033, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025)) + cbModelParam._m0[22u].w;
        float _1934 = fma(_1033, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025)) + cbModelParam._m0[23u].w;
        float _1937 = fma(_971, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969));
        float _1940 = fma(_971, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969));
        float _1943 = fma(_971, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969));
        float _2052;
        if (_1937 > 0.0)
        {
            _2052 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2052 = frontier_phi_25_21_ladder;
        }
        float _2369;
        if (_1940 > 0.0)
        {
            _2369 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2369 = frontier_phi_37_32_ladder;
        }
        float _2707;
        if (_1943 > 0.0)
        {
            _2707 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2707 = frontier_phi_47_44_ladder;
        }
        float _2709 = isnan(_2369) ? _2052 : (isnan(_2052) ? _2369 : min(_2052, _2369));
        float _2710 = isnan(_2707) ? _2709 : (isnan(_2709) ? _2707 : min(_2709, _2707));
        float _2714 = (_2710 * _1937) + _1926;
        float _2715 = (_2710 * _1940) + _1930;
        float _2716 = (_2710 * _1943) + _1934;
        float _2717 = _2710 * 9.9999997473787516355514526367188e-05;
        float _2718 = (-1.0) - _2717;
        float _2720 = _2717 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2716 > _2720) || ((_2716 < _2718) || ((_2715 > _2720) || ((_2715 < _2718) || ((_2714 < _2718) || (_2714 > _2720))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2716, cbModelParam._m0[17u].z, fma(_2715, cbModelParam._m0[17u].y, _2714 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2716, cbModelParam._m0[18u].z, fma(_2715, cbModelParam._m0[18u].y, _2714 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2716, cbModelParam._m0[19u].z, fma(_2715, cbModelParam._m0[19u].y, _2714 * cbModelParam._m0[19u].x))), _1871);
            frontier_phi_22_47_ladder = _2838.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2838.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2838.x * cbModelParam._m0[1u].z;
        }
        _1962 = frontier_phi_22_47_ladder_2;
        _1964 = frontier_phi_22_47_ladder_1;
        _1966 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_969, _970, _971), _1871);
        _1962 = _1946.x * cbModelParam._m0[1u].z;
        _1964 = _1946.y * cbModelParam._m0[1u].z;
        _1966 = _1946.z * cbModelParam._m0[1u].z;
    }
    float _1979 = (((_996 * _945) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1962 - _1862)) + _1862);
    float _1981 = (((_996 * _947) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1964 - _1864)) + _1864);
    float _1983 = (((_996 * _948) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1966 - _1866)) + _1866);
    float _1986 = fma(_1983, cbSceneParam._m0[89u].z, fma(_1981, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _1989 = fma(_1983, cbSceneParam._m0[90u].z, fma(_1981, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _1992 = fma(_1983, cbSceneParam._m0[91u].z, fma(_1981, cbSceneParam._m0[91u].y, _1979 * cbSceneParam._m0[91u].x));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2039 = _2026 / _2038;
    float _2040 = _2030 / _2038;
    float _2041 = _2034 / _2038;
    float _2188;
    float _2189;
    float _2190;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2068 = ((uint(_2041 > cbSceneParam._m0[59u].y) + uint(_2041 > cbSceneParam._m0[59u].x)) + uint(_2041 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2069 = _2068 + 43u;
        uint _2077 = _2068 + 44u;
        uint _2085 = _2068 + 45u;
        uint _2093 = _2068 + 46u;
        float _2104 = fma(_2038, cbSceneParam._m0[_2069].w, fma(_2034, cbSceneParam._m0[_2069].z, fma(_2030, cbSceneParam._m0[_2069].y, _2026 * cbSceneParam._m0[_2069].x)));
        float _2108 = fma(_2038, cbSceneParam._m0[_2077].w, fma(_2034, cbSceneParam._m0[_2077].z, fma(_2030, cbSceneParam._m0[_2077].y, _2026 * cbSceneParam._m0[_2077].x)));
        float _2116 = fma(_2038, cbSceneParam._m0[_2093].w, fma(_2034, cbSceneParam._m0[_2093].z, fma(_2030, cbSceneParam._m0[_2093].y, _2026 * cbSceneParam._m0[_2093].x)));
        float _2121 = cbSceneParam._m0[33u].z * _2116;
        float _2123 = cbSceneParam._m0[33u].w * _2116;
        float _2126 = fma(_2038, cbSceneParam._m0[_2085].w, fma(_2034, cbSceneParam._m0[_2085].z, fma(_2030, cbSceneParam._m0[_2085].y, _2026 * cbSceneParam._m0[_2085].x))) / _2116;
        float _2174 = (cbSceneParam._m0[33u].x - sqrt(((_2040 * _2040) + (_2039 * _2039)) + (_2041 * _2041))) * cbSceneParam._m0[33u].y;
        float _4492 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2181 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 + _2104) / _2116, (_2123 + _2108) / _2116), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 + _2104) / _2116, (_2108 - _2121) / _2116), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 - _2121) / _2116, (_2108 - _2123) / _2116), _2126), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 - _2123) / _2116, (_2121 + _2108) / _2116), _2126), 0.0)).x), vec4(0.25)));
        _2188 = 1.0 - (_2181 * cbSceneParam._m0[34u].x);
        _2189 = 1.0 - (_2181 * cbSceneParam._m0[34u].y);
        _2190 = 1.0 - (_2181 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2188 = 1.0;
        _2189 = 1.0;
        _2190 = 1.0;
    }
    float _2254;
    float _2256;
    float _2258;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2242 = fma(_2038, cbSceneParam._m0[63u].w, fma(_2034, cbSceneParam._m0[63u].z, fma(_2030, cbSceneParam._m0[63u].y, _2026 * cbSceneParam._m0[63u].x)));
        float _2243 = fma(_2038, cbSceneParam._m0[60u].w, fma(_2034, cbSceneParam._m0[60u].z, fma(_2030, cbSceneParam._m0[60u].y, _2026 * cbSceneParam._m0[60u].x))) / _2242;
        float _2244 = fma(_2038, cbSceneParam._m0[61u].w, fma(_2034, cbSceneParam._m0[61u].z, fma(_2030, cbSceneParam._m0[61u].y, _2026 * cbSceneParam._m0[61u].x))) / _2242;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2243 >= cbSceneParam._m0[64u].x) && (_2244 >= cbSceneParam._m0[64u].y)) && (_2243 <= cbSceneParam._m0[64u].z)) && (_2244 <= cbSceneParam._m0[64u].w))
        {
            float _2382 = fma(_2038, cbSceneParam._m0[62u].w, fma(_2034, cbSceneParam._m0[62u].z, fma(_2030, cbSceneParam._m0[62u].y, _2026 * cbSceneParam._m0[62u].x))) / _2242;
            float _2386 = isnan(cbSceneParam._m0[41u].w) ? _2382 : (isnan(_2382) ? cbSceneParam._m0[41u].w : max(_2382, cbSceneParam._m0[41u].w));
            float _2429 = (cbSceneParam._m0[33u].x - sqrt(((_2040 * _2040) + (_2039 * _2039)) + (_2041 * _2041))) * cbSceneParam._m0[33u].y;
            float _4508 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
            float _2436 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2243, cbSceneParam._m0[33u].w + _2244), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2243, _2244 - cbSceneParam._m0[33u].z), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2243 - cbSceneParam._m0[33u].z, _2244 - cbSceneParam._m0[33u].w), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2243 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2244), _2386), 0.0)).x), vec4(0.25)));
            float _2440 = 1.0 - (_2436 * cbSceneParam._m0[34u].x);
            float _2441 = 1.0 - (_2436 * cbSceneParam._m0[34u].y);
            float _2442 = 1.0 - (_2436 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2442) ? _2190 : (isnan(_2190) ? _2442 : min(_2190, _2442));
            frontier_phi_34_33_ladder_1 = isnan(_2441) ? _2189 : (isnan(_2189) ? _2441 : min(_2189, _2441));
            frontier_phi_34_33_ladder_2 = isnan(_2440) ? _2188 : (isnan(_2188) ? _2440 : min(_2188, _2440));
        }
        else
        {
            frontier_phi_34_33_ladder = _2190;
            frontier_phi_34_33_ladder_1 = _2189;
            frontier_phi_34_33_ladder_2 = _2188;
        }
        _2254 = frontier_phi_34_33_ladder_2;
        _2256 = frontier_phi_34_33_ladder_1;
        _2258 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2254 = _2188;
        _2256 = _2189;
        _2258 = _2190;
    }
    uvec4 _2263 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2265 = _2263.x * 14u;
    uint _2266 = _2265 + 13u;
    float _2273 = _961 + (-1.0);
    float _2278 = (cbLight._m0[_2266].x * _2273) + 1.0;
    float _2279 = (cbLight._m0[_2266].y * _2273) + 1.0;
    float _2280 = (cbLight._m0[_2266].z * _2273) + 1.0;
    float _2281 = (cbLight._m0[_2266].w * _2273) + 1.0;
    uint _2282 = _2265 + 5u;
    float _2288 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
    uint _2292 = _2265 + 4u;
    float _2301 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
    uint _2305 = _2265 | 1u;
    float _2316 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_796, _797, _798));
    float _2319 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_796, _797, _798));
    float _4544 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _4555 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2324 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * 0.3183098733425140380859375;
    float _2326 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * 0.3183098733425140380859375;
    float _2333 = ((cbLight._m0[_2282].x * _2288) * _2326) + (((cbLight._m0[_2292].x * _2254) * _2301) * _2324);
    float _2334 = ((_2288 * cbLight._m0[_2282].y) * _2326) + (((cbLight._m0[_2292].y * _2256) * _2301) * _2324);
    float _2335 = ((_2288 * cbLight._m0[_2282].z) * _2326) + (((cbLight._m0[_2292].z * _2258) * _2301) * _2324);
    uvec4 _2339 = floatBitsToUint(cbLight._m0[_2265 + 12u]);
    bool _2341 = _2339.x == 0u;
    float _2443;
    float _2445;
    float _2447;
    if (_2341)
    {
        _2443 = _2333;
        _2445 = _2334;
        _2447 = _2335;
    }
    else
    {
        uint _2451 = _2265 + 6u;
        float _2467 = (dot(vec3(cbLight._m0[_2265 + 2u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2468 = _2467 * _2467;
        float _4566 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2469 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2470 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2443 = (((cbLight._m0[_2451].x * 0.3183098733425140380859375) * _2469) * _2470) + _2333;
        _2445 = (((cbLight._m0[_2451].y * 0.3183098733425140380859375) * _2469) * _2470) + _2334;
        _2447 = (((cbLight._m0[_2451].z * 0.3183098733425140380859375) * _2469) * _2470) + _2335;
    }
    bool _2450 = _2339.y == 0u;
    float _2505;
    float _2507;
    float _2509;
    if (_2450)
    {
        _2505 = _2443;
        _2507 = _2445;
        _2509 = _2447;
    }
    else
    {
        uint _2678 = _2265 + 7u;
        float _2694 = (dot(vec3(cbLight._m0[_2265 + 3u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2695 = _2694 * _2694;
        float _4582 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2696 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2697 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2505 = (((cbLight._m0[_2678].x * 0.3183098733425140380859375) * _2696) * _2697) + _2443;
        _2507 = (((cbLight._m0[_2678].y * 0.3183098733425140380859375) * _2696) * _2697) + _2445;
        _2509 = (((cbLight._m0[_2678].z * 0.3183098733425140380859375) * _2696) * _2697) + _2447;
    }
    uint _2512 = _2265 + 8u;
    float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _799) * 0.949999988079071044921875);
    float _2526 = _2525 * _2525;
    float _2527 = cbLight._m0[_2265].x + _875;
    float _2528 = cbLight._m0[_2265].y + _876;
    float _2529 = cbLight._m0[_2265].z + _877;
    float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
    float _2534 = _2533 * _2527;
    float _2535 = _2533 * _2528;
    float _2536 = _2533 * _2529;
    float _2537 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2265].xyz));
    float _4598 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2540 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _4609 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2541 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2542 = dot(vec3(_796, _797, _798), vec3(_2534, _2535, _2536));
    float _4620 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2546 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2534, _2535, _2536));
    float _4631 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2550 = _2526 * _2526;
    float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
    float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
    float _2563 = 0.959999978542327880859375 - _942;
    float _2565 = 0.959999978542327880859375 - _943;
    float _2566 = 0.959999978542327880859375 - _944;
    float _2573 = 1.0 - _2526;
    float _2584 = (0.5 / (((_2541 * ((_2540 * _2573) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2541 * _2573) + _2526) * _2540))) * _2540;
    float _4642 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2586 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
    uint _2600 = _2265 + 9u;
    float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _799) * 0.949999988079071044921875);
    float _2612 = _2611 * _2611;
    float _2613 = cbLight._m0[_2305].x + _875;
    float _2614 = cbLight._m0[_2305].y + _876;
    float _2615 = cbLight._m0[_2305].z + _877;
    float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
    float _2620 = _2619 * _2613;
    float _2621 = _2619 * _2614;
    float _2622 = _2619 * _2615;
    float _2623 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2305].xyz));
    float _4653 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2627 = dot(vec3(_796, _797, _798), vec3(_2620, _2621, _2622));
    float _4664 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2630 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2631 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2620, _2621, _2622));
    float _4675 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2635 = _2612 * _2612;
    float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
    float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
    float _2653 = 1.0 - _2612;
    float _2663 = (0.5 / (((_2541 * ((_2626 * _2653) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2541 * _2653) + _2612) * _2626))) * _2626;
    float _4686 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2665 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
    float _2675 = (((((_2646 * _2563) + _945) * cbLight._m0[_2600].x) * _2665) * _2288) + ((((cbLight._m0[_2512].x * _2254) * ((_2562 * _2563) + _945)) * _2586) * _2301);
    float _2676 = (((((_2646 * _2565) + _947) * cbLight._m0[_2600].y) * _2665) * _2288) + ((((cbLight._m0[_2512].y * _2256) * ((_2562 * _2565) + _947)) * _2586) * _2301);
    float _2677 = (((((_2646 * _2566) + _948) * cbLight._m0[_2600].z) * _2665) * _2288) + ((((cbLight._m0[_2512].z * _2258) * ((_2562 * _2566) + _948)) * _2586) * _2301);
    float _2733;
    float _2735;
    float _2737;
    if (_2341)
    {
        _2733 = _2675;
        _2735 = _2676;
        _2737 = _2677;
    }
    else
    {
        uint _2739 = _2265 + 2u;
        uint _2743 = _2265 + 10u;
        float _2757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2739].w)) * _799) * 0.949999988079071044921875);
        float _2758 = _2757 * _2757;
        float _2759 = cbLight._m0[_2739].x + _875;
        float _2760 = cbLight._m0[_2739].y + _876;
        float _2761 = cbLight._m0[_2739].z + _877;
        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
        float _2766 = _2765 * _2759;
        float _2767 = _2765 * _2760;
        float _2768 = _2765 * _2761;
        float _2769 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2739].xyz));
        float _4697 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2773 = dot(vec3(_796, _797, _798), vec3(_2766, _2767, _2768));
        float _4708 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2777 = dot(vec3(cbLight._m0[_2739].xyz), vec3(_2766, _2767, _2768));
        float _4719 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2781 = _2758 * _2758;
        float _2785 = ((_2776 * _2776) * (_2781 + (-1.0))) + 1.0;
        float _2792 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2799 = 1.0 - _2758;
        float _2809 = (0.5 / (((_2541 * ((_2772 * _2799) + _2758)) + 9.9999999392252902907785028219223e-09) + (((_2541 * _2799) + _2758) * _2772))) * _2772;
        float _4730 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2811 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2781 / ((_2785 * _2785) * 3.141590118408203125));
        float _2812 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2733 = (((((_2792 * _2563) + _945) * cbLight._m0[_2743].x) * _2811) * _2812) + _2675;
        _2735 = (((((_2792 * _2565) + _947) * cbLight._m0[_2743].y) * _2811) * _2812) + _2676;
        _2737 = (((((_2792 * _2566) + _948) * cbLight._m0[_2743].z) * _2811) * _2812) + _2677;
    }
    float _2843;
    float _2845;
    float _2847;
    if (_2450)
    {
        _2843 = _2733;
        _2845 = _2735;
        _2847 = _2737;
    }
    else
    {
        uint _2854 = _2265 + 3u;
        uint _2858 = _2265 + 11u;
        float _2872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2854].w)) * _799) * 0.949999988079071044921875);
        float _2873 = _2872 * _2872;
        float _2874 = cbLight._m0[_2854].x + _875;
        float _2875 = cbLight._m0[_2854].y + _876;
        float _2876 = cbLight._m0[_2854].z + _877;
        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
        float _2881 = _2880 * _2874;
        float _2882 = _2880 * _2875;
        float _2883 = _2880 * _2876;
        float _2884 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2854].xyz));
        float _4746 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2888 = dot(vec3(_796, _797, _798), vec3(_2881, _2882, _2883));
        float _4757 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
        float _2892 = dot(vec3(cbLight._m0[_2854].xyz), vec3(_2881, _2882, _2883));
        float _4768 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2896 = _2873 * _2873;
        float _2900 = ((_2891 * _2891) * (_2896 + (-1.0))) + 1.0;
        float _2907 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
        float _2914 = 1.0 - _2873;
        float _2924 = (0.5 / (((_2541 * ((_2887 * _2914) + _2873)) + 9.9999999392252902907785028219223e-09) + (((_2541 * _2914) + _2873) * _2887))) * _2887;
        float _4779 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2926 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2896 / ((_2900 * _2900) * 3.141590118408203125));
        float _2927 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2843 = (((((_2907 * _2563) + _945) * cbLight._m0[_2858].x) * _2926) * _2927) + _2733;
        _2845 = (((((_2907 * _2565) + _947) * cbLight._m0[_2858].y) * _2926) * _2927) + _2735;
        _2847 = (((((_2907 * _2566) + _948) * cbLight._m0[_2858].z) * _2926) * _2927) + _2737;
    }
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    if (_2263.y == 0u)
    {
        uvec4 _2948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2949 = _2948.x;
        uint _2960 = uint((float(_2948.y) * floor(float(uint(cbSceneParam._m0[85u].y * _884) / _2949))) + floor(float(uint(cbSceneParam._m0[85u].x * _883) / _2949)));
        float _2970 = (log2(_2041 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2971 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        uint _2974 = uint(isnan(14.0) ? _2971 : (isnan(_2971) ? 14.0 : min(_2971, 14.0)));
        uvec4 _2979 = texelFetch(g_lightClusterGridBuffer, int(((_2974 << 2u) + (_2960 << 6u)) >> 2u));
        uint _2980 = _2979.x;
        uint _2981 = _2948.z;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        if (((((1u << ((_2981 >> 4u) & 15u)) + 4294967295u) & _2980) == 0u) || ((_2981 & 240u) == 0u))
        {
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
        }
        else
        {
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            uint _3211 = 0u;
            uint _3220;
            bool _3221;
            for (;;)
            {
                _3220 = texelFetch(g_lightClassification, int((((_2974 << 5u) + (_2960 << 9u)) + (_3211 << 2u)) >> 2u)).x;
                _3221 = _3220 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3221)
                {
                    frontier_phi_66_pred = _3210;
                    frontier_phi_66_pred_1 = _3209;
                    frontier_phi_66_pred_2 = _3208;
                    frontier_phi_66_pred_3 = _3207;
                    frontier_phi_66_pred_4 = _3206;
                    frontier_phi_66_pred_5 = _3205;
                }
                else
                {
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    uint _3335;
                    _3329 = _3205;
                    _3330 = _3206;
                    _3331 = _3207;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3220;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    for (;;)
                    {
                        uint _3339 = uint(findLSB(_3335)) + (_3211 << 5u);
                        uint _3336 = (_3335 + 4294967295u) & _3335;
                        uint _3341 = _3339 * 48u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3361 = (_3339 * 48u) + 4u;
                        vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3380 = (_3339 * 48u) + 8u;
                        vec3 _3391 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x));
                        float _3395 = _3355.x - _2039;
                        float _3396 = _3355.y - _2040;
                        float _3397 = _3355.z - _2041;
                        float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                        float _3401 = inversesqrt(_3398);
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3405 = dot(vec3(_902, _905, _908), vec3(_3402, _3403, _3404));
                        float _3410 = 1.0 - (_3398 * _3355.w);
                        float _4805 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3411 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3412 = sqrt(_3398) * _3374.w;
                        float _3415 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3405) + _3416;
                        float _3422 = _3412 * _3412;
                        float _3426 = ((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3411) / ((_3422 * 0.699999988079071044921875) + 1.0);
                        float _3430 = (-0.0) - _2039;
                        float _3431 = (-0.0) - _2040;
                        float _3432 = (-0.0) - _2041;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3446 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                        float _3447 = 1.0 - _977;
                        float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                        float _3455 = _3454 * _3454;
                        float _3456 = _3455 * _3455;
                        float _3457 = _3437 + _3402;
                        float _3458 = _3438 + _3403;
                        float _3459 = _3439 + _3404;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3467 = dot(vec3(_902, _905, _908), vec3(_3437, _3438, _3439));
                        float _4821 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3470 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3471 = dot(vec3(_902, _905, _908), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                        float _4832 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                        float _3479 = _3415 * _3455;
                        float _3480 = _3479 * _3479;
                        float _3483 = ((1.0 - _3480) * _3405) + _3480;
                        float _4843 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3484 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                        float _3485 = 1.0 - _3455;
                        float _3495 = (0.5 / (((_3484 * ((_3470 * _3485) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3484 * _3485) + _3455) * _3470))) * _3484;
                        float _4854 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3506 = (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) / ((_3478 * _3478) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125))) * _3411;
                        _3264 = (_3426 * _3374.x) + _3332;
                        _3265 = (_3426 * _3374.y) + _3333;
                        _3266 = (_3426 * _3374.z) + _3334;
                        _3261 = (_3506 * _3391.x) + _3329;
                        _3262 = (_3506 * _3391.y) + _3330;
                        _3263 = (_3506 * _3391.z) + _3331;
                        if (_3336 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3329 = _3261;
                            _3330 = _3262;
                            _3331 = _3263;
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3336;
                        }
                    }
                    frontier_phi_66_pred = _3266;
                    frontier_phi_66_pred_1 = _3265;
                    frontier_phi_66_pred_2 = _3264;
                    frontier_phi_66_pred_3 = _3263;
                    frontier_phi_66_pred_4 = _3262;
                    frontier_phi_66_pred_5 = _3261;
                }
                _3071 = frontier_phi_66_pred;
                _3069 = frontier_phi_66_pred_1;
                _3067 = frontier_phi_66_pred_2;
                _3065 = frontier_phi_66_pred_3;
                _3063 = frontier_phi_66_pred_4;
                _3061 = frontier_phi_66_pred_5;
                uint _3212 = _3211 + 1u;
                if (_3212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3205 = _3061;
                    _3206 = _3063;
                    _3207 = _3065;
                    _3208 = _3067;
                    _3209 = _3069;
                    _3210 = _3071;
                    _3211 = _3212;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
        }
        uvec4 _3074 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3075 = _3074.z;
        uint _3077 = (_3075 >> 8u) & 15u;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        if (((4294967295u << _3077) & _2980) == 0u)
        {
            _3173 = _3060;
            _3175 = _3062;
            _3177 = _3064;
            _3179 = _3066;
            _3181 = _3068;
            _3183 = _3070;
        }
        else
        {
            float _3198 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
            float _3199 = _3198 * _2039;
            float _3200 = _3198 * _2040;
            float _3201 = _3198 * _2041;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3077 < ((_3075 >> 12u) & 15u))
            {
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3312 = _3060;
                float _3313 = _3062;
                float _3314 = _3064;
                float _3315 = _3066;
                float _3316 = _3068;
                float _3317 = _3070;
                uint _3318 = _3077;
                uint _3327;
                bool _3328;
                for (;;)
                {
                    _3327 = texelFetch(g_lightClassification, int((((_2974 << 5u) + (_2960 << 9u)) + (_3318 << 2u)) >> 2u)).x;
                    _3328 = _3327 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3328)
                    {
                        frontier_phi_72_pred = _3317;
                        frontier_phi_72_pred_1 = _3316;
                        frontier_phi_72_pred_2 = _3315;
                        frontier_phi_72_pred_3 = _3314;
                        frontier_phi_72_pred_4 = _3313;
                        frontier_phi_72_pred_5 = _3312;
                    }
                    else
                    {
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3524 = _3312;
                        float _3525 = _3313;
                        float _3526 = _3314;
                        float _3527 = _3315;
                        float _3528 = _3316;
                        float _3529 = _3317;
                        uint _3530 = _3327;
                        uint _3531;
                        vec4 _3556;
                        float _3557;
                        vec4 _3572;
                        vec3 _3584;
                        vec4 _3599;
                        vec4 _3614;
                        float _3660;
                        bool _3661;
                        for (;;)
                        {
                            uint _3541 = ((_3318 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3530));
                            _3531 = (_3530 + 4294967295u) & _3530;
                            uint _3543 = _3541 * 40u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            _3557 = _3556.w;
                            uint _3559 = (_3541 * 40u) + 4u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3541 * 40u) + 8u;
                            _3584 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x));
                            uint _3586 = (_3541 * 40u) + 16u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3601 = (_3541 * 40u) + 20u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3616 = (_3541 * 40u) + 24u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3635 = (_3541 * 40u) + 28u;
                            vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            _3660 = fma(_2041, _3648.z, fma(_2040, _3648.y, _3648.x * _2039)) + _3648.w;
                            _3661 = !((fma(_2041, _3629.z, fma(_2040, _3629.y, _3629.x * _2039)) + _3629.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3661)
                            {
                                float _3688 = _3556.x - _2039;
                                float _3689 = _3556.y - _2040;
                                float _3690 = _3556.z - _2041;
                                float _3691 = dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690));
                                float _3694 = inversesqrt(_3691);
                                float _3695 = _3694 * _3688;
                                float _3696 = _3694 * _3689;
                                float _3697 = _3694 * _3690;
                                float _3701 = 1.0 - (_3691 / (_3557 * _3557));
                                float _4865 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3706 = sqrt(_3691) * _3572.w;
                                float _3708 = 1.39999997615814208984375 / (_3706 + 1.39999997615814208984375);
                                float _3709 = _3708 * _3708;
                                float _3712 = ((1.0 - _3709) * dot(vec3(_3695, _3696, _3697), vec3(_902, _905, _908))) + _3709;
                                float _3715 = _3706 * _3706;
                                float _3719 = (fma(_2041, _3599.z, fma(_2040, _3599.y, _3599.x * _2039)) + _3599.w) / _3660;
                                float _3720 = (fma(_2041, _3614.z, fma(_2040, _3614.y, _3614.x * _2039)) + _3614.w) / _3660;
                                float _3724 = 1.0 - dot(vec2(_3719, _3720), vec2(_3719, _3720));
                                float _4881 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3726 = _3725 * (((isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0))) * _3702) / ((_3715 * 0.699999988079071044921875) + 1.0));
                                float _3738 = exp2(log2(1.0 / ((_3715 * 3.5) + 5.0)) * 0.25);
                                float _3739 = 1.0 - _977;
                                float _3746 = sqrt(1.0 - ((1.0 - (_3739 * _3739)) * (1.0 - (_3738 * _3738))));
                                float _3747 = _3746 * _3746;
                                float _3748 = _3747 * _3747;
                                float _3749 = _3695 - _3199;
                                float _3750 = _3696 - _3200;
                                float _3751 = _3697 - _3201;
                                float _3755 = inversesqrt(dot(vec3(_3749, _3750, _3751), vec3(_3749, _3750, _3751)));
                                float _3759 = dot(vec3(_902, _905, _908), vec3((-0.0) - _3199, (-0.0) - _3200, (-0.0) - _3201));
                                float _4892 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3762 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3763 = dot(vec3(_902, _905, _908), vec3(_3755 * _3749, _3755 * _3750, _3755 * _3751));
                                float _4903 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3770 = ((_3766 * _3766) * (_3748 + (-1.0))) + 1.0;
                                float _3771 = _3708 * _3747;
                                float _3772 = _3771 * _3771;
                                float _3778 = ((1.0 - _3772) * dot(vec3(_902, _905, _908), vec3(_3695, _3696, _3697))) + _3772;
                                float _4914 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                                float _3780 = 1.0 - _3747;
                                float _3790 = (0.5 / (((_3779 * ((_3762 * _3780) + _3747)) + 9.9999999392252902907785028219223e-09) + (((_3779 * _3780) + _3747) * _3762))) * _3779;
                                float _4925 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3800 = (_3725 * _3702) * (((_3748 * 3.1415927410125732421875) * (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) / ((_3770 * _3770) * ((_3715 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3726 * _3572.y;
                                frontier_phi_78_pred_1 = _3726 * _3572.x;
                                frontier_phi_78_pred_2 = _3800 * _3584.z;
                                frontier_phi_78_pred_3 = _3800 * _3584.y;
                                frontier_phi_78_pred_4 = _3800 * _3584.x;
                                frontier_phi_78_pred_5 = _3726 * _3572.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3808 = frontier_phi_78_pred;
                            _3807 = frontier_phi_78_pred_1;
                            _3806 = frontier_phi_78_pred_2;
                            _3805 = frontier_phi_78_pred_3;
                            _3804 = frontier_phi_78_pred_4;
                            _3809 = frontier_phi_78_pred_5;
                            _3514 = _3807 + _3527;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3511 = _3804 + _3524;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            if (_3531 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3531;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3516;
                        frontier_phi_72_pred_1 = _3515;
                        frontier_phi_72_pred_2 = _3514;
                        frontier_phi_72_pred_3 = _3513;
                        frontier_phi_72_pred_4 = _3512;
                        frontier_phi_72_pred_5 = _3511;
                    }
                    _3184 = frontier_phi_72_pred;
                    _3182 = frontier_phi_72_pred_1;
                    _3180 = frontier_phi_72_pred_2;
                    _3178 = frontier_phi_72_pred_3;
                    _3176 = frontier_phi_72_pred_4;
                    _3174 = frontier_phi_72_pred_5;
                    uint _3319 = _3318 + 1u;
                    if (_3319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3312 = _3174;
                        _3313 = _3176;
                        _3314 = _3178;
                        _3315 = _3180;
                        _3316 = _3182;
                        _3317 = _3184;
                        _3318 = _3319;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3184;
                frontier_phi_60_61_ladder_1 = _3182;
                frontier_phi_60_61_ladder_2 = _3178;
                frontier_phi_60_61_ladder_3 = _3176;
                frontier_phi_60_61_ladder_4 = _3174;
                frontier_phi_60_61_ladder_5 = _3180;
            }
            else
            {
                frontier_phi_60_61_ladder = _3070;
                frontier_phi_60_61_ladder_1 = _3068;
                frontier_phi_60_61_ladder_2 = _3064;
                frontier_phi_60_61_ladder_3 = _3062;
                frontier_phi_60_61_ladder_4 = _3060;
                frontier_phi_60_61_ladder_5 = _3066;
            }
            _3173 = frontier_phi_60_61_ladder_4;
            _3175 = frontier_phi_60_61_ladder_3;
            _3177 = frontier_phi_60_61_ladder_2;
            _3179 = frontier_phi_60_61_ladder_5;
            _3181 = frontier_phi_60_61_ladder_1;
            _3183 = frontier_phi_60_61_ladder;
        }
        float _3188 = isnan(1.0) ? _961 : (isnan(_961) ? 1.0 : min(_961, 1.0));
        _2993 = (_3188 * _3179) + _2505;
        _2995 = (_3188 * _3181) + _2507;
        _2997 = (_3188 * _3183) + _2509;
        _2999 = ((_3173 * _945) * _3188) + _2843;
        _3001 = ((_3175 * _947) * _3188) + _2845;
        _3003 = ((_3177 * _948) * _3188) + _2847;
    }
    else
    {
        _2993 = _2505;
        _2995 = _2507;
        _2997 = _2509;
        _2999 = _2843;
        _3001 = _2845;
        _3003 = _2847;
    }
    float _4941 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4952 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4963 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    uint _3023 = _281 + 6u;
    float _3031 = _883 / cbSceneParam._m0[86u].x;
    float _3032 = _884 / cbSceneParam._m0[86u].y;
    vec4 _3046 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3048 = _3046.x;
    float _3049 = _3046.y;
    float _3050 = _3046.z;
    float _3051 = _3046.w;
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _3085 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _3086 = _3085 / _818;
        float _3097 = _3086 * _868;
        float _3098 = _869 * _3086;
        float _3099 = (-0.0) - _3098;
        float _3101 = _3086 * _870;
        float _3103 = (cbSceneParam._m0[77u].w * _3099) / _3085;
        float _3104 = _3103 + cbSceneParam._m0[79u].w;
        float _3105 = cbSceneParam._m0[79u].w - _3098;
        float _3111 = sqrt(((_3097 * _3097) + (_3098 * _3098)) + (_3101 * _3101));
        float _3114 = (1.0 - (cbSceneParam._m0[77u].w / _3085)) * _3111;
        float _3119 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3121 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3274;
        if (abs((_3099 - _3103) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3274 = ((((_3104 > 0.0) ? exp2(_3119 * _3104) : (2.0 - exp2(_3121 * _3104))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3114;
        }
        else
        {
            float _3234 = 1.0 / cbSceneParam._m0[80u].x;
            float _3235 = isnan(_3105) ? _3104 : (isnan(_3104) ? _3105 : max(_3104, _3105));
            float _3236 = isnan(_3105) ? _3104 : (isnan(_3104) ? _3105 : min(_3104, _3105));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            float _3246 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : min(_3236, 0.0));
            _3274 = ((abs(_3111 / _3099) * cbSceneParam._m0[80u].y) * ((((_3245 - _3246) * 2.0) - ((exp2(_3119 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0)))) - exp2(_3119 * (isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))))) * _3234)) - ((exp2(_3121 * _3245) - exp2(_3121 * _3246)) * _3234))) + (_3114 * cbSceneParam._m0[80u].z);
        }
        vec4 _3276 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, 1.0), 0.0);
        float _3285 = exp2((_3274 * (-1.44269502162933349609375)) * (1.0 - _3276.w));
        float _3286 = log2(_3285);
        float _3302 = log2(_3051);
        _3123 = (exp2(_3302 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].x)) * _3276.x) / cbSceneParam._m0[78u].x)) + _3048;
        _3125 = (exp2(_3302 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].y)) * _3276.y) / cbSceneParam._m0[78u].y)) + _3049;
        _3127 = (exp2(_3302 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3286 * cbSceneParam._m0[78u].z)) * _3276.z) / cbSceneParam._m0[78u].z)) + _3050;
        _3129 = _3285 * _3051;
    }
    else
    {
        _3123 = _3048;
        _3125 = _3049;
        _3127 = _3050;
        _3129 = _3051;
    }
    float _3141 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3142 = _3141 == 3.0;
    float _3143 = log2(_3129);
    float _3150 = exp2(_3143 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2993 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _961))) + ((_2999 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1769)) * cbPerFrame._m0[3u].x));
    float _3151 = exp2(_3143 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2995 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _961))) + ((_3001 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1769)) * cbPerFrame._m0[3u].x));
    float _3152 = exp2(_3143 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * (_2997 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _961))) + ((_3003 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1769)) * cbPerFrame._m0[3u].x));
    float _3161 = (_3141 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3161 * (_3142 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3123)));
    SV_Target.y = _3161 * (_3142 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3125)));
    SV_Target.z = _3161 * (_3142 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3127)));
    SV_Target.w = cbInstanceData._m0[_3023].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3023].w;
}


