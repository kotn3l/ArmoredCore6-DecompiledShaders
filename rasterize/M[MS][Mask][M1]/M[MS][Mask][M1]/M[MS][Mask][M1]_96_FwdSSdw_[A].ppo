#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1526;
float _3927;
float _3928;
float _3929;
float _3930;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _351.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3939 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _426 = (_419 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _427 = (_419 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _428 = (_419 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _351.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3950 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _499 = (_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426;
    float _500 = (_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427;
    float _501 = (_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428;
    vec4 _520 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _568 = ((_540.x - _559) * _419) + _559;
    float _569 = ((_540.y - _560) * _419) + _560;
    float _570 = ((_540.z - _561) * _419) + _561;
    vec4 _582 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _595 = ((_582.z - _570) * _492) + _570;
    float _598 = ((((_582.x - _568) * _492) + _568) * 2.0) + (-1.0);
    float _600 = ((((_582.y - _569) * _492) + _569) * 2.0) + (-1.0);
    float _601 = dot(vec2(_598, _600), vec2(_598, _600));
    float _3961 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _606 = sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _632 = (((_620.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _633 = (((_620.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _636 = fma(_606, _253, fma(_633, _260, _632 * _246));
    float _639 = fma(_606, _254, fma(_633, _261, _632 * _247));
    float _642 = fma(_606, _255, fma(_633, _262, _632 * _248));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _675 = _673.x;
    float _676 = 1.0 - _675;
    float _685 = (cbMtdParam._m0[19u].x + dot(vec4(_646 * _636, _646 * _639, _646 * _642, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_675 - _676) * cbMtdParam._m0[24u].z) + _676) * cbMtdParam._m0[21u].z);
    float _3972 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _686 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _688 = (-0.0) - cbMtdParam._m0[24u].x;
    float _690 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _690 : (isnan(_690) ? 1.0 : min(_690, 1.0));
    float _698 = _686 - ((_686 * TEXCOORD_8.x) * _691);
    float _699 = _686 - ((_686 * TEXCOORD_8.y) * _691);
    float _700 = _686 - ((_686 * TEXCOORD_8.z) * _691);
    float _707 = (_698 * ((_520.x * cbMtdParam._m0[18u].x) - _499)) + _499;
    float _708 = (_699 * ((_520.y * cbMtdParam._m0[18u].y) - _500)) + _500;
    float _709 = (_700 * ((_520.z * cbMtdParam._m0[18u].z) - _501)) + _501;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _723 = _721.x;
    float _724 = 1.0 - _723;
    float _750 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_723 - _724) * cbMtdParam._m0[24u].w) + _724) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3993 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _751 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _759 = ((((cbMtdParam._m0[10u].x - _707) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _751) + _707;
    float _760 = ((((cbMtdParam._m0[10u].y - _708) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _751) + _708;
    float _761 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _709)) * _751) + _709;
    vec4 _787 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _789 = _787.x;
    float _807 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _789) * _419) + _789;
    float _824 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _807) * _492) + _807;
    float _828 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _824) * cbMtdParam._m0[19u].z) + _824;
    float _830 = _828 - (_828 * _698);
    float _832 = _830 - (_830 * _751);
    float _836 = (cbMtdParam._m0[19u].w * (_620.z - _595)) + _595;
    vec4 _850 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _857 = (_850.x * 2.0) + (-1.0);
    float _858 = (_850.y * 2.0) + (-1.0);
    float _859 = dot(vec2(_857, _858), vec2(_857, _858));
    float _4004 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _867 = ((_850.z - _836) * _698) + _836;
    float _870 = ((cbMtdParam._m0[23u].x - _867) * _751) + _867;
    vec4 _889 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _895 = (_889.x * 2.0) + (-1.0);
    float _896 = (_889.y * 2.0) + (-1.0);
    float _897 = dot(vec2(_895, _896), vec2(_895, _896));
    float _4015 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _912 = ((sqrt(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) - _606) * _700) + _606;
    float _915 = (((_857 - _632) * _698) + _632) + (cbMtdParam._m0[21u].x * _632);
    float _916 = (((_858 - _633) * _699) + _633) + (cbMtdParam._m0[21u].x * _633);
    float _927 = (((_895 - _915) + (_915 * cbMtdParam._m0[22u].z)) * _751) + _915;
    float _928 = (((_896 - _916) + (_916 * cbMtdParam._m0[22u].z)) * _751) + _916;
    float _929 = (_751 * (sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) - _912)) + _912;
    float _933 = cbMtdParam._m0[22u].x + _620.w;
    float _936 = fma(_929, _253, fma(_928, _260, _927 * _246));
    float _939 = fma(_929, _254, fma(_928, _261, _927 * _247));
    float _942 = fma(_929, _255, fma(_928, _262, _927 * _248));
    float _946 = inversesqrt(dot(vec3(_936, _939, _942), vec3(_936, _939, _942)));
    float _947 = _946 * _936;
    float _948 = _946 * _939;
    float _949 = _946 * _942;
    float _4026 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _950 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4048 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4059 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4070 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4081 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _955 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _969 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1019 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1009);
    float _1020 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1009);
    float _1021 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1009);
    float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
    float _1026 = _1019 * _1025;
    float _1027 = _1020 * _1025;
    float _1028 = _1021 * _1025;
    vec4 _1033 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1035 = _1033.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1207 = sqrt(((_1019 * _1019) + (_1020 * _1020)) + (_1021 * _1021));
        float _1213 = (cbMatDynParam._m0[5u].x * _1207) + cbMatDynParam._m0[5u].y;
        float _4092 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1218 = (cbMatDynParam._m0[5u].z * _1207) + cbMatDynParam._m0[5u].w;
        float _4103 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) - _1214)) + _1214) < ((_1035 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1046 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1047 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1065 = fma(_949, cbSceneParam._m0[5u].z, fma(_948, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _947));
    float _1068 = fma(_949, cbSceneParam._m0[6u].z, fma(_948, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _947));
    float _1071 = fma(_949, cbSceneParam._m0[7u].z, fma(_948, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _947));
    uint _1084 = _265 + 9u;
    uint _1085 = _1084 + uint(cbMatDynParam._m0[0u].w);
    float _1091 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_1085].x;
    float _1092 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_1085].y;
    float _1093 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_1085].z;
    float _4114 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1095 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _1097 = 1.0 - _955;
    float _1098 = _1094 * _1097;
    float _1099 = _1095 * _1097;
    float _1100 = _1096 * _1097;
    float _1105 = (_1094 + (-0.039999999105930328369140625)) * _955;
    float _1106 = (_1095 + (-0.039999999105930328369140625)) * _955;
    float _1107 = (_1096 + (-0.039999999105930328369140625)) * _955;
    float _1108 = _1105 + 0.039999999105930328369140625;
    float _1110 = _1106 + 0.039999999105930328369140625;
    float _1111 = _1107 + 0.039999999105930328369140625;
    vec4 _1120 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1046, cbSceneParam._m0[86u].y * _1047));
    float _1124 = ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * TEXCOORD_5.w) * _1120.x;
    float _1125 = dot(vec3(_947, _948, _949), vec3(_1026, _1027, _1028));
    float _1128 = _1125 * 2.0;
    float _1132 = (_1128 * _947) - _1026;
    float _1133 = (_1128 * _948) - _1027;
    float _1134 = (_1128 * _949) - _1028;
    float _1138 = abs(dot(vec3(_1026, _1027, _1028), vec3(_947, _948, _949)));
    float _4147 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1140 = sqrt(_950);
    float _1153 = exp2((_1140 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1140 * 3.0));
    float _1159 = (1.0 - _1153) * ((_1140 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1160 = _1153 * _1140;
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1192 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1525;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1250 = fma(_1196, cbModelParam._m0[26u].z, fma(_1192, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188));
        float _1254 = fma(_1196, cbModelParam._m0[27u].z, fma(_1192, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188));
        float _1258 = fma(_1196, cbModelParam._m0[28u].z, fma(_1192, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188));
        float _1283 = _1188 + _947;
        float _1284 = _1192 + _948;
        float _1285 = _1196 + _949;
        float _1295 = fma(_1285, cbModelParam._m0[26u].z, fma(_1284, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1283)) - _1250;
        float _1296 = fma(_1285, cbModelParam._m0[27u].z, fma(_1284, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1283)) - _1254;
        float _1297 = fma(_1285, cbModelParam._m0[28u].z, fma(_1284, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1283)) - _1258;
        float _1301 = inversesqrt(dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297)));
        float _1314 = ((_1301 * _1295) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1250 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1301 * _1296) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1254 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1301 * _1297) / cbModelParam._m0[34u].z) + ((((((_1258 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        float _1353 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1319.x + (-0.5));
        float _1355 = _1353 * (_1319.y + (-0.5));
        float _1356 = _1353 * (_1319.z + (-0.5));
        float _1363 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1326.x + (-0.5));
        float _1365 = _1363 * (_1326.y + (-0.5));
        float _1366 = _1363 * (_1326.z + (-0.5));
        float _1373 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1333.x + (-0.5));
        float _1375 = _1373 * (_1333.y + (-0.5));
        float _1376 = _1373 * (_1333.z + (-0.5));
        float _1383 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1340.x + (-0.5));
        float _1385 = _1383 * (_1340.y + (-0.5));
        float _1386 = _1383 * (_1340.z + (-0.5));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = _1354 * 0.5;
        float _1391 = _1364 * 0.5;
        float _1392 = _1374 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1407 = (dot(vec3(_947, _948, _949), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1417 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4195 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1419 + 1.0))) + _1424) * _1387;
        float _1434 = _1355 * 0.5;
        float _1435 = _1365 * 0.5;
        float _1436 = _1375 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_947, _948, _949), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4228 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1461 + 1.0))) + _1466) * _1388;
        float _1476 = _1356 * 0.5;
        float _1477 = _1366 * 0.5;
        float _1478 = _1376 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_947, _948, _949), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4261 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1503 + 1.0))) + _1508) * _1389;
        _1525 = _1356;
        _1527 = _1355;
        _1528 = _1354;
        _1529 = _1366;
        _1530 = _1365;
        _1531 = _1364;
        _1532 = _1376;
        _1533 = _1375;
        _1534 = _1374;
        _1535 = _1389;
        _1536 = _1388;
        _1537 = _1387;
        _1538 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1526;
        _1527 = _1526;
        _1528 = _1526;
        _1529 = _1526;
        _1530 = _1526;
        _1531 = _1526;
        _1532 = _1526;
        _1533 = _1526;
        _1534 = _1526;
        _1535 = _1526;
        _1536 = _1526;
        _1537 = _1526;
        _1538 = 0.0;
        _1539 = 0.0;
        _1540 = 0.0;
    }
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1567 = fma(_1196, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1188));
        float _1571 = fma(_1196, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1188));
        float _1575 = fma(_1196, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1188));
        float _1598 = _1188 + _947;
        float _1599 = _1192 + _948;
        float _1600 = _1196 + _949;
        float _1610 = fma(_1600, cbModelParam._m0[30u].z, fma(_1599, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1598)) - _1567;
        float _1611 = fma(_1600, cbModelParam._m0[31u].z, fma(_1599, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1598)) - _1571;
        float _1612 = fma(_1600, cbModelParam._m0[32u].z, fma(_1599, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1598)) - _1575;
        float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
        float _1629 = ((_1616 * _1610) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1567 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1630 = ((_1616 * _1611) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1571 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1616 * _1612) / cbModelParam._m0[35u].z) + ((((((_1575 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        float _1666 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1633.x + (-0.5));
        float _1668 = _1666 * (_1633.y + (-0.5));
        float _1669 = _1666 * (_1633.z + (-0.5));
        float _1676 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1640.x + (-0.5));
        float _1678 = _1676 * (_1640.y + (-0.5));
        float _1679 = _1676 * (_1640.z + (-0.5));
        float _1686 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1647.x + (-0.5));
        float _1688 = _1686 * (_1647.y + (-0.5));
        float _1689 = _1686 * (_1647.z + (-0.5));
        float _1696 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1654.x + (-0.5));
        float _1698 = _1696 * (_1654.y + (-0.5));
        float _1699 = _1696 * (_1654.z + (-0.5));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = _1667 * 0.5;
        float _1704 = _1677 * 0.5;
        float _1705 = _1687 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_947, _948, _949), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4324 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1730 + 1.0))) + _1735) * _1700;
        float _1745 = _1668 * 0.5;
        float _1746 = _1678 * 0.5;
        float _1747 = _1688 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_947, _948, _949), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4357 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1772 + 1.0))) + _1777) * _1701;
        float _1787 = _1669 * 0.5;
        float _1788 = _1679 * 0.5;
        float _1789 = _1689 * 0.5;
        float _1790 = dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789));
        float _1795 = (_1790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1790);
        float _1803 = (dot(vec3(_947, _948, _949), vec3(_1795 * _1787, _1795 * _1788, _1795 * _1789)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1812 = sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1814 = _1813 * 2.0;
        float _1818 = (1.0 - _1813) / (_1813 + 1.0);
        float _4390 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1828 = ((((1.0 - _1819) * (_1814 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1814 + 1.0))) + _1819) * _1702;
        _1836 = _1669;
        _1837 = _1668;
        _1838 = _1667;
        _1839 = _1679;
        _1840 = _1678;
        _1841 = _1677;
        _1842 = _1689;
        _1843 = _1688;
        _1844 = _1687;
        _1845 = _1702;
        _1846 = _1701;
        _1847 = _1700;
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)));
    }
    else
    {
        _1836 = _1526;
        _1837 = _1526;
        _1838 = _1526;
        _1839 = _1526;
        _1840 = _1526;
        _1841 = _1526;
        _1842 = _1526;
        _1843 = _1526;
        _1844 = _1526;
        _1845 = _1526;
        _1846 = _1526;
        _1847 = _1526;
        _1848 = 0.0;
        _1849 = 0.0;
        _1850 = 0.0;
    }
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1538)) + _1538;
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1539)) + _1539;
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1540)) + _1540;
    float _1883 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1860));
    float _1904 = _1132 * 0.5;
    float _1905 = _1133 * 0.5;
    float _1906 = _1134 * 0.5;
    float _1907 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1910 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1913 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1947;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1920 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1525, _1529, _1532, _1535));
        float _1924 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1527, _1530, _1533, _1536));
        float _1928 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1528, _1531, _1534, _1537));
        float _1935 = dot(vec4(cbModelParam._m0[39u]), vec4(_1904, _1905, _1906, 1.0));
        _1947 = dot(vec3(isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1935) ? 0.0 : (isnan(0.0) ? _1935 : max(0.0, _1935))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1947 = 1.0;
    }
    float _1958;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1949 = dot(vec4(cbModelParam._m0[40u]), vec4(_1904, _1905, _1906, 1.0));
        _1958 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1949) ? 0.0 : (isnan(0.0) ? _1949 : max(0.0, _1949))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1958 = 1.0;
    }
    float _1962 = (_1958 * cbModelParam._m0[1u].x) + (_1947 * (1.0 - cbModelParam._m0[1u].x));
    float _1972 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _950);
    float _1973 = isnan(_1972) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1972 : min(cbModelParam._m0[25u].z, _1972));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2020 = fma(_1196, cbModelParam._m0[13u].z, fma(_1192, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1188)) + cbModelParam._m0[13u].w;
        float _2024 = fma(_1196, cbModelParam._m0[14u].z, fma(_1192, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1188)) + cbModelParam._m0[14u].w;
        float _2028 = fma(_1196, cbModelParam._m0[15u].z, fma(_1192, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1188)) + cbModelParam._m0[15u].w;
        float _2031 = fma(_1134, cbModelParam._m0[13u].z, fma(_1133, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1132));
        float _2034 = fma(_1134, cbModelParam._m0[14u].z, fma(_1133, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1132));
        float _2037 = fma(_1134, cbModelParam._m0[15u].z, fma(_1133, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1132));
        float _2065;
        if (_2031 > 0.0)
        {
            _2065 = abs((1.0 - _2020) / _2031);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2020 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2065 = frontier_phi_17_15_ladder;
        }
        float _2288;
        if (_2034 > 0.0)
        {
            _2288 = abs((1.0 - _2024) / _2034);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2024 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2288 = frontier_phi_26_22_ladder;
        }
        float _2545;
        if (_2037 > 0.0)
        {
            _2545 = abs((1.0 - _2028) / _2037);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2028 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2545 = frontier_phi_38_33_ladder;
        }
        float _2547 = isnan(_2288) ? _2065 : (isnan(_2065) ? _2288 : min(_2065, _2288));
        float _2548 = isnan(_2545) ? _2547 : (isnan(_2547) ? _2545 : min(_2547, _2545));
        float _2552 = (_2548 * _2031) + _2020;
        float _2553 = (_2548 * _2034) + _2024;
        float _2554 = (_2548 * _2037) + _2028;
        float _2555 = _2548 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2555;
        float _2559 = _2555 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 > _2559) || ((_2553 < _2557) || ((_2552 < _2557) || (_2552 > _2559))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2554, cbModelParam._m0[9u].z, fma(_2553, cbModelParam._m0[9u].y, _2552 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2554, cbModelParam._m0[10u].z, fma(_2553, cbModelParam._m0[10u].y, _2552 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2554, cbModelParam._m0[11u].z, fma(_2553, cbModelParam._m0[11u].y, _2552 * cbModelParam._m0[11u].x))), _1973);
            frontier_phi_16_38_ladder = _2682.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2682.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2682.x * cbModelParam._m0[1u].y;
        }
        _2053 = frontier_phi_16_38_ladder_2;
        _2055 = frontier_phi_16_38_ladder_1;
        _2057 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1132, _1133, _1134), _1973);
        _2053 = _2041.x * cbModelParam._m0[1u].y;
        _2055 = _2041.y * cbModelParam._m0[1u].y;
        _2057 = _2041.z * cbModelParam._m0[1u].y;
    }
    float _2061 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _950);
    float _2062 = isnan(_2061) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2061 : min(cbModelParam._m0[25u].w, _2061));
    float _2151;
    float _2153;
    float _2155;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2115 = fma(_1196, cbModelParam._m0[21u].z, fma(_1192, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1188)) + cbModelParam._m0[21u].w;
        float _2119 = fma(_1196, cbModelParam._m0[22u].z, fma(_1192, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1188)) + cbModelParam._m0[22u].w;
        float _2123 = fma(_1196, cbModelParam._m0[23u].z, fma(_1192, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1188)) + cbModelParam._m0[23u].w;
        float _2126 = fma(_1134, cbModelParam._m0[21u].z, fma(_1133, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1132));
        float _2129 = fma(_1134, cbModelParam._m0[22u].z, fma(_1133, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1132));
        float _2132 = fma(_1134, cbModelParam._m0[23u].z, fma(_1133, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1132));
        float _2293;
        if (_2126 > 0.0)
        {
            _2293 = abs((1.0 - _2115) / _2126);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2115 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2293 = frontier_phi_28_24_ladder;
        }
        float _2572;
        if (_2129 > 0.0)
        {
            _2572 = abs((1.0 - _2119) / _2129);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2119 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2572 = frontier_phi_40_35_ladder;
        }
        float _2785;
        if (_2132 > 0.0)
        {
            _2785 = abs((1.0 - _2123) / _2132);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2123 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2785 = frontier_phi_49_46_ladder;
        }
        float _2787 = isnan(_2572) ? _2293 : (isnan(_2293) ? _2572 : min(_2293, _2572));
        float _2788 = isnan(_2785) ? _2787 : (isnan(_2787) ? _2785 : min(_2787, _2785));
        float _2792 = (_2788 * _2126) + _2115;
        float _2793 = (_2788 * _2129) + _2119;
        float _2794 = (_2788 * _2132) + _2123;
        float _2795 = _2788 * 9.9999997473787516355514526367188e-05;
        float _2796 = (-1.0) - _2795;
        float _2798 = _2795 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2794 > _2798) || ((_2794 < _2796) || ((_2793 > _2798) || ((_2793 < _2796) || ((_2792 < _2796) || (_2792 > _2798))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2794, cbModelParam._m0[17u].z, fma(_2793, cbModelParam._m0[17u].y, _2792 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2794, cbModelParam._m0[18u].z, fma(_2793, cbModelParam._m0[18u].y, _2792 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2794, cbModelParam._m0[19u].z, fma(_2793, cbModelParam._m0[19u].y, _2792 * cbModelParam._m0[19u].x))), _2062);
            frontier_phi_25_49_ladder = _2993.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2993.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2993.x * cbModelParam._m0[1u].z;
        }
        _2151 = frontier_phi_25_49_ladder_2;
        _2153 = frontier_phi_25_49_ladder_1;
        _2155 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2135 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1132, _1133, _1134), _2062);
        _2151 = _2135.x * cbModelParam._m0[1u].z;
        _2153 = _2135.y * cbModelParam._m0[1u].z;
        _2155 = _2135.z * cbModelParam._m0[1u].z;
    }
    float _2168 = (((_1159 * _1108) + _1160) * _1124) * ((cbModelParam._m0[1u].w * (_2151 - _2053)) + _2053);
    float _2170 = (((_1159 * _1110) + _1160) * _1124) * ((cbModelParam._m0[1u].w * (_2153 - _2055)) + _2055);
    float _2172 = (((_1159 * _1111) + _1160) * _1124) * ((cbModelParam._m0[1u].w * (_2155 - _2057)) + _2057);
    float _2175 = fma(_2172, cbSceneParam._m0[89u].z, fma(_2170, cbSceneParam._m0[89u].y, _2168 * cbSceneParam._m0[89u].x));
    float _2178 = fma(_2172, cbSceneParam._m0[90u].z, fma(_2170, cbSceneParam._m0[90u].y, _2168 * cbSceneParam._m0[90u].x));
    float _2181 = fma(_2172, cbSceneParam._m0[91u].z, fma(_2170, cbSceneParam._m0[91u].y, _2168 * cbSceneParam._m0[91u].x));
    vec4 _2189 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1046, _1047));
    float _2191 = _2189.w;
    float _2203 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2191);
    float _2204 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2191);
    float _2205 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2191);
    uvec4 _2209 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2211 = _2209.x * 14u;
    uint _2212 = _2211 + 13u;
    float _2219 = _1124 + (-1.0);
    float _2224 = (cbLight._m0[_2212].x * _2219) + 1.0;
    float _2225 = (cbLight._m0[_2212].y * _2219) + 1.0;
    float _2226 = (cbLight._m0[_2212].z * _2219) + 1.0;
    float _2227 = (cbLight._m0[_2212].w * _2219) + 1.0;
    uint _2228 = _2211 + 5u;
    float _2234 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2238 = _2211 + 4u;
    float _2247 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    uint _2251 = _2211 | 1u;
    float _2262 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_947, _948, _949));
    float _2265 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_947, _948, _949));
    float _4526 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _4537 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2270 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * 0.3183098733425140380859375;
    float _2272 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * 0.3183098733425140380859375;
    float _2279 = ((cbLight._m0[_2228].x * _2234) * _2272) + (((cbLight._m0[_2238].x * _2203) * _2247) * _2270);
    float _2280 = ((_2234 * cbLight._m0[_2228].y) * _2272) + (((cbLight._m0[_2238].y * _2204) * _2247) * _2270);
    float _2281 = ((_2234 * cbLight._m0[_2228].z) * _2272) + (((cbLight._m0[_2238].z * _2205) * _2247) * _2270);
    uvec4 _2285 = floatBitsToUint(cbLight._m0[_2211 + 12u]);
    bool _2287 = _2285.x == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2287)
    {
        _2298 = _2279;
        _2300 = _2280;
        _2302 = _2281;
    }
    else
    {
        uint _2306 = _2211 + 6u;
        float _2322 = (dot(vec3(cbLight._m0[_2211 + 2u].xyz), vec3(_947, _948, _949)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4548 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2325 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2298 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2279;
        _2300 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2280;
        _2302 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2281;
    }
    bool _2305 = _2285.y == 0u;
    float _2343;
    float _2345;
    float _2347;
    if (_2305)
    {
        _2343 = _2298;
        _2345 = _2300;
        _2347 = _2302;
    }
    else
    {
        uint _2516 = _2211 + 7u;
        float _2532 = (dot(vec3(cbLight._m0[_2211 + 3u].xyz), vec3(_947, _948, _949)) * 0.5) + 0.5;
        float _2533 = _2532 * _2532;
        float _4564 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2534 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2535 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2343 = (((cbLight._m0[_2516].x * 0.3183098733425140380859375) * _2534) * _2535) + _2298;
        _2345 = (((cbLight._m0[_2516].y * 0.3183098733425140380859375) * _2534) * _2535) + _2300;
        _2347 = (((cbLight._m0[_2516].z * 0.3183098733425140380859375) * _2534) * _2535) + _2302;
    }
    uint _2350 = _2211 + 8u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _950) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2211].x + _1026;
    float _2366 = cbLight._m0[_2211].y + _1027;
    float _2367 = cbLight._m0[_2211].z + _1028;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2211].xyz));
    float _4580 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _4591 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _2379 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2380 = dot(vec3(_947, _948, _949), vec3(_2372, _2373, _2374));
    float _4602 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2372, _2373, _2374));
    float _4613 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2364 * _2364;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2400 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
    float _2401 = 0.959999978542327880859375 - _1105;
    float _2403 = 0.959999978542327880859375 - _1106;
    float _2404 = 0.959999978542327880859375 - _1107;
    float _2411 = 1.0 - _2364;
    float _2422 = (0.5 / (((_2379 * ((_2378 * _2411) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2411) + _2364) * _2378))) * _2378;
    float _4624 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    uint _2438 = _2211 + 9u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _950) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2251].x + _1026;
    float _2452 = cbLight._m0[_2251].y + _1027;
    float _2453 = cbLight._m0[_2251].z + _1028;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2251].xyz));
    float _4635 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2465 = dot(vec3(_947, _948, _949), vec3(_2458, _2459, _2460));
    float _4646 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2469 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2458, _2459, _2460));
    float _4657 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2473 = _2450 * _2450;
    float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
    float _2484 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
    float _2491 = 1.0 - _2450;
    float _2501 = (0.5 / (((_2379 * ((_2464 * _2491) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2491) + _2450) * _2464))) * _2464;
    float _4668 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2503 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
    float _2513 = (((((_2484 * _2401) + _1108) * cbLight._m0[_2438].x) * _2503) * _2234) + ((((cbLight._m0[_2350].x * _2203) * ((_2400 * _2401) + _1108)) * _2424) * _2247);
    float _2514 = (((((_2484 * _2403) + _1110) * cbLight._m0[_2438].y) * _2503) * _2234) + ((((cbLight._m0[_2350].y * _2204) * ((_2400 * _2403) + _1110)) * _2424) * _2247);
    float _2515 = (((((_2484 * _2404) + _1111) * cbLight._m0[_2438].z) * _2503) * _2234) + ((((cbLight._m0[_2350].z * _2205) * ((_2400 * _2404) + _1111)) * _2424) * _2247);
    float _2577;
    float _2579;
    float _2581;
    if (_2287)
    {
        _2577 = _2513;
        _2579 = _2514;
        _2581 = _2515;
    }
    else
    {
        uint _2583 = _2211 + 2u;
        uint _2587 = _2211 + 10u;
        float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _950) * 0.949999988079071044921875);
        float _2602 = _2601 * _2601;
        float _2603 = cbLight._m0[_2583].x + _1026;
        float _2604 = cbLight._m0[_2583].y + _1027;
        float _2605 = cbLight._m0[_2583].z + _1028;
        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
        float _2610 = _2609 * _2603;
        float _2611 = _2609 * _2604;
        float _2612 = _2609 * _2605;
        float _2613 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2583].xyz));
        float _4679 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2617 = dot(vec3(_947, _948, _949), vec3(_2610, _2611, _2612));
        float _4690 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2621 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2610, _2611, _2612));
        float _4701 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2625 = _2602 * _2602;
        float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
        float _2636 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2643 = 1.0 - _2602;
        float _2653 = (0.5 / (((_2379 * ((_2616 * _2643) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2643) + _2602) * _2616))) * _2616;
        float _4712 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2655 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
        float _2656 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2577 = (((((_2636 * _2401) + _1108) * cbLight._m0[_2587].x) * _2655) * _2656) + _2513;
        _2579 = (((((_2636 * _2403) + _1110) * cbLight._m0[_2587].y) * _2655) * _2656) + _2514;
        _2581 = (((((_2636 * _2404) + _1111) * cbLight._m0[_2587].z) * _2655) * _2656) + _2515;
    }
    float _2691;
    float _2693;
    float _2695;
    if (_2305)
    {
        _2691 = _2577;
        _2693 = _2579;
        _2695 = _2581;
    }
    else
    {
        uint _2702 = _2211 + 3u;
        uint _2706 = _2211 + 11u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _950) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _1026;
        float _2723 = cbLight._m0[_2702].y + _1027;
        float _2724 = cbLight._m0[_2702].z + _1028;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2702].xyz));
        float _4728 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2736 = dot(vec3(_947, _948, _949), vec3(_2729, _2730, _2731));
        float _4739 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4750 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0);
        float _2762 = 1.0 - _2721;
        float _2772 = (0.5 / (((_2379 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2762) + _2721) * _2735))) * _2735;
        float _4761 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2691 = (((((_2755 * _2401) + _1108) * cbLight._m0[_2706].x) * _2774) * _2775) + _2577;
        _2693 = (((((_2755 * _2403) + _1110) * cbLight._m0[_2706].y) * _2774) * _2775) + _2579;
        _2695 = (((((_2755 * _2404) + _1111) * cbLight._m0[_2706].z) * _2774) * _2775) + _2581;
    }
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_2209.y == 0u)
    {
        float _2850 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2851 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2850;
        float _2852 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2850;
        float _2853 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2850;
        uvec4 _2865 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2866 = _2865.x;
        uint _2877 = uint((float(_2865.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1047) / _2866))) + floor(float(uint(cbSceneParam._m0[85u].x * _1046) / _2866)));
        float _2887 = (log2(_2853 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2888 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        uint _2891 = uint(isnan(14.0) ? _2888 : (isnan(_2888) ? 14.0 : min(_2888, 14.0)));
        uvec4 _2896 = texelFetch(g_lightClusterGridBuffer, int(((_2891 << 2u) + (_2877 << 6u)) >> 2u));
        uint _2897 = _2896.x;
        uint _2898 = _2865.z;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((((1u << ((_2898 >> 4u) & 15u)) + 4294967295u) & _2897) == 0u) || ((_2898 & 240u) == 0u))
        {
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
        }
        else
        {
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            uint _3156 = 0u;
            uint _3165;
            bool _3166;
            for (;;)
            {
                _3165 = texelFetch(g_lightClassification, int((((_2891 << 5u) + (_2877 << 9u)) + (_3156 << 2u)) >> 2u)).x;
                _3166 = _3165 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3166)
                {
                    frontier_phi_66_pred = _3150;
                    frontier_phi_66_pred_1 = _3155;
                    frontier_phi_66_pred_2 = _3154;
                    frontier_phi_66_pred_3 = _3153;
                    frontier_phi_66_pred_4 = _3152;
                    frontier_phi_66_pred_5 = _3151;
                }
                else
                {
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    uint _3301;
                    _3295 = _3150;
                    _3296 = _3151;
                    _3297 = _3152;
                    _3298 = _3153;
                    _3299 = _3154;
                    _3300 = _3155;
                    _3301 = _3165;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    for (;;)
                    {
                        uint _3305 = uint(findLSB(_3301)) + (_3156 << 5u);
                        uint _3302 = (_3301 + 4294967295u) & _3301;
                        uint _3307 = _3305 * 48u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3307)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 3u)).x));
                        uint _3327 = (_3305 * 48u) + 4u;
                        vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 3u)).x));
                        uint _3346 = (_3305 * 48u) + 8u;
                        vec3 _3357 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x));
                        float _3361 = _3321.x - _2851;
                        float _3362 = _3321.y - _2852;
                        float _3363 = _3321.z - _2853;
                        float _3364 = dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363));
                        float _3367 = inversesqrt(_3364);
                        float _3368 = _3367 * _3361;
                        float _3369 = _3367 * _3362;
                        float _3370 = _3367 * _3363;
                        float _3371 = dot(vec3(_1065, _1068, _1071), vec3(_3368, _3369, _3370));
                        float _3376 = 1.0 - (_3364 * _3321.w);
                        float _4787 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3377 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3378 = sqrt(_3364) * _3340.w;
                        float _3381 = 1.39999997615814208984375 / (_3378 + 1.39999997615814208984375);
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3371) + _3382;
                        float _3388 = _3378 * _3378;
                        float _3392 = ((isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))) * _3377) / ((_3388 * 0.699999988079071044921875) + 1.0);
                        float _3396 = (-0.0) - _2851;
                        float _3397 = (-0.0) - _2852;
                        float _3398 = (-0.0) - _2853;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3403 = _3402 * _3396;
                        float _3404 = _3402 * _3397;
                        float _3405 = _3402 * _3398;
                        float _3413 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                        float _3414 = 1.0 - _1140;
                        float _3421 = sqrt(1.0 - ((1.0 - (_3414 * _3414)) * (1.0 - (_3413 * _3413))));
                        float _3422 = _3421 * _3421;
                        float _3423 = _3422 * _3422;
                        float _3424 = _3403 + _3368;
                        float _3425 = _3404 + _3369;
                        float _3426 = _3405 + _3370;
                        float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                        float _3434 = dot(vec3(_1065, _1068, _1071), vec3(_3403, _3404, _3405));
                        float _4803 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3437 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3438 = dot(vec3(_1065, _1068, _1071), vec3(_3430 * _3424, _3430 * _3425, _3430 * _3426));
                        float _4814 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3441 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3445 = ((_3441 * _3441) * (_3423 + (-1.0))) + 1.0;
                        float _3446 = _3381 * _3422;
                        float _3447 = _3446 * _3446;
                        float _3450 = ((1.0 - _3447) * _3371) + _3447;
                        float _4825 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3451 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3452 = 1.0 - _3422;
                        float _3462 = (0.5 / (((_3451 * ((_3437 * _3452) + _3422)) + 9.9999999392252902907785028219223e-09) + (((_3451 * _3452) + _3422) * _3437))) * _3451;
                        float _4836 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3473 = (((_3423 * 3.1415927410125732421875) * (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) / ((_3445 * _3445) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125))) * _3377;
                        _3225 = (_3392 * _3340.x) + _3298;
                        _3226 = (_3392 * _3340.y) + _3299;
                        _3227 = (_3392 * _3340.z) + _3300;
                        _3222 = (_3473 * _3357.x) + _3295;
                        _3223 = (_3473 * _3357.y) + _3296;
                        _3224 = (_3473 * _3357.z) + _3297;
                        if (_3302 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3295 = _3222;
                            _3296 = _3223;
                            _3297 = _3224;
                            _3298 = _3225;
                            _3299 = _3226;
                            _3300 = _3227;
                            _3301 = _3302;
                        }
                    }
                    frontier_phi_66_pred = _3222;
                    frontier_phi_66_pred_1 = _3227;
                    frontier_phi_66_pred_2 = _3226;
                    frontier_phi_66_pred_3 = _3225;
                    frontier_phi_66_pred_4 = _3224;
                    frontier_phi_66_pred_5 = _3223;
                }
                _2999 = frontier_phi_66_pred;
                _3009 = frontier_phi_66_pred_1;
                _3007 = frontier_phi_66_pred_2;
                _3005 = frontier_phi_66_pred_3;
                _3003 = frontier_phi_66_pred_4;
                _3001 = frontier_phi_66_pred_5;
                uint _3157 = _3156 + 1u;
                if (_3157 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3150 = _2999;
                    _3151 = _3001;
                    _3152 = _3003;
                    _3153 = _3005;
                    _3154 = _3007;
                    _3155 = _3009;
                    _3156 = _3157;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
        }
        uvec4 _3012 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3013 = _3012.z;
        uint _3015 = (_3013 >> 8u) & 15u;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        if (((4294967295u << _3015) & _2897) == 0u)
        {
            _3118 = _2998;
            _3120 = _3000;
            _3122 = _3002;
            _3124 = _3004;
            _3126 = _3006;
            _3128 = _3008;
        }
        else
        {
            float _3143 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
            float _3144 = _3143 * _2851;
            float _3145 = _3143 * _2852;
            float _3146 = _3143 * _2853;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3015 < ((_3013 >> 12u) & 15u))
            {
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3129;
                float _3278 = _2998;
                float _3279 = _3000;
                float _3280 = _3002;
                float _3281 = _3004;
                float _3282 = _3006;
                float _3283 = _3008;
                uint _3284 = _3015;
                uint _3293;
                bool _3294;
                for (;;)
                {
                    _3293 = texelFetch(g_lightClassification, int((((_2891 << 5u) + (_2877 << 9u)) + (_3284 << 2u)) >> 2u)).x;
                    _3294 = _3293 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3294)
                    {
                        frontier_phi_77_pred = _3283;
                        frontier_phi_77_pred_1 = _3282;
                        frontier_phi_77_pred_2 = _3281;
                        frontier_phi_77_pred_3 = _3280;
                        frontier_phi_77_pred_4 = _3279;
                        frontier_phi_77_pred_5 = _3278;
                    }
                    else
                    {
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3500 = _3278;
                        float _3501 = _3279;
                        float _3502 = _3280;
                        float _3503 = _3281;
                        float _3504 = _3282;
                        float _3505 = _3283;
                        uint _3506 = _3293;
                        uint _3507;
                        vec4 _3532;
                        float _3533;
                        vec4 _3548;
                        vec3 _3560;
                        vec4 _3575;
                        vec4 _3590;
                        float _3636;
                        bool _3637;
                        for (;;)
                        {
                            uint _3517 = ((_3284 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3506));
                            _3507 = (_3506 + 4294967295u) & _3506;
                            uint _3519 = _3517 * 40u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            _3533 = _3532.w;
                            uint _3535 = (_3517 * 40u) + 4u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3517 * 40u) + 8u;
                            _3560 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x));
                            uint _3562 = (_3517 * 40u) + 16u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3517 * 40u) + 20u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3517 * 40u) + 24u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3611 = (_3517 * 40u) + 28u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3636 = fma(_2853, _3624.z, fma(_2852, _3624.y, _3624.x * _2851)) + _3624.w;
                            _3637 = !((fma(_2853, _3605.z, fma(_2852, _3605.y, _3605.x * _2851)) + _3605.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3637)
                            {
                                float _3664 = _3532.x - _2851;
                                float _3665 = _3532.y - _2852;
                                float _3666 = _3532.z - _2853;
                                float _3667 = dot(vec3(_3664, _3665, _3666), vec3(_3664, _3665, _3666));
                                float _3670 = inversesqrt(_3667);
                                float _3671 = _3670 * _3664;
                                float _3672 = _3670 * _3665;
                                float _3673 = _3670 * _3666;
                                float _3677 = 1.0 - (_3667 / (_3533 * _3533));
                                float _4847 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3682 = sqrt(_3667) * _3548.w;
                                float _3684 = 1.39999997615814208984375 / (_3682 + 1.39999997615814208984375);
                                float _3685 = _3684 * _3684;
                                float _3688 = ((1.0 - _3685) * dot(vec3(_3671, _3672, _3673), vec3(_1065, _1068, _1071))) + _3685;
                                float _3691 = _3682 * _3682;
                                float _3695 = (fma(_2853, _3575.z, fma(_2852, _3575.y, _3575.x * _2851)) + _3575.w) / _3636;
                                float _3696 = (fma(_2853, _3590.z, fma(_2852, _3590.y, _3590.x * _2851)) + _3590.w) / _3636;
                                float _3700 = 1.0 - dot(vec2(_3695, _3696), vec2(_3695, _3696));
                                float _4863 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3702 = _3701 * (((isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0))) * _3678) / ((_3691 * 0.699999988079071044921875) + 1.0));
                                float _3714 = exp2(log2(1.0 / ((_3691 * 3.5) + 5.0)) * 0.25);
                                float _3715 = 1.0 - _1140;
                                float _3722 = sqrt(1.0 - ((1.0 - (_3715 * _3715)) * (1.0 - (_3714 * _3714))));
                                float _3723 = _3722 * _3722;
                                float _3724 = _3723 * _3723;
                                float _3725 = _3671 - _3144;
                                float _3726 = _3672 - _3145;
                                float _3727 = _3673 - _3146;
                                float _3731 = inversesqrt(dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727)));
                                float _3735 = dot(vec3(_1065, _1068, _1071), vec3((-0.0) - _3144, (-0.0) - _3145, (-0.0) - _3146));
                                float _4874 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3738 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3739 = dot(vec3(_1065, _1068, _1071), vec3(_3731 * _3725, _3731 * _3726, _3731 * _3727));
                                float _4885 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3742 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3746 = ((_3742 * _3742) * (_3724 + (-1.0))) + 1.0;
                                float _3747 = _3684 * _3723;
                                float _3748 = _3747 * _3747;
                                float _3754 = ((1.0 - _3748) * dot(vec3(_1065, _1068, _1071), vec3(_3671, _3672, _3673))) + _3748;
                                float _4896 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3756 = 1.0 - _3723;
                                float _3766 = (0.5 / (((_3755 * ((_3738 * _3756) + _3723)) + 9.9999999392252902907785028219223e-09) + (((_3755 * _3756) + _3723) * _3738))) * _3755;
                                float _4907 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3776 = (_3701 * _3678) * (((_3724 * 3.1415927410125732421875) * (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0)))) / ((_3746 * _3746) * ((_3691 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3702 * _3548.y;
                                frontier_phi_83_pred_1 = _3702 * _3548.x;
                                frontier_phi_83_pred_2 = _3776 * _3560.z;
                                frontier_phi_83_pred_3 = _3776 * _3560.y;
                                frontier_phi_83_pred_4 = _3776 * _3560.x;
                                frontier_phi_83_pred_5 = _3702 * _3548.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3784 = frontier_phi_83_pred;
                            _3783 = frontier_phi_83_pred_1;
                            _3782 = frontier_phi_83_pred_2;
                            _3781 = frontier_phi_83_pred_3;
                            _3780 = frontier_phi_83_pred_4;
                            _3785 = frontier_phi_83_pred_5;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            _3489 = _3782 + _3502;
                            if (_3507 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3507;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3492;
                        frontier_phi_77_pred_1 = _3491;
                        frontier_phi_77_pred_2 = _3490;
                        frontier_phi_77_pred_3 = _3489;
                        frontier_phi_77_pred_4 = _3488;
                        frontier_phi_77_pred_5 = _3487;
                    }
                    _3129 = frontier_phi_77_pred;
                    _3127 = frontier_phi_77_pred_1;
                    _3125 = frontier_phi_77_pred_2;
                    _3123 = frontier_phi_77_pred_3;
                    _3121 = frontier_phi_77_pred_4;
                    _3119 = frontier_phi_77_pred_5;
                    uint _3285 = _3284 + 1u;
                    if (_3285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3278 = _3119;
                        _3279 = _3121;
                        _3280 = _3123;
                        _3281 = _3125;
                        _3282 = _3127;
                        _3283 = _3129;
                        _3284 = _3285;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3123;
                frontier_phi_58_59_ladder_1 = _3129;
                frontier_phi_58_59_ladder_2 = _3127;
                frontier_phi_58_59_ladder_3 = _3125;
                frontier_phi_58_59_ladder_4 = _3121;
                frontier_phi_58_59_ladder_5 = _3119;
            }
            else
            {
                frontier_phi_58_59_ladder = _3002;
                frontier_phi_58_59_ladder_1 = _3008;
                frontier_phi_58_59_ladder_2 = _3006;
                frontier_phi_58_59_ladder_3 = _3004;
                frontier_phi_58_59_ladder_4 = _3000;
                frontier_phi_58_59_ladder_5 = _2998;
            }
            _3118 = frontier_phi_58_59_ladder_5;
            _3120 = frontier_phi_58_59_ladder_4;
            _3122 = frontier_phi_58_59_ladder;
            _3124 = frontier_phi_58_59_ladder_3;
            _3126 = frontier_phi_58_59_ladder_2;
            _3128 = frontier_phi_58_59_ladder_1;
        }
        float _3133 = isnan(1.0) ? _1124 : (isnan(_1124) ? 1.0 : min(_1124, 1.0));
        _2910 = (_3133 * _3124) + _2343;
        _2912 = (_3133 * _3126) + _2345;
        _2914 = (_3133 * _3128) + _2347;
        _2916 = ((_3118 * _1108) * _3133) + _2691;
        _2918 = ((_3120 * _1110) * _3133) + _2693;
        _2920 = ((_3122 * _1111) * _3133) + _2695;
    }
    else
    {
        _2910 = _2343;
        _2912 = _2345;
        _2914 = _2347;
        _2916 = _2691;
        _2918 = _2693;
        _2920 = _2695;
    }
    float _4923 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _4934 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _4945 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2937 = ((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2910 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1124))) + ((_2916 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1962)) * cbPerFrame._m0[3u].x);
    float _2938 = ((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2912 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1124))) + ((_2918 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1962)) * cbPerFrame._m0[3u].x);
    float _2939 = ((isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2914 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1124))) + ((_2920 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1962)) * cbPerFrame._m0[3u].x);
    uint _2940 = _265 + 6u;
    float _2948 = _1046 / cbSceneParam._m0[86u].x;
    float _2949 = _1047 / cbSceneParam._m0[86u].y;
    vec4 _2963 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, (log2((isnan(cbSceneParam._m0[77u].w) ? _969 : (isnan(_969) ? cbSceneParam._m0[77u].w : min(_969, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2965 = _2963.x;
    float _2966 = _2963.y;
    float _2967 = _2963.z;
    float _2968 = _2963.w;
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    if (_969 > cbSceneParam._m0[78u].w)
    {
        float _3023 = isnan(_969) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _969 : min(cbSceneParam._m0[80u].w, _969));
        float _3024 = _3023 / _969;
        float _3035 = _3024 * _1019;
        float _3036 = _1020 * _3024;
        float _3037 = (-0.0) - _3036;
        float _3038 = _3024 * _1021;
        float _3040 = (cbSceneParam._m0[77u].w * _3037) / _3023;
        float _3041 = _3040 + cbSceneParam._m0[79u].w;
        float _3042 = cbSceneParam._m0[79u].w - _3036;
        float _3048 = sqrt(((_3035 * _3035) + (_3036 * _3036)) + (_3038 * _3038));
        float _3051 = (1.0 - (cbSceneParam._m0[77u].w / _3023)) * _3048;
        float _3056 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3058 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3235;
        if (abs((_3037 - _3040) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3235 = ((((_3041 > 0.0) ? exp2(_3056 * _3041) : (2.0 - exp2(_3058 * _3041))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3051;
        }
        else
        {
            float _3179 = 1.0 / cbSceneParam._m0[80u].x;
            float _3180 = isnan(_3042) ? _3041 : (isnan(_3041) ? _3042 : max(_3041, _3042));
            float _3181 = isnan(_3042) ? _3041 : (isnan(_3041) ? _3042 : min(_3041, _3042));
            float _3190 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : min(_3180, 0.0));
            float _3191 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : min(_3181, 0.0));
            _3235 = ((abs(_3048 / _3037) * cbSceneParam._m0[80u].y) * ((((_3190 - _3191) * 2.0) - ((exp2(_3056 * (isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0)))) - exp2(_3056 * (isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))))) * _3179)) - ((exp2(_3058 * _3190) - exp2(_3058 * _3191)) * _3179))) + (_3051 * cbSceneParam._m0[80u].z);
        }
        vec4 _3237 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2948, _2949, 1.0), 0.0);
        float _3246 = exp2((_3235 * (-1.44269502162933349609375)) * (1.0 - _3237.w));
        float _3247 = log2(_3246);
        float _3263 = log2(_2968);
        _3060 = (exp2(_3263 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].x)) * _3237.x) / cbSceneParam._m0[78u].x)) + _2965;
        _3062 = (exp2(_3263 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].y)) * _3237.y) / cbSceneParam._m0[78u].y)) + _2966;
        _3064 = (exp2(_3263 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3247 * cbSceneParam._m0[78u].z)) * _3237.z) / cbSceneParam._m0[78u].z)) + _2967;
        _3066 = _3246 * _2968;
    }
    else
    {
        _3060 = _2965;
        _3062 = _2966;
        _3064 = _2967;
        _3066 = _2968;
    }
    bool _3273;
    vec4 _3076;
    vec4 _3098;
    float _3100;
    float _3104;
    float _3105;
    float _3106;
    float _3107;
    bool _3117;
    for (;;)
    {
        _3076 = cbMatDynParam._m0[0u];
        float _3078 = roundEven(_3076.y);
        bool _3079 = _3078 == 3.0;
        float _3080 = log2(_3066);
        float _3087 = exp2(_3080 * cbSceneParam._m0[78u].x) * _2937;
        float _3088 = exp2(_3080 * cbSceneParam._m0[78u].y) * _2938;
        float _3089 = exp2(_3080 * cbSceneParam._m0[78u].z) * _2939;
        float _3096 = _1035 + (-0.5);
        _3098 = cbMtdParam._m0[1u];
        _3100 = _3098.y * _3096;
        float _3103 = (_3078 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3104 = _3103 * (_3079 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3060)));
        _3105 = _3103 * (_3079 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3062)));
        _3106 = _3103 * (_3079 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3064)));
        _3107 = _3096 * 0.999000012874603271484375;
        _3117 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3117)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3107) < 0.5)
            {
                _3273 = true;
                break;
            }
        }
        uint _3214 = _1084 + uint(_3076.w);
        if ((cbInstanceData._m0[_3214].w < 1.0) && ((cbInstanceData._m0[_3214].w + _3107) < 0.5))
        {
            _3273 = true;
            break;
        }
        if ((_3100 + 1.0) < _3098.x)
        {
            _3273 = true;
            break;
        }
        _3273 = false;
        break;
    }
    float _3478;
    if (_3273)
    {
        discard_state = true;
        _3478 = 0.0;
    }
    else
    {
        _3478 = cbInstanceData._m0[_2940].w;
    }
    SV_Target.x = _3104;
    SV_Target.y = _3105;
    SV_Target.z = _3106;
    SV_Target.w = _3478;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2940].w;
    discard_exit();
}


