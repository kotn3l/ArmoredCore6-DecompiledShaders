#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1474;
float _3854;
float _3855;
float _3856;
float _3857;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _349.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3866 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _424 = (_417 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _425 = (_417 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _426 = (_417 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _349.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3877 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _545 = ((_517.x - _536) * _417) + _536;
    float _546 = ((_517.y - _537) * _417) + _537;
    float _547 = ((_517.z - _538) * _417) + _538;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _572 = ((_559.z - _547) * _490) + _547;
    float _575 = ((((_559.x - _545) * _490) + _545) * 2.0) + (-1.0);
    float _577 = ((((_559.y - _546) * _490) + _546) * 2.0) + (-1.0);
    float _578 = dot(vec2(_575, _577), vec2(_575, _577));
    float _3888 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _583 = sqrt(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))));
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _624 = _622.x;
    float _625 = 1.0 - _624;
    float _634 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _637 = ((isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : min(_634, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _646 = (_637 - ((((((_624 - _625) * cbMtdParam._m0[24u].z) + _625) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _637))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3909 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _654 = (_647 * (cbMtdParam._m0[17u].x - _497)) + _497;
    float _655 = (_647 * (cbMtdParam._m0[17u].y - _498)) + _498;
    float _656 = (_647 * (cbMtdParam._m0[17u].z - _499)) + _499;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _670 = _668.x;
    float _671 = 1.0 - _670;
    float _696 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_670 - _671) * cbMtdParam._m0[24u].w) + _671) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3920 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _705 = ((((cbMtdParam._m0[10u].x - _654) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _697) + _654;
    float _706 = ((((cbMtdParam._m0[10u].y - _655) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _697) + _655;
    float _707 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _656)) * _697) + _656;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _735 = _733.x;
    float _753 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _735) * _417) + _735;
    float _770 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _753) * _490) + _753;
    float _774 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _770) * cbMtdParam._m0[19u].z) + _770;
    float _776 = _774 - (_774 * _647);
    float _778 = _776 - (_776 * _697);
    float _782 = (cbMtdParam._m0[19u].w * (_597.z - _572)) + _572;
    vec4 _796 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _803 = (_796.x * 2.0) + (-1.0);
    float _804 = (_796.y * 2.0) + (-1.0);
    float _805 = dot(vec2(_803, _804), vec2(_803, _804));
    float _3931 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _813 = (_647 * (_796.z - _782)) + _782;
    float _816 = ((cbMtdParam._m0[23u].x - _813) * _697) + _813;
    vec4 _835 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _841 = (_835.x * 2.0) + (-1.0);
    float _842 = (_835.y * 2.0) + (-1.0);
    float _843 = dot(vec2(_841, _842), vec2(_841, _842));
    float _3942 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _851 = (((_597.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _575;
    float _852 = (((_597.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _577;
    float _864 = (((_803 - _851) + (cbMtdParam._m0[21u].x * _851)) * _647) + _851;
    float _865 = (((_804 - _852) + (cbMtdParam._m0[21u].x * _852)) * _647) + _852;
    float _866 = (_647 * (sqrt(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) - _583)) + _583;
    float _877 = (((_841 - _864) + (_864 * cbMtdParam._m0[22u].z)) * _697) + _864;
    float _878 = (((_842 - _865) + (_865 * cbMtdParam._m0[22u].z)) * _697) + _865;
    float _879 = ((sqrt(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) - _866) * _697) + _866;
    float _881 = cbMtdParam._m0[22u].x + _597.w;
    float _884 = fma(_879, _250 * NORMAL.x, fma(_878, _257 * TANGENT.x, (_243 * _235) * _877));
    float _887 = fma(_879, _250 * NORMAL.y, fma(_878, _257 * TANGENT.y, (_243 * _236) * _877));
    float _890 = fma(_879, _250 * NORMAL.z, fma(_878, _257 * TANGENT.z, (_243 * _237) * _877));
    float _894 = inversesqrt(dot(vec3(_884, _887, _890), vec3(_884, _887, _890)));
    float _895 = _894 * _884;
    float _896 = _894 * _887;
    float _897 = _894 * _890;
    float _3953 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _898 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _3975 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3986 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _3997 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4008 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _903 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _917 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _967 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _957);
    float _968 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _957);
    float _969 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _957);
    float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
    float _974 = _967 * _973;
    float _975 = _968 * _973;
    float _976 = _969 * _973;
    vec4 _981 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _983 = _981.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1155 = sqrt(((_967 * _967) + (_968 * _968)) + (_969 * _969));
        float _1161 = (cbMatDynParam._m0[5u].x * _1155) + cbMatDynParam._m0[5u].y;
        float _4019 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1166 = (cbMatDynParam._m0[5u].z * _1155) + cbMatDynParam._m0[5u].w;
        float _4030 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) - _1162)) + _1162) < ((_983 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _994 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _995 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1013 = fma(_897, cbSceneParam._m0[5u].z, fma(_896, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _895));
    float _1016 = fma(_897, cbSceneParam._m0[6u].z, fma(_896, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _895));
    float _1019 = fma(_897, cbSceneParam._m0[7u].z, fma(_896, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _895));
    uint _1032 = _263 + 9u;
    uint _1033 = _1032 + uint(cbMatDynParam._m0[0u].w);
    float _1039 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * cbInstanceData._m0[_1033].x;
    float _1040 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_1033].y;
    float _1041 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_1033].z;
    float _4041 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1045 = 1.0 - _903;
    float _1046 = _1042 * _1045;
    float _1047 = _1043 * _1045;
    float _1048 = _1044 * _1045;
    float _1053 = (_1042 + (-0.039999999105930328369140625)) * _903;
    float _1054 = (_1043 + (-0.039999999105930328369140625)) * _903;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _903;
    float _1056 = _1053 + 0.039999999105930328369140625;
    float _1058 = _1054 + 0.039999999105930328369140625;
    float _1059 = _1055 + 0.039999999105930328369140625;
    vec4 _1068 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _994, cbSceneParam._m0[86u].y * _995));
    float _1072 = ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * TEXCOORD_5.w) * _1068.x;
    float _1073 = dot(vec3(_895, _896, _897), vec3(_974, _975, _976));
    float _1076 = _1073 * 2.0;
    float _1080 = (_1076 * _895) - _974;
    float _1081 = (_1076 * _896) - _975;
    float _1082 = (_1076 * _897) - _976;
    float _1086 = abs(dot(vec3(_974, _975, _976), vec3(_895, _896, _897)));
    float _4074 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1088 = sqrt(_898);
    float _1101 = exp2((_1088 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1088 * 3.0));
    float _1107 = (1.0 - _1101) * ((_1088 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1108 = _1101 * _1088;
    float _1136 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1473;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1198 = fma(_1144, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136));
        float _1202 = fma(_1144, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136));
        float _1206 = fma(_1144, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136));
        float _1231 = _1136 + _895;
        float _1232 = _1140 + _896;
        float _1233 = _1144 + _897;
        float _1243 = fma(_1233, cbModelParam._m0[26u].z, fma(_1232, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231)) - _1198;
        float _1244 = fma(_1233, cbModelParam._m0[27u].z, fma(_1232, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231)) - _1202;
        float _1245 = fma(_1233, cbModelParam._m0[28u].z, fma(_1232, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231)) - _1206;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1262 = ((_1249 * _1243) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1198 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1244) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1202 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1249 * _1245) / cbModelParam._m0[34u].z) + ((((((_1206 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1301 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1267.x + (-0.5));
        float _1303 = _1301 * (_1267.y + (-0.5));
        float _1304 = _1301 * (_1267.z + (-0.5));
        float _1311 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1274.x + (-0.5));
        float _1313 = _1311 * (_1274.y + (-0.5));
        float _1314 = _1311 * (_1274.z + (-0.5));
        float _1321 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1281.x + (-0.5));
        float _1323 = _1321 * (_1281.y + (-0.5));
        float _1324 = _1321 * (_1281.z + (-0.5));
        float _1331 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1288.x + (-0.5));
        float _1333 = _1331 * (_1288.y + (-0.5));
        float _1334 = _1331 * (_1288.z + (-0.5));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = _1302 * 0.5;
        float _1339 = _1312 * 0.5;
        float _1340 = _1322 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1355 = (dot(vec3(_895, _896, _897), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1365 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4122 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1367 + 1.0))) + _1372) * _1335;
        float _1382 = _1303 * 0.5;
        float _1383 = _1313 * 0.5;
        float _1384 = _1323 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_895, _896, _897), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4155 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1409 + 1.0))) + _1414) * _1336;
        float _1424 = _1304 * 0.5;
        float _1425 = _1314 * 0.5;
        float _1426 = _1324 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_895, _896, _897), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4188 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1451 + 1.0))) + _1456) * _1337;
        _1473 = _1304;
        _1475 = _1303;
        _1476 = _1302;
        _1477 = _1314;
        _1478 = _1313;
        _1479 = _1312;
        _1480 = _1324;
        _1481 = _1323;
        _1482 = _1322;
        _1483 = _1337;
        _1484 = _1336;
        _1485 = _1335;
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
    }
    else
    {
        _1473 = _1474;
        _1475 = _1474;
        _1476 = _1474;
        _1477 = _1474;
        _1478 = _1474;
        _1479 = _1474;
        _1480 = _1474;
        _1481 = _1474;
        _1482 = _1474;
        _1483 = _1474;
        _1484 = _1474;
        _1485 = _1474;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1515 = fma(_1144, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136));
        float _1519 = fma(_1144, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136));
        float _1523 = fma(_1144, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136));
        float _1546 = _1136 + _895;
        float _1547 = _1140 + _896;
        float _1548 = _1144 + _897;
        float _1558 = fma(_1548, cbModelParam._m0[30u].z, fma(_1547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1546)) - _1515;
        float _1559 = fma(_1548, cbModelParam._m0[31u].z, fma(_1547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1546)) - _1519;
        float _1560 = fma(_1548, cbModelParam._m0[32u].z, fma(_1547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1546)) - _1523;
        float _1564 = inversesqrt(dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560)));
        float _1577 = ((_1564 * _1558) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1515 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1578 = ((_1564 * _1559) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1519 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1579 = ((_1564 * _1560) / cbModelParam._m0[35u].z) + ((((((_1523 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1581 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1577, _1578, _1579), 0.0);
        float _1614 = exp2((_1581.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1581.x + (-0.5));
        float _1616 = _1614 * (_1581.y + (-0.5));
        float _1617 = _1614 * (_1581.z + (-0.5));
        float _1624 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1588.x + (-0.5));
        float _1626 = _1624 * (_1588.y + (-0.5));
        float _1627 = _1624 * (_1588.z + (-0.5));
        float _1634 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1595.x + (-0.5));
        float _1636 = _1634 * (_1595.y + (-0.5));
        float _1637 = _1634 * (_1595.z + (-0.5));
        float _1644 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1602.x + (-0.5));
        float _1646 = _1644 * (_1602.y + (-0.5));
        float _1647 = _1644 * (_1602.z + (-0.5));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = _1615 * 0.5;
        float _1652 = _1625 * 0.5;
        float _1653 = _1635 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_895, _896, _897), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4251 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1678 + 1.0))) + _1683) * _1648;
        float _1693 = _1616 * 0.5;
        float _1694 = _1626 * 0.5;
        float _1695 = _1636 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_895, _896, _897), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4284 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1720 + 1.0))) + _1725) * _1649;
        float _1735 = _1617 * 0.5;
        float _1736 = _1627 * 0.5;
        float _1737 = _1637 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_895, _896, _897), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4317 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1762 + 1.0))) + _1767) * _1650;
        _1784 = _1617;
        _1785 = _1616;
        _1786 = _1615;
        _1787 = _1627;
        _1788 = _1626;
        _1789 = _1625;
        _1790 = _1637;
        _1791 = _1636;
        _1792 = _1635;
        _1793 = _1650;
        _1794 = _1649;
        _1795 = _1648;
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
    }
    else
    {
        _1784 = _1474;
        _1785 = _1474;
        _1786 = _1474;
        _1787 = _1474;
        _1788 = _1474;
        _1789 = _1474;
        _1790 = _1474;
        _1791 = _1474;
        _1792 = _1474;
        _1793 = _1474;
        _1794 = _1474;
        _1795 = _1474;
        _1796 = 0.0;
        _1797 = 0.0;
        _1798 = 0.0;
    }
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1486)) + _1486;
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1487)) + _1487;
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1488)) + _1488;
    float _1831 = fma(_1810, cbSceneParam._m0[89u].z, fma(_1809, cbSceneParam._m0[89u].y, _1808 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1810, cbSceneParam._m0[90u].z, fma(_1809, cbSceneParam._m0[90u].y, _1808 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1810, cbSceneParam._m0[91u].z, fma(_1809, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1808));
    float _1852 = _1080 * 0.5;
    float _1853 = _1081 * 0.5;
    float _1854 = _1082 * 0.5;
    float _1855 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1858 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1861 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1895;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1868 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1473, _1477, _1480, _1483));
        float _1872 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1876 = dot(vec4(_1852, _1853, _1854, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1883 = dot(vec4(cbModelParam._m0[39u]), vec4(_1852, _1853, _1854, 1.0));
        _1895 = dot(vec3(isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1883) ? 0.0 : (isnan(0.0) ? _1883 : max(0.0, _1883))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1895 = 1.0;
    }
    float _1906;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1897 = dot(vec4(cbModelParam._m0[40u]), vec4(_1852, _1853, _1854, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1897) ? 0.0 : (isnan(0.0) ? _1897 : max(0.0, _1897))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1910 = (_1906 * cbModelParam._m0[1u].x) + (_1895 * (1.0 - cbModelParam._m0[1u].x));
    float _1920 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _898);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1920 : min(cbModelParam._m0[25u].z, _1920));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1969 = fma(_1144, cbModelParam._m0[13u].z, fma(_1140, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136)) + cbModelParam._m0[13u].w;
        float _1973 = fma(_1144, cbModelParam._m0[14u].z, fma(_1140, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136)) + cbModelParam._m0[14u].w;
        float _1977 = fma(_1144, cbModelParam._m0[15u].z, fma(_1140, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136)) + cbModelParam._m0[15u].w;
        float _1980 = fma(_1082, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1080));
        float _1983 = fma(_1082, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1080));
        float _1986 = fma(_1082, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1080));
        float _2014;
        if (_1980 > 0.0)
        {
            _2014 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2014 = frontier_phi_17_15_ladder;
        }
        float _2217;
        if (_1983 > 0.0)
        {
            _2217 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2217 = frontier_phi_26_22_ladder;
        }
        float _2471;
        if (_1986 > 0.0)
        {
            _2471 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2471 = frontier_phi_38_33_ladder;
        }
        float _2473 = isnan(_2217) ? _2014 : (isnan(_2014) ? _2217 : min(_2014, _2217));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1980) + _1969;
        float _2479 = (_2474 * _1983) + _1973;
        float _2480 = (_2474 * _1986) + _1977;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2481;
        float _2485 = _2481 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 > _2485) || ((_2479 < _2483) || ((_2478 < _2483) || (_2478 > _2485))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2480, cbModelParam._m0[9u].z, fma(_2479, cbModelParam._m0[9u].y, _2478 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2480, cbModelParam._m0[10u].z, fma(_2479, cbModelParam._m0[10u].y, _2478 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2480, cbModelParam._m0[11u].z, fma(_2479, cbModelParam._m0[11u].y, _2478 * cbModelParam._m0[11u].x))), _1921);
            frontier_phi_16_38_ladder = _2608.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2608.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2608.x * cbModelParam._m0[1u].y;
        }
        _2002 = frontier_phi_16_38_ladder_2;
        _2004 = frontier_phi_16_38_ladder_1;
        _2006 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1080, _1081, _1082), _1921);
        _2002 = _1990.x * cbModelParam._m0[1u].y;
        _2004 = _1990.y * cbModelParam._m0[1u].y;
        _2006 = _1990.z * cbModelParam._m0[1u].y;
    }
    float _2010 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _898);
    float _2011 = isnan(_2010) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2010 : min(cbModelParam._m0[25u].w, _2010));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2065 = fma(_1144, cbModelParam._m0[21u].z, fma(_1140, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136)) + cbModelParam._m0[21u].w;
        float _2069 = fma(_1144, cbModelParam._m0[22u].z, fma(_1140, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136)) + cbModelParam._m0[22u].w;
        float _2073 = fma(_1144, cbModelParam._m0[23u].z, fma(_1140, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136)) + cbModelParam._m0[23u].w;
        float _2076 = fma(_1082, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1080));
        float _2079 = fma(_1082, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1080));
        float _2082 = fma(_1082, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1080));
        float _2222;
        if (_2076 > 0.0)
        {
            _2222 = abs((1.0 - _2065) / _2076);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2065 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2222 = frontier_phi_28_24_ladder;
        }
        float _2498;
        if (_2079 > 0.0)
        {
            _2498 = abs((1.0 - _2069) / _2079);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2069 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2498 = frontier_phi_40_35_ladder;
        }
        float _2711;
        if (_2082 > 0.0)
        {
            _2711 = abs((1.0 - _2073) / _2082);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2073 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2711 = frontier_phi_49_46_ladder;
        }
        float _2713 = isnan(_2498) ? _2222 : (isnan(_2222) ? _2498 : min(_2222, _2498));
        float _2714 = isnan(_2711) ? _2713 : (isnan(_2713) ? _2711 : min(_2713, _2711));
        float _2718 = (_2714 * _2076) + _2065;
        float _2719 = (_2714 * _2079) + _2069;
        float _2720 = (_2714 * _2082) + _2073;
        float _2721 = _2714 * 9.9999997473787516355514526367188e-05;
        float _2722 = (-1.0) - _2721;
        float _2724 = _2721 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2720 > _2724) || ((_2720 < _2722) || ((_2719 > _2724) || ((_2719 < _2722) || ((_2718 < _2722) || (_2718 > _2724))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2720, cbModelParam._m0[17u].z, fma(_2719, cbModelParam._m0[17u].y, _2718 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2720, cbModelParam._m0[18u].z, fma(_2719, cbModelParam._m0[18u].y, _2718 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2720, cbModelParam._m0[19u].z, fma(_2719, cbModelParam._m0[19u].y, _2718 * cbModelParam._m0[19u].x))), _2011);
            frontier_phi_25_49_ladder = _2919.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2919.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2919.x * cbModelParam._m0[1u].z;
        }
        _2101 = frontier_phi_25_49_ladder_2;
        _2103 = frontier_phi_25_49_ladder_1;
        _2105 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2085 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1080, _1081, _1082), _2011);
        _2101 = _2085.x * cbModelParam._m0[1u].z;
        _2103 = _2085.y * cbModelParam._m0[1u].z;
        _2105 = _2085.z * cbModelParam._m0[1u].z;
    }
    float _2118 = (((_1107 * _1056) + _1108) * _1072) * ((cbModelParam._m0[1u].w * (_2101 - _2002)) + _2002);
    float _2120 = (((_1107 * _1058) + _1108) * _1072) * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2122 = (((_1107 * _1059) + _1108) * _1072) * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2125 = fma(_2122, cbSceneParam._m0[89u].z, fma(_2120, cbSceneParam._m0[89u].y, _2118 * cbSceneParam._m0[89u].x));
    float _2128 = fma(_2122, cbSceneParam._m0[90u].z, fma(_2120, cbSceneParam._m0[90u].y, _2118 * cbSceneParam._m0[90u].x));
    float _2131 = fma(_2122, cbSceneParam._m0[91u].z, fma(_2120, cbSceneParam._m0[91u].y, _2118 * cbSceneParam._m0[91u].x));
    uvec4 _2141 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2143 = _2141.x * 14u;
    uint _2144 = _2143 + 13u;
    float _2151 = _1072 + (-1.0);
    float _2156 = (cbLight._m0[_2144].x * _2151) + 1.0;
    float _2157 = (cbLight._m0[_2144].y * _2151) + 1.0;
    float _2158 = (cbLight._m0[_2144].z * _2151) + 1.0;
    float _2159 = (cbLight._m0[_2144].w * _2151) + 1.0;
    uint _2160 = _2143 + 5u;
    float _2166 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2170 = _2143 + 4u;
    float _2176 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2180 = _2143 | 1u;
    float _2191 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_895, _896, _897));
    float _2194 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_895, _896, _897));
    float _4453 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _4464 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2199 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2201 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2208 = ((cbLight._m0[_2160].x * _2166) * _2201) + ((cbLight._m0[_2170].x * _2176) * _2199);
    float _2209 = ((_2166 * cbLight._m0[_2160].y) * _2201) + ((_2176 * cbLight._m0[_2170].y) * _2199);
    float _2210 = ((_2166 * cbLight._m0[_2160].z) * _2201) + ((_2176 * cbLight._m0[_2170].z) * _2199);
    uvec4 _2214 = floatBitsToUint(cbLight._m0[_2143 + 12u]);
    bool _2216 = _2214.x == 0u;
    float _2227;
    float _2229;
    float _2231;
    if (_2216)
    {
        _2227 = _2208;
        _2229 = _2209;
        _2231 = _2210;
    }
    else
    {
        uint _2235 = _2143 + 6u;
        float _2251 = (dot(vec3(cbLight._m0[_2143 + 2u].xyz), vec3(_895, _896, _897)) * 0.5) + 0.5;
        float _2252 = _2251 * _2251;
        float _4475 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2253 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2254 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2227 = (((cbLight._m0[_2235].x * 0.3183098733425140380859375) * _2253) * _2254) + _2208;
        _2229 = (((cbLight._m0[_2235].y * 0.3183098733425140380859375) * _2253) * _2254) + _2209;
        _2231 = (((cbLight._m0[_2235].z * 0.3183098733425140380859375) * _2253) * _2254) + _2210;
    }
    bool _2234 = _2214.y == 0u;
    float _2272;
    float _2274;
    float _2276;
    if (_2234)
    {
        _2272 = _2227;
        _2274 = _2229;
        _2276 = _2231;
    }
    else
    {
        uint _2442 = _2143 + 7u;
        float _2458 = (dot(vec3(cbLight._m0[_2143 + 3u].xyz), vec3(_895, _896, _897)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4491 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2461 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2272 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2227;
        _2274 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2229;
        _2276 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2231;
    }
    uint _2279 = _2143 + 8u;
    float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _898) * 0.949999988079071044921875);
    float _2293 = _2292 * _2292;
    float _2294 = cbLight._m0[_2143].x + _974;
    float _2295 = cbLight._m0[_2143].y + _975;
    float _2296 = cbLight._m0[_2143].z + _976;
    float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
    float _2301 = _2300 * _2294;
    float _2302 = _2300 * _2295;
    float _2303 = _2300 * _2296;
    float _2304 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2143].xyz));
    float _4507 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _2308 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2309 = dot(vec3(_895, _896, _897), vec3(_2301, _2302, _2303));
    float _4529 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2313 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2301, _2302, _2303));
    float _4540 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = _2293 * _2293;
    float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
    float _2329 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
    float _2330 = 0.959999978542327880859375 - _1053;
    float _2332 = 0.959999978542327880859375 - _1054;
    float _2333 = 0.959999978542327880859375 - _1055;
    float _2340 = 1.0 - _2293;
    float _2351 = (0.5 / (((_2308 * ((_2307 * _2340) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2340) + _2293) * _2307))) * _2307;
    float _4551 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2353 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
    uint _2364 = _2143 + 9u;
    float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _898) * 0.949999988079071044921875);
    float _2376 = _2375 * _2375;
    float _2377 = cbLight._m0[_2180].x + _974;
    float _2378 = cbLight._m0[_2180].y + _975;
    float _2379 = cbLight._m0[_2180].z + _976;
    float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
    float _2384 = _2383 * _2377;
    float _2385 = _2383 * _2378;
    float _2386 = _2383 * _2379;
    float _2387 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2180].xyz));
    float _4562 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2391 = dot(vec3(_895, _896, _897), vec3(_2384, _2385, _2386));
    float _4573 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2395 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2384, _2385, _2386));
    float _4584 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2399 = _2376 * _2376;
    float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
    float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
    float _2417 = 1.0 - _2376;
    float _2427 = (0.5 / (((_2308 * ((_2390 * _2417) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2417) + _2376) * _2390))) * _2390;
    float _4595 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
    float _2439 = (((((_2410 * _2330) + _1056) * cbLight._m0[_2364].x) * _2429) * _2166) + (((((_2329 * _2330) + _1056) * cbLight._m0[_2279].x) * _2353) * _2176);
    float _2440 = (((((_2410 * _2332) + _1058) * cbLight._m0[_2364].y) * _2429) * _2166) + (((((_2329 * _2332) + _1058) * cbLight._m0[_2279].y) * _2353) * _2176);
    float _2441 = (((((_2410 * _2333) + _1059) * cbLight._m0[_2364].z) * _2429) * _2166) + (((((_2329 * _2333) + _1059) * cbLight._m0[_2279].z) * _2353) * _2176);
    float _2503;
    float _2505;
    float _2507;
    if (_2216)
    {
        _2503 = _2439;
        _2505 = _2440;
        _2507 = _2441;
    }
    else
    {
        uint _2509 = _2143 + 2u;
        uint _2513 = _2143 + 10u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _898) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _974;
        float _2530 = cbLight._m0[_2509].y + _975;
        float _2531 = cbLight._m0[_2509].z + _976;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2509].xyz));
        float _4606 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2543 = dot(vec3(_895, _896, _897), vec3(_2536, _2537, _2538));
        float _4617 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4628 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2308 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2569) + _2528) * _2542))) * _2542;
        float _4639 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2503 = (((((_2562 * _2330) + _1056) * cbLight._m0[_2513].x) * _2581) * _2582) + _2439;
        _2505 = (((((_2562 * _2332) + _1058) * cbLight._m0[_2513].y) * _2581) * _2582) + _2440;
        _2507 = (((((_2562 * _2333) + _1059) * cbLight._m0[_2513].z) * _2581) * _2582) + _2441;
    }
    float _2617;
    float _2619;
    float _2621;
    if (_2234)
    {
        _2617 = _2503;
        _2619 = _2505;
        _2621 = _2507;
    }
    else
    {
        uint _2628 = _2143 + 3u;
        uint _2632 = _2143 + 11u;
        float _2646 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2628].w)) * _898) * 0.949999988079071044921875);
        float _2647 = _2646 * _2646;
        float _2648 = cbLight._m0[_2628].x + _974;
        float _2649 = cbLight._m0[_2628].y + _975;
        float _2650 = cbLight._m0[_2628].z + _976;
        float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
        float _2655 = _2654 * _2648;
        float _2656 = _2654 * _2649;
        float _2657 = _2654 * _2650;
        float _2658 = dot(vec3(_895, _896, _897), vec3(cbLight._m0[_2628].xyz));
        float _4655 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2662 = dot(vec3(_895, _896, _897), vec3(_2655, _2656, _2657));
        float _4666 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2666 = dot(vec3(cbLight._m0[_2628].xyz), vec3(_2655, _2656, _2657));
        float _4677 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2670 = _2647 * _2647;
        float _2674 = ((_2665 * _2665) * (_2670 + (-1.0))) + 1.0;
        float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2688 = 1.0 - _2647;
        float _2698 = (0.5 / (((_2308 * ((_2661 * _2688) + _2647)) + 9.9999999392252902907785028219223e-09) + (((_2308 * _2688) + _2647) * _2661))) * _2661;
        float _4688 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2700 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2670 / ((_2674 * _2674) * 3.141590118408203125));
        float _2701 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
        _2617 = (((((_2681 * _2330) + _1056) * cbLight._m0[_2632].x) * _2700) * _2701) + _2503;
        _2619 = (((((_2681 * _2332) + _1058) * cbLight._m0[_2632].y) * _2700) * _2701) + _2505;
        _2621 = (((((_2681 * _2333) + _1059) * cbLight._m0[_2632].z) * _2700) * _2701) + _2507;
    }
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_2141.y == 0u)
    {
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2776;
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2776;
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2776;
        uvec4 _2791 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2792 = _2791.x;
        uint _2803 = uint((float(_2791.y) * floor(float(uint(cbSceneParam._m0[85u].y * _995) / _2792))) + floor(float(uint(cbSceneParam._m0[85u].x * _994) / _2792)));
        float _2813 = (log2(_2779 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2814 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        uint _2817 = uint(isnan(14.0) ? _2814 : (isnan(_2814) ? 14.0 : min(_2814, 14.0)));
        uvec4 _2822 = texelFetch(g_lightClusterGridBuffer, int(((_2817 << 2u) + (_2803 << 6u)) >> 2u));
        uint _2823 = _2822.x;
        uint _2824 = _2791.z;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((((1u << ((_2824 >> 4u) & 15u)) + 4294967295u) & _2823) == 0u) || ((_2824 & 240u) == 0u))
        {
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
        }
        else
        {
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            uint _3083 = 0u;
            uint _3092;
            bool _3093;
            for (;;)
            {
                _3092 = texelFetch(g_lightClassification, int((((_2817 << 5u) + (_2803 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                _3093 = _3092 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3093)
                {
                    frontier_phi_66_pred = _3077;
                    frontier_phi_66_pred_1 = _3082;
                    frontier_phi_66_pred_2 = _3081;
                    frontier_phi_66_pred_3 = _3080;
                    frontier_phi_66_pred_4 = _3079;
                    frontier_phi_66_pred_5 = _3078;
                }
                else
                {
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    uint _3228;
                    _3222 = _3077;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3092;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    for (;;)
                    {
                        uint _3232 = uint(findLSB(_3228)) + (_3083 << 5u);
                        uint _3229 = (_3228 + 4294967295u) & _3228;
                        uint _3234 = _3232 * 48u;
                        vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 3u)).x));
                        uint _3254 = (_3232 * 48u) + 4u;
                        vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 3u)).x));
                        uint _3273 = (_3232 * 48u) + 8u;
                        vec3 _3284 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x));
                        float _3288 = _3248.x - _2777;
                        float _3289 = _3248.y - _2778;
                        float _3290 = _3248.z - _2779;
                        float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                        float _3294 = inversesqrt(_3291);
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3298 = dot(vec3(_1013, _1016, _1019), vec3(_3295, _3296, _3297));
                        float _3303 = 1.0 - (_3291 * _3248.w);
                        float _4714 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3304 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3305 = sqrt(_3291) * _3267.w;
                        float _3308 = 1.39999997615814208984375 / (_3305 + 1.39999997615814208984375);
                        float _3309 = _3308 * _3308;
                        float _3312 = ((1.0 - _3309) * _3298) + _3309;
                        float _3315 = _3305 * _3305;
                        float _3319 = ((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3304) / ((_3315 * 0.699999988079071044921875) + 1.0);
                        float _3323 = (-0.0) - _2777;
                        float _3324 = (-0.0) - _2778;
                        float _3325 = (-0.0) - _2779;
                        float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                        float _3330 = _3329 * _3323;
                        float _3331 = _3329 * _3324;
                        float _3332 = _3329 * _3325;
                        float _3340 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                        float _3341 = 1.0 - _1088;
                        float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                        float _3349 = _3348 * _3348;
                        float _3350 = _3349 * _3349;
                        float _3351 = _3330 + _3295;
                        float _3352 = _3331 + _3296;
                        float _3353 = _3332 + _3297;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3361 = dot(vec3(_1013, _1016, _1019), vec3(_3330, _3331, _3332));
                        float _4730 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3364 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3365 = dot(vec3(_1013, _1016, _1019), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                        float _4741 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                        float _3373 = _3308 * _3349;
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3298) + _3374;
                        float _4752 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3379 = 1.0 - _3349;
                        float _3389 = (0.5 / (((_3378 * ((_3364 * _3379) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3349) * _3364))) * _3378;
                        float _4763 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3400 = (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3372 * _3372) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125))) * _3304;
                        _3152 = (_3319 * _3267.x) + _3225;
                        _3153 = (_3319 * _3267.y) + _3226;
                        _3154 = (_3319 * _3267.z) + _3227;
                        _3149 = (_3400 * _3284.x) + _3222;
                        _3150 = (_3400 * _3284.y) + _3223;
                        _3151 = (_3400 * _3284.z) + _3224;
                        if (_3229 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3222 = _3149;
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3229;
                        }
                    }
                    frontier_phi_66_pred = _3149;
                    frontier_phi_66_pred_1 = _3154;
                    frontier_phi_66_pred_2 = _3153;
                    frontier_phi_66_pred_3 = _3152;
                    frontier_phi_66_pred_4 = _3151;
                    frontier_phi_66_pred_5 = _3150;
                }
                _2925 = frontier_phi_66_pred;
                _2935 = frontier_phi_66_pred_1;
                _2933 = frontier_phi_66_pred_2;
                _2931 = frontier_phi_66_pred_3;
                _2929 = frontier_phi_66_pred_4;
                _2927 = frontier_phi_66_pred_5;
                uint _3084 = _3083 + 1u;
                if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3077 = _2925;
                    _3078 = _2927;
                    _3079 = _2929;
                    _3080 = _2931;
                    _3081 = _2933;
                    _3082 = _2935;
                    _3083 = _3084;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
        }
        uvec4 _2938 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2939 = _2938.z;
        uint _2941 = (_2939 >> 8u) & 15u;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        if (((4294967295u << _2941) & _2823) == 0u)
        {
            _3045 = _2924;
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
        }
        else
        {
            float _3070 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
            float _3071 = _3070 * _2777;
            float _3072 = _3070 * _2778;
            float _3073 = _3070 * _2779;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2941 < ((_2939 >> 12u) & 15u))
            {
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3205 = _2924;
                float _3206 = _2926;
                float _3207 = _2928;
                float _3208 = _2930;
                float _3209 = _2932;
                float _3210 = _2934;
                uint _3211 = _2941;
                uint _3220;
                bool _3221;
                for (;;)
                {
                    _3220 = texelFetch(g_lightClassification, int((((_2817 << 5u) + (_2803 << 9u)) + (_3211 << 2u)) >> 2u)).x;
                    _3221 = _3220 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3221)
                    {
                        frontier_phi_77_pred = _3210;
                        frontier_phi_77_pred_1 = _3209;
                        frontier_phi_77_pred_2 = _3208;
                        frontier_phi_77_pred_3 = _3207;
                        frontier_phi_77_pred_4 = _3206;
                        frontier_phi_77_pred_5 = _3205;
                    }
                    else
                    {
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3427 = _3205;
                        float _3428 = _3206;
                        float _3429 = _3207;
                        float _3430 = _3208;
                        float _3431 = _3209;
                        float _3432 = _3210;
                        uint _3433 = _3220;
                        uint _3434;
                        vec4 _3459;
                        float _3460;
                        vec4 _3475;
                        vec3 _3487;
                        vec4 _3502;
                        vec4 _3517;
                        float _3563;
                        bool _3564;
                        for (;;)
                        {
                            uint _3444 = ((_3211 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3433));
                            _3434 = (_3433 + 4294967295u) & _3433;
                            uint _3446 = _3444 * 40u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3460 = _3459.w;
                            uint _3462 = (_3444 * 40u) + 4u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3444 * 40u) + 8u;
                            _3487 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x));
                            uint _3489 = (_3444 * 40u) + 16u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3504 = (_3444 * 40u) + 20u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3519 = (_3444 * 40u) + 24u;
                            vec4 _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3538 = (_3444 * 40u) + 28u;
                            vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            _3563 = fma(_2779, _3551.z, fma(_2778, _3551.y, _3551.x * _2777)) + _3551.w;
                            _3564 = !((fma(_2779, _3532.z, fma(_2778, _3532.y, _3532.x * _2777)) + _3532.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3564)
                            {
                                float _3591 = _3459.x - _2777;
                                float _3592 = _3459.y - _2778;
                                float _3593 = _3459.z - _2779;
                                float _3594 = dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593));
                                float _3597 = inversesqrt(_3594);
                                float _3598 = _3597 * _3591;
                                float _3599 = _3597 * _3592;
                                float _3600 = _3597 * _3593;
                                float _3604 = 1.0 - (_3594 / (_3460 * _3460));
                                float _4774 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3609 = sqrt(_3594) * _3475.w;
                                float _3611 = 1.39999997615814208984375 / (_3609 + 1.39999997615814208984375);
                                float _3612 = _3611 * _3611;
                                float _3615 = ((1.0 - _3612) * dot(vec3(_3598, _3599, _3600), vec3(_1013, _1016, _1019))) + _3612;
                                float _3618 = _3609 * _3609;
                                float _3622 = (fma(_2779, _3502.z, fma(_2778, _3502.y, _3502.x * _2777)) + _3502.w) / _3563;
                                float _3623 = (fma(_2779, _3517.z, fma(_2778, _3517.y, _3517.x * _2777)) + _3517.w) / _3563;
                                float _3627 = 1.0 - dot(vec2(_3622, _3623), vec2(_3622, _3623));
                                float _4790 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3629 = _3628 * (((isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0))) * _3605) / ((_3618 * 0.699999988079071044921875) + 1.0));
                                float _3641 = exp2(log2(1.0 / ((_3618 * 3.5) + 5.0)) * 0.25);
                                float _3642 = 1.0 - _1088;
                                float _3649 = sqrt(1.0 - ((1.0 - (_3642 * _3642)) * (1.0 - (_3641 * _3641))));
                                float _3650 = _3649 * _3649;
                                float _3651 = _3650 * _3650;
                                float _3652 = _3598 - _3071;
                                float _3653 = _3599 - _3072;
                                float _3654 = _3600 - _3073;
                                float _3658 = inversesqrt(dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654)));
                                float _3662 = dot(vec3(_1013, _1016, _1019), vec3((-0.0) - _3071, (-0.0) - _3072, (-0.0) - _3073));
                                float _4801 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3665 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3666 = dot(vec3(_1013, _1016, _1019), vec3(_3658 * _3652, _3658 * _3653, _3658 * _3654));
                                float _4812 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3669 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3673 = ((_3669 * _3669) * (_3651 + (-1.0))) + 1.0;
                                float _3674 = _3611 * _3650;
                                float _3675 = _3674 * _3674;
                                float _3681 = ((1.0 - _3675) * dot(vec3(_1013, _1016, _1019), vec3(_3598, _3599, _3600))) + _3675;
                                float _4823 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3683 = 1.0 - _3650;
                                float _3693 = (0.5 / (((_3682 * ((_3665 * _3683) + _3650)) + 9.9999999392252902907785028219223e-09) + (((_3682 * _3683) + _3650) * _3665))) * _3682;
                                float _4834 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3703 = (_3628 * _3605) * (((_3651 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3673 * _3673) * ((_3618 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3629 * _3475.y;
                                frontier_phi_83_pred_1 = _3629 * _3475.x;
                                frontier_phi_83_pred_2 = _3703 * _3487.z;
                                frontier_phi_83_pred_3 = _3703 * _3487.y;
                                frontier_phi_83_pred_4 = _3703 * _3487.x;
                                frontier_phi_83_pred_5 = _3629 * _3475.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3711 = frontier_phi_83_pred;
                            _3710 = frontier_phi_83_pred_1;
                            _3709 = frontier_phi_83_pred_2;
                            _3708 = frontier_phi_83_pred_3;
                            _3707 = frontier_phi_83_pred_4;
                            _3712 = frontier_phi_83_pred_5;
                            _3417 = _3710 + _3430;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            _3414 = _3707 + _3427;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            if (_3434 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3434;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3419;
                        frontier_phi_77_pred_1 = _3418;
                        frontier_phi_77_pred_2 = _3417;
                        frontier_phi_77_pred_3 = _3416;
                        frontier_phi_77_pred_4 = _3415;
                        frontier_phi_77_pred_5 = _3414;
                    }
                    _3056 = frontier_phi_77_pred;
                    _3054 = frontier_phi_77_pred_1;
                    _3052 = frontier_phi_77_pred_2;
                    _3050 = frontier_phi_77_pred_3;
                    _3048 = frontier_phi_77_pred_4;
                    _3046 = frontier_phi_77_pred_5;
                    uint _3212 = _3211 + 1u;
                    if (_3212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3205 = _3046;
                        _3206 = _3048;
                        _3207 = _3050;
                        _3208 = _3052;
                        _3209 = _3054;
                        _3210 = _3056;
                        _3211 = _3212;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3050;
                frontier_phi_58_59_ladder_1 = _3056;
                frontier_phi_58_59_ladder_2 = _3054;
                frontier_phi_58_59_ladder_3 = _3052;
                frontier_phi_58_59_ladder_4 = _3048;
                frontier_phi_58_59_ladder_5 = _3046;
            }
            else
            {
                frontier_phi_58_59_ladder = _2928;
                frontier_phi_58_59_ladder_1 = _2934;
                frontier_phi_58_59_ladder_2 = _2932;
                frontier_phi_58_59_ladder_3 = _2930;
                frontier_phi_58_59_ladder_4 = _2926;
                frontier_phi_58_59_ladder_5 = _2924;
            }
            _3045 = frontier_phi_58_59_ladder_5;
            _3047 = frontier_phi_58_59_ladder_4;
            _3049 = frontier_phi_58_59_ladder;
            _3051 = frontier_phi_58_59_ladder_3;
            _3053 = frontier_phi_58_59_ladder_2;
            _3055 = frontier_phi_58_59_ladder_1;
        }
        float _3060 = isnan(1.0) ? _1072 : (isnan(_1072) ? 1.0 : min(_1072, 1.0));
        _2836 = (_3060 * _3051) + _2272;
        _2838 = (_3060 * _3053) + _2274;
        _2840 = (_3060 * _3055) + _2276;
        _2842 = ((_3045 * _1056) * _3060) + _2617;
        _2844 = ((_3047 * _1058) * _3060) + _2619;
        _2846 = ((_3049 * _1059) * _3060) + _2621;
    }
    else
    {
        _2836 = _2272;
        _2838 = _2274;
        _2840 = _2276;
        _2842 = _2617;
        _2844 = _2619;
        _2846 = _2621;
    }
    float _4850 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _4861 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _4872 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _2863 = ((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2836 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1072))) + ((_2842 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1910)) * cbPerFrame._m0[3u].x);
    float _2864 = ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2838 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1072))) + ((_2844 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1910)) * cbPerFrame._m0[3u].x);
    float _2865 = ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2840 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1072))) + ((_2846 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1910)) * cbPerFrame._m0[3u].x);
    uint _2866 = _263 + 6u;
    float _2874 = _994 / cbSceneParam._m0[86u].x;
    float _2875 = _995 / cbSceneParam._m0[86u].y;
    vec4 _2889 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2874, _2875, (log2((isnan(cbSceneParam._m0[77u].w) ? _917 : (isnan(_917) ? cbSceneParam._m0[77u].w : min(_917, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2891 = _2889.x;
    float _2892 = _2889.y;
    float _2893 = _2889.z;
    float _2894 = _2889.w;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    if (_917 > cbSceneParam._m0[78u].w)
    {
        float _2949 = isnan(_917) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _917 : min(cbSceneParam._m0[80u].w, _917));
        float _2950 = _2949 / _917;
        float _2961 = _2950 * _967;
        float _2962 = _968 * _2950;
        float _2963 = (-0.0) - _2962;
        float _2965 = _2950 * _969;
        float _2967 = (cbSceneParam._m0[77u].w * _2963) / _2949;
        float _2968 = _2967 + cbSceneParam._m0[79u].w;
        float _2969 = cbSceneParam._m0[79u].w - _2962;
        float _2975 = sqrt(((_2961 * _2961) + (_2962 * _2962)) + (_2965 * _2965));
        float _2978 = (1.0 - (cbSceneParam._m0[77u].w / _2949)) * _2975;
        float _2983 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2985 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3162;
        if (abs((_2963 - _2967) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3162 = ((((_2968 > 0.0) ? exp2(_2983 * _2968) : (2.0 - exp2(_2985 * _2968))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2978;
        }
        else
        {
            float _3106 = 1.0 / cbSceneParam._m0[80u].x;
            float _3107 = isnan(_2969) ? _2968 : (isnan(_2968) ? _2969 : max(_2968, _2969));
            float _3108 = isnan(_2969) ? _2968 : (isnan(_2968) ? _2969 : min(_2968, _2969));
            float _3117 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : min(_3107, 0.0));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            _3162 = ((abs(_2975 / _2963) * cbSceneParam._m0[80u].y) * ((((_3117 - _3118) * 2.0) - ((exp2(_2983 * (isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0)))) - exp2(_2983 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))))) * _3106)) - ((exp2(_2985 * _3117) - exp2(_2985 * _3118)) * _3106))) + (_2978 * cbSceneParam._m0[80u].z);
        }
        vec4 _3164 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2874, _2875, 1.0), 0.0);
        float _3173 = exp2((_3162 * (-1.44269502162933349609375)) * (1.0 - _3164.w));
        float _3174 = log2(_3173);
        float _3190 = log2(_2894);
        _2987 = (exp2(_3190 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3174 * cbSceneParam._m0[78u].x)) * _3164.x) / cbSceneParam._m0[78u].x)) + _2891;
        _2989 = (exp2(_3190 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3174 * cbSceneParam._m0[78u].y)) * _3164.y) / cbSceneParam._m0[78u].y)) + _2892;
        _2991 = (exp2(_3190 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3174 * cbSceneParam._m0[78u].z)) * _3164.z) / cbSceneParam._m0[78u].z)) + _2893;
        _2993 = _3173 * _2894;
    }
    else
    {
        _2987 = _2891;
        _2989 = _2892;
        _2991 = _2893;
        _2993 = _2894;
    }
    bool _3200;
    vec4 _3003;
    vec4 _3025;
    float _3027;
    float _3031;
    float _3032;
    float _3033;
    float _3034;
    bool _3044;
    for (;;)
    {
        _3003 = cbMatDynParam._m0[0u];
        float _3005 = roundEven(_3003.y);
        bool _3006 = _3005 == 3.0;
        float _3007 = log2(_2993);
        float _3014 = exp2(_3007 * cbSceneParam._m0[78u].x) * _2863;
        float _3015 = exp2(_3007 * cbSceneParam._m0[78u].y) * _2864;
        float _3016 = exp2(_3007 * cbSceneParam._m0[78u].z) * _2865;
        float _3023 = _983 + (-0.5);
        _3025 = cbMtdParam._m0[1u];
        _3027 = _3025.y * _3023;
        float _3030 = (_3005 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3031 = _3030 * (_3006 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2987)));
        _3032 = _3030 * (_3006 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2989)));
        _3033 = _3030 * (_3006 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2991)));
        _3034 = _3023 * 0.999000012874603271484375;
        _3044 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3044)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3034) < 0.5)
            {
                _3200 = true;
                break;
            }
        }
        uint _3141 = _1032 + uint(_3003.w);
        if ((cbInstanceData._m0[_3141].w < 1.0) && ((cbInstanceData._m0[_3141].w + _3034) < 0.5))
        {
            _3200 = true;
            break;
        }
        if ((_3027 + 1.0) < _3025.x)
        {
            _3200 = true;
            break;
        }
        _3200 = false;
        break;
    }
    float _3405;
    if (_3200)
    {
        discard_state = true;
        _3405 = 0.0;
    }
    else
    {
        _3405 = cbInstanceData._m0[_2866].w;
    }
    SV_Target.x = _3031;
    SV_Target.y = _3032;
    SV_Target.z = _3033;
    SV_Target.w = _3405;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2866].w;
    discard_exit();
}


