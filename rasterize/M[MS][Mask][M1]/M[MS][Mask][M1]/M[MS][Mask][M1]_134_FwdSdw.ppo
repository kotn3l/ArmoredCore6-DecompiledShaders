#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1586;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4192 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4203 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4214 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    uint _292 = uint(roundEven(NORMAL.w)) * 13u;
    uint _297 = _292 + 1u;
    uint _301 = _292 + 2u;
    float _310 = sqrt(((cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x)) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x));
    float _311 = _310 * TEXCOORD.z;
    float _312 = _310 * TEXCOORD.w;
    vec4 _325 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _311) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _312) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _379 = _374.x * cbMtdParam._m0[11u].x;
    float _380 = _374.y * cbMtdParam._m0[11u].y;
    float _381 = _374.z * cbMtdParam._m0[11u].z;
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _311) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _312) + cbTextureTilingScale._m0[5u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _419.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4225 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _493 = (_486 * ((_400.x * cbMtdParam._m0[12u].x) - _379)) + _379;
    float _494 = (_486 * ((_400.y * cbMtdParam._m0[12u].y) - _380)) + _380;
    float _495 = (_486 * ((_400.z * cbMtdParam._m0[12u].z) - _381)) + _381;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _311) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _312) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _419.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4236 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _566 = (_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493;
    float _567 = (_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494;
    float _568 = (_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _311) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _312) + cbTextureTilingScale._m0[24u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _606 = _604.x;
    float _616 = dot(vec4(_606, _604.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _628 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _419.z) * 2.0) - ((((_606 - _616) * cbMtdParam._m0[23u].w) + _616) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4247 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _639 = (_348.x * cbMtdParam._m0[9u].x) * ((_629 * ((_587.x * cbMtdParam._m0[14u].x) - _566)) + _566);
    float _640 = (_348.y * cbMtdParam._m0[9u].y) * ((_629 * ((_587.y * cbMtdParam._m0[14u].y) - _567)) + _567);
    float _641 = (_348.z * cbMtdParam._m0[9u].z) * ((_629 * ((_587.z * cbMtdParam._m0[14u].z) - _568)) + _568);
    float _645 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _325.x) * _639;
    float _648 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _325.y) * _640;
    float _651 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _325.z) * _641;
    float _659 = (((_639 - _645) * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) + _645) * 4.55000019073486328125;
    float _661 = (((_640 - _648) * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) + _648) * 4.55000019073486328125;
    float _663 = (((_641 - _651) * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) + _651) * 4.55000019073486328125;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _311) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _312) + cbTextureTilingScale._m0[14u].w));
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _311) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _312) + cbTextureTilingScale._m0[20u].w));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _311) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _312) + cbTextureTilingScale._m0[4u].w));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _742 = _740.x;
    float _743 = _740.y;
    float _744 = _740.z;
    float _751 = ((_723.x - _742) * _486) + _742;
    float _752 = ((_723.y - _743) * _486) + _743;
    float _753 = ((_723.z - _744) * _486) + _744;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _311) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _312) + cbTextureTilingScale._m0[2u].w));
    float _776 = ((_765.x - _751) * _559) + _751;
    float _777 = ((_765.y - _752) * _559) + _752;
    float _778 = ((_765.z - _753) * _559) + _753;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _311) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _312) + cbTextureTilingScale._m0[23u].w));
    float _803 = ((_790.z - _778) * _629) + _778;
    float _806 = ((((_790.x - _776) * _629) + _776) * 2.0) + (-1.0);
    float _807 = ((((_790.y - _777) * _629) + _777) * 2.0) + (-1.0);
    float _808 = dot(vec2(_806, _807), vec2(_806, _807));
    float _4258 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _813 = sqrt(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))));
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _852 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _311) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _312) + cbTextureTilingScale._m0[11u].w));
    float _854 = _852.x;
    float _855 = 1.0 - _854;
    float _870 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_854 - _855) * cbMtdParam._m0[24u].z) + _855) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4269 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _871 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _878 = (_871 * ((_681.x * cbMtdParam._m0[18u].x) - _659)) + _659;
    float _879 = (_871 * ((_681.y * cbMtdParam._m0[18u].y) - _661)) + _661;
    float _880 = (_871 * ((_681.z * cbMtdParam._m0[18u].z) - _663)) + _663;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _908 = _906.x;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _311) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _312) + cbTextureTilingScale._m0[9u].w)).x - _908) * _486) + _908;
    float _942 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _311) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _312) + cbTextureTilingScale._m0[21u].w)).x - _925) * _559) + _925;
    float _960 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _311) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _312) + cbTextureTilingScale._m0[10u].w)).x - _942) * _629) + _942;
    float _964 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _960) * cbMtdParam._m0[19u].z) + _960;
    float _966 = _964 - (_964 * _871);
    float _971 = (((_700.z - _803) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _803;
    float _975 = ((_827.z - _971) * cbMtdParam._m0[19u].w) + _971;
    vec4 _988 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _311) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _312) + cbTextureTilingScale._m0[15u].w));
    float _995 = (_988.x * 2.0) + (-1.0);
    float _996 = (_988.y * 2.0) + (-1.0);
    float _997 = dot(vec2(_995, _996), vec2(_995, _996));
    float _4280 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1005 = (_871 * (_988.z - _975)) + _975;
    float _1014 = (_806 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_700.x * 2.0) + (-1.0)))) + (((_827.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1015 = (_807 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_700.y * 2.0) + (-1.0)))) + (((_827.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1027 = (((_995 - _1014) + (cbMtdParam._m0[21u].x * _1014)) * _871) + _1014;
    float _1028 = (((_996 - _1015) + (cbMtdParam._m0[21u].x * _1015)) * _871) + _1015;
    float _1029 = (_871 * (sqrt(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) - _813)) + _813;
    float _1033 = cbMtdParam._m0[22u].x + _827.w;
    float _1036 = fma(_1029, _258 * NORMAL.x, fma(_1028, _265 * TANGENT.x, (_251 * _243) * _1027));
    float _1039 = fma(_1029, _258 * NORMAL.y, fma(_1028, _265 * TANGENT.y, (_251 * _244) * _1027));
    float _1042 = fma(_1029, _258 * NORMAL.z, fma(_1028, _265 * TANGENT.z, (_251 * _245) * _1027));
    float _1046 = inversesqrt(dot(vec3(_1036, _1039, _1042), vec3(_1036, _1039, _1042)));
    float _1047 = _1046 * _1036;
    float _1048 = _1046 * _1039;
    float _1049 = _1046 * _1042;
    float _4291 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _1050 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _4313 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4324 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4335 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4346 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _1055 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _1069 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1119 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1109);
    float _1120 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1109);
    float _1121 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1109);
    float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
    float _1126 = _1119 * _1125;
    float _1127 = _1120 * _1125;
    float _1128 = _1121 * _1125;
    float _1134 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1135 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1153 = fma(_1049, cbSceneParam._m0[5u].z, fma(_1048, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1047));
    float _1156 = fma(_1049, cbSceneParam._m0[6u].z, fma(_1048, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1047));
    float _1159 = fma(_1049, cbSceneParam._m0[7u].z, fma(_1048, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1047));
    uint _1173 = (_292 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1179 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * cbInstanceData._m0[_1173].x;
    float _1180 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * cbInstanceData._m0[_1173].y;
    float _1181 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * cbInstanceData._m0[_1173].z;
    float _4357 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1182 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _4368 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _1183 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _4379 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1184 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _1185 = 1.0 - _1055;
    float _1186 = _1182 * _1185;
    float _1187 = _1183 * _1185;
    float _1188 = _1184 * _1185;
    float _1193 = (_1182 + (-0.039999999105930328369140625)) * _1055;
    float _1194 = (_1183 + (-0.039999999105930328369140625)) * _1055;
    float _1195 = (_1184 + (-0.039999999105930328369140625)) * _1055;
    float _1196 = _1193 + 0.039999999105930328369140625;
    float _1198 = _1194 + 0.039999999105930328369140625;
    float _1199 = _1195 + 0.039999999105930328369140625;
    vec4 _1208 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1134, cbSceneParam._m0[86u].y * _1135));
    float _1212 = ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * TEXCOORD_5.w) * _1208.x;
    float _1213 = dot(vec3(_1047, _1048, _1049), vec3(_1126, _1127, _1128));
    float _1216 = _1213 * 2.0;
    float _1220 = (_1216 * _1047) - _1126;
    float _1221 = (_1216 * _1048) - _1127;
    float _1222 = (_1216 * _1049) - _1128;
    float _1226 = abs(dot(vec3(_1126, _1127, _1128), vec3(_1047, _1048, _1049)));
    float _4390 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _1228 = sqrt(_1050);
    float _1241 = exp2((_1228 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1228 * 3.0));
    float _1247 = (1.0 - _1241) * ((_1228 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1248 = _1241 * _1228;
    float _1276 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1280 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1284 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1585;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1310 = fma(_1284, cbModelParam._m0[26u].z, fma(_1280, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1276));
        float _1314 = fma(_1284, cbModelParam._m0[27u].z, fma(_1280, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1276));
        float _1318 = fma(_1284, cbModelParam._m0[28u].z, fma(_1280, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1276));
        float _1343 = _1276 + _1047;
        float _1344 = _1280 + _1048;
        float _1345 = _1284 + _1049;
        float _1355 = fma(_1345, cbModelParam._m0[26u].z, fma(_1344, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1343)) - _1310;
        float _1356 = fma(_1345, cbModelParam._m0[27u].z, fma(_1344, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1343)) - _1314;
        float _1357 = fma(_1345, cbModelParam._m0[28u].z, fma(_1344, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1343)) - _1318;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1310 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1314 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[34u].z) + ((((((_1318 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1413 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1379.x + (-0.5));
        float _1415 = _1413 * (_1379.y + (-0.5));
        float _1416 = _1413 * (_1379.z + (-0.5));
        float _1423 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1386.x + (-0.5));
        float _1425 = _1423 * (_1386.y + (-0.5));
        float _1426 = _1423 * (_1386.z + (-0.5));
        float _1433 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1393.x + (-0.5));
        float _1435 = _1433 * (_1393.y + (-0.5));
        float _1436 = _1433 * (_1393.z + (-0.5));
        float _1443 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1400.x + (-0.5));
        float _1445 = _1443 * (_1400.y + (-0.5));
        float _1446 = _1443 * (_1400.z + (-0.5));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = _1414 * 0.5;
        float _1451 = _1424 * 0.5;
        float _1452 = _1434 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1467 = (dot(vec3(_1047, _1048, _1049), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1477 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4438 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1479 + 1.0))) + _1484) * _1447;
        float _1494 = _1415 * 0.5;
        float _1495 = _1425 * 0.5;
        float _1496 = _1435 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_1047, _1048, _1049), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1448 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4471 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1521 + 1.0))) + _1526) * _1448;
        float _1536 = _1416 * 0.5;
        float _1537 = _1426 * 0.5;
        float _1538 = _1436 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_1047, _1048, _1049), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4504 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1563 + 1.0))) + _1568) * _1449;
        _1585 = _1416;
        _1587 = _1415;
        _1588 = _1414;
        _1589 = _1426;
        _1590 = _1425;
        _1591 = _1424;
        _1592 = _1436;
        _1593 = _1435;
        _1594 = _1434;
        _1595 = _1449;
        _1596 = _1448;
        _1597 = _1447;
        _1598 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1599 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1600 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1586;
        _1587 = _1586;
        _1588 = _1586;
        _1589 = _1586;
        _1590 = _1586;
        _1591 = _1586;
        _1592 = _1586;
        _1593 = _1586;
        _1594 = _1586;
        _1595 = _1586;
        _1596 = _1586;
        _1597 = _1586;
        _1598 = 0.0;
        _1599 = 0.0;
        _1600 = 0.0;
    }
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1623 = fma(_1284, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1276));
        float _1627 = fma(_1284, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1276));
        float _1631 = fma(_1284, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1276));
        float _1654 = _1276 + _1047;
        float _1655 = _1280 + _1048;
        float _1656 = _1284 + _1049;
        float _1666 = fma(_1656, cbModelParam._m0[30u].z, fma(_1655, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1654)) - _1623;
        float _1667 = fma(_1656, cbModelParam._m0[31u].z, fma(_1655, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1654)) - _1627;
        float _1668 = fma(_1656, cbModelParam._m0[32u].z, fma(_1655, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1654)) - _1631;
        float _1672 = inversesqrt(dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668)));
        float _1685 = ((_1672 * _1666) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1623 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1686 = ((_1672 * _1667) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1627 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1687 = ((_1672 * _1668) / cbModelParam._m0[35u].z) + ((((((_1631 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1685, _1686, _1687), 0.0);
        vec4 _1696 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1685, _1686, _1687), 0.0);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1685, _1686, _1687), 0.0);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1685, _1686, _1687), 0.0);
        float _1722 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1723 = _1722 * (_1689.x + (-0.5));
        float _1724 = _1722 * (_1689.y + (-0.5));
        float _1725 = _1722 * (_1689.z + (-0.5));
        float _1732 = exp2((_1696.w + (-0.5)) * 20.0) * 2.0;
        float _1733 = _1732 * (_1696.x + (-0.5));
        float _1734 = _1732 * (_1696.y + (-0.5));
        float _1735 = _1732 * (_1696.z + (-0.5));
        float _1742 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1743 = _1742 * (_1703.x + (-0.5));
        float _1744 = _1742 * (_1703.y + (-0.5));
        float _1745 = _1742 * (_1703.z + (-0.5));
        float _1752 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1753 = _1752 * (_1710.x + (-0.5));
        float _1754 = _1752 * (_1710.y + (-0.5));
        float _1755 = _1752 * (_1710.z + (-0.5));
        float _1756 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1757 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1758 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1759 = _1723 * 0.5;
        float _1760 = _1733 * 0.5;
        float _1761 = _1743 * 0.5;
        float _1762 = dot(vec3(_1759, _1760, _1761), vec3(_1759, _1760, _1761));
        float _1767 = (_1762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1762);
        float _1775 = (dot(vec3(_1047, _1048, _1049), vec3(_1767 * _1759, _1767 * _1760, _1767 * _1761)) + 1.0) * 0.5;
        float _4545 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1784 = sqrt(((_1760 * _1760) + (_1759 * _1759)) + (_1761 * _1761)) / (_1756 + 9.9999997473787516355514526367188e-06);
        float _4556 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _1786 = _1785 * 2.0;
        float _1790 = (1.0 - _1785) / (_1785 + 1.0);
        float _4567 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1800 = ((((1.0 - _1791) * (_1786 + 2.0)) * exp2(log2(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_1786 + 1.0))) + _1791) * _1756;
        float _1801 = _1724 * 0.5;
        float _1802 = _1734 * 0.5;
        float _1803 = _1744 * 0.5;
        float _1804 = dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803));
        float _1809 = (_1804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1804);
        float _1817 = (dot(vec3(_1047, _1048, _1049), vec3(_1809 * _1801, _1809 * _1802, _1809 * _1803)) + 1.0) * 0.5;
        float _4578 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1826 = sqrt(((_1802 * _1802) + (_1801 * _1801)) + (_1803 * _1803)) / (_1757 + 9.9999997473787516355514526367188e-06);
        float _4589 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1828 = _1827 * 2.0;
        float _1832 = (1.0 - _1827) / (_1827 + 1.0);
        float _4600 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1842 = ((((1.0 - _1833) * (_1828 + 2.0)) * exp2(log2(isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_1828 + 1.0))) + _1833) * _1757;
        float _1843 = _1725 * 0.5;
        float _1844 = _1735 * 0.5;
        float _1845 = _1745 * 0.5;
        float _1846 = dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845));
        float _1851 = (_1846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1846);
        float _1859 = (dot(vec3(_1047, _1048, _1049), vec3(_1851 * _1843, _1851 * _1844, _1851 * _1845)) + 1.0) * 0.5;
        float _4611 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1868 = sqrt(((_1844 * _1844) + (_1843 * _1843)) + (_1845 * _1845)) / (_1758 + 9.9999997473787516355514526367188e-06);
        float _4622 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1870 = _1869 * 2.0;
        float _1874 = (1.0 - _1869) / (_1869 + 1.0);
        float _4633 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1875 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _1884 = ((((1.0 - _1875) * (_1870 + 2.0)) * exp2(log2(isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_1870 + 1.0))) + _1875) * _1758;
        _1892 = _1725;
        _1893 = _1724;
        _1894 = _1723;
        _1895 = _1735;
        _1896 = _1734;
        _1897 = _1733;
        _1898 = _1745;
        _1899 = _1744;
        _1900 = _1743;
        _1901 = _1758;
        _1902 = _1757;
        _1903 = _1756;
        _1904 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)));
        _1905 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)));
        _1906 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)));
    }
    else
    {
        _1892 = _1586;
        _1893 = _1586;
        _1894 = _1586;
        _1895 = _1586;
        _1896 = _1586;
        _1897 = _1586;
        _1898 = _1586;
        _1899 = _1586;
        _1900 = _1586;
        _1901 = _1586;
        _1902 = _1586;
        _1903 = _1586;
        _1904 = 0.0;
        _1905 = 0.0;
        _1906 = 0.0;
    }
    float _1916 = (cbModelParam._m0[1u].x * (_1904 - _1598)) + _1598;
    float _1917 = (cbModelParam._m0[1u].x * (_1905 - _1599)) + _1599;
    float _1918 = (cbModelParam._m0[1u].x * (_1906 - _1600)) + _1600;
    float _1939 = fma(_1918, cbSceneParam._m0[89u].z, fma(_1917, cbSceneParam._m0[89u].y, _1916 * cbSceneParam._m0[89u].x));
    float _1942 = fma(_1918, cbSceneParam._m0[90u].z, fma(_1917, cbSceneParam._m0[90u].y, _1916 * cbSceneParam._m0[90u].x));
    float _1945 = fma(_1918, cbSceneParam._m0[91u].z, fma(_1917, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1916));
    float _1960 = _1220 * 0.5;
    float _1961 = _1221 * 0.5;
    float _1962 = _1222 * 0.5;
    float _1963 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1894, _1897, _1900, _1903));
    float _1966 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1893, _1896, _1899, _1902));
    float _1969 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1892, _1895, _1898, _1901));
    float _2003;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1976 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1585, _1589, _1592, _1595));
        float _1980 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1587, _1590, _1593, _1596));
        float _1984 = dot(vec4(_1960, _1961, _1962, 1.0), vec4(_1588, _1591, _1594, _1597));
        float _1991 = dot(vec4(cbModelParam._m0[39u]), vec4(_1960, _1961, _1962, 1.0));
        _2003 = dot(vec3(isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)), isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)), isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1991) ? 0.0 : (isnan(0.0) ? _1991 : max(0.0, _1991))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2003 = 1.0;
    }
    float _2014;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2005 = dot(vec4(cbModelParam._m0[40u]), vec4(_1960, _1961, _1962, 1.0));
        _2014 = dot(vec3(isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2005) ? 0.0 : (isnan(0.0) ? _2005 : max(0.0, _2005))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2014 = 1.0;
    }
    float _2018 = (_2014 * cbModelParam._m0[1u].x) + (_2003 * (1.0 - cbModelParam._m0[1u].x));
    float _2028 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1050);
    float _2029 = isnan(_2028) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2028 : min(cbModelParam._m0[25u].z, _2028));
    float _2109;
    float _2111;
    float _2113;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2076 = fma(_1284, cbModelParam._m0[13u].z, fma(_1280, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1276)) + cbModelParam._m0[13u].w;
        float _2080 = fma(_1284, cbModelParam._m0[14u].z, fma(_1280, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1276)) + cbModelParam._m0[14u].w;
        float _2084 = fma(_1284, cbModelParam._m0[15u].z, fma(_1280, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1276)) + cbModelParam._m0[15u].w;
        float _2087 = fma(_1222, cbModelParam._m0[13u].z, fma(_1221, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1220));
        float _2090 = fma(_1222, cbModelParam._m0[14u].z, fma(_1221, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1220));
        float _2093 = fma(_1222, cbModelParam._m0[15u].z, fma(_1221, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1220));
        float _2121;
        if (_2087 > 0.0)
        {
            _2121 = abs((1.0 - _2076) / _2087);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2076 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2121 = frontier_phi_14_12_ladder;
        }
        float _2292;
        if (_2090 > 0.0)
        {
            _2292 = abs((1.0 - _2080) / _2090);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2080 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2292 = frontier_phi_23_19_ladder;
        }
        float _2587;
        if (_2093 > 0.0)
        {
            _2587 = abs((1.0 - _2084) / _2093);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2084 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2587 = frontier_phi_35_30_ladder;
        }
        float _2589 = isnan(_2292) ? _2121 : (isnan(_2121) ? _2292 : min(_2121, _2292));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _2087) + _2076;
        float _2595 = (_2590 * _2090) + _2080;
        float _2596 = (_2590 * _2093) + _2084;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2599 = (-1.0) - _2597;
        float _2601 = _2597 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2596 > _2601) || ((_2596 < _2599) || ((_2595 > _2601) || ((_2595 < _2599) || ((_2594 < _2599) || (_2594 > _2601))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2596, cbModelParam._m0[9u].z, fma(_2595, cbModelParam._m0[9u].y, _2594 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2596, cbModelParam._m0[10u].z, fma(_2595, cbModelParam._m0[10u].y, _2594 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2596, cbModelParam._m0[11u].z, fma(_2595, cbModelParam._m0[11u].y, _2594 * cbModelParam._m0[11u].x))), _2029);
            frontier_phi_13_35_ladder = _2741.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2741.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2741.x * cbModelParam._m0[1u].y;
        }
        _2109 = frontier_phi_13_35_ladder_2;
        _2111 = frontier_phi_13_35_ladder_1;
        _2113 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2097 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1220, _1221, _1222), _2029);
        _2109 = _2097.x * cbModelParam._m0[1u].y;
        _2111 = _2097.y * cbModelParam._m0[1u].y;
        _2113 = _2097.z * cbModelParam._m0[1u].y;
    }
    float _2117 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1050);
    float _2118 = isnan(_2117) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2117 : min(cbModelParam._m0[25u].w, _2117));
    float _2207;
    float _2209;
    float _2211;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2171 = fma(_1284, cbModelParam._m0[21u].z, fma(_1280, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1276)) + cbModelParam._m0[21u].w;
        float _2175 = fma(_1284, cbModelParam._m0[22u].z, fma(_1280, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1276)) + cbModelParam._m0[22u].w;
        float _2179 = fma(_1284, cbModelParam._m0[23u].z, fma(_1280, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1276)) + cbModelParam._m0[23u].w;
        float _2182 = fma(_1222, cbModelParam._m0[21u].z, fma(_1221, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1220));
        float _2185 = fma(_1222, cbModelParam._m0[22u].z, fma(_1221, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1220));
        float _2188 = fma(_1222, cbModelParam._m0[23u].z, fma(_1221, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1220));
        float _2297;
        if (_2182 > 0.0)
        {
            _2297 = abs((1.0 - _2171) / _2182);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2171 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2297 = frontier_phi_25_21_ladder;
        }
        float _2614;
        if (_2185 > 0.0)
        {
            _2614 = abs((1.0 - _2175) / _2185);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2185 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2175 + 1.0) / _2185);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2614 = frontier_phi_37_32_ladder;
        }
        float _2952;
        if (_2188 > 0.0)
        {
            _2952 = abs((1.0 - _2179) / _2188);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2188 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2179 + 1.0) / _2188);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2952 = frontier_phi_47_44_ladder;
        }
        float _2954 = isnan(_2614) ? _2297 : (isnan(_2297) ? _2614 : min(_2297, _2614));
        float _2955 = isnan(_2952) ? _2954 : (isnan(_2954) ? _2952 : min(_2954, _2952));
        float _2959 = (_2955 * _2182) + _2171;
        float _2960 = (_2955 * _2185) + _2175;
        float _2961 = (_2955 * _2188) + _2179;
        float _2962 = _2955 * 9.9999997473787516355514526367188e-05;
        float _2963 = (-1.0) - _2962;
        float _2965 = _2962 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2961 > _2965) || ((_2961 < _2963) || ((_2960 > _2965) || ((_2960 < _2963) || ((_2959 < _2963) || (_2959 > _2965))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3083 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2961, cbModelParam._m0[17u].z, fma(_2960, cbModelParam._m0[17u].y, _2959 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2961, cbModelParam._m0[18u].z, fma(_2960, cbModelParam._m0[18u].y, _2959 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2961, cbModelParam._m0[19u].z, fma(_2960, cbModelParam._m0[19u].y, _2959 * cbModelParam._m0[19u].x))), _2118);
            frontier_phi_22_47_ladder = _3083.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3083.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3083.x * cbModelParam._m0[1u].z;
        }
        _2207 = frontier_phi_22_47_ladder_2;
        _2209 = frontier_phi_22_47_ladder_1;
        _2211 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2191 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1220, _1221, _1222), _2118);
        _2207 = _2191.x * cbModelParam._m0[1u].z;
        _2209 = _2191.y * cbModelParam._m0[1u].z;
        _2211 = _2191.z * cbModelParam._m0[1u].z;
    }
    float _2224 = (((_1247 * _1196) + _1248) * _1212) * ((cbModelParam._m0[1u].w * (_2207 - _2109)) + _2109);
    float _2226 = (((_1247 * _1198) + _1248) * _1212) * ((cbModelParam._m0[1u].w * (_2209 - _2111)) + _2111);
    float _2228 = (((_1247 * _1199) + _1248) * _1212) * ((cbModelParam._m0[1u].w * (_2211 - _2113)) + _2113);
    float _2231 = fma(_2228, cbSceneParam._m0[89u].z, fma(_2226, cbSceneParam._m0[89u].y, _2224 * cbSceneParam._m0[89u].x));
    float _2234 = fma(_2228, cbSceneParam._m0[90u].z, fma(_2226, cbSceneParam._m0[90u].y, _2224 * cbSceneParam._m0[90u].x));
    float _2237 = fma(_2228, cbSceneParam._m0[91u].z, fma(_2226, cbSceneParam._m0[91u].y, _2224 * cbSceneParam._m0[91u].x));
    float _2271 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2275 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2279 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2283 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2284 = _2271 / _2283;
    float _2285 = _2275 / _2283;
    float _2286 = _2279 / _2283;
    float _2433;
    float _2434;
    float _2435;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2313 = ((uint(_2286 > cbSceneParam._m0[59u].y) + uint(_2286 > cbSceneParam._m0[59u].x)) + uint(_2286 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2314 = _2313 + 43u;
        uint _2322 = _2313 + 44u;
        uint _2330 = _2313 + 45u;
        uint _2338 = _2313 + 46u;
        float _2349 = fma(_2283, cbSceneParam._m0[_2314].w, fma(_2279, cbSceneParam._m0[_2314].z, fma(_2275, cbSceneParam._m0[_2314].y, _2271 * cbSceneParam._m0[_2314].x)));
        float _2353 = fma(_2283, cbSceneParam._m0[_2322].w, fma(_2279, cbSceneParam._m0[_2322].z, fma(_2275, cbSceneParam._m0[_2322].y, _2271 * cbSceneParam._m0[_2322].x)));
        float _2361 = fma(_2283, cbSceneParam._m0[_2338].w, fma(_2279, cbSceneParam._m0[_2338].z, fma(_2275, cbSceneParam._m0[_2338].y, _2271 * cbSceneParam._m0[_2338].x)));
        float _2366 = cbSceneParam._m0[33u].z * _2361;
        float _2368 = cbSceneParam._m0[33u].w * _2361;
        float _2371 = fma(_2283, cbSceneParam._m0[_2330].w, fma(_2279, cbSceneParam._m0[_2330].z, fma(_2275, cbSceneParam._m0[_2330].y, _2271 * cbSceneParam._m0[_2330].x))) / _2361;
        float _2419 = (cbSceneParam._m0[33u].x - sqrt(((_2285 * _2285) + (_2284 * _2284)) + (_2286 * _2286))) * cbSceneParam._m0[33u].y;
        float _4759 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2426 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2366 + _2349) / _2361, (_2368 + _2353) / _2361), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2368 + _2349) / _2361, (_2353 - _2366) / _2361), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2349 - _2366) / _2361, (_2353 - _2368) / _2361), _2371), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2349 - _2368) / _2361, (_2366 + _2353) / _2361), _2371), 0.0)).x), vec4(0.25)));
        _2433 = 1.0 - (_2426 * cbSceneParam._m0[34u].x);
        _2434 = 1.0 - (_2426 * cbSceneParam._m0[34u].y);
        _2435 = 1.0 - (_2426 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2433 = 1.0;
        _2434 = 1.0;
        _2435 = 1.0;
    }
    float _2499;
    float _2501;
    float _2503;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2487 = fma(_2283, cbSceneParam._m0[63u].w, fma(_2279, cbSceneParam._m0[63u].z, fma(_2275, cbSceneParam._m0[63u].y, _2271 * cbSceneParam._m0[63u].x)));
        float _2488 = fma(_2283, cbSceneParam._m0[60u].w, fma(_2279, cbSceneParam._m0[60u].z, fma(_2275, cbSceneParam._m0[60u].y, _2271 * cbSceneParam._m0[60u].x))) / _2487;
        float _2489 = fma(_2283, cbSceneParam._m0[61u].w, fma(_2279, cbSceneParam._m0[61u].z, fma(_2275, cbSceneParam._m0[61u].y, _2271 * cbSceneParam._m0[61u].x))) / _2487;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2488 >= cbSceneParam._m0[64u].x) && (_2489 >= cbSceneParam._m0[64u].y)) && (_2488 <= cbSceneParam._m0[64u].z)) && (_2489 <= cbSceneParam._m0[64u].w))
        {
            float _2627 = fma(_2283, cbSceneParam._m0[62u].w, fma(_2279, cbSceneParam._m0[62u].z, fma(_2275, cbSceneParam._m0[62u].y, _2271 * cbSceneParam._m0[62u].x))) / _2487;
            float _2631 = isnan(cbSceneParam._m0[41u].w) ? _2627 : (isnan(_2627) ? cbSceneParam._m0[41u].w : max(_2627, cbSceneParam._m0[41u].w));
            float _2674 = (cbSceneParam._m0[33u].x - sqrt(((_2285 * _2285) + (_2284 * _2284)) + (_2286 * _2286))) * cbSceneParam._m0[33u].y;
            float _4775 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
            float _2681 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2488, cbSceneParam._m0[33u].w + _2489), _2631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2488, _2489 - cbSceneParam._m0[33u].z), _2631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2488 - cbSceneParam._m0[33u].z, _2489 - cbSceneParam._m0[33u].w), _2631), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2488 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2489), _2631), 0.0)).x), vec4(0.25)));
            float _2685 = 1.0 - (_2681 * cbSceneParam._m0[34u].x);
            float _2686 = 1.0 - (_2681 * cbSceneParam._m0[34u].y);
            float _2687 = 1.0 - (_2681 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2687) ? _2435 : (isnan(_2435) ? _2687 : min(_2435, _2687));
            frontier_phi_34_33_ladder_1 = isnan(_2686) ? _2434 : (isnan(_2434) ? _2686 : min(_2434, _2686));
            frontier_phi_34_33_ladder_2 = isnan(_2685) ? _2433 : (isnan(_2433) ? _2685 : min(_2433, _2685));
        }
        else
        {
            frontier_phi_34_33_ladder = _2435;
            frontier_phi_34_33_ladder_1 = _2434;
            frontier_phi_34_33_ladder_2 = _2433;
        }
        _2499 = frontier_phi_34_33_ladder_2;
        _2501 = frontier_phi_34_33_ladder_1;
        _2503 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2499 = _2433;
        _2501 = _2434;
        _2503 = _2435;
    }
    uvec4 _2508 = floatBitsToUint(cbInstanceData._m0[_292 + 5u]);
    uint _2510 = _2508.x * 14u;
    uint _2511 = _2510 + 13u;
    float _2518 = _1212 + (-1.0);
    float _2523 = (cbLight._m0[_2511].x * _2518) + 1.0;
    float _2524 = (cbLight._m0[_2511].y * _2518) + 1.0;
    float _2525 = (cbLight._m0[_2511].z * _2518) + 1.0;
    float _2526 = (cbLight._m0[_2511].w * _2518) + 1.0;
    uint _2527 = _2510 + 5u;
    float _2533 = isnan(1.0) ? _2524 : (isnan(_2524) ? 1.0 : min(_2524, 1.0));
    uint _2537 = _2510 + 4u;
    float _2546 = isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0));
    uint _2550 = _2510 | 1u;
    float _2561 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_1047, _1048, _1049));
    float _2564 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_1047, _1048, _1049));
    float _4811 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _4822 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2569 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * 0.3183098733425140380859375;
    float _2571 = (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * 0.3183098733425140380859375;
    float _2578 = ((cbLight._m0[_2527].x * _2533) * _2571) + (((cbLight._m0[_2537].x * _2499) * _2546) * _2569);
    float _2579 = ((_2533 * cbLight._m0[_2527].y) * _2571) + (((cbLight._m0[_2537].y * _2501) * _2546) * _2569);
    float _2580 = ((_2533 * cbLight._m0[_2527].z) * _2571) + (((cbLight._m0[_2537].z * _2503) * _2546) * _2569);
    uvec4 _2584 = floatBitsToUint(cbLight._m0[_2510 + 12u]);
    bool _2586 = _2584.x == 0u;
    float _2688;
    float _2690;
    float _2692;
    if (_2586)
    {
        _2688 = _2578;
        _2690 = _2579;
        _2692 = _2580;
    }
    else
    {
        uint _2696 = _2510 + 6u;
        float _2712 = (dot(vec3(cbLight._m0[_2510 + 2u].xyz), vec3(_1047, _1048, _1049)) * 0.5) + 0.5;
        float _2713 = _2712 * _2712;
        float _4833 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2714 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2715 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
        _2688 = (((cbLight._m0[_2696].x * 0.3183098733425140380859375) * _2714) * _2715) + _2578;
        _2690 = (((cbLight._m0[_2696].y * 0.3183098733425140380859375) * _2714) * _2715) + _2579;
        _2692 = (((cbLight._m0[_2696].z * 0.3183098733425140380859375) * _2714) * _2715) + _2580;
    }
    bool _2695 = _2584.y == 0u;
    float _2750;
    float _2752;
    float _2754;
    if (_2695)
    {
        _2750 = _2688;
        _2752 = _2690;
        _2754 = _2692;
    }
    else
    {
        uint _2923 = _2510 + 7u;
        float _2939 = (dot(vec3(cbLight._m0[_2510 + 3u].xyz), vec3(_1047, _1048, _1049)) * 0.5) + 0.5;
        float _2940 = _2939 * _2939;
        float _4849 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2941 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2942 = isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0));
        _2750 = (((cbLight._m0[_2923].x * 0.3183098733425140380859375) * _2941) * _2942) + _2688;
        _2752 = (((cbLight._m0[_2923].y * 0.3183098733425140380859375) * _2941) * _2942) + _2690;
        _2754 = (((cbLight._m0[_2923].z * 0.3183098733425140380859375) * _2941) * _2942) + _2692;
    }
    uint _2757 = _2510 + 8u;
    float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _1050) * 0.949999988079071044921875);
    float _2771 = _2770 * _2770;
    float _2772 = cbLight._m0[_2510].x + _1126;
    float _2773 = cbLight._m0[_2510].y + _1127;
    float _2774 = cbLight._m0[_2510].z + _1128;
    float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
    float _2779 = _2778 * _2772;
    float _2780 = _2778 * _2773;
    float _2781 = _2778 * _2774;
    float _2782 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2510].xyz));
    float _4865 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2785 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
    float _4876 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _2786 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
    float _2787 = dot(vec3(_1047, _1048, _1049), vec3(_2779, _2780, _2781));
    float _4887 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2790 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _2791 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2779, _2780, _2781));
    float _4898 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2795 = _2771 * _2771;
    float _2799 = ((_2790 * _2790) * (_2795 + (-1.0))) + 1.0;
    float _2807 = exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0);
    float _2808 = 0.959999978542327880859375 - _1193;
    float _2810 = 0.959999978542327880859375 - _1194;
    float _2811 = 0.959999978542327880859375 - _1195;
    float _2818 = 1.0 - _2771;
    float _2829 = (0.5 / (((_2786 * ((_2785 * _2818) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _2818) + _2771) * _2785))) * _2785;
    float _4909 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2831 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2795 / ((_2799 * _2799) * 3.141590118408203125));
    uint _2845 = _2510 + 9u;
    float _2856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2550].w)) * _1050) * 0.949999988079071044921875);
    float _2857 = _2856 * _2856;
    float _2858 = cbLight._m0[_2550].x + _1126;
    float _2859 = cbLight._m0[_2550].y + _1127;
    float _2860 = cbLight._m0[_2550].z + _1128;
    float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
    float _2865 = _2864 * _2858;
    float _2866 = _2864 * _2859;
    float _2867 = _2864 * _2860;
    float _2868 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2550].xyz));
    float _4920 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2871 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
    float _2872 = dot(vec3(_1047, _1048, _1049), vec3(_2865, _2866, _2867));
    float _4931 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
    float _2875 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
    float _2876 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_2865, _2866, _2867));
    float _4942 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
    float _2880 = _2857 * _2857;
    float _2884 = ((_2875 * _2875) * (_2880 + (-1.0))) + 1.0;
    float _2891 = exp2(log2(1.0 - (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) * 5.0);
    float _2898 = 1.0 - _2857;
    float _2908 = (0.5 / (((_2786 * ((_2871 * _2898) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _2898) + _2857) * _2871))) * _2871;
    float _4953 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
    float _2910 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2880 / ((_2884 * _2884) * 3.141590118408203125));
    float _2920 = (((((_2891 * _2808) + _1196) * cbLight._m0[_2845].x) * _2910) * _2533) + ((((cbLight._m0[_2757].x * _2499) * ((_2807 * _2808) + _1196)) * _2831) * _2546);
    float _2921 = (((((_2891 * _2810) + _1198) * cbLight._m0[_2845].y) * _2910) * _2533) + ((((cbLight._m0[_2757].y * _2501) * ((_2807 * _2810) + _1198)) * _2831) * _2546);
    float _2922 = (((((_2891 * _2811) + _1199) * cbLight._m0[_2845].z) * _2910) * _2533) + ((((cbLight._m0[_2757].z * _2503) * ((_2807 * _2811) + _1199)) * _2831) * _2546);
    float _2978;
    float _2980;
    float _2982;
    if (_2586)
    {
        _2978 = _2920;
        _2980 = _2921;
        _2982 = _2922;
    }
    else
    {
        uint _2984 = _2510 + 2u;
        uint _2988 = _2510 + 10u;
        float _3002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2984].w)) * _1050) * 0.949999988079071044921875);
        float _3003 = _3002 * _3002;
        float _3004 = cbLight._m0[_2984].x + _1126;
        float _3005 = cbLight._m0[_2984].y + _1127;
        float _3006 = cbLight._m0[_2984].z + _1128;
        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
        float _3011 = _3010 * _3004;
        float _3012 = _3010 * _3005;
        float _3013 = _3010 * _3006;
        float _3014 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_2984].xyz));
        float _4964 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3017 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _3018 = dot(vec3(_1047, _1048, _1049), vec3(_3011, _3012, _3013));
        float _4975 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3021 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _3022 = dot(vec3(cbLight._m0[_2984].xyz), vec3(_3011, _3012, _3013));
        float _4986 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
        float _3026 = _3003 * _3003;
        float _3030 = ((_3021 * _3021) * (_3026 + (-1.0))) + 1.0;
        float _3037 = exp2(log2(1.0 - (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) * 5.0);
        float _3044 = 1.0 - _3003;
        float _3054 = (0.5 / (((_2786 * ((_3017 * _3044) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _3044) + _3003) * _3017))) * _3017;
        float _4997 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3056 = (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_3026 / ((_3030 * _3030) * 3.141590118408203125));
        float _3057 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
        _2978 = (((((_3037 * _2808) + _1196) * cbLight._m0[_2988].x) * _3056) * _3057) + _2920;
        _2980 = (((((_3037 * _2810) + _1198) * cbLight._m0[_2988].y) * _3056) * _3057) + _2921;
        _2982 = (((((_3037 * _2811) + _1199) * cbLight._m0[_2988].z) * _3056) * _3057) + _2922;
    }
    float _3088;
    float _3090;
    float _3092;
    if (_2695)
    {
        _3088 = _2978;
        _3090 = _2980;
        _3092 = _2982;
    }
    else
    {
        uint _3099 = _2510 + 3u;
        uint _3103 = _2510 + 11u;
        float _3117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3099].w)) * _1050) * 0.949999988079071044921875);
        float _3118 = _3117 * _3117;
        float _3119 = cbLight._m0[_3099].x + _1126;
        float _3120 = cbLight._m0[_3099].y + _1127;
        float _3121 = cbLight._m0[_3099].z + _1128;
        float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
        float _3126 = _3125 * _3119;
        float _3127 = _3125 * _3120;
        float _3128 = _3125 * _3121;
        float _3129 = dot(vec3(_1047, _1048, _1049), vec3(cbLight._m0[_3099].xyz));
        float _5013 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        float _3132 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
        float _3133 = dot(vec3(_1047, _1048, _1049), vec3(_3126, _3127, _3128));
        float _5024 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
        float _3136 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
        float _3137 = dot(vec3(cbLight._m0[_3099].xyz), vec3(_3126, _3127, _3128));
        float _5035 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
        float _3141 = _3118 * _3118;
        float _3145 = ((_3136 * _3136) * (_3141 + (-1.0))) + 1.0;
        float _3152 = exp2(log2(1.0 - (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0)))) * 5.0);
        float _3159 = 1.0 - _3118;
        float _3169 = (0.5 / (((_2786 * ((_3132 * _3159) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _3159) + _3118) * _3132))) * _3132;
        float _5046 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
        float _3171 = (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3141 / ((_3145 * _3145) * 3.141590118408203125));
        float _3172 = isnan(1.0) ? _2526 : (isnan(_2526) ? 1.0 : min(_2526, 1.0));
        _3088 = (((((_3152 * _2808) + _1196) * cbLight._m0[_3103].x) * _3171) * _3172) + _2978;
        _3090 = (((((_3152 * _2810) + _1198) * cbLight._m0[_3103].y) * _3171) * _3172) + _2980;
        _3092 = (((((_3152 * _2811) + _1199) * cbLight._m0[_3103].z) * _3171) * _3172) + _2982;
    }
    float _3238;
    float _3240;
    float _3242;
    float _3244;
    float _3246;
    float _3248;
    if (_2508.y == 0u)
    {
        uvec4 _3193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3194 = _3193.x;
        uint _3205 = uint((float(_3193.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1135) / _3194))) + floor(float(uint(cbSceneParam._m0[85u].x * _1134) / _3194)));
        float _3215 = (log2(_2286 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3216 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
        uint _3219 = uint(isnan(14.0) ? _3216 : (isnan(_3216) ? 14.0 : min(_3216, 14.0)));
        uvec4 _3224 = texelFetch(g_lightClusterGridBuffer, int(((_3219 << 2u) + (_3205 << 6u)) >> 2u));
        uint _3225 = _3224.x;
        uint _3226 = _3193.z;
        float _3305;
        float _3307;
        float _3309;
        float _3311;
        float _3313;
        float _3315;
        if (((((1u << ((_3226 >> 4u) & 15u)) + 4294967295u) & _3225) == 0u) || ((_3226 & 240u) == 0u))
        {
            _3305 = 0.0;
            _3307 = 0.0;
            _3309 = 0.0;
            _3311 = 0.0;
            _3313 = 0.0;
            _3315 = 0.0;
        }
        else
        {
            float _3306;
            float _3308;
            float _3310;
            float _3312;
            float _3314;
            float _3316;
            float _3450 = 0.0;
            float _3451 = 0.0;
            float _3452 = 0.0;
            float _3453 = 0.0;
            float _3454 = 0.0;
            float _3455 = 0.0;
            uint _3456 = 0u;
            uint _3465;
            bool _3466;
            for (;;)
            {
                _3465 = texelFetch(g_lightClassification, int((((_3219 << 5u) + (_3205 << 9u)) + (_3456 << 2u)) >> 2u)).x;
                _3466 = _3465 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3466)
                {
                    frontier_phi_66_pred = _3455;
                    frontier_phi_66_pred_1 = _3454;
                    frontier_phi_66_pred_2 = _3453;
                    frontier_phi_66_pred_3 = _3452;
                    frontier_phi_66_pred_4 = _3451;
                    frontier_phi_66_pred_5 = _3450;
                }
                else
                {
                    float _3574;
                    float _3575;
                    float _3576;
                    float _3577;
                    float _3578;
                    float _3579;
                    uint _3580;
                    _3574 = _3450;
                    _3575 = _3451;
                    _3576 = _3452;
                    _3577 = _3453;
                    _3578 = _3454;
                    _3579 = _3455;
                    _3580 = _3465;
                    float _3506;
                    float _3507;
                    float _3508;
                    float _3509;
                    float _3510;
                    float _3511;
                    for (;;)
                    {
                        uint _3584 = uint(findLSB(_3580)) + (_3456 << 5u);
                        uint _3581 = (_3580 + 4294967295u) & _3580;
                        uint _3586 = _3584 * 48u;
                        vec4 _3600 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3586)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 3u)).x));
                        uint _3606 = (_3584 * 48u) + 4u;
                        vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3606)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 3u)).x));
                        uint _3625 = (_3584 * 48u) + 8u;
                        vec3 _3636 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3625)).x, texelFetch(g_PointLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3625 + 2u)).x));
                        float _3640 = _3600.x - _2284;
                        float _3641 = _3600.y - _2285;
                        float _3642 = _3600.z - _2286;
                        float _3643 = dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642));
                        float _3646 = inversesqrt(_3643);
                        float _3647 = _3646 * _3640;
                        float _3648 = _3646 * _3641;
                        float _3649 = _3646 * _3642;
                        float _3650 = dot(vec3(_1153, _1156, _1159), vec3(_3647, _3648, _3649));
                        float _3655 = 1.0 - (_3643 * _3600.w);
                        float _5072 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3656 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                        float _3657 = sqrt(_3643) * _3619.w;
                        float _3660 = 1.39999997615814208984375 / (_3657 + 1.39999997615814208984375);
                        float _3661 = _3660 * _3660;
                        float _3664 = ((1.0 - _3661) * _3650) + _3661;
                        float _3667 = _3657 * _3657;
                        float _3671 = ((isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0))) * _3656) / ((_3667 * 0.699999988079071044921875) + 1.0);
                        float _3675 = (-0.0) - _2284;
                        float _3676 = (-0.0) - _2285;
                        float _3677 = (-0.0) - _2286;
                        float _3681 = inversesqrt(dot(vec3(_3675, _3676, _3677), vec3(_3675, _3676, _3677)));
                        float _3682 = _3681 * _3675;
                        float _3683 = _3681 * _3676;
                        float _3684 = _3681 * _3677;
                        float _3691 = exp2(log2(1.0 / ((_3667 * 3.5) + 5.0)) * 0.25);
                        float _3692 = 1.0 - _1228;
                        float _3699 = sqrt(1.0 - ((1.0 - (_3692 * _3692)) * (1.0 - (_3691 * _3691))));
                        float _3700 = _3699 * _3699;
                        float _3701 = _3700 * _3700;
                        float _3702 = _3682 + _3647;
                        float _3703 = _3683 + _3648;
                        float _3704 = _3684 + _3649;
                        float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                        float _3712 = dot(vec3(_1153, _1156, _1159), vec3(_3682, _3683, _3684));
                        float _5088 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                        float _3715 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
                        float _3716 = dot(vec3(_1153, _1156, _1159), vec3(_3708 * _3702, _3708 * _3703, _3708 * _3704));
                        float _5099 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                        float _3719 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                        float _3723 = ((_3719 * _3719) * (_3701 + (-1.0))) + 1.0;
                        float _3724 = _3660 * _3700;
                        float _3725 = _3724 * _3724;
                        float _3728 = ((1.0 - _3725) * _3650) + _3725;
                        float _5110 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                        float _3729 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                        float _3730 = 1.0 - _3700;
                        float _3740 = (0.5 / (((_3729 * ((_3715 * _3730) + _3700)) + 9.9999999392252902907785028219223e-09) + (((_3729 * _3730) + _3700) * _3715))) * _3729;
                        float _5121 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                        float _3751 = (((_3701 * 3.1415927410125732421875) * (isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0)))) / ((_3723 * _3723) * ((_3667 * 2.1991131305694580078125) + 3.141590118408203125))) * _3656;
                        _3509 = (_3671 * _3619.x) + _3577;
                        _3510 = (_3671 * _3619.y) + _3578;
                        _3511 = (_3671 * _3619.z) + _3579;
                        _3506 = (_3751 * _3636.x) + _3574;
                        _3507 = (_3751 * _3636.y) + _3575;
                        _3508 = (_3751 * _3636.z) + _3576;
                        if (_3581 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3574 = _3506;
                            _3575 = _3507;
                            _3576 = _3508;
                            _3577 = _3509;
                            _3578 = _3510;
                            _3579 = _3511;
                            _3580 = _3581;
                        }
                    }
                    frontier_phi_66_pred = _3511;
                    frontier_phi_66_pred_1 = _3510;
                    frontier_phi_66_pred_2 = _3509;
                    frontier_phi_66_pred_3 = _3508;
                    frontier_phi_66_pred_4 = _3507;
                    frontier_phi_66_pred_5 = _3506;
                }
                _3316 = frontier_phi_66_pred;
                _3314 = frontier_phi_66_pred_1;
                _3312 = frontier_phi_66_pred_2;
                _3310 = frontier_phi_66_pred_3;
                _3308 = frontier_phi_66_pred_4;
                _3306 = frontier_phi_66_pred_5;
                uint _3457 = _3456 + 1u;
                if (_3457 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3450 = _3306;
                    _3451 = _3308;
                    _3452 = _3310;
                    _3453 = _3312;
                    _3454 = _3314;
                    _3455 = _3316;
                    _3456 = _3457;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3305 = _3306;
            _3307 = _3308;
            _3309 = _3310;
            _3311 = _3312;
            _3313 = _3314;
            _3315 = _3316;
        }
        uvec4 _3319 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3320 = _3319.z;
        uint _3322 = (_3320 >> 8u) & 15u;
        float _3418;
        float _3420;
        float _3422;
        float _3424;
        float _3426;
        float _3428;
        if (((4294967295u << _3322) & _3225) == 0u)
        {
            _3418 = _3305;
            _3420 = _3307;
            _3422 = _3309;
            _3424 = _3311;
            _3426 = _3313;
            _3428 = _3315;
        }
        else
        {
            float _3443 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
            float _3444 = _3443 * _2284;
            float _3445 = _3443 * _2285;
            float _3446 = _3443 * _2286;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3322 < ((_3320 >> 12u) & 15u))
            {
                float _3419;
                float _3421;
                float _3423;
                float _3425;
                float _3427;
                float _3429;
                float _3557 = _3305;
                float _3558 = _3307;
                float _3559 = _3309;
                float _3560 = _3311;
                float _3561 = _3313;
                float _3562 = _3315;
                uint _3563 = _3322;
                uint _3572;
                bool _3573;
                for (;;)
                {
                    _3572 = texelFetch(g_lightClassification, int((((_3219 << 5u) + (_3205 << 9u)) + (_3563 << 2u)) >> 2u)).x;
                    _3573 = _3572 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3573)
                    {
                        frontier_phi_72_pred = _3562;
                        frontier_phi_72_pred_1 = _3561;
                        frontier_phi_72_pred_2 = _3560;
                        frontier_phi_72_pred_3 = _3559;
                        frontier_phi_72_pred_4 = _3558;
                        frontier_phi_72_pred_5 = _3557;
                    }
                    else
                    {
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _4049;
                        float _4050;
                        float _4051;
                        float _4052;
                        float _4053;
                        float _4054;
                        float _3769 = _3557;
                        float _3770 = _3558;
                        float _3771 = _3559;
                        float _3772 = _3560;
                        float _3773 = _3561;
                        float _3774 = _3562;
                        uint _3775 = _3572;
                        uint _3776;
                        vec4 _3801;
                        float _3802;
                        vec4 _3817;
                        vec3 _3829;
                        vec4 _3844;
                        vec4 _3859;
                        float _3905;
                        bool _3906;
                        for (;;)
                        {
                            uint _3786 = ((_3563 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3775));
                            _3776 = (_3775 + 4294967295u) & _3775;
                            uint _3788 = _3786 * 40u;
                            _3801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 3u)).x));
                            _3802 = _3801.w;
                            uint _3804 = (_3786 * 40u) + 4u;
                            _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            uint _3819 = (_3786 * 40u) + 8u;
                            _3829 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x));
                            uint _3831 = (_3786 * 40u) + 16u;
                            _3844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 3u)).x));
                            uint _3846 = (_3786 * 40u) + 20u;
                            _3859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 3u)).x));
                            uint _3861 = (_3786 * 40u) + 24u;
                            vec4 _3874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3861 + 3u)).x));
                            uint _3880 = (_3786 * 40u) + 28u;
                            vec4 _3893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 3u)).x));
                            _3905 = fma(_2286, _3893.z, fma(_2285, _3893.y, _3893.x * _2284)) + _3893.w;
                            _3906 = !((fma(_2286, _3874.z, fma(_2285, _3874.y, _3874.x * _2284)) + _3874.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3906)
                            {
                                float _3933 = _3801.x - _2284;
                                float _3934 = _3801.y - _2285;
                                float _3935 = _3801.z - _2286;
                                float _3936 = dot(vec3(_3933, _3934, _3935), vec3(_3933, _3934, _3935));
                                float _3939 = inversesqrt(_3936);
                                float _3940 = _3939 * _3933;
                                float _3941 = _3939 * _3934;
                                float _3942 = _3939 * _3935;
                                float _3946 = 1.0 - (_3936 / (_3802 * _3802));
                                float _5132 = isnan(0.0) ? _3946 : (isnan(_3946) ? 0.0 : max(_3946, 0.0));
                                float _3947 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3951 = sqrt(_3936) * _3817.w;
                                float _3953 = 1.39999997615814208984375 / (_3951 + 1.39999997615814208984375);
                                float _3954 = _3953 * _3953;
                                float _3957 = ((1.0 - _3954) * dot(vec3(_3940, _3941, _3942), vec3(_1153, _1156, _1159))) + _3954;
                                float _3960 = _3951 * _3951;
                                float _3964 = (fma(_2286, _3844.z, fma(_2285, _3844.y, _3844.x * _2284)) + _3844.w) / _3905;
                                float _3965 = (fma(_2286, _3859.z, fma(_2285, _3859.y, _3859.x * _2284)) + _3859.w) / _3905;
                                float _3969 = 1.0 - dot(vec2(_3964, _3965), vec2(_3964, _3965));
                                float _5148 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3970 = isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0));
                                float _3971 = _3970 * (((isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0))) * _3947) / ((_3960 * 0.699999988079071044921875) + 1.0));
                                float _3983 = exp2(log2(1.0 / ((_3960 * 3.5) + 5.0)) * 0.25);
                                float _3984 = 1.0 - _1228;
                                float _3991 = sqrt(1.0 - ((1.0 - (_3984 * _3984)) * (1.0 - (_3983 * _3983))));
                                float _3992 = _3991 * _3991;
                                float _3993 = _3992 * _3992;
                                float _3994 = _3940 - _3444;
                                float _3995 = _3941 - _3445;
                                float _3996 = _3942 - _3446;
                                float _4000 = inversesqrt(dot(vec3(_3994, _3995, _3996), vec3(_3994, _3995, _3996)));
                                float _4004 = dot(vec3(_1153, _1156, _1159), vec3((-0.0) - _3444, (-0.0) - _3445, (-0.0) - _3446));
                                float _5159 = isnan(0.0) ? _4004 : (isnan(_4004) ? 0.0 : max(_4004, 0.0));
                                float _4007 = isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0));
                                float _4008 = dot(vec3(_1153, _1156, _1159), vec3(_4000 * _3994, _4000 * _3995, _4000 * _3996));
                                float _5170 = isnan(0.0) ? _4008 : (isnan(_4008) ? 0.0 : max(_4008, 0.0));
                                float _4011 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
                                float _4015 = ((_4011 * _4011) * (_3993 + (-1.0))) + 1.0;
                                float _4016 = _3953 * _3992;
                                float _4017 = _4016 * _4016;
                                float _4023 = ((1.0 - _4017) * dot(vec3(_1153, _1156, _1159), vec3(_3940, _3941, _3942))) + _4017;
                                float _5181 = isnan(0.0) ? _4023 : (isnan(_4023) ? 0.0 : max(_4023, 0.0));
                                float _4024 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                                float _4025 = 1.0 - _3992;
                                float _4035 = (0.5 / (((_4024 * ((_4007 * _4025) + _3992)) + 9.9999999392252902907785028219223e-09) + (((_4024 * _4025) + _3992) * _4007))) * _4024;
                                float _5192 = isnan(0.0) ? _4035 : (isnan(_4035) ? 0.0 : max(_4035, 0.0));
                                float _4045 = (_3970 * _3947) * (((_3993 * 3.1415927410125732421875) * (isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0)))) / ((_4015 * _4015) * ((_3960 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3971 * _3817.y;
                                frontier_phi_78_pred_1 = _3971 * _3817.x;
                                frontier_phi_78_pred_2 = _4045 * _3829.z;
                                frontier_phi_78_pred_3 = _4045 * _3829.y;
                                frontier_phi_78_pred_4 = _4045 * _3829.x;
                                frontier_phi_78_pred_5 = _3971 * _3817.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4053 = frontier_phi_78_pred;
                            _4052 = frontier_phi_78_pred_1;
                            _4051 = frontier_phi_78_pred_2;
                            _4050 = frontier_phi_78_pred_3;
                            _4049 = frontier_phi_78_pred_4;
                            _4054 = frontier_phi_78_pred_5;
                            _3759 = _4052 + _3772;
                            _3760 = _4053 + _3773;
                            _3761 = _4054 + _3774;
                            _3756 = _4049 + _3769;
                            _3757 = _4050 + _3770;
                            _3758 = _4051 + _3771;
                            if (_3776 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3769 = _3756;
                                _3770 = _3757;
                                _3771 = _3758;
                                _3772 = _3759;
                                _3773 = _3760;
                                _3774 = _3761;
                                _3775 = _3776;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3761;
                        frontier_phi_72_pred_1 = _3760;
                        frontier_phi_72_pred_2 = _3759;
                        frontier_phi_72_pred_3 = _3758;
                        frontier_phi_72_pred_4 = _3757;
                        frontier_phi_72_pred_5 = _3756;
                    }
                    _3429 = frontier_phi_72_pred;
                    _3427 = frontier_phi_72_pred_1;
                    _3425 = frontier_phi_72_pred_2;
                    _3423 = frontier_phi_72_pred_3;
                    _3421 = frontier_phi_72_pred_4;
                    _3419 = frontier_phi_72_pred_5;
                    uint _3564 = _3563 + 1u;
                    if (_3564 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3557 = _3419;
                        _3558 = _3421;
                        _3559 = _3423;
                        _3560 = _3425;
                        _3561 = _3427;
                        _3562 = _3429;
                        _3563 = _3564;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3429;
                frontier_phi_60_61_ladder_1 = _3427;
                frontier_phi_60_61_ladder_2 = _3423;
                frontier_phi_60_61_ladder_3 = _3421;
                frontier_phi_60_61_ladder_4 = _3419;
                frontier_phi_60_61_ladder_5 = _3425;
            }
            else
            {
                frontier_phi_60_61_ladder = _3315;
                frontier_phi_60_61_ladder_1 = _3313;
                frontier_phi_60_61_ladder_2 = _3309;
                frontier_phi_60_61_ladder_3 = _3307;
                frontier_phi_60_61_ladder_4 = _3305;
                frontier_phi_60_61_ladder_5 = _3311;
            }
            _3418 = frontier_phi_60_61_ladder_4;
            _3420 = frontier_phi_60_61_ladder_3;
            _3422 = frontier_phi_60_61_ladder_2;
            _3424 = frontier_phi_60_61_ladder_5;
            _3426 = frontier_phi_60_61_ladder_1;
            _3428 = frontier_phi_60_61_ladder;
        }
        float _3433 = isnan(1.0) ? _1212 : (isnan(_1212) ? 1.0 : min(_1212, 1.0));
        _3238 = (_3433 * _3424) + _2750;
        _3240 = (_3433 * _3426) + _2752;
        _3242 = (_3433 * _3428) + _2754;
        _3244 = ((_3418 * _1196) * _3433) + _3088;
        _3246 = ((_3420 * _1198) * _3433) + _3090;
        _3248 = ((_3422 * _1199) * _3433) + _3092;
    }
    else
    {
        _3238 = _2750;
        _3240 = _2752;
        _3242 = _2754;
        _3244 = _3088;
        _3246 = _3090;
        _3248 = _3092;
    }
    float _5208 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _5219 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _5230 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    uint _3268 = _292 + 6u;
    float _3276 = _1134 / cbSceneParam._m0[86u].x;
    float _3277 = _1135 / cbSceneParam._m0[86u].y;
    vec4 _3291 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3276, _3277, (log2((isnan(cbSceneParam._m0[77u].w) ? _1069 : (isnan(_1069) ? cbSceneParam._m0[77u].w : min(_1069, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3293 = _3291.x;
    float _3294 = _3291.y;
    float _3295 = _3291.z;
    float _3296 = _3291.w;
    float _3368;
    float _3370;
    float _3372;
    float _3374;
    if (_1069 > cbSceneParam._m0[78u].w)
    {
        float _3330 = isnan(_1069) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1069 : min(cbSceneParam._m0[80u].w, _1069));
        float _3331 = _3330 / _1069;
        float _3342 = _3331 * _1119;
        float _3343 = _1120 * _3331;
        float _3344 = (-0.0) - _3343;
        float _3346 = _3331 * _1121;
        float _3348 = (cbSceneParam._m0[77u].w * _3344) / _3330;
        float _3349 = _3348 + cbSceneParam._m0[79u].w;
        float _3350 = cbSceneParam._m0[79u].w - _3343;
        float _3356 = sqrt(((_3342 * _3342) + (_3343 * _3343)) + (_3346 * _3346));
        float _3359 = (1.0 - (cbSceneParam._m0[77u].w / _3330)) * _3356;
        float _3364 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3366 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3519;
        if (abs((_3344 - _3348) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3519 = ((((_3349 > 0.0) ? exp2(_3364 * _3349) : (2.0 - exp2(_3366 * _3349))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3359;
        }
        else
        {
            float _3479 = 1.0 / cbSceneParam._m0[80u].x;
            float _3480 = isnan(_3350) ? _3349 : (isnan(_3349) ? _3350 : max(_3349, _3350));
            float _3481 = isnan(_3350) ? _3349 : (isnan(_3349) ? _3350 : min(_3349, _3350));
            float _3490 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : min(_3480, 0.0));
            float _3491 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : min(_3481, 0.0));
            _3519 = ((abs(_3356 / _3344) * cbSceneParam._m0[80u].y) * ((((_3490 - _3491) * 2.0) - ((exp2(_3364 * (isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0)))) - exp2(_3364 * (isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0))))) * _3479)) - ((exp2(_3366 * _3490) - exp2(_3366 * _3491)) * _3479))) + (_3359 * cbSceneParam._m0[80u].z);
        }
        vec4 _3521 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3276, _3277, 1.0), 0.0);
        float _3530 = exp2((_3519 * (-1.44269502162933349609375)) * (1.0 - _3521.w));
        float _3531 = log2(_3530);
        float _3547 = log2(_3296);
        _3368 = (exp2(_3547 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3531 * cbSceneParam._m0[78u].x)) * _3521.x) / cbSceneParam._m0[78u].x)) + _3293;
        _3370 = (exp2(_3547 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3531 * cbSceneParam._m0[78u].y)) * _3521.y) / cbSceneParam._m0[78u].y)) + _3294;
        _3372 = (exp2(_3547 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3531 * cbSceneParam._m0[78u].z)) * _3521.z) / cbSceneParam._m0[78u].z)) + _3295;
        _3374 = _3530 * _3296;
    }
    else
    {
        _3368 = _3293;
        _3370 = _3294;
        _3372 = _3295;
        _3374 = _3296;
    }
    float _3386 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3387 = _3386 == 3.0;
    float _3388 = log2(_3374);
    float _3395 = exp2(_3388 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0))) * (_3238 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1212))) + ((_3244 + ((isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0))) * _2018)) * cbPerFrame._m0[3u].x));
    float _3396 = exp2(_3388 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0))) * (_3240 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1212))) + ((_3246 + ((isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0))) * _2018)) * cbPerFrame._m0[3u].x));
    float _3397 = exp2(_3388 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (_3242 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1212))) + ((_3248 + ((isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0))) * _2018)) * cbPerFrame._m0[3u].x));
    float _3406 = (_3386 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3406 * (_3387 ? _3395 : (_3395 + (cbSceneParam._m0[72u].w * _3368)));
    SV_Target.y = _3406 * (_3387 ? _3396 : (_3396 + (cbSceneParam._m0[72u].w * _3370)));
    SV_Target.z = _3406 * (_3387 ? _3397 : (_3397 + (cbSceneParam._m0[72u].w * _3372)));
    SV_Target.w = cbInstanceData._m0[_3268].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3268].w;
}


