#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1559;
float _3960;
float _3961;
float _3962;
float _3963;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[23u].w) + _425) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3972 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _450 = (_443 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _451 = (_443 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _452 = (_443 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[23u].w) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3983 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _529 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450);
    float _532 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451);
    float _535 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452);
    vec4 _554 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    float _595 = _591.z;
    float _602 = ((_574.x - _593) * _443) + _593;
    float _603 = ((_574.y - _594) * _443) + _594;
    float _604 = ((_574.z - _595) * _443) + _595;
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _629 = ((_616.z - _604) * _516) + _604;
    float _632 = ((((_616.x - _602) * _516) + _602) * 2.0) + (-1.0);
    float _634 = ((((_616.y - _603) * _516) + _603) * 2.0) + (-1.0);
    float _635 = dot(vec2(_632, _634), vec2(_632, _634));
    float _3994 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _640 = sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _666 = (((_654.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _632;
    float _667 = (((_654.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _634;
    float _670 = fma(_640, _255, fma(_667, _262, _666 * _248));
    float _673 = fma(_640, _256, fma(_667, _263, _666 * _249));
    float _676 = fma(_640, _257, fma(_667, _264, _666 * _250));
    float _680 = inversesqrt(dot(vec3(_670, _673, _676), vec3(_670, _673, _676)));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _709 = _707.x;
    float _710 = 1.0 - _709;
    float _719 = (cbMtdParam._m0[19u].x + dot(vec4(_680 * _670, _680 * _673, _680 * _676, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_709 - _710) * cbMtdParam._m0[24u].z) + _710) * cbMtdParam._m0[21u].z);
    float _4005 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _720 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _722 = (-0.0) - cbMtdParam._m0[24u].x;
    float _724 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _724 : (isnan(_724) ? 1.0 : min(_724, 1.0));
    float _732 = _720 - ((_720 * TEXCOORD_8.x) * _725);
    float _733 = _720 - ((_720 * TEXCOORD_8.y) * _725);
    float _734 = _720 - ((_720 * TEXCOORD_8.z) * _725);
    float _741 = (_732 * ((_554.x * cbMtdParam._m0[18u].x) - _529)) + _529;
    float _742 = (_733 * ((_554.y * cbMtdParam._m0[18u].y) - _532)) + _532;
    float _743 = (_734 * ((_554.z * cbMtdParam._m0[18u].z) - _535)) + _535;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _757 = _755.x;
    float _758 = 1.0 - _757;
    float _784 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_757 - _758) * cbMtdParam._m0[24u].w) + _758) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4026 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _785 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _793 = ((((cbMtdParam._m0[10u].x - _741) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _785) + _741;
    float _794 = ((((cbMtdParam._m0[10u].y - _742) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _785) + _742;
    float _795 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _743)) * _785) + _743;
    vec4 _821 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _823 = _821.x;
    float _840 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _823) * _443) + _823;
    float _857 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _840) * _516) + _840;
    float _861 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _857) * cbMtdParam._m0[19u].z) + _857;
    float _863 = _861 - (_861 * _732);
    float _865 = _863 - (_863 * _785);
    float _869 = (cbMtdParam._m0[19u].w * (_654.z - _629)) + _629;
    vec4 _883 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _890 = (_883.x * 2.0) + (-1.0);
    float _891 = (_883.y * 2.0) + (-1.0);
    float _892 = dot(vec2(_890, _891), vec2(_890, _891));
    float _4037 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _900 = ((_883.z - _869) * _732) + _869;
    float _903 = ((cbMtdParam._m0[23u].x - _900) * _785) + _900;
    vec4 _922 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _928 = (_922.x * 2.0) + (-1.0);
    float _929 = (_922.y * 2.0) + (-1.0);
    float _930 = dot(vec2(_928, _929), vec2(_928, _929));
    float _4048 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _945 = ((sqrt(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) - _640) * _734) + _640;
    float _948 = (((_890 - _666) * _732) + _666) + (cbMtdParam._m0[21u].x * _666);
    float _949 = (((_891 - _667) * _733) + _667) + (cbMtdParam._m0[21u].x * _667);
    float _960 = (((_928 - _948) + (_948 * cbMtdParam._m0[22u].z)) * _785) + _948;
    float _961 = (((_929 - _949) + (_949 * cbMtdParam._m0[22u].z)) * _785) + _949;
    float _962 = (_785 * (sqrt(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) - _945)) + _945;
    float _966 = cbMtdParam._m0[22u].x + _654.w;
    float _969 = fma(_962, _255, fma(_961, _262, _960 * _248));
    float _972 = fma(_962, _256, fma(_961, _263, _960 * _249));
    float _975 = fma(_962, _257, fma(_961, _264, _960 * _250));
    float _979 = inversesqrt(dot(vec3(_969, _972, _975), vec3(_969, _972, _975)));
    float _980 = _979 * _969;
    float _981 = _979 * _972;
    float _982 = _979 * _975;
    float _4059 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _983 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4081 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4092 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4103 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4114 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _988 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1002 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1052 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1042);
    float _1053 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1042);
    float _1054 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1042);
    float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
    float _1059 = _1052 * _1058;
    float _1060 = _1053 * _1058;
    float _1061 = _1054 * _1058;
    vec4 _1066 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1068 = _1066.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1240 = sqrt(((_1052 * _1052) + (_1053 * _1053)) + (_1054 * _1054));
        float _1246 = (cbMatDynParam._m0[5u].x * _1240) + cbMatDynParam._m0[5u].y;
        float _4125 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1251 = (cbMatDynParam._m0[5u].z * _1240) + cbMatDynParam._m0[5u].w;
        float _4136 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) - _1247)) + _1247) < ((_1068 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1079 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1080 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1098 = fma(_982, cbSceneParam._m0[5u].z, fma(_981, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _980));
    float _1101 = fma(_982, cbSceneParam._m0[6u].z, fma(_981, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _980));
    float _1104 = fma(_982, cbSceneParam._m0[7u].z, fma(_981, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _980));
    uint _1117 = _267 + 9u;
    uint _1118 = _1117 + uint(cbMatDynParam._m0[0u].w);
    float _1124 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_1118].x;
    float _1125 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * cbInstanceData._m0[_1118].y;
    float _1126 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * cbInstanceData._m0[_1118].z;
    float _4147 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1127 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1128 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1129 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _1130 = 1.0 - _988;
    float _1131 = _1127 * _1130;
    float _1132 = _1128 * _1130;
    float _1133 = _1129 * _1130;
    float _1138 = (_1127 + (-0.039999999105930328369140625)) * _988;
    float _1139 = (_1128 + (-0.039999999105930328369140625)) * _988;
    float _1140 = (_1129 + (-0.039999999105930328369140625)) * _988;
    float _1141 = _1138 + 0.039999999105930328369140625;
    float _1143 = _1139 + 0.039999999105930328369140625;
    float _1144 = _1140 + 0.039999999105930328369140625;
    vec4 _1153 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1079, cbSceneParam._m0[86u].y * _1080));
    float _1157 = ((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * TEXCOORD_5.w) * _1153.x;
    float _1158 = dot(vec3(_980, _981, _982), vec3(_1059, _1060, _1061));
    float _1161 = _1158 * 2.0;
    float _1165 = (_1161 * _980) - _1059;
    float _1166 = (_1161 * _981) - _1060;
    float _1167 = (_1161 * _982) - _1061;
    float _1171 = abs(dot(vec3(_1059, _1060, _1061), vec3(_980, _981, _982)));
    float _4180 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1173 = sqrt(_983);
    float _1186 = exp2((_1173 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1173 * 3.0));
    float _1192 = (1.0 - _1186) * ((_1173 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1193 = _1186 * _1173;
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1225 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1229 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1558;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1283 = fma(_1229, cbModelParam._m0[26u].z, fma(_1225, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1221));
        float _1287 = fma(_1229, cbModelParam._m0[27u].z, fma(_1225, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1221));
        float _1291 = fma(_1229, cbModelParam._m0[28u].z, fma(_1225, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1221));
        float _1316 = _1221 + _980;
        float _1317 = _1225 + _981;
        float _1318 = _1229 + _982;
        float _1328 = fma(_1318, cbModelParam._m0[26u].z, fma(_1317, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1316)) - _1283;
        float _1329 = fma(_1318, cbModelParam._m0[27u].z, fma(_1317, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1316)) - _1287;
        float _1330 = fma(_1318, cbModelParam._m0[28u].z, fma(_1317, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1316)) - _1291;
        float _1334 = inversesqrt(dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330)));
        float _1347 = ((_1334 * _1328) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1283 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1334 * _1329) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1287 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1334 * _1330) / cbModelParam._m0[34u].z) + ((((((_1291 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        float _1386 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1352.x + (-0.5));
        float _1388 = _1386 * (_1352.y + (-0.5));
        float _1389 = _1386 * (_1352.z + (-0.5));
        float _1396 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1359.x + (-0.5));
        float _1398 = _1396 * (_1359.y + (-0.5));
        float _1399 = _1396 * (_1359.z + (-0.5));
        float _1406 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1366.x + (-0.5));
        float _1408 = _1406 * (_1366.y + (-0.5));
        float _1409 = _1406 * (_1366.z + (-0.5));
        float _1416 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1373.x + (-0.5));
        float _1418 = _1416 * (_1373.y + (-0.5));
        float _1419 = _1416 * (_1373.z + (-0.5));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = _1387 * 0.5;
        float _1424 = _1397 * 0.5;
        float _1425 = _1407 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1440 = (dot(vec3(_980, _981, _982), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1450 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4228 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1452 + 1.0))) + _1457) * _1420;
        float _1467 = _1388 * 0.5;
        float _1468 = _1398 * 0.5;
        float _1469 = _1408 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_980, _981, _982), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4261 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1494 + 1.0))) + _1499) * _1421;
        float _1509 = _1389 * 0.5;
        float _1510 = _1399 * 0.5;
        float _1511 = _1409 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_980, _981, _982), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4294 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1536 + 1.0))) + _1541) * _1422;
        _1558 = _1389;
        _1560 = _1388;
        _1561 = _1387;
        _1562 = _1399;
        _1563 = _1398;
        _1564 = _1397;
        _1565 = _1409;
        _1566 = _1408;
        _1567 = _1407;
        _1568 = _1422;
        _1569 = _1421;
        _1570 = _1420;
        _1571 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1572 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1573 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
    }
    else
    {
        _1558 = _1559;
        _1560 = _1559;
        _1561 = _1559;
        _1562 = _1559;
        _1563 = _1559;
        _1564 = _1559;
        _1565 = _1559;
        _1566 = _1559;
        _1567 = _1559;
        _1568 = _1559;
        _1569 = _1559;
        _1570 = _1559;
        _1571 = 0.0;
        _1572 = 0.0;
        _1573 = 0.0;
    }
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1600 = fma(_1229, cbModelParam._m0[30u].z, fma(_1225, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1221));
        float _1604 = fma(_1229, cbModelParam._m0[31u].z, fma(_1225, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1221));
        float _1608 = fma(_1229, cbModelParam._m0[32u].z, fma(_1225, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1221));
        float _1631 = _1221 + _980;
        float _1632 = _1225 + _981;
        float _1633 = _1229 + _982;
        float _1643 = fma(_1633, cbModelParam._m0[30u].z, fma(_1632, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1631)) - _1600;
        float _1644 = fma(_1633, cbModelParam._m0[31u].z, fma(_1632, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1631)) - _1604;
        float _1645 = fma(_1633, cbModelParam._m0[32u].z, fma(_1632, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1631)) - _1608;
        float _1649 = inversesqrt(dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645)));
        float _1662 = ((_1649 * _1643) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1600 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1663 = ((_1649 * _1644) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1604 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1664 = ((_1649 * _1645) / cbModelParam._m0[35u].z) + ((((((_1608 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        float _1699 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1666.x + (-0.5));
        float _1701 = _1699 * (_1666.y + (-0.5));
        float _1702 = _1699 * (_1666.z + (-0.5));
        float _1709 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1673.x + (-0.5));
        float _1711 = _1709 * (_1673.y + (-0.5));
        float _1712 = _1709 * (_1673.z + (-0.5));
        float _1719 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1680.x + (-0.5));
        float _1721 = _1719 * (_1680.y + (-0.5));
        float _1722 = _1719 * (_1680.z + (-0.5));
        float _1729 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1687.x + (-0.5));
        float _1731 = _1729 * (_1687.y + (-0.5));
        float _1732 = _1729 * (_1687.z + (-0.5));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = _1700 * 0.5;
        float _1737 = _1710 * 0.5;
        float _1738 = _1720 * 0.5;
        float _1739 = dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738));
        float _1744 = (_1739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1739);
        float _1752 = (dot(vec3(_980, _981, _982), vec3(_1744 * _1736, _1744 * _1737, _1744 * _1738)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1763 = _1762 * 2.0;
        float _1767 = (1.0 - _1762) / (_1762 + 1.0);
        float _4357 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1777 = ((((1.0 - _1768) * (_1763 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1763 + 1.0))) + _1768) * _1733;
        float _1778 = _1701 * 0.5;
        float _1779 = _1711 * 0.5;
        float _1780 = _1721 * 0.5;
        float _1781 = dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780));
        float _1786 = (_1781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1781);
        float _1794 = (dot(vec3(_980, _981, _982), vec3(_1786 * _1778, _1786 * _1779, _1786 * _1780)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1803 = sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780)) / (_1734 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1805 = _1804 * 2.0;
        float _1809 = (1.0 - _1804) / (_1804 + 1.0);
        float _4390 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1819 = ((((1.0 - _1810) * (_1805 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1805 + 1.0))) + _1810) * _1734;
        float _1820 = _1702 * 0.5;
        float _1821 = _1712 * 0.5;
        float _1822 = _1722 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_980, _981, _982), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4401 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4412 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4423 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_1847 + 1.0))) + _1852) * _1735;
        _1869 = _1702;
        _1870 = _1701;
        _1871 = _1700;
        _1872 = _1712;
        _1873 = _1711;
        _1874 = _1710;
        _1875 = _1722;
        _1876 = _1721;
        _1877 = _1720;
        _1878 = _1735;
        _1879 = _1734;
        _1880 = _1733;
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)));
        _1882 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)));
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
    }
    else
    {
        _1869 = _1559;
        _1870 = _1559;
        _1871 = _1559;
        _1872 = _1559;
        _1873 = _1559;
        _1874 = _1559;
        _1875 = _1559;
        _1876 = _1559;
        _1877 = _1559;
        _1878 = _1559;
        _1879 = _1559;
        _1880 = _1559;
        _1881 = 0.0;
        _1882 = 0.0;
        _1883 = 0.0;
    }
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1571)) + _1571;
    float _1894 = (cbModelParam._m0[1u].x * (_1882 - _1572)) + _1572;
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1573)) + _1573;
    float _1916 = fma(_1895, cbSceneParam._m0[89u].z, fma(_1894, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1895, cbSceneParam._m0[90u].z, fma(_1894, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1895, cbSceneParam._m0[91u].z, fma(_1894, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1893));
    float _1937 = _1165 * 0.5;
    float _1938 = _1166 * 0.5;
    float _1939 = _1167 * 0.5;
    float _1940 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1943 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1870, _1873, _1876, _1879));
    float _1946 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1980;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1953 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1558, _1562, _1565, _1568));
        float _1957 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1560, _1563, _1566, _1569));
        float _1961 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1561, _1564, _1567, _1570));
        float _1968 = dot(vec4(cbModelParam._m0[39u]), vec4(_1937, _1938, _1939, 1.0));
        _1980 = dot(vec3(isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1968) ? 0.0 : (isnan(0.0) ? _1968 : max(0.0, _1968))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1980 = 1.0;
    }
    float _1991;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1982 = dot(vec4(cbModelParam._m0[40u]), vec4(_1937, _1938, _1939, 1.0));
        _1991 = dot(vec3(isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1982) ? 0.0 : (isnan(0.0) ? _1982 : max(0.0, _1982))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1991 = 1.0;
    }
    float _1995 = (_1991 * cbModelParam._m0[1u].x) + (_1980 * (1.0 - cbModelParam._m0[1u].x));
    float _2005 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _983);
    float _2006 = isnan(_2005) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2005 : min(cbModelParam._m0[25u].z, _2005));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2053 = fma(_1229, cbModelParam._m0[13u].z, fma(_1225, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1221)) + cbModelParam._m0[13u].w;
        float _2057 = fma(_1229, cbModelParam._m0[14u].z, fma(_1225, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1221)) + cbModelParam._m0[14u].w;
        float _2061 = fma(_1229, cbModelParam._m0[15u].z, fma(_1225, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1221)) + cbModelParam._m0[15u].w;
        float _2064 = fma(_1167, cbModelParam._m0[13u].z, fma(_1166, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1165));
        float _2067 = fma(_1167, cbModelParam._m0[14u].z, fma(_1166, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1165));
        float _2070 = fma(_1167, cbModelParam._m0[15u].z, fma(_1166, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1165));
        float _2098;
        if (_2064 > 0.0)
        {
            _2098 = abs((1.0 - _2053) / _2064);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2053 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2098 = frontier_phi_17_15_ladder;
        }
        float _2321;
        if (_2067 > 0.0)
        {
            _2321 = abs((1.0 - _2057) / _2067);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2057 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2321 = frontier_phi_26_22_ladder;
        }
        float _2578;
        if (_2070 > 0.0)
        {
            _2578 = abs((1.0 - _2061) / _2070);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2061 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2578 = frontier_phi_38_33_ladder;
        }
        float _2580 = isnan(_2321) ? _2098 : (isnan(_2098) ? _2321 : min(_2098, _2321));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _2064) + _2053;
        float _2586 = (_2581 * _2067) + _2057;
        float _2587 = (_2581 * _2070) + _2061;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2590 = (-1.0) - _2588;
        float _2592 = _2588 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2587 > _2592) || ((_2587 < _2590) || ((_2586 > _2592) || ((_2586 < _2590) || ((_2585 < _2590) || (_2585 > _2592))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2587, cbModelParam._m0[9u].z, fma(_2586, cbModelParam._m0[9u].y, _2585 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2587, cbModelParam._m0[10u].z, fma(_2586, cbModelParam._m0[10u].y, _2585 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2587, cbModelParam._m0[11u].z, fma(_2586, cbModelParam._m0[11u].y, _2585 * cbModelParam._m0[11u].x))), _2006);
            frontier_phi_16_38_ladder = _2715.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2715.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2715.x * cbModelParam._m0[1u].y;
        }
        _2086 = frontier_phi_16_38_ladder_2;
        _2088 = frontier_phi_16_38_ladder_1;
        _2090 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1165, _1166, _1167), _2006);
        _2086 = _2074.x * cbModelParam._m0[1u].y;
        _2088 = _2074.y * cbModelParam._m0[1u].y;
        _2090 = _2074.z * cbModelParam._m0[1u].y;
    }
    float _2094 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _983);
    float _2095 = isnan(_2094) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2094 : min(cbModelParam._m0[25u].w, _2094));
    float _2184;
    float _2186;
    float _2188;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2148 = fma(_1229, cbModelParam._m0[21u].z, fma(_1225, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1221)) + cbModelParam._m0[21u].w;
        float _2152 = fma(_1229, cbModelParam._m0[22u].z, fma(_1225, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1221)) + cbModelParam._m0[22u].w;
        float _2156 = fma(_1229, cbModelParam._m0[23u].z, fma(_1225, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1221)) + cbModelParam._m0[23u].w;
        float _2159 = fma(_1167, cbModelParam._m0[21u].z, fma(_1166, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1165));
        float _2162 = fma(_1167, cbModelParam._m0[22u].z, fma(_1166, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1165));
        float _2165 = fma(_1167, cbModelParam._m0[23u].z, fma(_1166, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1165));
        float _2326;
        if (_2159 > 0.0)
        {
            _2326 = abs((1.0 - _2148) / _2159);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2148 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2326 = frontier_phi_28_24_ladder;
        }
        float _2605;
        if (_2162 > 0.0)
        {
            _2605 = abs((1.0 - _2152) / _2162);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2152 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2605 = frontier_phi_40_35_ladder;
        }
        float _2818;
        if (_2165 > 0.0)
        {
            _2818 = abs((1.0 - _2156) / _2165);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2165 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2156 + 1.0) / _2165);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2818 = frontier_phi_49_46_ladder;
        }
        float _2820 = isnan(_2605) ? _2326 : (isnan(_2326) ? _2605 : min(_2326, _2605));
        float _2821 = isnan(_2818) ? _2820 : (isnan(_2820) ? _2818 : min(_2820, _2818));
        float _2825 = (_2821 * _2159) + _2148;
        float _2826 = (_2821 * _2162) + _2152;
        float _2827 = (_2821 * _2165) + _2156;
        float _2828 = _2821 * 9.9999997473787516355514526367188e-05;
        float _2829 = (-1.0) - _2828;
        float _2831 = _2828 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2827 > _2831) || ((_2827 < _2829) || ((_2826 > _2831) || ((_2826 < _2829) || ((_2825 < _2829) || (_2825 > _2831))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3026 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2827, cbModelParam._m0[17u].z, fma(_2826, cbModelParam._m0[17u].y, _2825 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2827, cbModelParam._m0[18u].z, fma(_2826, cbModelParam._m0[18u].y, _2825 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2827, cbModelParam._m0[19u].z, fma(_2826, cbModelParam._m0[19u].y, _2825 * cbModelParam._m0[19u].x))), _2095);
            frontier_phi_25_49_ladder = _3026.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3026.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3026.x * cbModelParam._m0[1u].z;
        }
        _2184 = frontier_phi_25_49_ladder_2;
        _2186 = frontier_phi_25_49_ladder_1;
        _2188 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2168 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1165, _1166, _1167), _2095);
        _2184 = _2168.x * cbModelParam._m0[1u].z;
        _2186 = _2168.y * cbModelParam._m0[1u].z;
        _2188 = _2168.z * cbModelParam._m0[1u].z;
    }
    float _2201 = (((_1192 * _1141) + _1193) * _1157) * ((cbModelParam._m0[1u].w * (_2184 - _2086)) + _2086);
    float _2203 = (((_1192 * _1143) + _1193) * _1157) * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2205 = (((_1192 * _1144) + _1193) * _1157) * ((cbModelParam._m0[1u].w * (_2188 - _2090)) + _2090);
    float _2208 = fma(_2205, cbSceneParam._m0[89u].z, fma(_2203, cbSceneParam._m0[89u].y, _2201 * cbSceneParam._m0[89u].x));
    float _2211 = fma(_2205, cbSceneParam._m0[90u].z, fma(_2203, cbSceneParam._m0[90u].y, _2201 * cbSceneParam._m0[90u].x));
    float _2214 = fma(_2205, cbSceneParam._m0[91u].z, fma(_2203, cbSceneParam._m0[91u].y, _2201 * cbSceneParam._m0[91u].x));
    vec4 _2222 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1079, _1080));
    float _2224 = _2222.w;
    float _2236 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2224);
    float _2237 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2224);
    float _2238 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2224);
    uvec4 _2242 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2244 = _2242.x * 14u;
    uint _2245 = _2244 + 13u;
    float _2252 = _1157 + (-1.0);
    float _2257 = (cbLight._m0[_2245].x * _2252) + 1.0;
    float _2258 = (cbLight._m0[_2245].y * _2252) + 1.0;
    float _2259 = (cbLight._m0[_2245].z * _2252) + 1.0;
    float _2260 = (cbLight._m0[_2245].w * _2252) + 1.0;
    uint _2261 = _2244 + 5u;
    float _2267 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2271 = _2244 + 4u;
    float _2280 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2284 = _2244 | 1u;
    float _2295 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_980, _981, _982));
    float _2298 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_980, _981, _982));
    float _4559 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _4570 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2303 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * 0.3183098733425140380859375;
    float _2305 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * 0.3183098733425140380859375;
    float _2312 = ((cbLight._m0[_2261].x * _2267) * _2305) + (((cbLight._m0[_2271].x * _2236) * _2280) * _2303);
    float _2313 = ((_2267 * cbLight._m0[_2261].y) * _2305) + (((cbLight._m0[_2271].y * _2237) * _2280) * _2303);
    float _2314 = ((_2267 * cbLight._m0[_2261].z) * _2305) + (((cbLight._m0[_2271].z * _2238) * _2280) * _2303);
    uvec4 _2318 = floatBitsToUint(cbLight._m0[_2244 + 12u]);
    bool _2320 = _2318.x == 0u;
    float _2331;
    float _2333;
    float _2335;
    if (_2320)
    {
        _2331 = _2312;
        _2333 = _2313;
        _2335 = _2314;
    }
    else
    {
        uint _2339 = _2244 + 6u;
        float _2355 = (dot(vec3(cbLight._m0[_2244 + 2u].xyz), vec3(_980, _981, _982)) * 0.5) + 0.5;
        float _2356 = _2355 * _2355;
        float _4581 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2357 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2358 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2331 = (((cbLight._m0[_2339].x * 0.3183098733425140380859375) * _2357) * _2358) + _2312;
        _2333 = (((cbLight._m0[_2339].y * 0.3183098733425140380859375) * _2357) * _2358) + _2313;
        _2335 = (((cbLight._m0[_2339].z * 0.3183098733425140380859375) * _2357) * _2358) + _2314;
    }
    bool _2338 = _2318.y == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2338)
    {
        _2376 = _2331;
        _2378 = _2333;
        _2380 = _2335;
    }
    else
    {
        uint _2549 = _2244 + 7u;
        float _2565 = (dot(vec3(cbLight._m0[_2244 + 3u].xyz), vec3(_980, _981, _982)) * 0.5) + 0.5;
        float _2566 = _2565 * _2565;
        float _4597 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2567 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2568 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2376 = (((cbLight._m0[_2549].x * 0.3183098733425140380859375) * _2567) * _2568) + _2331;
        _2378 = (((cbLight._m0[_2549].y * 0.3183098733425140380859375) * _2567) * _2568) + _2333;
        _2380 = (((cbLight._m0[_2549].z * 0.3183098733425140380859375) * _2567) * _2568) + _2335;
    }
    uint _2383 = _2244 + 8u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _983) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2244].x + _1059;
    float _2399 = cbLight._m0[_2244].y + _1060;
    float _2400 = cbLight._m0[_2244].z + _1061;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2244].xyz));
    float _4613 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _4624 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _2412 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2413 = dot(vec3(_980, _981, _982), vec3(_2405, _2406, _2407));
    float _4635 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2405, _2406, _2407));
    float _4646 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2397 * _2397;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
    float _2434 = 0.959999978542327880859375 - _1138;
    float _2436 = 0.959999978542327880859375 - _1139;
    float _2437 = 0.959999978542327880859375 - _1140;
    float _2444 = 1.0 - _2397;
    float _2455 = (0.5 / (((_2412 * ((_2411 * _2444) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2444) + _2397) * _2411))) * _2411;
    float _4657 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    uint _2471 = _2244 + 9u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _983) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2284].x + _1059;
    float _2485 = cbLight._m0[_2284].y + _1060;
    float _2486 = cbLight._m0[_2284].z + _1061;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2284].xyz));
    float _4668 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _2498 = dot(vec3(_980, _981, _982), vec3(_2491, _2492, _2493));
    float _4679 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2502 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2491, _2492, _2493));
    float _4690 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = _2483 * _2483;
    float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
    float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
    float _2524 = 1.0 - _2483;
    float _2534 = (0.5 / (((_2412 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2524) + _2483) * _2497))) * _2497;
    float _4701 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
    float _2546 = (((((_2517 * _2434) + _1141) * cbLight._m0[_2471].x) * _2536) * _2267) + ((((cbLight._m0[_2383].x * _2236) * ((_2433 * _2434) + _1141)) * _2457) * _2280);
    float _2547 = (((((_2517 * _2436) + _1143) * cbLight._m0[_2471].y) * _2536) * _2267) + ((((cbLight._m0[_2383].y * _2237) * ((_2433 * _2436) + _1143)) * _2457) * _2280);
    float _2548 = (((((_2517 * _2437) + _1144) * cbLight._m0[_2471].z) * _2536) * _2267) + ((((cbLight._m0[_2383].z * _2238) * ((_2433 * _2437) + _1144)) * _2457) * _2280);
    float _2610;
    float _2612;
    float _2614;
    if (_2320)
    {
        _2610 = _2546;
        _2612 = _2547;
        _2614 = _2548;
    }
    else
    {
        uint _2616 = _2244 + 2u;
        uint _2620 = _2244 + 10u;
        float _2634 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2616].w)) * _983) * 0.949999988079071044921875);
        float _2635 = _2634 * _2634;
        float _2636 = cbLight._m0[_2616].x + _1059;
        float _2637 = cbLight._m0[_2616].y + _1060;
        float _2638 = cbLight._m0[_2616].z + _1061;
        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
        float _2643 = _2642 * _2636;
        float _2644 = _2642 * _2637;
        float _2645 = _2642 * _2638;
        float _2646 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2616].xyz));
        float _4712 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2650 = dot(vec3(_980, _981, _982), vec3(_2643, _2644, _2645));
        float _4723 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2654 = dot(vec3(cbLight._m0[_2616].xyz), vec3(_2643, _2644, _2645));
        float _4734 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2658 = _2635 * _2635;
        float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
        float _2669 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
        float _2676 = 1.0 - _2635;
        float _2686 = (0.5 / (((_2412 * ((_2649 * _2676) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2676) + _2635) * _2649))) * _2649;
        float _4745 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2688 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
        float _2689 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2610 = (((((_2669 * _2434) + _1141) * cbLight._m0[_2620].x) * _2688) * _2689) + _2546;
        _2612 = (((((_2669 * _2436) + _1143) * cbLight._m0[_2620].y) * _2688) * _2689) + _2547;
        _2614 = (((((_2669 * _2437) + _1144) * cbLight._m0[_2620].z) * _2688) * _2689) + _2548;
    }
    float _2724;
    float _2726;
    float _2728;
    if (_2338)
    {
        _2724 = _2610;
        _2726 = _2612;
        _2728 = _2614;
    }
    else
    {
        uint _2735 = _2244 + 3u;
        uint _2739 = _2244 + 11u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _983) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _1059;
        float _2756 = cbLight._m0[_2735].y + _1060;
        float _2757 = cbLight._m0[_2735].z + _1061;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_980, _981, _982), vec3(cbLight._m0[_2735].xyz));
        float _4761 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2769 = dot(vec3(_980, _981, _982), vec3(_2762, _2763, _2764));
        float _4772 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2788 = exp2(log2(1.0 - (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) * 5.0);
        float _2795 = 1.0 - _2754;
        float _2805 = (0.5 / (((_2412 * ((_2768 * _2795) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2795) + _2754) * _2768))) * _2768;
        float _4794 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2724 = (((((_2788 * _2434) + _1141) * cbLight._m0[_2739].x) * _2807) * _2808) + _2610;
        _2726 = (((((_2788 * _2436) + _1143) * cbLight._m0[_2739].y) * _2807) * _2808) + _2612;
        _2728 = (((((_2788 * _2437) + _1144) * cbLight._m0[_2739].z) * _2807) * _2808) + _2614;
    }
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_2242.y == 0u)
    {
        float _2883 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2884 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2883;
        float _2885 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2883;
        float _2886 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2883;
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.x;
        uint _2910 = uint((float(_2898.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1080) / _2899))) + floor(float(uint(cbSceneParam._m0[85u].x * _1079) / _2899)));
        float _2920 = (log2(_2886 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2921 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        uint _2924 = uint(isnan(14.0) ? _2921 : (isnan(_2921) ? 14.0 : min(_2921, 14.0)));
        uvec4 _2929 = texelFetch(g_lightClusterGridBuffer, int(((_2924 << 2u) + (_2910 << 6u)) >> 2u));
        uint _2930 = _2929.x;
        uint _2931 = _2898.z;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((((1u << ((_2931 >> 4u) & 15u)) + 4294967295u) & _2930) == 0u) || ((_2931 & 240u) == 0u))
        {
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
        }
        else
        {
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            uint _3189 = 0u;
            uint _3198;
            bool _3199;
            for (;;)
            {
                _3198 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                _3199 = _3198 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3199)
                {
                    frontier_phi_66_pred = _3183;
                    frontier_phi_66_pred_1 = _3188;
                    frontier_phi_66_pred_2 = _3187;
                    frontier_phi_66_pred_3 = _3186;
                    frontier_phi_66_pred_4 = _3185;
                    frontier_phi_66_pred_5 = _3184;
                }
                else
                {
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    uint _3334;
                    _3328 = _3183;
                    _3329 = _3184;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3198;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    for (;;)
                    {
                        uint _3338 = uint(findLSB(_3334)) + (_3189 << 5u);
                        uint _3335 = (_3334 + 4294967295u) & _3334;
                        uint _3340 = _3338 * 48u;
                        vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3360 = (_3338 * 48u) + 4u;
                        vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3360)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 3u)).x));
                        uint _3379 = (_3338 * 48u) + 8u;
                        vec3 _3390 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x));
                        float _3394 = _3354.x - _2884;
                        float _3395 = _3354.y - _2885;
                        float _3396 = _3354.z - _2886;
                        float _3397 = dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396));
                        float _3400 = inversesqrt(_3397);
                        float _3401 = _3400 * _3394;
                        float _3402 = _3400 * _3395;
                        float _3403 = _3400 * _3396;
                        float _3404 = dot(vec3(_1098, _1101, _1104), vec3(_3401, _3402, _3403));
                        float _3409 = 1.0 - (_3397 * _3354.w);
                        float _4820 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3410 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3411 = sqrt(_3397) * _3373.w;
                        float _3414 = 1.39999997615814208984375 / (_3411 + 1.39999997615814208984375);
                        float _3415 = _3414 * _3414;
                        float _3418 = ((1.0 - _3415) * _3404) + _3415;
                        float _3421 = _3411 * _3411;
                        float _3425 = ((isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))) * _3410) / ((_3421 * 0.699999988079071044921875) + 1.0);
                        float _3429 = (-0.0) - _2884;
                        float _3430 = (-0.0) - _2885;
                        float _3431 = (-0.0) - _2886;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3436 = _3435 * _3429;
                        float _3437 = _3435 * _3430;
                        float _3438 = _3435 * _3431;
                        float _3446 = exp2(log2(1.0 / ((_3421 * 3.5) + 5.0)) * 0.25);
                        float _3447 = 1.0 - _1173;
                        float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                        float _3455 = _3454 * _3454;
                        float _3456 = _3455 * _3455;
                        float _3457 = _3436 + _3401;
                        float _3458 = _3437 + _3402;
                        float _3459 = _3438 + _3403;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3467 = dot(vec3(_1098, _1101, _1104), vec3(_3436, _3437, _3438));
                        float _4836 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3470 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3471 = dot(vec3(_1098, _1101, _1104), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                        float _4847 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                        float _3479 = _3414 * _3455;
                        float _3480 = _3479 * _3479;
                        float _3483 = ((1.0 - _3480) * _3404) + _3480;
                        float _4858 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3484 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3485 = 1.0 - _3455;
                        float _3495 = (0.5 / (((_3484 * ((_3470 * _3485) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3484 * _3485) + _3455) * _3470))) * _3484;
                        float _4869 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3506 = (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) / ((_3478 * _3478) * ((_3421 * 2.1991131305694580078125) + 3.141590118408203125))) * _3410;
                        _3258 = (_3425 * _3373.x) + _3331;
                        _3259 = (_3425 * _3373.y) + _3332;
                        _3260 = (_3425 * _3373.z) + _3333;
                        _3255 = (_3506 * _3390.x) + _3328;
                        _3256 = (_3506 * _3390.y) + _3329;
                        _3257 = (_3506 * _3390.z) + _3330;
                        if (_3335 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3335;
                        }
                    }
                    frontier_phi_66_pred = _3255;
                    frontier_phi_66_pred_1 = _3260;
                    frontier_phi_66_pred_2 = _3259;
                    frontier_phi_66_pred_3 = _3258;
                    frontier_phi_66_pred_4 = _3257;
                    frontier_phi_66_pred_5 = _3256;
                }
                _3032 = frontier_phi_66_pred;
                _3042 = frontier_phi_66_pred_1;
                _3040 = frontier_phi_66_pred_2;
                _3038 = frontier_phi_66_pred_3;
                _3036 = frontier_phi_66_pred_4;
                _3034 = frontier_phi_66_pred_5;
                uint _3190 = _3189 + 1u;
                if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3183 = _3032;
                    _3184 = _3034;
                    _3185 = _3036;
                    _3186 = _3038;
                    _3187 = _3040;
                    _3188 = _3042;
                    _3189 = _3190;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
        }
        uvec4 _3045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3046 = _3045.z;
        uint _3048 = (_3046 >> 8u) & 15u;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        if (((4294967295u << _3048) & _2930) == 0u)
        {
            _3151 = _3031;
            _3153 = _3033;
            _3155 = _3035;
            _3157 = _3037;
            _3159 = _3039;
            _3161 = _3041;
        }
        else
        {
            float _3176 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
            float _3177 = _3176 * _2884;
            float _3178 = _3176 * _2885;
            float _3179 = _3176 * _2886;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3048 < ((_3046 >> 12u) & 15u))
            {
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3311 = _3031;
                float _3312 = _3033;
                float _3313 = _3035;
                float _3314 = _3037;
                float _3315 = _3039;
                float _3316 = _3041;
                uint _3317 = _3048;
                uint _3326;
                bool _3327;
                for (;;)
                {
                    _3326 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3317 << 2u)) >> 2u)).x;
                    _3327 = _3326 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3327)
                    {
                        frontier_phi_77_pred = _3316;
                        frontier_phi_77_pred_1 = _3315;
                        frontier_phi_77_pred_2 = _3314;
                        frontier_phi_77_pred_3 = _3313;
                        frontier_phi_77_pred_4 = _3312;
                        frontier_phi_77_pred_5 = _3311;
                    }
                    else
                    {
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3533 = _3311;
                        float _3534 = _3312;
                        float _3535 = _3313;
                        float _3536 = _3314;
                        float _3537 = _3315;
                        float _3538 = _3316;
                        uint _3539 = _3326;
                        uint _3540;
                        vec4 _3565;
                        float _3566;
                        vec4 _3581;
                        vec3 _3593;
                        vec4 _3608;
                        vec4 _3623;
                        float _3669;
                        bool _3670;
                        for (;;)
                        {
                            uint _3550 = ((_3317 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3539));
                            _3540 = (_3539 + 4294967295u) & _3539;
                            uint _3552 = _3550 * 40u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3566 = _3565.w;
                            uint _3568 = (_3550 * 40u) + 4u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3550 * 40u) + 8u;
                            _3593 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x));
                            uint _3595 = (_3550 * 40u) + 16u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3550 * 40u) + 20u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3550 * 40u) + 24u;
                            vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3644 = (_3550 * 40u) + 28u;
                            vec4 _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            _3669 = fma(_2886, _3657.z, fma(_2885, _3657.y, _3657.x * _2884)) + _3657.w;
                            _3670 = !((fma(_2886, _3638.z, fma(_2885, _3638.y, _3638.x * _2884)) + _3638.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3670)
                            {
                                float _3697 = _3565.x - _2884;
                                float _3698 = _3565.y - _2885;
                                float _3699 = _3565.z - _2886;
                                float _3700 = dot(vec3(_3697, _3698, _3699), vec3(_3697, _3698, _3699));
                                float _3703 = inversesqrt(_3700);
                                float _3704 = _3703 * _3697;
                                float _3705 = _3703 * _3698;
                                float _3706 = _3703 * _3699;
                                float _3710 = 1.0 - (_3700 / (_3566 * _3566));
                                float _4880 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3711 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3715 = sqrt(_3700) * _3581.w;
                                float _3717 = 1.39999997615814208984375 / (_3715 + 1.39999997615814208984375);
                                float _3718 = _3717 * _3717;
                                float _3721 = ((1.0 - _3718) * dot(vec3(_3704, _3705, _3706), vec3(_1098, _1101, _1104))) + _3718;
                                float _3724 = _3715 * _3715;
                                float _3728 = (fma(_2886, _3608.z, fma(_2885, _3608.y, _3608.x * _2884)) + _3608.w) / _3669;
                                float _3729 = (fma(_2886, _3623.z, fma(_2885, _3623.y, _3623.x * _2884)) + _3623.w) / _3669;
                                float _3733 = 1.0 - dot(vec2(_3728, _3729), vec2(_3728, _3729));
                                float _4896 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3735 = _3734 * (((isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0))) * _3711) / ((_3724 * 0.699999988079071044921875) + 1.0));
                                float _3747 = exp2(log2(1.0 / ((_3724 * 3.5) + 5.0)) * 0.25);
                                float _3748 = 1.0 - _1173;
                                float _3755 = sqrt(1.0 - ((1.0 - (_3748 * _3748)) * (1.0 - (_3747 * _3747))));
                                float _3756 = _3755 * _3755;
                                float _3757 = _3756 * _3756;
                                float _3758 = _3704 - _3177;
                                float _3759 = _3705 - _3178;
                                float _3760 = _3706 - _3179;
                                float _3764 = inversesqrt(dot(vec3(_3758, _3759, _3760), vec3(_3758, _3759, _3760)));
                                float _3768 = dot(vec3(_1098, _1101, _1104), vec3((-0.0) - _3177, (-0.0) - _3178, (-0.0) - _3179));
                                float _4907 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3771 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3772 = dot(vec3(_1098, _1101, _1104), vec3(_3764 * _3758, _3764 * _3759, _3764 * _3760));
                                float _4918 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3775 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3779 = ((_3775 * _3775) * (_3757 + (-1.0))) + 1.0;
                                float _3780 = _3717 * _3756;
                                float _3781 = _3780 * _3780;
                                float _3787 = ((1.0 - _3781) * dot(vec3(_1098, _1101, _1104), vec3(_3704, _3705, _3706))) + _3781;
                                float _4929 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3789 = 1.0 - _3756;
                                float _3799 = (0.5 / (((_3788 * ((_3771 * _3789) + _3756)) + 9.9999999392252902907785028219223e-09) + (((_3788 * _3789) + _3756) * _3771))) * _3788;
                                float _4940 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3809 = (_3734 * _3711) * (((_3757 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3779 * _3779) * ((_3724 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3735 * _3581.y;
                                frontier_phi_83_pred_1 = _3735 * _3581.x;
                                frontier_phi_83_pred_2 = _3809 * _3593.z;
                                frontier_phi_83_pred_3 = _3809 * _3593.y;
                                frontier_phi_83_pred_4 = _3809 * _3593.x;
                                frontier_phi_83_pred_5 = _3735 * _3581.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3817 = frontier_phi_83_pred;
                            _3816 = frontier_phi_83_pred_1;
                            _3815 = frontier_phi_83_pred_2;
                            _3814 = frontier_phi_83_pred_3;
                            _3813 = frontier_phi_83_pred_4;
                            _3818 = frontier_phi_83_pred_5;
                            _3523 = _3816 + _3536;
                            _3524 = _3817 + _3537;
                            _3525 = _3818 + _3538;
                            _3520 = _3813 + _3533;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            if (_3540 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3540;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3525;
                        frontier_phi_77_pred_1 = _3524;
                        frontier_phi_77_pred_2 = _3523;
                        frontier_phi_77_pred_3 = _3522;
                        frontier_phi_77_pred_4 = _3521;
                        frontier_phi_77_pred_5 = _3520;
                    }
                    _3162 = frontier_phi_77_pred;
                    _3160 = frontier_phi_77_pred_1;
                    _3158 = frontier_phi_77_pred_2;
                    _3156 = frontier_phi_77_pred_3;
                    _3154 = frontier_phi_77_pred_4;
                    _3152 = frontier_phi_77_pred_5;
                    uint _3318 = _3317 + 1u;
                    if (_3318 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3311 = _3152;
                        _3312 = _3154;
                        _3313 = _3156;
                        _3314 = _3158;
                        _3315 = _3160;
                        _3316 = _3162;
                        _3317 = _3318;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3156;
                frontier_phi_58_59_ladder_1 = _3162;
                frontier_phi_58_59_ladder_2 = _3160;
                frontier_phi_58_59_ladder_3 = _3158;
                frontier_phi_58_59_ladder_4 = _3154;
                frontier_phi_58_59_ladder_5 = _3152;
            }
            else
            {
                frontier_phi_58_59_ladder = _3035;
                frontier_phi_58_59_ladder_1 = _3041;
                frontier_phi_58_59_ladder_2 = _3039;
                frontier_phi_58_59_ladder_3 = _3037;
                frontier_phi_58_59_ladder_4 = _3033;
                frontier_phi_58_59_ladder_5 = _3031;
            }
            _3151 = frontier_phi_58_59_ladder_5;
            _3153 = frontier_phi_58_59_ladder_4;
            _3155 = frontier_phi_58_59_ladder;
            _3157 = frontier_phi_58_59_ladder_3;
            _3159 = frontier_phi_58_59_ladder_2;
            _3161 = frontier_phi_58_59_ladder_1;
        }
        float _3166 = isnan(1.0) ? _1157 : (isnan(_1157) ? 1.0 : min(_1157, 1.0));
        _2943 = (_3166 * _3157) + _2376;
        _2945 = (_3166 * _3159) + _2378;
        _2947 = (_3166 * _3161) + _2380;
        _2949 = ((_3151 * _1141) * _3166) + _2724;
        _2951 = ((_3153 * _1143) * _3166) + _2726;
        _2953 = ((_3155 * _1144) * _3166) + _2728;
    }
    else
    {
        _2943 = _2376;
        _2945 = _2378;
        _2947 = _2380;
        _2949 = _2724;
        _2951 = _2726;
        _2953 = _2728;
    }
    float _4956 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _4967 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _4978 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2970 = ((isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2943 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1157))) + ((_2949 + ((isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0))) * _1995)) * cbPerFrame._m0[3u].x);
    float _2971 = ((isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * (_2945 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1157))) + ((_2951 + ((isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))) * _1995)) * cbPerFrame._m0[3u].x);
    float _2972 = ((isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2947 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1157))) + ((_2953 + ((isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0))) * _1995)) * cbPerFrame._m0[3u].x);
    uint _2973 = _267 + 6u;
    float _2981 = _1079 / cbSceneParam._m0[86u].x;
    float _2982 = _1080 / cbSceneParam._m0[86u].y;
    vec4 _2996 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, (log2((isnan(cbSceneParam._m0[77u].w) ? _1002 : (isnan(_1002) ? cbSceneParam._m0[77u].w : min(_1002, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2998 = _2996.x;
    float _2999 = _2996.y;
    float _3000 = _2996.z;
    float _3001 = _2996.w;
    float _3093;
    float _3095;
    float _3097;
    float _3099;
    if (_1002 > cbSceneParam._m0[78u].w)
    {
        float _3056 = isnan(_1002) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1002 : min(cbSceneParam._m0[80u].w, _1002));
        float _3057 = _3056 / _1002;
        float _3068 = _3057 * _1052;
        float _3069 = _1053 * _3057;
        float _3070 = (-0.0) - _3069;
        float _3071 = _3057 * _1054;
        float _3073 = (cbSceneParam._m0[77u].w * _3070) / _3056;
        float _3074 = _3073 + cbSceneParam._m0[79u].w;
        float _3075 = cbSceneParam._m0[79u].w - _3069;
        float _3081 = sqrt(((_3068 * _3068) + (_3069 * _3069)) + (_3071 * _3071));
        float _3084 = (1.0 - (cbSceneParam._m0[77u].w / _3056)) * _3081;
        float _3089 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3091 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3268;
        if (abs((_3070 - _3073) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3268 = ((((_3074 > 0.0) ? exp2(_3089 * _3074) : (2.0 - exp2(_3091 * _3074))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3084;
        }
        else
        {
            float _3212 = 1.0 / cbSceneParam._m0[80u].x;
            float _3213 = isnan(_3075) ? _3074 : (isnan(_3074) ? _3075 : max(_3074, _3075));
            float _3214 = isnan(_3075) ? _3074 : (isnan(_3074) ? _3075 : min(_3074, _3075));
            float _3223 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : min(_3213, 0.0));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            _3268 = ((abs(_3081 / _3070) * cbSceneParam._m0[80u].y) * ((((_3223 - _3224) * 2.0) - ((exp2(_3089 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0)))) - exp2(_3089 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))))) * _3212)) - ((exp2(_3091 * _3223) - exp2(_3091 * _3224)) * _3212))) + (_3084 * cbSceneParam._m0[80u].z);
        }
        vec4 _3270 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, 1.0), 0.0);
        float _3279 = exp2((_3268 * (-1.44269502162933349609375)) * (1.0 - _3270.w));
        float _3280 = log2(_3279);
        float _3296 = log2(_3001);
        _3093 = (exp2(_3296 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].x)) * _3270.x) / cbSceneParam._m0[78u].x)) + _2998;
        _3095 = (exp2(_3296 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].y)) * _3270.y) / cbSceneParam._m0[78u].y)) + _2999;
        _3097 = (exp2(_3296 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].z)) * _3270.z) / cbSceneParam._m0[78u].z)) + _3000;
        _3099 = _3279 * _3001;
    }
    else
    {
        _3093 = _2998;
        _3095 = _2999;
        _3097 = _3000;
        _3099 = _3001;
    }
    bool _3306;
    vec4 _3109;
    vec4 _3131;
    float _3133;
    float _3137;
    float _3138;
    float _3139;
    float _3140;
    bool _3150;
    for (;;)
    {
        _3109 = cbMatDynParam._m0[0u];
        float _3111 = roundEven(_3109.y);
        bool _3112 = _3111 == 3.0;
        float _3113 = log2(_3099);
        float _3120 = exp2(_3113 * cbSceneParam._m0[78u].x) * _2970;
        float _3121 = exp2(_3113 * cbSceneParam._m0[78u].y) * _2971;
        float _3122 = exp2(_3113 * cbSceneParam._m0[78u].z) * _2972;
        float _3129 = _1068 + (-0.5);
        _3131 = cbMtdParam._m0[1u];
        _3133 = _3131.y * _3129;
        float _3136 = (_3111 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3137 = _3136 * (_3112 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3093)));
        _3138 = _3136 * (_3112 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3095)));
        _3139 = _3136 * (_3112 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3097)));
        _3140 = _3129 * 0.999000012874603271484375;
        _3150 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3150)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3140) < 0.5)
            {
                _3306 = true;
                break;
            }
        }
        uint _3247 = _1117 + uint(_3109.w);
        if ((cbInstanceData._m0[_3247].w < 1.0) && ((cbInstanceData._m0[_3247].w + _3140) < 0.5))
        {
            _3306 = true;
            break;
        }
        if ((_3133 + 1.0) < _3131.x)
        {
            _3306 = true;
            break;
        }
        _3306 = false;
        break;
    }
    float _3511;
    if (_3306)
    {
        discard_state = true;
        _3511 = 0.0;
    }
    else
    {
        _3511 = cbInstanceData._m0[_2973].w;
    }
    SV_Target.x = _3137;
    SV_Target.y = _3138;
    SV_Target.z = _3139;
    SV_Target.w = _3511;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2973].w;
    discard_exit();
}


