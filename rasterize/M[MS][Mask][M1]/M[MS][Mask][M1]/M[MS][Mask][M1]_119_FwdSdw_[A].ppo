#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1750;
float _4411;
float _4412;
float _4413;
float _4414;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _260 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _261 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _262 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _268 = inversesqrt(dot(vec3(_260, _261, _262), vec3(_260, _261, _262)));
    float _275 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _282 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _296 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _297 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4423 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4434 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _4445 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    uint _307 = uint(roundEven(NORMAL.w)) * 13u;
    uint _312 = _307 + 1u;
    uint _316 = _307 + 2u;
    float _325 = sqrt(((cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x) + (cbInstanceData._m0[_307].x * cbInstanceData._m0[_307].x)) + (cbInstanceData._m0[_316].x * cbInstanceData._m0[_316].x));
    float _326 = _325 * TEXCOORD.z;
    float _327 = _325 * TEXCOORD.w;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _326) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _327) + cbTextureTilingScale._m0[13u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _394 = _389.x * cbMtdParam._m0[11u].x;
    float _395 = _389.y * cbMtdParam._m0[11u].y;
    float _396 = _389.z * cbMtdParam._m0[11u].z;
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _326) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _327) + cbTextureTilingScale._m0[5u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _483 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _500 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _434.x) * 2.0) - ((((_471 - _483) * cbMtdParam._m0[23u].w) + _483) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4456 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _508 = (_501 * ((_415.x * cbMtdParam._m0[12u].x) - _394)) + _394;
    float _509 = (_501 * ((_415.y * cbMtdParam._m0[12u].y) - _395)) + _395;
    float _510 = (_501 * ((_415.z * cbMtdParam._m0[12u].z) - _396)) + _396;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _326) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _327) + cbTextureTilingScale._m0[3u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _549 = _547.x;
    float _559 = dot(vec4(_549, _547.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _573 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _434.y) * 2.0) - ((((_549 - _559) * cbMtdParam._m0[23u].w) + _559) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4467 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _581 = (_574 * ((_527.x * cbMtdParam._m0[13u].x) - _508)) + _508;
    float _582 = (_574 * ((_527.y * cbMtdParam._m0[13u].y) - _509)) + _509;
    float _583 = (_574 * ((_527.z * cbMtdParam._m0[13u].z) - _510)) + _510;
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _326) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _327) + cbTextureTilingScale._m0[24u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _621 = _619.x;
    float _631 = dot(vec4(_621, _619.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _643 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _434.z) * 2.0) - ((((_621 - _631) * cbMtdParam._m0[23u].w) + _631) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4478 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _654 = (_363.x * cbMtdParam._m0[9u].x) * ((_644 * ((_602.x * cbMtdParam._m0[14u].x) - _581)) + _581);
    float _655 = (_363.y * cbMtdParam._m0[9u].y) * ((_644 * ((_602.y * cbMtdParam._m0[14u].y) - _582)) + _582);
    float _656 = (_363.z * cbMtdParam._m0[9u].z) * ((_644 * ((_602.z * cbMtdParam._m0[14u].z) - _583)) + _583);
    float _660 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _340.x) * _654;
    float _663 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _340.y) * _655;
    float _666 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _340.z) * _656;
    float _674 = (((_654 - _660) * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) + _660) * 4.55000019073486328125;
    float _676 = (((_655 - _663) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) + _663) * 4.55000019073486328125;
    float _678 = (((_656 - _666) * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) + _666) * 4.55000019073486328125;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _326) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _327) + cbTextureTilingScale._m0[20u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _326) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _327) + cbTextureTilingScale._m0[4u].w));
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _737 = _735.x;
    float _738 = _735.y;
    float _739 = _735.z;
    float _746 = ((_718.x - _737) * _501) + _737;
    float _747 = ((_718.y - _738) * _501) + _738;
    float _748 = ((_718.z - _739) * _501) + _739;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _326) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _327) + cbTextureTilingScale._m0[2u].w));
    float _771 = ((_760.x - _746) * _574) + _746;
    float _772 = ((_760.y - _747) * _574) + _747;
    float _773 = ((_760.z - _748) * _574) + _748;
    vec4 _785 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _326) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _327) + cbTextureTilingScale._m0[23u].w));
    float _798 = ((_785.z - _773) * _644) + _773;
    float _801 = ((((_785.x - _771) * _644) + _771) * 2.0) + (-1.0);
    float _802 = ((((_785.y - _772) * _644) + _772) * 2.0) + (-1.0);
    float _803 = dot(vec2(_801, _802), vec2(_801, _802));
    float _4489 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _808 = sqrt(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))));
    vec4 _822 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _847 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _326) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _327) + cbTextureTilingScale._m0[11u].w));
    float _849 = _847.x;
    float _850 = 1.0 - _849;
    float _858 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _861 = ((isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : min(_858, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _870 = (_861 - ((((((_849 - _850) * cbMtdParam._m0[24u].z) + _850) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _861))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4510 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _871 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _878 = (_871 * (cbMtdParam._m0[17u].x - _674)) + _674;
    float _879 = (_871 * (cbMtdParam._m0[17u].y - _676)) + _676;
    float _880 = (_871 * (cbMtdParam._m0[17u].z - _678)) + _678;
    float _895 = sqrt(((cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x) + (cbInstanceData._m0[_307].x * cbInstanceData._m0[_307].x)) + (cbInstanceData._m0[_316].x * cbInstanceData._m0[_316].x));
    float _896 = _895 * TEXCOORD.z;
    float _897 = _895 * TEXCOORD.w;
    vec4 _909 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _896) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _897) + cbTextureTilingScale._m0[19u].w));
    float _911 = _909.x;
    float _912 = 1.0 - _911;
    float _937 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_911 - _912) * cbMtdParam._m0[24u].w) + _912) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4521 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _938 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _946 = ((((cbMtdParam._m0[10u].x - _878) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _938) + _878;
    float _947 = ((((cbMtdParam._m0[10u].y - _879) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _938) + _879;
    float _948 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _880)) * _938) + _880;
    vec4 _974 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _976 = _974.x;
    float _993 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _326) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _327) + cbTextureTilingScale._m0[9u].w)).x - _976) * _501) + _976;
    float _1010 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _326) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _327) + cbTextureTilingScale._m0[21u].w)).x - _993) * _574) + _993;
    float _1027 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _326) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _327) + cbTextureTilingScale._m0[10u].w)).x - _1010) * _644) + _1010;
    float _1031 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1027) * cbMtdParam._m0[19u].z) + _1027;
    float _1033 = _1031 - (_1031 * _871);
    float _1035 = _1033 - (_1033 * _938);
    float _1040 = (((_695.z - _798) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _798;
    float _1046 = ((_822.z - _1040) * cbMtdParam._m0[19u].w) + _1040;
    vec4 _1062 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _326) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _327) + cbTextureTilingScale._m0[15u].w));
    float _1069 = (_1062.x * 2.0) + (-1.0);
    float _1070 = (_1062.y * 2.0) + (-1.0);
    float _1071 = dot(vec2(_1069, _1070), vec2(_1069, _1070));
    float _4532 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1079 = (_871 * (_1062.z - _1046)) + _1046;
    float _1082 = ((cbMtdParam._m0[23u].x - _1079) * _938) + _1079;
    vec4 _1105 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _896) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _897) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1111 = (_1105.x * 2.0) + (-1.0);
    float _1112 = (_1105.y * 2.0) + (-1.0);
    float _1113 = dot(vec2(_1111, _1112), vec2(_1111, _1112));
    float _4543 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1127 = (_801 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_695.x * 2.0) + (-1.0)))) + (((_822.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1128 = (_802 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_695.y * 2.0) + (-1.0)))) + (((_822.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1140 = (((_1069 - _1127) + (cbMtdParam._m0[21u].x * _1127)) * _871) + _1127;
    float _1141 = (((_1070 - _1128) + (cbMtdParam._m0[21u].x * _1128)) * _871) + _1128;
    float _1142 = (_871 * (sqrt(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) - _808)) + _808;
    float _1153 = (((_1111 - _1140) + (_1140 * cbMtdParam._m0[22u].z)) * _938) + _1140;
    float _1154 = (((_1112 - _1141) + (_1141 * cbMtdParam._m0[22u].z)) * _938) + _1141;
    float _1155 = ((sqrt(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) - _1142) * _938) + _1142;
    float _1157 = cbMtdParam._m0[22u].x + _822.w;
    float _1160 = fma(_1155, _275 * NORMAL.x, fma(_1154, _282 * TANGENT.x, (_268 * _260) * _1153));
    float _1163 = fma(_1155, _275 * NORMAL.y, fma(_1154, _282 * TANGENT.y, (_268 * _261) * _1153));
    float _1166 = fma(_1155, _275 * NORMAL.z, fma(_1154, _282 * TANGENT.z, (_268 * _262) * _1153));
    float _1170 = inversesqrt(dot(vec3(_1160, _1163, _1166), vec3(_1160, _1163, _1166)));
    float _1171 = _1170 * _1160;
    float _1172 = _1170 * _1163;
    float _1173 = _1170 * _1166;
    float _4554 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1174 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _4565 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _4576 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4587 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4598 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4609 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1179 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _1193 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1233 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1243 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1233);
    float _1244 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1233);
    float _1245 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1233);
    float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
    float _1250 = _1243 * _1249;
    float _1251 = _1244 * _1249;
    float _1252 = _1245 * _1249;
    vec4 _1257 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1259 = _1257.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1431 = sqrt(((_1243 * _1243) + (_1244 * _1244)) + (_1245 * _1245));
        float _1437 = (cbMatDynParam._m0[5u].x * _1431) + cbMatDynParam._m0[5u].y;
        float _4620 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _1442 = (cbMatDynParam._m0[5u].z * _1431) + cbMatDynParam._m0[5u].w;
        float _4631 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) - _1438)) + _1438) < ((_1259 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1270 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1271 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1289 = fma(_1173, cbSceneParam._m0[5u].z, fma(_1172, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1171));
    float _1292 = fma(_1173, cbSceneParam._m0[6u].z, fma(_1172, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1171));
    float _1295 = fma(_1173, cbSceneParam._m0[7u].z, fma(_1172, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1171));
    uint _1308 = _307 + 9u;
    uint _1309 = _1308 + uint(cbMatDynParam._m0[0u].w);
    float _1315 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * cbInstanceData._m0[_1309].x;
    float _1316 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * cbInstanceData._m0[_1309].y;
    float _1317 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * cbInstanceData._m0[_1309].z;
    float _4642 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _1318 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _4653 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _1319 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _4664 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _1320 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _1321 = 1.0 - _1179;
    float _1322 = _1318 * _1321;
    float _1323 = _1319 * _1321;
    float _1324 = _1320 * _1321;
    float _1329 = (_1318 + (-0.039999999105930328369140625)) * _1179;
    float _1330 = (_1319 + (-0.039999999105930328369140625)) * _1179;
    float _1331 = (_1320 + (-0.039999999105930328369140625)) * _1179;
    float _1332 = _1329 + 0.039999999105930328369140625;
    float _1334 = _1330 + 0.039999999105930328369140625;
    float _1335 = _1331 + 0.039999999105930328369140625;
    vec4 _1344 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1270, cbSceneParam._m0[86u].y * _1271));
    float _1348 = ((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * TEXCOORD_5.w) * _1344.x;
    float _1349 = dot(vec3(_1171, _1172, _1173), vec3(_1250, _1251, _1252));
    float _1352 = _1349 * 2.0;
    float _1356 = (_1352 * _1171) - _1250;
    float _1357 = (_1352 * _1172) - _1251;
    float _1358 = (_1352 * _1173) - _1252;
    float _1362 = abs(dot(vec3(_1250, _1251, _1252), vec3(_1171, _1172, _1173)));
    float _4675 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
    float _1364 = sqrt(_1174);
    float _1377 = exp2((_1364 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1364 * 3.0));
    float _1383 = (1.0 - _1377) * ((_1364 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1384 = _1377 * _1364;
    float _1412 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1416 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1420 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1749;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1474 = fma(_1420, cbModelParam._m0[26u].z, fma(_1416, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1412));
        float _1478 = fma(_1420, cbModelParam._m0[27u].z, fma(_1416, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1412));
        float _1482 = fma(_1420, cbModelParam._m0[28u].z, fma(_1416, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1412));
        float _1507 = _1412 + _1171;
        float _1508 = _1416 + _1172;
        float _1509 = _1420 + _1173;
        float _1519 = fma(_1509, cbModelParam._m0[26u].z, fma(_1508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1507)) - _1474;
        float _1520 = fma(_1509, cbModelParam._m0[27u].z, fma(_1508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1507)) - _1478;
        float _1521 = fma(_1509, cbModelParam._m0[28u].z, fma(_1508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1507)) - _1482;
        float _1525 = inversesqrt(dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521)));
        float _1538 = ((_1525 * _1519) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1474 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1525 * _1520) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1478 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1540 = ((_1525 * _1521) / cbModelParam._m0[34u].z) + ((((((_1482 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        float _1577 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1543.x + (-0.5));
        float _1579 = _1577 * (_1543.y + (-0.5));
        float _1580 = _1577 * (_1543.z + (-0.5));
        float _1587 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1550.x + (-0.5));
        float _1589 = _1587 * (_1550.y + (-0.5));
        float _1590 = _1587 * (_1550.z + (-0.5));
        float _1597 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1557.x + (-0.5));
        float _1599 = _1597 * (_1557.y + (-0.5));
        float _1600 = _1597 * (_1557.z + (-0.5));
        float _1607 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1564.x + (-0.5));
        float _1609 = _1607 * (_1564.y + (-0.5));
        float _1610 = _1607 * (_1564.z + (-0.5));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = _1578 * 0.5;
        float _1615 = _1588 * 0.5;
        float _1616 = _1598 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1631 = (dot(vec3(_1171, _1172, _1173), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4701 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1641 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4712 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4723 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_1643 + 1.0))) + _1648) * _1611;
        float _1658 = _1579 * 0.5;
        float _1659 = _1589 * 0.5;
        float _1660 = _1599 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_1171, _1172, _1173), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4734 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4745 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4756 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_1685 + 1.0))) + _1690) * _1612;
        float _1700 = _1580 * 0.5;
        float _1701 = _1590 * 0.5;
        float _1702 = _1600 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_1171, _1172, _1173), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4767 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4778 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4789 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_1727 + 1.0))) + _1732) * _1613;
        _1749 = _1580;
        _1751 = _1579;
        _1752 = _1578;
        _1753 = _1590;
        _1754 = _1589;
        _1755 = _1588;
        _1756 = _1600;
        _1757 = _1599;
        _1758 = _1598;
        _1759 = _1613;
        _1760 = _1612;
        _1761 = _1611;
        _1762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
    }
    else
    {
        _1749 = _1750;
        _1751 = _1750;
        _1752 = _1750;
        _1753 = _1750;
        _1754 = _1750;
        _1755 = _1750;
        _1756 = _1750;
        _1757 = _1750;
        _1758 = _1750;
        _1759 = _1750;
        _1760 = _1750;
        _1761 = _1750;
        _1762 = 0.0;
        _1763 = 0.0;
        _1764 = 0.0;
    }
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    float _2070;
    float _2071;
    float _2072;
    float _2073;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1790 = fma(_1420, cbModelParam._m0[30u].z, fma(_1416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1412));
        float _1794 = fma(_1420, cbModelParam._m0[31u].z, fma(_1416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1412));
        float _1798 = fma(_1420, cbModelParam._m0[32u].z, fma(_1416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1412));
        float _1821 = _1412 + _1171;
        float _1822 = _1416 + _1172;
        float _1823 = _1420 + _1173;
        float _1833 = fma(_1823, cbModelParam._m0[30u].z, fma(_1822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1821)) - _1790;
        float _1834 = fma(_1823, cbModelParam._m0[31u].z, fma(_1822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1821)) - _1794;
        float _1835 = fma(_1823, cbModelParam._m0[32u].z, fma(_1822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1821)) - _1798;
        float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
        float _1852 = ((_1839 * _1833) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1790 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1853 = ((_1839 * _1834) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1794 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1854 = ((_1839 * _1835) / cbModelParam._m0[35u].z) + ((((((_1798 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1856 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1863 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1870 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1877 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        float _1889 = exp2((_1856.w + (-0.5)) * 20.0) * 2.0;
        float _1890 = _1889 * (_1856.x + (-0.5));
        float _1891 = _1889 * (_1856.y + (-0.5));
        float _1892 = _1889 * (_1856.z + (-0.5));
        float _1899 = exp2((_1863.w + (-0.5)) * 20.0) * 2.0;
        float _1900 = _1899 * (_1863.x + (-0.5));
        float _1901 = _1899 * (_1863.y + (-0.5));
        float _1902 = _1899 * (_1863.z + (-0.5));
        float _1909 = exp2((_1870.w + (-0.5)) * 20.0) * 2.0;
        float _1910 = _1909 * (_1870.x + (-0.5));
        float _1911 = _1909 * (_1870.y + (-0.5));
        float _1912 = _1909 * (_1870.z + (-0.5));
        float _1919 = exp2((_1877.w + (-0.5)) * 20.0) * 2.0;
        float _1920 = _1919 * (_1877.x + (-0.5));
        float _1921 = _1919 * (_1877.y + (-0.5));
        float _1922 = _1919 * (_1877.z + (-0.5));
        float _1923 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1924 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1925 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1926 = _1890 * 0.5;
        float _1927 = _1900 * 0.5;
        float _1928 = _1910 * 0.5;
        float _1929 = dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928));
        float _1934 = (_1929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1929);
        float _1942 = (dot(vec3(_1171, _1172, _1173), vec3(_1934 * _1926, _1934 * _1927, _1934 * _1928)) + 1.0) * 0.5;
        float _4830 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1951 = sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928)) / (_1923 + 9.9999997473787516355514526367188e-06);
        float _4841 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _1953 = _1952 * 2.0;
        float _1957 = (1.0 - _1952) / (_1952 + 1.0);
        float _4852 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1958 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _1967 = ((((1.0 - _1958) * (_1953 + 2.0)) * exp2(log2(isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_1953 + 1.0))) + _1958) * _1923;
        float _1968 = _1891 * 0.5;
        float _1969 = _1901 * 0.5;
        float _1970 = _1911 * 0.5;
        float _1971 = dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970));
        float _1976 = (_1971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1971);
        float _1984 = (dot(vec3(_1171, _1172, _1173), vec3(_1976 * _1968, _1976 * _1969, _1976 * _1970)) + 1.0) * 0.5;
        float _4863 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1993 = sqrt(((_1969 * _1969) + (_1968 * _1968)) + (_1970 * _1970)) / (_1924 + 9.9999997473787516355514526367188e-06);
        float _4874 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _1995 = _1994 * 2.0;
        float _1999 = (1.0 - _1994) / (_1994 + 1.0);
        float _4885 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
        float _2009 = ((((1.0 - _2000) * (_1995 + 2.0)) * exp2(log2(isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_1995 + 1.0))) + _2000) * _1924;
        float _2010 = _1892 * 0.5;
        float _2011 = _1902 * 0.5;
        float _2012 = _1912 * 0.5;
        float _2013 = dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012));
        float _2018 = (_2013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2013);
        float _2026 = (dot(vec3(_1171, _1172, _1173), vec3(_2018 * _2010, _2018 * _2011, _2018 * _2012)) + 1.0) * 0.5;
        float _4896 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2035 = sqrt(((_2011 * _2011) + (_2010 * _2010)) + (_2012 * _2012)) / (_1925 + 9.9999997473787516355514526367188e-06);
        float _4907 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2036 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
        float _2037 = _2036 * 2.0;
        float _2041 = (1.0 - _2036) / (_2036 + 1.0);
        float _4918 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
        float _2051 = ((((1.0 - _2042) * (_2037 + 2.0)) * exp2(log2(isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2037 + 1.0))) + _2042) * _1925;
        _2059 = _1892;
        _2060 = _1891;
        _2061 = _1890;
        _2062 = _1902;
        _2063 = _1901;
        _2064 = _1900;
        _2065 = _1912;
        _2066 = _1911;
        _2067 = _1910;
        _2068 = _1925;
        _2069 = _1924;
        _2070 = _1923;
        _2071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0)));
        _2072 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)));
        _2073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)));
    }
    else
    {
        _2059 = _1750;
        _2060 = _1750;
        _2061 = _1750;
        _2062 = _1750;
        _2063 = _1750;
        _2064 = _1750;
        _2065 = _1750;
        _2066 = _1750;
        _2067 = _1750;
        _2068 = _1750;
        _2069 = _1750;
        _2070 = _1750;
        _2071 = 0.0;
        _2072 = 0.0;
        _2073 = 0.0;
    }
    float _2083 = (cbModelParam._m0[1u].x * (_2071 - _1762)) + _1762;
    float _2084 = (cbModelParam._m0[1u].x * (_2072 - _1763)) + _1763;
    float _2085 = (cbModelParam._m0[1u].x * (_2073 - _1764)) + _1764;
    float _2106 = fma(_2085, cbSceneParam._m0[89u].z, fma(_2084, cbSceneParam._m0[89u].y, _2083 * cbSceneParam._m0[89u].x));
    float _2109 = fma(_2085, cbSceneParam._m0[90u].z, fma(_2084, cbSceneParam._m0[90u].y, _2083 * cbSceneParam._m0[90u].x));
    float _2112 = fma(_2085, cbSceneParam._m0[91u].z, fma(_2084, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2083));
    float _2127 = _1356 * 0.5;
    float _2128 = _1357 * 0.5;
    float _2129 = _1358 * 0.5;
    float _2130 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_2061, _2064, _2067, _2070));
    float _2133 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_2060, _2063, _2066, _2069));
    float _2136 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_2059, _2062, _2065, _2068));
    float _2170;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2143 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_1749, _1753, _1756, _1759));
        float _2147 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_1751, _1754, _1757, _1760));
        float _2151 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_1752, _1755, _1758, _1761));
        float _2158 = dot(vec4(cbModelParam._m0[39u]), vec4(_2127, _2128, _2129, 1.0));
        _2170 = dot(vec3(isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0)), isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0)), isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2158) ? 0.0 : (isnan(0.0) ? _2158 : max(0.0, _2158))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2170 = 1.0;
    }
    float _2181;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2172 = dot(vec4(cbModelParam._m0[40u]), vec4(_2127, _2128, _2129, 1.0));
        _2181 = dot(vec3(isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0)), isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0)), isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2172) ? 0.0 : (isnan(0.0) ? _2172 : max(0.0, _2172))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2181 = 1.0;
    }
    float _2185 = (_2181 * cbModelParam._m0[1u].x) + (_2170 * (1.0 - cbModelParam._m0[1u].x));
    float _2195 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1174);
    float _2196 = isnan(_2195) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2195 : min(cbModelParam._m0[25u].z, _2195));
    float _2276;
    float _2278;
    float _2280;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2243 = fma(_1420, cbModelParam._m0[13u].z, fma(_1416, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1412)) + cbModelParam._m0[13u].w;
        float _2247 = fma(_1420, cbModelParam._m0[14u].z, fma(_1416, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1412)) + cbModelParam._m0[14u].w;
        float _2251 = fma(_1420, cbModelParam._m0[15u].z, fma(_1416, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1412)) + cbModelParam._m0[15u].w;
        float _2254 = fma(_1358, cbModelParam._m0[13u].z, fma(_1357, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1356));
        float _2257 = fma(_1358, cbModelParam._m0[14u].z, fma(_1357, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1356));
        float _2260 = fma(_1358, cbModelParam._m0[15u].z, fma(_1357, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1356));
        float _2288;
        if (_2254 > 0.0)
        {
            _2288 = abs((1.0 - _2243) / _2254);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2254 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2243 + 1.0) / _2254);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2288 = frontier_phi_17_15_ladder;
        }
        float _2460;
        if (_2257 > 0.0)
        {
            _2460 = abs((1.0 - _2247) / _2257);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2257 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2247 + 1.0) / _2257);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2460 = frontier_phi_26_22_ladder;
        }
        float _2755;
        if (_2260 > 0.0)
        {
            _2755 = abs((1.0 - _2251) / _2260);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2260 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2251 + 1.0) / _2260);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2755 = frontier_phi_38_33_ladder;
        }
        float _2757 = isnan(_2460) ? _2288 : (isnan(_2288) ? _2460 : min(_2288, _2460));
        float _2758 = isnan(_2755) ? _2757 : (isnan(_2757) ? _2755 : min(_2757, _2755));
        float _2762 = (_2758 * _2254) + _2243;
        float _2763 = (_2758 * _2257) + _2247;
        float _2764 = (_2758 * _2260) + _2251;
        float _2765 = _2758 * 9.9999997473787516355514526367188e-05;
        float _2767 = (-1.0) - _2765;
        float _2769 = _2765 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2764 > _2769) || ((_2764 < _2767) || ((_2763 > _2769) || ((_2763 < _2767) || ((_2762 < _2767) || (_2762 > _2769))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2909 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2764, cbModelParam._m0[9u].z, fma(_2763, cbModelParam._m0[9u].y, _2762 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2764, cbModelParam._m0[10u].z, fma(_2763, cbModelParam._m0[10u].y, _2762 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2764, cbModelParam._m0[11u].z, fma(_2763, cbModelParam._m0[11u].y, _2762 * cbModelParam._m0[11u].x))), _2196);
            frontier_phi_16_38_ladder = _2909.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2909.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2909.x * cbModelParam._m0[1u].y;
        }
        _2276 = frontier_phi_16_38_ladder_2;
        _2278 = frontier_phi_16_38_ladder_1;
        _2280 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1356, _1357, _1358), _2196);
        _2276 = _2264.x * cbModelParam._m0[1u].y;
        _2278 = _2264.y * cbModelParam._m0[1u].y;
        _2280 = _2264.z * cbModelParam._m0[1u].y;
    }
    float _2284 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1174);
    float _2285 = isnan(_2284) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2284 : min(cbModelParam._m0[25u].w, _2284));
    float _2375;
    float _2377;
    float _2379;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2339 = fma(_1420, cbModelParam._m0[21u].z, fma(_1416, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1412)) + cbModelParam._m0[21u].w;
        float _2343 = fma(_1420, cbModelParam._m0[22u].z, fma(_1416, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1412)) + cbModelParam._m0[22u].w;
        float _2347 = fma(_1420, cbModelParam._m0[23u].z, fma(_1416, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1412)) + cbModelParam._m0[23u].w;
        float _2350 = fma(_1358, cbModelParam._m0[21u].z, fma(_1357, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1356));
        float _2353 = fma(_1358, cbModelParam._m0[22u].z, fma(_1357, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1356));
        float _2356 = fma(_1358, cbModelParam._m0[23u].z, fma(_1357, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1356));
        float _2465;
        if (_2350 > 0.0)
        {
            _2465 = abs((1.0 - _2339) / _2350);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2350 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2339 + 1.0) / _2350);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2465 = frontier_phi_28_24_ladder;
        }
        float _2782;
        if (_2353 > 0.0)
        {
            _2782 = abs((1.0 - _2343) / _2353);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2353 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2343 + 1.0) / _2353);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2782 = frontier_phi_40_35_ladder;
        }
        float _3120;
        if (_2356 > 0.0)
        {
            _3120 = abs((1.0 - _2347) / _2356);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2356 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2347 + 1.0) / _2356);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3120 = frontier_phi_50_47_ladder;
        }
        float _3122 = isnan(_2782) ? _2465 : (isnan(_2465) ? _2782 : min(_2465, _2782));
        float _3123 = isnan(_3120) ? _3122 : (isnan(_3122) ? _3120 : min(_3122, _3120));
        float _3127 = (_3123 * _2350) + _2339;
        float _3128 = (_3123 * _2353) + _2343;
        float _3129 = (_3123 * _2356) + _2347;
        float _3130 = _3123 * 9.9999997473787516355514526367188e-05;
        float _3131 = (-1.0) - _3130;
        float _3133 = _3130 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3129 > _3133) || ((_3129 < _3131) || ((_3128 > _3133) || ((_3128 < _3131) || ((_3127 < _3131) || (_3127 > _3133))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3251 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3129, cbModelParam._m0[17u].z, fma(_3128, cbModelParam._m0[17u].y, _3127 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3129, cbModelParam._m0[18u].z, fma(_3128, cbModelParam._m0[18u].y, _3127 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3129, cbModelParam._m0[19u].z, fma(_3128, cbModelParam._m0[19u].y, _3127 * cbModelParam._m0[19u].x))), _2285);
            frontier_phi_25_50_ladder = _3251.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3251.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3251.x * cbModelParam._m0[1u].z;
        }
        _2375 = frontier_phi_25_50_ladder_2;
        _2377 = frontier_phi_25_50_ladder_1;
        _2379 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2359 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1356, _1357, _1358), _2285);
        _2375 = _2359.x * cbModelParam._m0[1u].z;
        _2377 = _2359.y * cbModelParam._m0[1u].z;
        _2379 = _2359.z * cbModelParam._m0[1u].z;
    }
    float _2392 = (((_1383 * _1332) + _1384) * _1348) * ((cbModelParam._m0[1u].w * (_2375 - _2276)) + _2276);
    float _2394 = (((_1383 * _1334) + _1384) * _1348) * ((cbModelParam._m0[1u].w * (_2377 - _2278)) + _2278);
    float _2396 = (((_1383 * _1335) + _1384) * _1348) * ((cbModelParam._m0[1u].w * (_2379 - _2280)) + _2280);
    float _2399 = fma(_2396, cbSceneParam._m0[89u].z, fma(_2394, cbSceneParam._m0[89u].y, _2392 * cbSceneParam._m0[89u].x));
    float _2402 = fma(_2396, cbSceneParam._m0[90u].z, fma(_2394, cbSceneParam._m0[90u].y, _2392 * cbSceneParam._m0[90u].x));
    float _2405 = fma(_2396, cbSceneParam._m0[91u].z, fma(_2394, cbSceneParam._m0[91u].y, _2392 * cbSceneParam._m0[91u].x));
    float _2439 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2451 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2452 = _2439 / _2451;
    float _2453 = _2443 / _2451;
    float _2454 = _2447 / _2451;
    float _2601;
    float _2602;
    float _2603;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2481 = ((uint(_2454 > cbSceneParam._m0[59u].y) + uint(_2454 > cbSceneParam._m0[59u].x)) + uint(_2454 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2482 = _2481 + 43u;
        uint _2490 = _2481 + 44u;
        uint _2498 = _2481 + 45u;
        uint _2506 = _2481 + 46u;
        float _2517 = fma(_2451, cbSceneParam._m0[_2482].w, fma(_2447, cbSceneParam._m0[_2482].z, fma(_2443, cbSceneParam._m0[_2482].y, _2439 * cbSceneParam._m0[_2482].x)));
        float _2521 = fma(_2451, cbSceneParam._m0[_2490].w, fma(_2447, cbSceneParam._m0[_2490].z, fma(_2443, cbSceneParam._m0[_2490].y, _2439 * cbSceneParam._m0[_2490].x)));
        float _2529 = fma(_2451, cbSceneParam._m0[_2506].w, fma(_2447, cbSceneParam._m0[_2506].z, fma(_2443, cbSceneParam._m0[_2506].y, _2439 * cbSceneParam._m0[_2506].x)));
        float _2534 = cbSceneParam._m0[33u].z * _2529;
        float _2536 = cbSceneParam._m0[33u].w * _2529;
        float _2539 = fma(_2451, cbSceneParam._m0[_2498].w, fma(_2447, cbSceneParam._m0[_2498].z, fma(_2443, cbSceneParam._m0[_2498].y, _2439 * cbSceneParam._m0[_2498].x))) / _2529;
        float _2587 = (cbSceneParam._m0[33u].x - sqrt(((_2453 * _2453) + (_2452 * _2452)) + (_2454 * _2454))) * cbSceneParam._m0[33u].y;
        float _5044 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2594 = (isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2534 + _2517) / _2529, (_2536 + _2521) / _2529), _2539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2536 + _2517) / _2529, (_2521 - _2534) / _2529), _2539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2517 - _2534) / _2529, (_2521 - _2536) / _2529), _2539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2517 - _2536) / _2529, (_2534 + _2521) / _2529), _2539), 0.0)).x), vec4(0.25)));
        _2601 = 1.0 - (_2594 * cbSceneParam._m0[34u].x);
        _2602 = 1.0 - (_2594 * cbSceneParam._m0[34u].y);
        _2603 = 1.0 - (_2594 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2601 = 1.0;
        _2602 = 1.0;
        _2603 = 1.0;
    }
    float _2667;
    float _2669;
    float _2671;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2655 = fma(_2451, cbSceneParam._m0[63u].w, fma(_2447, cbSceneParam._m0[63u].z, fma(_2443, cbSceneParam._m0[63u].y, _2439 * cbSceneParam._m0[63u].x)));
        float _2656 = fma(_2451, cbSceneParam._m0[60u].w, fma(_2447, cbSceneParam._m0[60u].z, fma(_2443, cbSceneParam._m0[60u].y, _2439 * cbSceneParam._m0[60u].x))) / _2655;
        float _2657 = fma(_2451, cbSceneParam._m0[61u].w, fma(_2447, cbSceneParam._m0[61u].z, fma(_2443, cbSceneParam._m0[61u].y, _2439 * cbSceneParam._m0[61u].x))) / _2655;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2656 >= cbSceneParam._m0[64u].x) && (_2657 >= cbSceneParam._m0[64u].y)) && (_2656 <= cbSceneParam._m0[64u].z)) && (_2657 <= cbSceneParam._m0[64u].w))
        {
            float _2795 = fma(_2451, cbSceneParam._m0[62u].w, fma(_2447, cbSceneParam._m0[62u].z, fma(_2443, cbSceneParam._m0[62u].y, _2439 * cbSceneParam._m0[62u].x))) / _2655;
            float _2799 = isnan(cbSceneParam._m0[41u].w) ? _2795 : (isnan(_2795) ? cbSceneParam._m0[41u].w : max(_2795, cbSceneParam._m0[41u].w));
            float _2842 = (cbSceneParam._m0[33u].x - sqrt(((_2453 * _2453) + (_2452 * _2452)) + (_2454 * _2454))) * cbSceneParam._m0[33u].y;
            float _5060 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
            float _2849 = (isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2656, cbSceneParam._m0[33u].w + _2657), _2799), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2656, _2657 - cbSceneParam._m0[33u].z), _2799), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2656 - cbSceneParam._m0[33u].z, _2657 - cbSceneParam._m0[33u].w), _2799), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2656 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2657), _2799), 0.0)).x), vec4(0.25)));
            float _2853 = 1.0 - (_2849 * cbSceneParam._m0[34u].x);
            float _2854 = 1.0 - (_2849 * cbSceneParam._m0[34u].y);
            float _2855 = 1.0 - (_2849 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2855) ? _2603 : (isnan(_2603) ? _2855 : min(_2603, _2855));
            frontier_phi_37_36_ladder_1 = isnan(_2854) ? _2602 : (isnan(_2602) ? _2854 : min(_2602, _2854));
            frontier_phi_37_36_ladder_2 = isnan(_2853) ? _2601 : (isnan(_2601) ? _2853 : min(_2601, _2853));
        }
        else
        {
            frontier_phi_37_36_ladder = _2603;
            frontier_phi_37_36_ladder_1 = _2602;
            frontier_phi_37_36_ladder_2 = _2601;
        }
        _2667 = frontier_phi_37_36_ladder_2;
        _2669 = frontier_phi_37_36_ladder_1;
        _2671 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2667 = _2601;
        _2669 = _2602;
        _2671 = _2603;
    }
    uvec4 _2676 = floatBitsToUint(cbInstanceData._m0[_307 + 5u]);
    uint _2678 = _2676.x * 14u;
    uint _2679 = _2678 + 13u;
    float _2686 = _1348 + (-1.0);
    float _2691 = (cbLight._m0[_2679].x * _2686) + 1.0;
    float _2692 = (cbLight._m0[_2679].y * _2686) + 1.0;
    float _2693 = (cbLight._m0[_2679].z * _2686) + 1.0;
    float _2694 = (cbLight._m0[_2679].w * _2686) + 1.0;
    uint _2695 = _2678 + 5u;
    float _2701 = isnan(1.0) ? _2692 : (isnan(_2692) ? 1.0 : min(_2692, 1.0));
    uint _2705 = _2678 + 4u;
    float _2714 = isnan(1.0) ? _2691 : (isnan(_2691) ? 1.0 : min(_2691, 1.0));
    uint _2718 = _2678 | 1u;
    float _2729 = dot(vec3(cbLight._m0[_2678].xyz), vec3(_1171, _1172, _1173));
    float _2732 = dot(vec3(cbLight._m0[_2718].xyz), vec3(_1171, _1172, _1173));
    float _5096 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _5107 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2737 = (isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * 0.3183098733425140380859375;
    float _2739 = (isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0))) * 0.3183098733425140380859375;
    float _2746 = ((cbLight._m0[_2695].x * _2701) * _2739) + (((cbLight._m0[_2705].x * _2667) * _2714) * _2737);
    float _2747 = ((_2701 * cbLight._m0[_2695].y) * _2739) + (((cbLight._m0[_2705].y * _2669) * _2714) * _2737);
    float _2748 = ((_2701 * cbLight._m0[_2695].z) * _2739) + (((cbLight._m0[_2705].z * _2671) * _2714) * _2737);
    uvec4 _2752 = floatBitsToUint(cbLight._m0[_2678 + 12u]);
    bool _2754 = _2752.x == 0u;
    float _2856;
    float _2858;
    float _2860;
    if (_2754)
    {
        _2856 = _2746;
        _2858 = _2747;
        _2860 = _2748;
    }
    else
    {
        uint _2864 = _2678 + 6u;
        float _2880 = (dot(vec3(cbLight._m0[_2678 + 2u].xyz), vec3(_1171, _1172, _1173)) * 0.5) + 0.5;
        float _2881 = _2880 * _2880;
        float _5118 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2882 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
        float _2883 = isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0));
        _2856 = (((cbLight._m0[_2864].x * 0.3183098733425140380859375) * _2882) * _2883) + _2746;
        _2858 = (((cbLight._m0[_2864].y * 0.3183098733425140380859375) * _2882) * _2883) + _2747;
        _2860 = (((cbLight._m0[_2864].z * 0.3183098733425140380859375) * _2882) * _2883) + _2748;
    }
    bool _2863 = _2752.y == 0u;
    float _2918;
    float _2920;
    float _2922;
    if (_2863)
    {
        _2918 = _2856;
        _2920 = _2858;
        _2922 = _2860;
    }
    else
    {
        uint _3091 = _2678 + 7u;
        float _3107 = (dot(vec3(cbLight._m0[_2678 + 3u].xyz), vec3(_1171, _1172, _1173)) * 0.5) + 0.5;
        float _3108 = _3107 * _3107;
        float _5134 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        float _3109 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
        float _3110 = isnan(1.0) ? _2694 : (isnan(_2694) ? 1.0 : min(_2694, 1.0));
        _2918 = (((cbLight._m0[_3091].x * 0.3183098733425140380859375) * _3109) * _3110) + _2856;
        _2920 = (((cbLight._m0[_3091].y * 0.3183098733425140380859375) * _3109) * _3110) + _2858;
        _2922 = (((cbLight._m0[_3091].z * 0.3183098733425140380859375) * _3109) * _3110) + _2860;
    }
    uint _2925 = _2678 + 8u;
    float _2938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2678].w)) * _1174) * 0.949999988079071044921875);
    float _2939 = _2938 * _2938;
    float _2940 = cbLight._m0[_2678].x + _1250;
    float _2941 = cbLight._m0[_2678].y + _1251;
    float _2942 = cbLight._m0[_2678].z + _1252;
    float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
    float _2947 = _2946 * _2940;
    float _2948 = _2946 * _2941;
    float _2949 = _2946 * _2942;
    float _2950 = dot(vec3(_1171, _1172, _1173), vec3(cbLight._m0[_2678].xyz));
    float _5150 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
    float _2953 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
    float _5161 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
    float _2954 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
    float _2955 = dot(vec3(_1171, _1172, _1173), vec3(_2947, _2948, _2949));
    float _5172 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
    float _2958 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
    float _2959 = dot(vec3(cbLight._m0[_2678].xyz), vec3(_2947, _2948, _2949));
    float _5183 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
    float _2963 = _2939 * _2939;
    float _2967 = ((_2958 * _2958) * (_2963 + (-1.0))) + 1.0;
    float _2975 = exp2(log2(1.0 - (isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0)))) * 5.0);
    float _2976 = 0.959999978542327880859375 - _1329;
    float _2978 = 0.959999978542327880859375 - _1330;
    float _2979 = 0.959999978542327880859375 - _1331;
    float _2986 = 1.0 - _2939;
    float _2997 = (0.5 / (((_2954 * ((_2953 * _2986) + _2939)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _2986) + _2939) * _2953))) * _2953;
    float _5194 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
    float _2999 = (isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0))) * (_2963 / ((_2967 * _2967) * 3.141590118408203125));
    uint _3013 = _2678 + 9u;
    float _3024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2718].w)) * _1174) * 0.949999988079071044921875);
    float _3025 = _3024 * _3024;
    float _3026 = cbLight._m0[_2718].x + _1250;
    float _3027 = cbLight._m0[_2718].y + _1251;
    float _3028 = cbLight._m0[_2718].z + _1252;
    float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
    float _3033 = _3032 * _3026;
    float _3034 = _3032 * _3027;
    float _3035 = _3032 * _3028;
    float _3036 = dot(vec3(_1171, _1172, _1173), vec3(cbLight._m0[_2718].xyz));
    float _5205 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
    float _3039 = isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0));
    float _3040 = dot(vec3(_1171, _1172, _1173), vec3(_3033, _3034, _3035));
    float _5216 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
    float _3043 = isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0));
    float _3044 = dot(vec3(cbLight._m0[_2718].xyz), vec3(_3033, _3034, _3035));
    float _5227 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
    float _3048 = _3025 * _3025;
    float _3052 = ((_3043 * _3043) * (_3048 + (-1.0))) + 1.0;
    float _3059 = exp2(log2(1.0 - (isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0)))) * 5.0);
    float _3066 = 1.0 - _3025;
    float _3076 = (0.5 / (((_2954 * ((_3039 * _3066) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _3066) + _3025) * _3039))) * _3039;
    float _5238 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
    float _3078 = (isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0))) * (_3048 / ((_3052 * _3052) * 3.141590118408203125));
    float _3088 = (((((_3059 * _2976) + _1332) * cbLight._m0[_3013].x) * _3078) * _2701) + ((((cbLight._m0[_2925].x * _2667) * ((_2975 * _2976) + _1332)) * _2999) * _2714);
    float _3089 = (((((_3059 * _2978) + _1334) * cbLight._m0[_3013].y) * _3078) * _2701) + ((((cbLight._m0[_2925].y * _2669) * ((_2975 * _2978) + _1334)) * _2999) * _2714);
    float _3090 = (((((_3059 * _2979) + _1335) * cbLight._m0[_3013].z) * _3078) * _2701) + ((((cbLight._m0[_2925].z * _2671) * ((_2975 * _2979) + _1335)) * _2999) * _2714);
    float _3146;
    float _3148;
    float _3150;
    if (_2754)
    {
        _3146 = _3088;
        _3148 = _3089;
        _3150 = _3090;
    }
    else
    {
        uint _3152 = _2678 + 2u;
        uint _3156 = _2678 + 10u;
        float _3170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3152].w)) * _1174) * 0.949999988079071044921875);
        float _3171 = _3170 * _3170;
        float _3172 = cbLight._m0[_3152].x + _1250;
        float _3173 = cbLight._m0[_3152].y + _1251;
        float _3174 = cbLight._m0[_3152].z + _1252;
        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
        float _3179 = _3178 * _3172;
        float _3180 = _3178 * _3173;
        float _3181 = _3178 * _3174;
        float _3182 = dot(vec3(_1171, _1172, _1173), vec3(cbLight._m0[_3152].xyz));
        float _5249 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
        float _3185 = isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0));
        float _3186 = dot(vec3(_1171, _1172, _1173), vec3(_3179, _3180, _3181));
        float _5260 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
        float _3189 = isnan(1.0) ? _5260 : (isnan(_5260) ? 1.0 : min(_5260, 1.0));
        float _3190 = dot(vec3(cbLight._m0[_3152].xyz), vec3(_3179, _3180, _3181));
        float _5271 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
        float _3194 = _3171 * _3171;
        float _3198 = ((_3189 * _3189) * (_3194 + (-1.0))) + 1.0;
        float _3205 = exp2(log2(1.0 - (isnan(1.0) ? _5271 : (isnan(_5271) ? 1.0 : min(_5271, 1.0)))) * 5.0);
        float _3212 = 1.0 - _3171;
        float _3222 = (0.5 / (((_2954 * ((_3185 * _3212) + _3171)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _3212) + _3171) * _3185))) * _3185;
        float _5282 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
        float _3224 = (isnan(1.0) ? _5282 : (isnan(_5282) ? 1.0 : min(_5282, 1.0))) * (_3194 / ((_3198 * _3198) * 3.141590118408203125));
        float _3225 = isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0));
        _3146 = (((((_3205 * _2976) + _1332) * cbLight._m0[_3156].x) * _3224) * _3225) + _3088;
        _3148 = (((((_3205 * _2978) + _1334) * cbLight._m0[_3156].y) * _3224) * _3225) + _3089;
        _3150 = (((((_3205 * _2979) + _1335) * cbLight._m0[_3156].z) * _3224) * _3225) + _3090;
    }
    float _3256;
    float _3258;
    float _3260;
    if (_2863)
    {
        _3256 = _3146;
        _3258 = _3148;
        _3260 = _3150;
    }
    else
    {
        uint _3267 = _2678 + 3u;
        uint _3271 = _2678 + 11u;
        float _3285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3267].w)) * _1174) * 0.949999988079071044921875);
        float _3286 = _3285 * _3285;
        float _3287 = cbLight._m0[_3267].x + _1250;
        float _3288 = cbLight._m0[_3267].y + _1251;
        float _3289 = cbLight._m0[_3267].z + _1252;
        float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
        float _3294 = _3293 * _3287;
        float _3295 = _3293 * _3288;
        float _3296 = _3293 * _3289;
        float _3297 = dot(vec3(_1171, _1172, _1173), vec3(cbLight._m0[_3267].xyz));
        float _5298 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
        float _3300 = isnan(1.0) ? _5298 : (isnan(_5298) ? 1.0 : min(_5298, 1.0));
        float _3301 = dot(vec3(_1171, _1172, _1173), vec3(_3294, _3295, _3296));
        float _5309 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
        float _3304 = isnan(1.0) ? _5309 : (isnan(_5309) ? 1.0 : min(_5309, 1.0));
        float _3305 = dot(vec3(cbLight._m0[_3267].xyz), vec3(_3294, _3295, _3296));
        float _5320 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
        float _3309 = _3286 * _3286;
        float _3313 = ((_3304 * _3304) * (_3309 + (-1.0))) + 1.0;
        float _3320 = exp2(log2(1.0 - (isnan(1.0) ? _5320 : (isnan(_5320) ? 1.0 : min(_5320, 1.0)))) * 5.0);
        float _3327 = 1.0 - _3286;
        float _3337 = (0.5 / (((_2954 * ((_3300 * _3327) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _3327) + _3286) * _3300))) * _3300;
        float _5331 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
        float _3339 = (isnan(1.0) ? _5331 : (isnan(_5331) ? 1.0 : min(_5331, 1.0))) * (_3309 / ((_3313 * _3313) * 3.141590118408203125));
        float _3340 = isnan(1.0) ? _2694 : (isnan(_2694) ? 1.0 : min(_2694, 1.0));
        _3256 = (((((_3320 * _2976) + _1332) * cbLight._m0[_3271].x) * _3339) * _3340) + _3146;
        _3258 = (((((_3320 * _2978) + _1334) * cbLight._m0[_3271].y) * _3339) * _3340) + _3148;
        _3260 = (((((_3320 * _2979) + _1335) * cbLight._m0[_3271].z) * _3339) * _3340) + _3150;
    }
    float _3406;
    float _3408;
    float _3410;
    float _3412;
    float _3414;
    float _3416;
    if (_2676.y == 0u)
    {
        uvec4 _3361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3362 = _3361.x;
        uint _3373 = uint((float(_3361.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1271) / _3362))) + floor(float(uint(cbSceneParam._m0[85u].x * _1270) / _3362)));
        float _3383 = (log2(_2454 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3384 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
        uint _3387 = uint(isnan(14.0) ? _3384 : (isnan(_3384) ? 14.0 : min(_3384, 14.0)));
        uvec4 _3392 = texelFetch(g_lightClusterGridBuffer, int(((_3387 << 2u) + (_3373 << 6u)) >> 2u));
        uint _3393 = _3392.x;
        uint _3394 = _3361.z;
        float _3473;
        float _3475;
        float _3477;
        float _3479;
        float _3481;
        float _3483;
        if (((((1u << ((_3394 >> 4u) & 15u)) + 4294967295u) & _3393) == 0u) || ((_3394 & 240u) == 0u))
        {
            _3473 = 0.0;
            _3475 = 0.0;
            _3477 = 0.0;
            _3479 = 0.0;
            _3481 = 0.0;
            _3483 = 0.0;
        }
        else
        {
            float _3474;
            float _3476;
            float _3478;
            float _3480;
            float _3482;
            float _3484;
            float _3626 = 0.0;
            float _3627 = 0.0;
            float _3628 = 0.0;
            float _3629 = 0.0;
            float _3630 = 0.0;
            float _3631 = 0.0;
            uint _3632 = 0u;
            uint _3641;
            bool _3642;
            for (;;)
            {
                _3641 = texelFetch(g_lightClassification, int((((_3387 << 5u) + (_3373 << 9u)) + (_3632 << 2u)) >> 2u)).x;
                _3642 = _3641 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3642)
                {
                    frontier_phi_71_pred = _3631;
                    frontier_phi_71_pred_1 = _3630;
                    frontier_phi_71_pred_2 = _3629;
                    frontier_phi_71_pred_3 = _3628;
                    frontier_phi_71_pred_4 = _3627;
                    frontier_phi_71_pred_5 = _3626;
                }
                else
                {
                    float _3771;
                    float _3772;
                    float _3773;
                    float _3774;
                    float _3775;
                    float _3776;
                    uint _3777;
                    _3771 = _3626;
                    _3772 = _3627;
                    _3773 = _3628;
                    _3774 = _3629;
                    _3775 = _3630;
                    _3776 = _3631;
                    _3777 = _3641;
                    float _3698;
                    float _3699;
                    float _3700;
                    float _3701;
                    float _3702;
                    float _3703;
                    for (;;)
                    {
                        uint _3781 = uint(findLSB(_3777)) + (_3632 << 5u);
                        uint _3778 = (_3777 + 4294967295u) & _3777;
                        uint _3783 = _3781 * 48u;
                        vec4 _3797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3783)).x, texelFetch(g_PointLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3783 + 3u)).x));
                        uint _3803 = (_3781 * 48u) + 4u;
                        vec4 _3816 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3803)).x, texelFetch(g_PointLightRenderingBuffer, int(_3803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3803 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3803 + 3u)).x));
                        uint _3822 = (_3781 * 48u) + 8u;
                        vec3 _3833 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3822)).x, texelFetch(g_PointLightRenderingBuffer, int(_3822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3822 + 2u)).x));
                        float _3837 = _3797.x - _2452;
                        float _3838 = _3797.y - _2453;
                        float _3839 = _3797.z - _2454;
                        float _3840 = dot(vec3(_3837, _3838, _3839), vec3(_3837, _3838, _3839));
                        float _3843 = inversesqrt(_3840);
                        float _3844 = _3843 * _3837;
                        float _3845 = _3843 * _3838;
                        float _3846 = _3843 * _3839;
                        float _3847 = dot(vec3(_1289, _1292, _1295), vec3(_3844, _3845, _3846));
                        float _3852 = 1.0 - (_3840 * _3797.w);
                        float _5357 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                        float _3853 = isnan(1.0) ? _5357 : (isnan(_5357) ? 1.0 : min(_5357, 1.0));
                        float _3854 = sqrt(_3840) * _3816.w;
                        float _3857 = 1.39999997615814208984375 / (_3854 + 1.39999997615814208984375);
                        float _3858 = _3857 * _3857;
                        float _3861 = ((1.0 - _3858) * _3847) + _3858;
                        float _3864 = _3854 * _3854;
                        float _3868 = ((isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0))) * _3853) / ((_3864 * 0.699999988079071044921875) + 1.0);
                        float _3872 = (-0.0) - _2452;
                        float _3873 = (-0.0) - _2453;
                        float _3874 = (-0.0) - _2454;
                        float _3878 = inversesqrt(dot(vec3(_3872, _3873, _3874), vec3(_3872, _3873, _3874)));
                        float _3879 = _3878 * _3872;
                        float _3880 = _3878 * _3873;
                        float _3881 = _3878 * _3874;
                        float _3888 = exp2(log2(1.0 / ((_3864 * 3.5) + 5.0)) * 0.25);
                        float _3889 = 1.0 - _1364;
                        float _3896 = sqrt(1.0 - ((1.0 - (_3889 * _3889)) * (1.0 - (_3888 * _3888))));
                        float _3897 = _3896 * _3896;
                        float _3898 = _3897 * _3897;
                        float _3899 = _3879 + _3844;
                        float _3900 = _3880 + _3845;
                        float _3901 = _3881 + _3846;
                        float _3905 = inversesqrt(dot(vec3(_3899, _3900, _3901), vec3(_3899, _3900, _3901)));
                        float _3909 = dot(vec3(_1289, _1292, _1295), vec3(_3879, _3880, _3881));
                        float _5373 = isnan(0.0) ? _3909 : (isnan(_3909) ? 0.0 : max(_3909, 0.0));
                        float _3912 = isnan(1.0) ? _5373 : (isnan(_5373) ? 1.0 : min(_5373, 1.0));
                        float _3913 = dot(vec3(_1289, _1292, _1295), vec3(_3905 * _3899, _3905 * _3900, _3905 * _3901));
                        float _5384 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                        float _3916 = isnan(1.0) ? _5384 : (isnan(_5384) ? 1.0 : min(_5384, 1.0));
                        float _3920 = ((_3916 * _3916) * (_3898 + (-1.0))) + 1.0;
                        float _3921 = _3857 * _3897;
                        float _3922 = _3921 * _3921;
                        float _3925 = ((1.0 - _3922) * _3847) + _3922;
                        float _5395 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                        float _3926 = isnan(1.0) ? _5395 : (isnan(_5395) ? 1.0 : min(_5395, 1.0));
                        float _3927 = 1.0 - _3897;
                        float _3937 = (0.5 / (((_3926 * ((_3912 * _3927) + _3897)) + 9.9999999392252902907785028219223e-09) + (((_3926 * _3927) + _3897) * _3912))) * _3926;
                        float _5406 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                        float _3948 = (((_3898 * 3.1415927410125732421875) * (isnan(1.0) ? _5406 : (isnan(_5406) ? 1.0 : min(_5406, 1.0)))) / ((_3920 * _3920) * ((_3864 * 2.1991131305694580078125) + 3.141590118408203125))) * _3853;
                        _3701 = (_3868 * _3816.x) + _3774;
                        _3702 = (_3868 * _3816.y) + _3775;
                        _3703 = (_3868 * _3816.z) + _3776;
                        _3698 = (_3948 * _3833.x) + _3771;
                        _3699 = (_3948 * _3833.y) + _3772;
                        _3700 = (_3948 * _3833.z) + _3773;
                        if (_3778 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3771 = _3698;
                            _3772 = _3699;
                            _3773 = _3700;
                            _3774 = _3701;
                            _3775 = _3702;
                            _3776 = _3703;
                            _3777 = _3778;
                        }
                    }
                    frontier_phi_71_pred = _3703;
                    frontier_phi_71_pred_1 = _3702;
                    frontier_phi_71_pred_2 = _3701;
                    frontier_phi_71_pred_3 = _3700;
                    frontier_phi_71_pred_4 = _3699;
                    frontier_phi_71_pred_5 = _3698;
                }
                _3484 = frontier_phi_71_pred;
                _3482 = frontier_phi_71_pred_1;
                _3480 = frontier_phi_71_pred_2;
                _3478 = frontier_phi_71_pred_3;
                _3476 = frontier_phi_71_pred_4;
                _3474 = frontier_phi_71_pred_5;
                uint _3633 = _3632 + 1u;
                if (_3633 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3626 = _3474;
                    _3627 = _3476;
                    _3628 = _3478;
                    _3629 = _3480;
                    _3630 = _3482;
                    _3631 = _3484;
                    _3632 = _3633;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3473 = _3474;
            _3475 = _3476;
            _3477 = _3478;
            _3479 = _3480;
            _3481 = _3482;
            _3483 = _3484;
        }
        uvec4 _3487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3488 = _3487.z;
        uint _3490 = (_3488 >> 8u) & 15u;
        float _3594;
        float _3596;
        float _3598;
        float _3600;
        float _3602;
        float _3604;
        if (((4294967295u << _3490) & _3393) == 0u)
        {
            _3594 = _3473;
            _3596 = _3475;
            _3598 = _3477;
            _3600 = _3479;
            _3602 = _3481;
            _3604 = _3483;
        }
        else
        {
            float _3619 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
            float _3620 = _3619 * _2452;
            float _3621 = _3619 * _2453;
            float _3622 = _3619 * _2454;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3490 < ((_3488 >> 12u) & 15u))
            {
                float _3595;
                float _3597;
                float _3599;
                float _3601;
                float _3603;
                float _3605;
                float _3754 = _3473;
                float _3755 = _3475;
                float _3756 = _3477;
                float _3757 = _3479;
                float _3758 = _3481;
                float _3759 = _3483;
                uint _3760 = _3490;
                uint _3769;
                bool _3770;
                for (;;)
                {
                    _3769 = texelFetch(g_lightClassification, int((((_3387 << 5u) + (_3373 << 9u)) + (_3760 << 2u)) >> 2u)).x;
                    _3770 = _3769 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3770)
                    {
                        frontier_phi_82_pred = _3759;
                        frontier_phi_82_pred_1 = _3758;
                        frontier_phi_82_pred_2 = _3757;
                        frontier_phi_82_pred_3 = _3756;
                        frontier_phi_82_pred_4 = _3755;
                        frontier_phi_82_pred_5 = _3754;
                    }
                    else
                    {
                        float _3962;
                        float _3963;
                        float _3964;
                        float _3965;
                        float _3966;
                        float _3967;
                        float _4255;
                        float _4256;
                        float _4257;
                        float _4258;
                        float _4259;
                        float _4260;
                        float _3975 = _3754;
                        float _3976 = _3755;
                        float _3977 = _3756;
                        float _3978 = _3757;
                        float _3979 = _3758;
                        float _3980 = _3759;
                        uint _3981 = _3769;
                        uint _3982;
                        vec4 _4007;
                        float _4008;
                        vec4 _4023;
                        vec3 _4035;
                        vec4 _4050;
                        vec4 _4065;
                        float _4111;
                        bool _4112;
                        for (;;)
                        {
                            uint _3992 = ((_3760 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3981));
                            _3982 = (_3981 + 4294967295u) & _3981;
                            uint _3994 = _3992 * 40u;
                            _4007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3994 + 3u)).x));
                            _4008 = _4007.w;
                            uint _4010 = (_3992 * 40u) + 4u;
                            _4023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4010 + 3u)).x));
                            uint _4025 = (_3992 * 40u) + 8u;
                            _4035 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4025 + 2u)).x));
                            uint _4037 = (_3992 * 40u) + 16u;
                            _4050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4037 + 3u)).x));
                            uint _4052 = (_3992 * 40u) + 20u;
                            _4065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4052 + 3u)).x));
                            uint _4067 = (_3992 * 40u) + 24u;
                            vec4 _4080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 3u)).x));
                            uint _4086 = (_3992 * 40u) + 28u;
                            vec4 _4099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4086 + 3u)).x));
                            _4111 = fma(_2454, _4099.z, fma(_2453, _4099.y, _4099.x * _2452)) + _4099.w;
                            _4112 = !((fma(_2454, _4080.z, fma(_2453, _4080.y, _4080.x * _2452)) + _4080.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4112)
                            {
                                float _4139 = _4007.x - _2452;
                                float _4140 = _4007.y - _2453;
                                float _4141 = _4007.z - _2454;
                                float _4142 = dot(vec3(_4139, _4140, _4141), vec3(_4139, _4140, _4141));
                                float _4145 = inversesqrt(_4142);
                                float _4146 = _4145 * _4139;
                                float _4147 = _4145 * _4140;
                                float _4148 = _4145 * _4141;
                                float _4152 = 1.0 - (_4142 / (_4008 * _4008));
                                float _5417 = isnan(0.0) ? _4152 : (isnan(_4152) ? 0.0 : max(_4152, 0.0));
                                float _4153 = isnan(1.0) ? _5417 : (isnan(_5417) ? 1.0 : min(_5417, 1.0));
                                float _4157 = sqrt(_4142) * _4023.w;
                                float _4159 = 1.39999997615814208984375 / (_4157 + 1.39999997615814208984375);
                                float _4160 = _4159 * _4159;
                                float _4163 = ((1.0 - _4160) * dot(vec3(_4146, _4147, _4148), vec3(_1289, _1292, _1295))) + _4160;
                                float _4166 = _4157 * _4157;
                                float _4170 = (fma(_2454, _4050.z, fma(_2453, _4050.y, _4050.x * _2452)) + _4050.w) / _4111;
                                float _4171 = (fma(_2454, _4065.z, fma(_2453, _4065.y, _4065.x * _2452)) + _4065.w) / _4111;
                                float _4175 = 1.0 - dot(vec2(_4170, _4171), vec2(_4170, _4171));
                                float _5433 = isnan(0.0) ? _4175 : (isnan(_4175) ? 0.0 : max(_4175, 0.0));
                                float _4176 = isnan(1.0) ? _5433 : (isnan(_5433) ? 1.0 : min(_5433, 1.0));
                                float _4177 = _4176 * (((isnan(0.0) ? _4163 : (isnan(_4163) ? 0.0 : max(_4163, 0.0))) * _4153) / ((_4166 * 0.699999988079071044921875) + 1.0));
                                float _4189 = exp2(log2(1.0 / ((_4166 * 3.5) + 5.0)) * 0.25);
                                float _4190 = 1.0 - _1364;
                                float _4197 = sqrt(1.0 - ((1.0 - (_4190 * _4190)) * (1.0 - (_4189 * _4189))));
                                float _4198 = _4197 * _4197;
                                float _4199 = _4198 * _4198;
                                float _4200 = _4146 - _3620;
                                float _4201 = _4147 - _3621;
                                float _4202 = _4148 - _3622;
                                float _4206 = inversesqrt(dot(vec3(_4200, _4201, _4202), vec3(_4200, _4201, _4202)));
                                float _4210 = dot(vec3(_1289, _1292, _1295), vec3((-0.0) - _3620, (-0.0) - _3621, (-0.0) - _3622));
                                float _5444 = isnan(0.0) ? _4210 : (isnan(_4210) ? 0.0 : max(_4210, 0.0));
                                float _4213 = isnan(1.0) ? _5444 : (isnan(_5444) ? 1.0 : min(_5444, 1.0));
                                float _4214 = dot(vec3(_1289, _1292, _1295), vec3(_4206 * _4200, _4206 * _4201, _4206 * _4202));
                                float _5455 = isnan(0.0) ? _4214 : (isnan(_4214) ? 0.0 : max(_4214, 0.0));
                                float _4217 = isnan(1.0) ? _5455 : (isnan(_5455) ? 1.0 : min(_5455, 1.0));
                                float _4221 = ((_4217 * _4217) * (_4199 + (-1.0))) + 1.0;
                                float _4222 = _4159 * _4198;
                                float _4223 = _4222 * _4222;
                                float _4229 = ((1.0 - _4223) * dot(vec3(_1289, _1292, _1295), vec3(_4146, _4147, _4148))) + _4223;
                                float _5466 = isnan(0.0) ? _4229 : (isnan(_4229) ? 0.0 : max(_4229, 0.0));
                                float _4230 = isnan(1.0) ? _5466 : (isnan(_5466) ? 1.0 : min(_5466, 1.0));
                                float _4231 = 1.0 - _4198;
                                float _4241 = (0.5 / (((_4230 * ((_4213 * _4231) + _4198)) + 9.9999999392252902907785028219223e-09) + (((_4230 * _4231) + _4198) * _4213))) * _4230;
                                float _5477 = isnan(0.0) ? _4241 : (isnan(_4241) ? 0.0 : max(_4241, 0.0));
                                float _4251 = (_4176 * _4153) * (((_4199 * 3.1415927410125732421875) * (isnan(1.0) ? _5477 : (isnan(_5477) ? 1.0 : min(_5477, 1.0)))) / ((_4221 * _4221) * ((_4166 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4177 * _4023.z;
                                frontier_phi_88_pred_1 = _4177 * _4023.y;
                                frontier_phi_88_pred_2 = _4177 * _4023.x;
                                frontier_phi_88_pred_3 = _4251 * _4035.z;
                                frontier_phi_88_pred_4 = _4251 * _4035.y;
                                frontier_phi_88_pred_5 = _4251 * _4035.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4260 = frontier_phi_88_pred;
                            _4259 = frontier_phi_88_pred_1;
                            _4258 = frontier_phi_88_pred_2;
                            _4257 = frontier_phi_88_pred_3;
                            _4256 = frontier_phi_88_pred_4;
                            _4255 = frontier_phi_88_pred_5;
                            _3965 = _4258 + _3978;
                            _3966 = _4259 + _3979;
                            _3967 = _4260 + _3980;
                            _3962 = _4255 + _3975;
                            _3963 = _4256 + _3976;
                            _3964 = _4257 + _3977;
                            if (_3982 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3975 = _3962;
                                _3976 = _3963;
                                _3977 = _3964;
                                _3978 = _3965;
                                _3979 = _3966;
                                _3980 = _3967;
                                _3981 = _3982;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3967;
                        frontier_phi_82_pred_1 = _3966;
                        frontier_phi_82_pred_2 = _3965;
                        frontier_phi_82_pred_3 = _3964;
                        frontier_phi_82_pred_4 = _3963;
                        frontier_phi_82_pred_5 = _3962;
                    }
                    _3605 = frontier_phi_82_pred;
                    _3603 = frontier_phi_82_pred_1;
                    _3601 = frontier_phi_82_pred_2;
                    _3599 = frontier_phi_82_pred_3;
                    _3597 = frontier_phi_82_pred_4;
                    _3595 = frontier_phi_82_pred_5;
                    uint _3761 = _3760 + 1u;
                    if (_3761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3754 = _3595;
                        _3755 = _3597;
                        _3756 = _3599;
                        _3757 = _3601;
                        _3758 = _3603;
                        _3759 = _3605;
                        _3760 = _3761;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3601;
                frontier_phi_63_64_ladder_1 = _3605;
                frontier_phi_63_64_ladder_2 = _3603;
                frontier_phi_63_64_ladder_3 = _3599;
                frontier_phi_63_64_ladder_4 = _3597;
                frontier_phi_63_64_ladder_5 = _3595;
            }
            else
            {
                frontier_phi_63_64_ladder = _3479;
                frontier_phi_63_64_ladder_1 = _3483;
                frontier_phi_63_64_ladder_2 = _3481;
                frontier_phi_63_64_ladder_3 = _3477;
                frontier_phi_63_64_ladder_4 = _3475;
                frontier_phi_63_64_ladder_5 = _3473;
            }
            _3594 = frontier_phi_63_64_ladder_5;
            _3596 = frontier_phi_63_64_ladder_4;
            _3598 = frontier_phi_63_64_ladder_3;
            _3600 = frontier_phi_63_64_ladder;
            _3602 = frontier_phi_63_64_ladder_2;
            _3604 = frontier_phi_63_64_ladder_1;
        }
        float _3609 = isnan(1.0) ? _1348 : (isnan(_1348) ? 1.0 : min(_1348, 1.0));
        _3406 = (_3609 * _3600) + _2918;
        _3408 = (_3609 * _3602) + _2920;
        _3410 = (_3609 * _3604) + _2922;
        _3412 = ((_3594 * _1332) * _3609) + _3256;
        _3414 = ((_3596 * _1334) * _3609) + _3258;
        _3416 = ((_3598 * _1335) * _3609) + _3260;
    }
    else
    {
        _3406 = _2918;
        _3408 = _2920;
        _3410 = _2922;
        _3412 = _3256;
        _3414 = _3258;
        _3416 = _3260;
    }
    float _5493 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
    float _5504 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
    float _5515 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
    float _3433 = ((isnan(1.0) ? _5493 : (isnan(_5493) ? 1.0 : min(_5493, 1.0))) * (_3406 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1348))) + ((_3412 + ((isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0))) * _2185)) * cbPerFrame._m0[3u].x);
    float _3434 = ((isnan(1.0) ? _5504 : (isnan(_5504) ? 1.0 : min(_5504, 1.0))) * (_3408 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1348))) + ((_3414 + ((isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0))) * _2185)) * cbPerFrame._m0[3u].x);
    float _3435 = ((isnan(1.0) ? _5515 : (isnan(_5515) ? 1.0 : min(_5515, 1.0))) * (_3410 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1348))) + ((_3416 + ((isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0))) * _2185)) * cbPerFrame._m0[3u].x);
    uint _3436 = _307 + 6u;
    float _3444 = _1270 / cbSceneParam._m0[86u].x;
    float _3445 = _1271 / cbSceneParam._m0[86u].y;
    vec4 _3459 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3444, _3445, (log2((isnan(cbSceneParam._m0[77u].w) ? _1193 : (isnan(_1193) ? cbSceneParam._m0[77u].w : min(_1193, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3461 = _3459.x;
    float _3462 = _3459.y;
    float _3463 = _3459.z;
    float _3464 = _3459.w;
    float _3536;
    float _3538;
    float _3540;
    float _3542;
    if (_1193 > cbSceneParam._m0[78u].w)
    {
        float _3498 = isnan(_1193) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1193 : min(cbSceneParam._m0[80u].w, _1193));
        float _3499 = _3498 / _1193;
        float _3510 = _3499 * _1243;
        float _3511 = _1244 * _3499;
        float _3512 = (-0.0) - _3511;
        float _3514 = _3499 * _1245;
        float _3516 = (cbSceneParam._m0[77u].w * _3512) / _3498;
        float _3517 = _3516 + cbSceneParam._m0[79u].w;
        float _3518 = cbSceneParam._m0[79u].w - _3511;
        float _3524 = sqrt(((_3510 * _3510) + (_3511 * _3511)) + (_3514 * _3514));
        float _3527 = (1.0 - (cbSceneParam._m0[77u].w / _3498)) * _3524;
        float _3532 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3534 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3711;
        if (abs((_3512 - _3516) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3711 = ((((_3517 > 0.0) ? exp2(_3532 * _3517) : (2.0 - exp2(_3534 * _3517))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3527;
        }
        else
        {
            float _3655 = 1.0 / cbSceneParam._m0[80u].x;
            float _3656 = isnan(_3518) ? _3517 : (isnan(_3517) ? _3518 : max(_3517, _3518));
            float _3657 = isnan(_3518) ? _3517 : (isnan(_3517) ? _3518 : min(_3517, _3518));
            float _3666 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : min(_3656, 0.0));
            float _3667 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : min(_3657, 0.0));
            _3711 = ((abs(_3524 / _3512) * cbSceneParam._m0[80u].y) * ((((_3666 - _3667) * 2.0) - ((exp2(_3532 * (isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0)))) - exp2(_3532 * (isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0))))) * _3655)) - ((exp2(_3534 * _3666) - exp2(_3534 * _3667)) * _3655))) + (_3527 * cbSceneParam._m0[80u].z);
        }
        vec4 _3713 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3444, _3445, 1.0), 0.0);
        float _3722 = exp2((_3711 * (-1.44269502162933349609375)) * (1.0 - _3713.w));
        float _3723 = log2(_3722);
        float _3739 = log2(_3464);
        _3536 = (exp2(_3739 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3723 * cbSceneParam._m0[78u].x)) * _3713.x) / cbSceneParam._m0[78u].x)) + _3461;
        _3538 = (exp2(_3739 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3723 * cbSceneParam._m0[78u].y)) * _3713.y) / cbSceneParam._m0[78u].y)) + _3462;
        _3540 = (exp2(_3739 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3723 * cbSceneParam._m0[78u].z)) * _3713.z) / cbSceneParam._m0[78u].z)) + _3463;
        _3542 = _3722 * _3464;
    }
    else
    {
        _3536 = _3461;
        _3538 = _3462;
        _3540 = _3463;
        _3542 = _3464;
    }
    bool _3749;
    vec4 _3552;
    vec4 _3574;
    float _3576;
    float _3580;
    float _3581;
    float _3582;
    float _3583;
    bool _3593;
    for (;;)
    {
        _3552 = cbMatDynParam._m0[0u];
        float _3554 = roundEven(_3552.y);
        bool _3555 = _3554 == 3.0;
        float _3556 = log2(_3542);
        float _3563 = exp2(_3556 * cbSceneParam._m0[78u].x) * _3433;
        float _3564 = exp2(_3556 * cbSceneParam._m0[78u].y) * _3434;
        float _3565 = exp2(_3556 * cbSceneParam._m0[78u].z) * _3435;
        float _3572 = _1259 + (-0.5);
        _3574 = cbMtdParam._m0[1u];
        _3576 = _3574.y * _3572;
        float _3579 = (_3554 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3580 = _3579 * (_3555 ? _3563 : (_3563 + (cbSceneParam._m0[72u].w * _3536)));
        _3581 = _3579 * (_3555 ? _3564 : (_3564 + (cbSceneParam._m0[72u].w * _3538)));
        _3582 = _3579 * (_3555 ? _3565 : (_3565 + (cbSceneParam._m0[72u].w * _3540)));
        _3583 = _3572 * 0.999000012874603271484375;
        _3593 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3593)
        {
            if ((cbInstanceData._m0[_307 + 7u].x + _3583) < 0.5)
            {
                _3749 = true;
                break;
            }
        }
        uint _3690 = _1308 + uint(_3552.w);
        if ((cbInstanceData._m0[_3690].w < 1.0) && ((cbInstanceData._m0[_3690].w + _3583) < 0.5))
        {
            _3749 = true;
            break;
        }
        if ((_3576 + 1.0) < _3574.x)
        {
            _3749 = true;
            break;
        }
        _3749 = false;
        break;
    }
    float _3953;
    if (_3749)
    {
        discard_state = true;
        _3953 = 0.0;
    }
    else
    {
        _3953 = cbInstanceData._m0[_3436].w;
    }
    SV_Target.x = _3580;
    SV_Target.y = _3581;
    SV_Target.z = _3582;
    SV_Target.w = _3953;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3436].w;
    discard_exit();
}


