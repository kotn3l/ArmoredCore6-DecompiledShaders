#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1592;
float _4253;
float _4254;
float _4255;
float _4256;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4265 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4276 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4287 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    uint _290 = uint(roundEven(NORMAL.w)) * 13u;
    uint _295 = _290 + 1u;
    uint _299 = _290 + 2u;
    float _308 = sqrt(((cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x)) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x));
    float _309 = _308 * TEXCOORD.z;
    float _310 = _308 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _309) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _310) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _352 = _347.x * cbMtdParam._m0[11u].x;
    float _353 = _347.y * cbMtdParam._m0[11u].y;
    float _354 = _347.z * cbMtdParam._m0[11u].z;
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _309) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _310) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _392.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[23u].w) + _441) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4298 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _466 = (_459 * ((_373.x * cbMtdParam._m0[12u].x) - _352)) + _352;
    float _467 = (_459 * ((_373.y * cbMtdParam._m0[12u].y) - _353)) + _353;
    float _468 = (_459 * ((_373.z * cbMtdParam._m0[12u].z) - _354)) + _354;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _309) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _310) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _392.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[23u].w) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4309 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    vec4 _560 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _309) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _310) + cbTextureTilingScale._m0[24u].w));
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _579 = _577.x;
    float _589 = dot(vec4(_579, _577.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _601 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _392.z) * 2.0) - ((((_579 - _589) * cbMtdParam._m0[23u].w) + _589) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4320 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _609 = (_602 * ((_560.x * cbMtdParam._m0[14u].x) - _539)) + _539;
    float _610 = (_602 * ((_560.y * cbMtdParam._m0[14u].y) - _540)) + _540;
    float _611 = (_602 * ((_560.z * cbMtdParam._m0[14u].z) - _541)) + _541;
    float _615 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _323.x) * _609;
    float _618 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _323.y) * _610;
    float _621 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _323.z) * _611;
    float _628 = ((_609 - _615) * (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) + _615;
    float _629 = ((_610 - _618) * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) + _618;
    float _630 = ((_611 - _621) * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) + _621;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _309) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _310) + cbTextureTilingScale._m0[20u].w));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _309) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _310) + cbTextureTilingScale._m0[4u].w));
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _691 = _689.x;
    float _692 = _689.y;
    float _693 = _689.z;
    float _700 = ((_672.x - _691) * _459) + _691;
    float _701 = ((_672.y - _692) * _459) + _692;
    float _702 = ((_672.z - _693) * _459) + _693;
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _309) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _310) + cbTextureTilingScale._m0[2u].w));
    float _725 = ((_714.x - _700) * _532) + _700;
    float _726 = ((_714.y - _701) * _532) + _701;
    float _727 = ((_714.z - _702) * _532) + _702;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _309) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _310) + cbTextureTilingScale._m0[23u].w));
    float _752 = ((_739.z - _727) * _602) + _727;
    float _755 = ((((_739.x - _725) * _602) + _725) * 2.0) + (-1.0);
    float _756 = ((((_739.y - _726) * _602) + _726) * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _4331 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _762 = sqrt(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))));
    vec4 _780 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _792 = (_755 + ((((_647.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_780.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _793 = (_756 + ((((_647.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_780.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _796 = fma(_762, _257, fma(_793, _264, _792 * _250));
    float _799 = fma(_762, _258, fma(_793, _265, _792 * _251));
    float _802 = fma(_762, _259, fma(_793, _266, _792 * _252));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    vec4 _833 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _309) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _310) + cbTextureTilingScale._m0[11u].w));
    float _835 = _833.x;
    float _836 = 1.0 - _835;
    float _844 = (cbMtdParam._m0[19u].x + dot(vec4(_806 * _796, _806 * _799, _806 * _802, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_835 - _836) * cbMtdParam._m0[24u].z) + _836) * cbMtdParam._m0[21u].z);
    float _4342 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _845 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _852 = (_845 * (cbMtdParam._m0[17u].x - _628)) + _628;
    float _853 = (_845 * (cbMtdParam._m0[17u].y - _629)) + _629;
    float _854 = (_845 * (cbMtdParam._m0[17u].z - _630)) + _630;
    vec4 _880 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _882 = _880.x;
    float _900 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w)).x - _882) * _459) + _882;
    float _917 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _309) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _310) + cbTextureTilingScale._m0[21u].w)).x - _900) * _532) + _900;
    float _935 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w)).x - _917) * _602) + _917;
    float _939 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _935) * cbMtdParam._m0[19u].z) + _935;
    float _941 = _939 - (_939 * _845);
    float _946 = (((_647.z - _752) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _752;
    float _950 = ((_780.z - _946) * cbMtdParam._m0[19u].w) + _946;
    vec4 _963 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _309) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _310) + cbTextureTilingScale._m0[15u].w));
    float _970 = (_963.x * 2.0) + (-1.0);
    float _971 = (_963.y * 2.0) + (-1.0);
    float _972 = dot(vec2(_970, _971), vec2(_970, _971));
    float _4353 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _980 = ((_963.z - _950) * _845) + _950;
    float _990 = ((sqrt(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) - _762) * _845) + _762;
    float _993 = (((_970 - _792) * _845) + _792) + (cbMtdParam._m0[21u].x * _792);
    float _994 = (((_971 - _793) * _845) + _793) + (cbMtdParam._m0[21u].x * _793);
    float _998 = cbMtdParam._m0[22u].x + _780.w;
    float _1001 = fma(_990, _257, fma(_994, _264, _993 * _250));
    float _1004 = fma(_990, _258, fma(_994, _265, _993 * _251));
    float _1007 = fma(_990, _259, fma(_994, _266, _993 * _252));
    float _1011 = inversesqrt(dot(vec3(_1001, _1004, _1007), vec3(_1001, _1004, _1007)));
    float _1012 = _1011 * _1001;
    float _1013 = _1011 * _1004;
    float _1014 = _1011 * _1007;
    float _4364 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _1015 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _4375 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _4386 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4397 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4408 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4419 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _1020 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _1034 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1084 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1074);
    float _1085 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1074);
    float _1086 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1074);
    float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
    float _1091 = _1084 * _1090;
    float _1092 = _1085 * _1090;
    float _1093 = _1086 * _1090;
    vec4 _1098 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1100 = _1098.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1272 = sqrt(((_1084 * _1084) + (_1085 * _1085)) + (_1086 * _1086));
        float _1278 = (cbMatDynParam._m0[5u].x * _1272) + cbMatDynParam._m0[5u].y;
        float _4430 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1283 = (cbMatDynParam._m0[5u].z * _1272) + cbMatDynParam._m0[5u].w;
        float _4441 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) - _1279)) + _1279) < ((_1100 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1111 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1112 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1130 = fma(_1014, cbSceneParam._m0[5u].z, fma(_1013, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1012));
    float _1133 = fma(_1014, cbSceneParam._m0[6u].z, fma(_1013, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1012));
    float _1136 = fma(_1014, cbSceneParam._m0[7u].z, fma(_1013, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1012));
    uint _1149 = _290 + 9u;
    uint _1150 = _1149 + uint(cbMatDynParam._m0[0u].w);
    float _1156 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * cbInstanceData._m0[_1150].x;
    float _1157 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * cbInstanceData._m0[_1150].y;
    float _1158 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * cbInstanceData._m0[_1150].z;
    float _4452 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _1159 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _4463 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1160 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _4474 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _1161 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _1162 = 1.0 - _1020;
    float _1163 = _1159 * _1162;
    float _1164 = _1160 * _1162;
    float _1165 = _1161 * _1162;
    float _1170 = (_1159 + (-0.039999999105930328369140625)) * _1020;
    float _1171 = (_1160 + (-0.039999999105930328369140625)) * _1020;
    float _1172 = (_1161 + (-0.039999999105930328369140625)) * _1020;
    float _1173 = _1170 + 0.039999999105930328369140625;
    float _1175 = _1171 + 0.039999999105930328369140625;
    float _1176 = _1172 + 0.039999999105930328369140625;
    vec4 _1185 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1111, cbSceneParam._m0[86u].y * _1112));
    float _1189 = ((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * TEXCOORD_5.w) * _1185.x;
    float _1190 = dot(vec3(_1012, _1013, _1014), vec3(_1091, _1092, _1093));
    float _1193 = _1190 * 2.0;
    float _1197 = (_1193 * _1012) - _1091;
    float _1198 = (_1193 * _1013) - _1092;
    float _1199 = (_1193 * _1014) - _1093;
    float _1203 = abs(dot(vec3(_1091, _1092, _1093), vec3(_1012, _1013, _1014)));
    float _4485 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _1205 = sqrt(_1015);
    float _1218 = exp2((_1205 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1205 * 3.0));
    float _1224 = (1.0 - _1218) * ((_1205 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1225 = _1218 * _1205;
    float _1253 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1257 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1261 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1591;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1316 = fma(_1261, cbModelParam._m0[26u].z, fma(_1257, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1253));
        float _1320 = fma(_1261, cbModelParam._m0[27u].z, fma(_1257, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1253));
        float _1324 = fma(_1261, cbModelParam._m0[28u].z, fma(_1257, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1253));
        float _1349 = _1253 + _1012;
        float _1350 = _1257 + _1013;
        float _1351 = _1261 + _1014;
        float _1361 = fma(_1351, cbModelParam._m0[26u].z, fma(_1350, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1349)) - _1316;
        float _1362 = fma(_1351, cbModelParam._m0[27u].z, fma(_1350, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1349)) - _1320;
        float _1363 = fma(_1351, cbModelParam._m0[28u].z, fma(_1350, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1349)) - _1324;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1316 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1320 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[34u].z) + ((((((_1324 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1419 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1385.x + (-0.5));
        float _1421 = _1419 * (_1385.y + (-0.5));
        float _1422 = _1419 * (_1385.z + (-0.5));
        float _1429 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1392.x + (-0.5));
        float _1431 = _1429 * (_1392.y + (-0.5));
        float _1432 = _1429 * (_1392.z + (-0.5));
        float _1439 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1399.x + (-0.5));
        float _1441 = _1439 * (_1399.y + (-0.5));
        float _1442 = _1439 * (_1399.z + (-0.5));
        float _1449 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1406.x + (-0.5));
        float _1451 = _1449 * (_1406.y + (-0.5));
        float _1452 = _1449 * (_1406.z + (-0.5));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = _1420 * 0.5;
        float _1457 = _1430 * 0.5;
        float _1458 = _1440 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1473 = (dot(vec3(_1012, _1013, _1014), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4511 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1483 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4522 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4533 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_1485 + 1.0))) + _1490) * _1453;
        float _1500 = _1421 * 0.5;
        float _1501 = _1431 * 0.5;
        float _1502 = _1441 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_1012, _1013, _1014), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4544 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4555 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4566 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_1527 + 1.0))) + _1532) * _1454;
        float _1542 = _1422 * 0.5;
        float _1543 = _1432 * 0.5;
        float _1544 = _1442 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_1012, _1013, _1014), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4577 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4588 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4599 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_1569 + 1.0))) + _1574) * _1455;
        _1591 = _1422;
        _1593 = _1421;
        _1594 = _1420;
        _1595 = _1432;
        _1596 = _1431;
        _1597 = _1430;
        _1598 = _1442;
        _1599 = _1441;
        _1600 = _1440;
        _1601 = _1455;
        _1602 = _1454;
        _1603 = _1453;
        _1604 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1605 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1606 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1592;
        _1593 = _1592;
        _1594 = _1592;
        _1595 = _1592;
        _1596 = _1592;
        _1597 = _1592;
        _1598 = _1592;
        _1599 = _1592;
        _1600 = _1592;
        _1601 = _1592;
        _1602 = _1592;
        _1603 = _1592;
        _1604 = 0.0;
        _1605 = 0.0;
        _1606 = 0.0;
    }
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1632 = fma(_1261, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1253));
        float _1636 = fma(_1261, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1253));
        float _1640 = fma(_1261, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1253));
        float _1663 = _1253 + _1012;
        float _1664 = _1257 + _1013;
        float _1665 = _1261 + _1014;
        float _1675 = fma(_1665, cbModelParam._m0[30u].z, fma(_1664, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1663)) - _1632;
        float _1676 = fma(_1665, cbModelParam._m0[31u].z, fma(_1664, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1663)) - _1636;
        float _1677 = fma(_1665, cbModelParam._m0[32u].z, fma(_1664, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1663)) - _1640;
        float _1681 = inversesqrt(dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677)));
        float _1694 = ((_1681 * _1675) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1632 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1695 = ((_1681 * _1676) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1636 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1696 = ((_1681 * _1677) / cbModelParam._m0[35u].z) + ((((((_1640 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1698 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1694, _1695, _1696), 0.0);
        vec4 _1705 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1694, _1695, _1696), 0.0);
        vec4 _1712 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1694, _1695, _1696), 0.0);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1694, _1695, _1696), 0.0);
        float _1731 = exp2((_1698.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1698.x + (-0.5));
        float _1733 = _1731 * (_1698.y + (-0.5));
        float _1734 = _1731 * (_1698.z + (-0.5));
        float _1741 = exp2((_1705.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1705.x + (-0.5));
        float _1743 = _1741 * (_1705.y + (-0.5));
        float _1744 = _1741 * (_1705.z + (-0.5));
        float _1751 = exp2((_1712.w + (-0.5)) * 20.0) * 2.0;
        float _1752 = _1751 * (_1712.x + (-0.5));
        float _1753 = _1751 * (_1712.y + (-0.5));
        float _1754 = _1751 * (_1712.z + (-0.5));
        float _1761 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1762 = _1761 * (_1719.x + (-0.5));
        float _1763 = _1761 * (_1719.y + (-0.5));
        float _1764 = _1761 * (_1719.z + (-0.5));
        float _1765 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1766 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1767 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1768 = _1732 * 0.5;
        float _1769 = _1742 * 0.5;
        float _1770 = _1752 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_1012, _1013, _1014), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4640 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1765 + 9.9999997473787516355514526367188e-06);
        float _4651 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4662 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_1795 + 1.0))) + _1800) * _1765;
        float _1810 = _1733 * 0.5;
        float _1811 = _1743 * 0.5;
        float _1812 = _1753 * 0.5;
        float _1813 = dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812));
        float _1818 = (_1813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1813);
        float _1826 = (dot(vec3(_1012, _1013, _1014), vec3(_1818 * _1810, _1818 * _1811, _1818 * _1812)) + 1.0) * 0.5;
        float _4673 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1835 = sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812)) / (_1766 + 9.9999997473787516355514526367188e-06);
        float _4684 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _1837 = _1836 * 2.0;
        float _1841 = (1.0 - _1836) / (_1836 + 1.0);
        float _4695 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _1851 = ((((1.0 - _1842) * (_1837 + 2.0)) * exp2(log2(isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_1837 + 1.0))) + _1842) * _1766;
        float _1852 = _1734 * 0.5;
        float _1853 = _1744 * 0.5;
        float _1854 = _1754 * 0.5;
        float _1855 = dot(vec3(_1852, _1853, _1854), vec3(_1852, _1853, _1854));
        float _1860 = (_1855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1855);
        float _1868 = (dot(vec3(_1012, _1013, _1014), vec3(_1860 * _1852, _1860 * _1853, _1860 * _1854)) + 1.0) * 0.5;
        float _4706 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1877 = sqrt(((_1853 * _1853) + (_1852 * _1852)) + (_1854 * _1854)) / (_1767 + 9.9999997473787516355514526367188e-06);
        float _4717 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _1879 = _1878 * 2.0;
        float _1883 = (1.0 - _1878) / (_1878 + 1.0);
        float _4728 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _1893 = ((((1.0 - _1884) * (_1879 + 2.0)) * exp2(log2(isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_1879 + 1.0))) + _1884) * _1767;
        _1901 = _1734;
        _1902 = _1733;
        _1903 = _1732;
        _1904 = _1744;
        _1905 = _1743;
        _1906 = _1742;
        _1907 = _1754;
        _1908 = _1753;
        _1909 = _1752;
        _1910 = _1767;
        _1911 = _1766;
        _1912 = _1765;
        _1913 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
        _1914 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)));
        _1915 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)));
    }
    else
    {
        _1901 = _1592;
        _1902 = _1592;
        _1903 = _1592;
        _1904 = _1592;
        _1905 = _1592;
        _1906 = _1592;
        _1907 = _1592;
        _1908 = _1592;
        _1909 = _1592;
        _1910 = _1592;
        _1911 = _1592;
        _1912 = _1592;
        _1913 = 0.0;
        _1914 = 0.0;
        _1915 = 0.0;
    }
    float _1925 = (cbModelParam._m0[1u].x * (_1913 - _1604)) + _1604;
    float _1926 = (cbModelParam._m0[1u].x * (_1914 - _1605)) + _1605;
    float _1927 = (cbModelParam._m0[1u].x * (_1915 - _1606)) + _1606;
    float _1948 = fma(_1927, cbSceneParam._m0[89u].z, fma(_1926, cbSceneParam._m0[89u].y, _1925 * cbSceneParam._m0[89u].x));
    float _1951 = fma(_1927, cbSceneParam._m0[90u].z, fma(_1926, cbSceneParam._m0[90u].y, _1925 * cbSceneParam._m0[90u].x));
    float _1954 = fma(_1927, cbSceneParam._m0[91u].z, fma(_1926, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1925));
    float _1969 = _1197 * 0.5;
    float _1970 = _1198 * 0.5;
    float _1971 = _1199 * 0.5;
    float _1972 = dot(vec4(_1969, _1970, _1971, 1.0), vec4(_1903, _1906, _1909, _1912));
    float _1975 = dot(vec4(_1969, _1970, _1971, 1.0), vec4(_1902, _1905, _1908, _1911));
    float _1978 = dot(vec4(_1969, _1970, _1971, 1.0), vec4(_1901, _1904, _1907, _1910));
    float _2012;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1985 = dot(vec4(_1969, _1970, _1971, 1.0), vec4(_1591, _1595, _1598, _1601));
        float _1989 = dot(vec4(_1969, _1970, _1971, 1.0), vec4(_1593, _1596, _1599, _1602));
        float _1993 = dot(vec4(_1969, _1970, _1971, 1.0), vec4(_1594, _1597, _1600, _1603));
        float _2000 = dot(vec4(cbModelParam._m0[39u]), vec4(_1969, _1970, _1971, 1.0));
        _2012 = dot(vec3(isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0)), isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0)), isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2000) ? 0.0 : (isnan(0.0) ? _2000 : max(0.0, _2000))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2012 = 1.0;
    }
    float _2023;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2014 = dot(vec4(cbModelParam._m0[40u]), vec4(_1969, _1970, _1971, 1.0));
        _2023 = dot(vec3(isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0)), isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)), isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2014) ? 0.0 : (isnan(0.0) ? _2014 : max(0.0, _2014))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2023 = 1.0;
    }
    float _2027 = (_2023 * cbModelParam._m0[1u].x) + (_2012 * (1.0 - cbModelParam._m0[1u].x));
    float _2037 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1015);
    float _2038 = isnan(_2037) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2037 : min(cbModelParam._m0[25u].z, _2037));
    float _2118;
    float _2120;
    float _2122;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2085 = fma(_1261, cbModelParam._m0[13u].z, fma(_1257, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1253)) + cbModelParam._m0[13u].w;
        float _2089 = fma(_1261, cbModelParam._m0[14u].z, fma(_1257, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1253)) + cbModelParam._m0[14u].w;
        float _2093 = fma(_1261, cbModelParam._m0[15u].z, fma(_1257, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1253)) + cbModelParam._m0[15u].w;
        float _2096 = fma(_1199, cbModelParam._m0[13u].z, fma(_1198, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1197));
        float _2099 = fma(_1199, cbModelParam._m0[14u].z, fma(_1198, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1197));
        float _2102 = fma(_1199, cbModelParam._m0[15u].z, fma(_1198, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1197));
        float _2130;
        if (_2096 > 0.0)
        {
            _2130 = abs((1.0 - _2085) / _2096);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2085 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2130 = frontier_phi_17_15_ladder;
        }
        float _2302;
        if (_2099 > 0.0)
        {
            _2302 = abs((1.0 - _2089) / _2099);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2089 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2302 = frontier_phi_26_22_ladder;
        }
        float _2597;
        if (_2102 > 0.0)
        {
            _2597 = abs((1.0 - _2093) / _2102);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2093 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2597 = frontier_phi_38_33_ladder;
        }
        float _2599 = isnan(_2302) ? _2130 : (isnan(_2130) ? _2302 : min(_2130, _2302));
        float _2600 = isnan(_2597) ? _2599 : (isnan(_2599) ? _2597 : min(_2599, _2597));
        float _2604 = (_2600 * _2096) + _2085;
        float _2605 = (_2600 * _2099) + _2089;
        float _2606 = (_2600 * _2102) + _2093;
        float _2607 = _2600 * 9.9999997473787516355514526367188e-05;
        float _2609 = (-1.0) - _2607;
        float _2611 = _2607 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2606 > _2611) || ((_2606 < _2609) || ((_2605 > _2611) || ((_2605 < _2609) || ((_2604 < _2609) || (_2604 > _2611))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2606, cbModelParam._m0[9u].z, fma(_2605, cbModelParam._m0[9u].y, _2604 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2606, cbModelParam._m0[10u].z, fma(_2605, cbModelParam._m0[10u].y, _2604 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2606, cbModelParam._m0[11u].z, fma(_2605, cbModelParam._m0[11u].y, _2604 * cbModelParam._m0[11u].x))), _2038);
            frontier_phi_16_38_ladder = _2751.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2751.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2751.x * cbModelParam._m0[1u].y;
        }
        _2118 = frontier_phi_16_38_ladder_2;
        _2120 = frontier_phi_16_38_ladder_1;
        _2122 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2106 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1197, _1198, _1199), _2038);
        _2118 = _2106.x * cbModelParam._m0[1u].y;
        _2120 = _2106.y * cbModelParam._m0[1u].y;
        _2122 = _2106.z * cbModelParam._m0[1u].y;
    }
    float _2126 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1015);
    float _2127 = isnan(_2126) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2126 : min(cbModelParam._m0[25u].w, _2126));
    float _2217;
    float _2219;
    float _2221;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2181 = fma(_1261, cbModelParam._m0[21u].z, fma(_1257, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1253)) + cbModelParam._m0[21u].w;
        float _2185 = fma(_1261, cbModelParam._m0[22u].z, fma(_1257, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1253)) + cbModelParam._m0[22u].w;
        float _2189 = fma(_1261, cbModelParam._m0[23u].z, fma(_1257, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1253)) + cbModelParam._m0[23u].w;
        float _2192 = fma(_1199, cbModelParam._m0[21u].z, fma(_1198, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1197));
        float _2195 = fma(_1199, cbModelParam._m0[22u].z, fma(_1198, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1197));
        float _2198 = fma(_1199, cbModelParam._m0[23u].z, fma(_1198, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1197));
        float _2307;
        if (_2192 > 0.0)
        {
            _2307 = abs((1.0 - _2181) / _2192);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2192 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2181 + 1.0) / _2192);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2307 = frontier_phi_28_24_ladder;
        }
        float _2624;
        if (_2195 > 0.0)
        {
            _2624 = abs((1.0 - _2185) / _2195);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2195 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2185 + 1.0) / _2195);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2624 = frontier_phi_40_35_ladder;
        }
        float _2962;
        if (_2198 > 0.0)
        {
            _2962 = abs((1.0 - _2189) / _2198);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2198 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2189 + 1.0) / _2198);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2962 = frontier_phi_50_47_ladder;
        }
        float _2964 = isnan(_2624) ? _2307 : (isnan(_2307) ? _2624 : min(_2307, _2624));
        float _2965 = isnan(_2962) ? _2964 : (isnan(_2964) ? _2962 : min(_2964, _2962));
        float _2969 = (_2965 * _2192) + _2181;
        float _2970 = (_2965 * _2195) + _2185;
        float _2971 = (_2965 * _2198) + _2189;
        float _2972 = _2965 * 9.9999997473787516355514526367188e-05;
        float _2973 = (-1.0) - _2972;
        float _2975 = _2972 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2971 > _2975) || ((_2971 < _2973) || ((_2970 > _2975) || ((_2970 < _2973) || ((_2969 < _2973) || (_2969 > _2975))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3093 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2971, cbModelParam._m0[17u].z, fma(_2970, cbModelParam._m0[17u].y, _2969 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2971, cbModelParam._m0[18u].z, fma(_2970, cbModelParam._m0[18u].y, _2969 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2971, cbModelParam._m0[19u].z, fma(_2970, cbModelParam._m0[19u].y, _2969 * cbModelParam._m0[19u].x))), _2127);
            frontier_phi_25_50_ladder = _3093.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3093.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3093.x * cbModelParam._m0[1u].z;
        }
        _2217 = frontier_phi_25_50_ladder_2;
        _2219 = frontier_phi_25_50_ladder_1;
        _2221 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2201 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1197, _1198, _1199), _2127);
        _2217 = _2201.x * cbModelParam._m0[1u].z;
        _2219 = _2201.y * cbModelParam._m0[1u].z;
        _2221 = _2201.z * cbModelParam._m0[1u].z;
    }
    float _2234 = (((_1224 * _1173) + _1225) * _1189) * ((cbModelParam._m0[1u].w * (_2217 - _2118)) + _2118);
    float _2236 = (((_1224 * _1175) + _1225) * _1189) * ((cbModelParam._m0[1u].w * (_2219 - _2120)) + _2120);
    float _2238 = (((_1224 * _1176) + _1225) * _1189) * ((cbModelParam._m0[1u].w * (_2221 - _2122)) + _2122);
    float _2241 = fma(_2238, cbSceneParam._m0[89u].z, fma(_2236, cbSceneParam._m0[89u].y, _2234 * cbSceneParam._m0[89u].x));
    float _2244 = fma(_2238, cbSceneParam._m0[90u].z, fma(_2236, cbSceneParam._m0[90u].y, _2234 * cbSceneParam._m0[90u].x));
    float _2247 = fma(_2238, cbSceneParam._m0[91u].z, fma(_2236, cbSceneParam._m0[91u].y, _2234 * cbSceneParam._m0[91u].x));
    float _2281 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2285 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2289 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2293 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2294 = _2281 / _2293;
    float _2295 = _2285 / _2293;
    float _2296 = _2289 / _2293;
    float _2443;
    float _2444;
    float _2445;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2323 = ((uint(_2296 > cbSceneParam._m0[59u].y) + uint(_2296 > cbSceneParam._m0[59u].x)) + uint(_2296 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2324 = _2323 + 43u;
        uint _2332 = _2323 + 44u;
        uint _2340 = _2323 + 45u;
        uint _2348 = _2323 + 46u;
        float _2359 = fma(_2293, cbSceneParam._m0[_2324].w, fma(_2289, cbSceneParam._m0[_2324].z, fma(_2285, cbSceneParam._m0[_2324].y, _2281 * cbSceneParam._m0[_2324].x)));
        float _2363 = fma(_2293, cbSceneParam._m0[_2332].w, fma(_2289, cbSceneParam._m0[_2332].z, fma(_2285, cbSceneParam._m0[_2332].y, _2281 * cbSceneParam._m0[_2332].x)));
        float _2371 = fma(_2293, cbSceneParam._m0[_2348].w, fma(_2289, cbSceneParam._m0[_2348].z, fma(_2285, cbSceneParam._m0[_2348].y, _2281 * cbSceneParam._m0[_2348].x)));
        float _2376 = cbSceneParam._m0[33u].z * _2371;
        float _2378 = cbSceneParam._m0[33u].w * _2371;
        float _2381 = fma(_2293, cbSceneParam._m0[_2340].w, fma(_2289, cbSceneParam._m0[_2340].z, fma(_2285, cbSceneParam._m0[_2340].y, _2281 * cbSceneParam._m0[_2340].x))) / _2371;
        float _2429 = (cbSceneParam._m0[33u].x - sqrt(((_2295 * _2295) + (_2294 * _2294)) + (_2296 * _2296))) * cbSceneParam._m0[33u].y;
        float _4854 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2436 = (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2376 + _2359) / _2371, (_2378 + _2363) / _2371), _2381), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2378 + _2359) / _2371, (_2363 - _2376) / _2371), _2381), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2359 - _2376) / _2371, (_2363 - _2378) / _2371), _2381), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2359 - _2378) / _2371, (_2376 + _2363) / _2371), _2381), 0.0)).x), vec4(0.25)));
        _2443 = 1.0 - (_2436 * cbSceneParam._m0[34u].x);
        _2444 = 1.0 - (_2436 * cbSceneParam._m0[34u].y);
        _2445 = 1.0 - (_2436 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2443 = 1.0;
        _2444 = 1.0;
        _2445 = 1.0;
    }
    float _2509;
    float _2511;
    float _2513;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2497 = fma(_2293, cbSceneParam._m0[63u].w, fma(_2289, cbSceneParam._m0[63u].z, fma(_2285, cbSceneParam._m0[63u].y, _2281 * cbSceneParam._m0[63u].x)));
        float _2498 = fma(_2293, cbSceneParam._m0[60u].w, fma(_2289, cbSceneParam._m0[60u].z, fma(_2285, cbSceneParam._m0[60u].y, _2281 * cbSceneParam._m0[60u].x))) / _2497;
        float _2499 = fma(_2293, cbSceneParam._m0[61u].w, fma(_2289, cbSceneParam._m0[61u].z, fma(_2285, cbSceneParam._m0[61u].y, _2281 * cbSceneParam._m0[61u].x))) / _2497;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2498 >= cbSceneParam._m0[64u].x) && (_2499 >= cbSceneParam._m0[64u].y)) && (_2498 <= cbSceneParam._m0[64u].z)) && (_2499 <= cbSceneParam._m0[64u].w))
        {
            float _2637 = fma(_2293, cbSceneParam._m0[62u].w, fma(_2289, cbSceneParam._m0[62u].z, fma(_2285, cbSceneParam._m0[62u].y, _2281 * cbSceneParam._m0[62u].x))) / _2497;
            float _2641 = isnan(cbSceneParam._m0[41u].w) ? _2637 : (isnan(_2637) ? cbSceneParam._m0[41u].w : max(_2637, cbSceneParam._m0[41u].w));
            float _2684 = (cbSceneParam._m0[33u].x - sqrt(((_2295 * _2295) + (_2294 * _2294)) + (_2296 * _2296))) * cbSceneParam._m0[33u].y;
            float _4870 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
            float _2691 = (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2498, cbSceneParam._m0[33u].w + _2499), _2641), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2498, _2499 - cbSceneParam._m0[33u].z), _2641), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2498 - cbSceneParam._m0[33u].z, _2499 - cbSceneParam._m0[33u].w), _2641), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2498 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2499), _2641), 0.0)).x), vec4(0.25)));
            float _2695 = 1.0 - (_2691 * cbSceneParam._m0[34u].x);
            float _2696 = 1.0 - (_2691 * cbSceneParam._m0[34u].y);
            float _2697 = 1.0 - (_2691 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2697) ? _2445 : (isnan(_2445) ? _2697 : min(_2445, _2697));
            frontier_phi_37_36_ladder_1 = isnan(_2696) ? _2444 : (isnan(_2444) ? _2696 : min(_2444, _2696));
            frontier_phi_37_36_ladder_2 = isnan(_2695) ? _2443 : (isnan(_2443) ? _2695 : min(_2443, _2695));
        }
        else
        {
            frontier_phi_37_36_ladder = _2445;
            frontier_phi_37_36_ladder_1 = _2444;
            frontier_phi_37_36_ladder_2 = _2443;
        }
        _2509 = frontier_phi_37_36_ladder_2;
        _2511 = frontier_phi_37_36_ladder_1;
        _2513 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2509 = _2443;
        _2511 = _2444;
        _2513 = _2445;
    }
    uvec4 _2518 = floatBitsToUint(cbInstanceData._m0[_290 + 5u]);
    uint _2520 = _2518.x * 14u;
    uint _2521 = _2520 + 13u;
    float _2528 = _1189 + (-1.0);
    float _2533 = (cbLight._m0[_2521].x * _2528) + 1.0;
    float _2534 = (cbLight._m0[_2521].y * _2528) + 1.0;
    float _2535 = (cbLight._m0[_2521].z * _2528) + 1.0;
    float _2536 = (cbLight._m0[_2521].w * _2528) + 1.0;
    uint _2537 = _2520 + 5u;
    float _2543 = isnan(1.0) ? _2534 : (isnan(_2534) ? 1.0 : min(_2534, 1.0));
    uint _2547 = _2520 + 4u;
    float _2556 = isnan(1.0) ? _2533 : (isnan(_2533) ? 1.0 : min(_2533, 1.0));
    uint _2560 = _2520 | 1u;
    float _2571 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_1012, _1013, _1014));
    float _2574 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_1012, _1013, _1014));
    float _4906 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _4917 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2579 = (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * 0.3183098733425140380859375;
    float _2581 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * 0.3183098733425140380859375;
    float _2588 = ((cbLight._m0[_2537].x * _2543) * _2581) + (((cbLight._m0[_2547].x * _2509) * _2556) * _2579);
    float _2589 = ((_2543 * cbLight._m0[_2537].y) * _2581) + (((cbLight._m0[_2547].y * _2511) * _2556) * _2579);
    float _2590 = ((_2543 * cbLight._m0[_2537].z) * _2581) + (((cbLight._m0[_2547].z * _2513) * _2556) * _2579);
    uvec4 _2594 = floatBitsToUint(cbLight._m0[_2520 + 12u]);
    bool _2596 = _2594.x == 0u;
    float _2698;
    float _2700;
    float _2702;
    if (_2596)
    {
        _2698 = _2588;
        _2700 = _2589;
        _2702 = _2590;
    }
    else
    {
        uint _2706 = _2520 + 6u;
        float _2722 = (dot(vec3(cbLight._m0[_2520 + 2u].xyz), vec3(_1012, _1013, _1014)) * 0.5) + 0.5;
        float _2723 = _2722 * _2722;
        float _4928 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2724 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
        float _2725 = isnan(1.0) ? _2535 : (isnan(_2535) ? 1.0 : min(_2535, 1.0));
        _2698 = (((cbLight._m0[_2706].x * 0.3183098733425140380859375) * _2724) * _2725) + _2588;
        _2700 = (((cbLight._m0[_2706].y * 0.3183098733425140380859375) * _2724) * _2725) + _2589;
        _2702 = (((cbLight._m0[_2706].z * 0.3183098733425140380859375) * _2724) * _2725) + _2590;
    }
    bool _2705 = _2594.y == 0u;
    float _2760;
    float _2762;
    float _2764;
    if (_2705)
    {
        _2760 = _2698;
        _2762 = _2700;
        _2764 = _2702;
    }
    else
    {
        uint _2933 = _2520 + 7u;
        float _2949 = (dot(vec3(cbLight._m0[_2520 + 3u].xyz), vec3(_1012, _1013, _1014)) * 0.5) + 0.5;
        float _2950 = _2949 * _2949;
        float _4944 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2951 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _2952 = isnan(1.0) ? _2536 : (isnan(_2536) ? 1.0 : min(_2536, 1.0));
        _2760 = (((cbLight._m0[_2933].x * 0.3183098733425140380859375) * _2951) * _2952) + _2698;
        _2762 = (((cbLight._m0[_2933].y * 0.3183098733425140380859375) * _2951) * _2952) + _2700;
        _2764 = (((cbLight._m0[_2933].z * 0.3183098733425140380859375) * _2951) * _2952) + _2702;
    }
    uint _2767 = _2520 + 8u;
    float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _1015) * 0.949999988079071044921875);
    float _2781 = _2780 * _2780;
    float _2782 = cbLight._m0[_2520].x + _1091;
    float _2783 = cbLight._m0[_2520].y + _1092;
    float _2784 = cbLight._m0[_2520].z + _1093;
    float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
    float _2789 = _2788 * _2782;
    float _2790 = _2788 * _2783;
    float _2791 = _2788 * _2784;
    float _2792 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2520].xyz));
    float _4960 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
    float _2795 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
    float _4971 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _2796 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
    float _2797 = dot(vec3(_1012, _1013, _1014), vec3(_2789, _2790, _2791));
    float _4982 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2800 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
    float _2801 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2789, _2790, _2791));
    float _4993 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2805 = _2781 * _2781;
    float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
    float _2817 = exp2(log2(1.0 - (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) * 5.0);
    float _2818 = 0.959999978542327880859375 - _1170;
    float _2820 = 0.959999978542327880859375 - _1171;
    float _2821 = 0.959999978542327880859375 - _1172;
    float _2828 = 1.0 - _2781;
    float _2839 = (0.5 / (((_2796 * ((_2795 * _2828) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2796 * _2828) + _2781) * _2795))) * _2795;
    float _5004 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
    float _2841 = (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
    uint _2855 = _2520 + 9u;
    float _2866 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2560].w)) * _1015) * 0.949999988079071044921875);
    float _2867 = _2866 * _2866;
    float _2868 = cbLight._m0[_2560].x + _1091;
    float _2869 = cbLight._m0[_2560].y + _1092;
    float _2870 = cbLight._m0[_2560].z + _1093;
    float _2874 = inversesqrt(dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870)));
    float _2875 = _2874 * _2868;
    float _2876 = _2874 * _2869;
    float _2877 = _2874 * _2870;
    float _2878 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2560].xyz));
    float _5015 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
    float _2881 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
    float _2882 = dot(vec3(_1012, _1013, _1014), vec3(_2875, _2876, _2877));
    float _5026 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
    float _2885 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
    float _2886 = dot(vec3(cbLight._m0[_2560].xyz), vec3(_2875, _2876, _2877));
    float _5037 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
    float _2890 = _2867 * _2867;
    float _2894 = ((_2885 * _2885) * (_2890 + (-1.0))) + 1.0;
    float _2901 = exp2(log2(1.0 - (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) * 5.0);
    float _2908 = 1.0 - _2867;
    float _2918 = (0.5 / (((_2796 * ((_2881 * _2908) + _2867)) + 9.9999999392252902907785028219223e-09) + (((_2796 * _2908) + _2867) * _2881))) * _2881;
    float _5048 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
    float _2920 = (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_2890 / ((_2894 * _2894) * 3.141590118408203125));
    float _2930 = (((((_2901 * _2818) + _1173) * cbLight._m0[_2855].x) * _2920) * _2543) + ((((cbLight._m0[_2767].x * _2509) * ((_2817 * _2818) + _1173)) * _2841) * _2556);
    float _2931 = (((((_2901 * _2820) + _1175) * cbLight._m0[_2855].y) * _2920) * _2543) + ((((cbLight._m0[_2767].y * _2511) * ((_2817 * _2820) + _1175)) * _2841) * _2556);
    float _2932 = (((((_2901 * _2821) + _1176) * cbLight._m0[_2855].z) * _2920) * _2543) + ((((cbLight._m0[_2767].z * _2513) * ((_2817 * _2821) + _1176)) * _2841) * _2556);
    float _2988;
    float _2990;
    float _2992;
    if (_2596)
    {
        _2988 = _2930;
        _2990 = _2931;
        _2992 = _2932;
    }
    else
    {
        uint _2994 = _2520 + 2u;
        uint _2998 = _2520 + 10u;
        float _3012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2994].w)) * _1015) * 0.949999988079071044921875);
        float _3013 = _3012 * _3012;
        float _3014 = cbLight._m0[_2994].x + _1091;
        float _3015 = cbLight._m0[_2994].y + _1092;
        float _3016 = cbLight._m0[_2994].z + _1093;
        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
        float _3021 = _3020 * _3014;
        float _3022 = _3020 * _3015;
        float _3023 = _3020 * _3016;
        float _3024 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2994].xyz));
        float _5059 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
        float _3027 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
        float _3028 = dot(vec3(_1012, _1013, _1014), vec3(_3021, _3022, _3023));
        float _5070 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3031 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
        float _3032 = dot(vec3(cbLight._m0[_2994].xyz), vec3(_3021, _3022, _3023));
        float _5081 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3036 = _3013 * _3013;
        float _3040 = ((_3031 * _3031) * (_3036 + (-1.0))) + 1.0;
        float _3047 = exp2(log2(1.0 - (isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0)))) * 5.0);
        float _3054 = 1.0 - _3013;
        float _3064 = (0.5 / (((_2796 * ((_3027 * _3054) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_2796 * _3054) + _3013) * _3027))) * _3027;
        float _5092 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        float _3066 = (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0))) * (_3036 / ((_3040 * _3040) * 3.141590118408203125));
        float _3067 = isnan(1.0) ? _2535 : (isnan(_2535) ? 1.0 : min(_2535, 1.0));
        _2988 = (((((_3047 * _2818) + _1173) * cbLight._m0[_2998].x) * _3066) * _3067) + _2930;
        _2990 = (((((_3047 * _2820) + _1175) * cbLight._m0[_2998].y) * _3066) * _3067) + _2931;
        _2992 = (((((_3047 * _2821) + _1176) * cbLight._m0[_2998].z) * _3066) * _3067) + _2932;
    }
    float _3098;
    float _3100;
    float _3102;
    if (_2705)
    {
        _3098 = _2988;
        _3100 = _2990;
        _3102 = _2992;
    }
    else
    {
        uint _3109 = _2520 + 3u;
        uint _3113 = _2520 + 11u;
        float _3127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3109].w)) * _1015) * 0.949999988079071044921875);
        float _3128 = _3127 * _3127;
        float _3129 = cbLight._m0[_3109].x + _1091;
        float _3130 = cbLight._m0[_3109].y + _1092;
        float _3131 = cbLight._m0[_3109].z + _1093;
        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
        float _3136 = _3135 * _3129;
        float _3137 = _3135 * _3130;
        float _3138 = _3135 * _3131;
        float _3139 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_3109].xyz));
        float _5108 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
        float _3142 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
        float _3143 = dot(vec3(_1012, _1013, _1014), vec3(_3136, _3137, _3138));
        float _5119 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
        float _3146 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
        float _3147 = dot(vec3(cbLight._m0[_3109].xyz), vec3(_3136, _3137, _3138));
        float _5130 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
        float _3151 = _3128 * _3128;
        float _3155 = ((_3146 * _3146) * (_3151 + (-1.0))) + 1.0;
        float _3162 = exp2(log2(1.0 - (isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0)))) * 5.0);
        float _3169 = 1.0 - _3128;
        float _3179 = (0.5 / (((_2796 * ((_3142 * _3169) + _3128)) + 9.9999999392252902907785028219223e-09) + (((_2796 * _3169) + _3128) * _3142))) * _3142;
        float _5141 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
        float _3181 = (isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0))) * (_3151 / ((_3155 * _3155) * 3.141590118408203125));
        float _3182 = isnan(1.0) ? _2536 : (isnan(_2536) ? 1.0 : min(_2536, 1.0));
        _3098 = (((((_3162 * _2818) + _1173) * cbLight._m0[_3113].x) * _3181) * _3182) + _2988;
        _3100 = (((((_3162 * _2820) + _1175) * cbLight._m0[_3113].y) * _3181) * _3182) + _2990;
        _3102 = (((((_3162 * _2821) + _1176) * cbLight._m0[_3113].z) * _3181) * _3182) + _2992;
    }
    float _3248;
    float _3250;
    float _3252;
    float _3254;
    float _3256;
    float _3258;
    if (_2518.y == 0u)
    {
        uvec4 _3203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3204 = _3203.x;
        uint _3215 = uint((float(_3203.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1112) / _3204))) + floor(float(uint(cbSceneParam._m0[85u].x * _1111) / _3204)));
        float _3225 = (log2(_2296 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3226 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
        uint _3229 = uint(isnan(14.0) ? _3226 : (isnan(_3226) ? 14.0 : min(_3226, 14.0)));
        uvec4 _3234 = texelFetch(g_lightClusterGridBuffer, int(((_3229 << 2u) + (_3215 << 6u)) >> 2u));
        uint _3235 = _3234.x;
        uint _3236 = _3203.z;
        float _3315;
        float _3317;
        float _3319;
        float _3321;
        float _3323;
        float _3325;
        if (((((1u << ((_3236 >> 4u) & 15u)) + 4294967295u) & _3235) == 0u) || ((_3236 & 240u) == 0u))
        {
            _3315 = 0.0;
            _3317 = 0.0;
            _3319 = 0.0;
            _3321 = 0.0;
            _3323 = 0.0;
            _3325 = 0.0;
        }
        else
        {
            float _3316;
            float _3318;
            float _3320;
            float _3322;
            float _3324;
            float _3326;
            float _3468 = 0.0;
            float _3469 = 0.0;
            float _3470 = 0.0;
            float _3471 = 0.0;
            float _3472 = 0.0;
            float _3473 = 0.0;
            uint _3474 = 0u;
            uint _3483;
            bool _3484;
            for (;;)
            {
                _3483 = texelFetch(g_lightClassification, int((((_3229 << 5u) + (_3215 << 9u)) + (_3474 << 2u)) >> 2u)).x;
                _3484 = _3483 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3484)
                {
                    frontier_phi_71_pred = _3473;
                    frontier_phi_71_pred_1 = _3472;
                    frontier_phi_71_pred_2 = _3471;
                    frontier_phi_71_pred_3 = _3470;
                    frontier_phi_71_pred_4 = _3469;
                    frontier_phi_71_pred_5 = _3468;
                }
                else
                {
                    float _3613;
                    float _3614;
                    float _3615;
                    float _3616;
                    float _3617;
                    float _3618;
                    uint _3619;
                    _3613 = _3468;
                    _3614 = _3469;
                    _3615 = _3470;
                    _3616 = _3471;
                    _3617 = _3472;
                    _3618 = _3473;
                    _3619 = _3483;
                    float _3540;
                    float _3541;
                    float _3542;
                    float _3543;
                    float _3544;
                    float _3545;
                    for (;;)
                    {
                        uint _3623 = uint(findLSB(_3619)) + (_3474 << 5u);
                        uint _3620 = (_3619 + 4294967295u) & _3619;
                        uint _3625 = _3623 * 48u;
                        vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3625)).x, texelFetch(g_PointLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3625 + 3u)).x));
                        uint _3645 = (_3623 * 48u) + 4u;
                        vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3645)).x, texelFetch(g_PointLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3645 + 3u)).x));
                        uint _3664 = (_3623 * 48u) + 8u;
                        vec3 _3675 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3664)).x, texelFetch(g_PointLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3664 + 2u)).x));
                        float _3679 = _3639.x - _2294;
                        float _3680 = _3639.y - _2295;
                        float _3681 = _3639.z - _2296;
                        float _3682 = dot(vec3(_3679, _3680, _3681), vec3(_3679, _3680, _3681));
                        float _3685 = inversesqrt(_3682);
                        float _3686 = _3685 * _3679;
                        float _3687 = _3685 * _3680;
                        float _3688 = _3685 * _3681;
                        float _3689 = dot(vec3(_1130, _1133, _1136), vec3(_3686, _3687, _3688));
                        float _3694 = 1.0 - (_3682 * _3639.w);
                        float _5167 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                        float _3695 = isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0));
                        float _3696 = sqrt(_3682) * _3658.w;
                        float _3699 = 1.39999997615814208984375 / (_3696 + 1.39999997615814208984375);
                        float _3700 = _3699 * _3699;
                        float _3703 = ((1.0 - _3700) * _3689) + _3700;
                        float _3706 = _3696 * _3696;
                        float _3710 = ((isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0))) * _3695) / ((_3706 * 0.699999988079071044921875) + 1.0);
                        float _3714 = (-0.0) - _2294;
                        float _3715 = (-0.0) - _2295;
                        float _3716 = (-0.0) - _2296;
                        float _3720 = inversesqrt(dot(vec3(_3714, _3715, _3716), vec3(_3714, _3715, _3716)));
                        float _3721 = _3720 * _3714;
                        float _3722 = _3720 * _3715;
                        float _3723 = _3720 * _3716;
                        float _3730 = exp2(log2(1.0 / ((_3706 * 3.5) + 5.0)) * 0.25);
                        float _3731 = 1.0 - _1205;
                        float _3738 = sqrt(1.0 - ((1.0 - (_3731 * _3731)) * (1.0 - (_3730 * _3730))));
                        float _3739 = _3738 * _3738;
                        float _3740 = _3739 * _3739;
                        float _3741 = _3721 + _3686;
                        float _3742 = _3722 + _3687;
                        float _3743 = _3723 + _3688;
                        float _3747 = inversesqrt(dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743)));
                        float _3751 = dot(vec3(_1130, _1133, _1136), vec3(_3721, _3722, _3723));
                        float _5183 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                        float _3754 = isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0));
                        float _3755 = dot(vec3(_1130, _1133, _1136), vec3(_3747 * _3741, _3747 * _3742, _3747 * _3743));
                        float _5194 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                        float _3758 = isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0));
                        float _3762 = ((_3758 * _3758) * (_3740 + (-1.0))) + 1.0;
                        float _3763 = _3699 * _3739;
                        float _3764 = _3763 * _3763;
                        float _3767 = ((1.0 - _3764) * _3689) + _3764;
                        float _5205 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                        float _3768 = isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0));
                        float _3769 = 1.0 - _3739;
                        float _3779 = (0.5 / (((_3768 * ((_3754 * _3769) + _3739)) + 9.9999999392252902907785028219223e-09) + (((_3768 * _3769) + _3739) * _3754))) * _3768;
                        float _5216 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                        float _3790 = (((_3740 * 3.1415927410125732421875) * (isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0)))) / ((_3762 * _3762) * ((_3706 * 2.1991131305694580078125) + 3.141590118408203125))) * _3695;
                        _3543 = (_3710 * _3658.x) + _3616;
                        _3544 = (_3710 * _3658.y) + _3617;
                        _3545 = (_3710 * _3658.z) + _3618;
                        _3540 = (_3790 * _3675.x) + _3613;
                        _3541 = (_3790 * _3675.y) + _3614;
                        _3542 = (_3790 * _3675.z) + _3615;
                        if (_3620 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3613 = _3540;
                            _3614 = _3541;
                            _3615 = _3542;
                            _3616 = _3543;
                            _3617 = _3544;
                            _3618 = _3545;
                            _3619 = _3620;
                        }
                    }
                    frontier_phi_71_pred = _3545;
                    frontier_phi_71_pred_1 = _3544;
                    frontier_phi_71_pred_2 = _3543;
                    frontier_phi_71_pred_3 = _3542;
                    frontier_phi_71_pred_4 = _3541;
                    frontier_phi_71_pred_5 = _3540;
                }
                _3326 = frontier_phi_71_pred;
                _3324 = frontier_phi_71_pred_1;
                _3322 = frontier_phi_71_pred_2;
                _3320 = frontier_phi_71_pred_3;
                _3318 = frontier_phi_71_pred_4;
                _3316 = frontier_phi_71_pred_5;
                uint _3475 = _3474 + 1u;
                if (_3475 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3468 = _3316;
                    _3469 = _3318;
                    _3470 = _3320;
                    _3471 = _3322;
                    _3472 = _3324;
                    _3473 = _3326;
                    _3474 = _3475;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3315 = _3316;
            _3317 = _3318;
            _3319 = _3320;
            _3321 = _3322;
            _3323 = _3324;
            _3325 = _3326;
        }
        uvec4 _3329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3330 = _3329.z;
        uint _3332 = (_3330 >> 8u) & 15u;
        float _3436;
        float _3438;
        float _3440;
        float _3442;
        float _3444;
        float _3446;
        if (((4294967295u << _3332) & _3235) == 0u)
        {
            _3436 = _3315;
            _3438 = _3317;
            _3440 = _3319;
            _3442 = _3321;
            _3444 = _3323;
            _3446 = _3325;
        }
        else
        {
            float _3461 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
            float _3462 = _3461 * _2294;
            float _3463 = _3461 * _2295;
            float _3464 = _3461 * _2296;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3332 < ((_3330 >> 12u) & 15u))
            {
                float _3437;
                float _3439;
                float _3441;
                float _3443;
                float _3445;
                float _3447;
                float _3596 = _3315;
                float _3597 = _3317;
                float _3598 = _3319;
                float _3599 = _3321;
                float _3600 = _3323;
                float _3601 = _3325;
                uint _3602 = _3332;
                uint _3611;
                bool _3612;
                for (;;)
                {
                    _3611 = texelFetch(g_lightClassification, int((((_3229 << 5u) + (_3215 << 9u)) + (_3602 << 2u)) >> 2u)).x;
                    _3612 = _3611 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3612)
                    {
                        frontier_phi_82_pred = _3601;
                        frontier_phi_82_pred_1 = _3600;
                        frontier_phi_82_pred_2 = _3599;
                        frontier_phi_82_pred_3 = _3598;
                        frontier_phi_82_pred_4 = _3597;
                        frontier_phi_82_pred_5 = _3596;
                    }
                    else
                    {
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _4097;
                        float _4098;
                        float _4099;
                        float _4100;
                        float _4101;
                        float _4102;
                        float _3817 = _3596;
                        float _3818 = _3597;
                        float _3819 = _3598;
                        float _3820 = _3599;
                        float _3821 = _3600;
                        float _3822 = _3601;
                        uint _3823 = _3611;
                        uint _3824;
                        vec4 _3849;
                        float _3850;
                        vec4 _3865;
                        vec3 _3877;
                        vec4 _3892;
                        vec4 _3907;
                        float _3953;
                        bool _3954;
                        for (;;)
                        {
                            uint _3834 = ((_3602 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3823));
                            _3824 = (_3823 + 4294967295u) & _3823;
                            uint _3836 = _3834 * 40u;
                            _3849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 3u)).x));
                            _3850 = _3849.w;
                            uint _3852 = (_3834 * 40u) + 4u;
                            _3865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 3u)).x));
                            uint _3867 = (_3834 * 40u) + 8u;
                            _3877 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 2u)).x));
                            uint _3879 = (_3834 * 40u) + 16u;
                            _3892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 3u)).x));
                            uint _3894 = (_3834 * 40u) + 20u;
                            _3907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 3u)).x));
                            uint _3909 = (_3834 * 40u) + 24u;
                            vec4 _3922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 3u)).x));
                            uint _3928 = (_3834 * 40u) + 28u;
                            vec4 _3941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3928 + 3u)).x));
                            _3953 = fma(_2296, _3941.z, fma(_2295, _3941.y, _3941.x * _2294)) + _3941.w;
                            _3954 = !((fma(_2296, _3922.z, fma(_2295, _3922.y, _3922.x * _2294)) + _3922.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3954)
                            {
                                float _3981 = _3849.x - _2294;
                                float _3982 = _3849.y - _2295;
                                float _3983 = _3849.z - _2296;
                                float _3984 = dot(vec3(_3981, _3982, _3983), vec3(_3981, _3982, _3983));
                                float _3987 = inversesqrt(_3984);
                                float _3988 = _3987 * _3981;
                                float _3989 = _3987 * _3982;
                                float _3990 = _3987 * _3983;
                                float _3994 = 1.0 - (_3984 / (_3850 * _3850));
                                float _5227 = isnan(0.0) ? _3994 : (isnan(_3994) ? 0.0 : max(_3994, 0.0));
                                float _3995 = isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0));
                                float _3999 = sqrt(_3984) * _3865.w;
                                float _4001 = 1.39999997615814208984375 / (_3999 + 1.39999997615814208984375);
                                float _4002 = _4001 * _4001;
                                float _4005 = ((1.0 - _4002) * dot(vec3(_3988, _3989, _3990), vec3(_1130, _1133, _1136))) + _4002;
                                float _4008 = _3999 * _3999;
                                float _4012 = (fma(_2296, _3892.z, fma(_2295, _3892.y, _3892.x * _2294)) + _3892.w) / _3953;
                                float _4013 = (fma(_2296, _3907.z, fma(_2295, _3907.y, _3907.x * _2294)) + _3907.w) / _3953;
                                float _4017 = 1.0 - dot(vec2(_4012, _4013), vec2(_4012, _4013));
                                float _5243 = isnan(0.0) ? _4017 : (isnan(_4017) ? 0.0 : max(_4017, 0.0));
                                float _4018 = isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0));
                                float _4019 = _4018 * (((isnan(0.0) ? _4005 : (isnan(_4005) ? 0.0 : max(_4005, 0.0))) * _3995) / ((_4008 * 0.699999988079071044921875) + 1.0));
                                float _4031 = exp2(log2(1.0 / ((_4008 * 3.5) + 5.0)) * 0.25);
                                float _4032 = 1.0 - _1205;
                                float _4039 = sqrt(1.0 - ((1.0 - (_4032 * _4032)) * (1.0 - (_4031 * _4031))));
                                float _4040 = _4039 * _4039;
                                float _4041 = _4040 * _4040;
                                float _4042 = _3988 - _3462;
                                float _4043 = _3989 - _3463;
                                float _4044 = _3990 - _3464;
                                float _4048 = inversesqrt(dot(vec3(_4042, _4043, _4044), vec3(_4042, _4043, _4044)));
                                float _4052 = dot(vec3(_1130, _1133, _1136), vec3((-0.0) - _3462, (-0.0) - _3463, (-0.0) - _3464));
                                float _5254 = isnan(0.0) ? _4052 : (isnan(_4052) ? 0.0 : max(_4052, 0.0));
                                float _4055 = isnan(1.0) ? _5254 : (isnan(_5254) ? 1.0 : min(_5254, 1.0));
                                float _4056 = dot(vec3(_1130, _1133, _1136), vec3(_4048 * _4042, _4048 * _4043, _4048 * _4044));
                                float _5265 = isnan(0.0) ? _4056 : (isnan(_4056) ? 0.0 : max(_4056, 0.0));
                                float _4059 = isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0));
                                float _4063 = ((_4059 * _4059) * (_4041 + (-1.0))) + 1.0;
                                float _4064 = _4001 * _4040;
                                float _4065 = _4064 * _4064;
                                float _4071 = ((1.0 - _4065) * dot(vec3(_1130, _1133, _1136), vec3(_3988, _3989, _3990))) + _4065;
                                float _5276 = isnan(0.0) ? _4071 : (isnan(_4071) ? 0.0 : max(_4071, 0.0));
                                float _4072 = isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0));
                                float _4073 = 1.0 - _4040;
                                float _4083 = (0.5 / (((_4072 * ((_4055 * _4073) + _4040)) + 9.9999999392252902907785028219223e-09) + (((_4072 * _4073) + _4040) * _4055))) * _4072;
                                float _5287 = isnan(0.0) ? _4083 : (isnan(_4083) ? 0.0 : max(_4083, 0.0));
                                float _4093 = (_4018 * _3995) * (((_4041 * 3.1415927410125732421875) * (isnan(1.0) ? _5287 : (isnan(_5287) ? 1.0 : min(_5287, 1.0)))) / ((_4063 * _4063) * ((_4008 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4019 * _3865.z;
                                frontier_phi_88_pred_1 = _4019 * _3865.y;
                                frontier_phi_88_pred_2 = _4019 * _3865.x;
                                frontier_phi_88_pred_3 = _4093 * _3877.z;
                                frontier_phi_88_pred_4 = _4093 * _3877.y;
                                frontier_phi_88_pred_5 = _4093 * _3877.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4102 = frontier_phi_88_pred;
                            _4101 = frontier_phi_88_pred_1;
                            _4100 = frontier_phi_88_pred_2;
                            _4099 = frontier_phi_88_pred_3;
                            _4098 = frontier_phi_88_pred_4;
                            _4097 = frontier_phi_88_pred_5;
                            _3807 = _4100 + _3820;
                            _3808 = _4101 + _3821;
                            _3809 = _4102 + _3822;
                            _3804 = _4097 + _3817;
                            _3805 = _4098 + _3818;
                            _3806 = _4099 + _3819;
                            if (_3824 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3817 = _3804;
                                _3818 = _3805;
                                _3819 = _3806;
                                _3820 = _3807;
                                _3821 = _3808;
                                _3822 = _3809;
                                _3823 = _3824;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3809;
                        frontier_phi_82_pred_1 = _3808;
                        frontier_phi_82_pred_2 = _3807;
                        frontier_phi_82_pred_3 = _3806;
                        frontier_phi_82_pred_4 = _3805;
                        frontier_phi_82_pred_5 = _3804;
                    }
                    _3447 = frontier_phi_82_pred;
                    _3445 = frontier_phi_82_pred_1;
                    _3443 = frontier_phi_82_pred_2;
                    _3441 = frontier_phi_82_pred_3;
                    _3439 = frontier_phi_82_pred_4;
                    _3437 = frontier_phi_82_pred_5;
                    uint _3603 = _3602 + 1u;
                    if (_3603 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3596 = _3437;
                        _3597 = _3439;
                        _3598 = _3441;
                        _3599 = _3443;
                        _3600 = _3445;
                        _3601 = _3447;
                        _3602 = _3603;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3443;
                frontier_phi_63_64_ladder_1 = _3447;
                frontier_phi_63_64_ladder_2 = _3445;
                frontier_phi_63_64_ladder_3 = _3441;
                frontier_phi_63_64_ladder_4 = _3439;
                frontier_phi_63_64_ladder_5 = _3437;
            }
            else
            {
                frontier_phi_63_64_ladder = _3321;
                frontier_phi_63_64_ladder_1 = _3325;
                frontier_phi_63_64_ladder_2 = _3323;
                frontier_phi_63_64_ladder_3 = _3319;
                frontier_phi_63_64_ladder_4 = _3317;
                frontier_phi_63_64_ladder_5 = _3315;
            }
            _3436 = frontier_phi_63_64_ladder_5;
            _3438 = frontier_phi_63_64_ladder_4;
            _3440 = frontier_phi_63_64_ladder_3;
            _3442 = frontier_phi_63_64_ladder;
            _3444 = frontier_phi_63_64_ladder_2;
            _3446 = frontier_phi_63_64_ladder_1;
        }
        float _3451 = isnan(1.0) ? _1189 : (isnan(_1189) ? 1.0 : min(_1189, 1.0));
        _3248 = (_3451 * _3442) + _2760;
        _3250 = (_3451 * _3444) + _2762;
        _3252 = (_3451 * _3446) + _2764;
        _3254 = ((_3436 * _1173) * _3451) + _3098;
        _3256 = ((_3438 * _1175) * _3451) + _3100;
        _3258 = ((_3440 * _1176) * _3451) + _3102;
    }
    else
    {
        _3248 = _2760;
        _3250 = _2762;
        _3252 = _2764;
        _3254 = _3098;
        _3256 = _3100;
        _3258 = _3102;
    }
    float _5303 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _5314 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _5325 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _3275 = ((isnan(1.0) ? _5303 : (isnan(_5303) ? 1.0 : min(_5303, 1.0))) * (_3248 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1189))) + ((_3254 + ((isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0))) * _2027)) * cbPerFrame._m0[3u].x);
    float _3276 = ((isnan(1.0) ? _5314 : (isnan(_5314) ? 1.0 : min(_5314, 1.0))) * (_3250 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1189))) + ((_3256 + ((isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0))) * _2027)) * cbPerFrame._m0[3u].x);
    float _3277 = ((isnan(1.0) ? _5325 : (isnan(_5325) ? 1.0 : min(_5325, 1.0))) * (_3252 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1189))) + ((_3258 + ((isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))) * _2027)) * cbPerFrame._m0[3u].x);
    uint _3278 = _290 + 6u;
    float _3286 = _1111 / cbSceneParam._m0[86u].x;
    float _3287 = _1112 / cbSceneParam._m0[86u].y;
    vec4 _3301 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3286, _3287, (log2((isnan(cbSceneParam._m0[77u].w) ? _1034 : (isnan(_1034) ? cbSceneParam._m0[77u].w : min(_1034, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3303 = _3301.x;
    float _3304 = _3301.y;
    float _3305 = _3301.z;
    float _3306 = _3301.w;
    float _3378;
    float _3380;
    float _3382;
    float _3384;
    if (_1034 > cbSceneParam._m0[78u].w)
    {
        float _3340 = isnan(_1034) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1034 : min(cbSceneParam._m0[80u].w, _1034));
        float _3341 = _3340 / _1034;
        float _3352 = _3341 * _1084;
        float _3353 = _1085 * _3341;
        float _3354 = (-0.0) - _3353;
        float _3356 = _3341 * _1086;
        float _3358 = (cbSceneParam._m0[77u].w * _3354) / _3340;
        float _3359 = _3358 + cbSceneParam._m0[79u].w;
        float _3360 = cbSceneParam._m0[79u].w - _3353;
        float _3366 = sqrt(((_3352 * _3352) + (_3353 * _3353)) + (_3356 * _3356));
        float _3369 = (1.0 - (cbSceneParam._m0[77u].w / _3340)) * _3366;
        float _3374 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3376 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3553;
        if (abs((_3354 - _3358) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3553 = ((((_3359 > 0.0) ? exp2(_3374 * _3359) : (2.0 - exp2(_3376 * _3359))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3369;
        }
        else
        {
            float _3497 = 1.0 / cbSceneParam._m0[80u].x;
            float _3498 = isnan(_3360) ? _3359 : (isnan(_3359) ? _3360 : max(_3359, _3360));
            float _3499 = isnan(_3360) ? _3359 : (isnan(_3359) ? _3360 : min(_3359, _3360));
            float _3508 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : min(_3498, 0.0));
            float _3509 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : min(_3499, 0.0));
            _3553 = ((abs(_3366 / _3354) * cbSceneParam._m0[80u].y) * ((((_3508 - _3509) * 2.0) - ((exp2(_3374 * (isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0)))) - exp2(_3374 * (isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))))) * _3497)) - ((exp2(_3376 * _3508) - exp2(_3376 * _3509)) * _3497))) + (_3369 * cbSceneParam._m0[80u].z);
        }
        vec4 _3555 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3286, _3287, 1.0), 0.0);
        float _3564 = exp2((_3553 * (-1.44269502162933349609375)) * (1.0 - _3555.w));
        float _3565 = log2(_3564);
        float _3581 = log2(_3306);
        _3378 = (exp2(_3581 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3565 * cbSceneParam._m0[78u].x)) * _3555.x) / cbSceneParam._m0[78u].x)) + _3303;
        _3380 = (exp2(_3581 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3565 * cbSceneParam._m0[78u].y)) * _3555.y) / cbSceneParam._m0[78u].y)) + _3304;
        _3382 = (exp2(_3581 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3565 * cbSceneParam._m0[78u].z)) * _3555.z) / cbSceneParam._m0[78u].z)) + _3305;
        _3384 = _3564 * _3306;
    }
    else
    {
        _3378 = _3303;
        _3380 = _3304;
        _3382 = _3305;
        _3384 = _3306;
    }
    bool _3591;
    vec4 _3394;
    vec4 _3416;
    float _3418;
    float _3422;
    float _3423;
    float _3424;
    float _3425;
    bool _3435;
    for (;;)
    {
        _3394 = cbMatDynParam._m0[0u];
        float _3396 = roundEven(_3394.y);
        bool _3397 = _3396 == 3.0;
        float _3398 = log2(_3384);
        float _3405 = exp2(_3398 * cbSceneParam._m0[78u].x) * _3275;
        float _3406 = exp2(_3398 * cbSceneParam._m0[78u].y) * _3276;
        float _3407 = exp2(_3398 * cbSceneParam._m0[78u].z) * _3277;
        float _3414 = _1100 + (-0.5);
        _3416 = cbMtdParam._m0[1u];
        _3418 = _3416.y * _3414;
        float _3421 = (_3396 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3422 = _3421 * (_3397 ? _3405 : (_3405 + (cbSceneParam._m0[72u].w * _3378)));
        _3423 = _3421 * (_3397 ? _3406 : (_3406 + (cbSceneParam._m0[72u].w * _3380)));
        _3424 = _3421 * (_3397 ? _3407 : (_3407 + (cbSceneParam._m0[72u].w * _3382)));
        _3425 = _3414 * 0.999000012874603271484375;
        _3435 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3435)
        {
            if ((cbInstanceData._m0[_290 + 7u].x + _3425) < 0.5)
            {
                _3591 = true;
                break;
            }
        }
        uint _3532 = _1149 + uint(_3394.w);
        if ((cbInstanceData._m0[_3532].w < 1.0) && ((cbInstanceData._m0[_3532].w + _3425) < 0.5))
        {
            _3591 = true;
            break;
        }
        if ((_3418 + 1.0) < _3416.x)
        {
            _3591 = true;
            break;
        }
        _3591 = false;
        break;
    }
    float _3795;
    if (_3591)
    {
        discard_state = true;
        _3795 = 0.0;
    }
    else
    {
        _3795 = cbInstanceData._m0[_3278].w;
    }
    SV_Target.x = _3422;
    SV_Target.y = _3423;
    SV_Target.z = _3424;
    SV_Target.w = _3795;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3278].w;
    discard_exit();
}


