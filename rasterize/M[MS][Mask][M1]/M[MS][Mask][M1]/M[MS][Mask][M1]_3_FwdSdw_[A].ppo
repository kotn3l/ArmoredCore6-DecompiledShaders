#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1230;
float _3897;
float _3898;
float _3899;
float _3900;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3909 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3920 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3931 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _403 = _401.x;
    float _415 = dot(vec4(_403, _401.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _432 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_403 - _415) * cbMtdParam._m0[23u].w) + _415) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3942 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _440 = (_433 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _441 = (_433 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _442 = (_433 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _446 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _440;
    float _449 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _441;
    float _452 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _442;
    float _459 = ((_440 - _446) * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) + _446;
    float _460 = ((_441 - _449) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _449;
    float _461 = ((_442 - _452) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) + _452;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _529 = ((_499.z - _520) * _433) + _520;
    float _532 = ((((_499.x - _518) * _433) + _518) * 2.0) + (-1.0);
    float _533 = ((((_499.y - _519) * _433) + _519) * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3953 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _573 = (_532 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_474.x * 2.0) + (-1.0)))) + (((_561.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _574 = (_533 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_474.y * 2.0) + (-1.0)))) + (((_561.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _602 = _600.x;
    float _620 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _602) * _433) + _602;
    float _624 = ((_586.x - _620) * cbMtdParam._m0[19u].z) + _620;
    float _629 = (((_474.z - _529) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _529;
    float _633 = ((_561.z - _629) * cbMtdParam._m0[19u].w) + _629;
    float _635 = cbMtdParam._m0[22u].x + _561.w;
    float _638 = fma(_539, _236 * NORMAL.x, fma(_574, _243 * TANGENT.x, (_229 * _221) * _573));
    float _641 = fma(_539, _236 * NORMAL.y, fma(_574, _243 * TANGENT.y, (_229 * _222) * _573));
    float _644 = fma(_539, _236 * NORMAL.z, fma(_574, _243 * TANGENT.z, (_229 * _223) * _573));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    float _649 = _648 * _638;
    float _650 = _648 * _641;
    float _651 = _648 * _644;
    float _3964 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _652 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3986 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3997 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4008 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4019 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _657 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _722 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _712);
    float _723 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _712);
    float _724 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _712);
    float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
    float _729 = _722 * _728;
    float _730 = _723 * _728;
    float _731 = _724 * _728;
    vec4 _736 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _738 = _736.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _910 = sqrt(((_722 * _722) + (_723 * _723)) + (_724 * _724));
        float _916 = (cbMatDynParam._m0[5u].x * _910) + cbMatDynParam._m0[5u].y;
        float _4030 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _921 = (cbMatDynParam._m0[5u].z * _910) + cbMatDynParam._m0[5u].w;
        float _4041 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) - _917)) + _917) < ((_738 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _749 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _750 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _768 = fma(_651, cbSceneParam._m0[5u].z, fma(_650, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _649));
    float _771 = fma(_651, cbSceneParam._m0[6u].z, fma(_650, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _649));
    float _774 = fma(_651, cbSceneParam._m0[7u].z, fma(_650, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _649));
    uint _787 = _270 + 9u;
    uint _788 = _787 + uint(cbMatDynParam._m0[0u].w);
    float _794 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_788].x;
    float _795 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_788].y;
    float _796 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_788].z;
    float _4052 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _800 = 1.0 - _657;
    float _801 = _797 * _800;
    float _802 = _798 * _800;
    float _803 = _799 * _800;
    float _808 = (_797 + (-0.039999999105930328369140625)) * _657;
    float _809 = (_798 + (-0.039999999105930328369140625)) * _657;
    float _810 = (_799 + (-0.039999999105930328369140625)) * _657;
    float _811 = _808 + 0.039999999105930328369140625;
    float _813 = _809 + 0.039999999105930328369140625;
    float _814 = _810 + 0.039999999105930328369140625;
    vec4 _823 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _749, cbSceneParam._m0[86u].y * _750));
    float _827 = ((isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * TEXCOORD_5.w) * _823.x;
    float _828 = dot(vec3(_649, _650, _651), vec3(_729, _730, _731));
    float _831 = _828 * 2.0;
    float _835 = (_831 * _649) - _729;
    float _836 = (_831 * _650) - _730;
    float _837 = (_831 * _651) - _731;
    float _841 = abs(dot(vec3(_729, _730, _731), vec3(_649, _650, _651)));
    float _4085 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _843 = sqrt(_652);
    float _856 = exp2((_843 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_843 * 3.0));
    float _862 = (1.0 - _856) * ((_843 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _863 = _856 * _843;
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_899, cbModelParam._m0[26u].z, fma(_895, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _891));
        float _958 = fma(_899, cbModelParam._m0[27u].z, fma(_895, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _891));
        float _962 = fma(_899, cbModelParam._m0[28u].z, fma(_895, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _891));
        float _987 = _891 + _649;
        float _988 = _895 + _650;
        float _989 = _899 + _651;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _954;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _958;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _962;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_649, _650, _651), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _4133 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_649, _650, _651), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _4166 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_649, _650, _651), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _4199 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1272 = fma(_899, cbModelParam._m0[30u].z, fma(_895, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _891));
        float _1276 = fma(_899, cbModelParam._m0[31u].z, fma(_895, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _891));
        float _1280 = fma(_899, cbModelParam._m0[32u].z, fma(_895, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _891));
        float _1303 = _891 + _649;
        float _1304 = _895 + _650;
        float _1305 = _899 + _651;
        float _1315 = fma(_1305, cbModelParam._m0[30u].z, fma(_1304, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1303)) - _1272;
        float _1316 = fma(_1305, cbModelParam._m0[31u].z, fma(_1304, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1303)) - _1276;
        float _1317 = fma(_1305, cbModelParam._m0[32u].z, fma(_1304, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1303)) - _1280;
        float _1321 = inversesqrt(dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317)));
        float _1334 = ((_1321 * _1315) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1272 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1321 * _1316) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1276 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1321 * _1317) / cbModelParam._m0[35u].z) + ((((((_1280 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1334, _1335, _1336), 0.0);
        float _1371 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1338.x + (-0.5));
        float _1373 = _1371 * (_1338.y + (-0.5));
        float _1374 = _1371 * (_1338.z + (-0.5));
        float _1381 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1345.x + (-0.5));
        float _1383 = _1381 * (_1345.y + (-0.5));
        float _1384 = _1381 * (_1345.z + (-0.5));
        float _1391 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1352.x + (-0.5));
        float _1393 = _1391 * (_1352.y + (-0.5));
        float _1394 = _1391 * (_1352.z + (-0.5));
        float _1401 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1359.x + (-0.5));
        float _1403 = _1401 * (_1359.y + (-0.5));
        float _1404 = _1401 * (_1359.z + (-0.5));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = _1372 * 0.5;
        float _1409 = _1382 * 0.5;
        float _1410 = _1392 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_649, _650, _651), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4262 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1435 + 1.0))) + _1440) * _1405;
        float _1450 = _1373 * 0.5;
        float _1451 = _1383 * 0.5;
        float _1452 = _1393 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_649, _650, _651), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4295 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1477 + 1.0))) + _1482) * _1406;
        float _1492 = _1374 * 0.5;
        float _1493 = _1384 * 0.5;
        float _1494 = _1394 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_649, _650, _651), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4328 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1519 + 1.0))) + _1524) * _1407;
        _1541 = _1374;
        _1542 = _1373;
        _1543 = _1372;
        _1544 = _1384;
        _1545 = _1383;
        _1546 = _1382;
        _1547 = _1394;
        _1548 = _1393;
        _1549 = _1392;
        _1550 = _1407;
        _1551 = _1406;
        _1552 = _1405;
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
    }
    else
    {
        _1541 = _1230;
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = _1230;
        _1551 = _1230;
        _1552 = _1230;
        _1553 = 0.0;
        _1554 = 0.0;
        _1555 = 0.0;
    }
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1242)) + _1242;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1243)) + _1243;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1244)) + _1244;
    float _1588 = fma(_1567, cbSceneParam._m0[89u].z, fma(_1566, cbSceneParam._m0[89u].y, _1565 * cbSceneParam._m0[89u].x));
    float _1591 = fma(_1567, cbSceneParam._m0[90u].z, fma(_1566, cbSceneParam._m0[90u].y, _1565 * cbSceneParam._m0[90u].x));
    float _1594 = fma(_1567, cbSceneParam._m0[91u].z, fma(_1566, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1565));
    float _1609 = _835 * 0.5;
    float _1610 = _836 * 0.5;
    float _1611 = _837 * 0.5;
    float _1612 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1615 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1618 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1652;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1625 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1629 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1633 = dot(vec4(_1609, _1610, _1611, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1640 = dot(vec4(cbModelParam._m0[39u]), vec4(_1609, _1610, _1611, 1.0));
        _1652 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1652 = 1.0;
    }
    float _1663;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1654 = dot(vec4(cbModelParam._m0[40u]), vec4(_1609, _1610, _1611, 1.0));
        _1663 = dot(vec3(isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1663 = 1.0;
    }
    float _1667 = (_1663 * cbModelParam._m0[1u].x) + (_1652 * (1.0 - cbModelParam._m0[1u].x));
    float _1677 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _652);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1677 : min(cbModelParam._m0[25u].z, _1677));
    float _1760;
    float _1762;
    float _1764;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1727 = fma(_899, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _891)) + cbModelParam._m0[13u].w;
        float _1731 = fma(_899, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _891)) + cbModelParam._m0[14u].w;
        float _1735 = fma(_899, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _891)) + cbModelParam._m0[15u].w;
        float _1738 = fma(_837, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835));
        float _1741 = fma(_837, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835));
        float _1744 = fma(_837, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835));
        float _1772;
        if (_1738 > 0.0)
        {
            _1772 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1772 = frontier_phi_17_15_ladder;
        }
        float _1945;
        if (_1741 > 0.0)
        {
            _1945 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1945 = frontier_phi_26_22_ladder;
        }
        float _2240;
        if (_1744 > 0.0)
        {
            _2240 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2240 = frontier_phi_38_33_ladder;
        }
        float _2242 = isnan(_1945) ? _1772 : (isnan(_1772) ? _1945 : min(_1772, _1945));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1738) + _1727;
        float _2248 = (_2243 * _1741) + _1731;
        float _2249 = (_2243 * _1744) + _1735;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2250;
        float _2254 = _2250 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 > _2254) || ((_2248 < _2252) || ((_2247 < _2252) || (_2247 > _2254))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1678);
            frontier_phi_16_38_ladder = _2394.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2394.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2394.x * cbModelParam._m0[1u].y;
        }
        _1760 = frontier_phi_16_38_ladder_2;
        _1762 = frontier_phi_16_38_ladder_1;
        _1764 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1748 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_835, _836, _837), _1678);
        _1760 = _1748.x * cbModelParam._m0[1u].y;
        _1762 = _1748.y * cbModelParam._m0[1u].y;
        _1764 = _1748.z * cbModelParam._m0[1u].y;
    }
    float _1768 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _652);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1768 : min(cbModelParam._m0[25u].w, _1768));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1824 = fma(_899, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _891)) + cbModelParam._m0[21u].w;
        float _1828 = fma(_899, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _891)) + cbModelParam._m0[22u].w;
        float _1832 = fma(_899, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _891)) + cbModelParam._m0[23u].w;
        float _1835 = fma(_837, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835));
        float _1838 = fma(_837, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835));
        float _1841 = fma(_837, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835));
        float _1950;
        if (_1835 > 0.0)
        {
            _1950 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1950 = frontier_phi_28_24_ladder;
        }
        float _2267;
        if (_1838 > 0.0)
        {
            _2267 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2267 = frontier_phi_40_35_ladder;
        }
        float _2605;
        if (_1841 > 0.0)
        {
            _2605 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2605 = frontier_phi_50_47_ladder;
        }
        float _2607 = isnan(_2267) ? _1950 : (isnan(_1950) ? _2267 : min(_1950, _2267));
        float _2608 = isnan(_2605) ? _2607 : (isnan(_2607) ? _2605 : min(_2607, _2605));
        float _2612 = (_2608 * _1835) + _1824;
        float _2613 = (_2608 * _1838) + _1828;
        float _2614 = (_2608 * _1841) + _1832;
        float _2615 = _2608 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2615;
        float _2618 = _2615 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2614 > _2618) || ((_2614 < _2616) || ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 < _2616) || (_2612 > _2618))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2614, cbModelParam._m0[17u].z, fma(_2613, cbModelParam._m0[17u].y, _2612 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2614, cbModelParam._m0[18u].z, fma(_2613, cbModelParam._m0[18u].y, _2612 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2614, cbModelParam._m0[19u].z, fma(_2613, cbModelParam._m0[19u].y, _2612 * cbModelParam._m0[19u].x))), _1769);
            frontier_phi_25_50_ladder = _2736.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2736.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2736.x * cbModelParam._m0[1u].z;
        }
        _1860 = frontier_phi_25_50_ladder_2;
        _1862 = frontier_phi_25_50_ladder_1;
        _1864 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_835, _836, _837), _1769);
        _1860 = _1844.x * cbModelParam._m0[1u].z;
        _1862 = _1844.y * cbModelParam._m0[1u].z;
        _1864 = _1844.z * cbModelParam._m0[1u].z;
    }
    float _1877 = (((_862 * _811) + _863) * _827) * ((cbModelParam._m0[1u].w * (_1860 - _1760)) + _1760);
    float _1879 = (((_862 * _813) + _863) * _827) * ((cbModelParam._m0[1u].w * (_1862 - _1762)) + _1762);
    float _1881 = (((_862 * _814) + _863) * _827) * ((cbModelParam._m0[1u].w * (_1864 - _1764)) + _1764);
    float _1884 = fma(_1881, cbSceneParam._m0[89u].z, fma(_1879, cbSceneParam._m0[89u].y, _1877 * cbSceneParam._m0[89u].x));
    float _1887 = fma(_1881, cbSceneParam._m0[90u].z, fma(_1879, cbSceneParam._m0[90u].y, _1877 * cbSceneParam._m0[90u].x));
    float _1890 = fma(_1881, cbSceneParam._m0[91u].z, fma(_1879, cbSceneParam._m0[91u].y, _1877 * cbSceneParam._m0[91u].x));
    float _1924 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1928 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1932 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1936 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1937 = _1924 / _1936;
    float _1938 = _1928 / _1936;
    float _1939 = _1932 / _1936;
    float _2086;
    float _2087;
    float _2088;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1966 = ((uint(_1939 > cbSceneParam._m0[59u].y) + uint(_1939 > cbSceneParam._m0[59u].x)) + uint(_1939 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1967 = _1966 + 43u;
        uint _1975 = _1966 + 44u;
        uint _1983 = _1966 + 45u;
        uint _1991 = _1966 + 46u;
        float _2002 = fma(_1936, cbSceneParam._m0[_1967].w, fma(_1932, cbSceneParam._m0[_1967].z, fma(_1928, cbSceneParam._m0[_1967].y, _1924 * cbSceneParam._m0[_1967].x)));
        float _2006 = fma(_1936, cbSceneParam._m0[_1975].w, fma(_1932, cbSceneParam._m0[_1975].z, fma(_1928, cbSceneParam._m0[_1975].y, _1924 * cbSceneParam._m0[_1975].x)));
        float _2014 = fma(_1936, cbSceneParam._m0[_1991].w, fma(_1932, cbSceneParam._m0[_1991].z, fma(_1928, cbSceneParam._m0[_1991].y, _1924 * cbSceneParam._m0[_1991].x)));
        float _2019 = cbSceneParam._m0[33u].z * _2014;
        float _2021 = cbSceneParam._m0[33u].w * _2014;
        float _2024 = fma(_1936, cbSceneParam._m0[_1983].w, fma(_1932, cbSceneParam._m0[_1983].z, fma(_1928, cbSceneParam._m0[_1983].y, _1924 * cbSceneParam._m0[_1983].x))) / _2014;
        float _2072 = (cbSceneParam._m0[33u].x - sqrt(((_1938 * _1938) + (_1937 * _1937)) + (_1939 * _1939))) * cbSceneParam._m0[33u].y;
        float _4454 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2079 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2019 + _2002) / _2014, (_2021 + _2006) / _2014), _2024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2021 + _2002) / _2014, (_2006 - _2019) / _2014), _2024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2002 - _2019) / _2014, (_2006 - _2021) / _2014), _2024), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2002 - _2021) / _2014, (_2019 + _2006) / _2014), _2024), 0.0)).x), vec4(0.25)));
        _2086 = 1.0 - (_2079 * cbSceneParam._m0[34u].x);
        _2087 = 1.0 - (_2079 * cbSceneParam._m0[34u].y);
        _2088 = 1.0 - (_2079 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2086 = 1.0;
        _2087 = 1.0;
        _2088 = 1.0;
    }
    float _2152;
    float _2154;
    float _2156;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2140 = fma(_1936, cbSceneParam._m0[63u].w, fma(_1932, cbSceneParam._m0[63u].z, fma(_1928, cbSceneParam._m0[63u].y, _1924 * cbSceneParam._m0[63u].x)));
        float _2141 = fma(_1936, cbSceneParam._m0[60u].w, fma(_1932, cbSceneParam._m0[60u].z, fma(_1928, cbSceneParam._m0[60u].y, _1924 * cbSceneParam._m0[60u].x))) / _2140;
        float _2142 = fma(_1936, cbSceneParam._m0[61u].w, fma(_1932, cbSceneParam._m0[61u].z, fma(_1928, cbSceneParam._m0[61u].y, _1924 * cbSceneParam._m0[61u].x))) / _2140;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2141 >= cbSceneParam._m0[64u].x) && (_2142 >= cbSceneParam._m0[64u].y)) && (_2141 <= cbSceneParam._m0[64u].z)) && (_2142 <= cbSceneParam._m0[64u].w))
        {
            float _2280 = fma(_1936, cbSceneParam._m0[62u].w, fma(_1932, cbSceneParam._m0[62u].z, fma(_1928, cbSceneParam._m0[62u].y, _1924 * cbSceneParam._m0[62u].x))) / _2140;
            float _2284 = isnan(cbSceneParam._m0[41u].w) ? _2280 : (isnan(_2280) ? cbSceneParam._m0[41u].w : max(_2280, cbSceneParam._m0[41u].w));
            float _2327 = (cbSceneParam._m0[33u].x - sqrt(((_1938 * _1938) + (_1937 * _1937)) + (_1939 * _1939))) * cbSceneParam._m0[33u].y;
            float _4470 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
            float _2334 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2141, cbSceneParam._m0[33u].w + _2142), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2141, _2142 - cbSceneParam._m0[33u].z), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2141 - cbSceneParam._m0[33u].z, _2142 - cbSceneParam._m0[33u].w), _2284), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2141 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2142), _2284), 0.0)).x), vec4(0.25)));
            float _2338 = 1.0 - (_2334 * cbSceneParam._m0[34u].x);
            float _2339 = 1.0 - (_2334 * cbSceneParam._m0[34u].y);
            float _2340 = 1.0 - (_2334 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2340) ? _2088 : (isnan(_2088) ? _2340 : min(_2088, _2340));
            frontier_phi_37_36_ladder_1 = isnan(_2339) ? _2087 : (isnan(_2087) ? _2339 : min(_2087, _2339));
            frontier_phi_37_36_ladder_2 = isnan(_2338) ? _2086 : (isnan(_2086) ? _2338 : min(_2086, _2338));
        }
        else
        {
            frontier_phi_37_36_ladder = _2088;
            frontier_phi_37_36_ladder_1 = _2087;
            frontier_phi_37_36_ladder_2 = _2086;
        }
        _2152 = frontier_phi_37_36_ladder_2;
        _2154 = frontier_phi_37_36_ladder_1;
        _2156 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2152 = _2086;
        _2154 = _2087;
        _2156 = _2088;
    }
    uvec4 _2161 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _2163 = _2161.x * 14u;
    uint _2164 = _2163 + 13u;
    float _2171 = _827 + (-1.0);
    float _2176 = (cbLight._m0[_2164].x * _2171) + 1.0;
    float _2177 = (cbLight._m0[_2164].y * _2171) + 1.0;
    float _2178 = (cbLight._m0[_2164].z * _2171) + 1.0;
    float _2179 = (cbLight._m0[_2164].w * _2171) + 1.0;
    uint _2180 = _2163 + 5u;
    float _2186 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    uint _2190 = _2163 + 4u;
    float _2199 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
    uint _2203 = _2163 | 1u;
    float _2214 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_649, _650, _651));
    float _2217 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_649, _650, _651));
    float _4506 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _4517 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2222 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2224 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * 0.3183098733425140380859375;
    float _2231 = ((cbLight._m0[_2180].x * _2186) * _2224) + (((cbLight._m0[_2190].x * _2152) * _2199) * _2222);
    float _2232 = ((_2186 * cbLight._m0[_2180].y) * _2224) + (((cbLight._m0[_2190].y * _2154) * _2199) * _2222);
    float _2233 = ((_2186 * cbLight._m0[_2180].z) * _2224) + (((cbLight._m0[_2190].z * _2156) * _2199) * _2222);
    uvec4 _2237 = floatBitsToUint(cbLight._m0[_2163 + 12u]);
    bool _2239 = _2237.x == 0u;
    float _2341;
    float _2343;
    float _2345;
    if (_2239)
    {
        _2341 = _2231;
        _2343 = _2232;
        _2345 = _2233;
    }
    else
    {
        uint _2349 = _2163 + 6u;
        float _2365 = (dot(vec3(cbLight._m0[_2163 + 2u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2366 = _2365 * _2365;
        float _4528 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2367 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2368 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2341 = (((cbLight._m0[_2349].x * 0.3183098733425140380859375) * _2367) * _2368) + _2231;
        _2343 = (((cbLight._m0[_2349].y * 0.3183098733425140380859375) * _2367) * _2368) + _2232;
        _2345 = (((cbLight._m0[_2349].z * 0.3183098733425140380859375) * _2367) * _2368) + _2233;
    }
    bool _2348 = _2237.y == 0u;
    float _2403;
    float _2405;
    float _2407;
    if (_2348)
    {
        _2403 = _2341;
        _2405 = _2343;
        _2407 = _2345;
    }
    else
    {
        uint _2576 = _2163 + 7u;
        float _2592 = (dot(vec3(cbLight._m0[_2163 + 3u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2593 = _2592 * _2592;
        float _4544 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2594 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2595 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2403 = (((cbLight._m0[_2576].x * 0.3183098733425140380859375) * _2594) * _2595) + _2341;
        _2405 = (((cbLight._m0[_2576].y * 0.3183098733425140380859375) * _2594) * _2595) + _2343;
        _2407 = (((cbLight._m0[_2576].z * 0.3183098733425140380859375) * _2594) * _2595) + _2345;
    }
    uint _2410 = _2163 + 8u;
    float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _652) * 0.949999988079071044921875);
    float _2424 = _2423 * _2423;
    float _2425 = cbLight._m0[_2163].x + _729;
    float _2426 = cbLight._m0[_2163].y + _730;
    float _2427 = cbLight._m0[_2163].z + _731;
    float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
    float _2432 = _2431 * _2425;
    float _2433 = _2431 * _2426;
    float _2434 = _2431 * _2427;
    float _2435 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2163].xyz));
    float _4560 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _4571 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _2439 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2440 = dot(vec3(_649, _650, _651), vec3(_2432, _2433, _2434));
    float _4582 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2444 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2432, _2433, _2434));
    float _4593 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2448 = _2424 * _2424;
    float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
    float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
    float _2461 = 0.959999978542327880859375 - _808;
    float _2463 = 0.959999978542327880859375 - _809;
    float _2464 = 0.959999978542327880859375 - _810;
    float _2471 = 1.0 - _2424;
    float _2482 = (0.5 / (((_2439 * ((_2438 * _2471) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2471) + _2424) * _2438))) * _2438;
    float _4604 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
    uint _2498 = _2163 + 9u;
    float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _652) * 0.949999988079071044921875);
    float _2510 = _2509 * _2509;
    float _2511 = cbLight._m0[_2203].x + _729;
    float _2512 = cbLight._m0[_2203].y + _730;
    float _2513 = cbLight._m0[_2203].z + _731;
    float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
    float _2518 = _2517 * _2511;
    float _2519 = _2517 * _2512;
    float _2520 = _2517 * _2513;
    float _2521 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2203].xyz));
    float _4615 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2525 = dot(vec3(_649, _650, _651), vec3(_2518, _2519, _2520));
    float _4626 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2529 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2518, _2519, _2520));
    float _4637 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2533 = _2510 * _2510;
    float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
    float _2544 = exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0);
    float _2551 = 1.0 - _2510;
    float _2561 = (0.5 / (((_2439 * ((_2524 * _2551) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2551) + _2510) * _2524))) * _2524;
    float _4648 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2563 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
    float _2573 = (((((_2544 * _2461) + _811) * cbLight._m0[_2498].x) * _2563) * _2186) + ((((cbLight._m0[_2410].x * _2152) * ((_2460 * _2461) + _811)) * _2484) * _2199);
    float _2574 = (((((_2544 * _2463) + _813) * cbLight._m0[_2498].y) * _2563) * _2186) + ((((cbLight._m0[_2410].y * _2154) * ((_2460 * _2463) + _813)) * _2484) * _2199);
    float _2575 = (((((_2544 * _2464) + _814) * cbLight._m0[_2498].z) * _2563) * _2186) + ((((cbLight._m0[_2410].z * _2156) * ((_2460 * _2464) + _814)) * _2484) * _2199);
    float _2631;
    float _2633;
    float _2635;
    if (_2239)
    {
        _2631 = _2573;
        _2633 = _2574;
        _2635 = _2575;
    }
    else
    {
        uint _2637 = _2163 + 2u;
        uint _2641 = _2163 + 10u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _652) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _729;
        float _2658 = cbLight._m0[_2637].y + _730;
        float _2659 = cbLight._m0[_2637].z + _731;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2637].xyz));
        float _4659 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2671 = dot(vec3(_649, _650, _651), vec3(_2664, _2665, _2666));
        float _4670 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4681 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2439 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2697) + _2656) * _2670))) * _2670;
        float _4692 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2631 = (((((_2690 * _2461) + _811) * cbLight._m0[_2641].x) * _2709) * _2710) + _2573;
        _2633 = (((((_2690 * _2463) + _813) * cbLight._m0[_2641].y) * _2709) * _2710) + _2574;
        _2635 = (((((_2690 * _2464) + _814) * cbLight._m0[_2641].z) * _2709) * _2710) + _2575;
    }
    float _2741;
    float _2743;
    float _2745;
    if (_2348)
    {
        _2741 = _2631;
        _2743 = _2633;
        _2745 = _2635;
    }
    else
    {
        uint _2752 = _2163 + 3u;
        uint _2756 = _2163 + 11u;
        float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2752].w)) * _652) * 0.949999988079071044921875);
        float _2771 = _2770 * _2770;
        float _2772 = cbLight._m0[_2752].x + _729;
        float _2773 = cbLight._m0[_2752].y + _730;
        float _2774 = cbLight._m0[_2752].z + _731;
        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
        float _2779 = _2778 * _2772;
        float _2780 = _2778 * _2773;
        float _2781 = _2778 * _2774;
        float _2782 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2752].xyz));
        float _4708 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2786 = dot(vec3(_649, _650, _651), vec3(_2779, _2780, _2781));
        float _4719 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2790 = dot(vec3(cbLight._m0[_2752].xyz), vec3(_2779, _2780, _2781));
        float _4730 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2794 = _2771 * _2771;
        float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
        float _2805 = exp2(log2(1.0 - (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) * 5.0);
        float _2812 = 1.0 - _2771;
        float _2822 = (0.5 / (((_2439 * ((_2785 * _2812) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2439 * _2812) + _2771) * _2785))) * _2785;
        float _4741 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2824 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
        float _2825 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2741 = (((((_2805 * _2461) + _811) * cbLight._m0[_2756].x) * _2824) * _2825) + _2631;
        _2743 = (((((_2805 * _2463) + _813) * cbLight._m0[_2756].y) * _2824) * _2825) + _2633;
        _2745 = (((((_2805 * _2464) + _814) * cbLight._m0[_2756].z) * _2824) * _2825) + _2635;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2161.y == 0u)
    {
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.x;
        uint _2858 = uint((float(_2846.y) * floor(float(uint(cbSceneParam._m0[85u].y * _750) / _2847))) + floor(float(uint(cbSceneParam._m0[85u].x * _749) / _2847)));
        float _2868 = (log2(_1939 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2869 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        uint _2872 = uint(isnan(14.0) ? _2869 : (isnan(_2869) ? 14.0 : min(_2869, 14.0)));
        uvec4 _2877 = texelFetch(g_lightClusterGridBuffer, int(((_2872 << 2u) + (_2858 << 6u)) >> 2u));
        uint _2878 = _2877.x;
        uint _2879 = _2846.z;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((((1u << ((_2879 >> 4u) & 15u)) + 4294967295u) & _2878) == 0u) || ((_2879 & 240u) == 0u))
        {
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
        }
        else
        {
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            uint _3117 = 0u;
            uint _3126;
            bool _3127;
            for (;;)
            {
                _3126 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3117 << 2u)) >> 2u)).x;
                _3127 = _3126 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3127)
                {
                    frontier_phi_71_pred = _3116;
                    frontier_phi_71_pred_1 = _3115;
                    frontier_phi_71_pred_2 = _3114;
                    frontier_phi_71_pred_3 = _3113;
                    frontier_phi_71_pred_4 = _3112;
                    frontier_phi_71_pred_5 = _3111;
                }
                else
                {
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    uint _3262;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3126;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    for (;;)
                    {
                        uint _3266 = uint(findLSB(_3262)) + (_3117 << 5u);
                        uint _3263 = (_3262 + 4294967295u) & _3262;
                        uint _3268 = _3266 * 48u;
                        vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3268)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 3u)).x));
                        uint _3288 = (_3266 * 48u) + 4u;
                        vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 3u)).x));
                        uint _3307 = (_3266 * 48u) + 8u;
                        vec3 _3318 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3307)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 2u)).x));
                        float _3322 = _3282.x - _1937;
                        float _3323 = _3282.y - _1938;
                        float _3324 = _3282.z - _1939;
                        float _3325 = dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324));
                        float _3328 = inversesqrt(_3325);
                        float _3329 = _3328 * _3322;
                        float _3330 = _3328 * _3323;
                        float _3331 = _3328 * _3324;
                        float _3332 = dot(vec3(_768, _771, _774), vec3(_3329, _3330, _3331));
                        float _3337 = 1.0 - (_3325 * _3282.w);
                        float _4767 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3338 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3339 = sqrt(_3325) * _3301.w;
                        float _3342 = 1.39999997615814208984375 / (_3339 + 1.39999997615814208984375);
                        float _3343 = _3342 * _3342;
                        float _3346 = ((1.0 - _3343) * _3332) + _3343;
                        float _3349 = _3339 * _3339;
                        float _3353 = ((isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0))) * _3338) / ((_3349 * 0.699999988079071044921875) + 1.0);
                        float _3357 = (-0.0) - _1937;
                        float _3358 = (-0.0) - _1938;
                        float _3359 = (-0.0) - _1939;
                        float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                        float _3364 = _3363 * _3357;
                        float _3365 = _3363 * _3358;
                        float _3366 = _3363 * _3359;
                        float _3373 = exp2(log2(1.0 / ((_3349 * 3.5) + 5.0)) * 0.25);
                        float _3374 = 1.0 - _843;
                        float _3381 = sqrt(1.0 - ((1.0 - (_3374 * _3374)) * (1.0 - (_3373 * _3373))));
                        float _3382 = _3381 * _3381;
                        float _3383 = _3382 * _3382;
                        float _3384 = _3364 + _3329;
                        float _3385 = _3365 + _3330;
                        float _3386 = _3366 + _3331;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3394 = dot(vec3(_768, _771, _774), vec3(_3364, _3365, _3366));
                        float _4783 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3397 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3398 = dot(vec3(_768, _771, _774), vec3(_3390 * _3384, _3390 * _3385, _3390 * _3386));
                        float _4794 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3401 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3405 = ((_3401 * _3401) * (_3383 + (-1.0))) + 1.0;
                        float _3406 = _3342 * _3382;
                        float _3407 = _3406 * _3406;
                        float _3410 = ((1.0 - _3407) * _3332) + _3407;
                        float _4805 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3411 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3412 = 1.0 - _3382;
                        float _3422 = (0.5 / (((_3411 * ((_3397 * _3412) + _3382)) + 9.9999999392252902907785028219223e-09) + (((_3411 * _3412) + _3382) * _3397))) * _3411;
                        float _4816 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3433 = (((_3383 * 3.1415927410125732421875) * (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0)))) / ((_3405 * _3405) * ((_3349 * 2.1991131305694580078125) + 3.141590118408203125))) * _3338;
                        _3186 = (_3353 * _3301.x) + _3259;
                        _3187 = (_3353 * _3301.y) + _3260;
                        _3188 = (_3353 * _3301.z) + _3261;
                        _3183 = (_3433 * _3318.x) + _3256;
                        _3184 = (_3433 * _3318.y) + _3257;
                        _3185 = (_3433 * _3318.z) + _3258;
                        if (_3263 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3263;
                        }
                    }
                    frontier_phi_71_pred = _3188;
                    frontier_phi_71_pred_1 = _3187;
                    frontier_phi_71_pred_2 = _3186;
                    frontier_phi_71_pred_3 = _3185;
                    frontier_phi_71_pred_4 = _3184;
                    frontier_phi_71_pred_5 = _3183;
                }
                _2969 = frontier_phi_71_pred;
                _2967 = frontier_phi_71_pred_1;
                _2965 = frontier_phi_71_pred_2;
                _2963 = frontier_phi_71_pred_3;
                _2961 = frontier_phi_71_pred_4;
                _2959 = frontier_phi_71_pred_5;
                uint _3118 = _3117 + 1u;
                if (_3118 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3111 = _2959;
                    _3112 = _2961;
                    _3113 = _2963;
                    _3114 = _2965;
                    _3115 = _2967;
                    _3116 = _2969;
                    _3117 = _3118;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
        }
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.z;
        uint _2975 = (_2973 >> 8u) & 15u;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        if (((4294967295u << _2975) & _2878) == 0u)
        {
            _3079 = _2958;
            _3081 = _2960;
            _3083 = _2962;
            _3085 = _2964;
            _3087 = _2966;
            _3089 = _2968;
        }
        else
        {
            float _3104 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
            float _3105 = _3104 * _1937;
            float _3106 = _3104 * _1938;
            float _3107 = _3104 * _1939;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2975 < ((_2973 >> 12u) & 15u))
            {
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3239 = _2958;
                float _3240 = _2960;
                float _3241 = _2962;
                float _3242 = _2964;
                float _3243 = _2966;
                float _3244 = _2968;
                uint _3245 = _2975;
                uint _3254;
                bool _3255;
                for (;;)
                {
                    _3254 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3245 << 2u)) >> 2u)).x;
                    _3255 = _3254 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3255)
                    {
                        frontier_phi_82_pred = _3244;
                        frontier_phi_82_pred_1 = _3243;
                        frontier_phi_82_pred_2 = _3242;
                        frontier_phi_82_pred_3 = _3241;
                        frontier_phi_82_pred_4 = _3240;
                        frontier_phi_82_pred_5 = _3239;
                    }
                    else
                    {
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3460 = _3239;
                        float _3461 = _3240;
                        float _3462 = _3241;
                        float _3463 = _3242;
                        float _3464 = _3243;
                        float _3465 = _3244;
                        uint _3466 = _3254;
                        uint _3467;
                        vec4 _3492;
                        float _3493;
                        vec4 _3508;
                        vec3 _3520;
                        vec4 _3535;
                        vec4 _3550;
                        float _3597;
                        bool _3598;
                        for (;;)
                        {
                            uint _3477 = ((_3245 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3466));
                            _3467 = (_3466 + 4294967295u) & _3466;
                            uint _3479 = _3477 * 40u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3493 = _3492.w;
                            uint _3495 = (_3477 * 40u) + 4u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3477 * 40u) + 8u;
                            _3520 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x));
                            uint _3522 = (_3477 * 40u) + 16u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3477 * 40u) + 20u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3553 = (_3477 * 40u) + 24u;
                            vec4 _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3572 = (_3477 * 40u) + 28u;
                            vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            _3597 = fma(_1939, _3585.z, fma(_1938, _3585.y, _3585.x * _1937)) + _3585.w;
                            _3598 = !((fma(_1939, _3566.z, fma(_1938, _3566.y, _3566.x * _1937)) + _3566.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3598)
                            {
                                float _3625 = _3492.x - _1937;
                                float _3626 = _3492.y - _1938;
                                float _3627 = _3492.z - _1939;
                                float _3628 = dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627));
                                float _3631 = inversesqrt(_3628);
                                float _3632 = _3631 * _3625;
                                float _3633 = _3631 * _3626;
                                float _3634 = _3631 * _3627;
                                float _3638 = 1.0 - (_3628 / (_3493 * _3493));
                                float _4827 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3643 = sqrt(_3628) * _3508.w;
                                float _3645 = 1.39999997615814208984375 / (_3643 + 1.39999997615814208984375);
                                float _3646 = _3645 * _3645;
                                float _3649 = ((1.0 - _3646) * dot(vec3(_3632, _3633, _3634), vec3(_768, _771, _774))) + _3646;
                                float _3652 = _3643 * _3643;
                                float _3656 = (fma(_1939, _3535.z, fma(_1938, _3535.y, _3535.x * _1937)) + _3535.w) / _3597;
                                float _3657 = (fma(_1939, _3550.z, fma(_1938, _3550.y, _3550.x * _1937)) + _3550.w) / _3597;
                                float _3661 = 1.0 - dot(vec2(_3656, _3657), vec2(_3656, _3657));
                                float _4843 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3663 = _3662 * (((isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0))) * _3639) / ((_3652 * 0.699999988079071044921875) + 1.0));
                                float _3675 = exp2(log2(1.0 / ((_3652 * 3.5) + 5.0)) * 0.25);
                                float _3676 = 1.0 - _843;
                                float _3683 = sqrt(1.0 - ((1.0 - (_3676 * _3676)) * (1.0 - (_3675 * _3675))));
                                float _3684 = _3683 * _3683;
                                float _3685 = _3684 * _3684;
                                float _3686 = _3632 - _3105;
                                float _3687 = _3633 - _3106;
                                float _3688 = _3634 - _3107;
                                float _3692 = inversesqrt(dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688)));
                                float _3696 = dot(vec3(_768, _771, _774), vec3((-0.0) - _3105, (-0.0) - _3106, (-0.0) - _3107));
                                float _4854 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3700 = dot(vec3(_768, _771, _774), vec3(_3692 * _3686, _3692 * _3687, _3692 * _3688));
                                float _4865 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3707 = ((_3703 * _3703) * (_3685 + (-1.0))) + 1.0;
                                float _3708 = _3645 * _3684;
                                float _3709 = _3708 * _3708;
                                float _3715 = ((1.0 - _3709) * dot(vec3(_768, _771, _774), vec3(_3632, _3633, _3634))) + _3709;
                                float _4876 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3717 = 1.0 - _3684;
                                float _3727 = (0.5 / (((_3716 * ((_3699 * _3717) + _3684)) + 9.9999999392252902907785028219223e-09) + (((_3716 * _3717) + _3684) * _3699))) * _3716;
                                float _4887 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3737 = (_3662 * _3639) * (((_3685 * 3.1415927410125732421875) * (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) / ((_3707 * _3707) * ((_3652 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3663 * _3508.z;
                                frontier_phi_88_pred_1 = _3663 * _3508.y;
                                frontier_phi_88_pred_2 = _3663 * _3508.x;
                                frontier_phi_88_pred_3 = _3737 * _3520.z;
                                frontier_phi_88_pred_4 = _3737 * _3520.y;
                                frontier_phi_88_pred_5 = _3737 * _3520.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3746 = frontier_phi_88_pred;
                            _3745 = frontier_phi_88_pred_1;
                            _3744 = frontier_phi_88_pred_2;
                            _3743 = frontier_phi_88_pred_3;
                            _3742 = frontier_phi_88_pred_4;
                            _3741 = frontier_phi_88_pred_5;
                            _3450 = _3744 + _3463;
                            _3451 = _3745 + _3464;
                            _3452 = _3746 + _3465;
                            _3447 = _3741 + _3460;
                            _3448 = _3742 + _3461;
                            _3449 = _3743 + _3462;
                            if (_3467 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3467;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3452;
                        frontier_phi_82_pred_1 = _3451;
                        frontier_phi_82_pred_2 = _3450;
                        frontier_phi_82_pred_3 = _3449;
                        frontier_phi_82_pred_4 = _3448;
                        frontier_phi_82_pred_5 = _3447;
                    }
                    _3090 = frontier_phi_82_pred;
                    _3088 = frontier_phi_82_pred_1;
                    _3086 = frontier_phi_82_pred_2;
                    _3084 = frontier_phi_82_pred_3;
                    _3082 = frontier_phi_82_pred_4;
                    _3080 = frontier_phi_82_pred_5;
                    uint _3246 = _3245 + 1u;
                    if (_3246 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3239 = _3080;
                        _3240 = _3082;
                        _3241 = _3084;
                        _3242 = _3086;
                        _3243 = _3088;
                        _3244 = _3090;
                        _3245 = _3246;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3086;
                frontier_phi_63_64_ladder_1 = _3090;
                frontier_phi_63_64_ladder_2 = _3088;
                frontier_phi_63_64_ladder_3 = _3084;
                frontier_phi_63_64_ladder_4 = _3082;
                frontier_phi_63_64_ladder_5 = _3080;
            }
            else
            {
                frontier_phi_63_64_ladder = _2964;
                frontier_phi_63_64_ladder_1 = _2968;
                frontier_phi_63_64_ladder_2 = _2966;
                frontier_phi_63_64_ladder_3 = _2962;
                frontier_phi_63_64_ladder_4 = _2960;
                frontier_phi_63_64_ladder_5 = _2958;
            }
            _3079 = frontier_phi_63_64_ladder_5;
            _3081 = frontier_phi_63_64_ladder_4;
            _3083 = frontier_phi_63_64_ladder_3;
            _3085 = frontier_phi_63_64_ladder;
            _3087 = frontier_phi_63_64_ladder_2;
            _3089 = frontier_phi_63_64_ladder_1;
        }
        float _3094 = isnan(1.0) ? _827 : (isnan(_827) ? 1.0 : min(_827, 1.0));
        _2891 = (_3094 * _3085) + _2403;
        _2893 = (_3094 * _3087) + _2405;
        _2895 = (_3094 * _3089) + _2407;
        _2897 = ((_3079 * _811) * _3094) + _2741;
        _2899 = ((_3081 * _813) * _3094) + _2743;
        _2901 = ((_3083 * _814) * _3094) + _2745;
    }
    else
    {
        _2891 = _2403;
        _2893 = _2405;
        _2895 = _2407;
        _2897 = _2741;
        _2899 = _2743;
        _2901 = _2745;
    }
    float _4903 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4914 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4925 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2918 = ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2891 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _827))) + ((_2897 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1667)) * cbPerFrame._m0[3u].x);
    float _2919 = ((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2893 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _827))) + ((_2899 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1667)) * cbPerFrame._m0[3u].x);
    float _2920 = ((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2895 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _827))) + ((_2901 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1667)) * cbPerFrame._m0[3u].x);
    uint _2921 = _270 + 6u;
    float _2929 = _749 / cbSceneParam._m0[86u].x;
    float _2930 = _750 / cbSceneParam._m0[86u].y;
    vec4 _2944 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2946 = _2944.x;
    float _2947 = _2944.y;
    float _2948 = _2944.z;
    float _2949 = _2944.w;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2983 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2984 = _2983 / _671;
        float _2995 = _2984 * _722;
        float _2996 = _723 * _2984;
        float _2997 = (-0.0) - _2996;
        float _2999 = _2984 * _724;
        float _3001 = (cbSceneParam._m0[77u].w * _2997) / _2983;
        float _3002 = _3001 + cbSceneParam._m0[79u].w;
        float _3003 = cbSceneParam._m0[79u].w - _2996;
        float _3009 = sqrt(((_2995 * _2995) + (_2996 * _2996)) + (_2999 * _2999));
        float _3012 = (1.0 - (cbSceneParam._m0[77u].w / _2983)) * _3009;
        float _3017 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3019 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3196;
        if (abs((_2997 - _3001) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3196 = ((((_3002 > 0.0) ? exp2(_3017 * _3002) : (2.0 - exp2(_3019 * _3002))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3012;
        }
        else
        {
            float _3140 = 1.0 / cbSceneParam._m0[80u].x;
            float _3141 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : max(_3002, _3003));
            float _3142 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : min(_3002, _3003));
            float _3151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : min(_3141, 0.0));
            float _3152 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : min(_3142, 0.0));
            _3196 = ((abs(_3009 / _2997) * cbSceneParam._m0[80u].y) * ((((_3151 - _3152) * 2.0) - ((exp2(_3017 * (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0)))) - exp2(_3017 * (isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))))) * _3140)) - ((exp2(_3019 * _3151) - exp2(_3019 * _3152)) * _3140))) + (_3012 * cbSceneParam._m0[80u].z);
        }
        vec4 _3198 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2929, _2930, 1.0), 0.0);
        float _3207 = exp2((_3196 * (-1.44269502162933349609375)) * (1.0 - _3198.w));
        float _3208 = log2(_3207);
        float _3224 = log2(_2949);
        _3021 = (exp2(_3224 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].x)) * _3198.x) / cbSceneParam._m0[78u].x)) + _2946;
        _3023 = (exp2(_3224 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].y)) * _3198.y) / cbSceneParam._m0[78u].y)) + _2947;
        _3025 = (exp2(_3224 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].z)) * _3198.z) / cbSceneParam._m0[78u].z)) + _2948;
        _3027 = _3207 * _2949;
    }
    else
    {
        _3021 = _2946;
        _3023 = _2947;
        _3025 = _2948;
        _3027 = _2949;
    }
    bool _3234;
    vec4 _3037;
    vec4 _3059;
    float _3061;
    float _3065;
    float _3066;
    float _3067;
    float _3068;
    bool _3078;
    for (;;)
    {
        _3037 = cbMatDynParam._m0[0u];
        float _3039 = roundEven(_3037.y);
        bool _3040 = _3039 == 3.0;
        float _3041 = log2(_3027);
        float _3048 = exp2(_3041 * cbSceneParam._m0[78u].x) * _2918;
        float _3049 = exp2(_3041 * cbSceneParam._m0[78u].y) * _2919;
        float _3050 = exp2(_3041 * cbSceneParam._m0[78u].z) * _2920;
        float _3057 = _738 + (-0.5);
        _3059 = cbMtdParam._m0[1u];
        _3061 = _3059.y * _3057;
        float _3064 = (_3039 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3065 = _3064 * (_3040 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3021)));
        _3066 = _3064 * (_3040 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3023)));
        _3067 = _3064 * (_3040 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3025)));
        _3068 = _3057 * 0.999000012874603271484375;
        _3078 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3078)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _3068) < 0.5)
            {
                _3234 = true;
                break;
            }
        }
        uint _3175 = _787 + uint(_3037.w);
        if ((cbInstanceData._m0[_3175].w < 1.0) && ((cbInstanceData._m0[_3175].w + _3068) < 0.5))
        {
            _3234 = true;
            break;
        }
        if ((_3061 + 1.0) < _3059.x)
        {
            _3234 = true;
            break;
        }
        _3234 = false;
        break;
    }
    float _3438;
    if (_3234)
    {
        discard_state = true;
        _3438 = 0.0;
    }
    else
    {
        _3438 = cbInstanceData._m0[_2921].w;
    }
    SV_Target.x = _3065;
    SV_Target.y = _3066;
    SV_Target.z = _3067;
    SV_Target.w = _3438;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2921].w;
    discard_exit();
}


