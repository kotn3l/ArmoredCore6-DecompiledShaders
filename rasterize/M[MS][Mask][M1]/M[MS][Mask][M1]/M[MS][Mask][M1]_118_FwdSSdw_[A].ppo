#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1697;
float _4099;
float _4100;
float _4101;
float _4102;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4111 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4122 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4133 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[23u].w) + _454) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4144 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _479 = (_472 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _480 = (_472 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _481 = (_472 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _520 = _518.x;
    float _530 = dot(vec4(_520, _518.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _544 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_520 - _530) * cbMtdParam._m0[23u].w) + _530) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4155 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _552 = (_545 * ((_498.x * cbMtdParam._m0[13u].x) - _479)) + _479;
    float _553 = (_545 * ((_498.y * cbMtdParam._m0[13u].y) - _480)) + _480;
    float _554 = (_545 * ((_498.z * cbMtdParam._m0[13u].z) - _481)) + _481;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _592 = _590.x;
    float _602 = dot(vec4(_592, _590.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _614 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _405.z) * 2.0) - ((((_592 - _602) * cbMtdParam._m0[23u].w) + _602) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4166 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _622 = (_615 * ((_573.x * cbMtdParam._m0[14u].x) - _552)) + _552;
    float _623 = (_615 * ((_573.y * cbMtdParam._m0[14u].y) - _553)) + _553;
    float _624 = (_615 * ((_573.z * cbMtdParam._m0[14u].z) - _554)) + _554;
    float _628 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _622;
    float _631 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _623;
    float _634 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _624;
    float _641 = ((_622 - _628) * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) + _628;
    float _642 = ((_623 - _631) * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) + _631;
    float _643 = ((_624 - _634) * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) + _634;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _702 = _700.x;
    float _703 = _700.y;
    float _704 = _700.z;
    float _711 = ((_683.x - _702) * _472) + _702;
    float _712 = ((_683.y - _703) * _472) + _703;
    float _713 = ((_683.z - _704) * _472) + _704;
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _736 = ((_725.x - _711) * _545) + _711;
    float _737 = ((_725.y - _712) * _545) + _712;
    float _738 = ((_725.z - _713) * _545) + _713;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _763 = ((_750.z - _738) * _615) + _738;
    float _766 = ((((_750.x - _736) * _615) + _736) * 2.0) + (-1.0);
    float _767 = ((((_750.y - _737) * _615) + _737) * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _4177 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _773 = sqrt(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))));
    vec4 _787 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _812 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _814 = _812.x;
    float _815 = 1.0 - _814;
    float _823 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _826 = ((isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : min(_823, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _835 = (_826 - ((((((_814 - _815) * cbMtdParam._m0[24u].z) + _815) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _826))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4198 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _836 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _843 = (_836 * (cbMtdParam._m0[17u].x - _641)) + _641;
    float _844 = (_836 * (cbMtdParam._m0[17u].y - _642)) + _642;
    float _845 = (_836 * (cbMtdParam._m0[17u].z - _643)) + _643;
    vec4 _857 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _322) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _323) + cbTextureTilingScale._m0[19u].w));
    float _859 = _857.x;
    float _860 = 1.0 - _859;
    float _885 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_859 - _860) * cbMtdParam._m0[24u].w) + _860) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4209 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _886 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _894 = ((((cbMtdParam._m0[10u].x - _843) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _886) + _843;
    float _895 = ((((cbMtdParam._m0[10u].y - _844) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _886) + _844;
    float _896 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _845)) * _886) + _845;
    vec4 _922 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _924 = _922.x;
    float _942 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _924) * _472) + _924;
    float _959 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _942) * _545) + _942;
    float _976 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _959) * _615) + _959;
    float _980 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _976) * cbMtdParam._m0[19u].z) + _976;
    float _982 = _980 - (_980 * _836);
    float _984 = _982 - (_982 * _886);
    float _989 = (((_660.z - _763) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _763;
    float _993 = ((_787.z - _989) * cbMtdParam._m0[19u].w) + _989;
    vec4 _1009 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1016 = (_1009.x * 2.0) + (-1.0);
    float _1017 = (_1009.y * 2.0) + (-1.0);
    float _1018 = dot(vec2(_1016, _1017), vec2(_1016, _1017));
    float _4220 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1026 = (_836 * (_1009.z - _993)) + _993;
    float _1029 = ((cbMtdParam._m0[23u].x - _1026) * _886) + _1026;
    vec4 _1052 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _322) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _323) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1058 = (_1052.x * 2.0) + (-1.0);
    float _1059 = (_1052.y * 2.0) + (-1.0);
    float _1060 = dot(vec2(_1058, _1059), vec2(_1058, _1059));
    float _4231 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1074 = (_766 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_660.x * 2.0) + (-1.0)))) + (((_787.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1075 = (_767 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_660.y * 2.0) + (-1.0)))) + (((_787.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1087 = (((_1016 - _1074) + (cbMtdParam._m0[21u].x * _1074)) * _836) + _1074;
    float _1088 = (((_1017 - _1075) + (cbMtdParam._m0[21u].x * _1075)) * _836) + _1075;
    float _1089 = (_836 * (sqrt(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) - _773)) + _773;
    float _1100 = (((_1058 - _1087) + (_1087 * cbMtdParam._m0[22u].z)) * _886) + _1087;
    float _1101 = (((_1059 - _1088) + (_1088 * cbMtdParam._m0[22u].z)) * _886) + _1088;
    float _1102 = ((sqrt(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) - _1089) * _886) + _1089;
    float _1104 = cbMtdParam._m0[22u].x + _787.w;
    float _1107 = fma(_1102, _271 * NORMAL.x, fma(_1101, _278 * TANGENT.x, (_264 * _256) * _1100));
    float _1110 = fma(_1102, _271 * NORMAL.y, fma(_1101, _278 * TANGENT.y, (_264 * _257) * _1100));
    float _1113 = fma(_1102, _271 * NORMAL.z, fma(_1101, _278 * TANGENT.z, (_264 * _258) * _1100));
    float _1117 = inversesqrt(dot(vec3(_1107, _1110, _1113), vec3(_1107, _1110, _1113)));
    float _1118 = _1117 * _1107;
    float _1119 = _1117 * _1110;
    float _1120 = _1117 * _1113;
    float _4242 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1121 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _4264 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4275 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4286 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4297 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _1126 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _1140 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1190 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1180);
    float _1191 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1180);
    float _1192 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1180);
    float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
    float _1197 = _1190 * _1196;
    float _1198 = _1191 * _1196;
    float _1199 = _1192 * _1196;
    vec4 _1204 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1206 = _1204.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1378 = sqrt(((_1190 * _1190) + (_1191 * _1191)) + (_1192 * _1192));
        float _1384 = (cbMatDynParam._m0[5u].x * _1378) + cbMatDynParam._m0[5u].y;
        float _4308 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1389 = (cbMatDynParam._m0[5u].z * _1378) + cbMatDynParam._m0[5u].w;
        float _4319 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) - _1385)) + _1385) < ((_1206 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1217 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1218 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1236 = fma(_1120, cbSceneParam._m0[5u].z, fma(_1119, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1118));
    float _1239 = fma(_1120, cbSceneParam._m0[6u].z, fma(_1119, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1118));
    float _1242 = fma(_1120, cbSceneParam._m0[7u].z, fma(_1119, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1118));
    uint _1255 = _303 + 9u;
    uint _1256 = _1255 + uint(cbMatDynParam._m0[0u].w);
    float _1262 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * cbInstanceData._m0[_1256].x;
    float _1263 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * cbInstanceData._m0[_1256].y;
    float _1264 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * cbInstanceData._m0[_1256].z;
    float _4330 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
    float _1265 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _4341 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _1266 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _4352 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
    float _1267 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _1268 = 1.0 - _1126;
    float _1269 = _1265 * _1268;
    float _1270 = _1266 * _1268;
    float _1271 = _1267 * _1268;
    float _1276 = (_1265 + (-0.039999999105930328369140625)) * _1126;
    float _1277 = (_1266 + (-0.039999999105930328369140625)) * _1126;
    float _1278 = (_1267 + (-0.039999999105930328369140625)) * _1126;
    float _1279 = _1276 + 0.039999999105930328369140625;
    float _1281 = _1277 + 0.039999999105930328369140625;
    float _1282 = _1278 + 0.039999999105930328369140625;
    vec4 _1291 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1217, cbSceneParam._m0[86u].y * _1218));
    float _1295 = ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * TEXCOORD_5.w) * _1291.x;
    float _1296 = dot(vec3(_1118, _1119, _1120), vec3(_1197, _1198, _1199));
    float _1299 = _1296 * 2.0;
    float _1303 = (_1299 * _1118) - _1197;
    float _1304 = (_1299 * _1119) - _1198;
    float _1305 = (_1299 * _1120) - _1199;
    float _1309 = abs(dot(vec3(_1197, _1198, _1199), vec3(_1118, _1119, _1120)));
    float _4363 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
    float _1311 = sqrt(_1121);
    float _1324 = exp2((_1311 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1311 * 3.0));
    float _1330 = (1.0 - _1324) * ((_1311 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1331 = _1324 * _1311;
    float _1359 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1363 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1367 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1696;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1421 = fma(_1367, cbModelParam._m0[26u].z, fma(_1363, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1359));
        float _1425 = fma(_1367, cbModelParam._m0[27u].z, fma(_1363, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1359));
        float _1429 = fma(_1367, cbModelParam._m0[28u].z, fma(_1363, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1359));
        float _1454 = _1359 + _1118;
        float _1455 = _1363 + _1119;
        float _1456 = _1367 + _1120;
        float _1466 = fma(_1456, cbModelParam._m0[26u].z, fma(_1455, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1454)) - _1421;
        float _1467 = fma(_1456, cbModelParam._m0[27u].z, fma(_1455, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1454)) - _1425;
        float _1468 = fma(_1456, cbModelParam._m0[28u].z, fma(_1455, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1454)) - _1429;
        float _1472 = inversesqrt(dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468)));
        float _1485 = ((_1472 * _1466) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1421 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1472 * _1467) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1425 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1472 * _1468) / cbModelParam._m0[34u].z) + ((((((_1429 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        float _1524 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1490.x + (-0.5));
        float _1526 = _1524 * (_1490.y + (-0.5));
        float _1527 = _1524 * (_1490.z + (-0.5));
        float _1534 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1497.x + (-0.5));
        float _1536 = _1534 * (_1497.y + (-0.5));
        float _1537 = _1534 * (_1497.z + (-0.5));
        float _1544 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1504.x + (-0.5));
        float _1546 = _1544 * (_1504.y + (-0.5));
        float _1547 = _1544 * (_1504.z + (-0.5));
        float _1554 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1511.x + (-0.5));
        float _1556 = _1554 * (_1511.y + (-0.5));
        float _1557 = _1554 * (_1511.z + (-0.5));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = _1525 * 0.5;
        float _1562 = _1535 * 0.5;
        float _1563 = _1545 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1578 = (dot(vec3(_1118, _1119, _1120), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1588 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4411 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1590 + 1.0))) + _1595) * _1558;
        float _1605 = _1526 * 0.5;
        float _1606 = _1536 * 0.5;
        float _1607 = _1546 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_1118, _1119, _1120), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4444 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1632 + 1.0))) + _1637) * _1559;
        float _1647 = _1527 * 0.5;
        float _1648 = _1537 * 0.5;
        float _1649 = _1547 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_1118, _1119, _1120), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4477 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1674 + 1.0))) + _1679) * _1560;
        _1696 = _1527;
        _1698 = _1526;
        _1699 = _1525;
        _1700 = _1537;
        _1701 = _1536;
        _1702 = _1535;
        _1703 = _1547;
        _1704 = _1546;
        _1705 = _1545;
        _1706 = _1560;
        _1707 = _1559;
        _1708 = _1558;
        _1709 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1710 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1711 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
    }
    else
    {
        _1696 = _1697;
        _1698 = _1697;
        _1699 = _1697;
        _1700 = _1697;
        _1701 = _1697;
        _1702 = _1697;
        _1703 = _1697;
        _1704 = _1697;
        _1705 = _1697;
        _1706 = _1697;
        _1707 = _1697;
        _1708 = _1697;
        _1709 = 0.0;
        _1710 = 0.0;
        _1711 = 0.0;
    }
    float _2006;
    float _2007;
    float _2008;
    float _2009;
    float _2010;
    float _2011;
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    float _2018;
    float _2019;
    float _2020;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1737 = fma(_1367, cbModelParam._m0[30u].z, fma(_1363, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1359));
        float _1741 = fma(_1367, cbModelParam._m0[31u].z, fma(_1363, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1359));
        float _1745 = fma(_1367, cbModelParam._m0[32u].z, fma(_1363, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1359));
        float _1768 = _1359 + _1118;
        float _1769 = _1363 + _1119;
        float _1770 = _1367 + _1120;
        float _1780 = fma(_1770, cbModelParam._m0[30u].z, fma(_1769, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1768)) - _1737;
        float _1781 = fma(_1770, cbModelParam._m0[31u].z, fma(_1769, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1768)) - _1741;
        float _1782 = fma(_1770, cbModelParam._m0[32u].z, fma(_1769, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1768)) - _1745;
        float _1786 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
        float _1799 = ((_1786 * _1780) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1737 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1800 = ((_1786 * _1781) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1741 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1801 = ((_1786 * _1782) / cbModelParam._m0[35u].z) + ((((((_1745 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1803 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1799, _1800, _1801), 0.0);
        vec4 _1810 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1799, _1800, _1801), 0.0);
        vec4 _1817 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1799, _1800, _1801), 0.0);
        vec4 _1824 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1799, _1800, _1801), 0.0);
        float _1836 = exp2((_1803.w + (-0.5)) * 20.0) * 2.0;
        float _1837 = _1836 * (_1803.x + (-0.5));
        float _1838 = _1836 * (_1803.y + (-0.5));
        float _1839 = _1836 * (_1803.z + (-0.5));
        float _1846 = exp2((_1810.w + (-0.5)) * 20.0) * 2.0;
        float _1847 = _1846 * (_1810.x + (-0.5));
        float _1848 = _1846 * (_1810.y + (-0.5));
        float _1849 = _1846 * (_1810.z + (-0.5));
        float _1856 = exp2((_1817.w + (-0.5)) * 20.0) * 2.0;
        float _1857 = _1856 * (_1817.x + (-0.5));
        float _1858 = _1856 * (_1817.y + (-0.5));
        float _1859 = _1856 * (_1817.z + (-0.5));
        float _1866 = exp2((_1824.w + (-0.5)) * 20.0) * 2.0;
        float _1867 = _1866 * (_1824.x + (-0.5));
        float _1868 = _1866 * (_1824.y + (-0.5));
        float _1869 = _1866 * (_1824.z + (-0.5));
        float _1870 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1871 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1872 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1873 = _1837 * 0.5;
        float _1874 = _1847 * 0.5;
        float _1875 = _1857 * 0.5;
        float _1876 = dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875));
        float _1881 = (_1876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1876);
        float _1889 = (dot(vec3(_1118, _1119, _1120), vec3(_1881 * _1873, _1881 * _1874, _1881 * _1875)) + 1.0) * 0.5;
        float _4518 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1898 = sqrt(((_1874 * _1874) + (_1873 * _1873)) + (_1875 * _1875)) / (_1870 + 9.9999997473787516355514526367188e-06);
        float _4529 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _1900 = _1899 * 2.0;
        float _1904 = (1.0 - _1899) / (_1899 + 1.0);
        float _4540 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1914 = ((((1.0 - _1905) * (_1900 + 2.0)) * exp2(log2(isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_1900 + 1.0))) + _1905) * _1870;
        float _1915 = _1838 * 0.5;
        float _1916 = _1848 * 0.5;
        float _1917 = _1858 * 0.5;
        float _1918 = dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917));
        float _1923 = (_1918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1918);
        float _1931 = (dot(vec3(_1118, _1119, _1120), vec3(_1923 * _1915, _1923 * _1916, _1923 * _1917)) + 1.0) * 0.5;
        float _4551 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1940 = sqrt(((_1916 * _1916) + (_1915 * _1915)) + (_1917 * _1917)) / (_1871 + 9.9999997473787516355514526367188e-06);
        float _4562 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1941 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _1942 = _1941 * 2.0;
        float _1946 = (1.0 - _1941) / (_1941 + 1.0);
        float _4573 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1956 = ((((1.0 - _1947) * (_1942 + 2.0)) * exp2(log2(isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_1942 + 1.0))) + _1947) * _1871;
        float _1957 = _1839 * 0.5;
        float _1958 = _1849 * 0.5;
        float _1959 = _1859 * 0.5;
        float _1960 = dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959));
        float _1965 = (_1960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1960);
        float _1973 = (dot(vec3(_1118, _1119, _1120), vec3(_1965 * _1957, _1965 * _1958, _1965 * _1959)) + 1.0) * 0.5;
        float _4584 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1982 = sqrt(((_1958 * _1958) + (_1957 * _1957)) + (_1959 * _1959)) / (_1872 + 9.9999997473787516355514526367188e-06);
        float _4595 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _1984 = _1983 * 2.0;
        float _1988 = (1.0 - _1983) / (_1983 + 1.0);
        float _4606 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1989 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _1998 = ((((1.0 - _1989) * (_1984 + 2.0)) * exp2(log2(isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_1984 + 1.0))) + _1989) * _1872;
        _2006 = _1839;
        _2007 = _1838;
        _2008 = _1837;
        _2009 = _1849;
        _2010 = _1848;
        _2011 = _1847;
        _2012 = _1859;
        _2013 = _1858;
        _2014 = _1857;
        _2015 = _1872;
        _2016 = _1871;
        _2017 = _1870;
        _2018 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)));
        _2019 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)));
        _2020 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)));
    }
    else
    {
        _2006 = _1697;
        _2007 = _1697;
        _2008 = _1697;
        _2009 = _1697;
        _2010 = _1697;
        _2011 = _1697;
        _2012 = _1697;
        _2013 = _1697;
        _2014 = _1697;
        _2015 = _1697;
        _2016 = _1697;
        _2017 = _1697;
        _2018 = 0.0;
        _2019 = 0.0;
        _2020 = 0.0;
    }
    float _2030 = (cbModelParam._m0[1u].x * (_2018 - _1709)) + _1709;
    float _2031 = (cbModelParam._m0[1u].x * (_2019 - _1710)) + _1710;
    float _2032 = (cbModelParam._m0[1u].x * (_2020 - _1711)) + _1711;
    float _2053 = fma(_2032, cbSceneParam._m0[89u].z, fma(_2031, cbSceneParam._m0[89u].y, _2030 * cbSceneParam._m0[89u].x));
    float _2056 = fma(_2032, cbSceneParam._m0[90u].z, fma(_2031, cbSceneParam._m0[90u].y, _2030 * cbSceneParam._m0[90u].x));
    float _2059 = fma(_2032, cbSceneParam._m0[91u].z, fma(_2031, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2030));
    float _2074 = _1303 * 0.5;
    float _2075 = _1304 * 0.5;
    float _2076 = _1305 * 0.5;
    float _2077 = dot(vec4(_2074, _2075, _2076, 1.0), vec4(_2008, _2011, _2014, _2017));
    float _2080 = dot(vec4(_2074, _2075, _2076, 1.0), vec4(_2007, _2010, _2013, _2016));
    float _2083 = dot(vec4(_2074, _2075, _2076, 1.0), vec4(_2006, _2009, _2012, _2015));
    float _2117;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2090 = dot(vec4(_2074, _2075, _2076, 1.0), vec4(_1696, _1700, _1703, _1706));
        float _2094 = dot(vec4(_2074, _2075, _2076, 1.0), vec4(_1698, _1701, _1704, _1707));
        float _2098 = dot(vec4(_2074, _2075, _2076, 1.0), vec4(_1699, _1702, _1705, _1708));
        float _2105 = dot(vec4(cbModelParam._m0[39u]), vec4(_2074, _2075, _2076, 1.0));
        _2117 = dot(vec3(isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0)), isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0)), isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2105) ? 0.0 : (isnan(0.0) ? _2105 : max(0.0, _2105))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2117 = 1.0;
    }
    float _2128;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2119 = dot(vec4(cbModelParam._m0[40u]), vec4(_2074, _2075, _2076, 1.0));
        _2128 = dot(vec3(isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0)), isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0)), isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2119) ? 0.0 : (isnan(0.0) ? _2119 : max(0.0, _2119))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2128 = 1.0;
    }
    float _2132 = (_2128 * cbModelParam._m0[1u].x) + (_2117 * (1.0 - cbModelParam._m0[1u].x));
    float _2142 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1121);
    float _2143 = isnan(_2142) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2142 : min(cbModelParam._m0[25u].z, _2142));
    float _2223;
    float _2225;
    float _2227;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2190 = fma(_1367, cbModelParam._m0[13u].z, fma(_1363, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1359)) + cbModelParam._m0[13u].w;
        float _2194 = fma(_1367, cbModelParam._m0[14u].z, fma(_1363, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1359)) + cbModelParam._m0[14u].w;
        float _2198 = fma(_1367, cbModelParam._m0[15u].z, fma(_1363, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1359)) + cbModelParam._m0[15u].w;
        float _2201 = fma(_1305, cbModelParam._m0[13u].z, fma(_1304, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1303));
        float _2204 = fma(_1305, cbModelParam._m0[14u].z, fma(_1304, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1303));
        float _2207 = fma(_1305, cbModelParam._m0[15u].z, fma(_1304, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1303));
        float _2235;
        if (_2201 > 0.0)
        {
            _2235 = abs((1.0 - _2190) / _2201);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2201 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2190 + 1.0) / _2201);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2235 = frontier_phi_17_15_ladder;
        }
        float _2459;
        if (_2204 > 0.0)
        {
            _2459 = abs((1.0 - _2194) / _2204);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2194 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2459 = frontier_phi_26_22_ladder;
        }
        float _2716;
        if (_2207 > 0.0)
        {
            _2716 = abs((1.0 - _2198) / _2207);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2198 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2716 = frontier_phi_38_33_ladder;
        }
        float _2718 = isnan(_2459) ? _2235 : (isnan(_2235) ? _2459 : min(_2235, _2459));
        float _2719 = isnan(_2716) ? _2718 : (isnan(_2718) ? _2716 : min(_2718, _2716));
        float _2723 = (_2719 * _2201) + _2190;
        float _2724 = (_2719 * _2204) + _2194;
        float _2725 = (_2719 * _2207) + _2198;
        float _2726 = _2719 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2726;
        float _2730 = _2726 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 > _2730) || ((_2724 < _2728) || ((_2723 < _2728) || (_2723 > _2730))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2853 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2725, cbModelParam._m0[9u].z, fma(_2724, cbModelParam._m0[9u].y, _2723 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2725, cbModelParam._m0[10u].z, fma(_2724, cbModelParam._m0[10u].y, _2723 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2725, cbModelParam._m0[11u].z, fma(_2724, cbModelParam._m0[11u].y, _2723 * cbModelParam._m0[11u].x))), _2143);
            frontier_phi_16_38_ladder = _2853.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2853.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2853.x * cbModelParam._m0[1u].y;
        }
        _2223 = frontier_phi_16_38_ladder_2;
        _2225 = frontier_phi_16_38_ladder_1;
        _2227 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2211 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1303, _1304, _1305), _2143);
        _2223 = _2211.x * cbModelParam._m0[1u].y;
        _2225 = _2211.y * cbModelParam._m0[1u].y;
        _2227 = _2211.z * cbModelParam._m0[1u].y;
    }
    float _2231 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1121);
    float _2232 = isnan(_2231) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2231 : min(cbModelParam._m0[25u].w, _2231));
    float _2322;
    float _2324;
    float _2326;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2286 = fma(_1367, cbModelParam._m0[21u].z, fma(_1363, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1359)) + cbModelParam._m0[21u].w;
        float _2290 = fma(_1367, cbModelParam._m0[22u].z, fma(_1363, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1359)) + cbModelParam._m0[22u].w;
        float _2294 = fma(_1367, cbModelParam._m0[23u].z, fma(_1363, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1359)) + cbModelParam._m0[23u].w;
        float _2297 = fma(_1305, cbModelParam._m0[21u].z, fma(_1304, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1303));
        float _2300 = fma(_1305, cbModelParam._m0[22u].z, fma(_1304, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1303));
        float _2303 = fma(_1305, cbModelParam._m0[23u].z, fma(_1304, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1303));
        float _2464;
        if (_2297 > 0.0)
        {
            _2464 = abs((1.0 - _2286) / _2297);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2297 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2286 + 1.0) / _2297);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2464 = frontier_phi_28_24_ladder;
        }
        float _2743;
        if (_2300 > 0.0)
        {
            _2743 = abs((1.0 - _2290) / _2300);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2300 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2290 + 1.0) / _2300);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2743 = frontier_phi_40_35_ladder;
        }
        float _2956;
        if (_2303 > 0.0)
        {
            _2956 = abs((1.0 - _2294) / _2303);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2303 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2294 + 1.0) / _2303);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2956 = frontier_phi_49_46_ladder;
        }
        float _2958 = isnan(_2743) ? _2464 : (isnan(_2464) ? _2743 : min(_2464, _2743));
        float _2959 = isnan(_2956) ? _2958 : (isnan(_2958) ? _2956 : min(_2958, _2956));
        float _2963 = (_2959 * _2297) + _2286;
        float _2964 = (_2959 * _2300) + _2290;
        float _2965 = (_2959 * _2303) + _2294;
        float _2966 = _2959 * 9.9999997473787516355514526367188e-05;
        float _2967 = (-1.0) - _2966;
        float _2969 = _2966 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2965 > _2969) || ((_2965 < _2967) || ((_2964 > _2969) || ((_2964 < _2967) || ((_2963 < _2967) || (_2963 > _2969))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3164 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2965, cbModelParam._m0[17u].z, fma(_2964, cbModelParam._m0[17u].y, _2963 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2965, cbModelParam._m0[18u].z, fma(_2964, cbModelParam._m0[18u].y, _2963 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2965, cbModelParam._m0[19u].z, fma(_2964, cbModelParam._m0[19u].y, _2963 * cbModelParam._m0[19u].x))), _2232);
            frontier_phi_25_49_ladder = _3164.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3164.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3164.x * cbModelParam._m0[1u].z;
        }
        _2322 = frontier_phi_25_49_ladder_2;
        _2324 = frontier_phi_25_49_ladder_1;
        _2326 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2306 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1303, _1304, _1305), _2232);
        _2322 = _2306.x * cbModelParam._m0[1u].z;
        _2324 = _2306.y * cbModelParam._m0[1u].z;
        _2326 = _2306.z * cbModelParam._m0[1u].z;
    }
    float _2339 = (((_1330 * _1279) + _1331) * _1295) * ((cbModelParam._m0[1u].w * (_2322 - _2223)) + _2223);
    float _2341 = (((_1330 * _1281) + _1331) * _1295) * ((cbModelParam._m0[1u].w * (_2324 - _2225)) + _2225);
    float _2343 = (((_1330 * _1282) + _1331) * _1295) * ((cbModelParam._m0[1u].w * (_2326 - _2227)) + _2227);
    float _2346 = fma(_2343, cbSceneParam._m0[89u].z, fma(_2341, cbSceneParam._m0[89u].y, _2339 * cbSceneParam._m0[89u].x));
    float _2349 = fma(_2343, cbSceneParam._m0[90u].z, fma(_2341, cbSceneParam._m0[90u].y, _2339 * cbSceneParam._m0[90u].x));
    float _2352 = fma(_2343, cbSceneParam._m0[91u].z, fma(_2341, cbSceneParam._m0[91u].y, _2339 * cbSceneParam._m0[91u].x));
    vec4 _2360 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1217, _1218));
    float _2362 = _2360.w;
    float _2374 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2362);
    float _2375 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2362);
    float _2376 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2362);
    uvec4 _2380 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2382 = _2380.x * 14u;
    uint _2383 = _2382 + 13u;
    float _2390 = _1295 + (-1.0);
    float _2395 = (cbLight._m0[_2383].x * _2390) + 1.0;
    float _2396 = (cbLight._m0[_2383].y * _2390) + 1.0;
    float _2397 = (cbLight._m0[_2383].z * _2390) + 1.0;
    float _2398 = (cbLight._m0[_2383].w * _2390) + 1.0;
    uint _2399 = _2382 + 5u;
    float _2405 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
    uint _2409 = _2382 + 4u;
    float _2418 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
    uint _2422 = _2382 | 1u;
    float _2433 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_1118, _1119, _1120));
    float _2436 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_1118, _1119, _1120));
    float _4742 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _4753 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2441 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * 0.3183098733425140380859375;
    float _2443 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * 0.3183098733425140380859375;
    float _2450 = ((cbLight._m0[_2399].x * _2405) * _2443) + (((cbLight._m0[_2409].x * _2374) * _2418) * _2441);
    float _2451 = ((_2405 * cbLight._m0[_2399].y) * _2443) + (((cbLight._m0[_2409].y * _2375) * _2418) * _2441);
    float _2452 = ((_2405 * cbLight._m0[_2399].z) * _2443) + (((cbLight._m0[_2409].z * _2376) * _2418) * _2441);
    uvec4 _2456 = floatBitsToUint(cbLight._m0[_2382 + 12u]);
    bool _2458 = _2456.x == 0u;
    float _2469;
    float _2471;
    float _2473;
    if (_2458)
    {
        _2469 = _2450;
        _2471 = _2451;
        _2473 = _2452;
    }
    else
    {
        uint _2477 = _2382 + 6u;
        float _2493 = (dot(vec3(cbLight._m0[_2382 + 2u].xyz), vec3(_1118, _1119, _1120)) * 0.5) + 0.5;
        float _2494 = _2493 * _2493;
        float _4764 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2495 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2496 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        _2469 = (((cbLight._m0[_2477].x * 0.3183098733425140380859375) * _2495) * _2496) + _2450;
        _2471 = (((cbLight._m0[_2477].y * 0.3183098733425140380859375) * _2495) * _2496) + _2451;
        _2473 = (((cbLight._m0[_2477].z * 0.3183098733425140380859375) * _2495) * _2496) + _2452;
    }
    bool _2476 = _2456.y == 0u;
    float _2514;
    float _2516;
    float _2518;
    if (_2476)
    {
        _2514 = _2469;
        _2516 = _2471;
        _2518 = _2473;
    }
    else
    {
        uint _2687 = _2382 + 7u;
        float _2703 = (dot(vec3(cbLight._m0[_2382 + 3u].xyz), vec3(_1118, _1119, _1120)) * 0.5) + 0.5;
        float _2704 = _2703 * _2703;
        float _4780 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2705 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2706 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2514 = (((cbLight._m0[_2687].x * 0.3183098733425140380859375) * _2705) * _2706) + _2469;
        _2516 = (((cbLight._m0[_2687].y * 0.3183098733425140380859375) * _2705) * _2706) + _2471;
        _2518 = (((cbLight._m0[_2687].z * 0.3183098733425140380859375) * _2705) * _2706) + _2473;
    }
    uint _2521 = _2382 + 8u;
    float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _1121) * 0.949999988079071044921875);
    float _2535 = _2534 * _2534;
    float _2536 = cbLight._m0[_2382].x + _1197;
    float _2537 = cbLight._m0[_2382].y + _1198;
    float _2538 = cbLight._m0[_2382].z + _1199;
    float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
    float _2543 = _2542 * _2536;
    float _2544 = _2542 * _2537;
    float _2545 = _2542 * _2538;
    float _2546 = dot(vec3(_1118, _1119, _1120), vec3(cbLight._m0[_2382].xyz));
    float _4796 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
    float _4807 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
    float _2550 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
    float _2551 = dot(vec3(_1118, _1119, _1120), vec3(_2543, _2544, _2545));
    float _4818 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
    float _2555 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2543, _2544, _2545));
    float _4829 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2559 = _2535 * _2535;
    float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
    float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) * 5.0);
    float _2572 = 0.959999978542327880859375 - _1276;
    float _2574 = 0.959999978542327880859375 - _1277;
    float _2575 = 0.959999978542327880859375 - _1278;
    float _2582 = 1.0 - _2535;
    float _2593 = (0.5 / (((_2550 * ((_2549 * _2582) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2582) + _2535) * _2549))) * _2549;
    float _4840 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2595 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
    uint _2609 = _2382 + 9u;
    float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _1121) * 0.949999988079071044921875);
    float _2621 = _2620 * _2620;
    float _2622 = cbLight._m0[_2422].x + _1197;
    float _2623 = cbLight._m0[_2422].y + _1198;
    float _2624 = cbLight._m0[_2422].z + _1199;
    float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
    float _2629 = _2628 * _2622;
    float _2630 = _2628 * _2623;
    float _2631 = _2628 * _2624;
    float _2632 = dot(vec3(_1118, _1119, _1120), vec3(cbLight._m0[_2422].xyz));
    float _4851 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2635 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
    float _2636 = dot(vec3(_1118, _1119, _1120), vec3(_2629, _2630, _2631));
    float _4862 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
    float _2640 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2629, _2630, _2631));
    float _4873 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2644 = _2621 * _2621;
    float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
    float _2655 = exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0);
    float _2662 = 1.0 - _2621;
    float _2672 = (0.5 / (((_2550 * ((_2635 * _2662) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2662) + _2621) * _2635))) * _2635;
    float _4884 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2674 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
    float _2684 = (((((_2655 * _2572) + _1279) * cbLight._m0[_2609].x) * _2674) * _2405) + ((((cbLight._m0[_2521].x * _2374) * ((_2571 * _2572) + _1279)) * _2595) * _2418);
    float _2685 = (((((_2655 * _2574) + _1281) * cbLight._m0[_2609].y) * _2674) * _2405) + ((((cbLight._m0[_2521].y * _2375) * ((_2571 * _2574) + _1281)) * _2595) * _2418);
    float _2686 = (((((_2655 * _2575) + _1282) * cbLight._m0[_2609].z) * _2674) * _2405) + ((((cbLight._m0[_2521].z * _2376) * ((_2571 * _2575) + _1282)) * _2595) * _2418);
    float _2748;
    float _2750;
    float _2752;
    if (_2458)
    {
        _2748 = _2684;
        _2750 = _2685;
        _2752 = _2686;
    }
    else
    {
        uint _2754 = _2382 + 2u;
        uint _2758 = _2382 + 10u;
        float _2772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2754].w)) * _1121) * 0.949999988079071044921875);
        float _2773 = _2772 * _2772;
        float _2774 = cbLight._m0[_2754].x + _1197;
        float _2775 = cbLight._m0[_2754].y + _1198;
        float _2776 = cbLight._m0[_2754].z + _1199;
        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
        float _2781 = _2780 * _2774;
        float _2782 = _2780 * _2775;
        float _2783 = _2780 * _2776;
        float _2784 = dot(vec3(_1118, _1119, _1120), vec3(cbLight._m0[_2754].xyz));
        float _4895 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2788 = dot(vec3(_1118, _1119, _1120), vec3(_2781, _2782, _2783));
        float _4906 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
        float _2792 = dot(vec3(cbLight._m0[_2754].xyz), vec3(_2781, _2782, _2783));
        float _4917 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2796 = _2773 * _2773;
        float _2800 = ((_2791 * _2791) * (_2796 + (-1.0))) + 1.0;
        float _2807 = exp2(log2(1.0 - (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) * 5.0);
        float _2814 = 1.0 - _2773;
        float _2824 = (0.5 / (((_2550 * ((_2787 * _2814) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2814) + _2773) * _2787))) * _2787;
        float _4928 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2826 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2796 / ((_2800 * _2800) * 3.141590118408203125));
        float _2827 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        _2748 = (((((_2807 * _2572) + _1279) * cbLight._m0[_2758].x) * _2826) * _2827) + _2684;
        _2750 = (((((_2807 * _2574) + _1281) * cbLight._m0[_2758].y) * _2826) * _2827) + _2685;
        _2752 = (((((_2807 * _2575) + _1282) * cbLight._m0[_2758].z) * _2826) * _2827) + _2686;
    }
    float _2862;
    float _2864;
    float _2866;
    if (_2476)
    {
        _2862 = _2748;
        _2864 = _2750;
        _2866 = _2752;
    }
    else
    {
        uint _2873 = _2382 + 3u;
        uint _2877 = _2382 + 11u;
        float _2891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2873].w)) * _1121) * 0.949999988079071044921875);
        float _2892 = _2891 * _2891;
        float _2893 = cbLight._m0[_2873].x + _1197;
        float _2894 = cbLight._m0[_2873].y + _1198;
        float _2895 = cbLight._m0[_2873].z + _1199;
        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
        float _2900 = _2899 * _2893;
        float _2901 = _2899 * _2894;
        float _2902 = _2899 * _2895;
        float _2903 = dot(vec3(_1118, _1119, _1120), vec3(cbLight._m0[_2873].xyz));
        float _4944 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2906 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _2907 = dot(vec3(_1118, _1119, _1120), vec3(_2900, _2901, _2902));
        float _4955 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2910 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
        float _2911 = dot(vec3(cbLight._m0[_2873].xyz), vec3(_2900, _2901, _2902));
        float _4966 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2915 = _2892 * _2892;
        float _2919 = ((_2910 * _2910) * (_2915 + (-1.0))) + 1.0;
        float _2926 = exp2(log2(1.0 - (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) * 5.0);
        float _2933 = 1.0 - _2892;
        float _2943 = (0.5 / (((_2550 * ((_2906 * _2933) + _2892)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2933) + _2892) * _2906))) * _2906;
        float _4977 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2945 = (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2915 / ((_2919 * _2919) * 3.141590118408203125));
        float _2946 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2862 = (((((_2926 * _2572) + _1279) * cbLight._m0[_2877].x) * _2945) * _2946) + _2748;
        _2864 = (((((_2926 * _2574) + _1281) * cbLight._m0[_2877].y) * _2945) * _2946) + _2750;
        _2866 = (((((_2926 * _2575) + _1282) * cbLight._m0[_2877].z) * _2945) * _2946) + _2752;
    }
    float _3081;
    float _3083;
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    if (_2380.y == 0u)
    {
        float _3021 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3022 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3021;
        float _3023 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3021;
        float _3024 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3021;
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.x;
        uint _3048 = uint((float(_3036.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1218) / _3037))) + floor(float(uint(cbSceneParam._m0[85u].x * _1217) / _3037)));
        float _3058 = (log2(_3024 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3059 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
        uint _3062 = uint(isnan(14.0) ? _3059 : (isnan(_3059) ? 14.0 : min(_3059, 14.0)));
        uvec4 _3067 = texelFetch(g_lightClusterGridBuffer, int(((_3062 << 2u) + (_3048 << 6u)) >> 2u));
        uint _3068 = _3067.x;
        uint _3069 = _3036.z;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        if (((((1u << ((_3069 >> 4u) & 15u)) + 4294967295u) & _3068) == 0u) || ((_3069 & 240u) == 0u))
        {
            _3169 = 0.0;
            _3171 = 0.0;
            _3173 = 0.0;
            _3175 = 0.0;
            _3177 = 0.0;
            _3179 = 0.0;
        }
        else
        {
            float _3170;
            float _3172;
            float _3174;
            float _3176;
            float _3178;
            float _3180;
            float _3322 = 0.0;
            float _3323 = 0.0;
            float _3324 = 0.0;
            float _3325 = 0.0;
            float _3326 = 0.0;
            float _3327 = 0.0;
            uint _3328 = 0u;
            uint _3337;
            bool _3338;
            for (;;)
            {
                _3337 = texelFetch(g_lightClassification, int((((_3062 << 5u) + (_3048 << 9u)) + (_3328 << 2u)) >> 2u)).x;
                _3338 = _3337 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3338)
                {
                    frontier_phi_66_pred = _3322;
                    frontier_phi_66_pred_1 = _3327;
                    frontier_phi_66_pred_2 = _3326;
                    frontier_phi_66_pred_3 = _3325;
                    frontier_phi_66_pred_4 = _3324;
                    frontier_phi_66_pred_5 = _3323;
                }
                else
                {
                    float _3467;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    float _3472;
                    uint _3473;
                    _3467 = _3322;
                    _3468 = _3323;
                    _3469 = _3324;
                    _3470 = _3325;
                    _3471 = _3326;
                    _3472 = _3327;
                    _3473 = _3337;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    for (;;)
                    {
                        uint _3477 = uint(findLSB(_3473)) + (_3328 << 5u);
                        uint _3474 = (_3473 + 4294967295u) & _3473;
                        uint _3479 = _3477 * 48u;
                        vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3479)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 3u)).x));
                        uint _3499 = (_3477 * 48u) + 4u;
                        vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3499)).x, texelFetch(g_PointLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3499 + 3u)).x));
                        uint _3518 = (_3477 * 48u) + 8u;
                        vec3 _3529 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3518)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3518 + 2u)).x));
                        float _3533 = _3493.x - _3022;
                        float _3534 = _3493.y - _3023;
                        float _3535 = _3493.z - _3024;
                        float _3536 = dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535));
                        float _3539 = inversesqrt(_3536);
                        float _3540 = _3539 * _3533;
                        float _3541 = _3539 * _3534;
                        float _3542 = _3539 * _3535;
                        float _3543 = dot(vec3(_1236, _1239, _1242), vec3(_3540, _3541, _3542));
                        float _3548 = 1.0 - (_3536 * _3493.w);
                        float _5003 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3549 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                        float _3550 = sqrt(_3536) * _3512.w;
                        float _3553 = 1.39999997615814208984375 / (_3550 + 1.39999997615814208984375);
                        float _3554 = _3553 * _3553;
                        float _3557 = ((1.0 - _3554) * _3543) + _3554;
                        float _3560 = _3550 * _3550;
                        float _3564 = ((isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0))) * _3549) / ((_3560 * 0.699999988079071044921875) + 1.0);
                        float _3568 = (-0.0) - _3022;
                        float _3569 = (-0.0) - _3023;
                        float _3570 = (-0.0) - _3024;
                        float _3574 = inversesqrt(dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570)));
                        float _3575 = _3574 * _3568;
                        float _3576 = _3574 * _3569;
                        float _3577 = _3574 * _3570;
                        float _3585 = exp2(log2(1.0 / ((_3560 * 3.5) + 5.0)) * 0.25);
                        float _3586 = 1.0 - _1311;
                        float _3593 = sqrt(1.0 - ((1.0 - (_3586 * _3586)) * (1.0 - (_3585 * _3585))));
                        float _3594 = _3593 * _3593;
                        float _3595 = _3594 * _3594;
                        float _3596 = _3575 + _3540;
                        float _3597 = _3576 + _3541;
                        float _3598 = _3577 + _3542;
                        float _3602 = inversesqrt(dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598)));
                        float _3606 = dot(vec3(_1236, _1239, _1242), vec3(_3575, _3576, _3577));
                        float _5019 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3609 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                        float _3610 = dot(vec3(_1236, _1239, _1242), vec3(_3602 * _3596, _3602 * _3597, _3602 * _3598));
                        float _5030 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3613 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                        float _3617 = ((_3613 * _3613) * (_3595 + (-1.0))) + 1.0;
                        float _3618 = _3553 * _3594;
                        float _3619 = _3618 * _3618;
                        float _3622 = ((1.0 - _3619) * _3543) + _3619;
                        float _5041 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3623 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                        float _3624 = 1.0 - _3594;
                        float _3634 = (0.5 / (((_3623 * ((_3609 * _3624) + _3594)) + 9.9999999392252902907785028219223e-09) + (((_3623 * _3624) + _3594) * _3609))) * _3623;
                        float _5052 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                        float _3645 = (((_3595 * 3.1415927410125732421875) * (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0)))) / ((_3617 * _3617) * ((_3560 * 2.1991131305694580078125) + 3.141590118408203125))) * _3549;
                        _3397 = (_3564 * _3512.x) + _3470;
                        _3398 = (_3564 * _3512.y) + _3471;
                        _3399 = (_3564 * _3512.z) + _3472;
                        _3394 = (_3645 * _3529.x) + _3467;
                        _3395 = (_3645 * _3529.y) + _3468;
                        _3396 = (_3645 * _3529.z) + _3469;
                        if (_3474 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3467 = _3394;
                            _3468 = _3395;
                            _3469 = _3396;
                            _3470 = _3397;
                            _3471 = _3398;
                            _3472 = _3399;
                            _3473 = _3474;
                        }
                    }
                    frontier_phi_66_pred = _3394;
                    frontier_phi_66_pred_1 = _3399;
                    frontier_phi_66_pred_2 = _3398;
                    frontier_phi_66_pred_3 = _3397;
                    frontier_phi_66_pred_4 = _3396;
                    frontier_phi_66_pred_5 = _3395;
                }
                _3170 = frontier_phi_66_pred;
                _3180 = frontier_phi_66_pred_1;
                _3178 = frontier_phi_66_pred_2;
                _3176 = frontier_phi_66_pred_3;
                _3174 = frontier_phi_66_pred_4;
                _3172 = frontier_phi_66_pred_5;
                uint _3329 = _3328 + 1u;
                if (_3329 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3322 = _3170;
                    _3323 = _3172;
                    _3324 = _3174;
                    _3325 = _3176;
                    _3326 = _3178;
                    _3327 = _3180;
                    _3328 = _3329;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3169 = _3170;
            _3171 = _3172;
            _3173 = _3174;
            _3175 = _3176;
            _3177 = _3178;
            _3179 = _3180;
        }
        uvec4 _3183 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3184 = _3183.z;
        uint _3186 = (_3184 >> 8u) & 15u;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        float _3298;
        float _3300;
        if (((4294967295u << _3186) & _3068) == 0u)
        {
            _3290 = _3169;
            _3292 = _3171;
            _3294 = _3173;
            _3296 = _3175;
            _3298 = _3177;
            _3300 = _3179;
        }
        else
        {
            float _3315 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
            float _3316 = _3315 * _3022;
            float _3317 = _3315 * _3023;
            float _3318 = _3315 * _3024;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3186 < ((_3184 >> 12u) & 15u))
            {
                float _3291;
                float _3293;
                float _3295;
                float _3297;
                float _3299;
                float _3301;
                float _3450 = _3169;
                float _3451 = _3171;
                float _3452 = _3173;
                float _3453 = _3175;
                float _3454 = _3177;
                float _3455 = _3179;
                uint _3456 = _3186;
                uint _3465;
                bool _3466;
                for (;;)
                {
                    _3465 = texelFetch(g_lightClassification, int((((_3062 << 5u) + (_3048 << 9u)) + (_3456 << 2u)) >> 2u)).x;
                    _3466 = _3465 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3466)
                    {
                        frontier_phi_77_pred = _3455;
                        frontier_phi_77_pred_1 = _3454;
                        frontier_phi_77_pred_2 = _3453;
                        frontier_phi_77_pred_3 = _3452;
                        frontier_phi_77_pred_4 = _3451;
                        frontier_phi_77_pred_5 = _3450;
                    }
                    else
                    {
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3952;
                        float _3953;
                        float _3954;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3672 = _3450;
                        float _3673 = _3451;
                        float _3674 = _3452;
                        float _3675 = _3453;
                        float _3676 = _3454;
                        float _3677 = _3455;
                        uint _3678 = _3465;
                        uint _3679;
                        vec4 _3704;
                        float _3705;
                        vec4 _3720;
                        vec3 _3732;
                        vec4 _3747;
                        vec4 _3762;
                        float _3808;
                        bool _3809;
                        for (;;)
                        {
                            uint _3689 = ((_3456 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3678));
                            _3679 = (_3678 + 4294967295u) & _3678;
                            uint _3691 = _3689 * 40u;
                            _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            _3705 = _3704.w;
                            uint _3707 = (_3689 * 40u) + 4u;
                            _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            uint _3722 = (_3689 * 40u) + 8u;
                            _3732 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x));
                            uint _3734 = (_3689 * 40u) + 16u;
                            _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            uint _3749 = (_3689 * 40u) + 20u;
                            _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            uint _3764 = (_3689 * 40u) + 24u;
                            vec4 _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            uint _3783 = (_3689 * 40u) + 28u;
                            vec4 _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            _3808 = fma(_3024, _3796.z, fma(_3023, _3796.y, _3796.x * _3022)) + _3796.w;
                            _3809 = !((fma(_3024, _3777.z, fma(_3023, _3777.y, _3777.x * _3022)) + _3777.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3809)
                            {
                                float _3836 = _3704.x - _3022;
                                float _3837 = _3704.y - _3023;
                                float _3838 = _3704.z - _3024;
                                float _3839 = dot(vec3(_3836, _3837, _3838), vec3(_3836, _3837, _3838));
                                float _3842 = inversesqrt(_3839);
                                float _3843 = _3842 * _3836;
                                float _3844 = _3842 * _3837;
                                float _3845 = _3842 * _3838;
                                float _3849 = 1.0 - (_3839 / (_3705 * _3705));
                                float _5063 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                                float _3854 = sqrt(_3839) * _3720.w;
                                float _3856 = 1.39999997615814208984375 / (_3854 + 1.39999997615814208984375);
                                float _3857 = _3856 * _3856;
                                float _3860 = ((1.0 - _3857) * dot(vec3(_3843, _3844, _3845), vec3(_1236, _1239, _1242))) + _3857;
                                float _3863 = _3854 * _3854;
                                float _3867 = (fma(_3024, _3747.z, fma(_3023, _3747.y, _3747.x * _3022)) + _3747.w) / _3808;
                                float _3868 = (fma(_3024, _3762.z, fma(_3023, _3762.y, _3762.x * _3022)) + _3762.w) / _3808;
                                float _3872 = 1.0 - dot(vec2(_3867, _3868), vec2(_3867, _3868));
                                float _5079 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3873 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                                float _3874 = _3873 * (((isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0))) * _3850) / ((_3863 * 0.699999988079071044921875) + 1.0));
                                float _3886 = exp2(log2(1.0 / ((_3863 * 3.5) + 5.0)) * 0.25);
                                float _3887 = 1.0 - _1311;
                                float _3894 = sqrt(1.0 - ((1.0 - (_3887 * _3887)) * (1.0 - (_3886 * _3886))));
                                float _3895 = _3894 * _3894;
                                float _3896 = _3895 * _3895;
                                float _3897 = _3843 - _3316;
                                float _3898 = _3844 - _3317;
                                float _3899 = _3845 - _3318;
                                float _3903 = inversesqrt(dot(vec3(_3897, _3898, _3899), vec3(_3897, _3898, _3899)));
                                float _3907 = dot(vec3(_1236, _1239, _1242), vec3((-0.0) - _3316, (-0.0) - _3317, (-0.0) - _3318));
                                float _5090 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3910 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                                float _3911 = dot(vec3(_1236, _1239, _1242), vec3(_3903 * _3897, _3903 * _3898, _3903 * _3899));
                                float _5101 = isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0));
                                float _3914 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                                float _3918 = ((_3914 * _3914) * (_3896 + (-1.0))) + 1.0;
                                float _3919 = _3856 * _3895;
                                float _3920 = _3919 * _3919;
                                float _3926 = ((1.0 - _3920) * dot(vec3(_1236, _1239, _1242), vec3(_3843, _3844, _3845))) + _3920;
                                float _5112 = isnan(0.0) ? _3926 : (isnan(_3926) ? 0.0 : max(_3926, 0.0));
                                float _3927 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                                float _3928 = 1.0 - _3895;
                                float _3938 = (0.5 / (((_3927 * ((_3910 * _3928) + _3895)) + 9.9999999392252902907785028219223e-09) + (((_3927 * _3928) + _3895) * _3910))) * _3927;
                                float _5123 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3948 = (_3873 * _3850) * (((_3896 * 3.1415927410125732421875) * (isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0)))) / ((_3918 * _3918) * ((_3863 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3874 * _3720.y;
                                frontier_phi_83_pred_1 = _3874 * _3720.x;
                                frontier_phi_83_pred_2 = _3948 * _3732.z;
                                frontier_phi_83_pred_3 = _3948 * _3732.y;
                                frontier_phi_83_pred_4 = _3948 * _3732.x;
                                frontier_phi_83_pred_5 = _3874 * _3720.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3956 = frontier_phi_83_pred;
                            _3955 = frontier_phi_83_pred_1;
                            _3954 = frontier_phi_83_pred_2;
                            _3953 = frontier_phi_83_pred_3;
                            _3952 = frontier_phi_83_pred_4;
                            _3957 = frontier_phi_83_pred_5;
                            _3662 = _3955 + _3675;
                            _3663 = _3956 + _3676;
                            _3664 = _3957 + _3677;
                            _3659 = _3952 + _3672;
                            _3660 = _3953 + _3673;
                            _3661 = _3954 + _3674;
                            if (_3679 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3672 = _3659;
                                _3673 = _3660;
                                _3674 = _3661;
                                _3675 = _3662;
                                _3676 = _3663;
                                _3677 = _3664;
                                _3678 = _3679;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3664;
                        frontier_phi_77_pred_1 = _3663;
                        frontier_phi_77_pred_2 = _3662;
                        frontier_phi_77_pred_3 = _3661;
                        frontier_phi_77_pred_4 = _3660;
                        frontier_phi_77_pred_5 = _3659;
                    }
                    _3301 = frontier_phi_77_pred;
                    _3299 = frontier_phi_77_pred_1;
                    _3297 = frontier_phi_77_pred_2;
                    _3295 = frontier_phi_77_pred_3;
                    _3293 = frontier_phi_77_pred_4;
                    _3291 = frontier_phi_77_pred_5;
                    uint _3457 = _3456 + 1u;
                    if (_3457 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3450 = _3291;
                        _3451 = _3293;
                        _3452 = _3295;
                        _3453 = _3297;
                        _3454 = _3299;
                        _3455 = _3301;
                        _3456 = _3457;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3295;
                frontier_phi_58_59_ladder_1 = _3301;
                frontier_phi_58_59_ladder_2 = _3299;
                frontier_phi_58_59_ladder_3 = _3297;
                frontier_phi_58_59_ladder_4 = _3293;
                frontier_phi_58_59_ladder_5 = _3291;
            }
            else
            {
                frontier_phi_58_59_ladder = _3173;
                frontier_phi_58_59_ladder_1 = _3179;
                frontier_phi_58_59_ladder_2 = _3177;
                frontier_phi_58_59_ladder_3 = _3175;
                frontier_phi_58_59_ladder_4 = _3171;
                frontier_phi_58_59_ladder_5 = _3169;
            }
            _3290 = frontier_phi_58_59_ladder_5;
            _3292 = frontier_phi_58_59_ladder_4;
            _3294 = frontier_phi_58_59_ladder;
            _3296 = frontier_phi_58_59_ladder_3;
            _3298 = frontier_phi_58_59_ladder_2;
            _3300 = frontier_phi_58_59_ladder_1;
        }
        float _3305 = isnan(1.0) ? _1295 : (isnan(_1295) ? 1.0 : min(_1295, 1.0));
        _3081 = (_3305 * _3296) + _2514;
        _3083 = (_3305 * _3298) + _2516;
        _3085 = (_3305 * _3300) + _2518;
        _3087 = ((_3290 * _1279) * _3305) + _2862;
        _3089 = ((_3292 * _1281) * _3305) + _2864;
        _3091 = ((_3294 * _1282) * _3305) + _2866;
    }
    else
    {
        _3081 = _2514;
        _3083 = _2516;
        _3085 = _2518;
        _3087 = _2862;
        _3089 = _2864;
        _3091 = _2866;
    }
    float _5139 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
    float _5150 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
    float _5161 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
    float _3108 = ((isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0))) * (_3081 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1295))) + ((_3087 + ((isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0))) * _2132)) * cbPerFrame._m0[3u].x);
    float _3109 = ((isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0))) * (_3083 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1295))) + ((_3089 + ((isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0))) * _2132)) * cbPerFrame._m0[3u].x);
    float _3110 = ((isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0))) * (_3085 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1295))) + ((_3091 + ((isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0))) * _2132)) * cbPerFrame._m0[3u].x);
    uint _3111 = _303 + 6u;
    float _3119 = _1217 / cbSceneParam._m0[86u].x;
    float _3120 = _1218 / cbSceneParam._m0[86u].y;
    vec4 _3134 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3119, _3120, (log2((isnan(cbSceneParam._m0[77u].w) ? _1140 : (isnan(_1140) ? cbSceneParam._m0[77u].w : min(_1140, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3136 = _3134.x;
    float _3137 = _3134.y;
    float _3138 = _3134.z;
    float _3139 = _3134.w;
    float _3232;
    float _3234;
    float _3236;
    float _3238;
    if (_1140 > cbSceneParam._m0[78u].w)
    {
        float _3194 = isnan(_1140) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1140 : min(cbSceneParam._m0[80u].w, _1140));
        float _3195 = _3194 / _1140;
        float _3206 = _3195 * _1190;
        float _3207 = _1191 * _3195;
        float _3208 = (-0.0) - _3207;
        float _3210 = _3195 * _1192;
        float _3212 = (cbSceneParam._m0[77u].w * _3208) / _3194;
        float _3213 = _3212 + cbSceneParam._m0[79u].w;
        float _3214 = cbSceneParam._m0[79u].w - _3207;
        float _3220 = sqrt(((_3206 * _3206) + (_3207 * _3207)) + (_3210 * _3210));
        float _3223 = (1.0 - (cbSceneParam._m0[77u].w / _3194)) * _3220;
        float _3228 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3230 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3407;
        if (abs((_3208 - _3212) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3407 = ((((_3213 > 0.0) ? exp2(_3228 * _3213) : (2.0 - exp2(_3230 * _3213))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3223;
        }
        else
        {
            float _3351 = 1.0 / cbSceneParam._m0[80u].x;
            float _3352 = isnan(_3214) ? _3213 : (isnan(_3213) ? _3214 : max(_3213, _3214));
            float _3353 = isnan(_3214) ? _3213 : (isnan(_3213) ? _3214 : min(_3213, _3214));
            float _3362 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : min(_3352, 0.0));
            float _3363 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : min(_3353, 0.0));
            _3407 = ((abs(_3220 / _3208) * cbSceneParam._m0[80u].y) * ((((_3362 - _3363) * 2.0) - ((exp2(_3228 * (isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0)))) - exp2(_3228 * (isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))))) * _3351)) - ((exp2(_3230 * _3362) - exp2(_3230 * _3363)) * _3351))) + (_3223 * cbSceneParam._m0[80u].z);
        }
        vec4 _3409 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3119, _3120, 1.0), 0.0);
        float _3418 = exp2((_3407 * (-1.44269502162933349609375)) * (1.0 - _3409.w));
        float _3419 = log2(_3418);
        float _3435 = log2(_3139);
        _3232 = (exp2(_3435 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3419 * cbSceneParam._m0[78u].x)) * _3409.x) / cbSceneParam._m0[78u].x)) + _3136;
        _3234 = (exp2(_3435 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3419 * cbSceneParam._m0[78u].y)) * _3409.y) / cbSceneParam._m0[78u].y)) + _3137;
        _3236 = (exp2(_3435 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3419 * cbSceneParam._m0[78u].z)) * _3409.z) / cbSceneParam._m0[78u].z)) + _3138;
        _3238 = _3418 * _3139;
    }
    else
    {
        _3232 = _3136;
        _3234 = _3137;
        _3236 = _3138;
        _3238 = _3139;
    }
    bool _3445;
    vec4 _3248;
    vec4 _3270;
    float _3272;
    float _3276;
    float _3277;
    float _3278;
    float _3279;
    bool _3289;
    for (;;)
    {
        _3248 = cbMatDynParam._m0[0u];
        float _3250 = roundEven(_3248.y);
        bool _3251 = _3250 == 3.0;
        float _3252 = log2(_3238);
        float _3259 = exp2(_3252 * cbSceneParam._m0[78u].x) * _3108;
        float _3260 = exp2(_3252 * cbSceneParam._m0[78u].y) * _3109;
        float _3261 = exp2(_3252 * cbSceneParam._m0[78u].z) * _3110;
        float _3268 = _1206 + (-0.5);
        _3270 = cbMtdParam._m0[1u];
        _3272 = _3270.y * _3268;
        float _3275 = (_3250 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3276 = _3275 * (_3251 ? _3259 : (_3259 + (cbSceneParam._m0[72u].w * _3232)));
        _3277 = _3275 * (_3251 ? _3260 : (_3260 + (cbSceneParam._m0[72u].w * _3234)));
        _3278 = _3275 * (_3251 ? _3261 : (_3261 + (cbSceneParam._m0[72u].w * _3236)));
        _3279 = _3268 * 0.999000012874603271484375;
        _3289 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3289)
        {
            if ((cbInstanceData._m0[_303 + 7u].x + _3279) < 0.5)
            {
                _3445 = true;
                break;
            }
        }
        uint _3386 = _1255 + uint(_3248.w);
        if ((cbInstanceData._m0[_3386].w < 1.0) && ((cbInstanceData._m0[_3386].w + _3279) < 0.5))
        {
            _3445 = true;
            break;
        }
        if ((_3272 + 1.0) < _3270.x)
        {
            _3445 = true;
            break;
        }
        _3445 = false;
        break;
    }
    float _3650;
    if (_3445)
    {
        discard_state = true;
        _3650 = 0.0;
    }
    else
    {
        _3650 = cbInstanceData._m0[_3111].w;
    }
    SV_Target.x = _3276;
    SV_Target.y = _3277;
    SV_Target.z = _3278;
    SV_Target.w = _3650;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3111].w;
    discard_exit();
}


