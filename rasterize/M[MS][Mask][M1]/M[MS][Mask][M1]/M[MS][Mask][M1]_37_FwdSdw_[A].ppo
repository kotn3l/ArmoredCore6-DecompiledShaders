#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1410;
float _4073;
float _4074;
float _4075;
float _4076;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _404 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[23u].w) + _418) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4085 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _449 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_436 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331);
    float _452 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_436 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332);
    float _455 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_436 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333);
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    float _524 = ((_494.z - _515) * _436) + _515;
    float _527 = ((((_494.x - _513) * _436) + _513) * 2.0) + (-1.0);
    float _529 = ((((_494.y - _514) * _436) + _514) * 2.0) + (-1.0);
    float _530 = dot(vec2(_527, _529), vec2(_527, _529));
    float _4096 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))));
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _578 = _576.x;
    float _579 = 1.0 - _578;
    float _588 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _591 = ((isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : min(_588, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _600 = (_591 - ((((((_578 - _579) * cbMtdParam._m0[24u].z) + _579) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _591))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4117 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _608 = (_601 * ((_474.x * cbMtdParam._m0[18u].x) - _449)) + _449;
    float _609 = (_601 * ((_474.y * cbMtdParam._m0[18u].y) - _452)) + _452;
    float _610 = (_601 * ((_474.z * cbMtdParam._m0[18u].z) - _455)) + _455;
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _624 = _622.x;
    float _625 = 1.0 - _624;
    float _650 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_624 - _625) * cbMtdParam._m0[24u].w) + _625) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4128 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _659 = ((((cbMtdParam._m0[10u].x - _608) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _651) + _608;
    float _660 = ((((cbMtdParam._m0[10u].y - _609) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _651) + _609;
    float _661 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _610)) * _651) + _610;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _689 = _687.x;
    float _706 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _689) * _436) + _689;
    float _710 = ((_673.x - _706) * cbMtdParam._m0[19u].z) + _706;
    float _712 = _710 - (_710 * _601);
    float _714 = _712 - (_712 * _651);
    float _718 = (cbMtdParam._m0[19u].w * (_551.z - _524)) + _524;
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _739 = (_732.x * 2.0) + (-1.0);
    float _740 = (_732.y * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _4139 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _749 = (_601 * (_732.z - _718)) + _718;
    float _752 = ((cbMtdParam._m0[23u].x - _749) * _651) + _749;
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _777 = (_771.x * 2.0) + (-1.0);
    float _778 = (_771.y * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _4150 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _787 = (((_551.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _527;
    float _788 = (((_551.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _529;
    float _800 = (((_739 - _787) + (cbMtdParam._m0[21u].x * _787)) * _601) + _787;
    float _801 = (((_740 - _788) + (cbMtdParam._m0[21u].x * _788)) * _601) + _788;
    float _802 = (_601 * (sqrt(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) - _535)) + _535;
    float _813 = (((_777 - _800) + (_800 * cbMtdParam._m0[22u].z)) * _651) + _800;
    float _814 = (((_778 - _801) + (_801 * cbMtdParam._m0[22u].z)) * _651) + _801;
    float _815 = ((sqrt(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) - _802) * _651) + _802;
    float _817 = cbMtdParam._m0[22u].x + _551.w;
    float _820 = fma(_815, _250 * NORMAL.x, fma(_814, _257 * TANGENT.x, (_243 * _235) * _813));
    float _823 = fma(_815, _250 * NORMAL.y, fma(_814, _257 * TANGENT.y, (_243 * _236) * _813));
    float _826 = fma(_815, _250 * NORMAL.z, fma(_814, _257 * TANGENT.z, (_243 * _237) * _813));
    float _830 = inversesqrt(dot(vec3(_820, _823, _826), vec3(_820, _823, _826)));
    float _831 = _830 * _820;
    float _832 = _830 * _823;
    float _833 = _830 * _826;
    float _4161 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _834 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _4172 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4183 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4194 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4205 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4216 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _839 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _853 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _903 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _893);
    float _904 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _893);
    float _905 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _893);
    float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
    float _910 = _903 * _909;
    float _911 = _904 * _909;
    float _912 = _905 * _909;
    vec4 _917 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _919 = _917.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1091 = sqrt(((_903 * _903) + (_904 * _904)) + (_905 * _905));
        float _1097 = (cbMatDynParam._m0[5u].x * _1091) + cbMatDynParam._m0[5u].y;
        float _4227 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1102 = (cbMatDynParam._m0[5u].z * _1091) + cbMatDynParam._m0[5u].w;
        float _4238 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) - _1098)) + _1098) < ((_919 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _930 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _931 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _949 = fma(_833, cbSceneParam._m0[5u].z, fma(_832, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _831));
    float _952 = fma(_833, cbSceneParam._m0[6u].z, fma(_832, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _831));
    float _955 = fma(_833, cbSceneParam._m0[7u].z, fma(_832, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _831));
    uint _968 = _263 + 9u;
    uint _969 = _968 + uint(cbMatDynParam._m0[0u].w);
    float _975 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * cbInstanceData._m0[_969].x;
    float _976 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * cbInstanceData._m0[_969].y;
    float _977 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_969].z;
    float _4249 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _981 = 1.0 - _839;
    float _982 = _978 * _981;
    float _983 = _979 * _981;
    float _984 = _980 * _981;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _839;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _839;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _839;
    float _992 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _930, cbSceneParam._m0[86u].y * _931));
    float _1008 = ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * TEXCOORD_5.w) * _1004.x;
    float _1009 = dot(vec3(_831, _832, _833), vec3(_910, _911, _912));
    float _1012 = _1009 * 2.0;
    float _1016 = (_1012 * _831) - _910;
    float _1017 = (_1012 * _832) - _911;
    float _1018 = (_1012 * _833) - _912;
    float _1022 = abs(dot(vec3(_910, _911, _912), vec3(_831, _832, _833)));
    float _4282 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1024 = sqrt(_834);
    float _1037 = exp2((_1024 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1024 * 3.0));
    float _1043 = (1.0 - _1037) * ((_1024 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1044 = _1037 * _1024;
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1409;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1134 = fma(_1080, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072));
        float _1138 = fma(_1080, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072));
        float _1142 = fma(_1080, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072));
        float _1167 = _1072 + _831;
        float _1168 = _1076 + _832;
        float _1169 = _1080 + _833;
        float _1179 = fma(_1169, cbModelParam._m0[26u].z, fma(_1168, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1167)) - _1134;
        float _1180 = fma(_1169, cbModelParam._m0[27u].z, fma(_1168, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1167)) - _1138;
        float _1181 = fma(_1169, cbModelParam._m0[28u].z, fma(_1168, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1167)) - _1142;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1134 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1138 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[34u].z) + ((((((_1142 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1237 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1203.x + (-0.5));
        float _1239 = _1237 * (_1203.y + (-0.5));
        float _1240 = _1237 * (_1203.z + (-0.5));
        float _1247 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1210.x + (-0.5));
        float _1249 = _1247 * (_1210.y + (-0.5));
        float _1250 = _1247 * (_1210.z + (-0.5));
        float _1257 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1217.x + (-0.5));
        float _1259 = _1257 * (_1217.y + (-0.5));
        float _1260 = _1257 * (_1217.z + (-0.5));
        float _1267 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1224.x + (-0.5));
        float _1269 = _1267 * (_1224.y + (-0.5));
        float _1270 = _1267 * (_1224.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1291 = (dot(vec3(_831, _832, _833), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1301 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4330 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1303 + 1.0))) + _1308) * _1271;
        float _1318 = _1239 * 0.5;
        float _1319 = _1249 * 0.5;
        float _1320 = _1259 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_831, _832, _833), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4363 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1345 + 1.0))) + _1350) * _1272;
        float _1360 = _1240 * 0.5;
        float _1361 = _1250 * 0.5;
        float _1362 = _1260 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_831, _832, _833), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4396 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1387 + 1.0))) + _1392) * _1273;
        _1409 = _1240;
        _1411 = _1239;
        _1412 = _1238;
        _1413 = _1250;
        _1414 = _1249;
        _1415 = _1248;
        _1416 = _1260;
        _1417 = _1259;
        _1418 = _1258;
        _1419 = _1273;
        _1420 = _1272;
        _1421 = _1271;
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1424 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1410;
        _1411 = _1410;
        _1412 = _1410;
        _1413 = _1410;
        _1414 = _1410;
        _1415 = _1410;
        _1416 = _1410;
        _1417 = _1410;
        _1418 = _1410;
        _1419 = _1410;
        _1420 = _1410;
        _1421 = _1410;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1452 = fma(_1080, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072));
        float _1456 = fma(_1080, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072));
        float _1460 = fma(_1080, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072));
        float _1483 = _1072 + _831;
        float _1484 = _1076 + _832;
        float _1485 = _1080 + _833;
        float _1495 = fma(_1485, cbModelParam._m0[30u].z, fma(_1484, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1483)) - _1452;
        float _1496 = fma(_1485, cbModelParam._m0[31u].z, fma(_1484, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1483)) - _1456;
        float _1497 = fma(_1485, cbModelParam._m0[32u].z, fma(_1484, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1483)) - _1460;
        float _1501 = inversesqrt(dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497)));
        float _1514 = ((_1501 * _1495) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1452 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1501 * _1496) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1456 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1501 * _1497) / cbModelParam._m0[35u].z) + ((((((_1460 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        float _1551 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1518.x + (-0.5));
        float _1553 = _1551 * (_1518.y + (-0.5));
        float _1554 = _1551 * (_1518.z + (-0.5));
        float _1561 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1525.x + (-0.5));
        float _1563 = _1561 * (_1525.y + (-0.5));
        float _1564 = _1561 * (_1525.z + (-0.5));
        float _1571 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1532.x + (-0.5));
        float _1573 = _1571 * (_1532.y + (-0.5));
        float _1574 = _1571 * (_1532.z + (-0.5));
        float _1581 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1539.x + (-0.5));
        float _1583 = _1581 * (_1539.y + (-0.5));
        float _1584 = _1581 * (_1539.z + (-0.5));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = _1552 * 0.5;
        float _1589 = _1562 * 0.5;
        float _1590 = _1572 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_831, _832, _833), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4459 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1615 + 1.0))) + _1620) * _1585;
        float _1630 = _1553 * 0.5;
        float _1631 = _1563 * 0.5;
        float _1632 = _1573 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_831, _832, _833), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4492 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1657 + 1.0))) + _1662) * _1586;
        float _1672 = _1554 * 0.5;
        float _1673 = _1564 * 0.5;
        float _1674 = _1574 * 0.5;
        float _1675 = dot(vec3(_1672, _1673, _1674), vec3(_1672, _1673, _1674));
        float _1680 = (_1675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1675);
        float _1688 = (dot(vec3(_831, _832, _833), vec3(_1680 * _1672, _1680 * _1673, _1680 * _1674)) + 1.0) * 0.5;
        float _4503 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1697 = sqrt(((_1673 * _1673) + (_1672 * _1672)) + (_1674 * _1674)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4514 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1699 = _1698 * 2.0;
        float _1703 = (1.0 - _1698) / (_1698 + 1.0);
        float _4525 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1713 = ((((1.0 - _1704) * (_1699 + 2.0)) * exp2(log2(isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_1699 + 1.0))) + _1704) * _1587;
        _1721 = _1554;
        _1722 = _1553;
        _1723 = _1552;
        _1724 = _1564;
        _1725 = _1563;
        _1726 = _1562;
        _1727 = _1574;
        _1728 = _1573;
        _1729 = _1572;
        _1730 = _1587;
        _1731 = _1586;
        _1732 = _1585;
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
        _1735 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)));
    }
    else
    {
        _1721 = _1410;
        _1722 = _1410;
        _1723 = _1410;
        _1724 = _1410;
        _1725 = _1410;
        _1726 = _1410;
        _1727 = _1410;
        _1728 = _1410;
        _1729 = _1410;
        _1730 = _1410;
        _1731 = _1410;
        _1732 = _1410;
        _1733 = 0.0;
        _1734 = 0.0;
        _1735 = 0.0;
    }
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1422)) + _1422;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1423)) + _1423;
    float _1747 = (cbModelParam._m0[1u].x * (_1735 - _1424)) + _1424;
    float _1768 = fma(_1747, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1747, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1747, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1745));
    float _1789 = _1016 * 0.5;
    float _1790 = _1017 * 0.5;
    float _1791 = _1018 * 0.5;
    float _1792 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1795 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1798 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1832;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1805 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1409, _1413, _1416, _1419));
        float _1809 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1813 = dot(vec4(_1789, _1790, _1791, 1.0), vec4(_1412, _1415, _1418, _1421));
        float _1820 = dot(vec4(cbModelParam._m0[39u]), vec4(_1789, _1790, _1791, 1.0));
        _1832 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1820) ? 0.0 : (isnan(0.0) ? _1820 : max(0.0, _1820))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1832 = 1.0;
    }
    float _1843;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1834 = dot(vec4(cbModelParam._m0[40u]), vec4(_1789, _1790, _1791, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1847 = (_1843 * cbModelParam._m0[1u].x) + (_1832 * (1.0 - cbModelParam._m0[1u].x));
    float _1857 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _834);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1857 : min(cbModelParam._m0[25u].z, _1857));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1905 = fma(_1080, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072)) + cbModelParam._m0[13u].w;
        float _1909 = fma(_1080, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072)) + cbModelParam._m0[14u].w;
        float _1913 = fma(_1080, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072)) + cbModelParam._m0[15u].w;
        float _1916 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1919 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1922 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1950;
        if (_1916 > 0.0)
        {
            _1950 = abs((1.0 - _1905) / _1916);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1905 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1950 = frontier_phi_17_15_ladder;
        }
        float _2121;
        if (_1919 > 0.0)
        {
            _2121 = abs((1.0 - _1909) / _1919);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1909 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2121 = frontier_phi_26_22_ladder;
        }
        float _2416;
        if (_1922 > 0.0)
        {
            _2416 = abs((1.0 - _1913) / _1922);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1913 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2416 = frontier_phi_38_33_ladder;
        }
        float _2418 = isnan(_2121) ? _1950 : (isnan(_1950) ? _2121 : min(_1950, _2121));
        float _2419 = isnan(_2416) ? _2418 : (isnan(_2418) ? _2416 : min(_2418, _2416));
        float _2423 = (_2419 * _1916) + _1905;
        float _2424 = (_2419 * _1919) + _1909;
        float _2425 = (_2419 * _1922) + _1913;
        float _2426 = _2419 * 9.9999997473787516355514526367188e-05;
        float _2428 = (-1.0) - _2426;
        float _2430 = _2426 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2425 > _2430) || ((_2425 < _2428) || ((_2424 > _2430) || ((_2424 < _2428) || ((_2423 < _2428) || (_2423 > _2430))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2425, cbModelParam._m0[9u].z, fma(_2424, cbModelParam._m0[9u].y, _2423 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2425, cbModelParam._m0[10u].z, fma(_2424, cbModelParam._m0[10u].y, _2423 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2425, cbModelParam._m0[11u].z, fma(_2424, cbModelParam._m0[11u].y, _2423 * cbModelParam._m0[11u].x))), _1858);
            frontier_phi_16_38_ladder = _2570.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2570.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2570.x * cbModelParam._m0[1u].y;
        }
        _1938 = frontier_phi_16_38_ladder_2;
        _1940 = frontier_phi_16_38_ladder_1;
        _1942 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1858);
        _1938 = _1926.x * cbModelParam._m0[1u].y;
        _1940 = _1926.y * cbModelParam._m0[1u].y;
        _1942 = _1926.z * cbModelParam._m0[1u].y;
    }
    float _1946 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _834);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1946 : min(cbModelParam._m0[25u].w, _1946));
    float _2036;
    float _2038;
    float _2040;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2000 = fma(_1080, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072)) + cbModelParam._m0[21u].w;
        float _2004 = fma(_1080, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072)) + cbModelParam._m0[22u].w;
        float _2008 = fma(_1080, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072)) + cbModelParam._m0[23u].w;
        float _2011 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _2014 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _2017 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2126;
        if (_2011 > 0.0)
        {
            _2126 = abs((1.0 - _2000) / _2011);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2000 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2126 = frontier_phi_28_24_ladder;
        }
        float _2443;
        if (_2014 > 0.0)
        {
            _2443 = abs((1.0 - _2004) / _2014);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2004 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2443 = frontier_phi_40_35_ladder;
        }
        float _2781;
        if (_2017 > 0.0)
        {
            _2781 = abs((1.0 - _2008) / _2017);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2008 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2781 = frontier_phi_50_47_ladder;
        }
        float _2783 = isnan(_2443) ? _2126 : (isnan(_2126) ? _2443 : min(_2126, _2443));
        float _2784 = isnan(_2781) ? _2783 : (isnan(_2783) ? _2781 : min(_2783, _2781));
        float _2788 = (_2784 * _2011) + _2000;
        float _2789 = (_2784 * _2014) + _2004;
        float _2790 = (_2784 * _2017) + _2008;
        float _2791 = _2784 * 9.9999997473787516355514526367188e-05;
        float _2792 = (-1.0) - _2791;
        float _2794 = _2791 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2790 > _2794) || ((_2790 < _2792) || ((_2789 > _2794) || ((_2789 < _2792) || ((_2788 < _2792) || (_2788 > _2794))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2790, cbModelParam._m0[17u].z, fma(_2789, cbModelParam._m0[17u].y, _2788 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2790, cbModelParam._m0[18u].z, fma(_2789, cbModelParam._m0[18u].y, _2788 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2790, cbModelParam._m0[19u].z, fma(_2789, cbModelParam._m0[19u].y, _2788 * cbModelParam._m0[19u].x))), _1947);
            frontier_phi_25_50_ladder = _2912.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2912.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2912.x * cbModelParam._m0[1u].z;
        }
        _2036 = frontier_phi_25_50_ladder_2;
        _2038 = frontier_phi_25_50_ladder_1;
        _2040 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1947);
        _2036 = _2020.x * cbModelParam._m0[1u].z;
        _2038 = _2020.y * cbModelParam._m0[1u].z;
        _2040 = _2020.z * cbModelParam._m0[1u].z;
    }
    float _2053 = (((_1043 * _992) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2055 = (((_1043 * _994) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2057 = (((_1043 * _995) + _1044) * _1008) * ((cbModelParam._m0[1u].w * (_2040 - _1942)) + _1942);
    float _2060 = fma(_2057, cbSceneParam._m0[89u].z, fma(_2055, cbSceneParam._m0[89u].y, _2053 * cbSceneParam._m0[89u].x));
    float _2063 = fma(_2057, cbSceneParam._m0[90u].z, fma(_2055, cbSceneParam._m0[90u].y, _2053 * cbSceneParam._m0[90u].x));
    float _2066 = fma(_2057, cbSceneParam._m0[91u].z, fma(_2055, cbSceneParam._m0[91u].y, _2053 * cbSceneParam._m0[91u].x));
    float _2100 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2108 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2113 = _2100 / _2112;
    float _2114 = _2104 / _2112;
    float _2115 = _2108 / _2112;
    float _2262;
    float _2263;
    float _2264;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2142 = ((uint(_2115 > cbSceneParam._m0[59u].y) + uint(_2115 > cbSceneParam._m0[59u].x)) + uint(_2115 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2143 = _2142 + 43u;
        uint _2151 = _2142 + 44u;
        uint _2159 = _2142 + 45u;
        uint _2167 = _2142 + 46u;
        float _2178 = fma(_2112, cbSceneParam._m0[_2143].w, fma(_2108, cbSceneParam._m0[_2143].z, fma(_2104, cbSceneParam._m0[_2143].y, _2100 * cbSceneParam._m0[_2143].x)));
        float _2182 = fma(_2112, cbSceneParam._m0[_2151].w, fma(_2108, cbSceneParam._m0[_2151].z, fma(_2104, cbSceneParam._m0[_2151].y, _2100 * cbSceneParam._m0[_2151].x)));
        float _2190 = fma(_2112, cbSceneParam._m0[_2167].w, fma(_2108, cbSceneParam._m0[_2167].z, fma(_2104, cbSceneParam._m0[_2167].y, _2100 * cbSceneParam._m0[_2167].x)));
        float _2195 = cbSceneParam._m0[33u].z * _2190;
        float _2197 = cbSceneParam._m0[33u].w * _2190;
        float _2200 = fma(_2112, cbSceneParam._m0[_2159].w, fma(_2108, cbSceneParam._m0[_2159].z, fma(_2104, cbSceneParam._m0[_2159].y, _2100 * cbSceneParam._m0[_2159].x))) / _2190;
        float _2248 = (cbSceneParam._m0[33u].x - sqrt(((_2114 * _2114) + (_2113 * _2113)) + (_2115 * _2115))) * cbSceneParam._m0[33u].y;
        float _4651 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2255 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2195 + _2178) / _2190, (_2197 + _2182) / _2190), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2197 + _2178) / _2190, (_2182 - _2195) / _2190), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 - _2195) / _2190, (_2182 - _2197) / _2190), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2178 - _2197) / _2190, (_2195 + _2182) / _2190), _2200), 0.0)).x), vec4(0.25)));
        _2262 = 1.0 - (_2255 * cbSceneParam._m0[34u].x);
        _2263 = 1.0 - (_2255 * cbSceneParam._m0[34u].y);
        _2264 = 1.0 - (_2255 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2262 = 1.0;
        _2263 = 1.0;
        _2264 = 1.0;
    }
    float _2328;
    float _2330;
    float _2332;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2316 = fma(_2112, cbSceneParam._m0[63u].w, fma(_2108, cbSceneParam._m0[63u].z, fma(_2104, cbSceneParam._m0[63u].y, _2100 * cbSceneParam._m0[63u].x)));
        float _2317 = fma(_2112, cbSceneParam._m0[60u].w, fma(_2108, cbSceneParam._m0[60u].z, fma(_2104, cbSceneParam._m0[60u].y, _2100 * cbSceneParam._m0[60u].x))) / _2316;
        float _2318 = fma(_2112, cbSceneParam._m0[61u].w, fma(_2108, cbSceneParam._m0[61u].z, fma(_2104, cbSceneParam._m0[61u].y, _2100 * cbSceneParam._m0[61u].x))) / _2316;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2317 >= cbSceneParam._m0[64u].x) && (_2318 >= cbSceneParam._m0[64u].y)) && (_2317 <= cbSceneParam._m0[64u].z)) && (_2318 <= cbSceneParam._m0[64u].w))
        {
            float _2456 = fma(_2112, cbSceneParam._m0[62u].w, fma(_2108, cbSceneParam._m0[62u].z, fma(_2104, cbSceneParam._m0[62u].y, _2100 * cbSceneParam._m0[62u].x))) / _2316;
            float _2460 = isnan(cbSceneParam._m0[41u].w) ? _2456 : (isnan(_2456) ? cbSceneParam._m0[41u].w : max(_2456, cbSceneParam._m0[41u].w));
            float _2503 = (cbSceneParam._m0[33u].x - sqrt(((_2114 * _2114) + (_2113 * _2113)) + (_2115 * _2115))) * cbSceneParam._m0[33u].y;
            float _4667 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
            float _2510 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2317, cbSceneParam._m0[33u].w + _2318), _2460), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2317, _2318 - cbSceneParam._m0[33u].z), _2460), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2317 - cbSceneParam._m0[33u].z, _2318 - cbSceneParam._m0[33u].w), _2460), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2317 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2318), _2460), 0.0)).x), vec4(0.25)));
            float _2514 = 1.0 - (_2510 * cbSceneParam._m0[34u].x);
            float _2515 = 1.0 - (_2510 * cbSceneParam._m0[34u].y);
            float _2516 = 1.0 - (_2510 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2516) ? _2264 : (isnan(_2264) ? _2516 : min(_2264, _2516));
            frontier_phi_37_36_ladder_1 = isnan(_2515) ? _2263 : (isnan(_2263) ? _2515 : min(_2263, _2515));
            frontier_phi_37_36_ladder_2 = isnan(_2514) ? _2262 : (isnan(_2262) ? _2514 : min(_2262, _2514));
        }
        else
        {
            frontier_phi_37_36_ladder = _2264;
            frontier_phi_37_36_ladder_1 = _2263;
            frontier_phi_37_36_ladder_2 = _2262;
        }
        _2328 = frontier_phi_37_36_ladder_2;
        _2330 = frontier_phi_37_36_ladder_1;
        _2332 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2328 = _2262;
        _2330 = _2263;
        _2332 = _2264;
    }
    uvec4 _2337 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2339 = _2337.x * 14u;
    uint _2340 = _2339 + 13u;
    float _2347 = _1008 + (-1.0);
    float _2352 = (cbLight._m0[_2340].x * _2347) + 1.0;
    float _2353 = (cbLight._m0[_2340].y * _2347) + 1.0;
    float _2354 = (cbLight._m0[_2340].z * _2347) + 1.0;
    float _2355 = (cbLight._m0[_2340].w * _2347) + 1.0;
    uint _2356 = _2339 + 5u;
    float _2362 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
    uint _2366 = _2339 + 4u;
    float _2375 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
    uint _2379 = _2339 | 1u;
    float _2390 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_831, _832, _833));
    float _2393 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_831, _832, _833));
    float _4703 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _4714 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2398 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * 0.3183098733425140380859375;
    float _2400 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * 0.3183098733425140380859375;
    float _2407 = ((cbLight._m0[_2356].x * _2362) * _2400) + (((cbLight._m0[_2366].x * _2328) * _2375) * _2398);
    float _2408 = ((_2362 * cbLight._m0[_2356].y) * _2400) + (((cbLight._m0[_2366].y * _2330) * _2375) * _2398);
    float _2409 = ((_2362 * cbLight._m0[_2356].z) * _2400) + (((cbLight._m0[_2366].z * _2332) * _2375) * _2398);
    uvec4 _2413 = floatBitsToUint(cbLight._m0[_2339 + 12u]);
    bool _2415 = _2413.x == 0u;
    float _2517;
    float _2519;
    float _2521;
    if (_2415)
    {
        _2517 = _2407;
        _2519 = _2408;
        _2521 = _2409;
    }
    else
    {
        uint _2525 = _2339 + 6u;
        float _2541 = (dot(vec3(cbLight._m0[_2339 + 2u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2542 = _2541 * _2541;
        float _4725 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2543 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2544 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2517 = (((cbLight._m0[_2525].x * 0.3183098733425140380859375) * _2543) * _2544) + _2407;
        _2519 = (((cbLight._m0[_2525].y * 0.3183098733425140380859375) * _2543) * _2544) + _2408;
        _2521 = (((cbLight._m0[_2525].z * 0.3183098733425140380859375) * _2543) * _2544) + _2409;
    }
    bool _2524 = _2413.y == 0u;
    float _2579;
    float _2581;
    float _2583;
    if (_2524)
    {
        _2579 = _2517;
        _2581 = _2519;
        _2583 = _2521;
    }
    else
    {
        uint _2752 = _2339 + 7u;
        float _2768 = (dot(vec3(cbLight._m0[_2339 + 3u].xyz), vec3(_831, _832, _833)) * 0.5) + 0.5;
        float _2769 = _2768 * _2768;
        float _4741 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2770 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2771 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2579 = (((cbLight._m0[_2752].x * 0.3183098733425140380859375) * _2770) * _2771) + _2517;
        _2581 = (((cbLight._m0[_2752].y * 0.3183098733425140380859375) * _2770) * _2771) + _2519;
        _2583 = (((cbLight._m0[_2752].z * 0.3183098733425140380859375) * _2770) * _2771) + _2521;
    }
    uint _2586 = _2339 + 8u;
    float _2599 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _834) * 0.949999988079071044921875);
    float _2600 = _2599 * _2599;
    float _2601 = cbLight._m0[_2339].x + _910;
    float _2602 = cbLight._m0[_2339].y + _911;
    float _2603 = cbLight._m0[_2339].z + _912;
    float _2607 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
    float _2608 = _2607 * _2601;
    float _2609 = _2607 * _2602;
    float _2610 = _2607 * _2603;
    float _2611 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2339].xyz));
    float _4757 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _4768 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2615 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2616 = dot(vec3(_831, _832, _833), vec3(_2608, _2609, _2610));
    float _4779 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2620 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2608, _2609, _2610));
    float _4790 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2624 = _2600 * _2600;
    float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
    float _2636 = exp2(log2(1.0 - (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) * 5.0);
    float _2637 = 0.959999978542327880859375 - _989;
    float _2639 = 0.959999978542327880859375 - _990;
    float _2640 = 0.959999978542327880859375 - _991;
    float _2647 = 1.0 - _2600;
    float _2658 = (0.5 / (((_2615 * ((_2614 * _2647) + _2600)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2647) + _2600) * _2614))) * _2614;
    float _4801 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2660 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
    uint _2674 = _2339 + 9u;
    float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _834) * 0.949999988079071044921875);
    float _2686 = _2685 * _2685;
    float _2687 = cbLight._m0[_2379].x + _910;
    float _2688 = cbLight._m0[_2379].y + _911;
    float _2689 = cbLight._m0[_2379].z + _912;
    float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
    float _2694 = _2693 * _2687;
    float _2695 = _2693 * _2688;
    float _2696 = _2693 * _2689;
    float _2697 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2379].xyz));
    float _4812 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2700 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
    float _2701 = dot(vec3(_831, _832, _833), vec3(_2694, _2695, _2696));
    float _4823 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
    float _2705 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2694, _2695, _2696));
    float _4834 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2709 = _2686 * _2686;
    float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
    float _2720 = exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0);
    float _2727 = 1.0 - _2686;
    float _2737 = (0.5 / (((_2615 * ((_2700 * _2727) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2727) + _2686) * _2700))) * _2700;
    float _4845 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2739 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
    float _2749 = (((((_2720 * _2637) + _992) * cbLight._m0[_2674].x) * _2739) * _2362) + ((((cbLight._m0[_2586].x * _2328) * ((_2636 * _2637) + _992)) * _2660) * _2375);
    float _2750 = (((((_2720 * _2639) + _994) * cbLight._m0[_2674].y) * _2739) * _2362) + ((((cbLight._m0[_2586].y * _2330) * ((_2636 * _2639) + _994)) * _2660) * _2375);
    float _2751 = (((((_2720 * _2640) + _995) * cbLight._m0[_2674].z) * _2739) * _2362) + ((((cbLight._m0[_2586].z * _2332) * ((_2636 * _2640) + _995)) * _2660) * _2375);
    float _2807;
    float _2809;
    float _2811;
    if (_2415)
    {
        _2807 = _2749;
        _2809 = _2750;
        _2811 = _2751;
    }
    else
    {
        uint _2813 = _2339 + 2u;
        uint _2817 = _2339 + 10u;
        float _2831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2813].w)) * _834) * 0.949999988079071044921875);
        float _2832 = _2831 * _2831;
        float _2833 = cbLight._m0[_2813].x + _910;
        float _2834 = cbLight._m0[_2813].y + _911;
        float _2835 = cbLight._m0[_2813].z + _912;
        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
        float _2840 = _2839 * _2833;
        float _2841 = _2839 * _2834;
        float _2842 = _2839 * _2835;
        float _2843 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2813].xyz));
        float _4856 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2846 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2847 = dot(vec3(_831, _832, _833), vec3(_2840, _2841, _2842));
        float _4867 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _2851 = dot(vec3(cbLight._m0[_2813].xyz), vec3(_2840, _2841, _2842));
        float _4878 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2855 = _2832 * _2832;
        float _2859 = ((_2850 * _2850) * (_2855 + (-1.0))) + 1.0;
        float _2866 = exp2(log2(1.0 - (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) * 5.0);
        float _2873 = 1.0 - _2832;
        float _2883 = (0.5 / (((_2615 * ((_2846 * _2873) + _2832)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2873) + _2832) * _2846))) * _2846;
        float _4889 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2885 = (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2855 / ((_2859 * _2859) * 3.141590118408203125));
        float _2886 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
        _2807 = (((((_2866 * _2637) + _992) * cbLight._m0[_2817].x) * _2885) * _2886) + _2749;
        _2809 = (((((_2866 * _2639) + _994) * cbLight._m0[_2817].y) * _2885) * _2886) + _2750;
        _2811 = (((((_2866 * _2640) + _995) * cbLight._m0[_2817].z) * _2885) * _2886) + _2751;
    }
    float _2917;
    float _2919;
    float _2921;
    if (_2524)
    {
        _2917 = _2807;
        _2919 = _2809;
        _2921 = _2811;
    }
    else
    {
        uint _2928 = _2339 + 3u;
        uint _2932 = _2339 + 11u;
        float _2946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2928].w)) * _834) * 0.949999988079071044921875);
        float _2947 = _2946 * _2946;
        float _2948 = cbLight._m0[_2928].x + _910;
        float _2949 = cbLight._m0[_2928].y + _911;
        float _2950 = cbLight._m0[_2928].z + _912;
        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
        float _2955 = _2954 * _2948;
        float _2956 = _2954 * _2949;
        float _2957 = _2954 * _2950;
        float _2958 = dot(vec3(_831, _832, _833), vec3(cbLight._m0[_2928].xyz));
        float _4905 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2961 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
        float _2962 = dot(vec3(_831, _832, _833), vec3(_2955, _2956, _2957));
        float _4916 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2965 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
        float _2966 = dot(vec3(cbLight._m0[_2928].xyz), vec3(_2955, _2956, _2957));
        float _4927 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2970 = _2947 * _2947;
        float _2974 = ((_2965 * _2965) * (_2970 + (-1.0))) + 1.0;
        float _2981 = exp2(log2(1.0 - (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) * 5.0);
        float _2988 = 1.0 - _2947;
        float _2998 = (0.5 / (((_2615 * ((_2961 * _2988) + _2947)) + 9.9999999392252902907785028219223e-09) + (((_2615 * _2988) + _2947) * _2961))) * _2961;
        float _4938 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
        float _3000 = (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2970 / ((_2974 * _2974) * 3.141590118408203125));
        float _3001 = isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0));
        _2917 = (((((_2981 * _2637) + _992) * cbLight._m0[_2932].x) * _3000) * _3001) + _2807;
        _2919 = (((((_2981 * _2639) + _994) * cbLight._m0[_2932].y) * _3000) * _3001) + _2809;
        _2921 = (((((_2981 * _2640) + _995) * cbLight._m0[_2932].z) * _3000) * _3001) + _2811;
    }
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    if (_2337.y == 0u)
    {
        uvec4 _3022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3023 = _3022.x;
        uint _3034 = uint((float(_3022.y) * floor(float(uint(cbSceneParam._m0[85u].y * _931) / _3023))) + floor(float(uint(cbSceneParam._m0[85u].x * _930) / _3023)));
        float _3044 = (log2(_2115 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3045 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        uint _3048 = uint(isnan(14.0) ? _3045 : (isnan(_3045) ? 14.0 : min(_3045, 14.0)));
        uvec4 _3053 = texelFetch(g_lightClusterGridBuffer, int(((_3048 << 2u) + (_3034 << 6u)) >> 2u));
        uint _3054 = _3053.x;
        uint _3055 = _3022.z;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        if (((((1u << ((_3055 >> 4u) & 15u)) + 4294967295u) & _3054) == 0u) || ((_3055 & 240u) == 0u))
        {
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
        }
        else
        {
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            uint _3293 = 0u;
            uint _3302;
            bool _3303;
            for (;;)
            {
                _3302 = texelFetch(g_lightClassification, int((((_3048 << 5u) + (_3034 << 9u)) + (_3293 << 2u)) >> 2u)).x;
                _3303 = _3302 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3303)
                {
                    frontier_phi_71_pred = _3292;
                    frontier_phi_71_pred_1 = _3291;
                    frontier_phi_71_pred_2 = _3290;
                    frontier_phi_71_pred_3 = _3289;
                    frontier_phi_71_pred_4 = _3288;
                    frontier_phi_71_pred_5 = _3287;
                }
                else
                {
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    uint _3438;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3292;
                    _3438 = _3302;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    for (;;)
                    {
                        uint _3442 = uint(findLSB(_3438)) + (_3293 << 5u);
                        uint _3439 = (_3438 + 4294967295u) & _3438;
                        uint _3444 = _3442 * 48u;
                        vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3444)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 3u)).x));
                        uint _3464 = (_3442 * 48u) + 4u;
                        vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3464)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 3u)).x));
                        uint _3483 = (_3442 * 48u) + 8u;
                        vec3 _3494 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3483)).x, texelFetch(g_PointLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3483 + 2u)).x));
                        float _3498 = _3458.x - _2113;
                        float _3499 = _3458.y - _2114;
                        float _3500 = _3458.z - _2115;
                        float _3501 = dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500));
                        float _3504 = inversesqrt(_3501);
                        float _3505 = _3504 * _3498;
                        float _3506 = _3504 * _3499;
                        float _3507 = _3504 * _3500;
                        float _3508 = dot(vec3(_949, _952, _955), vec3(_3505, _3506, _3507));
                        float _3513 = 1.0 - (_3501 * _3458.w);
                        float _4964 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3514 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                        float _3515 = sqrt(_3501) * _3477.w;
                        float _3518 = 1.39999997615814208984375 / (_3515 + 1.39999997615814208984375);
                        float _3519 = _3518 * _3518;
                        float _3522 = ((1.0 - _3519) * _3508) + _3519;
                        float _3525 = _3515 * _3515;
                        float _3529 = ((isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0))) * _3514) / ((_3525 * 0.699999988079071044921875) + 1.0);
                        float _3533 = (-0.0) - _2113;
                        float _3534 = (-0.0) - _2114;
                        float _3535 = (-0.0) - _2115;
                        float _3539 = inversesqrt(dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535)));
                        float _3540 = _3539 * _3533;
                        float _3541 = _3539 * _3534;
                        float _3542 = _3539 * _3535;
                        float _3549 = exp2(log2(1.0 / ((_3525 * 3.5) + 5.0)) * 0.25);
                        float _3550 = 1.0 - _1024;
                        float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                        float _3558 = _3557 * _3557;
                        float _3559 = _3558 * _3558;
                        float _3560 = _3540 + _3505;
                        float _3561 = _3541 + _3506;
                        float _3562 = _3542 + _3507;
                        float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                        float _3570 = dot(vec3(_949, _952, _955), vec3(_3540, _3541, _3542));
                        float _4980 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3573 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                        float _3574 = dot(vec3(_949, _952, _955), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                        float _4991 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3577 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                        float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                        float _3582 = _3518 * _3558;
                        float _3583 = _3582 * _3582;
                        float _3586 = ((1.0 - _3583) * _3508) + _3583;
                        float _5002 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3587 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                        float _3588 = 1.0 - _3558;
                        float _3598 = (0.5 / (((_3587 * ((_3573 * _3588) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3587 * _3588) + _3558) * _3573))) * _3587;
                        float _5013 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3609 = (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) / ((_3581 * _3581) * ((_3525 * 2.1991131305694580078125) + 3.141590118408203125))) * _3514;
                        _3362 = (_3529 * _3477.x) + _3435;
                        _3363 = (_3529 * _3477.y) + _3436;
                        _3364 = (_3529 * _3477.z) + _3437;
                        _3359 = (_3609 * _3494.x) + _3432;
                        _3360 = (_3609 * _3494.y) + _3433;
                        _3361 = (_3609 * _3494.z) + _3434;
                        if (_3439 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3364;
                            _3438 = _3439;
                        }
                    }
                    frontier_phi_71_pred = _3364;
                    frontier_phi_71_pred_1 = _3363;
                    frontier_phi_71_pred_2 = _3362;
                    frontier_phi_71_pred_3 = _3361;
                    frontier_phi_71_pred_4 = _3360;
                    frontier_phi_71_pred_5 = _3359;
                }
                _3145 = frontier_phi_71_pred;
                _3143 = frontier_phi_71_pred_1;
                _3141 = frontier_phi_71_pred_2;
                _3139 = frontier_phi_71_pred_3;
                _3137 = frontier_phi_71_pred_4;
                _3135 = frontier_phi_71_pred_5;
                uint _3294 = _3293 + 1u;
                if (_3294 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3287 = _3135;
                    _3288 = _3137;
                    _3289 = _3139;
                    _3290 = _3141;
                    _3291 = _3143;
                    _3292 = _3145;
                    _3293 = _3294;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
        }
        uvec4 _3148 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3149 = _3148.z;
        uint _3151 = (_3149 >> 8u) & 15u;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        float _3265;
        if (((4294967295u << _3151) & _3054) == 0u)
        {
            _3255 = _3134;
            _3257 = _3136;
            _3259 = _3138;
            _3261 = _3140;
            _3263 = _3142;
            _3265 = _3144;
        }
        else
        {
            float _3280 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
            float _3281 = _3280 * _2113;
            float _3282 = _3280 * _2114;
            float _3283 = _3280 * _2115;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3151 < ((_3149 >> 12u) & 15u))
            {
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3264;
                float _3266;
                float _3415 = _3134;
                float _3416 = _3136;
                float _3417 = _3138;
                float _3418 = _3140;
                float _3419 = _3142;
                float _3420 = _3144;
                uint _3421 = _3151;
                uint _3430;
                bool _3431;
                for (;;)
                {
                    _3430 = texelFetch(g_lightClassification, int((((_3048 << 5u) + (_3034 << 9u)) + (_3421 << 2u)) >> 2u)).x;
                    _3431 = _3430 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3431)
                    {
                        frontier_phi_82_pred = _3420;
                        frontier_phi_82_pred_1 = _3419;
                        frontier_phi_82_pred_2 = _3418;
                        frontier_phi_82_pred_3 = _3417;
                        frontier_phi_82_pred_4 = _3416;
                        frontier_phi_82_pred_5 = _3415;
                    }
                    else
                    {
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3636 = _3415;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        float _3639 = _3418;
                        float _3640 = _3419;
                        float _3641 = _3420;
                        uint _3642 = _3430;
                        uint _3643;
                        vec4 _3668;
                        float _3669;
                        vec4 _3684;
                        vec3 _3696;
                        vec4 _3711;
                        vec4 _3727;
                        float _3773;
                        bool _3774;
                        for (;;)
                        {
                            uint _3653 = ((_3421 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3642));
                            _3643 = (_3642 + 4294967295u) & _3642;
                            uint _3655 = _3653 * 40u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            _3669 = _3668.w;
                            uint _3671 = (_3653 * 40u) + 4u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3686 = (_3653 * 40u) + 8u;
                            _3696 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x));
                            uint _3698 = (_3653 * 40u) + 16u;
                            _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            uint _3714 = (_3653 * 40u) + 20u;
                            _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            uint _3729 = (_3653 * 40u) + 24u;
                            vec4 _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            uint _3748 = (_3653 * 40u) + 28u;
                            vec4 _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            _3773 = fma(_2115, _3761.z, fma(_2114, _3761.y, _3761.x * _2113)) + _3761.w;
                            _3774 = !((fma(_2115, _3742.z, fma(_2114, _3742.y, _3742.x * _2113)) + _3742.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3774)
                            {
                                float _3801 = _3668.x - _2113;
                                float _3802 = _3668.y - _2114;
                                float _3803 = _3668.z - _2115;
                                float _3804 = dot(vec3(_3801, _3802, _3803), vec3(_3801, _3802, _3803));
                                float _3807 = inversesqrt(_3804);
                                float _3808 = _3807 * _3801;
                                float _3809 = _3807 * _3802;
                                float _3810 = _3807 * _3803;
                                float _3814 = 1.0 - (_3804 / (_3669 * _3669));
                                float _5024 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                                float _3819 = sqrt(_3804) * _3684.w;
                                float _3821 = 1.39999997615814208984375 / (_3819 + 1.39999997615814208984375);
                                float _3822 = _3821 * _3821;
                                float _3825 = ((1.0 - _3822) * dot(vec3(_3808, _3809, _3810), vec3(_949, _952, _955))) + _3822;
                                float _3828 = _3819 * _3819;
                                float _3832 = (fma(_2115, _3711.z, fma(_2114, _3711.y, _3711.x * _2113)) + _3711.w) / _3773;
                                float _3833 = (fma(_2115, _3727.z, fma(_2114, _3727.y, _3727.x * _2113)) + _3727.w) / _3773;
                                float _3837 = 1.0 - dot(vec2(_3832, _3833), vec2(_3832, _3833));
                                float _5040 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3838 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3839 = _3838 * (((isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0))) * _3815) / ((_3828 * 0.699999988079071044921875) + 1.0));
                                float _3851 = exp2(log2(1.0 / ((_3828 * 3.5) + 5.0)) * 0.25);
                                float _3852 = 1.0 - _1024;
                                float _3859 = sqrt(1.0 - ((1.0 - (_3852 * _3852)) * (1.0 - (_3851 * _3851))));
                                float _3860 = _3859 * _3859;
                                float _3861 = _3860 * _3860;
                                float _3862 = _3808 - _3281;
                                float _3863 = _3809 - _3282;
                                float _3864 = _3810 - _3283;
                                float _3868 = inversesqrt(dot(vec3(_3862, _3863, _3864), vec3(_3862, _3863, _3864)));
                                float _3872 = dot(vec3(_949, _952, _955), vec3((-0.0) - _3281, (-0.0) - _3282, (-0.0) - _3283));
                                float _5051 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3875 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                                float _3876 = dot(vec3(_949, _952, _955), vec3(_3868 * _3862, _3868 * _3863, _3868 * _3864));
                                float _5062 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3879 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                                float _3883 = ((_3879 * _3879) * (_3861 + (-1.0))) + 1.0;
                                float _3884 = _3821 * _3860;
                                float _3885 = _3884 * _3884;
                                float _3891 = ((1.0 - _3885) * dot(vec3(_949, _952, _955), vec3(_3808, _3809, _3810))) + _3885;
                                float _5073 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3892 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                                float _3893 = 1.0 - _3860;
                                float _3903 = (0.5 / (((_3892 * ((_3875 * _3893) + _3860)) + 9.9999999392252902907785028219223e-09) + (((_3892 * _3893) + _3860) * _3875))) * _3892;
                                float _5084 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3913 = (_3838 * _3815) * (((_3861 * 3.1415927410125732421875) * (isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0)))) / ((_3883 * _3883) * ((_3828 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3839 * _3684.z;
                                frontier_phi_88_pred_1 = _3839 * _3684.y;
                                frontier_phi_88_pred_2 = _3839 * _3684.x;
                                frontier_phi_88_pred_3 = _3913 * _3696.z;
                                frontier_phi_88_pred_4 = _3913 * _3696.y;
                                frontier_phi_88_pred_5 = _3913 * _3696.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3922 = frontier_phi_88_pred;
                            _3921 = frontier_phi_88_pred_1;
                            _3920 = frontier_phi_88_pred_2;
                            _3919 = frontier_phi_88_pred_3;
                            _3918 = frontier_phi_88_pred_4;
                            _3917 = frontier_phi_88_pred_5;
                            _3626 = _3920 + _3639;
                            _3627 = _3921 + _3640;
                            _3628 = _3922 + _3641;
                            _3623 = _3917 + _3636;
                            _3624 = _3918 + _3637;
                            _3625 = _3919 + _3638;
                            if (_3643 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3643;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3628;
                        frontier_phi_82_pred_1 = _3627;
                        frontier_phi_82_pred_2 = _3626;
                        frontier_phi_82_pred_3 = _3625;
                        frontier_phi_82_pred_4 = _3624;
                        frontier_phi_82_pred_5 = _3623;
                    }
                    _3266 = frontier_phi_82_pred;
                    _3264 = frontier_phi_82_pred_1;
                    _3262 = frontier_phi_82_pred_2;
                    _3260 = frontier_phi_82_pred_3;
                    _3258 = frontier_phi_82_pred_4;
                    _3256 = frontier_phi_82_pred_5;
                    uint _3422 = _3421 + 1u;
                    if (_3422 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3415 = _3256;
                        _3416 = _3258;
                        _3417 = _3260;
                        _3418 = _3262;
                        _3419 = _3264;
                        _3420 = _3266;
                        _3421 = _3422;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3262;
                frontier_phi_63_64_ladder_1 = _3266;
                frontier_phi_63_64_ladder_2 = _3264;
                frontier_phi_63_64_ladder_3 = _3260;
                frontier_phi_63_64_ladder_4 = _3258;
                frontier_phi_63_64_ladder_5 = _3256;
            }
            else
            {
                frontier_phi_63_64_ladder = _3140;
                frontier_phi_63_64_ladder_1 = _3144;
                frontier_phi_63_64_ladder_2 = _3142;
                frontier_phi_63_64_ladder_3 = _3138;
                frontier_phi_63_64_ladder_4 = _3136;
                frontier_phi_63_64_ladder_5 = _3134;
            }
            _3255 = frontier_phi_63_64_ladder_5;
            _3257 = frontier_phi_63_64_ladder_4;
            _3259 = frontier_phi_63_64_ladder_3;
            _3261 = frontier_phi_63_64_ladder;
            _3263 = frontier_phi_63_64_ladder_2;
            _3265 = frontier_phi_63_64_ladder_1;
        }
        float _3270 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
        _3067 = (_3270 * _3261) + _2579;
        _3069 = (_3270 * _3263) + _2581;
        _3071 = (_3270 * _3265) + _2583;
        _3073 = ((_3255 * _992) * _3270) + _2917;
        _3075 = ((_3257 * _994) * _3270) + _2919;
        _3077 = ((_3259 * _995) * _3270) + _2921;
    }
    else
    {
        _3067 = _2579;
        _3069 = _2581;
        _3071 = _2583;
        _3073 = _2917;
        _3075 = _2919;
        _3077 = _2921;
    }
    float _5100 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _5111 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _5122 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _3094 = ((isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0))) * (_3067 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1008))) + ((_3073 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    float _3095 = ((isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0))) * (_3069 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1008))) + ((_3075 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    float _3096 = ((isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0))) * (_3071 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1008))) + ((_3077 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1847)) * cbPerFrame._m0[3u].x);
    uint _3097 = _263 + 6u;
    float _3105 = _930 / cbSceneParam._m0[86u].x;
    float _3106 = _931 / cbSceneParam._m0[86u].y;
    vec4 _3120 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3105, _3106, (log2((isnan(cbSceneParam._m0[77u].w) ? _853 : (isnan(_853) ? cbSceneParam._m0[77u].w : min(_853, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3122 = _3120.x;
    float _3123 = _3120.y;
    float _3124 = _3120.z;
    float _3125 = _3120.w;
    float _3197;
    float _3199;
    float _3201;
    float _3203;
    if (_853 > cbSceneParam._m0[78u].w)
    {
        float _3159 = isnan(_853) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _853 : min(cbSceneParam._m0[80u].w, _853));
        float _3160 = _3159 / _853;
        float _3171 = _3160 * _903;
        float _3172 = _904 * _3160;
        float _3173 = (-0.0) - _3172;
        float _3175 = _3160 * _905;
        float _3177 = (cbSceneParam._m0[77u].w * _3173) / _3159;
        float _3178 = _3177 + cbSceneParam._m0[79u].w;
        float _3179 = cbSceneParam._m0[79u].w - _3172;
        float _3185 = sqrt(((_3171 * _3171) + (_3172 * _3172)) + (_3175 * _3175));
        float _3188 = (1.0 - (cbSceneParam._m0[77u].w / _3159)) * _3185;
        float _3193 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3195 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3372;
        if (abs((_3173 - _3177) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3372 = ((((_3178 > 0.0) ? exp2(_3193 * _3178) : (2.0 - exp2(_3195 * _3178))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3188;
        }
        else
        {
            float _3316 = 1.0 / cbSceneParam._m0[80u].x;
            float _3317 = isnan(_3179) ? _3178 : (isnan(_3178) ? _3179 : max(_3178, _3179));
            float _3318 = isnan(_3179) ? _3178 : (isnan(_3178) ? _3179 : min(_3178, _3179));
            float _3327 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : min(_3317, 0.0));
            float _3328 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : min(_3318, 0.0));
            _3372 = ((abs(_3185 / _3173) * cbSceneParam._m0[80u].y) * ((((_3327 - _3328) * 2.0) - ((exp2(_3193 * (isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0)))) - exp2(_3193 * (isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0))))) * _3316)) - ((exp2(_3195 * _3327) - exp2(_3195 * _3328)) * _3316))) + (_3188 * cbSceneParam._m0[80u].z);
        }
        vec4 _3374 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3105, _3106, 1.0), 0.0);
        float _3383 = exp2((_3372 * (-1.44269502162933349609375)) * (1.0 - _3374.w));
        float _3384 = log2(_3383);
        float _3400 = log2(_3125);
        _3197 = (exp2(_3400 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3384 * cbSceneParam._m0[78u].x)) * _3374.x) / cbSceneParam._m0[78u].x)) + _3122;
        _3199 = (exp2(_3400 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3384 * cbSceneParam._m0[78u].y)) * _3374.y) / cbSceneParam._m0[78u].y)) + _3123;
        _3201 = (exp2(_3400 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3384 * cbSceneParam._m0[78u].z)) * _3374.z) / cbSceneParam._m0[78u].z)) + _3124;
        _3203 = _3383 * _3125;
    }
    else
    {
        _3197 = _3122;
        _3199 = _3123;
        _3201 = _3124;
        _3203 = _3125;
    }
    bool _3410;
    vec4 _3213;
    vec4 _3235;
    float _3237;
    float _3241;
    float _3242;
    float _3243;
    float _3244;
    bool _3254;
    for (;;)
    {
        _3213 = cbMatDynParam._m0[0u];
        float _3215 = roundEven(_3213.y);
        bool _3216 = _3215 == 3.0;
        float _3217 = log2(_3203);
        float _3224 = exp2(_3217 * cbSceneParam._m0[78u].x) * _3094;
        float _3225 = exp2(_3217 * cbSceneParam._m0[78u].y) * _3095;
        float _3226 = exp2(_3217 * cbSceneParam._m0[78u].z) * _3096;
        float _3233 = _919 + (-0.5);
        _3235 = cbMtdParam._m0[1u];
        _3237 = _3235.y * _3233;
        float _3240 = (_3215 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3241 = _3240 * (_3216 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3197)));
        _3242 = _3240 * (_3216 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3199)));
        _3243 = _3240 * (_3216 ? _3226 : (_3226 + (cbSceneParam._m0[72u].w * _3201)));
        _3244 = _3233 * 0.999000012874603271484375;
        _3254 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3254)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3244) < 0.5)
            {
                _3410 = true;
                break;
            }
        }
        uint _3351 = _968 + uint(_3213.w);
        if ((cbInstanceData._m0[_3351].w < 1.0) && ((cbInstanceData._m0[_3351].w + _3244) < 0.5))
        {
            _3410 = true;
            break;
        }
        if ((_3237 + 1.0) < _3235.x)
        {
            _3410 = true;
            break;
        }
        _3410 = false;
        break;
    }
    float _3614;
    if (_3410)
    {
        discard_state = true;
        _3614 = 0.0;
    }
    else
    {
        _3614 = cbInstanceData._m0[_3097].w;
    }
    SV_Target.x = _3241;
    SV_Target.y = _3242;
    SV_Target.z = _3243;
    SV_Target.w = _3614;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3097].w;
    discard_exit();
}


