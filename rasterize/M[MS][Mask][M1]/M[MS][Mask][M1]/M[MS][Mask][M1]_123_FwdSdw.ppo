#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1547;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4154 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4165 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4176 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _348 = _343.x * cbMtdParam._m0[11u].x;
    float _349 = _343.y * cbMtdParam._m0[11u].y;
    float _350 = _343.z * cbMtdParam._m0[11u].z;
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _388.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[23u].w) + _437) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4187 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _462 = (_455 * ((_369.x * cbMtdParam._m0[12u].x) - _348)) + _348;
    float _463 = (_455 * ((_369.y * cbMtdParam._m0[12u].y) - _349)) + _349;
    float _464 = (_455 * ((_369.z * cbMtdParam._m0[12u].z) - _350)) + _350;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _388.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[23u].w) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4198 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _305) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _306) + cbTextureTilingScale._m0[24u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _575 = _573.x;
    float _585 = dot(vec4(_575, _573.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _597 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _388.z) * 2.0) - ((((_575 - _585) * cbMtdParam._m0[23u].w) + _585) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4209 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _605 = (_598 * ((_556.x * cbMtdParam._m0[14u].x) - _535)) + _535;
    float _606 = (_598 * ((_556.y * cbMtdParam._m0[14u].y) - _536)) + _536;
    float _607 = (_598 * ((_556.z * cbMtdParam._m0[14u].z) - _537)) + _537;
    float _611 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _605;
    float _614 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _606;
    float _617 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _607;
    float _624 = ((_605 - _611) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) + _611;
    float _625 = ((_606 - _614) * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) + _614;
    float _626 = ((_607 - _617) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) + _617;
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _687 = _685.x;
    float _688 = _685.y;
    float _689 = _685.z;
    float _696 = ((_668.x - _687) * _455) + _687;
    float _697 = ((_668.y - _688) * _455) + _688;
    float _698 = ((_668.z - _689) * _455) + _689;
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _721 = ((_710.x - _696) * _528) + _696;
    float _722 = ((_710.y - _697) * _528) + _697;
    float _723 = ((_710.z - _698) * _528) + _698;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _305) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _306) + cbTextureTilingScale._m0[23u].w));
    float _748 = ((_735.z - _723) * _598) + _723;
    float _751 = ((((_735.x - _721) * _598) + _721) * 2.0) + (-1.0);
    float _752 = ((((_735.y - _722) * _598) + _722) * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _4220 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _758 = sqrt(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))));
    vec4 _776 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _788 = (_751 + ((((_643.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_776.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _789 = (_752 + ((((_643.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_776.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _792 = fma(_758, _253, fma(_789, _260, _788 * _246));
    float _795 = fma(_758, _254, fma(_789, _261, _788 * _247));
    float _798 = fma(_758, _255, fma(_789, _262, _788 * _248));
    float _802 = inversesqrt(dot(vec3(_792, _795, _798), vec3(_792, _795, _798)));
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _831 = _829.x;
    float _832 = 1.0 - _831;
    float _840 = (cbMtdParam._m0[19u].x + dot(vec4(_802 * _792, _802 * _795, _802 * _798, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_831 - _832) * cbMtdParam._m0[24u].z) + _832) * cbMtdParam._m0[21u].z);
    float _4231 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _841 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _848 = (_841 * (cbMtdParam._m0[17u].x - _624)) + _624;
    float _849 = (_841 * (cbMtdParam._m0[17u].y - _625)) + _625;
    float _850 = (_841 * (cbMtdParam._m0[17u].z - _626)) + _626;
    vec4 _876 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _878 = _876.x;
    float _896 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _878) * _455) + _878;
    float _913 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _896) * _528) + _896;
    float _931 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w)).x - _913) * _598) + _913;
    float _935 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _931) * cbMtdParam._m0[19u].z) + _931;
    float _937 = _935 - (_935 * _841);
    float _942 = (((_643.z - _748) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _748;
    float _946 = ((_776.z - _942) * cbMtdParam._m0[19u].w) + _942;
    vec4 _959 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _966 = (_959.x * 2.0) + (-1.0);
    float _967 = (_959.y * 2.0) + (-1.0);
    float _968 = dot(vec2(_966, _967), vec2(_966, _967));
    float _4242 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _976 = ((_959.z - _946) * _841) + _946;
    float _986 = ((sqrt(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) - _758) * _841) + _758;
    float _989 = (((_966 - _788) * _841) + _788) + (cbMtdParam._m0[21u].x * _788);
    float _990 = (((_967 - _789) * _841) + _789) + (cbMtdParam._m0[21u].x * _789);
    float _994 = cbMtdParam._m0[22u].x + _776.w;
    float _997 = fma(_986, _253, fma(_990, _260, _989 * _246));
    float _1000 = fma(_986, _254, fma(_990, _261, _989 * _247));
    float _1003 = fma(_986, _255, fma(_990, _262, _989 * _248));
    float _1007 = inversesqrt(dot(vec3(_997, _1000, _1003), vec3(_997, _1000, _1003)));
    float _1008 = _1007 * _997;
    float _1009 = _1007 * _1000;
    float _1010 = _1007 * _1003;
    float _4253 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _1011 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _4264 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _4275 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4286 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4297 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4308 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _1016 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _1030 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1080 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1070);
    float _1081 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1070);
    float _1082 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1070);
    float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
    float _1087 = _1080 * _1086;
    float _1088 = _1081 * _1086;
    float _1089 = _1082 * _1086;
    float _1095 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1096 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1114 = fma(_1010, cbSceneParam._m0[5u].z, fma(_1009, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1008));
    float _1117 = fma(_1010, cbSceneParam._m0[6u].z, fma(_1009, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1008));
    float _1120 = fma(_1010, cbSceneParam._m0[7u].z, fma(_1009, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1008));
    uint _1134 = (_286 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1140 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * cbInstanceData._m0[_1134].x;
    float _1141 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * cbInstanceData._m0[_1134].y;
    float _1142 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * cbInstanceData._m0[_1134].z;
    float _4319 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1143 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _4330 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _4341 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1145 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _1146 = 1.0 - _1016;
    float _1147 = _1143 * _1146;
    float _1148 = _1144 * _1146;
    float _1149 = _1145 * _1146;
    float _1154 = (_1143 + (-0.039999999105930328369140625)) * _1016;
    float _1155 = (_1144 + (-0.039999999105930328369140625)) * _1016;
    float _1156 = (_1145 + (-0.039999999105930328369140625)) * _1016;
    float _1157 = _1154 + 0.039999999105930328369140625;
    float _1159 = _1155 + 0.039999999105930328369140625;
    float _1160 = _1156 + 0.039999999105930328369140625;
    vec4 _1169 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1095, cbSceneParam._m0[86u].y * _1096));
    float _1173 = ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * TEXCOORD_5.w) * _1169.x;
    float _1174 = dot(vec3(_1008, _1009, _1010), vec3(_1087, _1088, _1089));
    float _1177 = _1174 * 2.0;
    float _1181 = (_1177 * _1008) - _1087;
    float _1182 = (_1177 * _1009) - _1088;
    float _1183 = (_1177 * _1010) - _1089;
    float _1187 = abs(dot(vec3(_1087, _1088, _1089), vec3(_1008, _1009, _1010)));
    float _4352 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1189 = sqrt(_1011);
    float _1202 = exp2((_1189 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1189 * 3.0));
    float _1208 = (1.0 - _1202) * ((_1189 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1209 = _1202 * _1189;
    float _1237 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1241 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1245 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1546;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1271 = fma(_1245, cbModelParam._m0[26u].z, fma(_1241, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1237));
        float _1275 = fma(_1245, cbModelParam._m0[27u].z, fma(_1241, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1237));
        float _1279 = fma(_1245, cbModelParam._m0[28u].z, fma(_1241, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1237));
        float _1304 = _1237 + _1008;
        float _1305 = _1241 + _1009;
        float _1306 = _1245 + _1010;
        float _1316 = fma(_1306, cbModelParam._m0[26u].z, fma(_1305, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1304)) - _1271;
        float _1317 = fma(_1306, cbModelParam._m0[27u].z, fma(_1305, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1304)) - _1275;
        float _1318 = fma(_1306, cbModelParam._m0[28u].z, fma(_1305, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1304)) - _1279;
        float _1322 = inversesqrt(dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318)));
        float _1335 = ((_1322 * _1316) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1271 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1322 * _1317) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1275 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1322 * _1318) / cbModelParam._m0[34u].z) + ((((((_1279 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        float _1374 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1340.x + (-0.5));
        float _1376 = _1374 * (_1340.y + (-0.5));
        float _1377 = _1374 * (_1340.z + (-0.5));
        float _1384 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1347.x + (-0.5));
        float _1386 = _1384 * (_1347.y + (-0.5));
        float _1387 = _1384 * (_1347.z + (-0.5));
        float _1394 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1354.x + (-0.5));
        float _1396 = _1394 * (_1354.y + (-0.5));
        float _1397 = _1394 * (_1354.z + (-0.5));
        float _1404 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1361.x + (-0.5));
        float _1406 = _1404 * (_1361.y + (-0.5));
        float _1407 = _1404 * (_1361.z + (-0.5));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = _1375 * 0.5;
        float _1412 = _1385 * 0.5;
        float _1413 = _1395 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1428 = (dot(vec3(_1008, _1009, _1010), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1438 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4400 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1440 + 1.0))) + _1445) * _1408;
        float _1455 = _1376 * 0.5;
        float _1456 = _1386 * 0.5;
        float _1457 = _1396 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_1008, _1009, _1010), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4433 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1482 + 1.0))) + _1487) * _1409;
        float _1497 = _1377 * 0.5;
        float _1498 = _1387 * 0.5;
        float _1499 = _1397 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_1008, _1009, _1010), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4466 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1524 + 1.0))) + _1529) * _1410;
        _1546 = _1377;
        _1548 = _1376;
        _1549 = _1375;
        _1550 = _1387;
        _1551 = _1386;
        _1552 = _1385;
        _1553 = _1397;
        _1554 = _1396;
        _1555 = _1395;
        _1556 = _1410;
        _1557 = _1409;
        _1558 = _1408;
        _1559 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1560 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1561 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1547;
        _1548 = _1547;
        _1549 = _1547;
        _1550 = _1547;
        _1551 = _1547;
        _1552 = _1547;
        _1553 = _1547;
        _1554 = _1547;
        _1555 = _1547;
        _1556 = _1547;
        _1557 = _1547;
        _1558 = _1547;
        _1559 = 0.0;
        _1560 = 0.0;
        _1561 = 0.0;
    }
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1584 = fma(_1245, cbModelParam._m0[30u].z, fma(_1241, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237));
        float _1588 = fma(_1245, cbModelParam._m0[31u].z, fma(_1241, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237));
        float _1592 = fma(_1245, cbModelParam._m0[32u].z, fma(_1241, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237));
        float _1615 = _1237 + _1008;
        float _1616 = _1241 + _1009;
        float _1617 = _1245 + _1010;
        float _1627 = fma(_1617, cbModelParam._m0[30u].z, fma(_1616, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1615)) - _1584;
        float _1628 = fma(_1617, cbModelParam._m0[31u].z, fma(_1616, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1615)) - _1588;
        float _1629 = fma(_1617, cbModelParam._m0[32u].z, fma(_1616, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1615)) - _1592;
        float _1633 = inversesqrt(dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629)));
        float _1646 = ((_1633 * _1627) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1584 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1647 = ((_1633 * _1628) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1588 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1648 = ((_1633 * _1629) / cbModelParam._m0[35u].z) + ((((((_1592 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        vec4 _1671 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        float _1683 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1650.x + (-0.5));
        float _1685 = _1683 * (_1650.y + (-0.5));
        float _1686 = _1683 * (_1650.z + (-0.5));
        float _1693 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1657.x + (-0.5));
        float _1695 = _1693 * (_1657.y + (-0.5));
        float _1696 = _1693 * (_1657.z + (-0.5));
        float _1703 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1664.x + (-0.5));
        float _1705 = _1703 * (_1664.y + (-0.5));
        float _1706 = _1703 * (_1664.z + (-0.5));
        float _1713 = exp2((_1671.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1671.x + (-0.5));
        float _1715 = _1713 * (_1671.y + (-0.5));
        float _1716 = _1713 * (_1671.z + (-0.5));
        float _1717 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1718 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1719 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1720 = _1684 * 0.5;
        float _1721 = _1694 * 0.5;
        float _1722 = _1704 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_1008, _1009, _1010), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4507 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1717 + 9.9999997473787516355514526367188e-06);
        float _4518 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4529 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_1747 + 1.0))) + _1752) * _1717;
        float _1762 = _1685 * 0.5;
        float _1763 = _1695 * 0.5;
        float _1764 = _1705 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_1008, _1009, _1010), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4540 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1718 + 9.9999997473787516355514526367188e-06);
        float _4551 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4562 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_1789 + 1.0))) + _1794) * _1718;
        float _1804 = _1686 * 0.5;
        float _1805 = _1696 * 0.5;
        float _1806 = _1706 * 0.5;
        float _1807 = dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806));
        float _1812 = (_1807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1807);
        float _1820 = (dot(vec3(_1008, _1009, _1010), vec3(_1812 * _1804, _1812 * _1805, _1812 * _1806)) + 1.0) * 0.5;
        float _4573 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1829 = sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806)) / (_1719 + 9.9999997473787516355514526367188e-06);
        float _4584 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1831 = _1830 * 2.0;
        float _1835 = (1.0 - _1830) / (_1830 + 1.0);
        float _4595 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _1845 = ((((1.0 - _1836) * (_1831 + 2.0)) * exp2(log2(isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_1831 + 1.0))) + _1836) * _1719;
        _1853 = _1686;
        _1854 = _1685;
        _1855 = _1684;
        _1856 = _1696;
        _1857 = _1695;
        _1858 = _1694;
        _1859 = _1706;
        _1860 = _1705;
        _1861 = _1704;
        _1862 = _1719;
        _1863 = _1718;
        _1864 = _1717;
        _1865 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1866 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
        _1867 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)));
    }
    else
    {
        _1853 = _1547;
        _1854 = _1547;
        _1855 = _1547;
        _1856 = _1547;
        _1857 = _1547;
        _1858 = _1547;
        _1859 = _1547;
        _1860 = _1547;
        _1861 = _1547;
        _1862 = _1547;
        _1863 = _1547;
        _1864 = _1547;
        _1865 = 0.0;
        _1866 = 0.0;
        _1867 = 0.0;
    }
    float _1877 = (cbModelParam._m0[1u].x * (_1865 - _1559)) + _1559;
    float _1878 = (cbModelParam._m0[1u].x * (_1866 - _1560)) + _1560;
    float _1879 = (cbModelParam._m0[1u].x * (_1867 - _1561)) + _1561;
    float _1900 = fma(_1879, cbSceneParam._m0[89u].z, fma(_1878, cbSceneParam._m0[89u].y, _1877 * cbSceneParam._m0[89u].x));
    float _1903 = fma(_1879, cbSceneParam._m0[90u].z, fma(_1878, cbSceneParam._m0[90u].y, _1877 * cbSceneParam._m0[90u].x));
    float _1906 = fma(_1879, cbSceneParam._m0[91u].z, fma(_1878, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1877));
    float _1921 = _1181 * 0.5;
    float _1922 = _1182 * 0.5;
    float _1923 = _1183 * 0.5;
    float _1924 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1855, _1858, _1861, _1864));
    float _1927 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1854, _1857, _1860, _1863));
    float _1930 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1853, _1856, _1859, _1862));
    float _1964;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1937 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1546, _1550, _1553, _1556));
        float _1941 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1548, _1551, _1554, _1557));
        float _1945 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1549, _1552, _1555, _1558));
        float _1952 = dot(vec4(cbModelParam._m0[39u]), vec4(_1921, _1922, _1923, 1.0));
        _1964 = dot(vec3(isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)), isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1952) ? 0.0 : (isnan(0.0) ? _1952 : max(0.0, _1952))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1964 = 1.0;
    }
    float _1975;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1966 = dot(vec4(cbModelParam._m0[40u]), vec4(_1921, _1922, _1923, 1.0));
        _1975 = dot(vec3(isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1966) ? 0.0 : (isnan(0.0) ? _1966 : max(0.0, _1966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1975 = 1.0;
    }
    float _1979 = (_1975 * cbModelParam._m0[1u].x) + (_1964 * (1.0 - cbModelParam._m0[1u].x));
    float _1989 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1011);
    float _1990 = isnan(_1989) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1989 : min(cbModelParam._m0[25u].z, _1989));
    float _2070;
    float _2072;
    float _2074;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2037 = fma(_1245, cbModelParam._m0[13u].z, fma(_1241, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1237)) + cbModelParam._m0[13u].w;
        float _2041 = fma(_1245, cbModelParam._m0[14u].z, fma(_1241, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1237)) + cbModelParam._m0[14u].w;
        float _2045 = fma(_1245, cbModelParam._m0[15u].z, fma(_1241, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1237)) + cbModelParam._m0[15u].w;
        float _2048 = fma(_1183, cbModelParam._m0[13u].z, fma(_1182, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1181));
        float _2051 = fma(_1183, cbModelParam._m0[14u].z, fma(_1182, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1181));
        float _2054 = fma(_1183, cbModelParam._m0[15u].z, fma(_1182, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1181));
        float _2082;
        if (_2048 > 0.0)
        {
            _2082 = abs((1.0 - _2037) / _2048);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2037 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2082 = frontier_phi_14_12_ladder;
        }
        float _2254;
        if (_2051 > 0.0)
        {
            _2254 = abs((1.0 - _2041) / _2051);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2041 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2254 = frontier_phi_23_19_ladder;
        }
        float _2549;
        if (_2054 > 0.0)
        {
            _2549 = abs((1.0 - _2045) / _2054);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2045 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2549 = frontier_phi_35_30_ladder;
        }
        float _2551 = isnan(_2254) ? _2082 : (isnan(_2082) ? _2254 : min(_2082, _2254));
        float _2552 = isnan(_2549) ? _2551 : (isnan(_2551) ? _2549 : min(_2551, _2549));
        float _2556 = (_2552 * _2048) + _2037;
        float _2557 = (_2552 * _2051) + _2041;
        float _2558 = (_2552 * _2054) + _2045;
        float _2559 = _2552 * 9.9999997473787516355514526367188e-05;
        float _2561 = (-1.0) - _2559;
        float _2563 = _2559 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2558 > _2563) || ((_2558 < _2561) || ((_2557 > _2563) || ((_2557 < _2561) || ((_2556 < _2561) || (_2556 > _2563))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2558, cbModelParam._m0[9u].z, fma(_2557, cbModelParam._m0[9u].y, _2556 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2558, cbModelParam._m0[10u].z, fma(_2557, cbModelParam._m0[10u].y, _2556 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2558, cbModelParam._m0[11u].z, fma(_2557, cbModelParam._m0[11u].y, _2556 * cbModelParam._m0[11u].x))), _1990);
            frontier_phi_13_35_ladder = _2703.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2703.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2703.x * cbModelParam._m0[1u].y;
        }
        _2070 = frontier_phi_13_35_ladder_2;
        _2072 = frontier_phi_13_35_ladder_1;
        _2074 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2058 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1181, _1182, _1183), _1990);
        _2070 = _2058.x * cbModelParam._m0[1u].y;
        _2072 = _2058.y * cbModelParam._m0[1u].y;
        _2074 = _2058.z * cbModelParam._m0[1u].y;
    }
    float _2078 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1011);
    float _2079 = isnan(_2078) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2078 : min(cbModelParam._m0[25u].w, _2078));
    float _2169;
    float _2171;
    float _2173;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2133 = fma(_1245, cbModelParam._m0[21u].z, fma(_1241, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1237)) + cbModelParam._m0[21u].w;
        float _2137 = fma(_1245, cbModelParam._m0[22u].z, fma(_1241, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1237)) + cbModelParam._m0[22u].w;
        float _2141 = fma(_1245, cbModelParam._m0[23u].z, fma(_1241, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1237)) + cbModelParam._m0[23u].w;
        float _2144 = fma(_1183, cbModelParam._m0[21u].z, fma(_1182, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1181));
        float _2147 = fma(_1183, cbModelParam._m0[22u].z, fma(_1182, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1181));
        float _2150 = fma(_1183, cbModelParam._m0[23u].z, fma(_1182, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1181));
        float _2259;
        if (_2144 > 0.0)
        {
            _2259 = abs((1.0 - _2133) / _2144);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2144 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2133 + 1.0) / _2144);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2259 = frontier_phi_25_21_ladder;
        }
        float _2576;
        if (_2147 > 0.0)
        {
            _2576 = abs((1.0 - _2137) / _2147);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2147 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2137 + 1.0) / _2147);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2576 = frontier_phi_37_32_ladder;
        }
        float _2914;
        if (_2150 > 0.0)
        {
            _2914 = abs((1.0 - _2141) / _2150);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2150 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2141 + 1.0) / _2150);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2914 = frontier_phi_47_44_ladder;
        }
        float _2916 = isnan(_2576) ? _2259 : (isnan(_2259) ? _2576 : min(_2259, _2576));
        float _2917 = isnan(_2914) ? _2916 : (isnan(_2916) ? _2914 : min(_2916, _2914));
        float _2921 = (_2917 * _2144) + _2133;
        float _2922 = (_2917 * _2147) + _2137;
        float _2923 = (_2917 * _2150) + _2141;
        float _2924 = _2917 * 9.9999997473787516355514526367188e-05;
        float _2925 = (-1.0) - _2924;
        float _2927 = _2924 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2923 > _2927) || ((_2923 < _2925) || ((_2922 > _2927) || ((_2922 < _2925) || ((_2921 < _2925) || (_2921 > _2927))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3045 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2923, cbModelParam._m0[17u].z, fma(_2922, cbModelParam._m0[17u].y, _2921 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2923, cbModelParam._m0[18u].z, fma(_2922, cbModelParam._m0[18u].y, _2921 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2923, cbModelParam._m0[19u].z, fma(_2922, cbModelParam._m0[19u].y, _2921 * cbModelParam._m0[19u].x))), _2079);
            frontier_phi_22_47_ladder = _3045.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3045.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3045.x * cbModelParam._m0[1u].z;
        }
        _2169 = frontier_phi_22_47_ladder_2;
        _2171 = frontier_phi_22_47_ladder_1;
        _2173 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2153 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1181, _1182, _1183), _2079);
        _2169 = _2153.x * cbModelParam._m0[1u].z;
        _2171 = _2153.y * cbModelParam._m0[1u].z;
        _2173 = _2153.z * cbModelParam._m0[1u].z;
    }
    float _2186 = (((_1208 * _1157) + _1209) * _1173) * ((cbModelParam._m0[1u].w * (_2169 - _2070)) + _2070);
    float _2188 = (((_1208 * _1159) + _1209) * _1173) * ((cbModelParam._m0[1u].w * (_2171 - _2072)) + _2072);
    float _2190 = (((_1208 * _1160) + _1209) * _1173) * ((cbModelParam._m0[1u].w * (_2173 - _2074)) + _2074);
    float _2193 = fma(_2190, cbSceneParam._m0[89u].z, fma(_2188, cbSceneParam._m0[89u].y, _2186 * cbSceneParam._m0[89u].x));
    float _2196 = fma(_2190, cbSceneParam._m0[90u].z, fma(_2188, cbSceneParam._m0[90u].y, _2186 * cbSceneParam._m0[90u].x));
    float _2199 = fma(_2190, cbSceneParam._m0[91u].z, fma(_2188, cbSceneParam._m0[91u].y, _2186 * cbSceneParam._m0[91u].x));
    float _2233 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2237 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2241 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2245 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2246 = _2233 / _2245;
    float _2247 = _2237 / _2245;
    float _2248 = _2241 / _2245;
    float _2395;
    float _2396;
    float _2397;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2275 = ((uint(_2248 > cbSceneParam._m0[59u].y) + uint(_2248 > cbSceneParam._m0[59u].x)) + uint(_2248 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2276 = _2275 + 43u;
        uint _2284 = _2275 + 44u;
        uint _2292 = _2275 + 45u;
        uint _2300 = _2275 + 46u;
        float _2311 = fma(_2245, cbSceneParam._m0[_2276].w, fma(_2241, cbSceneParam._m0[_2276].z, fma(_2237, cbSceneParam._m0[_2276].y, _2233 * cbSceneParam._m0[_2276].x)));
        float _2315 = fma(_2245, cbSceneParam._m0[_2284].w, fma(_2241, cbSceneParam._m0[_2284].z, fma(_2237, cbSceneParam._m0[_2284].y, _2233 * cbSceneParam._m0[_2284].x)));
        float _2323 = fma(_2245, cbSceneParam._m0[_2300].w, fma(_2241, cbSceneParam._m0[_2300].z, fma(_2237, cbSceneParam._m0[_2300].y, _2233 * cbSceneParam._m0[_2300].x)));
        float _2328 = cbSceneParam._m0[33u].z * _2323;
        float _2330 = cbSceneParam._m0[33u].w * _2323;
        float _2333 = fma(_2245, cbSceneParam._m0[_2292].w, fma(_2241, cbSceneParam._m0[_2292].z, fma(_2237, cbSceneParam._m0[_2292].y, _2233 * cbSceneParam._m0[_2292].x))) / _2323;
        float _2381 = (cbSceneParam._m0[33u].x - sqrt(((_2247 * _2247) + (_2246 * _2246)) + (_2248 * _2248))) * cbSceneParam._m0[33u].y;
        float _4721 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2388 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2328 + _2311) / _2323, (_2330 + _2315) / _2323), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2330 + _2311) / _2323, (_2315 - _2328) / _2323), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2311 - _2328) / _2323, (_2315 - _2330) / _2323), _2333), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2311 - _2330) / _2323, (_2328 + _2315) / _2323), _2333), 0.0)).x), vec4(0.25)));
        _2395 = 1.0 - (_2388 * cbSceneParam._m0[34u].x);
        _2396 = 1.0 - (_2388 * cbSceneParam._m0[34u].y);
        _2397 = 1.0 - (_2388 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2395 = 1.0;
        _2396 = 1.0;
        _2397 = 1.0;
    }
    float _2461;
    float _2463;
    float _2465;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2449 = fma(_2245, cbSceneParam._m0[63u].w, fma(_2241, cbSceneParam._m0[63u].z, fma(_2237, cbSceneParam._m0[63u].y, _2233 * cbSceneParam._m0[63u].x)));
        float _2450 = fma(_2245, cbSceneParam._m0[60u].w, fma(_2241, cbSceneParam._m0[60u].z, fma(_2237, cbSceneParam._m0[60u].y, _2233 * cbSceneParam._m0[60u].x))) / _2449;
        float _2451 = fma(_2245, cbSceneParam._m0[61u].w, fma(_2241, cbSceneParam._m0[61u].z, fma(_2237, cbSceneParam._m0[61u].y, _2233 * cbSceneParam._m0[61u].x))) / _2449;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2450 >= cbSceneParam._m0[64u].x) && (_2451 >= cbSceneParam._m0[64u].y)) && (_2450 <= cbSceneParam._m0[64u].z)) && (_2451 <= cbSceneParam._m0[64u].w))
        {
            float _2589 = fma(_2245, cbSceneParam._m0[62u].w, fma(_2241, cbSceneParam._m0[62u].z, fma(_2237, cbSceneParam._m0[62u].y, _2233 * cbSceneParam._m0[62u].x))) / _2449;
            float _2593 = isnan(cbSceneParam._m0[41u].w) ? _2589 : (isnan(_2589) ? cbSceneParam._m0[41u].w : max(_2589, cbSceneParam._m0[41u].w));
            float _2636 = (cbSceneParam._m0[33u].x - sqrt(((_2247 * _2247) + (_2246 * _2246)) + (_2248 * _2248))) * cbSceneParam._m0[33u].y;
            float _4737 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
            float _2643 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2450, cbSceneParam._m0[33u].w + _2451), _2593), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2450, _2451 - cbSceneParam._m0[33u].z), _2593), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2450 - cbSceneParam._m0[33u].z, _2451 - cbSceneParam._m0[33u].w), _2593), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2450 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2451), _2593), 0.0)).x), vec4(0.25)));
            float _2647 = 1.0 - (_2643 * cbSceneParam._m0[34u].x);
            float _2648 = 1.0 - (_2643 * cbSceneParam._m0[34u].y);
            float _2649 = 1.0 - (_2643 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2649) ? _2397 : (isnan(_2397) ? _2649 : min(_2397, _2649));
            frontier_phi_34_33_ladder_1 = isnan(_2648) ? _2396 : (isnan(_2396) ? _2648 : min(_2396, _2648));
            frontier_phi_34_33_ladder_2 = isnan(_2647) ? _2395 : (isnan(_2395) ? _2647 : min(_2395, _2647));
        }
        else
        {
            frontier_phi_34_33_ladder = _2397;
            frontier_phi_34_33_ladder_1 = _2396;
            frontier_phi_34_33_ladder_2 = _2395;
        }
        _2461 = frontier_phi_34_33_ladder_2;
        _2463 = frontier_phi_34_33_ladder_1;
        _2465 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2461 = _2395;
        _2463 = _2396;
        _2465 = _2397;
    }
    uvec4 _2470 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2472 = _2470.x * 14u;
    uint _2473 = _2472 + 13u;
    float _2480 = _1173 + (-1.0);
    float _2485 = (cbLight._m0[_2473].x * _2480) + 1.0;
    float _2486 = (cbLight._m0[_2473].y * _2480) + 1.0;
    float _2487 = (cbLight._m0[_2473].z * _2480) + 1.0;
    float _2488 = (cbLight._m0[_2473].w * _2480) + 1.0;
    uint _2489 = _2472 + 5u;
    float _2495 = isnan(1.0) ? _2486 : (isnan(_2486) ? 1.0 : min(_2486, 1.0));
    uint _2499 = _2472 + 4u;
    float _2508 = isnan(1.0) ? _2485 : (isnan(_2485) ? 1.0 : min(_2485, 1.0));
    uint _2512 = _2472 | 1u;
    float _2523 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_1008, _1009, _1010));
    float _2526 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_1008, _1009, _1010));
    float _4773 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _4784 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2531 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * 0.3183098733425140380859375;
    float _2533 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * 0.3183098733425140380859375;
    float _2540 = ((cbLight._m0[_2489].x * _2495) * _2533) + (((cbLight._m0[_2499].x * _2461) * _2508) * _2531);
    float _2541 = ((_2495 * cbLight._m0[_2489].y) * _2533) + (((cbLight._m0[_2499].y * _2463) * _2508) * _2531);
    float _2542 = ((_2495 * cbLight._m0[_2489].z) * _2533) + (((cbLight._m0[_2499].z * _2465) * _2508) * _2531);
    uvec4 _2546 = floatBitsToUint(cbLight._m0[_2472 + 12u]);
    bool _2548 = _2546.x == 0u;
    float _2650;
    float _2652;
    float _2654;
    if (_2548)
    {
        _2650 = _2540;
        _2652 = _2541;
        _2654 = _2542;
    }
    else
    {
        uint _2658 = _2472 + 6u;
        float _2674 = (dot(vec3(cbLight._m0[_2472 + 2u].xyz), vec3(_1008, _1009, _1010)) * 0.5) + 0.5;
        float _2675 = _2674 * _2674;
        float _4795 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2676 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2677 = isnan(1.0) ? _2487 : (isnan(_2487) ? 1.0 : min(_2487, 1.0));
        _2650 = (((cbLight._m0[_2658].x * 0.3183098733425140380859375) * _2676) * _2677) + _2540;
        _2652 = (((cbLight._m0[_2658].y * 0.3183098733425140380859375) * _2676) * _2677) + _2541;
        _2654 = (((cbLight._m0[_2658].z * 0.3183098733425140380859375) * _2676) * _2677) + _2542;
    }
    bool _2657 = _2546.y == 0u;
    float _2712;
    float _2714;
    float _2716;
    if (_2657)
    {
        _2712 = _2650;
        _2714 = _2652;
        _2716 = _2654;
    }
    else
    {
        uint _2885 = _2472 + 7u;
        float _2901 = (dot(vec3(cbLight._m0[_2472 + 3u].xyz), vec3(_1008, _1009, _1010)) * 0.5) + 0.5;
        float _2902 = _2901 * _2901;
        float _4811 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2903 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2904 = isnan(1.0) ? _2488 : (isnan(_2488) ? 1.0 : min(_2488, 1.0));
        _2712 = (((cbLight._m0[_2885].x * 0.3183098733425140380859375) * _2903) * _2904) + _2650;
        _2714 = (((cbLight._m0[_2885].y * 0.3183098733425140380859375) * _2903) * _2904) + _2652;
        _2716 = (((cbLight._m0[_2885].z * 0.3183098733425140380859375) * _2903) * _2904) + _2654;
    }
    uint _2719 = _2472 + 8u;
    float _2732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _1011) * 0.949999988079071044921875);
    float _2733 = _2732 * _2732;
    float _2734 = cbLight._m0[_2472].x + _1087;
    float _2735 = cbLight._m0[_2472].y + _1088;
    float _2736 = cbLight._m0[_2472].z + _1089;
    float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
    float _2741 = _2740 * _2734;
    float _2742 = _2740 * _2735;
    float _2743 = _2740 * _2736;
    float _2744 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2472].xyz));
    float _4827 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2747 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
    float _4838 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _2748 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
    float _2749 = dot(vec3(_1008, _1009, _1010), vec3(_2741, _2742, _2743));
    float _4849 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2752 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
    float _2753 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2741, _2742, _2743));
    float _4860 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2757 = _2733 * _2733;
    float _2761 = ((_2752 * _2752) * (_2757 + (-1.0))) + 1.0;
    float _2769 = exp2(log2(1.0 - (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) * 5.0);
    float _2770 = 0.959999978542327880859375 - _1154;
    float _2772 = 0.959999978542327880859375 - _1155;
    float _2773 = 0.959999978542327880859375 - _1156;
    float _2780 = 1.0 - _2733;
    float _2791 = (0.5 / (((_2748 * ((_2747 * _2780) + _2733)) + 9.9999999392252902907785028219223e-09) + (((_2748 * _2780) + _2733) * _2747))) * _2747;
    float _4871 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2793 = (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2757 / ((_2761 * _2761) * 3.141590118408203125));
    uint _2807 = _2472 + 9u;
    float _2818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2512].w)) * _1011) * 0.949999988079071044921875);
    float _2819 = _2818 * _2818;
    float _2820 = cbLight._m0[_2512].x + _1087;
    float _2821 = cbLight._m0[_2512].y + _1088;
    float _2822 = cbLight._m0[_2512].z + _1089;
    float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
    float _2827 = _2826 * _2820;
    float _2828 = _2826 * _2821;
    float _2829 = _2826 * _2822;
    float _2830 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2512].xyz));
    float _4882 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2833 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
    float _2834 = dot(vec3(_1008, _1009, _1010), vec3(_2827, _2828, _2829));
    float _4893 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
    float _2837 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
    float _2838 = dot(vec3(cbLight._m0[_2512].xyz), vec3(_2827, _2828, _2829));
    float _4904 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
    float _2842 = _2819 * _2819;
    float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
    float _2853 = exp2(log2(1.0 - (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) * 5.0);
    float _2860 = 1.0 - _2819;
    float _2870 = (0.5 / (((_2748 * ((_2833 * _2860) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2748 * _2860) + _2819) * _2833))) * _2833;
    float _4915 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
    float _2872 = (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
    float _2882 = (((((_2853 * _2770) + _1157) * cbLight._m0[_2807].x) * _2872) * _2495) + ((((cbLight._m0[_2719].x * _2461) * ((_2769 * _2770) + _1157)) * _2793) * _2508);
    float _2883 = (((((_2853 * _2772) + _1159) * cbLight._m0[_2807].y) * _2872) * _2495) + ((((cbLight._m0[_2719].y * _2463) * ((_2769 * _2772) + _1159)) * _2793) * _2508);
    float _2884 = (((((_2853 * _2773) + _1160) * cbLight._m0[_2807].z) * _2872) * _2495) + ((((cbLight._m0[_2719].z * _2465) * ((_2769 * _2773) + _1160)) * _2793) * _2508);
    float _2940;
    float _2942;
    float _2944;
    if (_2548)
    {
        _2940 = _2882;
        _2942 = _2883;
        _2944 = _2884;
    }
    else
    {
        uint _2946 = _2472 + 2u;
        uint _2950 = _2472 + 10u;
        float _2964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2946].w)) * _1011) * 0.949999988079071044921875);
        float _2965 = _2964 * _2964;
        float _2966 = cbLight._m0[_2946].x + _1087;
        float _2967 = cbLight._m0[_2946].y + _1088;
        float _2968 = cbLight._m0[_2946].z + _1089;
        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
        float _2973 = _2972 * _2966;
        float _2974 = _2972 * _2967;
        float _2975 = _2972 * _2968;
        float _2976 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2946].xyz));
        float _4926 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2979 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
        float _2980 = dot(vec3(_1008, _1009, _1010), vec3(_2973, _2974, _2975));
        float _4937 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        float _2983 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
        float _2984 = dot(vec3(cbLight._m0[_2946].xyz), vec3(_2973, _2974, _2975));
        float _4948 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
        float _2988 = _2965 * _2965;
        float _2992 = ((_2983 * _2983) * (_2988 + (-1.0))) + 1.0;
        float _2999 = exp2(log2(1.0 - (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0)))) * 5.0);
        float _3006 = 1.0 - _2965;
        float _3016 = (0.5 / (((_2748 * ((_2979 * _3006) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2748 * _3006) + _2965) * _2979))) * _2979;
        float _4959 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3018 = (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * (_2988 / ((_2992 * _2992) * 3.141590118408203125));
        float _3019 = isnan(1.0) ? _2487 : (isnan(_2487) ? 1.0 : min(_2487, 1.0));
        _2940 = (((((_2999 * _2770) + _1157) * cbLight._m0[_2950].x) * _3018) * _3019) + _2882;
        _2942 = (((((_2999 * _2772) + _1159) * cbLight._m0[_2950].y) * _3018) * _3019) + _2883;
        _2944 = (((((_2999 * _2773) + _1160) * cbLight._m0[_2950].z) * _3018) * _3019) + _2884;
    }
    float _3050;
    float _3052;
    float _3054;
    if (_2657)
    {
        _3050 = _2940;
        _3052 = _2942;
        _3054 = _2944;
    }
    else
    {
        uint _3061 = _2472 + 3u;
        uint _3065 = _2472 + 11u;
        float _3079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3061].w)) * _1011) * 0.949999988079071044921875);
        float _3080 = _3079 * _3079;
        float _3081 = cbLight._m0[_3061].x + _1087;
        float _3082 = cbLight._m0[_3061].y + _1088;
        float _3083 = cbLight._m0[_3061].z + _1089;
        float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
        float _3088 = _3087 * _3081;
        float _3089 = _3087 * _3082;
        float _3090 = _3087 * _3083;
        float _3091 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_3061].xyz));
        float _4975 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
        float _3094 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _3095 = dot(vec3(_1008, _1009, _1010), vec3(_3088, _3089, _3090));
        float _4986 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
        float _3098 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
        float _3099 = dot(vec3(cbLight._m0[_3061].xyz), vec3(_3088, _3089, _3090));
        float _4997 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
        float _3103 = _3080 * _3080;
        float _3107 = ((_3098 * _3098) * (_3103 + (-1.0))) + 1.0;
        float _3114 = exp2(log2(1.0 - (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0)))) * 5.0);
        float _3121 = 1.0 - _3080;
        float _3131 = (0.5 / (((_2748 * ((_3094 * _3121) + _3080)) + 9.9999999392252902907785028219223e-09) + (((_2748 * _3121) + _3080) * _3094))) * _3094;
        float _5008 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
        float _3133 = (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_3103 / ((_3107 * _3107) * 3.141590118408203125));
        float _3134 = isnan(1.0) ? _2488 : (isnan(_2488) ? 1.0 : min(_2488, 1.0));
        _3050 = (((((_3114 * _2770) + _1157) * cbLight._m0[_3065].x) * _3133) * _3134) + _2940;
        _3052 = (((((_3114 * _2772) + _1159) * cbLight._m0[_3065].y) * _3133) * _3134) + _2942;
        _3054 = (((((_3114 * _2773) + _1160) * cbLight._m0[_3065].z) * _3133) * _3134) + _2944;
    }
    float _3200;
    float _3202;
    float _3204;
    float _3206;
    float _3208;
    float _3210;
    if (_2470.y == 0u)
    {
        uvec4 _3155 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3156 = _3155.x;
        uint _3167 = uint((float(_3155.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1096) / _3156))) + floor(float(uint(cbSceneParam._m0[85u].x * _1095) / _3156)));
        float _3177 = (log2(_2248 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3178 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
        uint _3181 = uint(isnan(14.0) ? _3178 : (isnan(_3178) ? 14.0 : min(_3178, 14.0)));
        uvec4 _3186 = texelFetch(g_lightClusterGridBuffer, int(((_3181 << 2u) + (_3167 << 6u)) >> 2u));
        uint _3187 = _3186.x;
        uint _3188 = _3155.z;
        float _3267;
        float _3269;
        float _3271;
        float _3273;
        float _3275;
        float _3277;
        if (((((1u << ((_3188 >> 4u) & 15u)) + 4294967295u) & _3187) == 0u) || ((_3188 & 240u) == 0u))
        {
            _3267 = 0.0;
            _3269 = 0.0;
            _3271 = 0.0;
            _3273 = 0.0;
            _3275 = 0.0;
            _3277 = 0.0;
        }
        else
        {
            float _3268;
            float _3270;
            float _3272;
            float _3274;
            float _3276;
            float _3278;
            float _3412 = 0.0;
            float _3413 = 0.0;
            float _3414 = 0.0;
            float _3415 = 0.0;
            float _3416 = 0.0;
            float _3417 = 0.0;
            uint _3418 = 0u;
            uint _3427;
            bool _3428;
            for (;;)
            {
                _3427 = texelFetch(g_lightClassification, int((((_3181 << 5u) + (_3167 << 9u)) + (_3418 << 2u)) >> 2u)).x;
                _3428 = _3427 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3428)
                {
                    frontier_phi_66_pred = _3417;
                    frontier_phi_66_pred_1 = _3416;
                    frontier_phi_66_pred_2 = _3415;
                    frontier_phi_66_pred_3 = _3414;
                    frontier_phi_66_pred_4 = _3413;
                    frontier_phi_66_pred_5 = _3412;
                }
                else
                {
                    float _3536;
                    float _3537;
                    float _3538;
                    float _3539;
                    float _3540;
                    float _3541;
                    uint _3542;
                    _3536 = _3412;
                    _3537 = _3413;
                    _3538 = _3414;
                    _3539 = _3415;
                    _3540 = _3416;
                    _3541 = _3417;
                    _3542 = _3427;
                    float _3468;
                    float _3469;
                    float _3470;
                    float _3471;
                    float _3472;
                    float _3473;
                    for (;;)
                    {
                        uint _3546 = uint(findLSB(_3542)) + (_3418 << 5u);
                        uint _3543 = (_3542 + 4294967295u) & _3542;
                        uint _3548 = _3546 * 48u;
                        vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3548)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3548 + 3u)).x));
                        uint _3568 = (_3546 * 48u) + 4u;
                        vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3568)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 3u)).x));
                        uint _3587 = (_3546 * 48u) + 8u;
                        vec3 _3598 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3587)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 2u)).x));
                        float _3602 = _3562.x - _2246;
                        float _3603 = _3562.y - _2247;
                        float _3604 = _3562.z - _2248;
                        float _3605 = dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604));
                        float _3608 = inversesqrt(_3605);
                        float _3609 = _3608 * _3602;
                        float _3610 = _3608 * _3603;
                        float _3611 = _3608 * _3604;
                        float _3612 = dot(vec3(_1114, _1117, _1120), vec3(_3609, _3610, _3611));
                        float _3617 = 1.0 - (_3605 * _3562.w);
                        float _5034 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                        float _3618 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                        float _3619 = sqrt(_3605) * _3581.w;
                        float _3622 = 1.39999997615814208984375 / (_3619 + 1.39999997615814208984375);
                        float _3623 = _3622 * _3622;
                        float _3626 = ((1.0 - _3623) * _3612) + _3623;
                        float _3629 = _3619 * _3619;
                        float _3633 = ((isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0))) * _3618) / ((_3629 * 0.699999988079071044921875) + 1.0);
                        float _3637 = (-0.0) - _2246;
                        float _3638 = (-0.0) - _2247;
                        float _3639 = (-0.0) - _2248;
                        float _3643 = inversesqrt(dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639)));
                        float _3644 = _3643 * _3637;
                        float _3645 = _3643 * _3638;
                        float _3646 = _3643 * _3639;
                        float _3653 = exp2(log2(1.0 / ((_3629 * 3.5) + 5.0)) * 0.25);
                        float _3654 = 1.0 - _1189;
                        float _3661 = sqrt(1.0 - ((1.0 - (_3654 * _3654)) * (1.0 - (_3653 * _3653))));
                        float _3662 = _3661 * _3661;
                        float _3663 = _3662 * _3662;
                        float _3664 = _3644 + _3609;
                        float _3665 = _3645 + _3610;
                        float _3666 = _3646 + _3611;
                        float _3670 = inversesqrt(dot(vec3(_3664, _3665, _3666), vec3(_3664, _3665, _3666)));
                        float _3674 = dot(vec3(_1114, _1117, _1120), vec3(_3644, _3645, _3646));
                        float _5050 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                        float _3677 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
                        float _3678 = dot(vec3(_1114, _1117, _1120), vec3(_3670 * _3664, _3670 * _3665, _3670 * _3666));
                        float _5061 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                        float _3681 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                        float _3685 = ((_3681 * _3681) * (_3663 + (-1.0))) + 1.0;
                        float _3686 = _3622 * _3662;
                        float _3687 = _3686 * _3686;
                        float _3690 = ((1.0 - _3687) * _3612) + _3687;
                        float _5072 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                        float _3691 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                        float _3692 = 1.0 - _3662;
                        float _3702 = (0.5 / (((_3691 * ((_3677 * _3692) + _3662)) + 9.9999999392252902907785028219223e-09) + (((_3691 * _3692) + _3662) * _3677))) * _3691;
                        float _5083 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                        float _3713 = (((_3663 * 3.1415927410125732421875) * (isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0)))) / ((_3685 * _3685) * ((_3629 * 2.1991131305694580078125) + 3.141590118408203125))) * _3618;
                        _3471 = (_3633 * _3581.x) + _3539;
                        _3472 = (_3633 * _3581.y) + _3540;
                        _3473 = (_3633 * _3581.z) + _3541;
                        _3468 = (_3713 * _3598.x) + _3536;
                        _3469 = (_3713 * _3598.y) + _3537;
                        _3470 = (_3713 * _3598.z) + _3538;
                        if (_3543 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3536 = _3468;
                            _3537 = _3469;
                            _3538 = _3470;
                            _3539 = _3471;
                            _3540 = _3472;
                            _3541 = _3473;
                            _3542 = _3543;
                        }
                    }
                    frontier_phi_66_pred = _3473;
                    frontier_phi_66_pred_1 = _3472;
                    frontier_phi_66_pred_2 = _3471;
                    frontier_phi_66_pred_3 = _3470;
                    frontier_phi_66_pred_4 = _3469;
                    frontier_phi_66_pred_5 = _3468;
                }
                _3278 = frontier_phi_66_pred;
                _3276 = frontier_phi_66_pred_1;
                _3274 = frontier_phi_66_pred_2;
                _3272 = frontier_phi_66_pred_3;
                _3270 = frontier_phi_66_pred_4;
                _3268 = frontier_phi_66_pred_5;
                uint _3419 = _3418 + 1u;
                if (_3419 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3412 = _3268;
                    _3413 = _3270;
                    _3414 = _3272;
                    _3415 = _3274;
                    _3416 = _3276;
                    _3417 = _3278;
                    _3418 = _3419;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3267 = _3268;
            _3269 = _3270;
            _3271 = _3272;
            _3273 = _3274;
            _3275 = _3276;
            _3277 = _3278;
        }
        uvec4 _3281 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3282 = _3281.z;
        uint _3284 = (_3282 >> 8u) & 15u;
        float _3380;
        float _3382;
        float _3384;
        float _3386;
        float _3388;
        float _3390;
        if (((4294967295u << _3284) & _3187) == 0u)
        {
            _3380 = _3267;
            _3382 = _3269;
            _3384 = _3271;
            _3386 = _3273;
            _3388 = _3275;
            _3390 = _3277;
        }
        else
        {
            float _3405 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
            float _3406 = _3405 * _2246;
            float _3407 = _3405 * _2247;
            float _3408 = _3405 * _2248;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3284 < ((_3282 >> 12u) & 15u))
            {
                float _3381;
                float _3383;
                float _3385;
                float _3387;
                float _3389;
                float _3391;
                float _3519 = _3267;
                float _3520 = _3269;
                float _3521 = _3271;
                float _3522 = _3273;
                float _3523 = _3275;
                float _3524 = _3277;
                uint _3525 = _3284;
                uint _3534;
                bool _3535;
                for (;;)
                {
                    _3534 = texelFetch(g_lightClassification, int((((_3181 << 5u) + (_3167 << 9u)) + (_3525 << 2u)) >> 2u)).x;
                    _3535 = _3534 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3535)
                    {
                        frontier_phi_72_pred = _3524;
                        frontier_phi_72_pred_1 = _3523;
                        frontier_phi_72_pred_2 = _3522;
                        frontier_phi_72_pred_3 = _3521;
                        frontier_phi_72_pred_4 = _3520;
                        frontier_phi_72_pred_5 = _3519;
                    }
                    else
                    {
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _4011;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _3731 = _3519;
                        float _3732 = _3520;
                        float _3733 = _3521;
                        float _3734 = _3522;
                        float _3735 = _3523;
                        float _3736 = _3524;
                        uint _3737 = _3534;
                        uint _3738;
                        vec4 _3763;
                        float _3764;
                        vec4 _3779;
                        vec3 _3791;
                        vec4 _3806;
                        vec4 _3821;
                        float _3867;
                        bool _3868;
                        for (;;)
                        {
                            uint _3748 = ((_3525 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3737));
                            _3738 = (_3737 + 4294967295u) & _3737;
                            uint _3750 = _3748 * 40u;
                            _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            _3764 = _3763.w;
                            uint _3766 = (_3748 * 40u) + 4u;
                            _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3781 = (_3748 * 40u) + 8u;
                            _3791 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3781 + 2u)).x));
                            uint _3793 = (_3748 * 40u) + 16u;
                            _3806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 3u)).x));
                            uint _3808 = (_3748 * 40u) + 20u;
                            _3821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 3u)).x));
                            uint _3823 = (_3748 * 40u) + 24u;
                            vec4 _3836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3823 + 3u)).x));
                            uint _3842 = (_3748 * 40u) + 28u;
                            vec4 _3855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 3u)).x));
                            _3867 = fma(_2248, _3855.z, fma(_2247, _3855.y, _3855.x * _2246)) + _3855.w;
                            _3868 = !((fma(_2248, _3836.z, fma(_2247, _3836.y, _3836.x * _2246)) + _3836.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3868)
                            {
                                float _3895 = _3763.x - _2246;
                                float _3896 = _3763.y - _2247;
                                float _3897 = _3763.z - _2248;
                                float _3898 = dot(vec3(_3895, _3896, _3897), vec3(_3895, _3896, _3897));
                                float _3901 = inversesqrt(_3898);
                                float _3902 = _3901 * _3895;
                                float _3903 = _3901 * _3896;
                                float _3904 = _3901 * _3897;
                                float _3908 = 1.0 - (_3898 / (_3764 * _3764));
                                float _5094 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3909 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                                float _3913 = sqrt(_3898) * _3779.w;
                                float _3915 = 1.39999997615814208984375 / (_3913 + 1.39999997615814208984375);
                                float _3916 = _3915 * _3915;
                                float _3919 = ((1.0 - _3916) * dot(vec3(_3902, _3903, _3904), vec3(_1114, _1117, _1120))) + _3916;
                                float _3922 = _3913 * _3913;
                                float _3926 = (fma(_2248, _3806.z, fma(_2247, _3806.y, _3806.x * _2246)) + _3806.w) / _3867;
                                float _3927 = (fma(_2248, _3821.z, fma(_2247, _3821.y, _3821.x * _2246)) + _3821.w) / _3867;
                                float _3931 = 1.0 - dot(vec2(_3926, _3927), vec2(_3926, _3927));
                                float _5110 = isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0));
                                float _3932 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                                float _3933 = _3932 * (((isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0))) * _3909) / ((_3922 * 0.699999988079071044921875) + 1.0));
                                float _3945 = exp2(log2(1.0 / ((_3922 * 3.5) + 5.0)) * 0.25);
                                float _3946 = 1.0 - _1189;
                                float _3953 = sqrt(1.0 - ((1.0 - (_3946 * _3946)) * (1.0 - (_3945 * _3945))));
                                float _3954 = _3953 * _3953;
                                float _3955 = _3954 * _3954;
                                float _3956 = _3902 - _3406;
                                float _3957 = _3903 - _3407;
                                float _3958 = _3904 - _3408;
                                float _3962 = inversesqrt(dot(vec3(_3956, _3957, _3958), vec3(_3956, _3957, _3958)));
                                float _3966 = dot(vec3(_1114, _1117, _1120), vec3((-0.0) - _3406, (-0.0) - _3407, (-0.0) - _3408));
                                float _5121 = isnan(0.0) ? _3966 : (isnan(_3966) ? 0.0 : max(_3966, 0.0));
                                float _3969 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                                float _3970 = dot(vec3(_1114, _1117, _1120), vec3(_3962 * _3956, _3962 * _3957, _3962 * _3958));
                                float _5132 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3973 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3977 = ((_3973 * _3973) * (_3955 + (-1.0))) + 1.0;
                                float _3978 = _3915 * _3954;
                                float _3979 = _3978 * _3978;
                                float _3985 = ((1.0 - _3979) * dot(vec3(_1114, _1117, _1120), vec3(_3902, _3903, _3904))) + _3979;
                                float _5143 = isnan(0.0) ? _3985 : (isnan(_3985) ? 0.0 : max(_3985, 0.0));
                                float _3986 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
                                float _3987 = 1.0 - _3954;
                                float _3997 = (0.5 / (((_3986 * ((_3969 * _3987) + _3954)) + 9.9999999392252902907785028219223e-09) + (((_3986 * _3987) + _3954) * _3969))) * _3986;
                                float _5154 = isnan(0.0) ? _3997 : (isnan(_3997) ? 0.0 : max(_3997, 0.0));
                                float _4007 = (_3932 * _3909) * (((_3955 * 3.1415927410125732421875) * (isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0)))) / ((_3977 * _3977) * ((_3922 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3933 * _3779.y;
                                frontier_phi_78_pred_1 = _3933 * _3779.x;
                                frontier_phi_78_pred_2 = _4007 * _3791.z;
                                frontier_phi_78_pred_3 = _4007 * _3791.y;
                                frontier_phi_78_pred_4 = _4007 * _3791.x;
                                frontier_phi_78_pred_5 = _3933 * _3779.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4015 = frontier_phi_78_pred;
                            _4014 = frontier_phi_78_pred_1;
                            _4013 = frontier_phi_78_pred_2;
                            _4012 = frontier_phi_78_pred_3;
                            _4011 = frontier_phi_78_pred_4;
                            _4016 = frontier_phi_78_pred_5;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            _3723 = _4016 + _3736;
                            _3718 = _4011 + _3731;
                            _3719 = _4012 + _3732;
                            _3720 = _4013 + _3733;
                            if (_3738 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3731 = _3718;
                                _3732 = _3719;
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3738;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3723;
                        frontier_phi_72_pred_1 = _3722;
                        frontier_phi_72_pred_2 = _3721;
                        frontier_phi_72_pred_3 = _3720;
                        frontier_phi_72_pred_4 = _3719;
                        frontier_phi_72_pred_5 = _3718;
                    }
                    _3391 = frontier_phi_72_pred;
                    _3389 = frontier_phi_72_pred_1;
                    _3387 = frontier_phi_72_pred_2;
                    _3385 = frontier_phi_72_pred_3;
                    _3383 = frontier_phi_72_pred_4;
                    _3381 = frontier_phi_72_pred_5;
                    uint _3526 = _3525 + 1u;
                    if (_3526 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3519 = _3381;
                        _3520 = _3383;
                        _3521 = _3385;
                        _3522 = _3387;
                        _3523 = _3389;
                        _3524 = _3391;
                        _3525 = _3526;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3391;
                frontier_phi_60_61_ladder_1 = _3389;
                frontier_phi_60_61_ladder_2 = _3385;
                frontier_phi_60_61_ladder_3 = _3383;
                frontier_phi_60_61_ladder_4 = _3381;
                frontier_phi_60_61_ladder_5 = _3387;
            }
            else
            {
                frontier_phi_60_61_ladder = _3277;
                frontier_phi_60_61_ladder_1 = _3275;
                frontier_phi_60_61_ladder_2 = _3271;
                frontier_phi_60_61_ladder_3 = _3269;
                frontier_phi_60_61_ladder_4 = _3267;
                frontier_phi_60_61_ladder_5 = _3273;
            }
            _3380 = frontier_phi_60_61_ladder_4;
            _3382 = frontier_phi_60_61_ladder_3;
            _3384 = frontier_phi_60_61_ladder_2;
            _3386 = frontier_phi_60_61_ladder_5;
            _3388 = frontier_phi_60_61_ladder_1;
            _3390 = frontier_phi_60_61_ladder;
        }
        float _3395 = isnan(1.0) ? _1173 : (isnan(_1173) ? 1.0 : min(_1173, 1.0));
        _3200 = (_3395 * _3386) + _2712;
        _3202 = (_3395 * _3388) + _2714;
        _3204 = (_3395 * _3390) + _2716;
        _3206 = ((_3380 * _1157) * _3395) + _3050;
        _3208 = ((_3382 * _1159) * _3395) + _3052;
        _3210 = ((_3384 * _1160) * _3395) + _3054;
    }
    else
    {
        _3200 = _2712;
        _3202 = _2714;
        _3204 = _2716;
        _3206 = _3050;
        _3208 = _3052;
        _3210 = _3054;
    }
    float _5170 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _5181 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _5192 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    uint _3230 = _286 + 6u;
    float _3238 = _1095 / cbSceneParam._m0[86u].x;
    float _3239 = _1096 / cbSceneParam._m0[86u].y;
    vec4 _3253 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3238, _3239, (log2((isnan(cbSceneParam._m0[77u].w) ? _1030 : (isnan(_1030) ? cbSceneParam._m0[77u].w : min(_1030, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3255 = _3253.x;
    float _3256 = _3253.y;
    float _3257 = _3253.z;
    float _3258 = _3253.w;
    float _3330;
    float _3332;
    float _3334;
    float _3336;
    if (_1030 > cbSceneParam._m0[78u].w)
    {
        float _3292 = isnan(_1030) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1030 : min(cbSceneParam._m0[80u].w, _1030));
        float _3293 = _3292 / _1030;
        float _3304 = _3293 * _1080;
        float _3305 = _1081 * _3293;
        float _3306 = (-0.0) - _3305;
        float _3308 = _3293 * _1082;
        float _3310 = (cbSceneParam._m0[77u].w * _3306) / _3292;
        float _3311 = _3310 + cbSceneParam._m0[79u].w;
        float _3312 = cbSceneParam._m0[79u].w - _3305;
        float _3318 = sqrt(((_3304 * _3304) + (_3305 * _3305)) + (_3308 * _3308));
        float _3321 = (1.0 - (cbSceneParam._m0[77u].w / _3292)) * _3318;
        float _3326 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3328 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3481;
        if (abs((_3306 - _3310) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3481 = ((((_3311 > 0.0) ? exp2(_3326 * _3311) : (2.0 - exp2(_3328 * _3311))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3321;
        }
        else
        {
            float _3441 = 1.0 / cbSceneParam._m0[80u].x;
            float _3442 = isnan(_3312) ? _3311 : (isnan(_3311) ? _3312 : max(_3311, _3312));
            float _3443 = isnan(_3312) ? _3311 : (isnan(_3311) ? _3312 : min(_3311, _3312));
            float _3452 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : min(_3442, 0.0));
            float _3453 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : min(_3443, 0.0));
            _3481 = ((abs(_3318 / _3306) * cbSceneParam._m0[80u].y) * ((((_3452 - _3453) * 2.0) - ((exp2(_3326 * (isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0)))) - exp2(_3326 * (isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))))) * _3441)) - ((exp2(_3328 * _3452) - exp2(_3328 * _3453)) * _3441))) + (_3321 * cbSceneParam._m0[80u].z);
        }
        vec4 _3483 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3238, _3239, 1.0), 0.0);
        float _3492 = exp2((_3481 * (-1.44269502162933349609375)) * (1.0 - _3483.w));
        float _3493 = log2(_3492);
        float _3509 = log2(_3258);
        _3330 = (exp2(_3509 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3493 * cbSceneParam._m0[78u].x)) * _3483.x) / cbSceneParam._m0[78u].x)) + _3255;
        _3332 = (exp2(_3509 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3493 * cbSceneParam._m0[78u].y)) * _3483.y) / cbSceneParam._m0[78u].y)) + _3256;
        _3334 = (exp2(_3509 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3493 * cbSceneParam._m0[78u].z)) * _3483.z) / cbSceneParam._m0[78u].z)) + _3257;
        _3336 = _3492 * _3258;
    }
    else
    {
        _3330 = _3255;
        _3332 = _3256;
        _3334 = _3257;
        _3336 = _3258;
    }
    float _3348 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3349 = _3348 == 3.0;
    float _3350 = log2(_3336);
    float _3357 = exp2(_3350 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0))) * (_3200 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1173))) + ((_3206 + ((isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0))) * _1979)) * cbPerFrame._m0[3u].x));
    float _3358 = exp2(_3350 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0))) * (_3202 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1173))) + ((_3208 + ((isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0))) * _1979)) * cbPerFrame._m0[3u].x));
    float _3359 = exp2(_3350 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0))) * (_3204 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1173))) + ((_3210 + ((isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0))) * _1979)) * cbPerFrame._m0[3u].x));
    float _3368 = (_3348 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3368 * (_3349 ? _3357 : (_3357 + (cbSceneParam._m0[72u].w * _3330)));
    SV_Target.y = _3368 * (_3349 ? _3358 : (_3358 + (cbSceneParam._m0[72u].w * _3332)));
    SV_Target.z = _3368 * (_3349 ? _3359 : (_3359 + (cbSceneParam._m0[72u].w * _3334)));
    SV_Target.w = cbInstanceData._m0[_3230].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3230].w;
}


