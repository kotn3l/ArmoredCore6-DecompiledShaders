#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1603;
float _4007;
float _4008;
float _4009;
float _4010;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4019 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4030 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4041 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[23u].w) + _470) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4052 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _495 = (_488 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _496 = (_488 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _497 = (_488 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[23u].w) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4063 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _571 = (_353.x * cbMtdParam._m0[9u].x) * ((_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495);
    float _572 = (_353.y * cbMtdParam._m0[9u].y) * ((_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496);
    float _573 = (_353.z * cbMtdParam._m0[9u].z) * ((_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497);
    float _577 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _571;
    float _580 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _572;
    float _583 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _573;
    float _591 = (((_571 - _577) * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) + _577) * 4.55000019073486328125;
    float _593 = (((_572 - _580) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) + _580) * 4.55000019073486328125;
    float _595 = (((_573 - _583) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) + _583) * 4.55000019073486328125;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _654 = _652.x;
    float _655 = _652.y;
    float _656 = _652.z;
    float _663 = ((_635.x - _654) * _488) + _654;
    float _664 = ((_635.y - _655) * _488) + _655;
    float _665 = ((_635.z - _656) * _488) + _656;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _690 = ((_677.z - _665) * _561) + _665;
    float _693 = ((((_677.x - _663) * _561) + _663) * 2.0) + (-1.0);
    float _694 = ((((_677.y - _664) * _561) + _664) * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _4074 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _700 = sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _741 = _739.x;
    float _742 = 1.0 - _741;
    float _751 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _754 = ((isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : min(_751, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _763 = (_754 - ((((((_741 - _742) * cbMtdParam._m0[24u].z) + _742) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _754))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4095 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _764 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _771 = (_764 * (cbMtdParam._m0[17u].x - _591)) + _591;
    float _772 = (_764 * (cbMtdParam._m0[17u].y - _593)) + _593;
    float _773 = (_764 * (cbMtdParam._m0[17u].z - _595)) + _595;
    vec4 _785 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _787 = _785.x;
    float _788 = 1.0 - _787;
    float _813 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_787 - _788) * cbMtdParam._m0[24u].w) + _788) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4106 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _814 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _822 = ((((cbMtdParam._m0[10u].x - _771) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _814) + _771;
    float _823 = ((((cbMtdParam._m0[10u].y - _772) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _814) + _772;
    float _824 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _773)) * _814) + _773;
    vec4 _850 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _852 = _850.x;
    float _869 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _852) * _488) + _852;
    float _886 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _869) * _561) + _869;
    float _890 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _886) * cbMtdParam._m0[19u].z) + _886;
    float _892 = _890 - (_890 * _764);
    float _894 = _892 - (_892 * _814);
    float _899 = (((_612.z - _690) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _690;
    float _903 = ((_714.z - _899) * cbMtdParam._m0[19u].w) + _899;
    vec4 _917 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _924 = (_917.x * 2.0) + (-1.0);
    float _925 = (_917.y * 2.0) + (-1.0);
    float _926 = dot(vec2(_924, _925), vec2(_924, _925));
    float _4117 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _934 = (_764 * (_917.z - _903)) + _903;
    float _937 = ((cbMtdParam._m0[23u].x - _934) * _814) + _934;
    vec4 _958 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _964 = (_958.x * 2.0) + (-1.0);
    float _965 = (_958.y * 2.0) + (-1.0);
    float _966 = dot(vec2(_964, _965), vec2(_964, _965));
    float _4128 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _980 = (_693 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_612.x * 2.0) + (-1.0)))) + (((_714.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _981 = (_694 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_612.y * 2.0) + (-1.0)))) + (((_714.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _993 = (((_924 - _980) + (cbMtdParam._m0[21u].x * _980)) * _764) + _980;
    float _994 = (((_925 - _981) + (cbMtdParam._m0[21u].x * _981)) * _764) + _981;
    float _995 = (_764 * (sqrt(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) - _700)) + _700;
    float _1006 = (((_964 - _993) + (_993 * cbMtdParam._m0[22u].z)) * _814) + _993;
    float _1007 = (((_965 - _994) + (_994 * cbMtdParam._m0[22u].z)) * _814) + _994;
    float _1008 = ((sqrt(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) - _995) * _814) + _995;
    float _1010 = cbMtdParam._m0[22u].x + _714.w;
    float _1013 = fma(_1008, _265 * NORMAL.x, fma(_1007, _272 * TANGENT.x, (_258 * _250) * _1006));
    float _1016 = fma(_1008, _265 * NORMAL.y, fma(_1007, _272 * TANGENT.y, (_258 * _251) * _1006));
    float _1019 = fma(_1008, _265 * NORMAL.z, fma(_1007, _272 * TANGENT.z, (_258 * _252) * _1006));
    float _1023 = inversesqrt(dot(vec3(_1013, _1016, _1019), vec3(_1013, _1016, _1019)));
    float _1024 = _1023 * _1013;
    float _1025 = _1023 * _1016;
    float _1026 = _1023 * _1019;
    float _4139 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _1027 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _4161 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4172 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4183 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4194 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _1032 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _1046 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1096 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1086);
    float _1097 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1086);
    float _1098 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1086);
    float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
    float _1103 = _1096 * _1102;
    float _1104 = _1097 * _1102;
    float _1105 = _1098 * _1102;
    vec4 _1110 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1112 = _1110.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1284 = sqrt(((_1096 * _1096) + (_1097 * _1097)) + (_1098 * _1098));
        float _1290 = (cbMatDynParam._m0[5u].x * _1284) + cbMatDynParam._m0[5u].y;
        float _4205 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1295 = (cbMatDynParam._m0[5u].z * _1284) + cbMatDynParam._m0[5u].w;
        float _4216 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) - _1291)) + _1291) < ((_1112 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1123 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1124 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1142 = fma(_1026, cbSceneParam._m0[5u].z, fma(_1025, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1024));
    float _1145 = fma(_1026, cbSceneParam._m0[6u].z, fma(_1025, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1024));
    float _1148 = fma(_1026, cbSceneParam._m0[7u].z, fma(_1025, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1024));
    uint _1161 = _297 + 9u;
    uint _1162 = _1161 + uint(cbMatDynParam._m0[0u].w);
    float _1168 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_1162].x;
    float _1169 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * cbInstanceData._m0[_1162].y;
    float _1170 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * cbInstanceData._m0[_1162].z;
    float _4227 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1171 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1172 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _1174 = 1.0 - _1032;
    float _1175 = _1171 * _1174;
    float _1176 = _1172 * _1174;
    float _1177 = _1173 * _1174;
    float _1182 = (_1171 + (-0.039999999105930328369140625)) * _1032;
    float _1183 = (_1172 + (-0.039999999105930328369140625)) * _1032;
    float _1184 = (_1173 + (-0.039999999105930328369140625)) * _1032;
    float _1185 = _1182 + 0.039999999105930328369140625;
    float _1187 = _1183 + 0.039999999105930328369140625;
    float _1188 = _1184 + 0.039999999105930328369140625;
    vec4 _1197 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1123, cbSceneParam._m0[86u].y * _1124));
    float _1201 = ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * TEXCOORD_5.w) * _1197.x;
    float _1202 = dot(vec3(_1024, _1025, _1026), vec3(_1103, _1104, _1105));
    float _1205 = _1202 * 2.0;
    float _1209 = (_1205 * _1024) - _1103;
    float _1210 = (_1205 * _1025) - _1104;
    float _1211 = (_1205 * _1026) - _1105;
    float _1215 = abs(dot(vec3(_1103, _1104, _1105), vec3(_1024, _1025, _1026)));
    float _4260 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _1217 = sqrt(_1027);
    float _1230 = exp2((_1217 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1217 * 3.0));
    float _1236 = (1.0 - _1230) * ((_1217 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1237 = _1230 * _1217;
    float _1265 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1269 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1273 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1602;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1327 = fma(_1273, cbModelParam._m0[26u].z, fma(_1269, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265));
        float _1331 = fma(_1273, cbModelParam._m0[27u].z, fma(_1269, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265));
        float _1335 = fma(_1273, cbModelParam._m0[28u].z, fma(_1269, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265));
        float _1360 = _1265 + _1024;
        float _1361 = _1269 + _1025;
        float _1362 = _1273 + _1026;
        float _1372 = fma(_1362, cbModelParam._m0[26u].z, fma(_1361, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1360)) - _1327;
        float _1373 = fma(_1362, cbModelParam._m0[27u].z, fma(_1361, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1360)) - _1331;
        float _1374 = fma(_1362, cbModelParam._m0[28u].z, fma(_1361, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1360)) - _1335;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1327 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1331 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[34u].z) + ((((((_1335 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1430 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1396.x + (-0.5));
        float _1432 = _1430 * (_1396.y + (-0.5));
        float _1433 = _1430 * (_1396.z + (-0.5));
        float _1440 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1403.x + (-0.5));
        float _1442 = _1440 * (_1403.y + (-0.5));
        float _1443 = _1440 * (_1403.z + (-0.5));
        float _1450 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1410.x + (-0.5));
        float _1452 = _1450 * (_1410.y + (-0.5));
        float _1453 = _1450 * (_1410.z + (-0.5));
        float _1460 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1417.x + (-0.5));
        float _1462 = _1460 * (_1417.y + (-0.5));
        float _1463 = _1460 * (_1417.z + (-0.5));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = _1431 * 0.5;
        float _1468 = _1441 * 0.5;
        float _1469 = _1451 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1484 = (dot(vec3(_1024, _1025, _1026), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1494 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4308 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1496 + 1.0))) + _1501) * _1464;
        float _1511 = _1432 * 0.5;
        float _1512 = _1442 * 0.5;
        float _1513 = _1452 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_1024, _1025, _1026), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4341 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1538 + 1.0))) + _1543) * _1465;
        float _1553 = _1433 * 0.5;
        float _1554 = _1443 * 0.5;
        float _1555 = _1453 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_1024, _1025, _1026), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4374 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1580 + 1.0))) + _1585) * _1466;
        _1602 = _1433;
        _1604 = _1432;
        _1605 = _1431;
        _1606 = _1443;
        _1607 = _1442;
        _1608 = _1441;
        _1609 = _1453;
        _1610 = _1452;
        _1611 = _1451;
        _1612 = _1466;
        _1613 = _1465;
        _1614 = _1464;
        _1615 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1616 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1617 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1603;
        _1604 = _1603;
        _1605 = _1603;
        _1606 = _1603;
        _1607 = _1603;
        _1608 = _1603;
        _1609 = _1603;
        _1610 = _1603;
        _1611 = _1603;
        _1612 = _1603;
        _1613 = _1603;
        _1614 = _1603;
        _1615 = 0.0;
        _1616 = 0.0;
        _1617 = 0.0;
    }
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1644 = fma(_1273, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1265));
        float _1648 = fma(_1273, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1265));
        float _1652 = fma(_1273, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1265));
        float _1675 = _1265 + _1024;
        float _1676 = _1269 + _1025;
        float _1677 = _1273 + _1026;
        float _1687 = fma(_1677, cbModelParam._m0[30u].z, fma(_1676, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1675)) - _1644;
        float _1688 = fma(_1677, cbModelParam._m0[31u].z, fma(_1676, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1675)) - _1648;
        float _1689 = fma(_1677, cbModelParam._m0[32u].z, fma(_1676, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1675)) - _1652;
        float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
        float _1706 = ((_1693 * _1687) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1644 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1707 = ((_1693 * _1688) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1648 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1708 = ((_1693 * _1689) / cbModelParam._m0[35u].z) + ((((((_1652 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        vec4 _1731 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1706, _1707, _1708), 0.0);
        float _1743 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1710.x + (-0.5));
        float _1745 = _1743 * (_1710.y + (-0.5));
        float _1746 = _1743 * (_1710.z + (-0.5));
        float _1753 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1717.x + (-0.5));
        float _1755 = _1753 * (_1717.y + (-0.5));
        float _1756 = _1753 * (_1717.z + (-0.5));
        float _1763 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1724.x + (-0.5));
        float _1765 = _1763 * (_1724.y + (-0.5));
        float _1766 = _1763 * (_1724.z + (-0.5));
        float _1773 = exp2((_1731.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1731.x + (-0.5));
        float _1775 = _1773 * (_1731.y + (-0.5));
        float _1776 = _1773 * (_1731.z + (-0.5));
        float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1778 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = _1744 * 0.5;
        float _1781 = _1754 * 0.5;
        float _1782 = _1764 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_1024, _1025, _1026), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1777 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4437 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1807 + 1.0))) + _1812) * _1777;
        float _1822 = _1745 * 0.5;
        float _1823 = _1755 * 0.5;
        float _1824 = _1765 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_1024, _1025, _1026), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1778 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4470 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1849 + 1.0))) + _1854) * _1778;
        float _1864 = _1746 * 0.5;
        float _1865 = _1756 * 0.5;
        float _1866 = _1766 * 0.5;
        float _1867 = dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866));
        float _1872 = (_1867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1867);
        float _1880 = (dot(vec3(_1024, _1025, _1026), vec3(_1872 * _1864, _1872 * _1865, _1872 * _1866)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1889 = sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1891 = _1890 * 2.0;
        float _1895 = (1.0 - _1890) / (_1890 + 1.0);
        float _4503 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1905 = ((((1.0 - _1896) * (_1891 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1891 + 1.0))) + _1896) * _1779;
        _1913 = _1746;
        _1914 = _1745;
        _1915 = _1744;
        _1916 = _1756;
        _1917 = _1755;
        _1918 = _1754;
        _1919 = _1766;
        _1920 = _1765;
        _1921 = _1764;
        _1922 = _1779;
        _1923 = _1778;
        _1924 = _1777;
        _1925 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
        _1926 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
        _1927 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)));
    }
    else
    {
        _1913 = _1603;
        _1914 = _1603;
        _1915 = _1603;
        _1916 = _1603;
        _1917 = _1603;
        _1918 = _1603;
        _1919 = _1603;
        _1920 = _1603;
        _1921 = _1603;
        _1922 = _1603;
        _1923 = _1603;
        _1924 = _1603;
        _1925 = 0.0;
        _1926 = 0.0;
        _1927 = 0.0;
    }
    float _1937 = (cbModelParam._m0[1u].x * (_1925 - _1615)) + _1615;
    float _1938 = (cbModelParam._m0[1u].x * (_1926 - _1616)) + _1616;
    float _1939 = (cbModelParam._m0[1u].x * (_1927 - _1617)) + _1617;
    float _1960 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1937));
    float _1981 = _1209 * 0.5;
    float _1982 = _1210 * 0.5;
    float _1983 = _1211 * 0.5;
    float _1984 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1915, _1918, _1921, _1924));
    float _1987 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1914, _1917, _1920, _1923));
    float _1990 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1913, _1916, _1919, _1922));
    float _2024;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1997 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1602, _1606, _1609, _1612));
        float _2001 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1604, _1607, _1610, _1613));
        float _2005 = dot(vec4(_1981, _1982, _1983, 1.0), vec4(_1605, _1608, _1611, _1614));
        float _2012 = dot(vec4(cbModelParam._m0[39u]), vec4(_1981, _1982, _1983, 1.0));
        _2024 = dot(vec3(isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)), isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)), isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2012) ? 0.0 : (isnan(0.0) ? _2012 : max(0.0, _2012))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2024 = 1.0;
    }
    float _2035;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2026 = dot(vec4(cbModelParam._m0[40u]), vec4(_1981, _1982, _1983, 1.0));
        _2035 = dot(vec3(isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2026) ? 0.0 : (isnan(0.0) ? _2026 : max(0.0, _2026))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2035 = 1.0;
    }
    float _2039 = (_2035 * cbModelParam._m0[1u].x) + (_2024 * (1.0 - cbModelParam._m0[1u].x));
    float _2049 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1027);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2049 : min(cbModelParam._m0[25u].z, _2049));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2098 = fma(_1273, cbModelParam._m0[13u].z, fma(_1269, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1265)) + cbModelParam._m0[13u].w;
        float _2102 = fma(_1273, cbModelParam._m0[14u].z, fma(_1269, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1265)) + cbModelParam._m0[14u].w;
        float _2106 = fma(_1273, cbModelParam._m0[15u].z, fma(_1269, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1265)) + cbModelParam._m0[15u].w;
        float _2109 = fma(_1211, cbModelParam._m0[13u].z, fma(_1210, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1209));
        float _2112 = fma(_1211, cbModelParam._m0[14u].z, fma(_1210, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1209));
        float _2115 = fma(_1211, cbModelParam._m0[15u].z, fma(_1210, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1209));
        float _2143;
        if (_2109 > 0.0)
        {
            _2143 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2143 = frontier_phi_17_15_ladder;
        }
        float _2367;
        if (_2112 > 0.0)
        {
            _2367 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2367 = frontier_phi_26_22_ladder;
        }
        float _2624;
        if (_2115 > 0.0)
        {
            _2624 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2624 = frontier_phi_38_33_ladder;
        }
        float _2626 = isnan(_2367) ? _2143 : (isnan(_2143) ? _2367 : min(_2143, _2367));
        float _2627 = isnan(_2624) ? _2626 : (isnan(_2626) ? _2624 : min(_2626, _2624));
        float _2631 = (_2627 * _2109) + _2098;
        float _2632 = (_2627 * _2112) + _2102;
        float _2633 = (_2627 * _2115) + _2106;
        float _2634 = _2627 * 9.9999997473787516355514526367188e-05;
        float _2636 = (-1.0) - _2634;
        float _2638 = _2634 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2633 > _2638) || ((_2633 < _2636) || ((_2632 > _2638) || ((_2632 < _2636) || ((_2631 < _2636) || (_2631 > _2638))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2761 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2633, cbModelParam._m0[9u].z, fma(_2632, cbModelParam._m0[9u].y, _2631 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2633, cbModelParam._m0[10u].z, fma(_2632, cbModelParam._m0[10u].y, _2631 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2633, cbModelParam._m0[11u].z, fma(_2632, cbModelParam._m0[11u].y, _2631 * cbModelParam._m0[11u].x))), _2050);
            frontier_phi_16_38_ladder = _2761.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2761.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2761.x * cbModelParam._m0[1u].y;
        }
        _2131 = frontier_phi_16_38_ladder_2;
        _2133 = frontier_phi_16_38_ladder_1;
        _2135 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1209, _1210, _1211), _2050);
        _2131 = _2119.x * cbModelParam._m0[1u].y;
        _2133 = _2119.y * cbModelParam._m0[1u].y;
        _2135 = _2119.z * cbModelParam._m0[1u].y;
    }
    float _2139 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1027);
    float _2140 = isnan(_2139) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2139 : min(cbModelParam._m0[25u].w, _2139));
    float _2230;
    float _2232;
    float _2234;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2194 = fma(_1273, cbModelParam._m0[21u].z, fma(_1269, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1265)) + cbModelParam._m0[21u].w;
        float _2198 = fma(_1273, cbModelParam._m0[22u].z, fma(_1269, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1265)) + cbModelParam._m0[22u].w;
        float _2202 = fma(_1273, cbModelParam._m0[23u].z, fma(_1269, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1265)) + cbModelParam._m0[23u].w;
        float _2205 = fma(_1211, cbModelParam._m0[21u].z, fma(_1210, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1209));
        float _2208 = fma(_1211, cbModelParam._m0[22u].z, fma(_1210, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1209));
        float _2211 = fma(_1211, cbModelParam._m0[23u].z, fma(_1210, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1209));
        float _2372;
        if (_2205 > 0.0)
        {
            _2372 = abs((1.0 - _2194) / _2205);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2205 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2194 + 1.0) / _2205);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2372 = frontier_phi_28_24_ladder;
        }
        float _2651;
        if (_2208 > 0.0)
        {
            _2651 = abs((1.0 - _2198) / _2208);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2208 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2198 + 1.0) / _2208);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2651 = frontier_phi_40_35_ladder;
        }
        float _2864;
        if (_2211 > 0.0)
        {
            _2864 = abs((1.0 - _2202) / _2211);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2211 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2202 + 1.0) / _2211);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2864 = frontier_phi_49_46_ladder;
        }
        float _2866 = isnan(_2651) ? _2372 : (isnan(_2372) ? _2651 : min(_2372, _2651));
        float _2867 = isnan(_2864) ? _2866 : (isnan(_2866) ? _2864 : min(_2866, _2864));
        float _2871 = (_2867 * _2205) + _2194;
        float _2872 = (_2867 * _2208) + _2198;
        float _2873 = (_2867 * _2211) + _2202;
        float _2874 = _2867 * 9.9999997473787516355514526367188e-05;
        float _2875 = (-1.0) - _2874;
        float _2877 = _2874 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2873 > _2877) || ((_2873 < _2875) || ((_2872 > _2877) || ((_2872 < _2875) || ((_2871 < _2875) || (_2871 > _2877))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3072 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2873, cbModelParam._m0[17u].z, fma(_2872, cbModelParam._m0[17u].y, _2871 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2873, cbModelParam._m0[18u].z, fma(_2872, cbModelParam._m0[18u].y, _2871 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2873, cbModelParam._m0[19u].z, fma(_2872, cbModelParam._m0[19u].y, _2871 * cbModelParam._m0[19u].x))), _2140);
            frontier_phi_25_49_ladder = _3072.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3072.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3072.x * cbModelParam._m0[1u].z;
        }
        _2230 = frontier_phi_25_49_ladder_2;
        _2232 = frontier_phi_25_49_ladder_1;
        _2234 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2214 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1209, _1210, _1211), _2140);
        _2230 = _2214.x * cbModelParam._m0[1u].z;
        _2232 = _2214.y * cbModelParam._m0[1u].z;
        _2234 = _2214.z * cbModelParam._m0[1u].z;
    }
    float _2247 = (((_1236 * _1185) + _1237) * _1201) * ((cbModelParam._m0[1u].w * (_2230 - _2131)) + _2131);
    float _2249 = (((_1236 * _1187) + _1237) * _1201) * ((cbModelParam._m0[1u].w * (_2232 - _2133)) + _2133);
    float _2251 = (((_1236 * _1188) + _1237) * _1201) * ((cbModelParam._m0[1u].w * (_2234 - _2135)) + _2135);
    float _2254 = fma(_2251, cbSceneParam._m0[89u].z, fma(_2249, cbSceneParam._m0[89u].y, _2247 * cbSceneParam._m0[89u].x));
    float _2257 = fma(_2251, cbSceneParam._m0[90u].z, fma(_2249, cbSceneParam._m0[90u].y, _2247 * cbSceneParam._m0[90u].x));
    float _2260 = fma(_2251, cbSceneParam._m0[91u].z, fma(_2249, cbSceneParam._m0[91u].y, _2247 * cbSceneParam._m0[91u].x));
    vec4 _2268 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1123, _1124));
    float _2270 = _2268.w;
    float _2282 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2270);
    float _2283 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2270);
    float _2284 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2270);
    uvec4 _2288 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2290 = _2288.x * 14u;
    uint _2291 = _2290 + 13u;
    float _2298 = _1201 + (-1.0);
    float _2303 = (cbLight._m0[_2291].x * _2298) + 1.0;
    float _2304 = (cbLight._m0[_2291].y * _2298) + 1.0;
    float _2305 = (cbLight._m0[_2291].z * _2298) + 1.0;
    float _2306 = (cbLight._m0[_2291].w * _2298) + 1.0;
    uint _2307 = _2290 + 5u;
    float _2313 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2317 = _2290 + 4u;
    float _2326 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2330 = _2290 | 1u;
    float _2341 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_1024, _1025, _1026));
    float _2344 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_1024, _1025, _1026));
    float _4639 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _4650 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2349 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * 0.3183098733425140380859375;
    float _2351 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * 0.3183098733425140380859375;
    float _2358 = ((cbLight._m0[_2307].x * _2313) * _2351) + (((cbLight._m0[_2317].x * _2282) * _2326) * _2349);
    float _2359 = ((_2313 * cbLight._m0[_2307].y) * _2351) + (((cbLight._m0[_2317].y * _2283) * _2326) * _2349);
    float _2360 = ((_2313 * cbLight._m0[_2307].z) * _2351) + (((cbLight._m0[_2317].z * _2284) * _2326) * _2349);
    uvec4 _2364 = floatBitsToUint(cbLight._m0[_2290 + 12u]);
    bool _2366 = _2364.x == 0u;
    float _2377;
    float _2379;
    float _2381;
    if (_2366)
    {
        _2377 = _2358;
        _2379 = _2359;
        _2381 = _2360;
    }
    else
    {
        uint _2385 = _2290 + 6u;
        float _2401 = (dot(vec3(cbLight._m0[_2290 + 2u].xyz), vec3(_1024, _1025, _1026)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4661 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2404 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2377 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2358;
        _2379 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2359;
        _2381 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2360;
    }
    bool _2384 = _2364.y == 0u;
    float _2422;
    float _2424;
    float _2426;
    if (_2384)
    {
        _2422 = _2377;
        _2424 = _2379;
        _2426 = _2381;
    }
    else
    {
        uint _2595 = _2290 + 7u;
        float _2611 = (dot(vec3(cbLight._m0[_2290 + 3u].xyz), vec3(_1024, _1025, _1026)) * 0.5) + 0.5;
        float _2612 = _2611 * _2611;
        float _4677 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2613 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2614 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2422 = (((cbLight._m0[_2595].x * 0.3183098733425140380859375) * _2613) * _2614) + _2377;
        _2424 = (((cbLight._m0[_2595].y * 0.3183098733425140380859375) * _2613) * _2614) + _2379;
        _2426 = (((cbLight._m0[_2595].z * 0.3183098733425140380859375) * _2613) * _2614) + _2381;
    }
    uint _2429 = _2290 + 8u;
    float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _1027) * 0.949999988079071044921875);
    float _2443 = _2442 * _2442;
    float _2444 = cbLight._m0[_2290].x + _1103;
    float _2445 = cbLight._m0[_2290].y + _1104;
    float _2446 = cbLight._m0[_2290].z + _1105;
    float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
    float _2451 = _2450 * _2444;
    float _2452 = _2450 * _2445;
    float _2453 = _2450 * _2446;
    float _2454 = dot(vec3(_1024, _1025, _1026), vec3(cbLight._m0[_2290].xyz));
    float _4693 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _4704 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _2458 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2459 = dot(vec3(_1024, _1025, _1026), vec3(_2451, _2452, _2453));
    float _4715 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2463 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2451, _2452, _2453));
    float _4726 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2467 = _2443 * _2443;
    float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
    float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0);
    float _2480 = 0.959999978542327880859375 - _1182;
    float _2482 = 0.959999978542327880859375 - _1183;
    float _2483 = 0.959999978542327880859375 - _1184;
    float _2490 = 1.0 - _2443;
    float _2501 = (0.5 / (((_2458 * ((_2457 * _2490) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2458 * _2490) + _2443) * _2457))) * _2457;
    float _4737 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2503 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
    uint _2517 = _2290 + 9u;
    float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _1027) * 0.949999988079071044921875);
    float _2529 = _2528 * _2528;
    float _2530 = cbLight._m0[_2330].x + _1103;
    float _2531 = cbLight._m0[_2330].y + _1104;
    float _2532 = cbLight._m0[_2330].z + _1105;
    float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
    float _2537 = _2536 * _2530;
    float _2538 = _2536 * _2531;
    float _2539 = _2536 * _2532;
    float _2540 = dot(vec3(_1024, _1025, _1026), vec3(cbLight._m0[_2330].xyz));
    float _4748 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2544 = dot(vec3(_1024, _1025, _1026), vec3(_2537, _2538, _2539));
    float _4759 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2548 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2537, _2538, _2539));
    float _4770 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2552 = _2529 * _2529;
    float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
    float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0);
    float _2570 = 1.0 - _2529;
    float _2580 = (0.5 / (((_2458 * ((_2543 * _2570) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2458 * _2570) + _2529) * _2543))) * _2543;
    float _4781 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2582 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
    float _2592 = (((((_2563 * _2480) + _1185) * cbLight._m0[_2517].x) * _2582) * _2313) + ((((cbLight._m0[_2429].x * _2282) * ((_2479 * _2480) + _1185)) * _2503) * _2326);
    float _2593 = (((((_2563 * _2482) + _1187) * cbLight._m0[_2517].y) * _2582) * _2313) + ((((cbLight._m0[_2429].y * _2283) * ((_2479 * _2482) + _1187)) * _2503) * _2326);
    float _2594 = (((((_2563 * _2483) + _1188) * cbLight._m0[_2517].z) * _2582) * _2313) + ((((cbLight._m0[_2429].z * _2284) * ((_2479 * _2483) + _1188)) * _2503) * _2326);
    float _2656;
    float _2658;
    float _2660;
    if (_2366)
    {
        _2656 = _2592;
        _2658 = _2593;
        _2660 = _2594;
    }
    else
    {
        uint _2662 = _2290 + 2u;
        uint _2666 = _2290 + 10u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _1027) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _1103;
        float _2683 = cbLight._m0[_2662].y + _1104;
        float _2684 = cbLight._m0[_2662].z + _1105;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_1024, _1025, _1026), vec3(cbLight._m0[_2662].xyz));
        float _4792 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2696 = dot(vec3(_1024, _1025, _1026), vec3(_2689, _2690, _2691));
        float _4803 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4814 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2715 = exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0);
        float _2722 = 1.0 - _2681;
        float _2732 = (0.5 / (((_2458 * ((_2695 * _2722) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2458 * _2722) + _2681) * _2695))) * _2695;
        float _4825 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2734 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2735 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2656 = (((((_2715 * _2480) + _1185) * cbLight._m0[_2666].x) * _2734) * _2735) + _2592;
        _2658 = (((((_2715 * _2482) + _1187) * cbLight._m0[_2666].y) * _2734) * _2735) + _2593;
        _2660 = (((((_2715 * _2483) + _1188) * cbLight._m0[_2666].z) * _2734) * _2735) + _2594;
    }
    float _2770;
    float _2772;
    float _2774;
    if (_2384)
    {
        _2770 = _2656;
        _2772 = _2658;
        _2774 = _2660;
    }
    else
    {
        uint _2781 = _2290 + 3u;
        uint _2785 = _2290 + 11u;
        float _2799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2781].w)) * _1027) * 0.949999988079071044921875);
        float _2800 = _2799 * _2799;
        float _2801 = cbLight._m0[_2781].x + _1103;
        float _2802 = cbLight._m0[_2781].y + _1104;
        float _2803 = cbLight._m0[_2781].z + _1105;
        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
        float _2808 = _2807 * _2801;
        float _2809 = _2807 * _2802;
        float _2810 = _2807 * _2803;
        float _2811 = dot(vec3(_1024, _1025, _1026), vec3(cbLight._m0[_2781].xyz));
        float _4841 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2815 = dot(vec3(_1024, _1025, _1026), vec3(_2808, _2809, _2810));
        float _4852 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2819 = dot(vec3(cbLight._m0[_2781].xyz), vec3(_2808, _2809, _2810));
        float _4863 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2823 = _2800 * _2800;
        float _2827 = ((_2818 * _2818) * (_2823 + (-1.0))) + 1.0;
        float _2834 = exp2(log2(1.0 - (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) * 5.0);
        float _2841 = 1.0 - _2800;
        float _2851 = (0.5 / (((_2458 * ((_2814 * _2841) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2458 * _2841) + _2800) * _2814))) * _2814;
        float _4874 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2853 = (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2823 / ((_2827 * _2827) * 3.141590118408203125));
        float _2854 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2770 = (((((_2834 * _2480) + _1185) * cbLight._m0[_2785].x) * _2853) * _2854) + _2656;
        _2772 = (((((_2834 * _2482) + _1187) * cbLight._m0[_2785].y) * _2853) * _2854) + _2658;
        _2774 = (((((_2834 * _2483) + _1188) * cbLight._m0[_2785].z) * _2853) * _2854) + _2660;
    }
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    if (_2288.y == 0u)
    {
        float _2929 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2930 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2929;
        float _2931 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2929;
        float _2932 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2929;
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.x;
        uint _2956 = uint((float(_2944.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1124) / _2945))) + floor(float(uint(cbSceneParam._m0[85u].x * _1123) / _2945)));
        float _2966 = (log2(_2932 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2967 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        uint _2970 = uint(isnan(14.0) ? _2967 : (isnan(_2967) ? 14.0 : min(_2967, 14.0)));
        uvec4 _2975 = texelFetch(g_lightClusterGridBuffer, int(((_2970 << 2u) + (_2956 << 6u)) >> 2u));
        uint _2976 = _2975.x;
        uint _2977 = _2944.z;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        if (((((1u << ((_2977 >> 4u) & 15u)) + 4294967295u) & _2976) == 0u) || ((_2977 & 240u) == 0u))
        {
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
        }
        else
        {
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            uint _3236 = 0u;
            uint _3245;
            bool _3246;
            for (;;)
            {
                _3245 = texelFetch(g_lightClassification, int((((_2970 << 5u) + (_2956 << 9u)) + (_3236 << 2u)) >> 2u)).x;
                _3246 = _3245 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3246)
                {
                    frontier_phi_66_pred = _3230;
                    frontier_phi_66_pred_1 = _3235;
                    frontier_phi_66_pred_2 = _3234;
                    frontier_phi_66_pred_3 = _3233;
                    frontier_phi_66_pred_4 = _3232;
                    frontier_phi_66_pred_5 = _3231;
                }
                else
                {
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    uint _3381;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3245;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    for (;;)
                    {
                        uint _3385 = uint(findLSB(_3381)) + (_3236 << 5u);
                        uint _3382 = (_3381 + 4294967295u) & _3381;
                        uint _3387 = _3385 * 48u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 3u)).x));
                        uint _3407 = (_3385 * 48u) + 4u;
                        vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 3u)).x));
                        uint _3426 = (_3385 * 48u) + 8u;
                        vec3 _3437 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3426)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 2u)).x));
                        float _3441 = _3401.x - _2930;
                        float _3442 = _3401.y - _2931;
                        float _3443 = _3401.z - _2932;
                        float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                        float _3447 = inversesqrt(_3444);
                        float _3448 = _3447 * _3441;
                        float _3449 = _3447 * _3442;
                        float _3450 = _3447 * _3443;
                        float _3451 = dot(vec3(_1142, _1145, _1148), vec3(_3448, _3449, _3450));
                        float _3456 = 1.0 - (_3444 * _3401.w);
                        float _4900 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3457 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3458 = sqrt(_3444) * _3420.w;
                        float _3461 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3451) + _3462;
                        float _3468 = _3458 * _3458;
                        float _3472 = ((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3457) / ((_3468 * 0.699999988079071044921875) + 1.0);
                        float _3476 = (-0.0) - _2930;
                        float _3477 = (-0.0) - _2931;
                        float _3478 = (-0.0) - _2932;
                        float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                        float _3483 = _3482 * _3476;
                        float _3484 = _3482 * _3477;
                        float _3485 = _3482 * _3478;
                        float _3493 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                        float _3494 = 1.0 - _1217;
                        float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                        float _3502 = _3501 * _3501;
                        float _3503 = _3502 * _3502;
                        float _3504 = _3483 + _3448;
                        float _3505 = _3484 + _3449;
                        float _3506 = _3485 + _3450;
                        float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                        float _3514 = dot(vec3(_1142, _1145, _1148), vec3(_3483, _3484, _3485));
                        float _4916 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3517 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3518 = dot(vec3(_1142, _1145, _1148), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                        float _4927 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                        float _3526 = _3461 * _3502;
                        float _3527 = _3526 * _3526;
                        float _3530 = ((1.0 - _3527) * _3451) + _3527;
                        float _4938 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3531 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3532 = 1.0 - _3502;
                        float _3542 = (0.5 / (((_3531 * ((_3517 * _3532) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3502) * _3517))) * _3531;
                        float _4949 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3553 = (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) / ((_3525 * _3525) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125))) * _3457;
                        _3305 = (_3472 * _3420.x) + _3378;
                        _3306 = (_3472 * _3420.y) + _3379;
                        _3307 = (_3472 * _3420.z) + _3380;
                        _3302 = (_3553 * _3437.x) + _3375;
                        _3303 = (_3553 * _3437.y) + _3376;
                        _3304 = (_3553 * _3437.z) + _3377;
                        if (_3382 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3382;
                        }
                    }
                    frontier_phi_66_pred = _3302;
                    frontier_phi_66_pred_1 = _3307;
                    frontier_phi_66_pred_2 = _3306;
                    frontier_phi_66_pred_3 = _3305;
                    frontier_phi_66_pred_4 = _3304;
                    frontier_phi_66_pred_5 = _3303;
                }
                _3078 = frontier_phi_66_pred;
                _3088 = frontier_phi_66_pred_1;
                _3086 = frontier_phi_66_pred_2;
                _3084 = frontier_phi_66_pred_3;
                _3082 = frontier_phi_66_pred_4;
                _3080 = frontier_phi_66_pred_5;
                uint _3237 = _3236 + 1u;
                if (_3237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3230 = _3078;
                    _3231 = _3080;
                    _3232 = _3082;
                    _3233 = _3084;
                    _3234 = _3086;
                    _3235 = _3088;
                    _3236 = _3237;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
        }
        uvec4 _3091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3092 = _3091.z;
        uint _3094 = (_3092 >> 8u) & 15u;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        if (((4294967295u << _3094) & _2976) == 0u)
        {
            _3198 = _3077;
            _3200 = _3079;
            _3202 = _3081;
            _3204 = _3083;
            _3206 = _3085;
            _3208 = _3087;
        }
        else
        {
            float _3223 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
            float _3224 = _3223 * _2930;
            float _3225 = _3223 * _2931;
            float _3226 = _3223 * _2932;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3094 < ((_3092 >> 12u) & 15u))
            {
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3358 = _3077;
                float _3359 = _3079;
                float _3360 = _3081;
                float _3361 = _3083;
                float _3362 = _3085;
                float _3363 = _3087;
                uint _3364 = _3094;
                uint _3373;
                bool _3374;
                for (;;)
                {
                    _3373 = texelFetch(g_lightClassification, int((((_2970 << 5u) + (_2956 << 9u)) + (_3364 << 2u)) >> 2u)).x;
                    _3374 = _3373 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3374)
                    {
                        frontier_phi_77_pred = _3363;
                        frontier_phi_77_pred_1 = _3362;
                        frontier_phi_77_pred_2 = _3361;
                        frontier_phi_77_pred_3 = _3360;
                        frontier_phi_77_pred_4 = _3359;
                        frontier_phi_77_pred_5 = _3358;
                    }
                    else
                    {
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3580 = _3358;
                        float _3581 = _3359;
                        float _3582 = _3360;
                        float _3583 = _3361;
                        float _3584 = _3362;
                        float _3585 = _3363;
                        uint _3586 = _3373;
                        uint _3587;
                        vec4 _3612;
                        float _3613;
                        vec4 _3628;
                        vec3 _3640;
                        vec4 _3655;
                        vec4 _3670;
                        float _3716;
                        bool _3717;
                        for (;;)
                        {
                            uint _3597 = ((_3364 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3586));
                            _3587 = (_3586 + 4294967295u) & _3586;
                            uint _3599 = _3597 * 40u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3613 = _3612.w;
                            uint _3615 = (_3597 * 40u) + 4u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3597 * 40u) + 8u;
                            _3640 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x));
                            uint _3642 = (_3597 * 40u) + 16u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3597 * 40u) + 20u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3597 * 40u) + 24u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3691 = (_3597 * 40u) + 28u;
                            vec4 _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            _3716 = fma(_2932, _3704.z, fma(_2931, _3704.y, _3704.x * _2930)) + _3704.w;
                            _3717 = !((fma(_2932, _3685.z, fma(_2931, _3685.y, _3685.x * _2930)) + _3685.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3717)
                            {
                                float _3744 = _3612.x - _2930;
                                float _3745 = _3612.y - _2931;
                                float _3746 = _3612.z - _2932;
                                float _3747 = dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746));
                                float _3750 = inversesqrt(_3747);
                                float _3751 = _3750 * _3744;
                                float _3752 = _3750 * _3745;
                                float _3753 = _3750 * _3746;
                                float _3757 = 1.0 - (_3747 / (_3613 * _3613));
                                float _4960 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3762 = sqrt(_3747) * _3628.w;
                                float _3764 = 1.39999997615814208984375 / (_3762 + 1.39999997615814208984375);
                                float _3765 = _3764 * _3764;
                                float _3768 = ((1.0 - _3765) * dot(vec3(_3751, _3752, _3753), vec3(_1142, _1145, _1148))) + _3765;
                                float _3771 = _3762 * _3762;
                                float _3775 = (fma(_2932, _3655.z, fma(_2931, _3655.y, _3655.x * _2930)) + _3655.w) / _3716;
                                float _3776 = (fma(_2932, _3670.z, fma(_2931, _3670.y, _3670.x * _2930)) + _3670.w) / _3716;
                                float _3780 = 1.0 - dot(vec2(_3775, _3776), vec2(_3775, _3776));
                                float _4976 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3782 = _3781 * (((isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0))) * _3758) / ((_3771 * 0.699999988079071044921875) + 1.0));
                                float _3794 = exp2(log2(1.0 / ((_3771 * 3.5) + 5.0)) * 0.25);
                                float _3795 = 1.0 - _1217;
                                float _3802 = sqrt(1.0 - ((1.0 - (_3795 * _3795)) * (1.0 - (_3794 * _3794))));
                                float _3803 = _3802 * _3802;
                                float _3804 = _3803 * _3803;
                                float _3805 = _3751 - _3224;
                                float _3806 = _3752 - _3225;
                                float _3807 = _3753 - _3226;
                                float _3811 = inversesqrt(dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807)));
                                float _3815 = dot(vec3(_1142, _1145, _1148), vec3((-0.0) - _3224, (-0.0) - _3225, (-0.0) - _3226));
                                float _4987 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3818 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3819 = dot(vec3(_1142, _1145, _1148), vec3(_3811 * _3805, _3811 * _3806, _3811 * _3807));
                                float _4998 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3826 = ((_3822 * _3822) * (_3804 + (-1.0))) + 1.0;
                                float _3827 = _3764 * _3803;
                                float _3828 = _3827 * _3827;
                                float _3834 = ((1.0 - _3828) * dot(vec3(_1142, _1145, _1148), vec3(_3751, _3752, _3753))) + _3828;
                                float _5009 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3836 = 1.0 - _3803;
                                float _3846 = (0.5 / (((_3835 * ((_3818 * _3836) + _3803)) + 9.9999999392252902907785028219223e-09) + (((_3835 * _3836) + _3803) * _3818))) * _3835;
                                float _5020 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3856 = (_3781 * _3758) * (((_3804 * 3.1415927410125732421875) * (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0)))) / ((_3826 * _3826) * ((_3771 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3782 * _3628.y;
                                frontier_phi_83_pred_1 = _3782 * _3628.x;
                                frontier_phi_83_pred_2 = _3856 * _3640.z;
                                frontier_phi_83_pred_3 = _3856 * _3640.y;
                                frontier_phi_83_pred_4 = _3856 * _3640.x;
                                frontier_phi_83_pred_5 = _3782 * _3628.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3864 = frontier_phi_83_pred;
                            _3863 = frontier_phi_83_pred_1;
                            _3862 = frontier_phi_83_pred_2;
                            _3861 = frontier_phi_83_pred_3;
                            _3860 = frontier_phi_83_pred_4;
                            _3865 = frontier_phi_83_pred_5;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            if (_3587 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3587;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3572;
                        frontier_phi_77_pred_1 = _3571;
                        frontier_phi_77_pred_2 = _3570;
                        frontier_phi_77_pred_3 = _3569;
                        frontier_phi_77_pred_4 = _3568;
                        frontier_phi_77_pred_5 = _3567;
                    }
                    _3209 = frontier_phi_77_pred;
                    _3207 = frontier_phi_77_pred_1;
                    _3205 = frontier_phi_77_pred_2;
                    _3203 = frontier_phi_77_pred_3;
                    _3201 = frontier_phi_77_pred_4;
                    _3199 = frontier_phi_77_pred_5;
                    uint _3365 = _3364 + 1u;
                    if (_3365 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3358 = _3199;
                        _3359 = _3201;
                        _3360 = _3203;
                        _3361 = _3205;
                        _3362 = _3207;
                        _3363 = _3209;
                        _3364 = _3365;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3203;
                frontier_phi_58_59_ladder_1 = _3209;
                frontier_phi_58_59_ladder_2 = _3207;
                frontier_phi_58_59_ladder_3 = _3205;
                frontier_phi_58_59_ladder_4 = _3201;
                frontier_phi_58_59_ladder_5 = _3199;
            }
            else
            {
                frontier_phi_58_59_ladder = _3081;
                frontier_phi_58_59_ladder_1 = _3087;
                frontier_phi_58_59_ladder_2 = _3085;
                frontier_phi_58_59_ladder_3 = _3083;
                frontier_phi_58_59_ladder_4 = _3079;
                frontier_phi_58_59_ladder_5 = _3077;
            }
            _3198 = frontier_phi_58_59_ladder_5;
            _3200 = frontier_phi_58_59_ladder_4;
            _3202 = frontier_phi_58_59_ladder;
            _3204 = frontier_phi_58_59_ladder_3;
            _3206 = frontier_phi_58_59_ladder_2;
            _3208 = frontier_phi_58_59_ladder_1;
        }
        float _3213 = isnan(1.0) ? _1201 : (isnan(_1201) ? 1.0 : min(_1201, 1.0));
        _2989 = (_3213 * _3204) + _2422;
        _2991 = (_3213 * _3206) + _2424;
        _2993 = (_3213 * _3208) + _2426;
        _2995 = ((_3198 * _1185) * _3213) + _2770;
        _2997 = ((_3200 * _1187) * _3213) + _2772;
        _2999 = ((_3202 * _1188) * _3213) + _2774;
    }
    else
    {
        _2989 = _2422;
        _2991 = _2424;
        _2993 = _2426;
        _2995 = _2770;
        _2997 = _2772;
        _2999 = _2774;
    }
    float _5036 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _5047 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _5058 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _3016 = ((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_2989 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1201))) + ((_2995 + ((isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0))) * _2039)) * cbPerFrame._m0[3u].x);
    float _3017 = ((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_2991 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1201))) + ((_2997 + ((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _2039)) * cbPerFrame._m0[3u].x);
    float _3018 = ((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_2993 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1201))) + ((_2999 + ((isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0))) * _2039)) * cbPerFrame._m0[3u].x);
    uint _3019 = _297 + 6u;
    float _3027 = _1123 / cbSceneParam._m0[86u].x;
    float _3028 = _1124 / cbSceneParam._m0[86u].y;
    vec4 _3042 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3027, _3028, (log2((isnan(cbSceneParam._m0[77u].w) ? _1046 : (isnan(_1046) ? cbSceneParam._m0[77u].w : min(_1046, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3044 = _3042.x;
    float _3045 = _3042.y;
    float _3046 = _3042.z;
    float _3047 = _3042.w;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    if (_1046 > cbSceneParam._m0[78u].w)
    {
        float _3102 = isnan(_1046) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1046 : min(cbSceneParam._m0[80u].w, _1046));
        float _3103 = _3102 / _1046;
        float _3114 = _3103 * _1096;
        float _3115 = _1097 * _3103;
        float _3116 = (-0.0) - _3115;
        float _3118 = _3103 * _1098;
        float _3120 = (cbSceneParam._m0[77u].w * _3116) / _3102;
        float _3121 = _3120 + cbSceneParam._m0[79u].w;
        float _3122 = cbSceneParam._m0[79u].w - _3115;
        float _3128 = sqrt(((_3114 * _3114) + (_3115 * _3115)) + (_3118 * _3118));
        float _3131 = (1.0 - (cbSceneParam._m0[77u].w / _3102)) * _3128;
        float _3136 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3138 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3315;
        if (abs((_3116 - _3120) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3315 = ((((_3121 > 0.0) ? exp2(_3136 * _3121) : (2.0 - exp2(_3138 * _3121))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3131;
        }
        else
        {
            float _3259 = 1.0 / cbSceneParam._m0[80u].x;
            float _3260 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : max(_3121, _3122));
            float _3261 = isnan(_3122) ? _3121 : (isnan(_3121) ? _3122 : min(_3121, _3122));
            float _3270 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : min(_3260, 0.0));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            _3315 = ((abs(_3128 / _3116) * cbSceneParam._m0[80u].y) * ((((_3270 - _3271) * 2.0) - ((exp2(_3136 * (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0)))) - exp2(_3136 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))))) * _3259)) - ((exp2(_3138 * _3270) - exp2(_3138 * _3271)) * _3259))) + (_3131 * cbSceneParam._m0[80u].z);
        }
        vec4 _3317 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3027, _3028, 1.0), 0.0);
        float _3326 = exp2((_3315 * (-1.44269502162933349609375)) * (1.0 - _3317.w));
        float _3327 = log2(_3326);
        float _3343 = log2(_3047);
        _3140 = (exp2(_3343 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].x)) * _3317.x) / cbSceneParam._m0[78u].x)) + _3044;
        _3142 = (exp2(_3343 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].y)) * _3317.y) / cbSceneParam._m0[78u].y)) + _3045;
        _3144 = (exp2(_3343 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3327 * cbSceneParam._m0[78u].z)) * _3317.z) / cbSceneParam._m0[78u].z)) + _3046;
        _3146 = _3326 * _3047;
    }
    else
    {
        _3140 = _3044;
        _3142 = _3045;
        _3144 = _3046;
        _3146 = _3047;
    }
    bool _3353;
    vec4 _3156;
    vec4 _3178;
    float _3180;
    float _3184;
    float _3185;
    float _3186;
    float _3187;
    bool _3197;
    for (;;)
    {
        _3156 = cbMatDynParam._m0[0u];
        float _3158 = roundEven(_3156.y);
        bool _3159 = _3158 == 3.0;
        float _3160 = log2(_3146);
        float _3167 = exp2(_3160 * cbSceneParam._m0[78u].x) * _3016;
        float _3168 = exp2(_3160 * cbSceneParam._m0[78u].y) * _3017;
        float _3169 = exp2(_3160 * cbSceneParam._m0[78u].z) * _3018;
        float _3176 = _1112 + (-0.5);
        _3178 = cbMtdParam._m0[1u];
        _3180 = _3178.y * _3176;
        float _3183 = (_3158 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3184 = _3183 * (_3159 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3140)));
        _3185 = _3183 * (_3159 ? _3168 : (_3168 + (cbSceneParam._m0[72u].w * _3142)));
        _3186 = _3183 * (_3159 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3144)));
        _3187 = _3176 * 0.999000012874603271484375;
        _3197 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3197)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3187) < 0.5)
            {
                _3353 = true;
                break;
            }
        }
        uint _3294 = _1161 + uint(_3156.w);
        if ((cbInstanceData._m0[_3294].w < 1.0) && ((cbInstanceData._m0[_3294].w + _3187) < 0.5))
        {
            _3353 = true;
            break;
        }
        if ((_3180 + 1.0) < _3178.x)
        {
            _3353 = true;
            break;
        }
        _3353 = false;
        break;
    }
    float _3558;
    if (_3353)
    {
        discard_state = true;
        _3558 = 0.0;
    }
    else
    {
        _3558 = cbInstanceData._m0[_3019].w;
    }
    SV_Target.x = _3184;
    SV_Target.y = _3185;
    SV_Target.z = _3186;
    SV_Target.w = _3558;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3019].w;
    discard_exit();
}


