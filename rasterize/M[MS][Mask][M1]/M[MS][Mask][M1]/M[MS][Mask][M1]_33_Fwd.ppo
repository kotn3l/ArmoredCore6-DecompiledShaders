#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1306;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3631 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3642 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3653 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _403 = _401.x;
    float _415 = dot(vec4(_403, _401.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _432 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_403 - _415) * cbMtdParam._m0[23u].w) + _415) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3664 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _440 = (_433 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _441 = (_433 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _442 = (_433 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    float _446 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _440;
    float _449 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _441;
    float _452 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _442;
    float _459 = ((_440 - _446) * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) + _446;
    float _460 = ((_441 - _449) * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) + _449;
    float _461 = ((_442 - _452) * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) + _452;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _544 = _542.x;
    float _545 = _542.y;
    float _546 = _542.z;
    float _555 = ((_525.z - _546) * _433) + _546;
    float _558 = ((((_525.x - _544) * _433) + _544) * 2.0) + (-1.0);
    float _559 = ((((_525.y - _545) * _433) + _545) * 2.0) + (-1.0);
    float _560 = dot(vec2(_558, _559), vec2(_558, _559));
    float _3675 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))));
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _608 = _606.x;
    float _609 = 1.0 - _608;
    float _625 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_608 - _609) * cbMtdParam._m0[24u].z) + _609) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3686 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _633 = (_626 * ((_480.x * cbMtdParam._m0[18u].x) - _459)) + _459;
    float _634 = (_626 * ((_480.y * cbMtdParam._m0[18u].y) - _460)) + _460;
    float _635 = (_626 * ((_480.z * cbMtdParam._m0[18u].z) - _461)) + _461;
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _663 = _661.x;
    float _681 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _663) * _433) + _663;
    float _685 = ((_647.x - _681) * cbMtdParam._m0[19u].z) + _681;
    float _687 = _685 - (_685 * _626);
    float _692 = (((_500.z - _555) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _555;
    float _696 = ((_581.z - _692) * cbMtdParam._m0[19u].w) + _692;
    vec4 _709 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _716 = (_709.x * 2.0) + (-1.0);
    float _717 = (_709.y * 2.0) + (-1.0);
    float _718 = dot(vec2(_716, _717), vec2(_716, _717));
    float _3697 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _726 = (_626 * (_709.z - _696)) + _696;
    float _735 = (_558 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_500.x * 2.0) + (-1.0)))) + (((_581.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _736 = (_559 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_500.y * 2.0) + (-1.0)))) + (((_581.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _748 = (((_716 - _735) + (cbMtdParam._m0[21u].x * _735)) * _626) + _735;
    float _749 = (((_717 - _736) + (cbMtdParam._m0[21u].x * _736)) * _626) + _736;
    float _750 = (_626 * (sqrt(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) - _565)) + _565;
    float _752 = cbMtdParam._m0[22u].x + _581.w;
    float _755 = fma(_750, _236 * NORMAL.x, fma(_749, _243 * TANGENT.x, (_229 * _221) * _748));
    float _758 = fma(_750, _236 * NORMAL.y, fma(_749, _243 * TANGENT.y, (_229 * _222) * _748));
    float _761 = fma(_750, _236 * NORMAL.z, fma(_749, _243 * TANGENT.z, (_229 * _223) * _748));
    float _765 = inversesqrt(dot(vec3(_755, _758, _761), vec3(_755, _758, _761)));
    float _766 = _765 * _755;
    float _767 = _765 * _758;
    float _768 = _765 * _761;
    float _3708 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _769 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _3730 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3741 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3752 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3763 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _774 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _788 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _839 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _829);
    float _840 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _829);
    float _841 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _829);
    float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
    float _846 = _839 * _845;
    float _847 = _840 * _845;
    float _848 = _841 * _845;
    float _854 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _855 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_768, cbSceneParam._m0[5u].z, fma(_767, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _766));
    float _876 = fma(_768, cbSceneParam._m0[6u].z, fma(_767, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _766));
    float _879 = fma(_768, cbSceneParam._m0[7u].z, fma(_767, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _766));
    uint _893 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3774 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _905 = 1.0 - _774;
    float _906 = _902 * _905;
    float _907 = _903 * _905;
    float _908 = _904 * _905;
    float _913 = (_902 + (-0.039999999105930328369140625)) * _774;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _774;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _774;
    float _916 = _913 + 0.039999999105930328369140625;
    float _918 = _914 + 0.039999999105930328369140625;
    float _919 = _915 + 0.039999999105930328369140625;
    vec4 _928 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _854, cbSceneParam._m0[86u].y * _855));
    float _932 = ((isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * TEXCOORD_5.w) * _928.x;
    float _933 = dot(vec3(_766, _767, _768), vec3(_846, _847, _848));
    float _936 = _933 * 2.0;
    float _940 = (_936 * _766) - _846;
    float _941 = (_936 * _767) - _847;
    float _942 = (_936 * _768) - _848;
    float _946 = abs(dot(vec3(_846, _847, _848), vec3(_766, _767, _768)));
    float _3807 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _948 = sqrt(_769);
    float _961 = exp2((_948 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_948 * 3.0));
    float _967 = (1.0 - _961) * ((_948 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _968 = _961 * _948;
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1305;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1030 = fma(_1004, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996));
        float _1034 = fma(_1004, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996));
        float _1038 = fma(_1004, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996));
        float _1063 = _996 + _766;
        float _1064 = _1000 + _767;
        float _1065 = _1004 + _768;
        float _1075 = fma(_1065, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063)) - _1030;
        float _1076 = fma(_1065, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063)) - _1034;
        float _1077 = fma(_1065, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063)) - _1038;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1030 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1034 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[34u].z) + ((((((_1038 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1133 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1099.x + (-0.5));
        float _1135 = _1133 * (_1099.y + (-0.5));
        float _1136 = _1133 * (_1099.z + (-0.5));
        float _1143 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1106.x + (-0.5));
        float _1145 = _1143 * (_1106.y + (-0.5));
        float _1146 = _1143 * (_1106.z + (-0.5));
        float _1153 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1113.x + (-0.5));
        float _1155 = _1153 * (_1113.y + (-0.5));
        float _1156 = _1153 * (_1113.z + (-0.5));
        float _1163 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1120.x + (-0.5));
        float _1165 = _1163 * (_1120.y + (-0.5));
        float _1166 = _1163 * (_1120.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1187 = (dot(vec3(_766, _767, _768), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1197 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3855 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1199 + 1.0))) + _1204) * _1167;
        float _1214 = _1135 * 0.5;
        float _1215 = _1145 * 0.5;
        float _1216 = _1155 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_766, _767, _768), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3888 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1241 + 1.0))) + _1246) * _1168;
        float _1256 = _1136 * 0.5;
        float _1257 = _1146 * 0.5;
        float _1258 = _1156 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_766, _767, _768), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3921 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1283 + 1.0))) + _1288) * _1169;
        _1305 = _1136;
        _1307 = _1135;
        _1308 = _1134;
        _1309 = _1146;
        _1310 = _1145;
        _1311 = _1144;
        _1312 = _1156;
        _1313 = _1155;
        _1314 = _1154;
        _1315 = _1169;
        _1316 = _1168;
        _1317 = _1167;
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _1306;
        _1307 = _1306;
        _1308 = _1306;
        _1309 = _1306;
        _1310 = _1306;
        _1311 = _1306;
        _1312 = _1306;
        _1313 = _1306;
        _1314 = _1306;
        _1315 = _1306;
        _1316 = _1306;
        _1317 = _1306;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1345 = fma(_1004, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996));
        float _1349 = fma(_1004, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996));
        float _1353 = fma(_1004, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996));
        float _1376 = _996 + _766;
        float _1377 = _1000 + _767;
        float _1378 = _1004 + _768;
        float _1388 = fma(_1378, cbModelParam._m0[30u].z, fma(_1377, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1376)) - _1345;
        float _1389 = fma(_1378, cbModelParam._m0[31u].z, fma(_1377, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1376)) - _1349;
        float _1390 = fma(_1378, cbModelParam._m0[32u].z, fma(_1377, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1376)) - _1353;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1345 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1349 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[35u].z) + ((((((_1353 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1444 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1411.x + (-0.5));
        float _1446 = _1444 * (_1411.y + (-0.5));
        float _1447 = _1444 * (_1411.z + (-0.5));
        float _1454 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1418.x + (-0.5));
        float _1456 = _1454 * (_1418.y + (-0.5));
        float _1457 = _1454 * (_1418.z + (-0.5));
        float _1464 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1425.x + (-0.5));
        float _1466 = _1464 * (_1425.y + (-0.5));
        float _1467 = _1464 * (_1425.z + (-0.5));
        float _1474 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1432.x + (-0.5));
        float _1476 = _1474 * (_1432.y + (-0.5));
        float _1477 = _1474 * (_1432.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_766, _767, _768), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _3984 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1508 + 1.0))) + _1513) * _1478;
        float _1523 = _1446 * 0.5;
        float _1524 = _1456 * 0.5;
        float _1525 = _1466 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_766, _767, _768), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4017 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1550 + 1.0))) + _1555) * _1479;
        float _1565 = _1447 * 0.5;
        float _1566 = _1457 * 0.5;
        float _1567 = _1467 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_766, _767, _768), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4050 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1592 + 1.0))) + _1597) * _1480;
        _1614 = _1447;
        _1615 = _1446;
        _1616 = _1445;
        _1617 = _1457;
        _1618 = _1456;
        _1619 = _1455;
        _1620 = _1467;
        _1621 = _1466;
        _1622 = _1465;
        _1623 = _1480;
        _1624 = _1479;
        _1625 = _1478;
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
    }
    else
    {
        _1614 = _1306;
        _1615 = _1306;
        _1616 = _1306;
        _1617 = _1306;
        _1618 = _1306;
        _1619 = _1306;
        _1620 = _1306;
        _1621 = _1306;
        _1622 = _1306;
        _1623 = _1306;
        _1624 = _1306;
        _1625 = _1306;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1318)) + _1318;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1319)) + _1319;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1320)) + _1320;
    float _1661 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1638));
    float _1682 = _940 * 0.5;
    float _1683 = _941 * 0.5;
    float _1684 = _942 * 0.5;
    float _1685 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1688 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1691 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1725;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1698 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1305, _1309, _1312, _1315));
        float _1702 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1706 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1713 = dot(vec4(cbModelParam._m0[39u]), vec4(_1682, _1683, _1684, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1736;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1727 = dot(vec4(cbModelParam._m0[40u]), vec4(_1682, _1683, _1684, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1740 = (_1736 * cbModelParam._m0[1u].x) + (_1725 * (1.0 - cbModelParam._m0[1u].x));
    float _1750 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _769);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1750 : min(cbModelParam._m0[25u].z, _1750));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_1004, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_1004, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_1004, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_942, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940));
        float _1812 = fma(_942, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940));
        float _1815 = fma(_942, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1843 = frontier_phi_14_12_ladder;
        }
        float _2045;
        if (_1812 > 0.0)
        {
            _2045 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2045 = frontier_phi_23_19_ladder;
        }
        float _2299;
        if (_1815 > 0.0)
        {
            _2299 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2299 = frontier_phi_35_30_ladder;
        }
        float _2301 = isnan(_2045) ? _1843 : (isnan(_1843) ? _2045 : min(_1843, _2045));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1809) + _1798;
        float _2307 = (_2302 * _1812) + _1802;
        float _2308 = (_2302 * _1815) + _1806;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2309;
        float _2313 = _2309 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 > _2313) || ((_2307 < _2311) || ((_2306 < _2311) || (_2306 > _2313))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2308, cbModelParam._m0[9u].z, fma(_2307, cbModelParam._m0[9u].y, _2306 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2308, cbModelParam._m0[10u].z, fma(_2307, cbModelParam._m0[10u].y, _2306 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2308, cbModelParam._m0[11u].z, fma(_2307, cbModelParam._m0[11u].y, _2306 * cbModelParam._m0[11u].x))), _1751);
            frontier_phi_13_35_ladder = _2436.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2436.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2436.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_13_35_ladder_2;
        _1833 = frontier_phi_13_35_ladder_1;
        _1835 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_940, _941, _942), _1751);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _769);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1893 = fma(_1004, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996)) + cbModelParam._m0[21u].w;
        float _1897 = fma(_1004, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996)) + cbModelParam._m0[22u].w;
        float _1901 = fma(_1004, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996)) + cbModelParam._m0[23u].w;
        float _1904 = fma(_942, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940));
        float _1907 = fma(_942, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940));
        float _1910 = fma(_942, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940));
        float _2050;
        if (_1904 > 0.0)
        {
            _2050 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2050 = frontier_phi_25_21_ladder;
        }
        float _2326;
        if (_1907 > 0.0)
        {
            _2326 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2326 = frontier_phi_37_32_ladder;
        }
        float _2539;
        if (_1910 > 0.0)
        {
            _2539 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2539 = frontier_phi_46_43_ladder;
        }
        float _2541 = isnan(_2326) ? _2050 : (isnan(_2050) ? _2326 : min(_2050, _2326));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _1904) + _1893;
        float _2547 = (_2542 * _1907) + _1897;
        float _2548 = (_2542 * _1910) + _1901;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2549;
        float _2552 = _2549 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2548 > _2552) || ((_2548 < _2550) || ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 < _2550) || (_2546 > _2552))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2548, cbModelParam._m0[17u].z, fma(_2547, cbModelParam._m0[17u].y, _2546 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2548, cbModelParam._m0[18u].z, fma(_2547, cbModelParam._m0[18u].y, _2546 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2548, cbModelParam._m0[19u].z, fma(_2547, cbModelParam._m0[19u].y, _2546 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_22_46_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1929 = frontier_phi_22_46_ladder_2;
        _1931 = frontier_phi_22_46_ladder_1;
        _1933 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1913 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_940, _941, _942), _1840);
        _1929 = _1913.x * cbModelParam._m0[1u].z;
        _1931 = _1913.y * cbModelParam._m0[1u].z;
        _1933 = _1913.z * cbModelParam._m0[1u].z;
    }
    float _1946 = (((_967 * _916) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1929 - _1831)) + _1831);
    float _1948 = (((_967 * _918) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1931 - _1833)) + _1833);
    float _1950 = (((_967 * _919) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1933 - _1835)) + _1835);
    float _1953 = fma(_1950, cbSceneParam._m0[89u].z, fma(_1948, cbSceneParam._m0[89u].y, _1946 * cbSceneParam._m0[89u].x));
    float _1956 = fma(_1950, cbSceneParam._m0[90u].z, fma(_1948, cbSceneParam._m0[90u].y, _1946 * cbSceneParam._m0[90u].x));
    float _1959 = fma(_1950, cbSceneParam._m0[91u].z, fma(_1948, cbSceneParam._m0[91u].y, _1946 * cbSceneParam._m0[91u].x));
    uvec4 _1969 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1971 = _1969.x * 14u;
    uint _1972 = _1971 + 13u;
    float _1979 = _932 + (-1.0);
    float _1984 = (cbLight._m0[_1972].x * _1979) + 1.0;
    float _1985 = (cbLight._m0[_1972].y * _1979) + 1.0;
    float _1986 = (cbLight._m0[_1972].z * _1979) + 1.0;
    float _1987 = (cbLight._m0[_1972].w * _1979) + 1.0;
    uint _1988 = _1971 + 5u;
    float _1994 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _1998 = _1971 + 4u;
    float _2004 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _2008 = _1971 | 1u;
    float _2019 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_766, _767, _768));
    float _2022 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_766, _767, _768));
    float _4186 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _4197 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2027 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.3183098733425140380859375;
    float _2029 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _2036 = ((cbLight._m0[_1988].x * _1994) * _2029) + ((cbLight._m0[_1998].x * _2004) * _2027);
    float _2037 = ((_1994 * cbLight._m0[_1988].y) * _2029) + ((_2004 * cbLight._m0[_1998].y) * _2027);
    float _2038 = ((_1994 * cbLight._m0[_1988].z) * _2029) + ((_2004 * cbLight._m0[_1998].z) * _2027);
    uvec4 _2042 = floatBitsToUint(cbLight._m0[_1971 + 12u]);
    bool _2044 = _2042.x == 0u;
    float _2055;
    float _2057;
    float _2059;
    if (_2044)
    {
        _2055 = _2036;
        _2057 = _2037;
        _2059 = _2038;
    }
    else
    {
        uint _2063 = _1971 + 6u;
        float _2079 = (dot(vec3(cbLight._m0[_1971 + 2u].xyz), vec3(_766, _767, _768)) * 0.5) + 0.5;
        float _2080 = _2079 * _2079;
        float _4208 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2081 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2082 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2055 = (((cbLight._m0[_2063].x * 0.3183098733425140380859375) * _2081) * _2082) + _2036;
        _2057 = (((cbLight._m0[_2063].y * 0.3183098733425140380859375) * _2081) * _2082) + _2037;
        _2059 = (((cbLight._m0[_2063].z * 0.3183098733425140380859375) * _2081) * _2082) + _2038;
    }
    bool _2062 = _2042.y == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_2062)
    {
        _2100 = _2055;
        _2102 = _2057;
        _2104 = _2059;
    }
    else
    {
        uint _2270 = _1971 + 7u;
        float _2286 = (dot(vec3(cbLight._m0[_1971 + 3u].xyz), vec3(_766, _767, _768)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4224 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2289 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2100 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2055;
        _2102 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2057;
        _2104 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2059;
    }
    uint _2107 = _1971 + 8u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _769) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_1971].x + _846;
    float _2123 = cbLight._m0[_1971].y + _847;
    float _2124 = cbLight._m0[_1971].z + _848;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_1971].xyz));
    float _4240 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _4251 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _2136 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2137 = dot(vec3(_766, _767, _768), vec3(_2129, _2130, _2131));
    float _4262 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2129, _2130, _2131));
    float _4273 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2121 * _2121;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
    float _2158 = 0.959999978542327880859375 - _913;
    float _2160 = 0.959999978542327880859375 - _914;
    float _2161 = 0.959999978542327880859375 - _915;
    float _2168 = 1.0 - _2121;
    float _2179 = (0.5 / (((_2136 * ((_2135 * _2168) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2168) + _2121) * _2135))) * _2135;
    float _4284 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    uint _2192 = _1971 + 9u;
    float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _769) * 0.949999988079071044921875);
    float _2204 = _2203 * _2203;
    float _2205 = cbLight._m0[_2008].x + _846;
    float _2206 = cbLight._m0[_2008].y + _847;
    float _2207 = cbLight._m0[_2008].z + _848;
    float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
    float _2212 = _2211 * _2205;
    float _2213 = _2211 * _2206;
    float _2214 = _2211 * _2207;
    float _2215 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2008].xyz));
    float _4295 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2219 = dot(vec3(_766, _767, _768), vec3(_2212, _2213, _2214));
    float _4306 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2223 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2212, _2213, _2214));
    float _4317 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2227 = _2204 * _2204;
    float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
    float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0);
    float _2245 = 1.0 - _2204;
    float _2255 = (0.5 / (((_2136 * ((_2218 * _2245) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2245) + _2204) * _2218))) * _2218;
    float _4328 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
    float _2267 = (((((_2238 * _2158) + _916) * cbLight._m0[_2192].x) * _2257) * _1994) + (((((_2157 * _2158) + _916) * cbLight._m0[_2107].x) * _2181) * _2004);
    float _2268 = (((((_2238 * _2160) + _918) * cbLight._m0[_2192].y) * _2257) * _1994) + (((((_2157 * _2160) + _918) * cbLight._m0[_2107].y) * _2181) * _2004);
    float _2269 = (((((_2238 * _2161) + _919) * cbLight._m0[_2192].z) * _2257) * _1994) + (((((_2157 * _2161) + _919) * cbLight._m0[_2107].z) * _2181) * _2004);
    float _2331;
    float _2333;
    float _2335;
    if (_2044)
    {
        _2331 = _2267;
        _2333 = _2268;
        _2335 = _2269;
    }
    else
    {
        uint _2337 = _1971 + 2u;
        uint _2341 = _1971 + 10u;
        float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _769) * 0.949999988079071044921875);
        float _2356 = _2355 * _2355;
        float _2357 = cbLight._m0[_2337].x + _846;
        float _2358 = cbLight._m0[_2337].y + _847;
        float _2359 = cbLight._m0[_2337].z + _848;
        float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
        float _2364 = _2363 * _2357;
        float _2365 = _2363 * _2358;
        float _2366 = _2363 * _2359;
        float _2367 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2337].xyz));
        float _4339 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2371 = dot(vec3(_766, _767, _768), vec3(_2364, _2365, _2366));
        float _4350 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2375 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2364, _2365, _2366));
        float _4361 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2379 = _2356 * _2356;
        float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
        float _2390 = exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0);
        float _2397 = 1.0 - _2356;
        float _2407 = (0.5 / (((_2136 * ((_2370 * _2397) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2397) + _2356) * _2370))) * _2370;
        float _4372 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2409 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
        float _2410 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2331 = (((((_2390 * _2158) + _916) * cbLight._m0[_2341].x) * _2409) * _2410) + _2267;
        _2333 = (((((_2390 * _2160) + _918) * cbLight._m0[_2341].y) * _2409) * _2410) + _2268;
        _2335 = (((((_2390 * _2161) + _919) * cbLight._m0[_2341].z) * _2409) * _2410) + _2269;
    }
    float _2445;
    float _2447;
    float _2449;
    if (_2062)
    {
        _2445 = _2331;
        _2447 = _2333;
        _2449 = _2335;
    }
    else
    {
        uint _2456 = _1971 + 3u;
        uint _2460 = _1971 + 11u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _769) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _846;
        float _2477 = cbLight._m0[_2456].y + _847;
        float _2478 = cbLight._m0[_2456].z + _848;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_2456].xyz));
        float _4388 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2490 = dot(vec3(_766, _767, _768), vec3(_2483, _2484, _2485));
        float _4399 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4410 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0);
        float _2516 = 1.0 - _2475;
        float _2526 = (0.5 / (((_2136 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2516) + _2475) * _2489))) * _2489;
        float _4421 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2445 = (((((_2509 * _2158) + _916) * cbLight._m0[_2460].x) * _2528) * _2529) + _2331;
        _2447 = (((((_2509 * _2160) + _918) * cbLight._m0[_2460].y) * _2528) * _2529) + _2333;
        _2449 = (((((_2509 * _2161) + _919) * cbLight._m0[_2460].z) * _2528) * _2529) + _2335;
    }
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    if (_1969.y == 0u)
    {
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2604;
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2604;
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2604;
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.x;
        uint _2631 = uint((float(_2619.y) * floor(float(uint(cbSceneParam._m0[85u].y * _855) / _2620))) + floor(float(uint(cbSceneParam._m0[85u].x * _854) / _2620)));
        float _2641 = (log2(_2607 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2642 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        uint _2645 = uint(isnan(14.0) ? _2642 : (isnan(_2642) ? 14.0 : min(_2642, 14.0)));
        uvec4 _2650 = texelFetch(g_lightClusterGridBuffer, int(((_2645 << 2u) + (_2631 << 6u)) >> 2u));
        uint _2651 = _2650.x;
        uint _2652 = _2619.z;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        if (((((1u << ((_2652 >> 4u) & 15u)) + 4294967295u) & _2651) == 0u) || ((_2652 & 240u) == 0u))
        {
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
        }
        else
        {
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            uint _2903 = 0u;
            uint _2912;
            bool _2913;
            for (;;)
            {
                _2912 = texelFetch(g_lightClassification, int((((_2645 << 5u) + (_2631 << 9u)) + (_2903 << 2u)) >> 2u)).x;
                _2913 = _2912 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2913)
                {
                    frontier_phi_61_pred = _2897;
                    frontier_phi_61_pred_1 = _2902;
                    frontier_phi_61_pred_2 = _2901;
                    frontier_phi_61_pred_3 = _2900;
                    frontier_phi_61_pred_4 = _2899;
                    frontier_phi_61_pred_5 = _2898;
                }
                else
                {
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    uint _3027;
                    _3021 = _2897;
                    _3022 = _2898;
                    _3023 = _2899;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2902;
                    _3027 = _2912;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    for (;;)
                    {
                        uint _3031 = uint(findLSB(_3027)) + (_2903 << 5u);
                        uint _3028 = (_3027 + 4294967295u) & _3027;
                        uint _3033 = _3031 * 48u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3053 = (_3031 * 48u) + 4u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 3u)).x));
                        uint _3072 = (_3031 * 48u) + 8u;
                        vec3 _3083 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x));
                        float _3087 = _3047.x - _2605;
                        float _3088 = _3047.y - _2606;
                        float _3089 = _3047.z - _2607;
                        float _3090 = dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089));
                        float _3093 = inversesqrt(_3090);
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3097 = dot(vec3(_873, _876, _879), vec3(_3094, _3095, _3096));
                        float _3102 = 1.0 - (_3090 * _3047.w);
                        float _4447 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3103 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3104 = sqrt(_3090) * _3066.w;
                        float _3107 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                        float _3108 = _3107 * _3107;
                        float _3111 = ((1.0 - _3108) * _3097) + _3108;
                        float _3114 = _3104 * _3104;
                        float _3118 = ((isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0))) * _3103) / ((_3114 * 0.699999988079071044921875) + 1.0);
                        float _3122 = (-0.0) - _2605;
                        float _3123 = (-0.0) - _2606;
                        float _3124 = (-0.0) - _2607;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3129 = _3128 * _3122;
                        float _3130 = _3128 * _3123;
                        float _3131 = _3128 * _3124;
                        float _3139 = exp2(log2(1.0 / ((_3114 * 3.5) + 5.0)) * 0.25);
                        float _3140 = 1.0 - _948;
                        float _3147 = sqrt(1.0 - ((1.0 - (_3140 * _3140)) * (1.0 - (_3139 * _3139))));
                        float _3148 = _3147 * _3147;
                        float _3149 = _3148 * _3148;
                        float _3150 = _3129 + _3094;
                        float _3151 = _3130 + _3095;
                        float _3152 = _3131 + _3096;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3160 = dot(vec3(_873, _876, _879), vec3(_3129, _3130, _3131));
                        float _4463 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3163 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3164 = dot(vec3(_873, _876, _879), vec3(_3156 * _3150, _3156 * _3151, _3156 * _3152));
                        float _4474 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3167 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3171 = ((_3167 * _3167) * (_3149 + (-1.0))) + 1.0;
                        float _3172 = _3107 * _3148;
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3097) + _3173;
                        float _4485 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3178 = 1.0 - _3148;
                        float _3188 = (0.5 / (((_3177 * ((_3163 * _3178) + _3148)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3148) * _3163))) * _3177;
                        float _4496 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3199 = (((_3149 * 3.1415927410125732421875) * (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) / ((_3171 * _3171) * ((_3114 * 2.1991131305694580078125) + 3.141590118408203125))) * _3103;
                        _2956 = (_3118 * _3066.x) + _3024;
                        _2957 = (_3118 * _3066.y) + _3025;
                        _2958 = (_3118 * _3066.z) + _3026;
                        _2953 = (_3199 * _3083.x) + _3021;
                        _2954 = (_3199 * _3083.y) + _3022;
                        _2955 = (_3199 * _3083.z) + _3023;
                        if (_3028 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3021 = _2953;
                            _3022 = _2954;
                            _3023 = _2955;
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _2958;
                            _3027 = _3028;
                        }
                    }
                    frontier_phi_61_pred = _2953;
                    frontier_phi_61_pred_1 = _2958;
                    frontier_phi_61_pred_2 = _2957;
                    frontier_phi_61_pred_3 = _2956;
                    frontier_phi_61_pred_4 = _2955;
                    frontier_phi_61_pred_5 = _2954;
                }
                _2753 = frontier_phi_61_pred;
                _2763 = frontier_phi_61_pred_1;
                _2761 = frontier_phi_61_pred_2;
                _2759 = frontier_phi_61_pred_3;
                _2757 = frontier_phi_61_pred_4;
                _2755 = frontier_phi_61_pred_5;
                uint _2904 = _2903 + 1u;
                if (_2904 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2897 = _2753;
                    _2898 = _2755;
                    _2899 = _2757;
                    _2900 = _2759;
                    _2901 = _2761;
                    _2902 = _2763;
                    _2903 = _2904;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
        }
        uvec4 _2766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2767 = _2766.z;
        uint _2769 = (_2767 >> 8u) & 15u;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        if (((4294967295u << _2769) & _2651) == 0u)
        {
            _2865 = _2752;
            _2867 = _2754;
            _2869 = _2756;
            _2871 = _2758;
            _2873 = _2760;
            _2875 = _2762;
        }
        else
        {
            float _2890 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
            float _2891 = _2890 * _2605;
            float _2892 = _2890 * _2606;
            float _2893 = _2890 * _2607;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2769 < ((_2767 >> 12u) & 15u))
            {
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _3004 = _2752;
                float _3005 = _2754;
                float _3006 = _2756;
                float _3007 = _2758;
                float _3008 = _2760;
                float _3009 = _2762;
                uint _3010 = _2769;
                uint _3019;
                bool _3020;
                for (;;)
                {
                    _3019 = texelFetch(g_lightClassification, int((((_2645 << 5u) + (_2631 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                    _3020 = _3019 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3020)
                    {
                        frontier_phi_67_pred = _3007;
                        frontier_phi_67_pred_1 = _3008;
                        frontier_phi_67_pred_2 = _3009;
                        frontier_phi_67_pred_3 = _3006;
                        frontier_phi_67_pred_4 = _3005;
                        frontier_phi_67_pred_5 = _3004;
                    }
                    else
                    {
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3217 = _3004;
                        float _3218 = _3005;
                        float _3219 = _3006;
                        float _3220 = _3007;
                        float _3221 = _3008;
                        float _3222 = _3009;
                        uint _3223 = _3019;
                        uint _3224;
                        vec4 _3249;
                        float _3250;
                        vec4 _3265;
                        vec3 _3277;
                        vec4 _3292;
                        vec4 _3307;
                        float _3353;
                        bool _3354;
                        for (;;)
                        {
                            uint _3234 = ((_3010 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3223));
                            _3224 = (_3223 + 4294967295u) & _3223;
                            uint _3236 = _3234 * 40u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            _3250 = _3249.w;
                            uint _3252 = (_3234 * 40u) + 4u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3234 * 40u) + 8u;
                            _3277 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x));
                            uint _3279 = (_3234 * 40u) + 16u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3234 * 40u) + 20u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3309 = (_3234 * 40u) + 24u;
                            vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3328 = (_3234 * 40u) + 28u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            _3353 = fma(_2607, _3341.z, fma(_2606, _3341.y, _3341.x * _2605)) + _3341.w;
                            _3354 = !((fma(_2607, _3322.z, fma(_2606, _3322.y, _3322.x * _2605)) + _3322.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3354)
                            {
                                float _3381 = _3249.x - _2605;
                                float _3382 = _3249.y - _2606;
                                float _3383 = _3249.z - _2607;
                                float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                                float _3387 = inversesqrt(_3384);
                                float _3388 = _3387 * _3381;
                                float _3389 = _3387 * _3382;
                                float _3390 = _3387 * _3383;
                                float _3394 = 1.0 - (_3384 / (_3250 * _3250));
                                float _4507 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3399 = sqrt(_3384) * _3265.w;
                                float _3401 = 1.39999997615814208984375 / (_3399 + 1.39999997615814208984375);
                                float _3402 = _3401 * _3401;
                                float _3405 = ((1.0 - _3402) * dot(vec3(_3388, _3389, _3390), vec3(_873, _876, _879))) + _3402;
                                float _3408 = _3399 * _3399;
                                float _3412 = (fma(_2607, _3292.z, fma(_2606, _3292.y, _3292.x * _2605)) + _3292.w) / _3353;
                                float _3413 = (fma(_2607, _3307.z, fma(_2606, _3307.y, _3307.x * _2605)) + _3307.w) / _3353;
                                float _3417 = 1.0 - dot(vec2(_3412, _3413), vec2(_3412, _3413));
                                float _4523 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3419 = _3418 * (((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3395) / ((_3408 * 0.699999988079071044921875) + 1.0));
                                float _3431 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                                float _3432 = 1.0 - _948;
                                float _3439 = sqrt(1.0 - ((1.0 - (_3432 * _3432)) * (1.0 - (_3431 * _3431))));
                                float _3440 = _3439 * _3439;
                                float _3441 = _3440 * _3440;
                                float _3442 = _3388 - _2891;
                                float _3443 = _3389 - _2892;
                                float _3444 = _3390 - _2893;
                                float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                                float _3452 = dot(vec3(_873, _876, _879), vec3((-0.0) - _2891, (-0.0) - _2892, (-0.0) - _2893));
                                float _4534 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3456 = dot(vec3(_873, _876, _879), vec3(_3448 * _3442, _3448 * _3443, _3448 * _3444));
                                float _4545 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3463 = ((_3459 * _3459) * (_3441 + (-1.0))) + 1.0;
                                float _3464 = _3401 * _3440;
                                float _3465 = _3464 * _3464;
                                float _3471 = ((1.0 - _3465) * dot(vec3(_873, _876, _879), vec3(_3388, _3389, _3390))) + _3465;
                                float _4556 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3473 = 1.0 - _3440;
                                float _3483 = (0.5 / (((_3472 * ((_3455 * _3473) + _3440)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3440) * _3455))) * _3472;
                                float _4567 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3493 = (_3418 * _3395) * (((_3441 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3463 * _3463) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3493 * _3277.x;
                                frontier_phi_73_pred_1 = _3493 * _3277.y;
                                frontier_phi_73_pred_2 = _3419 * _3265.z;
                                frontier_phi_73_pred_3 = _3419 * _3265.y;
                                frontier_phi_73_pred_4 = _3419 * _3265.x;
                                frontier_phi_73_pred_5 = _3493 * _3277.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3497 = frontier_phi_73_pred;
                            _3498 = frontier_phi_73_pred_1;
                            _3502 = frontier_phi_73_pred_2;
                            _3501 = frontier_phi_73_pred_3;
                            _3500 = frontier_phi_73_pred_4;
                            _3499 = frontier_phi_73_pred_5;
                            _3207 = _3500 + _3220;
                            _3208 = _3501 + _3221;
                            _3209 = _3502 + _3222;
                            _3204 = _3497 + _3217;
                            _3205 = _3498 + _3218;
                            _3206 = _3499 + _3219;
                            if (_3224 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3224;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3207;
                        frontier_phi_67_pred_1 = _3208;
                        frontier_phi_67_pred_2 = _3209;
                        frontier_phi_67_pred_3 = _3206;
                        frontier_phi_67_pred_4 = _3205;
                        frontier_phi_67_pred_5 = _3204;
                    }
                    _2872 = frontier_phi_67_pred;
                    _2874 = frontier_phi_67_pred_1;
                    _2876 = frontier_phi_67_pred_2;
                    _2870 = frontier_phi_67_pred_3;
                    _2868 = frontier_phi_67_pred_4;
                    _2866 = frontier_phi_67_pred_5;
                    uint _3011 = _3010 + 1u;
                    if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3004 = _2866;
                        _3005 = _2868;
                        _3006 = _2870;
                        _3007 = _2872;
                        _3008 = _2874;
                        _3009 = _2876;
                        _3010 = _3011;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2874;
                frontier_phi_55_56_ladder_1 = _2876;
                frontier_phi_55_56_ladder_2 = _2872;
                frontier_phi_55_56_ladder_3 = _2870;
                frontier_phi_55_56_ladder_4 = _2868;
                frontier_phi_55_56_ladder_5 = _2866;
            }
            else
            {
                frontier_phi_55_56_ladder = _2760;
                frontier_phi_55_56_ladder_1 = _2762;
                frontier_phi_55_56_ladder_2 = _2758;
                frontier_phi_55_56_ladder_3 = _2756;
                frontier_phi_55_56_ladder_4 = _2754;
                frontier_phi_55_56_ladder_5 = _2752;
            }
            _2865 = frontier_phi_55_56_ladder_5;
            _2867 = frontier_phi_55_56_ladder_4;
            _2869 = frontier_phi_55_56_ladder_3;
            _2871 = frontier_phi_55_56_ladder_2;
            _2873 = frontier_phi_55_56_ladder;
            _2875 = frontier_phi_55_56_ladder_1;
        }
        float _2880 = isnan(1.0) ? _932 : (isnan(_932) ? 1.0 : min(_932, 1.0));
        _2664 = (_2880 * _2871) + _2100;
        _2666 = (_2880 * _2873) + _2102;
        _2668 = (_2880 * _2875) + _2104;
        _2670 = ((_2865 * _916) * _2880) + _2445;
        _2672 = ((_2867 * _918) * _2880) + _2447;
        _2674 = ((_2869 * _919) * _2880) + _2449;
    }
    else
    {
        _2664 = _2100;
        _2666 = _2102;
        _2668 = _2104;
        _2670 = _2445;
        _2672 = _2447;
        _2674 = _2449;
    }
    float _4583 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4594 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4605 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    uint _2694 = _270 + 6u;
    float _2702 = _854 / cbSceneParam._m0[86u].x;
    float _2703 = _855 / cbSceneParam._m0[86u].y;
    vec4 _2717 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2702, _2703, (log2((isnan(cbSceneParam._m0[77u].w) ? _788 : (isnan(_788) ? cbSceneParam._m0[77u].w : min(_788, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2719 = _2717.x;
    float _2720 = _2717.y;
    float _2721 = _2717.z;
    float _2722 = _2717.w;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_788 > cbSceneParam._m0[78u].w)
    {
        float _2777 = isnan(_788) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _788 : min(cbSceneParam._m0[80u].w, _788));
        float _2778 = _2777 / _788;
        float _2789 = _2778 * _839;
        float _2790 = _840 * _2778;
        float _2791 = (-0.0) - _2790;
        float _2793 = _2778 * _841;
        float _2795 = (cbSceneParam._m0[77u].w * _2791) / _2777;
        float _2796 = _2795 + cbSceneParam._m0[79u].w;
        float _2797 = cbSceneParam._m0[79u].w - _2790;
        float _2803 = sqrt(((_2789 * _2789) + (_2790 * _2790)) + (_2793 * _2793));
        float _2806 = (1.0 - (cbSceneParam._m0[77u].w / _2777)) * _2803;
        float _2811 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2813 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2966;
        if (abs((_2791 - _2795) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2966 = ((((_2796 > 0.0) ? exp2(_2811 * _2796) : (2.0 - exp2(_2813 * _2796))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2806;
        }
        else
        {
            float _2926 = 1.0 / cbSceneParam._m0[80u].x;
            float _2927 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : max(_2796, _2797));
            float _2928 = isnan(_2797) ? _2796 : (isnan(_2796) ? _2797 : min(_2796, _2797));
            float _2937 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : min(_2927, 0.0));
            float _2938 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : min(_2928, 0.0));
            _2966 = ((abs(_2803 / _2791) * cbSceneParam._m0[80u].y) * ((((_2937 - _2938) * 2.0) - ((exp2(_2811 * (isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0)))) - exp2(_2811 * (isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0))))) * _2926)) - ((exp2(_2813 * _2937) - exp2(_2813 * _2938)) * _2926))) + (_2806 * cbSceneParam._m0[80u].z);
        }
        vec4 _2968 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2702, _2703, 1.0), 0.0);
        float _2977 = exp2((_2966 * (-1.44269502162933349609375)) * (1.0 - _2968.w));
        float _2978 = log2(_2977);
        float _2994 = log2(_2722);
        _2815 = (exp2(_2994 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].x)) * _2968.x) / cbSceneParam._m0[78u].x)) + _2719;
        _2817 = (exp2(_2994 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].y)) * _2968.y) / cbSceneParam._m0[78u].y)) + _2720;
        _2819 = (exp2(_2994 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2978 * cbSceneParam._m0[78u].z)) * _2968.z) / cbSceneParam._m0[78u].z)) + _2721;
        _2821 = _2977 * _2722;
    }
    else
    {
        _2815 = _2719;
        _2817 = _2720;
        _2819 = _2721;
        _2821 = _2722;
    }
    float _2833 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2834 = _2833 == 3.0;
    float _2835 = log2(_2821);
    float _2842 = exp2(_2835 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2664 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _932))) + ((_2670 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2843 = exp2(_2835 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2666 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _932))) + ((_2672 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2844 = exp2(_2835 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2668 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _932))) + ((_2674 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2853 = (_2833 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2853 * (_2834 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2815)));
    SV_Target.y = _2853 * (_2834 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2817)));
    SV_Target.z = _2853 * (_2834 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2819)));
    SV_Target.w = cbInstanceData._m0[_2694].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2694].w;
}


