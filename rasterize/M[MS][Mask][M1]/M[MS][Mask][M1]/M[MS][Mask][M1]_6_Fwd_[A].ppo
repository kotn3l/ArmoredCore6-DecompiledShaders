#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1247;
float _3631;
float _3632;
float _3633;
float _3634;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[23u].w) + _382) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3643 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _407 = (_400 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _408 = (_400 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _409 = (_400 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _400) + _443;
    float _455 = ((((_422.x - _441) * _400) + _441) * 2.0) + (-1.0);
    float _457 = ((((_422.y - _442) * _400) + _442) * 2.0) + (-1.0);
    float _458 = dot(vec2(_455, _457), vec2(_455, _457));
    float _3654 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))));
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _491 = (((_479.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _455;
    float _492 = (((_479.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _457;
    vec4 _504 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _506 = _504.x;
    float _507 = 1.0 - _506;
    float _536 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_506 - _507) * cbMtdParam._m0[24u].w) + _507) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3665 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _545 = ((((cbMtdParam._m0[10u].x - _407) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _537) + _407;
    float _546 = ((((cbMtdParam._m0[10u].y - _408) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _537) + _408;
    float _547 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _409)) * _537) + _409;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _575 = _573.x;
    float _593 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _575) * _400) + _575;
    float _597 = ((_559.x - _593) * cbMtdParam._m0[19u].z) + _593;
    float _599 = _597 - (_597 * _537);
    float _603 = (cbMtdParam._m0[19u].w * (_479.z - _452)) + _452;
    float _607 = ((cbMtdParam._m0[23u].x - _603) * _537) + _603;
    vec4 _626 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _632 = (_626.x * 2.0) + (-1.0);
    float _633 = (_626.y * 2.0) + (-1.0);
    float _634 = dot(vec2(_632, _633), vec2(_632, _633));
    float _3676 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _650 = (_537 * (((cbMtdParam._m0[22u].z * _491) - _491) + _632)) + _491;
    float _651 = (_537 * (((cbMtdParam._m0[22u].z * _492) - _492) + _633)) + _492;
    float _652 = (_537 * (sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) - _463)) + _463;
    float _654 = cbMtdParam._m0[22u].x + _479.w;
    float _657 = fma(_652, _236 * NORMAL.x, fma(_651, _243 * TANGENT.x, (_229 * _221) * _650));
    float _660 = fma(_652, _236 * NORMAL.y, fma(_651, _243 * TANGENT.y, (_229 * _222) * _650));
    float _663 = fma(_652, _236 * NORMAL.z, fma(_651, _243 * TANGENT.z, (_229 * _223) * _650));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _668 = _667 * _657;
    float _669 = _667 * _660;
    float _670 = _667 * _663;
    float _3687 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _671 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _3709 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3720 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3731 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3742 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _676 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _740 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _730);
    float _741 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _730);
    float _742 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _730);
    float _746 = inversesqrt(dot(vec3(_740, _741, _742), vec3(_740, _741, _742)));
    float _747 = _740 * _746;
    float _748 = _741 * _746;
    float _749 = _742 * _746;
    vec4 _754 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _756 = _754.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _928 = sqrt(((_740 * _740) + (_741 * _741)) + (_742 * _742));
        float _934 = (cbMatDynParam._m0[5u].x * _928) + cbMatDynParam._m0[5u].y;
        float _3753 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _939 = (cbMatDynParam._m0[5u].z * _928) + cbMatDynParam._m0[5u].w;
        float _3764 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) - _935)) + _935) < ((_756 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _767 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _768 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _786 = fma(_670, cbSceneParam._m0[5u].z, fma(_669, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _668));
    float _789 = fma(_670, cbSceneParam._m0[6u].z, fma(_669, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _668));
    float _792 = fma(_670, cbSceneParam._m0[7u].z, fma(_669, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _668));
    uint _805 = _249 + 9u;
    uint _806 = _805 + uint(cbMatDynParam._m0[0u].w);
    float _812 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_806].x;
    float _813 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_806].y;
    float _814 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_806].z;
    float _3775 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _818 = 1.0 - _676;
    float _819 = _815 * _818;
    float _820 = _816 * _818;
    float _821 = _817 * _818;
    float _826 = (_815 + (-0.039999999105930328369140625)) * _676;
    float _827 = (_816 + (-0.039999999105930328369140625)) * _676;
    float _828 = (_817 + (-0.039999999105930328369140625)) * _676;
    float _829 = _826 + 0.039999999105930328369140625;
    float _831 = _827 + 0.039999999105930328369140625;
    float _832 = _828 + 0.039999999105930328369140625;
    vec4 _841 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _767, cbSceneParam._m0[86u].y * _768));
    float _845 = ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * TEXCOORD_5.w) * _841.x;
    float _846 = dot(vec3(_668, _669, _670), vec3(_747, _748, _749));
    float _849 = _846 * 2.0;
    float _853 = (_849 * _668) - _747;
    float _854 = (_849 * _669) - _748;
    float _855 = (_849 * _670) - _749;
    float _859 = abs(dot(vec3(_747, _748, _749), vec3(_668, _669, _670)));
    float _3808 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _861 = sqrt(_671);
    float _874 = exp2((_861 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_861 * 3.0));
    float _880 = (1.0 - _874) * ((_861 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _881 = _874 * _861;
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1246;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _971 = fma(_917, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909));
        float _975 = fma(_917, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909));
        float _979 = fma(_917, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909));
        float _1004 = _909 + _668;
        float _1005 = _913 + _669;
        float _1006 = _917 + _670;
        float _1016 = fma(_1006, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004)) - _971;
        float _1017 = fma(_1006, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004)) - _975;
        float _1018 = fma(_1006, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004)) - _979;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_971 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_975 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[34u].z) + ((((((_979 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1074 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1040.x + (-0.5));
        float _1076 = _1074 * (_1040.y + (-0.5));
        float _1077 = _1074 * (_1040.z + (-0.5));
        float _1084 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1047.x + (-0.5));
        float _1086 = _1084 * (_1047.y + (-0.5));
        float _1087 = _1084 * (_1047.z + (-0.5));
        float _1094 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1054.x + (-0.5));
        float _1096 = _1094 * (_1054.y + (-0.5));
        float _1097 = _1094 * (_1054.z + (-0.5));
        float _1104 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1061.x + (-0.5));
        float _1106 = _1104 * (_1061.y + (-0.5));
        float _1107 = _1104 * (_1061.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1128 = (dot(vec3(_668, _669, _670), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1138 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3856 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1140 + 1.0))) + _1145) * _1108;
        float _1155 = _1076 * 0.5;
        float _1156 = _1086 * 0.5;
        float _1157 = _1096 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_668, _669, _670), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3889 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1182 + 1.0))) + _1187) * _1109;
        float _1197 = _1077 * 0.5;
        float _1198 = _1087 * 0.5;
        float _1199 = _1097 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_668, _669, _670), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3922 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1224 + 1.0))) + _1229) * _1110;
        _1246 = _1077;
        _1248 = _1076;
        _1249 = _1075;
        _1250 = _1087;
        _1251 = _1086;
        _1252 = _1085;
        _1253 = _1097;
        _1254 = _1096;
        _1255 = _1095;
        _1256 = _1110;
        _1257 = _1109;
        _1258 = _1108;
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _1247;
        _1248 = _1247;
        _1249 = _1247;
        _1250 = _1247;
        _1251 = _1247;
        _1252 = _1247;
        _1253 = _1247;
        _1254 = _1247;
        _1255 = _1247;
        _1256 = _1247;
        _1257 = _1247;
        _1258 = _1247;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1289 = fma(_917, cbModelParam._m0[30u].z, fma(_913, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _909));
        float _1293 = fma(_917, cbModelParam._m0[31u].z, fma(_913, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _909));
        float _1297 = fma(_917, cbModelParam._m0[32u].z, fma(_913, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _909));
        float _1320 = _909 + _668;
        float _1321 = _913 + _669;
        float _1322 = _917 + _670;
        float _1332 = fma(_1322, cbModelParam._m0[30u].z, fma(_1321, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1320)) - _1289;
        float _1333 = fma(_1322, cbModelParam._m0[31u].z, fma(_1321, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1320)) - _1293;
        float _1334 = fma(_1322, cbModelParam._m0[32u].z, fma(_1321, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1320)) - _1297;
        float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
        float _1351 = ((_1338 * _1332) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1289 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1338 * _1333) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1293 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1338 * _1334) / cbModelParam._m0[35u].z) + ((((((_1297 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        float _1388 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1355.x + (-0.5));
        float _1390 = _1388 * (_1355.y + (-0.5));
        float _1391 = _1388 * (_1355.z + (-0.5));
        float _1398 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1362.x + (-0.5));
        float _1400 = _1398 * (_1362.y + (-0.5));
        float _1401 = _1398 * (_1362.z + (-0.5));
        float _1408 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1369.x + (-0.5));
        float _1410 = _1408 * (_1369.y + (-0.5));
        float _1411 = _1408 * (_1369.z + (-0.5));
        float _1418 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1376.x + (-0.5));
        float _1420 = _1418 * (_1376.y + (-0.5));
        float _1421 = _1418 * (_1376.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_668, _669, _670), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3985 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1452 + 1.0))) + _1457) * _1422;
        float _1467 = _1390 * 0.5;
        float _1468 = _1400 * 0.5;
        float _1469 = _1410 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_668, _669, _670), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4018 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1494 + 1.0))) + _1499) * _1423;
        float _1509 = _1391 * 0.5;
        float _1510 = _1401 * 0.5;
        float _1511 = _1411 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_668, _669, _670), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4051 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1536 + 1.0))) + _1541) * _1424;
        _1558 = _1391;
        _1559 = _1390;
        _1560 = _1389;
        _1561 = _1401;
        _1562 = _1400;
        _1563 = _1399;
        _1564 = _1411;
        _1565 = _1410;
        _1566 = _1409;
        _1567 = _1424;
        _1568 = _1423;
        _1569 = _1422;
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
    }
    else
    {
        _1558 = _1247;
        _1559 = _1247;
        _1560 = _1247;
        _1561 = _1247;
        _1562 = _1247;
        _1563 = _1247;
        _1564 = _1247;
        _1565 = _1247;
        _1566 = _1247;
        _1567 = _1247;
        _1568 = _1247;
        _1569 = _1247;
        _1570 = 0.0;
        _1571 = 0.0;
        _1572 = 0.0;
    }
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1259)) + _1259;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1260)) + _1260;
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1261)) + _1261;
    float _1605 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1608 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1611 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1582));
    float _1626 = _853 * 0.5;
    float _1627 = _854 * 0.5;
    float _1628 = _855 * 0.5;
    float _1629 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1632 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1635 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1669;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1642 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1246, _1250, _1253, _1256));
        float _1646 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1650 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1657 = dot(vec4(cbModelParam._m0[39u]), vec4(_1626, _1627, _1628, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1680;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1671 = dot(vec4(cbModelParam._m0[40u]), vec4(_1626, _1627, _1628, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1684 = (_1680 * cbModelParam._m0[1u].x) + (_1669 * (1.0 - cbModelParam._m0[1u].x));
    float _1694 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _671);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1694 : min(cbModelParam._m0[25u].z, _1694));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1744 = fma(_917, cbModelParam._m0[13u].z, fma(_913, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909)) + cbModelParam._m0[13u].w;
        float _1748 = fma(_917, cbModelParam._m0[14u].z, fma(_913, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909)) + cbModelParam._m0[14u].w;
        float _1752 = fma(_917, cbModelParam._m0[15u].z, fma(_913, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909)) + cbModelParam._m0[15u].w;
        float _1755 = fma(_855, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _853));
        float _1758 = fma(_855, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _853));
        float _1761 = fma(_855, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _853));
        float _1789;
        if (_1755 > 0.0)
        {
            _1789 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1789 = frontier_phi_17_15_ladder;
        }
        float _1993;
        if (_1758 > 0.0)
        {
            _1993 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1993 = frontier_phi_26_22_ladder;
        }
        float _2247;
        if (_1761 > 0.0)
        {
            _2247 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2247 = frontier_phi_38_33_ladder;
        }
        float _2249 = isnan(_1993) ? _1789 : (isnan(_1789) ? _1993 : min(_1789, _1993));
        float _2250 = isnan(_2247) ? _2249 : (isnan(_2249) ? _2247 : min(_2249, _2247));
        float _2254 = (_2250 * _1755) + _1744;
        float _2255 = (_2250 * _1758) + _1748;
        float _2256 = (_2250 * _1761) + _1752;
        float _2257 = _2250 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2257;
        float _2261 = _2257 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 > _2261) || ((_2255 < _2259) || ((_2254 < _2259) || (_2254 > _2261))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2256, cbModelParam._m0[9u].z, fma(_2255, cbModelParam._m0[9u].y, _2254 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2256, cbModelParam._m0[10u].z, fma(_2255, cbModelParam._m0[10u].y, _2254 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2256, cbModelParam._m0[11u].z, fma(_2255, cbModelParam._m0[11u].y, _2254 * cbModelParam._m0[11u].x))), _1695);
            frontier_phi_16_38_ladder = _2384.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2384.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2384.x * cbModelParam._m0[1u].y;
        }
        _1777 = frontier_phi_16_38_ladder_2;
        _1779 = frontier_phi_16_38_ladder_1;
        _1781 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_853, _854, _855), _1695);
        _1777 = _1765.x * cbModelParam._m0[1u].y;
        _1779 = _1765.y * cbModelParam._m0[1u].y;
        _1781 = _1765.z * cbModelParam._m0[1u].y;
    }
    float _1785 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _671);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1785 : min(cbModelParam._m0[25u].w, _1785));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1841 = fma(_917, cbModelParam._m0[21u].z, fma(_913, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909)) + cbModelParam._m0[21u].w;
        float _1845 = fma(_917, cbModelParam._m0[22u].z, fma(_913, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909)) + cbModelParam._m0[22u].w;
        float _1849 = fma(_917, cbModelParam._m0[23u].z, fma(_913, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909)) + cbModelParam._m0[23u].w;
        float _1852 = fma(_855, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _853));
        float _1855 = fma(_855, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _853));
        float _1858 = fma(_855, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _853));
        float _1998;
        if (_1852 > 0.0)
        {
            _1998 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1998 = frontier_phi_28_24_ladder;
        }
        float _2274;
        if (_1855 > 0.0)
        {
            _2274 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2274 = frontier_phi_40_35_ladder;
        }
        float _2487;
        if (_1858 > 0.0)
        {
            _2487 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2487 = frontier_phi_49_46_ladder;
        }
        float _2489 = isnan(_2274) ? _1998 : (isnan(_1998) ? _2274 : min(_1998, _2274));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1852) + _1841;
        float _2495 = (_2490 * _1855) + _1845;
        float _2496 = (_2490 * _1858) + _1849;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2497;
        float _2500 = _2497 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2496 > _2500) || ((_2496 < _2498) || ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 < _2498) || (_2494 > _2500))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2496, cbModelParam._m0[17u].z, fma(_2495, cbModelParam._m0[17u].y, _2494 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2496, cbModelParam._m0[18u].z, fma(_2495, cbModelParam._m0[18u].y, _2494 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2496, cbModelParam._m0[19u].z, fma(_2495, cbModelParam._m0[19u].y, _2494 * cbModelParam._m0[19u].x))), _1786);
            frontier_phi_25_49_ladder = _2695.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2695.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2695.x * cbModelParam._m0[1u].z;
        }
        _1877 = frontier_phi_25_49_ladder_2;
        _1879 = frontier_phi_25_49_ladder_1;
        _1881 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_853, _854, _855), _1786);
        _1877 = _1861.x * cbModelParam._m0[1u].z;
        _1879 = _1861.y * cbModelParam._m0[1u].z;
        _1881 = _1861.z * cbModelParam._m0[1u].z;
    }
    float _1894 = (((_880 * _829) + _881) * _845) * ((cbModelParam._m0[1u].w * (_1877 - _1777)) + _1777);
    float _1896 = (((_880 * _831) + _881) * _845) * ((cbModelParam._m0[1u].w * (_1879 - _1779)) + _1779);
    float _1898 = (((_880 * _832) + _881) * _845) * ((cbModelParam._m0[1u].w * (_1881 - _1781)) + _1781);
    float _1901 = fma(_1898, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1894 * cbSceneParam._m0[89u].x));
    float _1904 = fma(_1898, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1894 * cbSceneParam._m0[90u].x));
    float _1907 = fma(_1898, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, _1894 * cbSceneParam._m0[91u].x));
    uvec4 _1917 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1919 = _1917.x * 14u;
    uint _1920 = _1919 + 13u;
    float _1927 = _845 + (-1.0);
    float _1932 = (cbLight._m0[_1920].x * _1927) + 1.0;
    float _1933 = (cbLight._m0[_1920].y * _1927) + 1.0;
    float _1934 = (cbLight._m0[_1920].z * _1927) + 1.0;
    float _1935 = (cbLight._m0[_1920].w * _1927) + 1.0;
    uint _1936 = _1919 + 5u;
    float _1942 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    uint _1946 = _1919 + 4u;
    float _1952 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1956 = _1919 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_668, _669, _670));
    float _1970 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_668, _669, _670));
    float _4187 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _4198 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1975 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _1977 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.3183098733425140380859375;
    float _1984 = ((cbLight._m0[_1936].x * _1942) * _1977) + ((cbLight._m0[_1946].x * _1952) * _1975);
    float _1985 = ((_1942 * cbLight._m0[_1936].y) * _1977) + ((_1952 * cbLight._m0[_1946].y) * _1975);
    float _1986 = ((_1942 * cbLight._m0[_1936].z) * _1977) + ((_1952 * cbLight._m0[_1946].z) * _1975);
    uvec4 _1990 = floatBitsToUint(cbLight._m0[_1919 + 12u]);
    bool _1992 = _1990.x == 0u;
    float _2003;
    float _2005;
    float _2007;
    if (_1992)
    {
        _2003 = _1984;
        _2005 = _1985;
        _2007 = _1986;
    }
    else
    {
        uint _2011 = _1919 + 6u;
        float _2027 = (dot(vec3(cbLight._m0[_1919 + 2u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2028 = _2027 * _2027;
        float _4209 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2029 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2030 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2003 = (((cbLight._m0[_2011].x * 0.3183098733425140380859375) * _2029) * _2030) + _1984;
        _2005 = (((cbLight._m0[_2011].y * 0.3183098733425140380859375) * _2029) * _2030) + _1985;
        _2007 = (((cbLight._m0[_2011].z * 0.3183098733425140380859375) * _2029) * _2030) + _1986;
    }
    bool _2010 = _1990.y == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_2010)
    {
        _2048 = _2003;
        _2050 = _2005;
        _2052 = _2007;
    }
    else
    {
        uint _2218 = _1919 + 7u;
        float _2234 = (dot(vec3(cbLight._m0[_1919 + 3u].xyz), vec3(_668, _669, _670)) * 0.5) + 0.5;
        float _2235 = _2234 * _2234;
        float _4225 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2236 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2237 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2048 = (((cbLight._m0[_2218].x * 0.3183098733425140380859375) * _2236) * _2237) + _2003;
        _2050 = (((cbLight._m0[_2218].y * 0.3183098733425140380859375) * _2236) * _2237) + _2005;
        _2052 = (((cbLight._m0[_2218].z * 0.3183098733425140380859375) * _2236) * _2237) + _2007;
    }
    uint _2055 = _1919 + 8u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _671) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1919].x + _747;
    float _2071 = cbLight._m0[_1919].y + _748;
    float _2072 = cbLight._m0[_1919].z + _749;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_1919].xyz));
    float _4241 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2084 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2085 = dot(vec3(_668, _669, _670), vec3(_2077, _2078, _2079));
    float _4263 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2077, _2078, _2079));
    float _4274 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2069 * _2069;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2105 = exp2(log2(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * 5.0);
    float _2106 = 0.959999978542327880859375 - _826;
    float _2108 = 0.959999978542327880859375 - _827;
    float _2109 = 0.959999978542327880859375 - _828;
    float _2116 = 1.0 - _2069;
    float _2127 = (0.5 / (((_2084 * ((_2083 * _2116) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2116) + _2069) * _2083))) * _2083;
    float _4285 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2129 = (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    uint _2140 = _1919 + 9u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _671) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_1956].x + _747;
    float _2154 = cbLight._m0[_1956].y + _748;
    float _2155 = cbLight._m0[_1956].z + _749;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_1956].xyz));
    float _4296 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2167 = dot(vec3(_668, _669, _670), vec3(_2160, _2161, _2162));
    float _4307 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2160, _2161, _2162));
    float _4318 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2152 * _2152;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2186 = exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0);
    float _2193 = 1.0 - _2152;
    float _2203 = (0.5 / (((_2084 * ((_2166 * _2193) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2193) + _2152) * _2166))) * _2166;
    float _4329 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2205 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    float _2215 = (((((_2186 * _2106) + _829) * cbLight._m0[_2140].x) * _2205) * _1942) + (((((_2105 * _2106) + _829) * cbLight._m0[_2055].x) * _2129) * _1952);
    float _2216 = (((((_2186 * _2108) + _831) * cbLight._m0[_2140].y) * _2205) * _1942) + (((((_2105 * _2108) + _831) * cbLight._m0[_2055].y) * _2129) * _1952);
    float _2217 = (((((_2186 * _2109) + _832) * cbLight._m0[_2140].z) * _2205) * _1942) + (((((_2105 * _2109) + _832) * cbLight._m0[_2055].z) * _2129) * _1952);
    float _2279;
    float _2281;
    float _2283;
    if (_1992)
    {
        _2279 = _2215;
        _2281 = _2216;
        _2283 = _2217;
    }
    else
    {
        uint _2285 = _1919 + 2u;
        uint _2289 = _1919 + 10u;
        float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _671) * 0.949999988079071044921875);
        float _2304 = _2303 * _2303;
        float _2305 = cbLight._m0[_2285].x + _747;
        float _2306 = cbLight._m0[_2285].y + _748;
        float _2307 = cbLight._m0[_2285].z + _749;
        float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
        float _2312 = _2311 * _2305;
        float _2313 = _2311 * _2306;
        float _2314 = _2311 * _2307;
        float _2315 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2285].xyz));
        float _4340 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2319 = dot(vec3(_668, _669, _670), vec3(_2312, _2313, _2314));
        float _4351 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2323 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2312, _2313, _2314));
        float _4362 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2327 = _2304 * _2304;
        float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
        float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0);
        float _2345 = 1.0 - _2304;
        float _2355 = (0.5 / (((_2084 * ((_2318 * _2345) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2345) + _2304) * _2318))) * _2318;
        float _4373 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2279 = (((((_2338 * _2106) + _829) * cbLight._m0[_2289].x) * _2357) * _2358) + _2215;
        _2281 = (((((_2338 * _2108) + _831) * cbLight._m0[_2289].y) * _2357) * _2358) + _2216;
        _2283 = (((((_2338 * _2109) + _832) * cbLight._m0[_2289].z) * _2357) * _2358) + _2217;
    }
    float _2393;
    float _2395;
    float _2397;
    if (_2010)
    {
        _2393 = _2279;
        _2395 = _2281;
        _2397 = _2283;
    }
    else
    {
        uint _2404 = _1919 + 3u;
        uint _2408 = _1919 + 11u;
        float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _671) * 0.949999988079071044921875);
        float _2423 = _2422 * _2422;
        float _2424 = cbLight._m0[_2404].x + _747;
        float _2425 = cbLight._m0[_2404].y + _748;
        float _2426 = cbLight._m0[_2404].z + _749;
        float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
        float _2431 = _2430 * _2424;
        float _2432 = _2430 * _2425;
        float _2433 = _2430 * _2426;
        float _2434 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2404].xyz));
        float _4389 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2438 = dot(vec3(_668, _669, _670), vec3(_2431, _2432, _2433));
        float _4400 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2442 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2431, _2432, _2433));
        float _4411 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2446 = _2423 * _2423;
        float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
        float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
        float _2464 = 1.0 - _2423;
        float _2474 = (0.5 / (((_2084 * ((_2437 * _2464) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2464) + _2423) * _2437))) * _2437;
        float _4422 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2476 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
        float _2477 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
        _2393 = (((((_2457 * _2106) + _829) * cbLight._m0[_2408].x) * _2476) * _2477) + _2279;
        _2395 = (((((_2457 * _2108) + _831) * cbLight._m0[_2408].y) * _2476) * _2477) + _2281;
        _2397 = (((((_2457 * _2109) + _832) * cbLight._m0[_2408].z) * _2476) * _2477) + _2283;
    }
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_1917.y == 0u)
    {
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2552;
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2552;
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2552;
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.x;
        uint _2579 = uint((float(_2567.y) * floor(float(uint(cbSceneParam._m0[85u].y * _768) / _2568))) + floor(float(uint(cbSceneParam._m0[85u].x * _767) / _2568)));
        float _2589 = (log2(_2555 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2590 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        uint _2593 = uint(isnan(14.0) ? _2590 : (isnan(_2590) ? 14.0 : min(_2590, 14.0)));
        uvec4 _2598 = texelFetch(g_lightClusterGridBuffer, int(((_2593 << 2u) + (_2579 << 6u)) >> 2u));
        uint _2599 = _2598.x;
        uint _2600 = _2567.z;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        if (((((1u << ((_2600 >> 4u) & 15u)) + 4294967295u) & _2599) == 0u) || ((_2600 & 240u) == 0u))
        {
            _2700 = 0.0;
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
        }
        else
        {
            float _2701;
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            uint _2859 = 0u;
            uint _2868;
            bool _2869;
            for (;;)
            {
                _2868 = texelFetch(g_lightClassification, int((((_2593 << 5u) + (_2579 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                _2869 = _2868 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2869)
                {
                    frontier_phi_66_pred = _2853;
                    frontier_phi_66_pred_1 = _2858;
                    frontier_phi_66_pred_2 = _2857;
                    frontier_phi_66_pred_3 = _2856;
                    frontier_phi_66_pred_4 = _2855;
                    frontier_phi_66_pred_5 = _2854;
                }
                else
                {
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    uint _3004;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2868;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    for (;;)
                    {
                        uint _3008 = uint(findLSB(_3004)) + (_2859 << 5u);
                        uint _3005 = (_3004 + 4294967295u) & _3004;
                        uint _3010 = _3008 * 48u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3030 = (_3008 * 48u) + 4u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3049 = (_3008 * 48u) + 8u;
                        vec3 _3060 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x));
                        float _3064 = _3024.x - _2553;
                        float _3065 = _3024.y - _2554;
                        float _3066 = _3024.z - _2555;
                        float _3067 = dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066));
                        float _3070 = inversesqrt(_3067);
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3074 = dot(vec3(_786, _789, _792), vec3(_3071, _3072, _3073));
                        float _3079 = 1.0 - (_3067 * _3024.w);
                        float _4448 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3081 = sqrt(_3067) * _3043.w;
                        float _3084 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3074) + _3085;
                        float _3091 = _3081 * _3081;
                        float _3095 = ((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3080) / ((_3091 * 0.699999988079071044921875) + 1.0);
                        float _3099 = (-0.0) - _2553;
                        float _3100 = (-0.0) - _2554;
                        float _3101 = (-0.0) - _2555;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3116 = exp2(log2(1.0 / ((_3091 * 3.5) + 5.0)) * 0.25);
                        float _3117 = 1.0 - _861;
                        float _3124 = sqrt(1.0 - ((1.0 - (_3117 * _3117)) * (1.0 - (_3116 * _3116))));
                        float _3125 = _3124 * _3124;
                        float _3126 = _3125 * _3125;
                        float _3127 = _3106 + _3071;
                        float _3128 = _3107 + _3072;
                        float _3129 = _3108 + _3073;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3137 = dot(vec3(_786, _789, _792), vec3(_3106, _3107, _3108));
                        float _4464 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3141 = dot(vec3(_786, _789, _792), vec3(_3133 * _3127, _3133 * _3128, _3133 * _3129));
                        float _4475 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3144 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3148 = ((_3144 * _3144) * (_3126 + (-1.0))) + 1.0;
                        float _3149 = _3084 * _3125;
                        float _3150 = _3149 * _3149;
                        float _3153 = ((1.0 - _3150) * _3074) + _3150;
                        float _4486 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3154 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3155 = 1.0 - _3125;
                        float _3165 = (0.5 / (((_3154 * ((_3140 * _3155) + _3125)) + 9.9999999392252902907785028219223e-09) + (((_3154 * _3155) + _3125) * _3140))) * _3154;
                        float _4497 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3176 = (((_3126 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3148 * _3148) * ((_3091 * 2.1991131305694580078125) + 3.141590118408203125))) * _3080;
                        _2928 = (_3095 * _3043.x) + _3001;
                        _2929 = (_3095 * _3043.y) + _3002;
                        _2930 = (_3095 * _3043.z) + _3003;
                        _2925 = (_3176 * _3060.x) + _2998;
                        _2926 = (_3176 * _3060.y) + _2999;
                        _2927 = (_3176 * _3060.z) + _3000;
                        if (_3005 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _3005;
                        }
                    }
                    frontier_phi_66_pred = _2925;
                    frontier_phi_66_pred_1 = _2930;
                    frontier_phi_66_pred_2 = _2929;
                    frontier_phi_66_pred_3 = _2928;
                    frontier_phi_66_pred_4 = _2927;
                    frontier_phi_66_pred_5 = _2926;
                }
                _2701 = frontier_phi_66_pred;
                _2711 = frontier_phi_66_pred_1;
                _2709 = frontier_phi_66_pred_2;
                _2707 = frontier_phi_66_pred_3;
                _2705 = frontier_phi_66_pred_4;
                _2703 = frontier_phi_66_pred_5;
                uint _2860 = _2859 + 1u;
                if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2853 = _2701;
                    _2854 = _2703;
                    _2855 = _2705;
                    _2856 = _2707;
                    _2857 = _2709;
                    _2858 = _2711;
                    _2859 = _2860;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2700 = _2701;
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
        }
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.z;
        uint _2717 = (_2715 >> 8u) & 15u;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        if (((4294967295u << _2717) & _2599) == 0u)
        {
            _2821 = _2700;
            _2823 = _2702;
            _2825 = _2704;
            _2827 = _2706;
            _2829 = _2708;
            _2831 = _2710;
        }
        else
        {
            float _2846 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
            float _2847 = _2846 * _2553;
            float _2848 = _2846 * _2554;
            float _2849 = _2846 * _2555;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2717 < ((_2715 >> 12u) & 15u))
            {
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2981 = _2700;
                float _2982 = _2702;
                float _2983 = _2704;
                float _2984 = _2706;
                float _2985 = _2708;
                float _2986 = _2710;
                uint _2987 = _2717;
                uint _2996;
                bool _2997;
                for (;;)
                {
                    _2996 = texelFetch(g_lightClassification, int((((_2593 << 5u) + (_2579 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                    _2997 = _2996 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2997)
                    {
                        frontier_phi_77_pred = _2986;
                        frontier_phi_77_pred_1 = _2985;
                        frontier_phi_77_pred_2 = _2984;
                        frontier_phi_77_pred_3 = _2983;
                        frontier_phi_77_pred_4 = _2982;
                        frontier_phi_77_pred_5 = _2981;
                    }
                    else
                    {
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3203 = _2981;
                        float _3204 = _2982;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        float _3207 = _2985;
                        float _3208 = _2986;
                        uint _3209 = _2996;
                        uint _3210;
                        vec4 _3235;
                        float _3236;
                        vec4 _3251;
                        vec3 _3263;
                        vec4 _3278;
                        vec4 _3294;
                        float _3340;
                        bool _3341;
                        for (;;)
                        {
                            uint _3220 = ((_2987 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3209));
                            _3210 = (_3209 + 4294967295u) & _3209;
                            uint _3222 = _3220 * 40u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            _3236 = _3235.w;
                            uint _3238 = (_3220 * 40u) + 4u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3220 * 40u) + 8u;
                            _3263 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x));
                            uint _3265 = (_3220 * 40u) + 16u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3281 = (_3220 * 40u) + 20u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3296 = (_3220 * 40u) + 24u;
                            vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3315 = (_3220 * 40u) + 28u;
                            vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3340 = fma(_2555, _3328.z, fma(_2554, _3328.y, _3328.x * _2553)) + _3328.w;
                            _3341 = !((fma(_2555, _3309.z, fma(_2554, _3309.y, _3309.x * _2553)) + _3309.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3341)
                            {
                                float _3368 = _3235.x - _2553;
                                float _3369 = _3235.y - _2554;
                                float _3370 = _3235.z - _2555;
                                float _3371 = dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370));
                                float _3374 = inversesqrt(_3371);
                                float _3375 = _3374 * _3368;
                                float _3376 = _3374 * _3369;
                                float _3377 = _3374 * _3370;
                                float _3381 = 1.0 - (_3371 / (_3236 * _3236));
                                float _4508 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3386 = sqrt(_3371) * _3251.w;
                                float _3388 = 1.39999997615814208984375 / (_3386 + 1.39999997615814208984375);
                                float _3389 = _3388 * _3388;
                                float _3392 = ((1.0 - _3389) * dot(vec3(_3375, _3376, _3377), vec3(_786, _789, _792))) + _3389;
                                float _3395 = _3386 * _3386;
                                float _3399 = (fma(_2555, _3278.z, fma(_2554, _3278.y, _3278.x * _2553)) + _3278.w) / _3340;
                                float _3400 = (fma(_2555, _3294.z, fma(_2554, _3294.y, _3294.x * _2553)) + _3294.w) / _3340;
                                float _3404 = 1.0 - dot(vec2(_3399, _3400), vec2(_3399, _3400));
                                float _4524 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3406 = _3405 * (((isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))) * _3382) / ((_3395 * 0.699999988079071044921875) + 1.0));
                                float _3418 = exp2(log2(1.0 / ((_3395 * 3.5) + 5.0)) * 0.25);
                                float _3419 = 1.0 - _861;
                                float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                                float _3427 = _3426 * _3426;
                                float _3428 = _3427 * _3427;
                                float _3429 = _3375 - _2847;
                                float _3430 = _3376 - _2848;
                                float _3431 = _3377 - _2849;
                                float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                                float _3439 = dot(vec3(_786, _789, _792), vec3((-0.0) - _2847, (-0.0) - _2848, (-0.0) - _2849));
                                float _4535 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3442 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3443 = dot(vec3(_786, _789, _792), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                                float _4546 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3446 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                                float _3451 = _3388 * _3427;
                                float _3452 = _3451 * _3451;
                                float _3458 = ((1.0 - _3452) * dot(vec3(_786, _789, _792), vec3(_3375, _3376, _3377))) + _3452;
                                float _4557 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3460 = 1.0 - _3427;
                                float _3470 = (0.5 / (((_3459 * ((_3442 * _3460) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3459 * _3460) + _3427) * _3442))) * _3459;
                                float _4568 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3480 = (_3405 * _3382) * (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3450 * _3450) * ((_3395 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3406 * _3251.y;
                                frontier_phi_83_pred_1 = _3406 * _3251.x;
                                frontier_phi_83_pred_2 = _3480 * _3263.z;
                                frontier_phi_83_pred_3 = _3480 * _3263.y;
                                frontier_phi_83_pred_4 = _3480 * _3263.x;
                                frontier_phi_83_pred_5 = _3406 * _3251.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3488 = frontier_phi_83_pred;
                            _3487 = frontier_phi_83_pred_1;
                            _3486 = frontier_phi_83_pred_2;
                            _3485 = frontier_phi_83_pred_3;
                            _3484 = frontier_phi_83_pred_4;
                            _3489 = frontier_phi_83_pred_5;
                            _3193 = _3487 + _3206;
                            _3194 = _3488 + _3207;
                            _3195 = _3489 + _3208;
                            _3190 = _3484 + _3203;
                            _3191 = _3485 + _3204;
                            _3192 = _3486 + _3205;
                            if (_3210 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3210;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3195;
                        frontier_phi_77_pred_1 = _3194;
                        frontier_phi_77_pred_2 = _3193;
                        frontier_phi_77_pred_3 = _3192;
                        frontier_phi_77_pred_4 = _3191;
                        frontier_phi_77_pred_5 = _3190;
                    }
                    _2832 = frontier_phi_77_pred;
                    _2830 = frontier_phi_77_pred_1;
                    _2828 = frontier_phi_77_pred_2;
                    _2826 = frontier_phi_77_pred_3;
                    _2824 = frontier_phi_77_pred_4;
                    _2822 = frontier_phi_77_pred_5;
                    uint _2988 = _2987 + 1u;
                    if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2981 = _2822;
                        _2982 = _2824;
                        _2983 = _2826;
                        _2984 = _2828;
                        _2985 = _2830;
                        _2986 = _2832;
                        _2987 = _2988;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2826;
                frontier_phi_58_59_ladder_1 = _2832;
                frontier_phi_58_59_ladder_2 = _2830;
                frontier_phi_58_59_ladder_3 = _2828;
                frontier_phi_58_59_ladder_4 = _2824;
                frontier_phi_58_59_ladder_5 = _2822;
            }
            else
            {
                frontier_phi_58_59_ladder = _2704;
                frontier_phi_58_59_ladder_1 = _2710;
                frontier_phi_58_59_ladder_2 = _2708;
                frontier_phi_58_59_ladder_3 = _2706;
                frontier_phi_58_59_ladder_4 = _2702;
                frontier_phi_58_59_ladder_5 = _2700;
            }
            _2821 = frontier_phi_58_59_ladder_5;
            _2823 = frontier_phi_58_59_ladder_4;
            _2825 = frontier_phi_58_59_ladder;
            _2827 = frontier_phi_58_59_ladder_3;
            _2829 = frontier_phi_58_59_ladder_2;
            _2831 = frontier_phi_58_59_ladder_1;
        }
        float _2836 = isnan(1.0) ? _845 : (isnan(_845) ? 1.0 : min(_845, 1.0));
        _2612 = (_2836 * _2827) + _2048;
        _2614 = (_2836 * _2829) + _2050;
        _2616 = (_2836 * _2831) + _2052;
        _2618 = ((_2821 * _829) * _2836) + _2393;
        _2620 = ((_2823 * _831) * _2836) + _2395;
        _2622 = ((_2825 * _832) * _2836) + _2397;
    }
    else
    {
        _2612 = _2048;
        _2614 = _2050;
        _2616 = _2052;
        _2618 = _2393;
        _2620 = _2395;
        _2622 = _2397;
    }
    float _4584 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4595 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4606 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _2639 = ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2612 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _845))) + ((_2618 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    float _2640 = ((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2614 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _845))) + ((_2620 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    float _2641 = ((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2616 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _845))) + ((_2622 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    uint _2642 = _249 + 6u;
    float _2650 = _767 / cbSceneParam._m0[86u].x;
    float _2651 = _768 / cbSceneParam._m0[86u].y;
    vec4 _2665 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2667 = _2665.x;
    float _2668 = _2665.y;
    float _2669 = _2665.z;
    float _2670 = _2665.w;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2725 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2726 = _2725 / _690;
        float _2737 = _2726 * _740;
        float _2738 = _741 * _2726;
        float _2739 = (-0.0) - _2738;
        float _2741 = _2726 * _742;
        float _2743 = (cbSceneParam._m0[77u].w * _2739) / _2725;
        float _2744 = _2743 + cbSceneParam._m0[79u].w;
        float _2745 = cbSceneParam._m0[79u].w - _2738;
        float _2751 = sqrt(((_2737 * _2737) + (_2738 * _2738)) + (_2741 * _2741));
        float _2754 = (1.0 - (cbSceneParam._m0[77u].w / _2725)) * _2751;
        float _2759 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2761 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2938;
        if (abs((_2739 - _2743) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2938 = ((((_2744 > 0.0) ? exp2(_2759 * _2744) : (2.0 - exp2(_2761 * _2744))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2754;
        }
        else
        {
            float _2882 = 1.0 / cbSceneParam._m0[80u].x;
            float _2883 = isnan(_2745) ? _2744 : (isnan(_2744) ? _2745 : max(_2744, _2745));
            float _2884 = isnan(_2745) ? _2744 : (isnan(_2744) ? _2745 : min(_2744, _2745));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            float _2894 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : min(_2884, 0.0));
            _2938 = ((abs(_2751 / _2739) * cbSceneParam._m0[80u].y) * ((((_2893 - _2894) * 2.0) - ((exp2(_2759 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0)))) - exp2(_2759 * (isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))))) * _2882)) - ((exp2(_2761 * _2893) - exp2(_2761 * _2894)) * _2882))) + (_2754 * cbSceneParam._m0[80u].z);
        }
        vec4 _2940 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, 1.0), 0.0);
        float _2949 = exp2((_2938 * (-1.44269502162933349609375)) * (1.0 - _2940.w));
        float _2950 = log2(_2949);
        float _2966 = log2(_2670);
        _2763 = (exp2(_2966 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].x)) * _2940.x) / cbSceneParam._m0[78u].x)) + _2667;
        _2765 = (exp2(_2966 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].y)) * _2940.y) / cbSceneParam._m0[78u].y)) + _2668;
        _2767 = (exp2(_2966 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].z)) * _2940.z) / cbSceneParam._m0[78u].z)) + _2669;
        _2769 = _2949 * _2670;
    }
    else
    {
        _2763 = _2667;
        _2765 = _2668;
        _2767 = _2669;
        _2769 = _2670;
    }
    bool _2976;
    vec4 _2779;
    vec4 _2801;
    float _2803;
    float _2807;
    float _2808;
    float _2809;
    float _2810;
    bool _2820;
    for (;;)
    {
        _2779 = cbMatDynParam._m0[0u];
        float _2781 = roundEven(_2779.y);
        bool _2782 = _2781 == 3.0;
        float _2783 = log2(_2769);
        float _2790 = exp2(_2783 * cbSceneParam._m0[78u].x) * _2639;
        float _2791 = exp2(_2783 * cbSceneParam._m0[78u].y) * _2640;
        float _2792 = exp2(_2783 * cbSceneParam._m0[78u].z) * _2641;
        float _2799 = _756 + (-0.5);
        _2801 = cbMtdParam._m0[1u];
        _2803 = _2801.y * _2799;
        float _2806 = (_2781 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2807 = _2806 * (_2782 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2763)));
        _2808 = _2806 * (_2782 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2765)));
        _2809 = _2806 * (_2782 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2767)));
        _2810 = _2799 * 0.999000012874603271484375;
        _2820 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2820)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2810) < 0.5)
            {
                _2976 = true;
                break;
            }
        }
        uint _2917 = _805 + uint(_2779.w);
        if ((cbInstanceData._m0[_2917].w < 1.0) && ((cbInstanceData._m0[_2917].w + _2810) < 0.5))
        {
            _2976 = true;
            break;
        }
        if ((_2803 + 1.0) < _2801.x)
        {
            _2976 = true;
            break;
        }
        _2976 = false;
        break;
    }
    float _3181;
    if (_2976)
    {
        discard_state = true;
        _3181 = 0.0;
    }
    else
    {
        _3181 = cbInstanceData._m0[_2642].w;
    }
    SV_Target.x = _2807;
    SV_Target.y = _2808;
    SV_Target.z = _2809;
    SV_Target.w = _3181;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2642].w;
    discard_exit();
}


