#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1567;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3914 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3925 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3936 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _348 = _343.x * cbMtdParam._m0[11u].x;
    float _349 = _343.y * cbMtdParam._m0[11u].y;
    float _350 = _343.z * cbMtdParam._m0[11u].z;
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _388.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[23u].w) + _437) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3947 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _462 = (_455 * ((_369.x * cbMtdParam._m0[12u].x) - _348)) + _348;
    float _463 = (_455 * ((_369.y * cbMtdParam._m0[12u].y) - _349)) + _349;
    float _464 = (_455 * ((_369.z * cbMtdParam._m0[12u].z) - _350)) + _350;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _388.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[23u].w) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3958 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _305) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _306) + cbTextureTilingScale._m0[24u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _575 = _573.x;
    float _585 = dot(vec4(_575, _573.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _597 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _388.z) * 2.0) - ((((_575 - _585) * cbMtdParam._m0[23u].w) + _585) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3969 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _605 = (_598 * ((_556.x * cbMtdParam._m0[14u].x) - _535)) + _535;
    float _606 = (_598 * ((_556.y * cbMtdParam._m0[14u].y) - _536)) + _536;
    float _607 = (_598 * ((_556.z * cbMtdParam._m0[14u].z) - _537)) + _537;
    float _611 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _605;
    float _614 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _606;
    float _617 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _607;
    float _624 = ((_605 - _611) * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) + _611;
    float _625 = ((_606 - _614) * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) + _614;
    float _626 = ((_607 - _617) * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) + _617;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _305) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _306) + cbTextureTilingScale._m0[14u].w));
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _707 = _705.x;
    float _708 = _705.y;
    float _709 = _705.z;
    float _716 = ((_688.x - _707) * _455) + _707;
    float _717 = ((_688.y - _708) * _455) + _708;
    float _718 = ((_688.z - _709) * _455) + _709;
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _741 = ((_730.x - _716) * _528) + _716;
    float _742 = ((_730.y - _717) * _528) + _717;
    float _743 = ((_730.z - _718) * _528) + _718;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _305) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _306) + cbTextureTilingScale._m0[23u].w));
    float _768 = ((_755.z - _743) * _598) + _743;
    float _771 = ((((_755.x - _741) * _598) + _741) * 2.0) + (-1.0);
    float _772 = ((((_755.y - _742) * _598) + _742) * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _3980 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _778 = sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))));
    vec4 _796 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _808 = (_771 + ((((_663.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_796.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _809 = (_772 + ((((_663.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_796.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _812 = fma(_778, _253, fma(_809, _260, _808 * _246));
    float _815 = fma(_778, _254, fma(_809, _261, _808 * _247));
    float _818 = fma(_778, _255, fma(_809, _262, _808 * _248));
    float _822 = inversesqrt(dot(vec3(_812, _815, _818), vec3(_812, _815, _818)));
    vec4 _849 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _851 = _849.x;
    float _852 = 1.0 - _851;
    float _860 = (cbMtdParam._m0[19u].x + dot(vec4(_822 * _812, _822 * _815, _822 * _818, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_851 - _852) * cbMtdParam._m0[24u].z) + _852) * cbMtdParam._m0[21u].z);
    float _3991 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _861 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _868 = (_861 * ((_644.x * cbMtdParam._m0[18u].x) - _624)) + _624;
    float _869 = (_861 * ((_644.y * cbMtdParam._m0[18u].y) - _625)) + _625;
    float _870 = (_861 * ((_644.z * cbMtdParam._m0[18u].z) - _626)) + _626;
    vec4 _896 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _898 = _896.x;
    float _916 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _898) * _455) + _898;
    float _933 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _916) * _528) + _916;
    float _951 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w)).x - _933) * _598) + _933;
    float _955 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _951) * cbMtdParam._m0[19u].z) + _951;
    float _957 = _955 - (_955 * _861);
    float _962 = (((_663.z - _768) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _768;
    float _966 = ((_796.z - _962) * cbMtdParam._m0[19u].w) + _962;
    vec4 _979 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _986 = (_979.x * 2.0) + (-1.0);
    float _987 = (_979.y * 2.0) + (-1.0);
    float _988 = dot(vec2(_986, _987), vec2(_986, _987));
    float _4002 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _996 = ((_979.z - _966) * _861) + _966;
    float _1006 = ((sqrt(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) - _778) * _861) + _778;
    float _1009 = (((_986 - _808) * _861) + _808) + (cbMtdParam._m0[21u].x * _808);
    float _1010 = (((_987 - _809) * _861) + _809) + (cbMtdParam._m0[21u].x * _809);
    float _1014 = cbMtdParam._m0[22u].x + _796.w;
    float _1017 = fma(_1006, _253, fma(_1010, _260, _1009 * _246));
    float _1020 = fma(_1006, _254, fma(_1010, _261, _1009 * _247));
    float _1023 = fma(_1006, _255, fma(_1010, _262, _1009 * _248));
    float _1027 = inversesqrt(dot(vec3(_1017, _1020, _1023), vec3(_1017, _1020, _1023)));
    float _1028 = _1027 * _1017;
    float _1029 = _1027 * _1020;
    float _1030 = _1027 * _1023;
    float _4013 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _1031 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _4035 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4046 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4057 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4068 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _1036 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1050 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1100 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1090);
    float _1101 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1090);
    float _1102 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1090);
    float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
    float _1107 = _1100 * _1106;
    float _1108 = _1101 * _1106;
    float _1109 = _1102 * _1106;
    float _1115 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1116 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1134 = fma(_1030, cbSceneParam._m0[5u].z, fma(_1029, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1028));
    float _1137 = fma(_1030, cbSceneParam._m0[6u].z, fma(_1029, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1028));
    float _1140 = fma(_1030, cbSceneParam._m0[7u].z, fma(_1029, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1028));
    uint _1154 = (_286 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1160 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_1154].x;
    float _1161 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_1154].y;
    float _1162 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_1154].z;
    float _4079 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1163 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1164 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _1165 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _1166 = 1.0 - _1036;
    float _1167 = _1163 * _1166;
    float _1168 = _1164 * _1166;
    float _1169 = _1165 * _1166;
    float _1174 = (_1163 + (-0.039999999105930328369140625)) * _1036;
    float _1175 = (_1164 + (-0.039999999105930328369140625)) * _1036;
    float _1176 = (_1165 + (-0.039999999105930328369140625)) * _1036;
    float _1177 = _1174 + 0.039999999105930328369140625;
    float _1179 = _1175 + 0.039999999105930328369140625;
    float _1180 = _1176 + 0.039999999105930328369140625;
    vec4 _1189 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1115, cbSceneParam._m0[86u].y * _1116));
    float _1193 = ((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * TEXCOORD_5.w) * _1189.x;
    float _1194 = dot(vec3(_1028, _1029, _1030), vec3(_1107, _1108, _1109));
    float _1197 = _1194 * 2.0;
    float _1201 = (_1197 * _1028) - _1107;
    float _1202 = (_1197 * _1029) - _1108;
    float _1203 = (_1197 * _1030) - _1109;
    float _1207 = abs(dot(vec3(_1107, _1108, _1109), vec3(_1028, _1029, _1030)));
    float _4112 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1209 = sqrt(_1031);
    float _1222 = exp2((_1209 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1209 * 3.0));
    float _1228 = (1.0 - _1222) * ((_1209 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1229 = _1222 * _1209;
    float _1257 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1261 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1265 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1566;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1291 = fma(_1265, cbModelParam._m0[26u].z, fma(_1261, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1257));
        float _1295 = fma(_1265, cbModelParam._m0[27u].z, fma(_1261, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1257));
        float _1299 = fma(_1265, cbModelParam._m0[28u].z, fma(_1261, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1257));
        float _1324 = _1257 + _1028;
        float _1325 = _1261 + _1029;
        float _1326 = _1265 + _1030;
        float _1336 = fma(_1326, cbModelParam._m0[26u].z, fma(_1325, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1324)) - _1291;
        float _1337 = fma(_1326, cbModelParam._m0[27u].z, fma(_1325, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1324)) - _1295;
        float _1338 = fma(_1326, cbModelParam._m0[28u].z, fma(_1325, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1324)) - _1299;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1355 = ((_1342 * _1336) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1291 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1337) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1295 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1342 * _1338) / cbModelParam._m0[34u].z) + ((((((_1299 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        float _1394 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1360.x + (-0.5));
        float _1396 = _1394 * (_1360.y + (-0.5));
        float _1397 = _1394 * (_1360.z + (-0.5));
        float _1404 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1367.x + (-0.5));
        float _1406 = _1404 * (_1367.y + (-0.5));
        float _1407 = _1404 * (_1367.z + (-0.5));
        float _1414 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1374.x + (-0.5));
        float _1416 = _1414 * (_1374.y + (-0.5));
        float _1417 = _1414 * (_1374.z + (-0.5));
        float _1424 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1381.x + (-0.5));
        float _1426 = _1424 * (_1381.y + (-0.5));
        float _1427 = _1424 * (_1381.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1448 = (dot(vec3(_1028, _1029, _1030), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1458 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4160 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1460 + 1.0))) + _1465) * _1428;
        float _1475 = _1396 * 0.5;
        float _1476 = _1406 * 0.5;
        float _1477 = _1416 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_1028, _1029, _1030), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4193 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1502 + 1.0))) + _1507) * _1429;
        float _1517 = _1397 * 0.5;
        float _1518 = _1407 * 0.5;
        float _1519 = _1417 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_1028, _1029, _1030), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4226 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1544 + 1.0))) + _1549) * _1430;
        _1566 = _1397;
        _1568 = _1396;
        _1569 = _1395;
        _1570 = _1407;
        _1571 = _1406;
        _1572 = _1405;
        _1573 = _1417;
        _1574 = _1416;
        _1575 = _1415;
        _1576 = _1430;
        _1577 = _1429;
        _1578 = _1428;
        _1579 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1580 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1581 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1567;
        _1568 = _1567;
        _1569 = _1567;
        _1570 = _1567;
        _1571 = _1567;
        _1572 = _1567;
        _1573 = _1567;
        _1574 = _1567;
        _1575 = _1567;
        _1576 = _1567;
        _1577 = _1567;
        _1578 = _1567;
        _1579 = 0.0;
        _1580 = 0.0;
        _1581 = 0.0;
    }
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1604 = fma(_1265, cbModelParam._m0[30u].z, fma(_1261, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1257));
        float _1608 = fma(_1265, cbModelParam._m0[31u].z, fma(_1261, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1257));
        float _1612 = fma(_1265, cbModelParam._m0[32u].z, fma(_1261, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1257));
        float _1635 = _1257 + _1028;
        float _1636 = _1261 + _1029;
        float _1637 = _1265 + _1030;
        float _1647 = fma(_1637, cbModelParam._m0[30u].z, fma(_1636, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1635)) - _1604;
        float _1648 = fma(_1637, cbModelParam._m0[31u].z, fma(_1636, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1635)) - _1608;
        float _1649 = fma(_1637, cbModelParam._m0[32u].z, fma(_1636, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1635)) - _1612;
        float _1653 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
        float _1666 = ((_1653 * _1647) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1604 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1667 = ((_1653 * _1648) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1608 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1668 = ((_1653 * _1649) / cbModelParam._m0[35u].z) + ((((((_1612 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1691 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        float _1703 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1670.x + (-0.5));
        float _1705 = _1703 * (_1670.y + (-0.5));
        float _1706 = _1703 * (_1670.z + (-0.5));
        float _1713 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1677.x + (-0.5));
        float _1715 = _1713 * (_1677.y + (-0.5));
        float _1716 = _1713 * (_1677.z + (-0.5));
        float _1723 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1684.x + (-0.5));
        float _1725 = _1723 * (_1684.y + (-0.5));
        float _1726 = _1723 * (_1684.z + (-0.5));
        float _1733 = exp2((_1691.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1691.x + (-0.5));
        float _1735 = _1733 * (_1691.y + (-0.5));
        float _1736 = _1733 * (_1691.z + (-0.5));
        float _1737 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1738 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1739 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1740 = _1704 * 0.5;
        float _1741 = _1714 * 0.5;
        float _1742 = _1724 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_1028, _1029, _1030), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1737 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4289 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1767 + 1.0))) + _1772) * _1737;
        float _1782 = _1705 * 0.5;
        float _1783 = _1715 * 0.5;
        float _1784 = _1725 * 0.5;
        float _1785 = dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784));
        float _1790 = (_1785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1785);
        float _1798 = (dot(vec3(_1028, _1029, _1030), vec3(_1790 * _1782, _1790 * _1783, _1790 * _1784)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1807 = sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784)) / (_1738 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1809 = _1808 * 2.0;
        float _1813 = (1.0 - _1808) / (_1808 + 1.0);
        float _4322 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1823 = ((((1.0 - _1814) * (_1809 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1809 + 1.0))) + _1814) * _1738;
        float _1824 = _1706 * 0.5;
        float _1825 = _1716 * 0.5;
        float _1826 = _1726 * 0.5;
        float _1827 = dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826));
        float _1832 = (_1827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1827);
        float _1840 = (dot(vec3(_1028, _1029, _1030), vec3(_1832 * _1824, _1832 * _1825, _1832 * _1826)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826)) / (_1739 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1851 = _1850 * 2.0;
        float _1855 = (1.0 - _1850) / (_1850 + 1.0);
        float _4355 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1865 = ((((1.0 - _1856) * (_1851 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1851 + 1.0))) + _1856) * _1739;
        _1873 = _1706;
        _1874 = _1705;
        _1875 = _1704;
        _1876 = _1716;
        _1877 = _1715;
        _1878 = _1714;
        _1879 = _1726;
        _1880 = _1725;
        _1881 = _1724;
        _1882 = _1739;
        _1883 = _1738;
        _1884 = _1737;
        _1885 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
        _1886 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)));
        _1887 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
    }
    else
    {
        _1873 = _1567;
        _1874 = _1567;
        _1875 = _1567;
        _1876 = _1567;
        _1877 = _1567;
        _1878 = _1567;
        _1879 = _1567;
        _1880 = _1567;
        _1881 = _1567;
        _1882 = _1567;
        _1883 = _1567;
        _1884 = _1567;
        _1885 = 0.0;
        _1886 = 0.0;
        _1887 = 0.0;
    }
    float _1897 = (cbModelParam._m0[1u].x * (_1885 - _1579)) + _1579;
    float _1898 = (cbModelParam._m0[1u].x * (_1886 - _1580)) + _1580;
    float _1899 = (cbModelParam._m0[1u].x * (_1887 - _1581)) + _1581;
    float _1920 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1897));
    float _1941 = _1201 * 0.5;
    float _1942 = _1202 * 0.5;
    float _1943 = _1203 * 0.5;
    float _1944 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1875, _1878, _1881, _1884));
    float _1947 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1874, _1877, _1880, _1883));
    float _1950 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1873, _1876, _1879, _1882));
    float _1984;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1957 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1566, _1570, _1573, _1576));
        float _1961 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1568, _1571, _1574, _1577));
        float _1965 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1569, _1572, _1575, _1578));
        float _1972 = dot(vec4(cbModelParam._m0[39u]), vec4(_1941, _1942, _1943, 1.0));
        _1984 = dot(vec3(isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)), isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1972) ? 0.0 : (isnan(0.0) ? _1972 : max(0.0, _1972))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1984 = 1.0;
    }
    float _1995;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1986 = dot(vec4(cbModelParam._m0[40u]), vec4(_1941, _1942, _1943, 1.0));
        _1995 = dot(vec3(isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0)), isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1986) ? 0.0 : (isnan(0.0) ? _1986 : max(0.0, _1986))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1995 = 1.0;
    }
    float _1999 = (_1995 * cbModelParam._m0[1u].x) + (_1984 * (1.0 - cbModelParam._m0[1u].x));
    float _2009 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1031);
    float _2010 = isnan(_2009) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2009 : min(cbModelParam._m0[25u].z, _2009));
    float _2090;
    float _2092;
    float _2094;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2057 = fma(_1265, cbModelParam._m0[13u].z, fma(_1261, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1257)) + cbModelParam._m0[13u].w;
        float _2061 = fma(_1265, cbModelParam._m0[14u].z, fma(_1261, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1257)) + cbModelParam._m0[14u].w;
        float _2065 = fma(_1265, cbModelParam._m0[15u].z, fma(_1261, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1257)) + cbModelParam._m0[15u].w;
        float _2068 = fma(_1203, cbModelParam._m0[13u].z, fma(_1202, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1201));
        float _2071 = fma(_1203, cbModelParam._m0[14u].z, fma(_1202, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1201));
        float _2074 = fma(_1203, cbModelParam._m0[15u].z, fma(_1202, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1201));
        float _2102;
        if (_2068 > 0.0)
        {
            _2102 = abs((1.0 - _2057) / _2068);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2057 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2102 = frontier_phi_14_12_ladder;
        }
        float _2325;
        if (_2071 > 0.0)
        {
            _2325 = abs((1.0 - _2061) / _2071);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2061 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2325 = frontier_phi_23_19_ladder;
        }
        float _2582;
        if (_2074 > 0.0)
        {
            _2582 = abs((1.0 - _2065) / _2074);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2065 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2582 = frontier_phi_35_30_ladder;
        }
        float _2584 = isnan(_2325) ? _2102 : (isnan(_2102) ? _2325 : min(_2102, _2325));
        float _2585 = isnan(_2582) ? _2584 : (isnan(_2584) ? _2582 : min(_2584, _2582));
        float _2589 = (_2585 * _2068) + _2057;
        float _2590 = (_2585 * _2071) + _2061;
        float _2591 = (_2585 * _2074) + _2065;
        float _2592 = _2585 * 9.9999997473787516355514526367188e-05;
        float _2594 = (-1.0) - _2592;
        float _2596 = _2592 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2591 > _2596) || ((_2591 < _2594) || ((_2590 > _2596) || ((_2590 < _2594) || ((_2589 < _2594) || (_2589 > _2596))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2591, cbModelParam._m0[9u].z, fma(_2590, cbModelParam._m0[9u].y, _2589 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2591, cbModelParam._m0[10u].z, fma(_2590, cbModelParam._m0[10u].y, _2589 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2591, cbModelParam._m0[11u].z, fma(_2590, cbModelParam._m0[11u].y, _2589 * cbModelParam._m0[11u].x))), _2010);
            frontier_phi_13_35_ladder = _2719.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2719.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2719.x * cbModelParam._m0[1u].y;
        }
        _2090 = frontier_phi_13_35_ladder_2;
        _2092 = frontier_phi_13_35_ladder_1;
        _2094 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1201, _1202, _1203), _2010);
        _2090 = _2078.x * cbModelParam._m0[1u].y;
        _2092 = _2078.y * cbModelParam._m0[1u].y;
        _2094 = _2078.z * cbModelParam._m0[1u].y;
    }
    float _2098 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1031);
    float _2099 = isnan(_2098) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2098 : min(cbModelParam._m0[25u].w, _2098));
    float _2188;
    float _2190;
    float _2192;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2152 = fma(_1265, cbModelParam._m0[21u].z, fma(_1261, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1257)) + cbModelParam._m0[21u].w;
        float _2156 = fma(_1265, cbModelParam._m0[22u].z, fma(_1261, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1257)) + cbModelParam._m0[22u].w;
        float _2160 = fma(_1265, cbModelParam._m0[23u].z, fma(_1261, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1257)) + cbModelParam._m0[23u].w;
        float _2163 = fma(_1203, cbModelParam._m0[21u].z, fma(_1202, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1201));
        float _2166 = fma(_1203, cbModelParam._m0[22u].z, fma(_1202, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1201));
        float _2169 = fma(_1203, cbModelParam._m0[23u].z, fma(_1202, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1201));
        float _2330;
        if (_2163 > 0.0)
        {
            _2330 = abs((1.0 - _2152) / _2163);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2152 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2330 = frontier_phi_25_21_ladder;
        }
        float _2609;
        if (_2166 > 0.0)
        {
            _2609 = abs((1.0 - _2156) / _2166);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2166 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2156 + 1.0) / _2166);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2609 = frontier_phi_37_32_ladder;
        }
        float _2822;
        if (_2169 > 0.0)
        {
            _2822 = abs((1.0 - _2160) / _2169);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2169 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2160 + 1.0) / _2169);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2822 = frontier_phi_46_43_ladder;
        }
        float _2824 = isnan(_2609) ? _2330 : (isnan(_2330) ? _2609 : min(_2330, _2609));
        float _2825 = isnan(_2822) ? _2824 : (isnan(_2824) ? _2822 : min(_2824, _2822));
        float _2829 = (_2825 * _2163) + _2152;
        float _2830 = (_2825 * _2166) + _2156;
        float _2831 = (_2825 * _2169) + _2160;
        float _2832 = _2825 * 9.9999997473787516355514526367188e-05;
        float _2833 = (-1.0) - _2832;
        float _2835 = _2832 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2831 > _2835) || ((_2831 < _2833) || ((_2830 > _2835) || ((_2830 < _2833) || ((_2829 < _2833) || (_2829 > _2835))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2831, cbModelParam._m0[17u].z, fma(_2830, cbModelParam._m0[17u].y, _2829 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2831, cbModelParam._m0[18u].z, fma(_2830, cbModelParam._m0[18u].y, _2829 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2831, cbModelParam._m0[19u].z, fma(_2830, cbModelParam._m0[19u].y, _2829 * cbModelParam._m0[19u].x))), _2099);
            frontier_phi_22_46_ladder = _3030.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3030.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3030.x * cbModelParam._m0[1u].z;
        }
        _2188 = frontier_phi_22_46_ladder_2;
        _2190 = frontier_phi_22_46_ladder_1;
        _2192 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2172 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1201, _1202, _1203), _2099);
        _2188 = _2172.x * cbModelParam._m0[1u].z;
        _2190 = _2172.y * cbModelParam._m0[1u].z;
        _2192 = _2172.z * cbModelParam._m0[1u].z;
    }
    float _2205 = (((_1228 * _1177) + _1229) * _1193) * ((cbModelParam._m0[1u].w * (_2188 - _2090)) + _2090);
    float _2207 = (((_1228 * _1179) + _1229) * _1193) * ((cbModelParam._m0[1u].w * (_2190 - _2092)) + _2092);
    float _2209 = (((_1228 * _1180) + _1229) * _1193) * ((cbModelParam._m0[1u].w * (_2192 - _2094)) + _2094);
    float _2212 = fma(_2209, cbSceneParam._m0[89u].z, fma(_2207, cbSceneParam._m0[89u].y, _2205 * cbSceneParam._m0[89u].x));
    float _2215 = fma(_2209, cbSceneParam._m0[90u].z, fma(_2207, cbSceneParam._m0[90u].y, _2205 * cbSceneParam._m0[90u].x));
    float _2218 = fma(_2209, cbSceneParam._m0[91u].z, fma(_2207, cbSceneParam._m0[91u].y, _2205 * cbSceneParam._m0[91u].x));
    vec4 _2226 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1115, _1116));
    float _2228 = _2226.w;
    float _2240 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2228);
    float _2241 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2228);
    float _2242 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2228);
    uvec4 _2246 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2248 = _2246.x * 14u;
    uint _2249 = _2248 + 13u;
    float _2256 = _1193 + (-1.0);
    float _2261 = (cbLight._m0[_2249].x * _2256) + 1.0;
    float _2262 = (cbLight._m0[_2249].y * _2256) + 1.0;
    float _2263 = (cbLight._m0[_2249].z * _2256) + 1.0;
    float _2264 = (cbLight._m0[_2249].w * _2256) + 1.0;
    uint _2265 = _2248 + 5u;
    float _2271 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
    uint _2275 = _2248 + 4u;
    float _2284 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
    uint _2288 = _2248 | 1u;
    float _2299 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_1028, _1029, _1030));
    float _2302 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_1028, _1029, _1030));
    float _4491 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _4502 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2307 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * 0.3183098733425140380859375;
    float _2309 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2316 = ((cbLight._m0[_2265].x * _2271) * _2309) + (((cbLight._m0[_2275].x * _2240) * _2284) * _2307);
    float _2317 = ((_2271 * cbLight._m0[_2265].y) * _2309) + (((cbLight._m0[_2275].y * _2241) * _2284) * _2307);
    float _2318 = ((_2271 * cbLight._m0[_2265].z) * _2309) + (((cbLight._m0[_2275].z * _2242) * _2284) * _2307);
    uvec4 _2322 = floatBitsToUint(cbLight._m0[_2248 + 12u]);
    bool _2324 = _2322.x == 0u;
    float _2335;
    float _2337;
    float _2339;
    if (_2324)
    {
        _2335 = _2316;
        _2337 = _2317;
        _2339 = _2318;
    }
    else
    {
        uint _2343 = _2248 + 6u;
        float _2359 = (dot(vec3(cbLight._m0[_2248 + 2u].xyz), vec3(_1028, _1029, _1030)) * 0.5) + 0.5;
        float _2360 = _2359 * _2359;
        float _4513 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2361 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2362 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2335 = (((cbLight._m0[_2343].x * 0.3183098733425140380859375) * _2361) * _2362) + _2316;
        _2337 = (((cbLight._m0[_2343].y * 0.3183098733425140380859375) * _2361) * _2362) + _2317;
        _2339 = (((cbLight._m0[_2343].z * 0.3183098733425140380859375) * _2361) * _2362) + _2318;
    }
    bool _2342 = _2322.y == 0u;
    float _2380;
    float _2382;
    float _2384;
    if (_2342)
    {
        _2380 = _2335;
        _2382 = _2337;
        _2384 = _2339;
    }
    else
    {
        uint _2553 = _2248 + 7u;
        float _2569 = (dot(vec3(cbLight._m0[_2248 + 3u].xyz), vec3(_1028, _1029, _1030)) * 0.5) + 0.5;
        float _2570 = _2569 * _2569;
        float _4529 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2571 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2572 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2380 = (((cbLight._m0[_2553].x * 0.3183098733425140380859375) * _2571) * _2572) + _2335;
        _2382 = (((cbLight._m0[_2553].y * 0.3183098733425140380859375) * _2571) * _2572) + _2337;
        _2384 = (((cbLight._m0[_2553].z * 0.3183098733425140380859375) * _2571) * _2572) + _2339;
    }
    uint _2387 = _2248 + 8u;
    float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _1031) * 0.949999988079071044921875);
    float _2401 = _2400 * _2400;
    float _2402 = cbLight._m0[_2248].x + _1107;
    float _2403 = cbLight._m0[_2248].y + _1108;
    float _2404 = cbLight._m0[_2248].z + _1109;
    float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
    float _2409 = _2408 * _2402;
    float _2410 = _2408 * _2403;
    float _2411 = _2408 * _2404;
    float _2412 = dot(vec3(_1028, _1029, _1030), vec3(cbLight._m0[_2248].xyz));
    float _4545 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _4556 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _2416 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2417 = dot(vec3(_1028, _1029, _1030), vec3(_2409, _2410, _2411));
    float _4567 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2421 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2409, _2410, _2411));
    float _4578 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2425 = _2401 * _2401;
    float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
    float _2437 = exp2(log2(1.0 - (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) * 5.0);
    float _2438 = 0.959999978542327880859375 - _1174;
    float _2440 = 0.959999978542327880859375 - _1175;
    float _2441 = 0.959999978542327880859375 - _1176;
    float _2448 = 1.0 - _2401;
    float _2459 = (0.5 / (((_2416 * ((_2415 * _2448) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2416 * _2448) + _2401) * _2415))) * _2415;
    float _4589 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2461 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
    uint _2475 = _2248 + 9u;
    float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _1031) * 0.949999988079071044921875);
    float _2487 = _2486 * _2486;
    float _2488 = cbLight._m0[_2288].x + _1107;
    float _2489 = cbLight._m0[_2288].y + _1108;
    float _2490 = cbLight._m0[_2288].z + _1109;
    float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
    float _2495 = _2494 * _2488;
    float _2496 = _2494 * _2489;
    float _2497 = _2494 * _2490;
    float _2498 = dot(vec3(_1028, _1029, _1030), vec3(cbLight._m0[_2288].xyz));
    float _4600 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2502 = dot(vec3(_1028, _1029, _1030), vec3(_2495, _2496, _2497));
    float _4611 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2506 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2495, _2496, _2497));
    float _4622 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2510 = _2487 * _2487;
    float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
    float _2521 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
    float _2528 = 1.0 - _2487;
    float _2538 = (0.5 / (((_2416 * ((_2501 * _2528) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2416 * _2528) + _2487) * _2501))) * _2501;
    float _4633 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2540 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
    float _2550 = (((((_2521 * _2438) + _1177) * cbLight._m0[_2475].x) * _2540) * _2271) + ((((cbLight._m0[_2387].x * _2240) * ((_2437 * _2438) + _1177)) * _2461) * _2284);
    float _2551 = (((((_2521 * _2440) + _1179) * cbLight._m0[_2475].y) * _2540) * _2271) + ((((cbLight._m0[_2387].y * _2241) * ((_2437 * _2440) + _1179)) * _2461) * _2284);
    float _2552 = (((((_2521 * _2441) + _1180) * cbLight._m0[_2475].z) * _2540) * _2271) + ((((cbLight._m0[_2387].z * _2242) * ((_2437 * _2441) + _1180)) * _2461) * _2284);
    float _2614;
    float _2616;
    float _2618;
    if (_2324)
    {
        _2614 = _2550;
        _2616 = _2551;
        _2618 = _2552;
    }
    else
    {
        uint _2620 = _2248 + 2u;
        uint _2624 = _2248 + 10u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _1031) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _1107;
        float _2641 = cbLight._m0[_2620].y + _1108;
        float _2642 = cbLight._m0[_2620].z + _1109;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_1028, _1029, _1030), vec3(cbLight._m0[_2620].xyz));
        float _4644 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2654 = dot(vec3(_1028, _1029, _1030), vec3(_2647, _2648, _2649));
        float _4655 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4666 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0);
        float _2680 = 1.0 - _2639;
        float _2690 = (0.5 / (((_2416 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2416 * _2680) + _2639) * _2653))) * _2653;
        float _4677 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2614 = (((((_2673 * _2438) + _1177) * cbLight._m0[_2624].x) * _2692) * _2693) + _2550;
        _2616 = (((((_2673 * _2440) + _1179) * cbLight._m0[_2624].y) * _2692) * _2693) + _2551;
        _2618 = (((((_2673 * _2441) + _1180) * cbLight._m0[_2624].z) * _2692) * _2693) + _2552;
    }
    float _2728;
    float _2730;
    float _2732;
    if (_2342)
    {
        _2728 = _2614;
        _2730 = _2616;
        _2732 = _2618;
    }
    else
    {
        uint _2739 = _2248 + 3u;
        uint _2743 = _2248 + 11u;
        float _2757 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2739].w)) * _1031) * 0.949999988079071044921875);
        float _2758 = _2757 * _2757;
        float _2759 = cbLight._m0[_2739].x + _1107;
        float _2760 = cbLight._m0[_2739].y + _1108;
        float _2761 = cbLight._m0[_2739].z + _1109;
        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
        float _2766 = _2765 * _2759;
        float _2767 = _2765 * _2760;
        float _2768 = _2765 * _2761;
        float _2769 = dot(vec3(_1028, _1029, _1030), vec3(cbLight._m0[_2739].xyz));
        float _4693 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2773 = dot(vec3(_1028, _1029, _1030), vec3(_2766, _2767, _2768));
        float _4704 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2776 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2777 = dot(vec3(cbLight._m0[_2739].xyz), vec3(_2766, _2767, _2768));
        float _4715 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2781 = _2758 * _2758;
        float _2785 = ((_2776 * _2776) * (_2781 + (-1.0))) + 1.0;
        float _2792 = exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0);
        float _2799 = 1.0 - _2758;
        float _2809 = (0.5 / (((_2416 * ((_2772 * _2799) + _2758)) + 9.9999999392252902907785028219223e-09) + (((_2416 * _2799) + _2758) * _2772))) * _2772;
        float _4726 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2811 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2781 / ((_2785 * _2785) * 3.141590118408203125));
        float _2812 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2728 = (((((_2792 * _2438) + _1177) * cbLight._m0[_2743].x) * _2811) * _2812) + _2614;
        _2730 = (((((_2792 * _2440) + _1179) * cbLight._m0[_2743].y) * _2811) * _2812) + _2616;
        _2732 = (((((_2792 * _2441) + _1180) * cbLight._m0[_2743].z) * _2811) * _2812) + _2618;
    }
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    if (_2246.y == 0u)
    {
        float _2887 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2888 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2887;
        float _2889 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2887;
        float _2890 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2887;
        uvec4 _2902 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2903 = _2902.x;
        uint _2914 = uint((float(_2902.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1116) / _2903))) + floor(float(uint(cbSceneParam._m0[85u].x * _1115) / _2903)));
        float _2924 = (log2(_2890 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2925 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        uint _2928 = uint(isnan(14.0) ? _2925 : (isnan(_2925) ? 14.0 : min(_2925, 14.0)));
        uvec4 _2933 = texelFetch(g_lightClusterGridBuffer, int(((_2928 << 2u) + (_2914 << 6u)) >> 2u));
        uint _2934 = _2933.x;
        uint _2935 = _2902.z;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        if (((((1u << ((_2935 >> 4u) & 15u)) + 4294967295u) & _2934) == 0u) || ((_2935 & 240u) == 0u))
        {
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
        }
        else
        {
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            uint _3186 = 0u;
            uint _3195;
            bool _3196;
            for (;;)
            {
                _3195 = texelFetch(g_lightClassification, int((((_2928 << 5u) + (_2914 << 9u)) + (_3186 << 2u)) >> 2u)).x;
                _3196 = _3195 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3196)
                {
                    frontier_phi_61_pred = _3180;
                    frontier_phi_61_pred_1 = _3185;
                    frontier_phi_61_pred_2 = _3184;
                    frontier_phi_61_pred_3 = _3183;
                    frontier_phi_61_pred_4 = _3182;
                    frontier_phi_61_pred_5 = _3181;
                }
                else
                {
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    uint _3310;
                    _3304 = _3180;
                    _3305 = _3181;
                    _3306 = _3182;
                    _3307 = _3183;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3195;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    for (;;)
                    {
                        uint _3314 = uint(findLSB(_3310)) + (_3186 << 5u);
                        uint _3311 = (_3310 + 4294967295u) & _3310;
                        uint _3316 = _3314 * 48u;
                        vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 3u)).x));
                        uint _3336 = (_3314 * 48u) + 4u;
                        vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3355 = (_3314 * 48u) + 8u;
                        vec3 _3366 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x));
                        float _3370 = _3330.x - _2888;
                        float _3371 = _3330.y - _2889;
                        float _3372 = _3330.z - _2890;
                        float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                        float _3376 = inversesqrt(_3373);
                        float _3377 = _3376 * _3370;
                        float _3378 = _3376 * _3371;
                        float _3379 = _3376 * _3372;
                        float _3380 = dot(vec3(_1134, _1137, _1140), vec3(_3377, _3378, _3379));
                        float _3385 = 1.0 - (_3373 * _3330.w);
                        float _4752 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3387 = sqrt(_3373) * _3349.w;
                        float _3390 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                        float _3391 = _3390 * _3390;
                        float _3394 = ((1.0 - _3391) * _3380) + _3391;
                        float _3397 = _3387 * _3387;
                        float _3401 = ((isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))) * _3386) / ((_3397 * 0.699999988079071044921875) + 1.0);
                        float _3405 = (-0.0) - _2888;
                        float _3406 = (-0.0) - _2889;
                        float _3407 = (-0.0) - _2890;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3412 = _3411 * _3405;
                        float _3413 = _3411 * _3406;
                        float _3414 = _3411 * _3407;
                        float _3422 = exp2(log2(1.0 / ((_3397 * 3.5) + 5.0)) * 0.25);
                        float _3423 = 1.0 - _1209;
                        float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                        float _3431 = _3430 * _3430;
                        float _3432 = _3431 * _3431;
                        float _3433 = _3412 + _3377;
                        float _3434 = _3413 + _3378;
                        float _3435 = _3414 + _3379;
                        float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                        float _3443 = dot(vec3(_1134, _1137, _1140), vec3(_3412, _3413, _3414));
                        float _4768 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                        float _3447 = dot(vec3(_1134, _1137, _1140), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                        float _4779 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3450 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                        float _3455 = _3390 * _3431;
                        float _3456 = _3455 * _3455;
                        float _3459 = ((1.0 - _3456) * _3380) + _3456;
                        float _4790 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3460 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3461 = 1.0 - _3431;
                        float _3471 = (0.5 / (((_3460 * ((_3446 * _3461) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3431) * _3446))) * _3460;
                        float _4801 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3482 = (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) / ((_3454 * _3454) * ((_3397 * 2.1991131305694580078125) + 3.141590118408203125))) * _3386;
                        _3239 = (_3401 * _3349.x) + _3307;
                        _3240 = (_3401 * _3349.y) + _3308;
                        _3241 = (_3401 * _3349.z) + _3309;
                        _3236 = (_3482 * _3366.x) + _3304;
                        _3237 = (_3482 * _3366.y) + _3305;
                        _3238 = (_3482 * _3366.z) + _3306;
                        if (_3311 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3304 = _3236;
                            _3305 = _3237;
                            _3306 = _3238;
                            _3307 = _3239;
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3311;
                        }
                    }
                    frontier_phi_61_pred = _3236;
                    frontier_phi_61_pred_1 = _3241;
                    frontier_phi_61_pred_2 = _3240;
                    frontier_phi_61_pred_3 = _3239;
                    frontier_phi_61_pred_4 = _3238;
                    frontier_phi_61_pred_5 = _3237;
                }
                _3036 = frontier_phi_61_pred;
                _3046 = frontier_phi_61_pred_1;
                _3044 = frontier_phi_61_pred_2;
                _3042 = frontier_phi_61_pred_3;
                _3040 = frontier_phi_61_pred_4;
                _3038 = frontier_phi_61_pred_5;
                uint _3187 = _3186 + 1u;
                if (_3187 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3180 = _3036;
                    _3181 = _3038;
                    _3182 = _3040;
                    _3183 = _3042;
                    _3184 = _3044;
                    _3185 = _3046;
                    _3186 = _3187;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
        }
        uvec4 _3049 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3050 = _3049.z;
        uint _3052 = (_3050 >> 8u) & 15u;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        if (((4294967295u << _3052) & _2934) == 0u)
        {
            _3148 = _3035;
            _3150 = _3037;
            _3152 = _3039;
            _3154 = _3041;
            _3156 = _3043;
            _3158 = _3045;
        }
        else
        {
            float _3173 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
            float _3174 = _3173 * _2888;
            float _3175 = _3173 * _2889;
            float _3176 = _3173 * _2890;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3052 < ((_3050 >> 12u) & 15u))
            {
                float _3149;
                float _3151;
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3287 = _3035;
                float _3288 = _3037;
                float _3289 = _3039;
                float _3290 = _3041;
                float _3291 = _3043;
                float _3292 = _3045;
                uint _3293 = _3052;
                uint _3302;
                bool _3303;
                for (;;)
                {
                    _3302 = texelFetch(g_lightClassification, int((((_2928 << 5u) + (_2914 << 9u)) + (_3293 << 2u)) >> 2u)).x;
                    _3303 = _3302 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3303)
                    {
                        frontier_phi_67_pred = _3290;
                        frontier_phi_67_pred_1 = _3291;
                        frontier_phi_67_pred_2 = _3292;
                        frontier_phi_67_pred_3 = _3289;
                        frontier_phi_67_pred_4 = _3288;
                        frontier_phi_67_pred_5 = _3287;
                    }
                    else
                    {
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3500 = _3287;
                        float _3501 = _3288;
                        float _3502 = _3289;
                        float _3503 = _3290;
                        float _3504 = _3291;
                        float _3505 = _3292;
                        uint _3506 = _3302;
                        uint _3507;
                        vec4 _3532;
                        float _3533;
                        vec4 _3548;
                        vec3 _3560;
                        vec4 _3575;
                        vec4 _3590;
                        float _3636;
                        bool _3637;
                        for (;;)
                        {
                            uint _3517 = ((_3293 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3506));
                            _3507 = (_3506 + 4294967295u) & _3506;
                            uint _3519 = _3517 * 40u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            _3533 = _3532.w;
                            uint _3535 = (_3517 * 40u) + 4u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3517 * 40u) + 8u;
                            _3560 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x));
                            uint _3562 = (_3517 * 40u) + 16u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3517 * 40u) + 20u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3517 * 40u) + 24u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3611 = (_3517 * 40u) + 28u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3636 = fma(_2890, _3624.z, fma(_2889, _3624.y, _3624.x * _2888)) + _3624.w;
                            _3637 = !((fma(_2890, _3605.z, fma(_2889, _3605.y, _3605.x * _2888)) + _3605.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3637)
                            {
                                float _3664 = _3532.x - _2888;
                                float _3665 = _3532.y - _2889;
                                float _3666 = _3532.z - _2890;
                                float _3667 = dot(vec3(_3664, _3665, _3666), vec3(_3664, _3665, _3666));
                                float _3670 = inversesqrt(_3667);
                                float _3671 = _3670 * _3664;
                                float _3672 = _3670 * _3665;
                                float _3673 = _3670 * _3666;
                                float _3677 = 1.0 - (_3667 / (_3533 * _3533));
                                float _4812 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3682 = sqrt(_3667) * _3548.w;
                                float _3684 = 1.39999997615814208984375 / (_3682 + 1.39999997615814208984375);
                                float _3685 = _3684 * _3684;
                                float _3688 = ((1.0 - _3685) * dot(vec3(_3671, _3672, _3673), vec3(_1134, _1137, _1140))) + _3685;
                                float _3691 = _3682 * _3682;
                                float _3695 = (fma(_2890, _3575.z, fma(_2889, _3575.y, _3575.x * _2888)) + _3575.w) / _3636;
                                float _3696 = (fma(_2890, _3590.z, fma(_2889, _3590.y, _3590.x * _2888)) + _3590.w) / _3636;
                                float _3700 = 1.0 - dot(vec2(_3695, _3696), vec2(_3695, _3696));
                                float _4828 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3702 = _3701 * (((isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0))) * _3678) / ((_3691 * 0.699999988079071044921875) + 1.0));
                                float _3714 = exp2(log2(1.0 / ((_3691 * 3.5) + 5.0)) * 0.25);
                                float _3715 = 1.0 - _1209;
                                float _3722 = sqrt(1.0 - ((1.0 - (_3715 * _3715)) * (1.0 - (_3714 * _3714))));
                                float _3723 = _3722 * _3722;
                                float _3724 = _3723 * _3723;
                                float _3725 = _3671 - _3174;
                                float _3726 = _3672 - _3175;
                                float _3727 = _3673 - _3176;
                                float _3731 = inversesqrt(dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727)));
                                float _3735 = dot(vec3(_1134, _1137, _1140), vec3((-0.0) - _3174, (-0.0) - _3175, (-0.0) - _3176));
                                float _4839 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3738 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3739 = dot(vec3(_1134, _1137, _1140), vec3(_3731 * _3725, _3731 * _3726, _3731 * _3727));
                                float _4850 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3742 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3746 = ((_3742 * _3742) * (_3724 + (-1.0))) + 1.0;
                                float _3747 = _3684 * _3723;
                                float _3748 = _3747 * _3747;
                                float _3754 = ((1.0 - _3748) * dot(vec3(_1134, _1137, _1140), vec3(_3671, _3672, _3673))) + _3748;
                                float _4861 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3756 = 1.0 - _3723;
                                float _3766 = (0.5 / (((_3755 * ((_3738 * _3756) + _3723)) + 9.9999999392252902907785028219223e-09) + (((_3755 * _3756) + _3723) * _3738))) * _3755;
                                float _4872 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3776 = (_3701 * _3678) * (((_3724 * 3.1415927410125732421875) * (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) / ((_3746 * _3746) * ((_3691 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3776 * _3560.x;
                                frontier_phi_73_pred_1 = _3776 * _3560.y;
                                frontier_phi_73_pred_2 = _3702 * _3548.z;
                                frontier_phi_73_pred_3 = _3702 * _3548.y;
                                frontier_phi_73_pred_4 = _3702 * _3548.x;
                                frontier_phi_73_pred_5 = _3776 * _3560.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3780 = frontier_phi_73_pred;
                            _3781 = frontier_phi_73_pred_1;
                            _3785 = frontier_phi_73_pred_2;
                            _3784 = frontier_phi_73_pred_3;
                            _3783 = frontier_phi_73_pred_4;
                            _3782 = frontier_phi_73_pred_5;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            _3489 = _3782 + _3502;
                            if (_3507 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3507;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3490;
                        frontier_phi_67_pred_1 = _3491;
                        frontier_phi_67_pred_2 = _3492;
                        frontier_phi_67_pred_3 = _3489;
                        frontier_phi_67_pred_4 = _3488;
                        frontier_phi_67_pred_5 = _3487;
                    }
                    _3155 = frontier_phi_67_pred;
                    _3157 = frontier_phi_67_pred_1;
                    _3159 = frontier_phi_67_pred_2;
                    _3153 = frontier_phi_67_pred_3;
                    _3151 = frontier_phi_67_pred_4;
                    _3149 = frontier_phi_67_pred_5;
                    uint _3294 = _3293 + 1u;
                    if (_3294 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3287 = _3149;
                        _3288 = _3151;
                        _3289 = _3153;
                        _3290 = _3155;
                        _3291 = _3157;
                        _3292 = _3159;
                        _3293 = _3294;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3157;
                frontier_phi_55_56_ladder_1 = _3159;
                frontier_phi_55_56_ladder_2 = _3155;
                frontier_phi_55_56_ladder_3 = _3153;
                frontier_phi_55_56_ladder_4 = _3151;
                frontier_phi_55_56_ladder_5 = _3149;
            }
            else
            {
                frontier_phi_55_56_ladder = _3043;
                frontier_phi_55_56_ladder_1 = _3045;
                frontier_phi_55_56_ladder_2 = _3041;
                frontier_phi_55_56_ladder_3 = _3039;
                frontier_phi_55_56_ladder_4 = _3037;
                frontier_phi_55_56_ladder_5 = _3035;
            }
            _3148 = frontier_phi_55_56_ladder_5;
            _3150 = frontier_phi_55_56_ladder_4;
            _3152 = frontier_phi_55_56_ladder_3;
            _3154 = frontier_phi_55_56_ladder_2;
            _3156 = frontier_phi_55_56_ladder;
            _3158 = frontier_phi_55_56_ladder_1;
        }
        float _3163 = isnan(1.0) ? _1193 : (isnan(_1193) ? 1.0 : min(_1193, 1.0));
        _2947 = (_3163 * _3154) + _2380;
        _2949 = (_3163 * _3156) + _2382;
        _2951 = (_3163 * _3158) + _2384;
        _2953 = ((_3148 * _1177) * _3163) + _2728;
        _2955 = ((_3150 * _1179) * _3163) + _2730;
        _2957 = ((_3152 * _1180) * _3163) + _2732;
    }
    else
    {
        _2947 = _2380;
        _2949 = _2382;
        _2951 = _2384;
        _2953 = _2728;
        _2955 = _2730;
        _2957 = _2732;
    }
    float _4888 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _4899 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _4910 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    uint _2977 = _286 + 6u;
    float _2985 = _1115 / cbSceneParam._m0[86u].x;
    float _2986 = _1116 / cbSceneParam._m0[86u].y;
    vec4 _3000 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2985, _2986, (log2((isnan(cbSceneParam._m0[77u].w) ? _1050 : (isnan(_1050) ? cbSceneParam._m0[77u].w : min(_1050, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3002 = _3000.x;
    float _3003 = _3000.y;
    float _3004 = _3000.z;
    float _3005 = _3000.w;
    float _3098;
    float _3100;
    float _3102;
    float _3104;
    if (_1050 > cbSceneParam._m0[78u].w)
    {
        float _3060 = isnan(_1050) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1050 : min(cbSceneParam._m0[80u].w, _1050));
        float _3061 = _3060 / _1050;
        float _3072 = _3061 * _1100;
        float _3073 = _1101 * _3061;
        float _3074 = (-0.0) - _3073;
        float _3076 = _3061 * _1102;
        float _3078 = (cbSceneParam._m0[77u].w * _3074) / _3060;
        float _3079 = _3078 + cbSceneParam._m0[79u].w;
        float _3080 = cbSceneParam._m0[79u].w - _3073;
        float _3086 = sqrt(((_3072 * _3072) + (_3073 * _3073)) + (_3076 * _3076));
        float _3089 = (1.0 - (cbSceneParam._m0[77u].w / _3060)) * _3086;
        float _3094 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3096 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3249;
        if (abs((_3074 - _3078) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3249 = ((((_3079 > 0.0) ? exp2(_3094 * _3079) : (2.0 - exp2(_3096 * _3079))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3089;
        }
        else
        {
            float _3209 = 1.0 / cbSceneParam._m0[80u].x;
            float _3210 = isnan(_3080) ? _3079 : (isnan(_3079) ? _3080 : max(_3079, _3080));
            float _3211 = isnan(_3080) ? _3079 : (isnan(_3079) ? _3080 : min(_3079, _3080));
            float _3220 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : min(_3210, 0.0));
            float _3221 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : min(_3211, 0.0));
            _3249 = ((abs(_3086 / _3074) * cbSceneParam._m0[80u].y) * ((((_3220 - _3221) * 2.0) - ((exp2(_3094 * (isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0)))) - exp2(_3094 * (isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))))) * _3209)) - ((exp2(_3096 * _3220) - exp2(_3096 * _3221)) * _3209))) + (_3089 * cbSceneParam._m0[80u].z);
        }
        vec4 _3251 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2985, _2986, 1.0), 0.0);
        float _3260 = exp2((_3249 * (-1.44269502162933349609375)) * (1.0 - _3251.w));
        float _3261 = log2(_3260);
        float _3277 = log2(_3005);
        _3098 = (exp2(_3277 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].x)) * _3251.x) / cbSceneParam._m0[78u].x)) + _3002;
        _3100 = (exp2(_3277 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].y)) * _3251.y) / cbSceneParam._m0[78u].y)) + _3003;
        _3102 = (exp2(_3277 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].z)) * _3251.z) / cbSceneParam._m0[78u].z)) + _3004;
        _3104 = _3260 * _3005;
    }
    else
    {
        _3098 = _3002;
        _3100 = _3003;
        _3102 = _3004;
        _3104 = _3005;
    }
    float _3116 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3117 = _3116 == 3.0;
    float _3118 = log2(_3104);
    float _3125 = exp2(_3118 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2947 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1193))) + ((_2953 + ((isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0))) * _1999)) * cbPerFrame._m0[3u].x));
    float _3126 = exp2(_3118 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2949 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1193))) + ((_2955 + ((isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0))) * _1999)) * cbPerFrame._m0[3u].x));
    float _3127 = exp2(_3118 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2951 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1193))) + ((_2957 + ((isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0))) * _1999)) * cbPerFrame._m0[3u].x));
    float _3136 = (_3116 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3136 * (_3117 ? _3125 : (_3125 + (cbSceneParam._m0[72u].w * _3098)));
    SV_Target.y = _3136 * (_3117 ? _3126 : (_3126 + (cbSceneParam._m0[72u].w * _3100)));
    SV_Target.z = _3136 * (_3117 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3102)));
    SV_Target.w = cbInstanceData._m0[_2977].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2977].w;
}


