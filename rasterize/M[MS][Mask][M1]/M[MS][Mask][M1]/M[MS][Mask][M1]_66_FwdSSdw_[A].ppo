#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1476;
float _3880;
float _3881;
float _3882;
float _3883;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _351.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3892 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _426 = (_419 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _427 = (_419 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _428 = (_419 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _351.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3903 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _499 = (_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426;
    float _500 = (_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427;
    float _501 = (_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428;
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _540 = _536.z;
    float _547 = ((_519.x - _538) * _419) + _538;
    float _548 = ((_519.y - _539) * _419) + _539;
    float _549 = ((_519.z - _540) * _419) + _540;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _574 = ((_561.z - _549) * _492) + _549;
    float _577 = ((((_561.x - _547) * _492) + _547) * 2.0) + (-1.0);
    float _579 = ((((_561.y - _548) * _492) + _548) * 2.0) + (-1.0);
    float _580 = dot(vec2(_577, _579), vec2(_577, _579));
    float _3914 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _585 = sqrt(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _626 = _624.x;
    float _627 = 1.0 - _626;
    float _636 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _639 = ((isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : min(_636, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _648 = (_639 - ((((((_626 - _627) * cbMtdParam._m0[24u].z) + _627) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _639))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3935 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _656 = (_649 * (cbMtdParam._m0[17u].x - _499)) + _499;
    float _657 = (_649 * (cbMtdParam._m0[17u].y - _500)) + _500;
    float _658 = (_649 * (cbMtdParam._m0[17u].z - _501)) + _501;
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _672 = _670.x;
    float _673 = 1.0 - _672;
    float _698 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_672 - _673) * cbMtdParam._m0[24u].w) + _673) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3946 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _699 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _707 = ((((cbMtdParam._m0[10u].x - _656) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _699) + _656;
    float _708 = ((((cbMtdParam._m0[10u].y - _657) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _699) + _657;
    float _709 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _658)) * _699) + _658;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _737 = _735.x;
    float _755 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _737) * _419) + _737;
    float _772 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _755) * _492) + _755;
    float _776 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _772) * cbMtdParam._m0[19u].z) + _772;
    float _778 = _776 - (_776 * _649);
    float _780 = _778 - (_778 * _699);
    float _784 = (cbMtdParam._m0[19u].w * (_599.z - _574)) + _574;
    vec4 _798 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _805 = (_798.x * 2.0) + (-1.0);
    float _806 = (_798.y * 2.0) + (-1.0);
    float _807 = dot(vec2(_805, _806), vec2(_805, _806));
    float _3957 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _815 = (_649 * (_798.z - _784)) + _784;
    float _818 = ((cbMtdParam._m0[23u].x - _815) * _699) + _815;
    vec4 _837 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _843 = (_837.x * 2.0) + (-1.0);
    float _844 = (_837.y * 2.0) + (-1.0);
    float _845 = dot(vec2(_843, _844), vec2(_843, _844));
    float _3968 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _853 = (((_599.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _577;
    float _854 = (((_599.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _579;
    float _866 = (((_805 - _853) + (cbMtdParam._m0[21u].x * _853)) * _649) + _853;
    float _867 = (((_806 - _854) + (cbMtdParam._m0[21u].x * _854)) * _649) + _854;
    float _868 = (_649 * (sqrt(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) - _585)) + _585;
    float _879 = (((_843 - _866) + (_866 * cbMtdParam._m0[22u].z)) * _699) + _866;
    float _880 = (((_844 - _867) + (_867 * cbMtdParam._m0[22u].z)) * _699) + _867;
    float _881 = ((sqrt(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) - _868) * _699) + _868;
    float _883 = cbMtdParam._m0[22u].x + _599.w;
    float _886 = fma(_881, _252 * NORMAL.x, fma(_880, _259 * TANGENT.x, (_245 * _237) * _879));
    float _889 = fma(_881, _252 * NORMAL.y, fma(_880, _259 * TANGENT.y, (_245 * _238) * _879));
    float _892 = fma(_881, _252 * NORMAL.z, fma(_880, _259 * TANGENT.z, (_245 * _239) * _879));
    float _896 = inversesqrt(dot(vec3(_886, _889, _892), vec3(_886, _889, _892)));
    float _897 = _896 * _886;
    float _898 = _896 * _889;
    float _899 = _896 * _892;
    float _3979 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _900 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4001 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4012 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4023 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4034 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _905 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _919 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _969 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _959);
    float _970 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _959);
    float _971 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _959);
    float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
    float _976 = _969 * _975;
    float _977 = _970 * _975;
    float _978 = _971 * _975;
    vec4 _983 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _985 = _983.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1157 = sqrt(((_969 * _969) + (_970 * _970)) + (_971 * _971));
        float _1163 = (cbMatDynParam._m0[5u].x * _1157) + cbMatDynParam._m0[5u].y;
        float _4045 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1168 = (cbMatDynParam._m0[5u].z * _1157) + cbMatDynParam._m0[5u].w;
        float _4056 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) - _1164)) + _1164) < ((_985 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _996 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _997 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1015 = fma(_899, cbSceneParam._m0[5u].z, fma(_898, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _897));
    float _1018 = fma(_899, cbSceneParam._m0[6u].z, fma(_898, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _897));
    float _1021 = fma(_899, cbSceneParam._m0[7u].z, fma(_898, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _897));
    uint _1034 = _265 + 9u;
    uint _1035 = _1034 + uint(cbMatDynParam._m0[0u].w);
    float _1041 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_1035].x;
    float _1042 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_1035].y;
    float _1043 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_1035].z;
    float _4067 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1047 = 1.0 - _905;
    float _1048 = _1044 * _1047;
    float _1049 = _1045 * _1047;
    float _1050 = _1046 * _1047;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _905;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _905;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _905;
    float _1058 = _1055 + 0.039999999105930328369140625;
    float _1060 = _1056 + 0.039999999105930328369140625;
    float _1061 = _1057 + 0.039999999105930328369140625;
    vec4 _1070 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _996, cbSceneParam._m0[86u].y * _997));
    float _1074 = ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * TEXCOORD_5.w) * _1070.x;
    float _1075 = dot(vec3(_897, _898, _899), vec3(_976, _977, _978));
    float _1078 = _1075 * 2.0;
    float _1082 = (_1078 * _897) - _976;
    float _1083 = (_1078 * _898) - _977;
    float _1084 = (_1078 * _899) - _978;
    float _1088 = abs(dot(vec3(_976, _977, _978), vec3(_897, _898, _899)));
    float _4100 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1090 = sqrt(_900);
    float _1103 = exp2((_1090 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1090 * 3.0));
    float _1109 = (1.0 - _1103) * ((_1090 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1110 = _1103 * _1090;
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1475;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1200 = fma(_1146, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138));
        float _1204 = fma(_1146, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138));
        float _1208 = fma(_1146, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138));
        float _1233 = _1138 + _897;
        float _1234 = _1142 + _898;
        float _1235 = _1146 + _899;
        float _1245 = fma(_1235, cbModelParam._m0[26u].z, fma(_1234, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233)) - _1200;
        float _1246 = fma(_1235, cbModelParam._m0[27u].z, fma(_1234, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233)) - _1204;
        float _1247 = fma(_1235, cbModelParam._m0[28u].z, fma(_1234, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233)) - _1208;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1264 = ((_1251 * _1245) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1200 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1246) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1204 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1251 * _1247) / cbModelParam._m0[34u].z) + ((((((_1208 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1264, _1265, _1266), 0.0);
        float _1303 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1269.x + (-0.5));
        float _1305 = _1303 * (_1269.y + (-0.5));
        float _1306 = _1303 * (_1269.z + (-0.5));
        float _1313 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1276.x + (-0.5));
        float _1315 = _1313 * (_1276.y + (-0.5));
        float _1316 = _1313 * (_1276.z + (-0.5));
        float _1323 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1283.x + (-0.5));
        float _1325 = _1323 * (_1283.y + (-0.5));
        float _1326 = _1323 * (_1283.z + (-0.5));
        float _1333 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1290.x + (-0.5));
        float _1335 = _1333 * (_1290.y + (-0.5));
        float _1336 = _1333 * (_1290.z + (-0.5));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = _1304 * 0.5;
        float _1341 = _1314 * 0.5;
        float _1342 = _1324 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1357 = (dot(vec3(_897, _898, _899), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1367 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4148 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1369 + 1.0))) + _1374) * _1337;
        float _1384 = _1305 * 0.5;
        float _1385 = _1315 * 0.5;
        float _1386 = _1325 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_897, _898, _899), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4181 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1411 + 1.0))) + _1416) * _1338;
        float _1426 = _1306 * 0.5;
        float _1427 = _1316 * 0.5;
        float _1428 = _1326 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_897, _898, _899), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4214 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1453 + 1.0))) + _1458) * _1339;
        _1475 = _1306;
        _1477 = _1305;
        _1478 = _1304;
        _1479 = _1316;
        _1480 = _1315;
        _1481 = _1314;
        _1482 = _1326;
        _1483 = _1325;
        _1484 = _1324;
        _1485 = _1339;
        _1486 = _1338;
        _1487 = _1337;
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1476;
        _1477 = _1476;
        _1478 = _1476;
        _1479 = _1476;
        _1480 = _1476;
        _1481 = _1476;
        _1482 = _1476;
        _1483 = _1476;
        _1484 = _1476;
        _1485 = _1476;
        _1486 = _1476;
        _1487 = _1476;
        _1488 = 0.0;
        _1489 = 0.0;
        _1490 = 0.0;
    }
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1517 = fma(_1146, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1138));
        float _1521 = fma(_1146, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1138));
        float _1525 = fma(_1146, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1138));
        float _1548 = _1138 + _897;
        float _1549 = _1142 + _898;
        float _1550 = _1146 + _899;
        float _1560 = fma(_1550, cbModelParam._m0[30u].z, fma(_1549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1548)) - _1517;
        float _1561 = fma(_1550, cbModelParam._m0[31u].z, fma(_1549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1548)) - _1521;
        float _1562 = fma(_1550, cbModelParam._m0[32u].z, fma(_1549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1548)) - _1525;
        float _1566 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
        float _1579 = ((_1566 * _1560) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1517 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1580 = ((_1566 * _1561) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1521 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1566 * _1562) / cbModelParam._m0[35u].z) + ((((((_1525 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        float _1616 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1583.x + (-0.5));
        float _1618 = _1616 * (_1583.y + (-0.5));
        float _1619 = _1616 * (_1583.z + (-0.5));
        float _1626 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1590.x + (-0.5));
        float _1628 = _1626 * (_1590.y + (-0.5));
        float _1629 = _1626 * (_1590.z + (-0.5));
        float _1636 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1597.x + (-0.5));
        float _1638 = _1636 * (_1597.y + (-0.5));
        float _1639 = _1636 * (_1597.z + (-0.5));
        float _1646 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1604.x + (-0.5));
        float _1648 = _1646 * (_1604.y + (-0.5));
        float _1649 = _1646 * (_1604.z + (-0.5));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = _1617 * 0.5;
        float _1654 = _1627 * 0.5;
        float _1655 = _1637 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_897, _898, _899), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4277 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1680 + 1.0))) + _1685) * _1650;
        float _1695 = _1618 * 0.5;
        float _1696 = _1628 * 0.5;
        float _1697 = _1638 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_897, _898, _899), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4310 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1722 + 1.0))) + _1727) * _1651;
        float _1737 = _1619 * 0.5;
        float _1738 = _1629 * 0.5;
        float _1739 = _1639 * 0.5;
        float _1740 = dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739));
        float _1745 = (_1740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1740);
        float _1753 = (dot(vec3(_897, _898, _899), vec3(_1745 * _1737, _1745 * _1738, _1745 * _1739)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1764 = _1763 * 2.0;
        float _1768 = (1.0 - _1763) / (_1763 + 1.0);
        float _4343 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1778 = ((((1.0 - _1769) * (_1764 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1764 + 1.0))) + _1769) * _1652;
        _1786 = _1619;
        _1787 = _1618;
        _1788 = _1617;
        _1789 = _1629;
        _1790 = _1628;
        _1791 = _1627;
        _1792 = _1639;
        _1793 = _1638;
        _1794 = _1637;
        _1795 = _1652;
        _1796 = _1651;
        _1797 = _1650;
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)));
    }
    else
    {
        _1786 = _1476;
        _1787 = _1476;
        _1788 = _1476;
        _1789 = _1476;
        _1790 = _1476;
        _1791 = _1476;
        _1792 = _1476;
        _1793 = _1476;
        _1794 = _1476;
        _1795 = _1476;
        _1796 = _1476;
        _1797 = _1476;
        _1798 = 0.0;
        _1799 = 0.0;
        _1800 = 0.0;
    }
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1488)) + _1488;
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1489)) + _1489;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1490)) + _1490;
    float _1833 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1811, cbSceneParam._m0[89u].y, _1810 * cbSceneParam._m0[89u].x));
    float _1836 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1811, cbSceneParam._m0[90u].y, _1810 * cbSceneParam._m0[90u].x));
    float _1839 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1811, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1810));
    float _1854 = _1082 * 0.5;
    float _1855 = _1083 * 0.5;
    float _1856 = _1084 * 0.5;
    float _1857 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1860 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1863 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1897;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1870 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1475, _1479, _1482, _1485));
        float _1874 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1878 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1885 = dot(vec4(cbModelParam._m0[39u]), vec4(_1854, _1855, _1856, 1.0));
        _1897 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1897 = 1.0;
    }
    float _1908;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1899 = dot(vec4(cbModelParam._m0[40u]), vec4(_1854, _1855, _1856, 1.0));
        _1908 = dot(vec3(isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1899) ? 0.0 : (isnan(0.0) ? _1899 : max(0.0, _1899))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1908 = 1.0;
    }
    float _1912 = (_1908 * cbModelParam._m0[1u].x) + (_1897 * (1.0 - cbModelParam._m0[1u].x));
    float _1922 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _900);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1922 : min(cbModelParam._m0[25u].z, _1922));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1971 = fma(_1146, cbModelParam._m0[13u].z, fma(_1142, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138)) + cbModelParam._m0[13u].w;
        float _1975 = fma(_1146, cbModelParam._m0[14u].z, fma(_1142, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138)) + cbModelParam._m0[14u].w;
        float _1979 = fma(_1146, cbModelParam._m0[15u].z, fma(_1142, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138)) + cbModelParam._m0[15u].w;
        float _1982 = fma(_1084, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1082));
        float _1985 = fma(_1084, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1082));
        float _1988 = fma(_1084, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1082));
        float _2016;
        if (_1982 > 0.0)
        {
            _2016 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2016 = frontier_phi_17_15_ladder;
        }
        float _2240;
        if (_1985 > 0.0)
        {
            _2240 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2240 = frontier_phi_26_22_ladder;
        }
        float _2497;
        if (_1988 > 0.0)
        {
            _2497 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2497 = frontier_phi_38_33_ladder;
        }
        float _2499 = isnan(_2240) ? _2016 : (isnan(_2016) ? _2240 : min(_2016, _2240));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1982) + _1971;
        float _2505 = (_2500 * _1985) + _1975;
        float _2506 = (_2500 * _1988) + _1979;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2507;
        float _2511 = _2507 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 > _2511) || ((_2505 < _2509) || ((_2504 < _2509) || (_2504 > _2511))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2506, cbModelParam._m0[9u].z, fma(_2505, cbModelParam._m0[9u].y, _2504 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2506, cbModelParam._m0[10u].z, fma(_2505, cbModelParam._m0[10u].y, _2504 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2506, cbModelParam._m0[11u].z, fma(_2505, cbModelParam._m0[11u].y, _2504 * cbModelParam._m0[11u].x))), _1923);
            frontier_phi_16_38_ladder = _2634.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2634.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2634.x * cbModelParam._m0[1u].y;
        }
        _2004 = frontier_phi_16_38_ladder_2;
        _2006 = frontier_phi_16_38_ladder_1;
        _2008 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1082, _1083, _1084), _1923);
        _2004 = _1992.x * cbModelParam._m0[1u].y;
        _2006 = _1992.y * cbModelParam._m0[1u].y;
        _2008 = _1992.z * cbModelParam._m0[1u].y;
    }
    float _2012 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _900);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2012 : min(cbModelParam._m0[25u].w, _2012));
    float _2103;
    float _2105;
    float _2107;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2067 = fma(_1146, cbModelParam._m0[21u].z, fma(_1142, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138)) + cbModelParam._m0[21u].w;
        float _2071 = fma(_1146, cbModelParam._m0[22u].z, fma(_1142, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138)) + cbModelParam._m0[22u].w;
        float _2075 = fma(_1146, cbModelParam._m0[23u].z, fma(_1142, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138)) + cbModelParam._m0[23u].w;
        float _2078 = fma(_1084, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1082));
        float _2081 = fma(_1084, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1082));
        float _2084 = fma(_1084, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1082));
        float _2245;
        if (_2078 > 0.0)
        {
            _2245 = abs((1.0 - _2067) / _2078);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2067 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2245 = frontier_phi_28_24_ladder;
        }
        float _2524;
        if (_2081 > 0.0)
        {
            _2524 = abs((1.0 - _2071) / _2081);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2071 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2524 = frontier_phi_40_35_ladder;
        }
        float _2737;
        if (_2084 > 0.0)
        {
            _2737 = abs((1.0 - _2075) / _2084);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2075 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2737 = frontier_phi_49_46_ladder;
        }
        float _2739 = isnan(_2524) ? _2245 : (isnan(_2245) ? _2524 : min(_2245, _2524));
        float _2740 = isnan(_2737) ? _2739 : (isnan(_2739) ? _2737 : min(_2739, _2737));
        float _2744 = (_2740 * _2078) + _2067;
        float _2745 = (_2740 * _2081) + _2071;
        float _2746 = (_2740 * _2084) + _2075;
        float _2747 = _2740 * 9.9999997473787516355514526367188e-05;
        float _2748 = (-1.0) - _2747;
        float _2750 = _2747 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2746 > _2750) || ((_2746 < _2748) || ((_2745 > _2750) || ((_2745 < _2748) || ((_2744 < _2748) || (_2744 > _2750))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2945 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2746, cbModelParam._m0[17u].z, fma(_2745, cbModelParam._m0[17u].y, _2744 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2746, cbModelParam._m0[18u].z, fma(_2745, cbModelParam._m0[18u].y, _2744 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2746, cbModelParam._m0[19u].z, fma(_2745, cbModelParam._m0[19u].y, _2744 * cbModelParam._m0[19u].x))), _2013);
            frontier_phi_25_49_ladder = _2945.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2945.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2945.x * cbModelParam._m0[1u].z;
        }
        _2103 = frontier_phi_25_49_ladder_2;
        _2105 = frontier_phi_25_49_ladder_1;
        _2107 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2087 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1082, _1083, _1084), _2013);
        _2103 = _2087.x * cbModelParam._m0[1u].z;
        _2105 = _2087.y * cbModelParam._m0[1u].z;
        _2107 = _2087.z * cbModelParam._m0[1u].z;
    }
    float _2120 = (((_1109 * _1058) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2122 = (((_1109 * _1060) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2124 = (((_1109 * _1061) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2127 = fma(_2124, cbSceneParam._m0[89u].z, fma(_2122, cbSceneParam._m0[89u].y, _2120 * cbSceneParam._m0[89u].x));
    float _2130 = fma(_2124, cbSceneParam._m0[90u].z, fma(_2122, cbSceneParam._m0[90u].y, _2120 * cbSceneParam._m0[90u].x));
    float _2133 = fma(_2124, cbSceneParam._m0[91u].z, fma(_2122, cbSceneParam._m0[91u].y, _2120 * cbSceneParam._m0[91u].x));
    vec4 _2141 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_996, _997));
    float _2143 = _2141.w;
    float _2155 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2143);
    float _2156 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2143);
    float _2157 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2143);
    uvec4 _2161 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2163 = _2161.x * 14u;
    uint _2164 = _2163 + 13u;
    float _2171 = _1074 + (-1.0);
    float _2176 = (cbLight._m0[_2164].x * _2171) + 1.0;
    float _2177 = (cbLight._m0[_2164].y * _2171) + 1.0;
    float _2178 = (cbLight._m0[_2164].z * _2171) + 1.0;
    float _2179 = (cbLight._m0[_2164].w * _2171) + 1.0;
    uint _2180 = _2163 + 5u;
    float _2186 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    uint _2190 = _2163 + 4u;
    float _2199 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
    uint _2203 = _2163 | 1u;
    float _2214 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_897, _898, _899));
    float _2217 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_897, _898, _899));
    float _4479 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _4490 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2222 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2224 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2231 = ((cbLight._m0[_2180].x * _2186) * _2224) + (((cbLight._m0[_2190].x * _2155) * _2199) * _2222);
    float _2232 = ((_2186 * cbLight._m0[_2180].y) * _2224) + (((cbLight._m0[_2190].y * _2156) * _2199) * _2222);
    float _2233 = ((_2186 * cbLight._m0[_2180].z) * _2224) + (((cbLight._m0[_2190].z * _2157) * _2199) * _2222);
    uvec4 _2237 = floatBitsToUint(cbLight._m0[_2163 + 12u]);
    bool _2239 = _2237.x == 0u;
    float _2250;
    float _2252;
    float _2254;
    if (_2239)
    {
        _2250 = _2231;
        _2252 = _2232;
        _2254 = _2233;
    }
    else
    {
        uint _2258 = _2163 + 6u;
        float _2274 = (dot(vec3(cbLight._m0[_2163 + 2u].xyz), vec3(_897, _898, _899)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4501 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2277 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2250 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2231;
        _2252 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2232;
        _2254 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2233;
    }
    bool _2257 = _2237.y == 0u;
    float _2295;
    float _2297;
    float _2299;
    if (_2257)
    {
        _2295 = _2250;
        _2297 = _2252;
        _2299 = _2254;
    }
    else
    {
        uint _2468 = _2163 + 7u;
        float _2484 = (dot(vec3(cbLight._m0[_2163 + 3u].xyz), vec3(_897, _898, _899)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4517 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2487 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2295 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2250;
        _2297 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2252;
        _2299 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2254;
    }
    uint _2302 = _2163 + 8u;
    float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _900) * 0.949999988079071044921875);
    float _2316 = _2315 * _2315;
    float _2317 = cbLight._m0[_2163].x + _976;
    float _2318 = cbLight._m0[_2163].y + _977;
    float _2319 = cbLight._m0[_2163].z + _978;
    float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
    float _2324 = _2323 * _2317;
    float _2325 = _2323 * _2318;
    float _2326 = _2323 * _2319;
    float _2327 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2163].xyz));
    float _4533 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _2331 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2332 = dot(vec3(_897, _898, _899), vec3(_2324, _2325, _2326));
    float _4555 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2324, _2325, _2326));
    float _4566 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2316 * _2316;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
    float _2353 = 0.959999978542327880859375 - _1055;
    float _2355 = 0.959999978542327880859375 - _1056;
    float _2356 = 0.959999978542327880859375 - _1057;
    float _2363 = 1.0 - _2316;
    float _2374 = (0.5 / (((_2331 * ((_2330 * _2363) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2363) + _2316) * _2330))) * _2330;
    float _4577 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    uint _2390 = _2163 + 9u;
    float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _900) * 0.949999988079071044921875);
    float _2402 = _2401 * _2401;
    float _2403 = cbLight._m0[_2203].x + _976;
    float _2404 = cbLight._m0[_2203].y + _977;
    float _2405 = cbLight._m0[_2203].z + _978;
    float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
    float _2410 = _2409 * _2403;
    float _2411 = _2409 * _2404;
    float _2412 = _2409 * _2405;
    float _2413 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2203].xyz));
    float _4588 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2417 = dot(vec3(_897, _898, _899), vec3(_2410, _2411, _2412));
    float _4599 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2421 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2410, _2411, _2412));
    float _4610 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2425 = _2402 * _2402;
    float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
    float _2436 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
    float _2443 = 1.0 - _2402;
    float _2453 = (0.5 / (((_2331 * ((_2416 * _2443) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2443) + _2402) * _2416))) * _2416;
    float _4621 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
    float _2465 = (((((_2436 * _2353) + _1058) * cbLight._m0[_2390].x) * _2455) * _2186) + ((((cbLight._m0[_2302].x * _2155) * ((_2352 * _2353) + _1058)) * _2376) * _2199);
    float _2466 = (((((_2436 * _2355) + _1060) * cbLight._m0[_2390].y) * _2455) * _2186) + ((((cbLight._m0[_2302].y * _2156) * ((_2352 * _2355) + _1060)) * _2376) * _2199);
    float _2467 = (((((_2436 * _2356) + _1061) * cbLight._m0[_2390].z) * _2455) * _2186) + ((((cbLight._m0[_2302].z * _2157) * ((_2352 * _2356) + _1061)) * _2376) * _2199);
    float _2529;
    float _2531;
    float _2533;
    if (_2239)
    {
        _2529 = _2465;
        _2531 = _2466;
        _2533 = _2467;
    }
    else
    {
        uint _2535 = _2163 + 2u;
        uint _2539 = _2163 + 10u;
        float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _900) * 0.949999988079071044921875);
        float _2554 = _2553 * _2553;
        float _2555 = cbLight._m0[_2535].x + _976;
        float _2556 = cbLight._m0[_2535].y + _977;
        float _2557 = cbLight._m0[_2535].z + _978;
        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
        float _2562 = _2561 * _2555;
        float _2563 = _2561 * _2556;
        float _2564 = _2561 * _2557;
        float _2565 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2535].xyz));
        float _4632 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2569 = dot(vec3(_897, _898, _899), vec3(_2562, _2563, _2564));
        float _4643 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2573 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2562, _2563, _2564));
        float _4654 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2577 = _2554 * _2554;
        float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
        float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
        float _2595 = 1.0 - _2554;
        float _2605 = (0.5 / (((_2331 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2595) + _2554) * _2568))) * _2568;
        float _4665 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2607 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
        float _2608 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2529 = (((((_2588 * _2353) + _1058) * cbLight._m0[_2539].x) * _2607) * _2608) + _2465;
        _2531 = (((((_2588 * _2355) + _1060) * cbLight._m0[_2539].y) * _2607) * _2608) + _2466;
        _2533 = (((((_2588 * _2356) + _1061) * cbLight._m0[_2539].z) * _2607) * _2608) + _2467;
    }
    float _2643;
    float _2645;
    float _2647;
    if (_2257)
    {
        _2643 = _2529;
        _2645 = _2531;
        _2647 = _2533;
    }
    else
    {
        uint _2654 = _2163 + 3u;
        uint _2658 = _2163 + 11u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _900) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _976;
        float _2675 = cbLight._m0[_2654].y + _977;
        float _2676 = cbLight._m0[_2654].z + _978;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2654].xyz));
        float _4681 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2688 = dot(vec3(_897, _898, _899), vec3(_2681, _2682, _2683));
        float _4692 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4703 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2714 = 1.0 - _2673;
        float _2724 = (0.5 / (((_2331 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2714) + _2673) * _2687))) * _2687;
        float _4714 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2643 = (((((_2707 * _2353) + _1058) * cbLight._m0[_2658].x) * _2726) * _2727) + _2529;
        _2645 = (((((_2707 * _2355) + _1060) * cbLight._m0[_2658].y) * _2726) * _2727) + _2531;
        _2647 = (((((_2707 * _2356) + _1061) * cbLight._m0[_2658].z) * _2726) * _2727) + _2533;
    }
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    if (_2161.y == 0u)
    {
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2802;
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2802;
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2802;
        uvec4 _2817 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2818 = _2817.x;
        uint _2829 = uint((float(_2817.y) * floor(float(uint(cbSceneParam._m0[85u].y * _997) / _2818))) + floor(float(uint(cbSceneParam._m0[85u].x * _996) / _2818)));
        float _2839 = (log2(_2805 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2840 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        uint _2843 = uint(isnan(14.0) ? _2840 : (isnan(_2840) ? 14.0 : min(_2840, 14.0)));
        uvec4 _2848 = texelFetch(g_lightClusterGridBuffer, int(((_2843 << 2u) + (_2829 << 6u)) >> 2u));
        uint _2849 = _2848.x;
        uint _2850 = _2817.z;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        if (((((1u << ((_2850 >> 4u) & 15u)) + 4294967295u) & _2849) == 0u) || ((_2850 & 240u) == 0u))
        {
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
        }
        else
        {
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            uint _3109 = 0u;
            uint _3118;
            bool _3119;
            for (;;)
            {
                _3118 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3109 << 2u)) >> 2u)).x;
                _3119 = _3118 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3119)
                {
                    frontier_phi_66_pred = _3103;
                    frontier_phi_66_pred_1 = _3108;
                    frontier_phi_66_pred_2 = _3107;
                    frontier_phi_66_pred_3 = _3106;
                    frontier_phi_66_pred_4 = _3105;
                    frontier_phi_66_pred_5 = _3104;
                }
                else
                {
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    uint _3254;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3118;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    for (;;)
                    {
                        uint _3258 = uint(findLSB(_3254)) + (_3109 << 5u);
                        uint _3255 = (_3254 + 4294967295u) & _3254;
                        uint _3260 = _3258 * 48u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3280 = (_3258 * 48u) + 4u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 3u)).x));
                        uint _3299 = (_3258 * 48u) + 8u;
                        vec3 _3310 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x));
                        float _3314 = _3274.x - _2803;
                        float _3315 = _3274.y - _2804;
                        float _3316 = _3274.z - _2805;
                        float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                        float _3320 = inversesqrt(_3317);
                        float _3321 = _3320 * _3314;
                        float _3322 = _3320 * _3315;
                        float _3323 = _3320 * _3316;
                        float _3324 = dot(vec3(_1015, _1018, _1021), vec3(_3321, _3322, _3323));
                        float _3329 = 1.0 - (_3317 * _3274.w);
                        float _4740 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3330 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3331 = sqrt(_3317) * _3293.w;
                        float _3334 = 1.39999997615814208984375 / (_3331 + 1.39999997615814208984375);
                        float _3335 = _3334 * _3334;
                        float _3338 = ((1.0 - _3335) * _3324) + _3335;
                        float _3341 = _3331 * _3331;
                        float _3345 = ((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3330) / ((_3341 * 0.699999988079071044921875) + 1.0);
                        float _3349 = (-0.0) - _2803;
                        float _3350 = (-0.0) - _2804;
                        float _3351 = (-0.0) - _2805;
                        float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3366 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                        float _3367 = 1.0 - _1090;
                        float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                        float _3375 = _3374 * _3374;
                        float _3376 = _3375 * _3375;
                        float _3377 = _3356 + _3321;
                        float _3378 = _3357 + _3322;
                        float _3379 = _3358 + _3323;
                        float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                        float _3387 = dot(vec3(_1015, _1018, _1021), vec3(_3356, _3357, _3358));
                        float _4756 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3390 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3391 = dot(vec3(_1015, _1018, _1021), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                        float _4767 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                        float _3399 = _3334 * _3375;
                        float _3400 = _3399 * _3399;
                        float _3403 = ((1.0 - _3400) * _3324) + _3400;
                        float _4778 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3404 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3405 = 1.0 - _3375;
                        float _3415 = (0.5 / (((_3404 * ((_3390 * _3405) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3404 * _3405) + _3375) * _3390))) * _3404;
                        float _4789 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3426 = (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3398 * _3398) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125))) * _3330;
                        _3178 = (_3345 * _3293.x) + _3251;
                        _3179 = (_3345 * _3293.y) + _3252;
                        _3180 = (_3345 * _3293.z) + _3253;
                        _3175 = (_3426 * _3310.x) + _3248;
                        _3176 = (_3426 * _3310.y) + _3249;
                        _3177 = (_3426 * _3310.z) + _3250;
                        if (_3255 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3255;
                        }
                    }
                    frontier_phi_66_pred = _3175;
                    frontier_phi_66_pred_1 = _3180;
                    frontier_phi_66_pred_2 = _3179;
                    frontier_phi_66_pred_3 = _3178;
                    frontier_phi_66_pred_4 = _3177;
                    frontier_phi_66_pred_5 = _3176;
                }
                _2951 = frontier_phi_66_pred;
                _2961 = frontier_phi_66_pred_1;
                _2959 = frontier_phi_66_pred_2;
                _2957 = frontier_phi_66_pred_3;
                _2955 = frontier_phi_66_pred_4;
                _2953 = frontier_phi_66_pred_5;
                uint _3110 = _3109 + 1u;
                if (_3110 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3103 = _2951;
                    _3104 = _2953;
                    _3105 = _2955;
                    _3106 = _2957;
                    _3107 = _2959;
                    _3108 = _2961;
                    _3109 = _3110;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
        }
        uvec4 _2964 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2965 = _2964.z;
        uint _2967 = (_2965 >> 8u) & 15u;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        if (((4294967295u << _2967) & _2849) == 0u)
        {
            _3071 = _2950;
            _3073 = _2952;
            _3075 = _2954;
            _3077 = _2956;
            _3079 = _2958;
            _3081 = _2960;
        }
        else
        {
            float _3096 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
            float _3097 = _3096 * _2803;
            float _3098 = _3096 * _2804;
            float _3099 = _3096 * _2805;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2967 < ((_2965 >> 12u) & 15u))
            {
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3231 = _2950;
                float _3232 = _2952;
                float _3233 = _2954;
                float _3234 = _2956;
                float _3235 = _2958;
                float _3236 = _2960;
                uint _3237 = _2967;
                uint _3246;
                bool _3247;
                for (;;)
                {
                    _3246 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                    _3247 = _3246 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3247)
                    {
                        frontier_phi_77_pred = _3236;
                        frontier_phi_77_pred_1 = _3235;
                        frontier_phi_77_pred_2 = _3234;
                        frontier_phi_77_pred_3 = _3233;
                        frontier_phi_77_pred_4 = _3232;
                        frontier_phi_77_pred_5 = _3231;
                    }
                    else
                    {
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3453 = _3231;
                        float _3454 = _3232;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        uint _3459 = _3246;
                        uint _3460;
                        vec4 _3485;
                        float _3486;
                        vec4 _3501;
                        vec3 _3513;
                        vec4 _3528;
                        vec4 _3543;
                        float _3589;
                        bool _3590;
                        for (;;)
                        {
                            uint _3470 = ((_3237 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3459));
                            _3460 = (_3459 + 4294967295u) & _3459;
                            uint _3472 = _3470 * 40u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3486 = _3485.w;
                            uint _3488 = (_3470 * 40u) + 4u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3470 * 40u) + 8u;
                            _3513 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x));
                            uint _3515 = (_3470 * 40u) + 16u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3530 = (_3470 * 40u) + 20u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3470 * 40u) + 24u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3564 = (_3470 * 40u) + 28u;
                            vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3589 = fma(_2805, _3577.z, fma(_2804, _3577.y, _3577.x * _2803)) + _3577.w;
                            _3590 = !((fma(_2805, _3558.z, fma(_2804, _3558.y, _3558.x * _2803)) + _3558.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3590)
                            {
                                float _3617 = _3485.x - _2803;
                                float _3618 = _3485.y - _2804;
                                float _3619 = _3485.z - _2805;
                                float _3620 = dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619));
                                float _3623 = inversesqrt(_3620);
                                float _3624 = _3623 * _3617;
                                float _3625 = _3623 * _3618;
                                float _3626 = _3623 * _3619;
                                float _3630 = 1.0 - (_3620 / (_3486 * _3486));
                                float _4800 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3635 = sqrt(_3620) * _3501.w;
                                float _3637 = 1.39999997615814208984375 / (_3635 + 1.39999997615814208984375);
                                float _3638 = _3637 * _3637;
                                float _3641 = ((1.0 - _3638) * dot(vec3(_3624, _3625, _3626), vec3(_1015, _1018, _1021))) + _3638;
                                float _3644 = _3635 * _3635;
                                float _3648 = (fma(_2805, _3528.z, fma(_2804, _3528.y, _3528.x * _2803)) + _3528.w) / _3589;
                                float _3649 = (fma(_2805, _3543.z, fma(_2804, _3543.y, _3543.x * _2803)) + _3543.w) / _3589;
                                float _3653 = 1.0 - dot(vec2(_3648, _3649), vec2(_3648, _3649));
                                float _4816 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3655 = _3654 * (((isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0))) * _3631) / ((_3644 * 0.699999988079071044921875) + 1.0));
                                float _3667 = exp2(log2(1.0 / ((_3644 * 3.5) + 5.0)) * 0.25);
                                float _3668 = 1.0 - _1090;
                                float _3675 = sqrt(1.0 - ((1.0 - (_3668 * _3668)) * (1.0 - (_3667 * _3667))));
                                float _3676 = _3675 * _3675;
                                float _3677 = _3676 * _3676;
                                float _3678 = _3624 - _3097;
                                float _3679 = _3625 - _3098;
                                float _3680 = _3626 - _3099;
                                float _3684 = inversesqrt(dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680)));
                                float _3688 = dot(vec3(_1015, _1018, _1021), vec3((-0.0) - _3097, (-0.0) - _3098, (-0.0) - _3099));
                                float _4827 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3692 = dot(vec3(_1015, _1018, _1021), vec3(_3684 * _3678, _3684 * _3679, _3684 * _3680));
                                float _4838 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3699 = ((_3695 * _3695) * (_3677 + (-1.0))) + 1.0;
                                float _3700 = _3637 * _3676;
                                float _3701 = _3700 * _3700;
                                float _3707 = ((1.0 - _3701) * dot(vec3(_1015, _1018, _1021), vec3(_3624, _3625, _3626))) + _3701;
                                float _4849 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3709 = 1.0 - _3676;
                                float _3719 = (0.5 / (((_3708 * ((_3691 * _3709) + _3676)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3676) * _3691))) * _3708;
                                float _4860 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3729 = (_3654 * _3631) * (((_3677 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3699 * _3699) * ((_3644 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3655 * _3501.y;
                                frontier_phi_83_pred_1 = _3655 * _3501.x;
                                frontier_phi_83_pred_2 = _3729 * _3513.z;
                                frontier_phi_83_pred_3 = _3729 * _3513.y;
                                frontier_phi_83_pred_4 = _3729 * _3513.x;
                                frontier_phi_83_pred_5 = _3655 * _3501.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3737 = frontier_phi_83_pred;
                            _3736 = frontier_phi_83_pred_1;
                            _3735 = frontier_phi_83_pred_2;
                            _3734 = frontier_phi_83_pred_3;
                            _3733 = frontier_phi_83_pred_4;
                            _3738 = frontier_phi_83_pred_5;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            if (_3460 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3460;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3445;
                        frontier_phi_77_pred_1 = _3444;
                        frontier_phi_77_pred_2 = _3443;
                        frontier_phi_77_pred_3 = _3442;
                        frontier_phi_77_pred_4 = _3441;
                        frontier_phi_77_pred_5 = _3440;
                    }
                    _3082 = frontier_phi_77_pred;
                    _3080 = frontier_phi_77_pred_1;
                    _3078 = frontier_phi_77_pred_2;
                    _3076 = frontier_phi_77_pred_3;
                    _3074 = frontier_phi_77_pred_4;
                    _3072 = frontier_phi_77_pred_5;
                    uint _3238 = _3237 + 1u;
                    if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3231 = _3072;
                        _3232 = _3074;
                        _3233 = _3076;
                        _3234 = _3078;
                        _3235 = _3080;
                        _3236 = _3082;
                        _3237 = _3238;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3076;
                frontier_phi_58_59_ladder_1 = _3082;
                frontier_phi_58_59_ladder_2 = _3080;
                frontier_phi_58_59_ladder_3 = _3078;
                frontier_phi_58_59_ladder_4 = _3074;
                frontier_phi_58_59_ladder_5 = _3072;
            }
            else
            {
                frontier_phi_58_59_ladder = _2954;
                frontier_phi_58_59_ladder_1 = _2960;
                frontier_phi_58_59_ladder_2 = _2958;
                frontier_phi_58_59_ladder_3 = _2956;
                frontier_phi_58_59_ladder_4 = _2952;
                frontier_phi_58_59_ladder_5 = _2950;
            }
            _3071 = frontier_phi_58_59_ladder_5;
            _3073 = frontier_phi_58_59_ladder_4;
            _3075 = frontier_phi_58_59_ladder;
            _3077 = frontier_phi_58_59_ladder_3;
            _3079 = frontier_phi_58_59_ladder_2;
            _3081 = frontier_phi_58_59_ladder_1;
        }
        float _3086 = isnan(1.0) ? _1074 : (isnan(_1074) ? 1.0 : min(_1074, 1.0));
        _2862 = (_3086 * _3077) + _2295;
        _2864 = (_3086 * _3079) + _2297;
        _2866 = (_3086 * _3081) + _2299;
        _2868 = ((_3071 * _1058) * _3086) + _2643;
        _2870 = ((_3073 * _1060) * _3086) + _2645;
        _2872 = ((_3075 * _1061) * _3086) + _2647;
    }
    else
    {
        _2862 = _2295;
        _2864 = _2297;
        _2866 = _2299;
        _2868 = _2643;
        _2870 = _2645;
        _2872 = _2647;
    }
    float _4876 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _4887 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _4898 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _2889 = ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2862 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1074))) + ((_2868 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    float _2890 = ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2864 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1074))) + ((_2870 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    float _2891 = ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2866 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1074))) + ((_2872 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    uint _2892 = _265 + 6u;
    float _2900 = _996 / cbSceneParam._m0[86u].x;
    float _2901 = _997 / cbSceneParam._m0[86u].y;
    vec4 _2915 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2900, _2901, (log2((isnan(cbSceneParam._m0[77u].w) ? _919 : (isnan(_919) ? cbSceneParam._m0[77u].w : min(_919, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2917 = _2915.x;
    float _2918 = _2915.y;
    float _2919 = _2915.z;
    float _2920 = _2915.w;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    if (_919 > cbSceneParam._m0[78u].w)
    {
        float _2975 = isnan(_919) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _919 : min(cbSceneParam._m0[80u].w, _919));
        float _2976 = _2975 / _919;
        float _2987 = _2976 * _969;
        float _2988 = _970 * _2976;
        float _2989 = (-0.0) - _2988;
        float _2991 = _2976 * _971;
        float _2993 = (cbSceneParam._m0[77u].w * _2989) / _2975;
        float _2994 = _2993 + cbSceneParam._m0[79u].w;
        float _2995 = cbSceneParam._m0[79u].w - _2988;
        float _3001 = sqrt(((_2987 * _2987) + (_2988 * _2988)) + (_2991 * _2991));
        float _3004 = (1.0 - (cbSceneParam._m0[77u].w / _2975)) * _3001;
        float _3009 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3011 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3188;
        if (abs((_2989 - _2993) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3188 = ((((_2994 > 0.0) ? exp2(_3009 * _2994) : (2.0 - exp2(_3011 * _2994))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3004;
        }
        else
        {
            float _3132 = 1.0 / cbSceneParam._m0[80u].x;
            float _3133 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : max(_2994, _2995));
            float _3134 = isnan(_2995) ? _2994 : (isnan(_2994) ? _2995 : min(_2994, _2995));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            _3188 = ((abs(_3001 / _2989) * cbSceneParam._m0[80u].y) * ((((_3143 - _3144) * 2.0) - ((exp2(_3009 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0)))) - exp2(_3009 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0))))) * _3132)) - ((exp2(_3011 * _3143) - exp2(_3011 * _3144)) * _3132))) + (_3004 * cbSceneParam._m0[80u].z);
        }
        vec4 _3190 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2900, _2901, 1.0), 0.0);
        float _3199 = exp2((_3188 * (-1.44269502162933349609375)) * (1.0 - _3190.w));
        float _3200 = log2(_3199);
        float _3216 = log2(_2920);
        _3013 = (exp2(_3216 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].x)) * _3190.x) / cbSceneParam._m0[78u].x)) + _2917;
        _3015 = (exp2(_3216 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].y)) * _3190.y) / cbSceneParam._m0[78u].y)) + _2918;
        _3017 = (exp2(_3216 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3200 * cbSceneParam._m0[78u].z)) * _3190.z) / cbSceneParam._m0[78u].z)) + _2919;
        _3019 = _3199 * _2920;
    }
    else
    {
        _3013 = _2917;
        _3015 = _2918;
        _3017 = _2919;
        _3019 = _2920;
    }
    bool _3226;
    vec4 _3029;
    vec4 _3051;
    float _3053;
    float _3057;
    float _3058;
    float _3059;
    float _3060;
    bool _3070;
    for (;;)
    {
        _3029 = cbMatDynParam._m0[0u];
        float _3031 = roundEven(_3029.y);
        bool _3032 = _3031 == 3.0;
        float _3033 = log2(_3019);
        float _3040 = exp2(_3033 * cbSceneParam._m0[78u].x) * _2889;
        float _3041 = exp2(_3033 * cbSceneParam._m0[78u].y) * _2890;
        float _3042 = exp2(_3033 * cbSceneParam._m0[78u].z) * _2891;
        float _3049 = _985 + (-0.5);
        _3051 = cbMtdParam._m0[1u];
        _3053 = _3051.y * _3049;
        float _3056 = (_3031 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3057 = _3056 * (_3032 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3013)));
        _3058 = _3056 * (_3032 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3015)));
        _3059 = _3056 * (_3032 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3017)));
        _3060 = _3049 * 0.999000012874603271484375;
        _3070 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3070)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3060) < 0.5)
            {
                _3226 = true;
                break;
            }
        }
        uint _3167 = _1034 + uint(_3029.w);
        if ((cbInstanceData._m0[_3167].w < 1.0) && ((cbInstanceData._m0[_3167].w + _3060) < 0.5))
        {
            _3226 = true;
            break;
        }
        if ((_3053 + 1.0) < _3051.x)
        {
            _3226 = true;
            break;
        }
        _3226 = false;
        break;
    }
    float _3431;
    if (_3226)
    {
        discard_state = true;
        _3431 = 0.0;
    }
    else
    {
        _3431 = cbInstanceData._m0[_2892].w;
    }
    SV_Target.x = _3057;
    SV_Target.y = _3058;
    SV_Target.z = _3059;
    SV_Target.w = _3431;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2892].w;
    discard_exit();
}


